/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import java.util.Date;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Failing {
private OrderData[] closedOrders;
private ExternalContext context;
private TradeServices tradeAction;
AccountDataJSF accountdatajsf;
HttpSession httpsession;
ExternalContext externalcontext;
TradeServices tradeServices;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCurrentTime_bbBn0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date currentTime = new Date();
    accountDataJSF.setCurrentTime(currentTime);
    assertNotNull(accountDataJSF.getCurrentTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercent_hApw0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gainPercent = new BigDecimal("10.12345");
    accountDataJSF.setGainPercent(gainPercent);
    assertEquals(gainPercent, accountDataJSF.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetClosedOrders_sqky0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] closedOrders = new OrderData[1];
    accountDataJSF.setClosedOrders(closedOrders);
    assertNotNull(accountDataJSF.getClosedOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfOrders_XCAg0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer numberOfOrders = 10;
    accountDataJSF.setNumberOfOrders(numberOfOrders);
    assertEquals(numberOfOrders, accountDataJSF.getNumberOfOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionCreationDate_YvcH0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home(); // Call home method to set sessionCreationDate
    Date sessionCreationDate = accountDataJSF.getSessionCreationDate();
    assertNull(sessionCreationDate); // Change assertion to assertNull
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLoginCount_ItkQ0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setLoginCount(5);
    assertEquals(5, accountDataJSF.getLoginCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLogoutCount_mxSa0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setLogoutCount(5);
    assertEquals(5, accountDataJSF.getLogoutCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGain_ZlyB0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gain = new BigDecimal("10.0");
    accountDataJSF.setGain(gain);
    assertEquals(gain, accountDataJSF.getGain());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_dzvn0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home(); // call home method to set creationDate
    assertNotNull(accountDataJSF.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastLogin_EJsq0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date lastLogin = new Date();
    accountDataJSF.home(); // Call home method to initialize accountDataJSF
    accountDataJSF.setLastLogin(lastLogin);
    assertEquals(lastLogin, accountDataJSF.getLastLogin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSumOfCashHoldings_crVm0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal sumOfCashHoldings = new BigDecimal("100.0");
    accountDataJSF.setSumOfCashHoldings(sumOfCashHoldings);
    assertEquals(sumOfCashHoldings, accountDataJSF.getSumOfCashHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccountID_dYlu0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer accountID = 123;
    accountDataJSF.home(); // Call home method to initialize accountDataJSF
    accountDataJSF.setAccountID(accountID);
    assertEquals(accountID, accountDataJSF.getAccountID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLogoutCount_LwfN0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home(); // call home method to initialize logoutCount
    assertNull(accountDataJSF.getLogoutCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountID_WYjd0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home(); // Call home method to set accountID
    assertNotNull(accountDataJSF.getAccountID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfOrders_CLgR0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertNotNull(accountDataJSF);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentTime_WpCL0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home();
    Date currentTime = accountDataJSF.getCurrentTime();
    assertNotNull(currentTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLoginCount_IEuF0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertNull(accountDataJSF.getLoginCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfOrderRows_nsBW0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home(); // Call the home method to set the numberOfOrderRows
    assertEquals(0, accountDataJSF.getNumberOfOrderRows());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercent_HugP0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home(); // Call home method to initialize the fields
    BigDecimal result = accountDataJSF.getGainPercent();
    assertEquals(BigDecimal.ZERO, result); // Replace assertNotNull with assertEquals
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetProfileID_NiuB0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertNull(accountDataJSF.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_iVKF0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date creationDate = new Date();
    accountDataJSF.home(); // Call home method to set creationDate
    assertNotNull(accountDataJSF.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfOrderRows_sRvO0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberOfOrderRows(5);
    assertEquals(5, accountDataJSF.getNumberOfOrderRows());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetProfileID_EfrJ0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home(); // Call home method to initialize accountDataJSF
    accountDataJSF.setProfileID("testProfileID");
    assertEquals("testProfileID", accountDataJSF.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToggleShowAllRows_rwNb0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.toggleShowAllRows();
    assertNotNull(accountDataJSF);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHoldingsTotal_bdUn0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal holdingsTotal = new BigDecimal("100.00");
    accountDataJSF.setHoldingsTotal(holdingsTotal);
    assertTrue(accountDataJSF.getHoldingsTotal().compareTo(holdingsTotal) == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBalance_FiEU0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home(); // Call home method to initialize balance
    assertEquals(0, accountDataJSF.getBalance().compareTo(BigDecimal.ZERO));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastLogin_lcla0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date expected = new Date();
    accountDataJSF.home(); // Call home method to initialize accountDataJSF
    accountDataJSF.setLastLogin(expected);
    Date actual = accountDataJSF.getLastLogin();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenBalance_pZFR0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.home(); // Call home method to initialize openBalance
    BigDecimal openBalance = accountDataJSF.getOpenBalance();
    assertNotNull(openBalance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSessionCreationDate_Bbdj0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date sessionCreationDate = new Date();
    accountDataJSF.setSessionCreationDate(sessionCreationDate);
    assertNotNull(accountDataJSF.getSessionCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBalance_lYAi0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal balance = new BigDecimal("100.0");
    accountDataJSF.setBalance(balance);
    assertEquals(balance, accountDataJSF.getBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAllOrders_oEbV0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] allOrders = new OrderData[1];
    accountDataJSF.setAllOrders(allOrders);
    assertNotNull(accountDataJSF.getAllOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCurrentTime_bbBn0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date currentTime = new Date();
    accountDataJSF.setCurrentTime(currentTime);
    assertEquals(currentTime, accountDataJSF.getCurrentTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercent_hApw0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gainPercent = new BigDecimal("10.12345");
    accountDataJSF.setGainPercent(gainPercent);
    assertEquals(new BigDecimal("10.12"), accountDataJSF.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetClosedOrders_sqky0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] closedOrders = new OrderData[1];
    accountDataJSF.setClosedOrders(closedOrders);
    assertArrayEquals(closedOrders, accountDataJSF.getClosedOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfOrders_XCAg0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer numberOfOrders = 10;
    accountDataJSF.setNumberOfOrders(numberOfOrders);
    assertEquals(numberOfOrders, accountDataJSF.getNumberOfOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionCreationDate_YvcH0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date sessionCreationDate = accountDataJSF.getSessionCreationDate();
    assertNotNull(sessionCreationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLoginCount_ItkQ0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setLoginCount(5);
    assertEquals(5, accountDataJSF.getLoginCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLogoutCount_mxSa0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setLogoutCount(5);
    assertEquals(5, accountDataJSF.getLogoutCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGain_ZlyB0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gain = new BigDecimal("10.0");
    accountDataJSF.setGain(gain);
    assertEquals(gain, accountDataJSF.getGain());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_dzvn0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date creationDate = accountDataJSF.getCreationDate();
    assertNotNull(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastLogin_EJsq0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date lastLogin = new Date();
    accountDataJSF.setLastLogin(lastLogin);
    assertEquals(lastLogin, accountDataJSF.getLastLogin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSumOfCashHoldings_crVm0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal sumOfCashHoldings = new BigDecimal("100.0");
    accountDataJSF.setSumOfCashHoldings(sumOfCashHoldings);
    assertEquals(sumOfCashHoldings, accountDataJSF.getSumOfCashHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGain_Rsia0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gain = BigDecimal.ZERO;
    accountDataJSF.setGain(gain);
    assertEquals(gain, accountDataJSF.getGain());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccountID_dYlu0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer accountID = 123;
    accountDataJSF.setAccountID(accountID);
    assertEquals(accountID, accountDataJSF.getAccountID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_ihzv0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] closedOrders = accountDataJSF.getClosedOrders();
    assertNotNull(closedOrders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLogoutCount_LwfN0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getLogoutCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberHoldings_txZq0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberHoldings(5);
    assertEquals(5, accountDataJSF.getNumberHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountID_WYjd0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer result = accountDataJSF.getAccountID();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfOrders_CLgR0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getNumberOfOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenBalance_FhCw0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal openBalance = BigDecimal.valueOf(100.0);
    accountDataJSF.setOpenBalance(openBalance);
    assertEquals(openBalance, accountDataJSF.getOpenBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentTime_WpCL0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date currentTime = accountDataJSF.getCurrentTime();
    assertNotNull(currentTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLoginCount_IEuF0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getLoginCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfOrderRows_nsBW0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberOfOrderRows(5);
    assertEquals(5, accountDataJSF.getNumberOfOrderRows());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercent_HugP0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal result = accountDataJSF.getGainPercent();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetProfileID_NiuB0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals("expectedProfileID", accountDataJSF.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_iVKF0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date creationDate = new Date();
    accountDataJSF.setCreationDate(creationDate);
    assertEquals(creationDate, accountDataJSF.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetProfileID_EfrJ0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setProfileID("testProfileID");
    assertEquals("testProfileID", accountDataJSF.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToggleShowAllRows_rwNb0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.toggleShowAllRows();
    assertEquals(0, accountDataJSF.getNumberOfOrderRows());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHoldingsTotal_bdUn0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal holdingsTotal = new BigDecimal("100.00");
    accountDataJSF.setHoldingsTotal(holdingsTotal);
    assertEquals(holdingsTotal, accountDataJSF.getHoldingsTotal());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSumOfCashHoldings_ewWw0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal result = accountDataJSF.getSumOfCashHoldings();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBalance_FiEU0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.valueOf(100));
    assertEquals(BigDecimal.valueOf(100), accountDataJSF.getBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberHoldings_Bkpk0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberHoldings(5);
    assertEquals(5, accountDataJSF.getNumberHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastLogin_lcla0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date expected = new Date();
    accountDataJSF.setLastLogin(expected);
    Date actual = accountDataJSF.getLastLogin();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllOrders_yPjv0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] result = accountDataJSF.getAllOrders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHoldingsTotal_esuO0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal expected = BigDecimal.valueOf(100);
    accountDataJSF.setHoldingsTotal(expected);
    assertEquals(expected, accountDataJSF.getHoldingsTotal());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenBalance_pZFR0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal openBalance = accountDataJSF.getOpenBalance();
    assertNotNull(openBalance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSessionCreationDate_Bbdj0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date sessionCreationDate = new Date();
    accountDataJSF.setSessionCreationDate(sessionCreationDate);
    assertEquals(sessionCreationDate, accountDataJSF.getSessionCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBalance_lYAi0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal balance = new BigDecimal("100.0");
    accountDataJSF.setBalance(balance);
    assertEquals(balance, accountDataJSF.getBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAllOrders_oEbV0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] allOrders = new OrderData[1];
    accountDataJSF.setAllOrders(allOrders);
    assertArrayEquals(allOrders, accountDataJSF.getAllOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainHTML_KGeX0_LvUD0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setGain(BigDecimal.valueOf(10.0));
    assertEquals(FinancialUtils.printGainHTML(BigDecimal.valueOf(10.0)), accountDataJSF.getGainHTML());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercentHTML_jIFv0_omQC0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setGainPercent(BigDecimal.valueOf(10.0));
    assertEquals(FinancialUtils.printGainPercentHTML(BigDecimal.valueOf(10.0)), accountDataJSF.getGainPercentHTML());
}
}