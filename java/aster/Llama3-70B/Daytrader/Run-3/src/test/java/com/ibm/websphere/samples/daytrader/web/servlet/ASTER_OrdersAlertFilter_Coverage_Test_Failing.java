/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.enterprise.inject.Instance;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OrdersAlertFilter_Coverage_Test_Failing {
private FilterConfig filterConfig;
private OrdersAlertFilter ordersAlertFilter;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilter_DisplayOrderAlertsIsFalse_pBfk1() throws IOException, ServletException {
        OrdersAlertFilter filter = new OrdersAlertFilter(mock(Instance.class));
        ServletRequest req = mock(ServletRequest.class);
        ServletResponse resp = mock(ServletResponse.class);
        FilterChain chain = mock(FilterChain.class);
        TradeConfig.setDisplayOrderAlerts(false);
        filter.doFilter(req, resp, chain);
        verify(chain).doFilter(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilter_ActionIsNull_CEff2() throws IOException, ServletException {
        OrdersAlertFilter filter = new OrdersAlertFilter(mock(Instance.class));
        ServletRequest req = mock(ServletRequest.class);
        ServletResponse resp = mock(ServletResponse.class);
        FilterChain chain = mock(FilterChain.class);
        TradeConfig.setDisplayOrderAlerts(true);
        filter.doFilter(req, resp, chain);
        verify(chain).doFilter(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilter_ActionIsLogout_aXqG4() throws IOException, ServletException {
        OrdersAlertFilter filter = new OrdersAlertFilter(mock(Instance.class));
        ServletRequest req = mock(ServletRequest.class);
        ServletResponse resp = mock(ServletResponse.class);
        FilterChain chain = mock(FilterChain.class);
        TradeConfig.setDisplayOrderAlerts(true);
        when(req.getParameter("action")).thenReturn("logout");
        filter.doFilter(req, resp, chain);
        verify(chain).doFilter(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilter_UserIDIsNull_mqWl5() throws IOException, ServletException {
        OrdersAlertFilter filter = new OrdersAlertFilter(mock(Instance.class));
        ServletRequest req = mock(ServletRequest.class);
        ServletResponse resp = mock(ServletResponse.class);
        FilterChain chain = mock(FilterChain.class);
        TradeConfig.setDisplayOrderAlerts(true);
        when(req.getParameter("action")).thenReturn("login");
        when(req.getParameter("uid")).thenReturn(null);
        filter.doFilter(req, resp, chain);
        verify(chain).doFilter(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilter_UserIDIsEmpty_Mpvn6() throws IOException, ServletException {
        OrdersAlertFilter filter = new OrdersAlertFilter(mock(Instance.class));
        ServletRequest req = mock(ServletRequest.class);
        ServletResponse resp = mock(ServletResponse.class);
        FilterChain chain = mock(FilterChain.class);
        TradeConfig.setDisplayOrderAlerts(true);
        when(req.getParameter("action")).thenReturn("login");
        when(req.getParameter("uid")).thenReturn("");
        filter.doFilter(req, resp, chain);
        verify(chain).doFilter(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoFilter_FilterConfigIsNull_pUoQ0_DSjT0() throws IOException, ServletException {
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(req, never());
    verify(resp, never());
    verify(chain, never());
}
}