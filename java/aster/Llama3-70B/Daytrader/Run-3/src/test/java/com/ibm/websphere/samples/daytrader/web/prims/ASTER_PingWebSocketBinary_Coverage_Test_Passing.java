/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.nio.ByteBuffer;
import javax.websocket.CloseReason;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingWebSocketBinary_Coverage_Test_Passing {
private PingWebSocketBinary pingWebSocketBinary;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnClose_CloseReasonIsNull_DoNotCloseSession_ZzKu5() throws Exception {
        PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
        Session session = mock(Session.class);
        when(session.isOpen()).thenReturn(true);
        CloseReason reason = null;
        pingWebSocketBinary.onClose(session, reason);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPing_SessionIsNull_bunE2_ZbWl0() {
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    try {
        pingWebSocketBinary.onOpen(null, null);
        pingWebSocketBinary.ping(ByteBuffer.allocate(10));
        assert false; // This line should not be reached
    } catch (NullPointerException e) {
        assert true; // This line should be reached
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOnClose_SessionIsNotOpen_DoNotCloseSession_kkDE1_tUJW0() throws Exception {
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    Session session = mock(Session.class);
    when(session.isOpen()).thenReturn(false);
    verify(session, never()).close();
}
}