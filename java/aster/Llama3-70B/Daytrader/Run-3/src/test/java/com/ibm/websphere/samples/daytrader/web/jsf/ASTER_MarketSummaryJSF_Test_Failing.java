/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import java.util.Date;
import javax.enterprise.inject.Instance;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryJSF_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenTSIA_jurI0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.getMarketSummary(); // call the method under test
    assertNotNull(marketSummaryJSF.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercent_yeYM0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.getMarketSummary(); // Call the method under test
    assertNotNull(marketSummaryJSF.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenTSIA_jslc0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal openTSIA = BigDecimal.valueOf(10.0);
    marketSummaryJSF.setTSIA(openTSIA);
    assertEquals(openTSIA, marketSummaryJSF.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTopGainers_SNCn0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topGainers = new QuoteData[1];
    marketSummaryJSF.setTopGainers(topGainers);
    assertNotNull(marketSummaryJSF.getTopGainers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTSIA_EyXB0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal tSIA = BigDecimal.valueOf(10);
    marketSummaryJSF.setTSIA(tSIA);
    assertEquals(tSIA, marketSummaryJSF.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercent_LUXO0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.getMarketSummary(); // Call getMarketSummary to initialize the gainPercent
    marketSummaryJSF.setGainPercent(new BigDecimal("10.1234"));
    assertEquals(new BigDecimal("10.1234"), marketSummaryJSF.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_CoqT0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.getMarketSummary(); // Call this method to initialize the fields
    marketSummaryJSF.setVolume(10.0);
    assertEquals(10.0, marketSummaryJSF.getVolume(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSummaryDate_pfjz0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    Date summaryDate = new Date();
    marketSummaryJSF.getMarketSummary(); // call the method under test
    assertNotNull(marketSummaryJSF.getSummaryDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSummaryDate_anrA0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.getMarketSummary(); // Call the method under test
    assertNotNull(marketSummaryJSF.getSummaryDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTSIA_BrgO0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.getMarketSummary(); // Call the method under test
    assertNotNull(marketSummaryJSF.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolume_OETp0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.getMarketSummary();
    assertNull(marketSummaryJSF.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTopLosers_FMxV0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topLosers = new QuoteData[1];
    marketSummaryJSF.setTopLosers(topLosers);
    assertNotNull(marketSummaryJSF.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTopLosers_CWmv0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.getMarketSummary();
    QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
    assertNotNull(topLosers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercentHTML_JTpC0_jTbi0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.setGainPercent(BigDecimal.valueOf(10.0));
    assertEquals("10.0%", marketSummaryJSF.getGainPercentHTML());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenTSIA_jurI0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal openTSIA = marketSummaryJSF.getOpenTSIA();
    assertNotNull(openTSIA);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercent_yeYM0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal result = marketSummaryJSF.getGainPercent();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenTSIA_jslc0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal openTSIA = BigDecimal.valueOf(10.0);
    marketSummaryJSF.setOpenTSIA(openTSIA);
    assertEquals(openTSIA, marketSummaryJSF.getOpenTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTopGainers_SNCn0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topGainers = new QuoteData[1];
    marketSummaryJSF.setTopGainers(topGainers);
    assertArrayEquals(topGainers, marketSummaryJSF.getTopGainers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTSIA_EyXB0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal tSIA = BigDecimal.valueOf(10);
    marketSummaryJSF.setTSIA(tSIA);
    assertEquals(tSIA, marketSummaryJSF.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercent_LUXO0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.setGainPercent(new BigDecimal("10.1234"));
    assertEquals(new BigDecimal("10.12"), marketSummaryJSF.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_CoqT0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.setVolume(10.0);
    assertEquals(10.0, marketSummaryJSF.getVolume(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSummaryDate_pfjz0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    Date summaryDate = new Date();
    marketSummaryJSF.setSummaryDate(summaryDate);
    assertEquals(summaryDate, marketSummaryJSF.getSummaryDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSummaryDate_anrA0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    Date expected = new Date();
    marketSummaryJSF.setSummaryDate(expected);
    Date actual = marketSummaryJSF.getSummaryDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTSIA_BrgO0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal result = marketSummaryJSF.getTSIA();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolume_OETp0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    assertEquals(0.0, marketSummaryJSF.getVolume(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTopLosers_FMxV0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topLosers = new QuoteData[1];
    marketSummaryJSF.setTopLosers(topLosers);
    assertArrayEquals(topLosers, marketSummaryJSF.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTopLosers_CWmv0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
    assertNotNull(topLosers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercentHTML_JTpC0_jTbi0_fid3() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.setGainPercent(BigDecimal.valueOf(10.0));
    assertEquals(FinancialUtils.printGainPercentHTML(BigDecimal.valueOf(10.0)), marketSummaryJSF.getGainPercentHTML());
}
}