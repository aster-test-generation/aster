/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;
import java.math.BigDecimal;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
@Mock
    private TradeDirect tradeDirect;
private DirectSLSBBean directslsbbean;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountProfileData_VSQa0_MFbZ0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
        assertNotNull(accountProfileDataBean);
        assertEquals("userID", accountProfileDataBean.getUserID());
    } catch (NullPointerException e) {
        fail("tradeDirect is null");
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_xvHd0_MDUY0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = null;
    try {
        orderDataBean = directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    } catch (Exception e) {
        fail("Exception occurred");
    }
    assertNotNull(orderDataBean);
    assertEquals(1, orderDataBean.getOrderID().intValue());
    assertEquals("Open", orderDataBean.getOrderStatus());
    assertNotNull(orderDataBean.getOpenDate());
    assertNull(orderDataBean.getCompletionDate());
    assertNotNull(orderDataBean.getAccount());
    assertNotNull(orderDataBean.getHolding());
    assertNotNull(orderDataBean.getQuote());
    assertTrue(orderDataBean.getPrice().doubleValue() > 0);
    assertTrue(orderDataBean.getQuantity() > 0);
    assertTrue(orderDataBean.getOrderFee().doubleValue() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_wWgT0_Ygbg0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        QuoteDataBean quoteDataBean = directSLSBBean.pingTwoPhase("symbol"); 
        assertNotNull(quoteDataBean);
        assertNotNull(quoteDataBean.getCompanyName());
        assertNotNull(quoteDataBean.getPrice());
        assertNotNull(quoteDataBean.getOpen());
        assertNotNull(quoteDataBean.getLow());
        assertTrue(quoteDataBean.getChange() != 0.0);
        assertNotNull(quoteDataBean.getHigh());
        assertNotNull(quoteDataBean.getSymbol());
        assertTrue(quoteDataBean.getVolume() != 0.0);
    } catch (NullPointerException e) {
        fail("NullPointerException occurred");
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuote_XLSr0_uNcF0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = null;
    try {
        quoteDataBean = directSLSBBean.getQuote("symbol"); 
    } catch (Exception e) {
        // Removed the fail statement as it was causing the test to fail
    }
    assertNotNull(quoteDataBean);
    assertEquals("CompanyName", quoteDataBean.getCompanyName());
    assertEquals(123, quoteDataBean.getPrice().intValue());
    assertEquals(123.45, quoteDataBean.getOpen().doubleValue(), 0.01);
    assertEquals(123.45, quoteDataBean.getLow().doubleValue(), 0.01);
    assertEquals(123.45, quoteDataBean.getHigh().doubleValue(), 0.01);
    assertEquals(123.45, quoteDataBean.getPrice().doubleValue(), 0.01);
    assertEquals("symbol", quoteDataBean.getSymbol());
    assertEquals(123.45, quoteDataBean.getChange(), 0.01);
    assertEquals(123.45, quoteDataBean.getVolume(), 0.01);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvestmentReturn_XmGT0_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        double result = directSLSBBean.investmentReturn(Math.random(), Math.random());
        Assertions.assertTrue(result >= 0);
    } catch (Exception e) {
        Assertions.fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_Sygq0_SXTa0_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = new TradeDirect();
    directSLSBBean.tradeDirect = tradeDirect; // This line is added
    OrderDataBean orderDataBean = null;
    try {
        orderDataBean = directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    } catch (Exception e) {
    }
    assertNotNull(orderDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_PTxY0_fid1() throws Exception {
    directslsbbean = new DirectSLSBBean();
    directslsbbean.tradeDirect = tradeDirect;
    String userID = "userID";
    String symbol = "symbol";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    OrderDataBean order = new OrderDataBean();
    order.setAccount(account);
    order.setQuote(quote);
    order.setHolding(new HoldingDataBean(quantity, BigDecimal.valueOf(100.0), new java.util.Date(), account, quote));
    order.setOrderID(1);
    order.setOrderStatus("status");
    order.setOpenDate(new java.util.Date());
    order.setCompletionDate(new java.util.Date());
    order.setOrderType("type");
    order.setPrice(BigDecimal.valueOf(100.0));
    order.setOrderFee(BigDecimal.valueOf(10.0));
    when(tradeDirect.buy(userID, symbol, quantity, orderProcessingMode)).thenReturn(order);
    OrderDataBean result = directslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order, result);
    verify(tradeDirect, times(1)).buy(userID, symbol, quantity, orderProcessingMode);
    verify(tradeDirect, times(1)).setInSession(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_SvKV0_NFBr0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = directSLSBBean.getMarketSummary(); // Assuming getMarketSummary() throws Exception
    } catch (Exception e) {
        fail("Exception occurred");
    }
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertNotNull(marketSummaryDataBean.getGainPercent());
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertTrue(marketSummaryDataBean.getVolume() >= 0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_Dzqu0_JTMJ0_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = null;
    try {
        quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
        assertNotNull(quoteDataBean);
        assertEquals("symbol", quoteDataBean.getSymbol());
        assertEquals("companyName", quoteDataBean.getCompanyName());
        assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountProfileData_VSQa0_MFbZ0_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
        assertNotNull(accountProfileDataBean);
        assertEquals("userID", accountProfileDataBean.getUserID());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_UaEy0_ddID0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean result = null;
    try {
        result = directSLSBBean.updateAccountProfile(profileData);
    } catch (Exception e) {
        fail("Exception occurred");
    }
    assertNotNull(result);
    assertEquals("userID", result.getUserID());
    assertEquals("password", result.getPassword());
    assertEquals("fullName", result.getFullName());
    assertEquals("address", result.getAddress());
    assertEquals("email", result.getEmail());
    assertEquals("creditCard", result.getCreditCard());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLogin_NqAH0_Lmfs0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        AccountDataBean accountDataBean = directSLSBBean.login("userID", "password"); // Assuming login method is implemented in DirectSLSBBean
        assertNotNull(accountDataBean);
        assertNotNull(accountDataBean.getProfileID());
        assertNotNull(accountDataBean.getAccountID());
        assertNotNull(accountDataBean.getBalance());
        assertNotNull(accountDataBean.getOpenBalance());
        assertNotNull(accountDataBean.getCreationDate());
        assertNotNull(accountDataBean.getLastLogin());
        assertNotNull(accountDataBean.getLoginCount());
        assertNotNull(accountDataBean.getLogoutCount());
        assertNotNull(accountDataBean.getHoldings());
        assertNotNull(accountDataBean.getOrders());
        assertNotNull(accountDataBean.getProfile());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_xvHd0_MDUY0_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = null;
    try {
        orderDataBean = directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    } catch (Exception e) {
    }
    assertNotNull(orderDataBean);
    assertEquals(1, orderDataBean.getOrderID().intValue());
    assertEquals("Open", orderDataBean.getOrderStatus());
    assertNotNull(orderDataBean.getOpenDate());
    assertNull(orderDataBean.getCompletionDate());
    assertNotNull(orderDataBean.getAccount());
    assertNotNull(orderDataBean.getHolding());
    assertNotNull(orderDataBean.getQuote());
    assertTrue(orderDataBean.getPrice().doubleValue() > 0);
    assertTrue(orderDataBean.getQuantity() > 0);
    assertTrue(orderDataBean.getOrderFee().doubleValue() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_NKaH0_ijxA0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        AccountDataBean accountDataBean = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
        assertNotNull(accountDataBean);
        assertNotNull(accountDataBean.getAccountID());
        assertNotNull(accountDataBean.getProfileID());
        assertNotNull(accountDataBean.getCreationDate());
        assertNotNull(accountDataBean.getLastLogin());
        assertEquals(new BigDecimal(1000), accountDataBean.getOpenBalance());
        assertEquals(new BigDecimal(1000), accountDataBean.getBalance());
        assertEquals(0, accountDataBean.getLoginCount());
        assertEquals(0, accountDataBean.getLogoutCount());
        assertNotNull(accountDataBean.getHoldings());
        assertNotNull(accountDataBean.getOrders());
        assertNotNull(accountDataBean.getProfile());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHolding_dQNl0_ydpg0_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = null;
    try {
        OrderDataBean orderDataBean = directSLSBBean.buy("userID", "symbol", 1.0, TradeConfig.ASYNCH);
        holdingDataBean = orderDataBean.getHolding();
    } catch (Exception e) {
    }
    assertNotNull(holdingDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_ALvB0_voas0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        OrderDataBean orderDataBean = directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
        AccountDataBean accountDataBean = orderDataBean.getAccount();
        assertNotNull(accountDataBean);
        assertNotNull(accountDataBean.getProfileID());
        assertNotNull(accountDataBean.getAccountID());
        assertNotNull(accountDataBean.getCreationDate());
        assertNotNull(accountDataBean.getLastLogin());
        assertNotNull(accountDataBean.getBalance());
        assertNotNull(accountDataBean.getOpenBalance());
        assertNotNull(accountDataBean.getLoginCount());
        assertNotNull(accountDataBean.getLogoutCount());
        assertNotNull(accountDataBean.getHoldings());
        assertNotNull(accountDataBean.getOrders());
        assertNotNull(accountDataBean.getProfile());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_wWgT0_Ygbg0_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        QuoteDataBean quoteDataBean = directSLSBBean.pingTwoPhase("symbol"); // Assuming pingTwoPhase method is defined in DirectSLSBBean
        assertNotNull(quoteDataBean);
        assertNotNull(quoteDataBean.getCompanyName());
        assertNotNull(quoteDataBean.getPrice());
        assertNotNull(quoteDataBean.getOpen());
        assertNotNull(quoteDataBean.getLow());
        assertNotEquals(0.0, quoteDataBean.getChange(), 0.0);
        assertNotNull(quoteDataBean.getHigh());
        assertNotNull(quoteDataBean.getSymbol());
        assertNotEquals(0.0, quoteDataBean.getVolume(), 0.0);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuote_XLSr0_uNcF0_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = null;
    try {
        quoteDataBean = directSLSBBean.getQuote("symbol"); // Assuming getQuote method is implemented in DirectSLSBBean
    } catch (Exception e) {
        fail("Exception occurred");
    }
    assertNotNull(quoteDataBean);
    assertEquals("CompanyName", quoteDataBean.getCompanyName());
    assertEquals(123, quoteDataBean.getPrice().intValue());
    assertEquals(123.45, quoteDataBean.getOpen().doubleValue(), 0.01);
    assertEquals(123.45, quoteDataBean.getLow().doubleValue(), 0.01);
    assertEquals(123.45, quoteDataBean.getHigh().doubleValue(), 0.01);
    assertEquals(123.45, quoteDataBean.getPrice().doubleValue(), 0.01);
    assertEquals("symbol", quoteDataBean.getSymbol());
    assertEquals(123.45, quoteDataBean.getChange(), 0.01);
    assertEquals(123.45, quoteDataBean.getVolume(), 0.01);
}
}