/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;
import java.util.Set;
import javax.enterprise.inject.spi.Bean;
import javax.enterprise.inject.spi.BeanManager;
import javax.naming.InitialContext;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.MockedConstruction;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingCDIBean_Test_Failing {
private static int getBeanManagerHitCountJNDI = 0;
PingCDIBean pingcdibean;
InitialContext initialcontext;
MockedConstruction<InitialContext> mockedInitialContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBeanMangerViaJNDI_2() throws Exception{
        mockedInitialContext = mockConstruction(InitialContext.class);
        initialcontext = mock(InitialContext.class);
        pingcdibean = new PingCDIBean();
        // given
        BeanManager beanManager = mock(BeanManager.class);
        Set<Bean<?>> beans = Set.of(mock(Bean.class));
        when(initialcontext.lookup("java:comp/BeanManager")).thenReturn(beanManager);
        when(beanManager.getBeans(Object.class)).thenReturn(beans);
        // when
        int result = pingcdibean.getBeanMangerViaJNDI();
        // then
        verify(initialcontext).lookup("java:comp/BeanManager");
        verify(beanManager).getBeans(Object.class);
        assertEquals(1, getBeanManagerHitCountJNDI);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeanMangerViaJNDI_ReturnsInt_aZMl1_bjKC0_fid1() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    try {
        int result = pingCDIBean.getBeanMangerViaJNDI();
        assertEquals(1, result);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeanMangerViaCDICurrent_WhenBeansAreAvailable_thenReturnBeanManagerHitCountSPIPlusOne_pdbQ0_XXUH0_fid1() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    try {
        int result = pingCDIBean.getBeanMangerViaJNDI(); 
        assertNotEquals(0, result);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBeanMangerViaJNDI() throws Exception{
        mockedInitialContext = mockConstruction(InitialContext.class);
        initialcontext = mock(InitialContext.class);
        pingcdibean = new PingCDIBean();
        // given
        BeanManager beanManager = mock(BeanManager.class);
        Set<Bean<?>> beans = Set.of(mock(Bean.class));
        when(initialcontext.lookup("java:comp/BeanManager")).thenReturn(beanManager);
        when(beanManager.getBeans(Object.class)).thenReturn(beans);
        // when
        int result = pingcdibean.getBeanMangerViaJNDI();
        // then
        assertEquals(1, result);
        assertEquals(1, getBeanManagerHitCountJNDI);
        verify(initialcontext).lookup("java:comp/BeanManager");
        verify(beanManager).getBeans(Object.class);
    }
}