/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.HashMap;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Collection;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_KeySequenceDirect_Test_Passing {
private static HashMap<String, Collection<?>> keyMap = new HashMap<String, Collection<?>>();
KeySequenceDirect keysequencedirect;
Connection connection;
PreparedStatement preparedstatement;
ResultSet resultset;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextID() throws Exception{
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        keysequencedirect = new KeySequenceDirect();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true, false);
        when(resultset.getInt(1)).thenReturn(1);
        Integer nextID = KeySequenceDirect.getNextID(connection, "keyName", true, true);
        assertEquals(Integer.valueOf(1), nextID);
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(preparedstatement, times(1)).executeQuery();
        verify(resultset, times(2)).next();
        verify(resultset, times(1)).getInt(1);
    }
}