/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_WhenOrderIDIsNull_ThenReturn0_pfeY0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    assertEquals(0, orderDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_QuoteNotNull_xDow0() {
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(5.0), null, quote, null);
    assertEquals("AAPL", order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_QuoteNullAndSymbolNull_MnEG2() {
    OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(5.0), null, null, null);
    assertNull(order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NotInstanceOfOrderDataBean_AZFf0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Object object = new Object();
    assertFalse(orderDataBean.equals(object));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_yGmu1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    assertFalse(orderDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderID_ZUYE2() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertFalse(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameOrderID_gCyl3() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertTrue(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSell_SellOrder_ReturnsTrue_XOXi0() {
    OrderDataBean order = new OrderDataBean("sell", "", null, null, 0, null, null, null, null, null);
    boolean result = order.isSell();
    assert(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSell_BuyOrder_ReturnsFalse_xxAA1() {
    OrderDataBean order = new OrderDataBean("buy", "", null, null, 0, null, null, null, null, null);
    boolean result = order.isSell();
    assert(!result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSell_NullOrderType_ThrowsNullPointerException_XMSS2() {
    OrderDataBean order = new OrderDataBean(null, "", null, null, 0, null, null, null, null, null);
    try {
      order.isSell();
      assert(false);
    } catch (NullPointerException e) {
      assert(true);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSell_EmptyOrderType_ReturnsFalse_HmxO3() {
    OrderDataBean order = new OrderDataBean("", "", null, null, 0, null, null, null, null, null);
    boolean result = order.isSell();
    assert(!result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_WithBuyOrderType_xXJp0() {
    OrderDataBean order = new OrderDataBean("buy", "", null, null, 0, null, null, null, null, null);
    assertTrue(order.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_WithSellOrderType_cXya1() {
    OrderDataBean order = new OrderDataBean("sell", "", null, null, 0, null, null, null, null, null);
    assertFalse(order.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_WithEmptyOrderType_fiwU3() {
    OrderDataBean order = new OrderDataBean("", "", null, null, 0, null, null, null, null, null);
    assertFalse(order.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_Completed_tqXE0() {
    OrderDataBean order = new OrderDataBean(1, "market", "completed", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_AlertCompleted_UQQZ1() {
    OrderDataBean order = new OrderDataBean(1, "market", "alertcompleted", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_Cancelled_ozVU2() {
    OrderDataBean order = new OrderDataBean(1, "market", "cancelled", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_NotCompleted_bsXq3() {
    OrderDataBean order = new OrderDataBean(1, "market", "pending", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_Cancelled_KYzu0() {
    OrderDataBean order = new OrderDataBean("LIMIT", "cancelled", null, null, 0, null, null, null, null, null);
    assertTrue(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_NotCancelled_EEoV1() {
    OrderDataBean order = new OrderDataBean("LIMIT", "filled", null, null, 0, null, null, null, null, null);
    assertFalse(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_EmptyOrderStatus_ksfK3() {
    OrderDataBean order = new OrderDataBean("LIMIT", "", null, null, 0, null, null, null, null, null);
    assertFalse(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_WhenOrderIDIsNotNull_ThenReturnOrderIDHashCode_jZlI1_dypR0() {
    Integer orderID = 123;
    OrderDataBean orderDataBean = new OrderDataBean(orderID, "", "", null, null, 0, null, null, "");
    assertEquals(orderID.hashCode(), orderDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_QuoteNull_mKEy1_gJOF0() {
    OrderDataBean order = new OrderDataBean(null, "SELL", "CLOSED", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(5.0), "MSFT");
    assertEquals("MSFT", order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_WhenOrderIDIsNotNullAndHasValue_ThenReturnHash_TGmf2_VuUM0() {
    Integer orderID = 123;
    OrderDataBean orderDataBean = new OrderDataBean(orderID, "", "", null, null, 0, null, null, "");
    int expectedHash = 0;
    expectedHash += (orderID != null ? orderID.hashCode() : 0);
    assertEquals(expectedHash, orderDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_Open_lcvB0_eTUD0() {
    OrderDataBean order = new OrderDataBean(null, "open", "open", new Date(), null, 10.0, BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
    assertTrue(order.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_Closed_ULwc2_eKkQ0() {
    OrderDataBean order = new OrderDataBean(null, "closed", "closed", new Date(), new Date(), 10.0, BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
    assertFalse(order.isCancelled());
  }
}