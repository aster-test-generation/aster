/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_VfTa0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    assertEquals(new BigDecimal("10.0"), orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_nWaq0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType_mTNj0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    orderData.setOrderType("newType");
    assertEquals("newType", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_cpxX0() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, BigDecimal.ZERO, "buy", 10.0, "AAPL");
    orderData.setPrice(BigDecimal.valueOf(100.0));
    assertEquals(BigDecimal.valueOf(100.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus_GgDO0() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, BigDecimal.ZERO, "buy", 10.0, "AAPL", BigDecimal.TEN);
    orderData.setOrderStatus("closed");
    assertEquals("closed", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatus_ubRh0() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, BigDecimal.ZERO, "buy", 10.0, "AAPL");
    assertEquals("open", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_bOae0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    assertEquals("symbol", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_eUqA0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    assertEquals(1, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID2_gmtY1() {
    OrderData orderData = new OrderData(2, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    assertEquals(2, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_wMBc0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.valueOf(10), "type", 10, "symbol");
    orderData.setSymbol("newSymbol");
    assertEquals("newSymbol", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_iiIu0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.ZERO, "type", 1.0, "symbol");
    BigDecimal fee = new BigDecimal("10.0");
    orderData.setOrderFee(fee);
    assertEquals(fee, orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_aKOo0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("10.0"));
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_hnue0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    Date date = new Date();
    orderData.setOpenDate(date);
    assertEquals(date, orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDate_Cpbu0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    assertEquals(new Date(), orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_BGKg0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    assertEquals(new BigDecimal("20.0"), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_OFmJ0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    assertEquals("type", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderID_dkbl0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.valueOf(10), "type", 10, "symbol");
    orderData.setOrderID(2);
    assertEquals(2, orderData.getOrderID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_NbDS0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    orderData.setQuantity(20.0);
    assertEquals(20.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotal_qxEq0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.valueOf(10), "type", 10, "symbol");
    orderData.setTotal(BigDecimal.valueOf(100));
    assertEquals(BigDecimal.valueOf(100), orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_aaFZ0_kYQF0() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, BigDecimal.ZERO, "buy", 10.0, "AAPL", BigDecimal.valueOf(100.0));
    BigDecimal total = BigDecimal.valueOf(orderData.getOpenDate().getTime()).multiply(orderData.getOrderFee()).multiply(BigDecimal.valueOf(orderData.getQuantity()));
  }
}