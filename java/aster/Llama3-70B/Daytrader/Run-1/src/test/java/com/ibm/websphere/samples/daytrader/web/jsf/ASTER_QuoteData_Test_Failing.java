/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteData_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_JPzE0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), "symbol", BigDecimal.valueOf(15.0), BigDecimal.valueOf(3.0), "companyName", 100.0, 2.0);
    BigDecimal gain = quoteData.getGain();
    assertEquals(BigDecimal.valueOf(5.0), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_iUpQ0() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("11.0"), "symbol");
    assertEquals(new BigDecimal("10.0"), quoteData.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_AttE0() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("5.0"), "symbol", new BigDecimal("15.0"), new BigDecimal("3.0"), "companyName", 100.0, 2.0);
    BigDecimal gainPercent = quoteData.getGainPercent();
    assertEquals(new BigDecimal("100.0"), gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTML_Skro0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(5), "symbol", BigDecimal.valueOf(15), BigDecimal.valueOf(0), "companyName", 100.0, 5.0);
    assertEquals("<span style='color:green'>100.0%</span>", quoteData.getGainPercentHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_JPzE0_fid1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(-5.00), "symbol", BigDecimal.valueOf(1 - 5.00), BigDecimal.valueOf(3.0), "companyName", 100.0, 2.0);
    BigDecimal gain = quoteData.getGain();
    assertEquals(BigDecimal.valueOf(-5.00), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_AttE0_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("5.0"), "symbol", new BigDecimal("15.0"), new BigDecimal("3.0"), "companyName", -50.00, 2.0);
    BigDecimal gainPercent = quoteData.getGainPercent();
    assertEquals(new BigDecimal("100.0"), gainPercent);
  }
}