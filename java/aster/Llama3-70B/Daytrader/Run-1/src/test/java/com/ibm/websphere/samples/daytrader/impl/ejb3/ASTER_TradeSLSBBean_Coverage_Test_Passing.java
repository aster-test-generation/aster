/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.jms.Queue;
import javax.jms.TextMessage;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeSLSBBean_Coverage_Test_Passing {
  private TypedQuery<OrderDataBean> q;
  private Iterator<OrderDataBean> itr;
  private TypedQuery<QuoteDataBean> typedQuery;
  private Log log;
  private AccountDataBean account;
  private TextMessage textMessage;
  private Queue queue;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_oOLX0() {
    MarketSummaryDataBean marketSummaryDataBean = mock(MarketSummaryDataBean.class);
    MarketSummarySingleton marketSummarySingleton = mock(MarketSummarySingleton.class);
    when(marketSummarySingleton.getMarketSummaryDataBean()).thenReturn(marketSummaryDataBean);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean result = tradeSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnPositive_Hjig0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 100.0;
    double netValue = 120.0;
    double expectedReturn = 0.2;
    double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedReturn, actualReturn, 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnNegative_NCuh1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 100.0;
    double netValue = 80.0;
    double expectedReturn = -0.2;
    double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedReturn, actualReturn, 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnZero_wLTU2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 100.0;
    double netValue = 100.0;
    double expectedReturn = 0.0;
    double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedReturn, actualReturn, 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_EyMN0() {
    javax.persistence.EntityManager entityManager = mock(javax.persistence.EntityManager.class);
    QuoteDataBean quoteDataBean = mock(QuoteDataBean.class);
    when(entityManager.find(QuoteDataBean.class, "symbol")).thenReturn(quoteDataBean);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean result = tradeSLSBBean.getQuote("symbol");
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_yDph0() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange_WhenPublishQuotePriceChangeIsFalse_DoNothing_ZLua0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    TradeConfig tradeConfig = mock(TradeConfig.class);
    when(TradeConfig.getPublishQuotePriceChange()).thenReturn(false);
    tradeSLSBBean.publishQuotePriceChange(new QuoteDataBean("symbol", "company", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), 10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), 10.0);
    verifyNoMoreInteractions(tradeConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_xTbI0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    EntityManager entityManager = mock(EntityManager.class);
    CriteriaBuilder criteriaBuilder = mock(CriteriaBuilder.class);
    CriteriaQuery<OrderDataBean> criteriaQuery = mock(CriteriaQuery.class);
    Root<OrderDataBean> orders = mock(Root.class);
    TypedQuery<OrderDataBean> q = mock(TypedQuery.class);
    List<OrderDataBean> results = new ArrayList<>();
    when(entityManager.getCriteriaBuilder()).thenReturn(criteriaBuilder);
    when(criteriaBuilder.createQuery(OrderDataBean.class)).thenReturn(criteriaQuery);
    when(criteriaQuery.from(OrderDataBean.class)).thenReturn(orders);
    when(entityManager.createQuery(criteriaQuery)).thenReturn(q);
    when(q.getResultList()).thenReturn(results);
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("userID");
    assertNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_ULos0_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "userID";
    try {
      tradeSLSBBean.getClosedOrders(userID);
    } catch (Exception e) {
      assertNotNull(e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_XhHC0_fid2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    try {
      tradeSLSBBean.getClosedOrders(userID);
    } catch (Exception e) {
      assertNotNull(e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_vxGe0_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.getClosedOrders("userID");
    } catch (Exception e) {
      assertNotNull(e.getMessage());
    }
  }
}