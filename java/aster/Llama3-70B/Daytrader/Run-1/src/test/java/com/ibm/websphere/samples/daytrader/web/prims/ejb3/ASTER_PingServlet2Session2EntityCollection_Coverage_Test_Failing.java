/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import com.ibm.websphere.samples.daytrader.web.prims.PingServlet;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet2Session2EntityCollection_Coverage_Test_Failing {
  private PingServlet2Session2EntityCollection servlet;
  private ServletConfig config;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_xFXt0() {
    PingServlet2Session2EntityCollection pingServlet2Session2EntityCollection = new PingServlet2Session2EntityCollection();
    String expected = "web primitive, tests Servlet to Session to Entity returning a collection of Entity EJBs";
    String actual = pingServlet2Session2EntityCollection.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_CallsDoGet_kVte0() throws Exception {
    PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req, times(1)).getAttributeNames();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NoException_korV1() throws Exception {
    PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_1_mWMK0() throws IOException, ServletException {
    PingServlet2Session2EntityCollection pingServlet = new PingServlet2Session2EntityCollection();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_2_Jaud1() throws IOException, ServletException {
    PingServlet2Session2EntityCollection pingServlet = new PingServlet2Session2EntityCollection();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_3_uCLj2_ABUC0() throws IOException, ServletException {
    PingServlet pingServlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_7_joBZ6_pGCf0() throws IOException, ServletException {
    PingServlet pingServlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    int iter = TradeConfig.getPrimIterations();
    verify(req, atLeastOnce()); // verify that the req object was interacted with at least once
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NoException_korV1_oUHK0() throws Exception {
    PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_3_uCLj2_ABUC0_fid1() throws IOException, ServletException {
    PingServlet2Session2EntityCollection pingServlet = new PingServlet2Session2EntityCollection();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_7_joBZ6_pGCf0_fid1() throws IOException, ServletException {
    PingServlet2Session2EntityCollection pingServlet = new PingServlet2Session2EntityCollection();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    int iter = TradeConfig.getPrimIterations();
    verify(req, times(iter)); // verify that the req object was interacted with 'iter' number of times
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_Thvk0() throws javax.servlet.ServletException {
    servlet = new PingServlet2Session2EntityCollection();
    config = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_pjJa1() throws ServletException {
    servlet.init(config);
    verify(config).getServletContext(); // assuming super.init(config) calls getServletContext()
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_NoExceptionThrown_IuzY4() throws ServletException {
    servlet.init(config);
  }
}