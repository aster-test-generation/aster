/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple2_Test_Failing {
  private static LocalDateTime initTime;
  PingServletBeanValSimple2 pingservletbeanvalsimple2;
  HttpServlet httpservlet;
  ServletConfig servletConfig;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;
  private static int hitCount = 0;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    pingservletbeanvalsimple2 = new PingServletBeanValSimple2();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingservletbeanvalsimple2.doPost(httpservletrequest, httpservletresponse);
    verify(httpservletrequest, times(1)).getAttributeNames();
    verify(httpservletresponse, times(1)).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_Oiml0() throws ServletException, IOException {
    PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServletBeanValSimple2.doPost(req, res);
    verify(req).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_xrzw0() {
    PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
    String result = pingServletBeanValSimple2.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_FIKL0() {
    PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
      when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
      pingServletBeanValSimple2.doGet(req, res);
      verify(res).setContentType("text/html");
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet_kuZc0() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservletrequest = mock(HttpServletRequest.class);
    pingservletbeanvalsimple2 = new PingServletBeanValSimple2();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingservletbeanvalsimple2.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(servletoutputstream).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_Oiml0_fid2() throws ServletException, IOException {
    PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
      pingServletBeanValSimple2.doGet(req, res);
    } catch (Exception e) {
      fail("Exception occurred");
    }
    verify(req, never()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_xrzw0_fid2() {
    PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
    String result = pingServletBeanValSimple2.getClass().getAnnotation(javax.servlet.annotation.WebServlet.class).description();
    assertNotNull(result);
  }
}