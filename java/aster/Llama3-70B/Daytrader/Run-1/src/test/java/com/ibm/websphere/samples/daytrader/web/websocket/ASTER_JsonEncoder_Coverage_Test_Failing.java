/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.EncodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonEncoder_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncode_CreateJsonObjectBuilder_nOPi0() throws EncodeException {
    JsonEncoder jsonEncoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("testKey");
    message.setValue("testValue");
    String result = jsonEncoder.encode(message);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncode_AddKey_lvQI1() throws EncodeException {
    JsonEncoder jsonEncoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("testKey");
    message.setValue("testValue");
    String result = jsonEncoder.encode(message);
    assertTrue(result.contains("testKey"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncode_AddValue_YqPM2() throws EncodeException {
    JsonEncoder jsonEncoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("testKey");
    message.setValue("testValue");
    String result = jsonEncoder.encode(message);
    assertTrue(result.contains("testValue"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncode_ReturnJsonString_LyPe3() throws EncodeException {
    JsonEncoder jsonEncoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("testKey");
    message.setValue("testValue");
    String result = jsonEncoder.encode(message);
    assertNotNull(result);
    assertTrue(result.startsWith("{"));
    assertTrue(result.endsWith("}"));
  }
}