/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import com.ibm.websphere.samples.daytrader.web.prims.PingServlet;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet2Entity_Coverage_Test_Failing {
  private ServletConfig servletConfig;
  private PingServlet2Entity pingServlet2Entity;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_Sssk0() {
    PingServlet2Entity pingServlet2Entity = new PingServlet2Entity();
    String expected = "web primitive, tests Servlet to Entity EJB path";
    String actual = pingServlet2Entity.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet1_Liqc0() throws IOException, ServletException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet2_jPpY1() throws IOException, ServletException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet3_fJYh2_XLHV0() throws IOException, ServletException {
    PingServlet servlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet8_mjES7_XsKL0() throws IOException, ServletException {
    PingServlet pingServlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    TradeConfig tradeConfig = mock(TradeConfig.class);
    String symbol = "mockSymbol";
    when(tradeConfig.getPrimIterations()).thenReturn(1);
    when(tradeConfig.rndSymbol()).thenReturn(symbol);
    pingServlet.init();
    pingServlet.doGet(req, res);
    verify(tradeConfig, times(1)).rndSymbol();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet12_vuZO11_HbIP0() throws IOException, ServletException {
    PingServlet servlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    java.io.PrintWriter out = mock(java.io.PrintWriter.class);
    when(res.getWriter()).thenReturn(out);
    servlet.doGet(req, res);
    verify(out).println(anyString());
    verify(out).println(contains("</font><HR></body></html>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet4_ahQc3_hzTd0() throws IOException, ServletException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet3_fJYh2_XLHV0_fid1() throws IOException, ServletException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet8_mjES7_XsKL0_fid1() throws IOException, ServletException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    TradeConfig tradeConfig = mock(TradeConfig.class);
    String symbol = "mockSymbol";
    when(tradeConfig.getPrimIterations()).thenReturn(1);
    when(tradeConfig.rndSymbol()).thenReturn(symbol);
    servlet.doGet(req, res);
    verify(tradeConfig, times(1)).rndSymbol();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet12_vuZO11_HbIP0_fid1() throws IOException, ServletException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    java.io.PrintWriter out = mock(java.io.PrintWriter.class);
    when(res.getWriter()).thenReturn(out);
    servlet.doGet(req, res);
    verify(out).println(anyString());
    verify(out).println(endsWith("</font><HR></body></html>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_uqvE0() throws javax.servlet.ServletException {
    pingServlet2Entity = new PingServlet2Entity();
    servletConfig = mock(ServletConfig.class);
  }
}