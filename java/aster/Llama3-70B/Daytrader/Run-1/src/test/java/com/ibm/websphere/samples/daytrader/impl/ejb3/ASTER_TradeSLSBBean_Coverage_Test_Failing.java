/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.Log;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import javax.jms.Queue;
import javax.jms.TextMessage;
import javax.persistence.TypedQuery;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeSLSBBean_Coverage_Test_Failing {
  private TypedQuery<OrderDataBean> q;
  private Iterator<OrderDataBean> itr;
  private TypedQuery<QuoteDataBean> typedQuery;
  private Log log;
  private AccountDataBean account;
  private TextMessage textMessage;
  private Queue queue;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_ReturnOrder_yLQK1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "type";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_BuyOrder_emBw0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("buy");
    OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
    assertNotNull(result.getHolding());
    assertEquals("closed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_SellOrder_HoldingNotNull_FvQG1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(2);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("sell");
    order.setHolding(new HoldingDataBean());
    OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
    assertNull(result.getHolding());
    assertEquals("closed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RandomSharesTraded_FYJL2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double sharesTraded = tradeSLSBBean.pingTwoPhase("symbol").getVolume();
    Assertions.assertTrue(sharesTraded > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_ChangeFactor_IlGD5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    BigDecimal changeFactor = tradeSLSBBean.pingTwoPhase("symbol").getPrice();
    Assertions.assertNotNull(changeFactor);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_BuyOrder_emBw0_1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("buy");
    OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
    assertNotNull(result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_BuyOrder_emBw0_2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("buy");
    OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
    assertEquals("closed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_SellOrder_HoldingNotNull_FvQG1_1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(2);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("sell");
    order.setHolding(new HoldingDataBean());
    OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
    assertNull(result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_SellOrder_HoldingNotNull_FvQG1_2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(2);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("sell");
    order.setHolding(new HoldingDataBean());
    OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
    assertEquals("closed", result.getOrderStatus());
  }

  @Test
  public void testGetClosedOrders_rNbb0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("userID");
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_ULos0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "userID";
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_MoqS0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_MoqS0_fid2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    try {
      tradeSLSBBean.getClosedOrders(userID);
    } catch (Exception e) {
      assertEquals("EJB TradeSLSBBean.getClosedOrders - error", e.getMessage());
    }
  }
}