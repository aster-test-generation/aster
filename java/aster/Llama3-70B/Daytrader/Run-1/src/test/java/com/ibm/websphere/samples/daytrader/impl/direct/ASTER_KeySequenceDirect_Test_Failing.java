/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_KeySequenceDirect_Test_Failing {
  private static HashMap<String, Collection<?>> keyMap = new HashMap<String, Collection<?>>();
  KeySequenceDirect keysequencedirect;
  Connection connection;
  PreparedStatement preparedstatement;
  ResultSet resultset;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetNextID_1() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    resultset = mock(ResultSet.class);
    keysequencedirect = new KeySequenceDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(resultset.next()).thenReturn(true);
    when(resultset.getInt(1)).thenReturn(1);
    Integer nextID = KeySequenceDirect.getNextID(connection, "keyName", true, true);
    verify(connection, times(1)).prepareStatement(any(String.class));
    verify(preparedstatement, times(1)).executeQuery();
    verify(resultset, times(1)).next();
    verify(resultset, times(1)).getInt(1);
    assertNotNull(nextID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetNextID_2() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    resultset = mock(ResultSet.class);
    keysequencedirect = new KeySequenceDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(resultset.next()).thenReturn(true);
    when(resultset.getInt(1)).thenReturn(1);
    Integer nextID = KeySequenceDirect.getNextID(connection, "keyName", true, true);
    verify(connection, times(1)).prepareStatement(any(String.class));
    verify(preparedstatement, times(1)).executeQuery();
    verify(resultset, times(1)).next();
    verify(resultset, times(1)).getInt(1);
    assertEquals(Integer.valueOf(1), nextID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextID_KeyMapDoesNotContainKey_mNBv1_tUHv0() {
    Connection conn = mock(Connection.class);
    String keyName = "test";
    boolean inSession = true;
    boolean inGlobalTxn = true;
    KeySequenceDirect keySequenceDirect = new KeySequenceDirect();
    Integer nextID = null;
    try {
      nextID = KeySequenceDirect.getNextID(conn, keyName, inSession, inGlobalTxn);
    } catch (Exception e) {
      fail("An unexpected exception occurred");
    }
    assertNotNull(nextID);
    assertEquals(new Integer(1), nextID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetNextID() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    resultset = mock(ResultSet.class);
    keysequencedirect = new KeySequenceDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(resultset.next()).thenReturn(true);
    when(resultset.getInt(1)).thenReturn(1);
    Integer nextID = KeySequenceDirect.getNextID(connection, "keyName", true, true);
    assertNotNull(nextID);
    assertEquals(Integer.valueOf(1), nextID);
    verify(connection, times(1)).prepareStatement(any(String.class));
    verify(preparedstatement, times(1)).executeQuery();
    verify(resultset, times(1)).next();
    verify(resultset, times(1)).getInt(1);
  }
}