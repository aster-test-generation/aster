/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_Ulbg0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    accountDataBean.setLoginCount(5);
    assertEquals(5, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0_1() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0_2() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0_3() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertTrue(accountDataBean.getLoginCount() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0_4() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertTrue(accountDataBean.getLogoutCount() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0_5() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0_6() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0_7() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0_8() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertTrue(accountDataBean.getOpenBalance().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0_9() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_YKkN1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    int logoutCount = 5;
    accountDataBean.setLogoutCount(logoutCount);
    assertEquals(logoutCount, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastLogin_rZBB0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    Date lastLogin = new Date();
    accountDataBean.setLastLogin(lastLogin);
    assertEquals(lastLogin, accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withAccountID_nIig0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    int expected = 1;
    int actual = accountDataBean.hashCode();
    assert expected == actual;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withoutAccountID_EhTu1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    int expected = 0;
    int actual = accountDataBean.hashCode();
    assert expected == actual;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldings_GfRQ0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<HoldingDataBean> holdings = new ArrayList<>();
    holdings.add(new HoldingDataBean());
    accountDataBean.setHoldings(holdings);
    assertEquals(holdings, accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_gBjQ0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    Date creationDate = accountDataBean.getCreationDate();
    assertNotNull(creationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_gdLI0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("20.0"), "profileID");
    assertEquals(2, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_Cqxq0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("20.0"), "profileID");
    String expected = "<BR>Account Data for account: <B>1</B>" + "<LI>   loginCount:2</LI>" + "<LI>  logoutCount:3</LI>" + "<LI>    lastLogin:" + accountDataBean.getLastLogin() + "</LI>" + "<LI> creationDate:" + accountDataBean.getCreationDate() + "</LI>" + "<LI>      balance:10.0</LI>" + "<LI>  openBalance:20.0</LI>" + "<LI>    profileID:profileID</LI>";
    assertEquals(expected, accountDataBean.toHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_tysX0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    accountDataBean.setHoldings(new ArrayList<HoldingDataBean>());
    Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountID_iCxx0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Integer accountID = 1;
    accountDataBean.setAccountID(accountID);
    assertEquals(accountID, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID1_rYQr0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(Integer.valueOf(1), accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID2_hNQB1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_FEJG0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    assertTrue(accountDataBean.equals(accountDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_xovR1() {
    Object object = new Object();
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    assertFalse(accountDataBean.equals(object));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_WQcM2() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    assertTrue(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentAccountID_tRyU3() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(2, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    assertTrue(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_eFTz0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "profileID");
    int initialLogoutCount = accountDataBean.getLogoutCount();
    accountDataBean.logout();
    assertEquals(initialLogoutCount + 1, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_xkyQ0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("20.0"), "profileID");
    String expected = "\n\tAccount Data for account: 1\n\t\t   loginCount:2\n\t\t  logoutCount:3\n\t\t    lastLogin:" + accountDataBean.getLastLogin() + "\n\t\t creationDate:" + accountDataBean.getCreationDate() + "\n\t\t      balance:10.0\n\t\t  openBalance:20.0\n\t\t    profileID:profileID";
    assertEquals(expected, accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_loOp0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    BigDecimal openBalance = BigDecimal.valueOf(200);
    accountDataBean.setOpenBalance(openBalance);
    assertEquals(openBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_domG0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID1");
    assertEquals("profileID1", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_SwZw0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    Date date = new Date();
    accountDataBean.setCreationDate(date);
    assertEquals(date, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_TLlN0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setProfileID("testProfileID");
    assertEquals("testProfileID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfile_urfS0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "profileID");
    AccountProfileDataBean profile = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountDataBean.setProfile(profile);
    Assertions.assertEquals(profile, accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrders_yRmF0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    Collection<OrderDataBean> orders = new ArrayList<>();
    orders.add(new OrderDataBean());
    accountDataBean.setOrders(orders);
    assertEquals(orders, accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_MCjS0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("20.0"), "profileID");
    assertNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_szMw0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    Date lastLogin = accountDataBean.getLastLogin();
    assertNotNull(lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_SFdy0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("50.0"), "profileID");
    assertEquals(new BigDecimal("100.0"), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_YrkW0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("5.0"), "profileID");
    assertEquals(new BigDecimal("5.0"), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_RoAU0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    BigDecimal balance = BigDecimal.valueOf(200);
    accountDataBean.setBalance(balance);
    assertEquals(balance, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_ssrO0_GRta0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("20.0"), "profileID");
    accountDataBean.setBalance(new BigDecimal("10.0"));
    accountDataBean.print();
    Date currentDate = new Date();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullAccountID_PpFX4_aSrS0() {
    AccountDataBean accountDataBean1 = new AccountDataBean(0, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    assertTrue(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_YXKY0_TGNq0_1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAddress("address");
    profile.setCreditCard("creditCard");
    profile.setEmail("email");
    profile.setFullName("fullName");
    profile.setPassword("password");
    profile.setUserID("userID");
    accountDataBean.setProfile(profile);
    AccountProfileDataBean result = accountDataBean.getProfile();
    assertEquals(profile.getAddress(), result.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_YXKY0_TGNq0_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAddress("address");
    profile.setCreditCard("creditCard");
    profile.setEmail("email");
    profile.setFullName("fullName");
    profile.setPassword("password");
    profile.setUserID("userID");
    accountDataBean.setProfile(profile);
    AccountProfileDataBean result = accountDataBean.getProfile();
    assertEquals(profile.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_YXKY0_TGNq0_3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAddress("address");
    profile.setCreditCard("creditCard");
    profile.setEmail("email");
    profile.setFullName("fullName");
    profile.setPassword("password");
    profile.setUserID("userID");
    accountDataBean.setProfile(profile);
    AccountProfileDataBean result = accountDataBean.getProfile();
    assertEquals(profile.getEmail(), result.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_YXKY0_TGNq0_4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAddress("address");
    profile.setCreditCard("creditCard");
    profile.setEmail("email");
    profile.setFullName("fullName");
    profile.setPassword("password");
    profile.setUserID("userID");
    accountDataBean.setProfile(profile);
    AccountProfileDataBean result = accountDataBean.getProfile();
    assertEquals(profile.getFullName(), result.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_YXKY0_TGNq0_5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAddress("address");
    profile.setCreditCard("creditCard");
    profile.setEmail("email");
    profile.setFullName("fullName");
    profile.setPassword("password");
    profile.setUserID("userID");
    accountDataBean.setProfile(profile);
    AccountProfileDataBean result = accountDataBean.getProfile();
    assertEquals(profile.getPassword(), result.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_YXKY0_TGNq0_6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAddress("address");
    profile.setCreditCard("creditCard");
    profile.setEmail("email");
    profile.setFullName("fullName");
    profile.setPassword("password");
    profile.setUserID("userID");
    accountDataBean.setProfile(profile);
    AccountProfileDataBean result = accountDataBean.getProfile();
    assertEquals(profile.getUserID(), result.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FHrZ0() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean);
    assertNotNull(accountDataBean.getAccountID());
    assertTrue(accountDataBean.getLoginCount() >= 0);
    assertTrue(accountDataBean.getLogoutCount() >= 0);
    assertNotNull(accountDataBean.getLastLogin());
    assertNotNull(accountDataBean.getCreationDate());
    assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) >= 0);
    assertTrue(accountDataBean.getOpenBalance().compareTo(BigDecimal.ZERO) >= 0);
    assertNotNull(accountDataBean.getProfileID());
  }
}