/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

public class Aster_TradeServletAction_Coverage_Test_Passing {
  private TradeServices services;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotes_Initialization_SpaS1() throws Exception {
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<QuoteDataBean>();
    assertNotNull(quoteDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotes_SplitSymbols_XNQC2() throws Exception {
    String symbols = "symbol1,symbol2";
    String[] symbolsSplit = symbols.split(",");
    assertEquals(2, symbolsSplit.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotes_ForLoop_BRkS3() throws Exception {
    String[] symbolsSplit = {"symbol1", "symbol2"};
    for (String symbol : symbolsSplit) {
      assertNotNull(symbol);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotes_AddQuoteData_Ukbh5() throws Exception {
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<QuoteDataBean>();
    QuoteDataBean quoteData = mock(QuoteDataBean.class);
    quoteDataBeans.add(quoteData);
    assertEquals(1, quoteDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotes_ThrowServletException_bDua9() throws Exception {
    Exception e = new Exception();
    ServletException servletException = new ServletException("TradeServletAction.doQuotes(...)" + " exception user = userID", e);
    assertEquals("TradeServletAction.doQuotes(...) exception user = userID", servletException.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoBuy_ResultsInitialization_YuJY0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String symbol = "symbol1";
    String quantity = "10.0";
    tradeServletAction.doBuy(ctx, req, resp, userID, symbol, quantity);
    verify(req).setAttribute("results", "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccount_RequestDispatch_HomePage_IllegalArgumentException_sCgl7_YSeG0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = null;
    String passwd = null;
    try {
      tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertNotNull(e);
    }
  }
}