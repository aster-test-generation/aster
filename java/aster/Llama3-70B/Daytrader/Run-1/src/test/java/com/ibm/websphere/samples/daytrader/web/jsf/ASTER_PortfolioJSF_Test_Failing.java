/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PortfolioJSF_Test_Failing {
  private Integer numberHoldings;
  private TradeServices tradeAction;
  private BigDecimal totalValue = new BigDecimal(0.0);
  private ArrayList<HoldingData> holdingDatas;
  private ExternalContext context;
  private BigDecimal totalGain = new BigDecimal(0.0);
  private BigDecimal totalBasis = new BigDecimal(0.0);
  PortfolioJSF portfoliojsf;
  HttpSession httpsession;
  ExternalContext externalcontext;
  TradeServices tradeServices;
  private String holdingID;
  private int quantity;
  private double purchasePrice;
  private String quoteID;
  private double price;
  private HtmlDataTable dataTable;
  HoldingData holdingData;
  OrderDataBean orderDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGainPercent_EfsL0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal result = portfolioJSF.getTotalGainPercent();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDataTable_vZfM0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    HtmlDataTable dataTable = mock(HtmlDataTable.class);
    portfolioJSF.setDataTable(dataTable);
    assertSame(dataTable, portfolioJSF.getDataTable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalValue_kXFo0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalValue = BigDecimal.valueOf(100);
    portfolioJSF.setTotalValue(totalValue);
    assertEquals(totalValue, portfolioJSF.getTotalValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumOfCashHoldings_bPDN0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal sumOfCashHoldings = BigDecimal.valueOf(100.0);
    portfolioJSF.setSumOfCashHoldings(sumOfCashHoldings);
    assertEquals(sumOfCashHoldings, portfolioJSF.getSumOfCashHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberHoldings_OQZA0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    assertEquals(0, portfolioJSF.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalValue_mHbB0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalValue = BigDecimal.ZERO;
    portfolioJSF.setTotalValue(totalValue);
    assertEquals(totalValue, portfolioJSF.getTotalValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGain_EPtz0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalGain = portfolioJSF.getTotalGain();
    assertNotNull(totalGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingDatas_yGlO0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    ArrayList<HoldingData> result = portfolioJSF.getHoldingDatas();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalGain_NgOh0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalGain = BigDecimal.valueOf(10.0);
    portfolioJSF.setTotalGain(totalGain);
    assertEquals(totalGain, portfolioJSF.getTotalGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_IYRr0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal openBalance = BigDecimal.valueOf(100.0);
    portfolioJSF.setOpenBalance(openBalance);
    assertEquals(openBalance, portfolioJSF.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalBasis_cSds0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal result = portfolioJSF.getTotalBasis();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsTotal_EZHt0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal holdingsTotal = new BigDecimal("100.0");
    portfolioJSF.setHoldingsTotal(holdingsTotal);
    assertEquals(holdingsTotal, portfolioJSF.getHoldingsTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumOfCashHoldings_aaIJ0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal result = portfolioJSF.getSumOfCashHoldings();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberHoldings_iclw0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setNumberHoldings(5);
    assertEquals(5, portfolioJSF.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDataTable_VyIl0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    HtmlDataTable dataTable = portfolioJSF.getDataTable();
    assertNotNull(dataTable);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_WGsY0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal balance = portfolioJSF.getBalance();
    assertNotNull(balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsTotal_CrNJ0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal result = portfolioJSF.getHoldingsTotal();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_MlSq0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal openBalance = portfolioJSF.getOpenBalance();
    assertNotNull(openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingDatas_wTib0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    ArrayList<HoldingData> holdingDatas = new ArrayList<>();
    holdingDatas.add(new HoldingData());
    portfolioJSF.setHoldingDatas(holdingDatas);
    assertEquals(holdingDatas, portfolioJSF.getHoldingDatas());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_bdhH0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal balance = BigDecimal.valueOf(100.0);
    portfolioJSF.setBalance(balance);
    assertEquals(balance, portfolioJSF.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalBasis_ikIt0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalBasis = new BigDecimal("100.0");
    portfolioJSF.setTotalBasis(totalBasis);
    assertEquals(totalBasis, portfolioJSF.getTotalBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalGainPercent_aqAd0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalGainPercent = new BigDecimal("10.0");
    portfolioJSF.setTotalGainPercent(totalGainPercent);
    assertEquals(totalGainPercent, portfolioJSF.getTotalGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGainPercentHTML_LTHs0_QsGB0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setTotalGainPercent(new BigDecimal("10.0"));
    assertEquals("<span style='color:green'>10.00%</span>", portfolioJSF.getTotalGainPercentHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGainPercent_EfsL0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setTotalGainPercent(BigDecimal.ZERO);
    assertEquals(BigDecimal.ZERO, portfolioJSF.getTotalGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberHoldings_OQZA0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setTotalGainPercent(BigDecimal.ZERO);
    assertNull(portfolioJSF.getTotalGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGain_EPtz0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setTotalGainPercent(BigDecimal.ZERO);
    BigDecimal totalGain = portfolioJSF.getTotalGain();
    assertEquals(BigDecimal.ZERO, totalGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingDatas_yGlO0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    ArrayList<HoldingData> result = portfolioJSF.getHoldingDatas();
    assertEquals(new ArrayList<HoldingData>(), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalBasis_cSds0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setTotalGainPercent(BigDecimal.ZERO);
    assertNotNull(portfolioJSF.getTotalGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumOfCashHoldings_aaIJ0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setTotalGainPercent(BigDecimal.ZERO);
    BigDecimal result = portfolioJSF.getTotalGainPercent();
    assertEquals(BigDecimal.ZERO, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDataTable_VyIl0_fid1() {
    TradeServices services = mock(TradeServices.class);
    Instance<TradeServices> instance = mock(Instance.class);
    when(instance.get()).thenReturn(services);
    PortfolioJSF portfolioJSF = new PortfolioJSF(instance);
    BigDecimal totalGainPercent = new BigDecimal("10.0");
    portfolioJSF.setTotalGainPercent(totalGainPercent);
    assertNotNull(portfolioJSF.getTotalGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_WGsY0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setTotalGainPercent(BigDecimal.ZERO);
    BigDecimal balance = portfolioJSF.getBalance();
    assertEquals(BigDecimal.ZERO, balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_MlSq0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setTotalGainPercent(BigDecimal.ZERO);
    BigDecimal openBalance = portfolioJSF.getOpenBalance();
    assertEquals(BigDecimal.ZERO, openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingDatas_wTib0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    ArrayList<HoldingData> holdingDatas = new ArrayList<>();
    holdingDatas.add(new HoldingData());
    portfolioJSF.setHoldingDatas(holdingDatas);
    assertNotNull(portfolioJSF.getHoldingDatas());
  }
}