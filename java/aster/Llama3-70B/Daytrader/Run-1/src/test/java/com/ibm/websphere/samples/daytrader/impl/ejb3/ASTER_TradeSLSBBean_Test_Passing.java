/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
  @Mock
  private EntityManager entityManager;
  private TradeSLSBBean tradeslsbbean;
  @Mock
  private AccountProfileDataBean profile;
  @Mock
  private AccountDataBean account;
  @Mock
  private QuoteDataBean quote;
  @Mock
  private HoldingDataBean holding;
  @Mock
  private OrderDataBean order;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeNullQuote_KQHv1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.publishQuotePriceChange(null, BigDecimal.valueOf(5.0), BigDecimal.valueOf(2.0), 100.0);
      fail("Expected EJBException");
    } catch (EJBException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeNullOldPrice_xRxF2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.publishQuotePriceChange(null, null, BigDecimal.valueOf(2.0), 100.0);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertNotNull(e);
    } catch (EJBException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeNullChangeFactor_urWc3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    try {
      tradeSLSBBean.publishQuotePriceChange(quoteDataBean, BigDecimal.valueOf(5.0), null, 100.0);
      fail("Expected EJBException");
    } catch (EJBException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    assertNotNull(tradeSLSBBean);
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
      marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    } catch (NullPointerException e) {
      // Ignore
    }
    assertNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetInSession_HPuL0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.setInSession(true);
      Assertions.fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
      Assertions.assertEquals("TradeSLSBBean::setInGlobalTxn not supported", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_NoHoldingForSellOrder_IaNk4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("sell");
    try {
      tradeSLSBBean.completeOrder(order.getOrderID(), true);
      fail("Expected Exception");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_2_AmDL1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_2_AmDL1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertEquals(new QuoteDataBean(), quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_ELrd0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.orderCompleted("user1", 1);
      assert false;
    } catch (UnsupportedOperationException e) {
      assert true;
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_ZBiY0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    int result = tradeSLSBBean.getImpl();
    assertEquals(TradeConfig.EJB3, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2PhaseMode_LkCf3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    entityManager.persist(profile);
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    entityManager.persist(holding);
    try {
      tradeSLSBBean.sell("userID", holding.getHoldingID(), TradeConfig.ASYNCH_2PHASE);
    } catch (EJBException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_rqxX0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("user1");
      fail("Expected EJBException to be thrown");
    } catch (EJBException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_EmptyResult_WYOj1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("unknownUser");
      assertNotNull(result);
    } catch (EJBException e) {
      // Expected
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_NullOrder_xZSb2_PbUJ0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.getClosedOrders("userID");
      fail("Expected EJBException");
    } catch (EJBException e) {
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_AlreadyCompletedOrder_xgOf3_paAp0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.getClosedOrders("userID"); // calling the method under test
      fail("Expected EJBException");
    } catch (EJBException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_CreateHolding_fclX5_yoQD0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("buy");
    try {
      OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
      assertNotNull(result.getHolding());
    } catch (EJBException e) {
      fail("EJBException occurred: " + e.getMessage());
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseNullSymbol_hTPv1_fjcY0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      QuoteDataBean quoteDataBean = tradeSLSBBean.pingTwoPhase(null);
      assertNull(quoteDataBean);
    } catch (Exception e) {
      fail("Exception should not be thrown, but got: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_yWHh0_ohIH0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    try {
      Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
      assertNotNull(result);
    } catch (Exception e) {
      Log.error("testCompleteOrderAsync_yWHh0", e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_2_AmDL1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);
    assertEquals(new QuoteDataBean(), quoteDataBean);
  }
}