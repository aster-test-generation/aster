/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DirectSLSBBean_Coverage_Test_Passing {
  private TradeDirect tradeDirect;
  private DirectSLSBBean directSLSBBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_SetInSession_iTCL0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect; // assuming tradeDirect is a field in DirectSLSBBean
    directSLSBBean.getAllQuotes();
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_SetInSession_Rojf0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", BigDecimal.ZERO);
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_ReturnAccountDataBean_HHvN1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    AccountDataBean accountDataBean = mock(AccountDataBean.class);
    when(tradeDirect.register("userID", "password", "fullname", "address", "email", "creditcard", BigDecimal.ZERO)).thenReturn(accountDataBean);
    directSLSBBean.tradeDirect = tradeDirect;
    AccountDataBean result = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", BigDecimal.ZERO);
    assertEquals(accountDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_SetInSession_sOAr0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect; // assuming tradeDirect is a field in DirectSLSBBean
    directSLSBBean.getHoldings("someUserID");
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_ReturnHoldings_wsJl1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect; // assuming tradeDirect is a field in DirectSLSBBean
    Collection<HoldingDataBean> expectedHoldings = mock(Collection.class);
    when(tradeDirect.getHoldings("someUserID")).thenReturn(expectedHoldings);
    Collection<HoldingDataBean> actualHoldings = directSLSBBean.getHoldings("someUserID");
    assertEquals(expectedHoldings, actualHoldings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_InSessionTrue_xPgd0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    MarketSummaryDataBean marketSummaryDataBean = mock(MarketSummaryDataBean.class);
    when(tradeDirect.getMarketSummary()).thenReturn(marketSummaryDataBean);
    directSLSBBean.tradeDirect = tradeDirect;
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    verify(tradeDirect).setInSession(true);
    assertEquals(marketSummaryDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ThrowsException_yqKe1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    when(tradeDirect.getMarketSummary()).thenThrow(new Exception("Test exception"));
    try {
      directSLSBBean.getMarketSummary();
      fail("Expected Exception");
    } catch (Exception e) {
      verify(tradeDirect).setInSession(true);
      assertEquals("Test exception", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_SetInSession_wTdZ0() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    directSLSBBean.login("userID", "password");
    verify(tradeDirectMock).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_ReturnLoginResult_xsYB1() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    AccountDataBean accountDataBeanMock = mock(AccountDataBean.class);
    when(tradeDirectMock.login("userID", "password")).thenReturn(accountDataBeanMock);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    AccountDataBean result = directSLSBBean.login("userID", "password");
    assertNotNull(result);
    verify(tradeDirectMock).login("userID", "password");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_SetInSession_xsSS0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect; // assuming tradeDirect is a field in DirectSLSBBean
    directSLSBBean.getOrders("someUserId");
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_setsInSessionToTrue_cUKF0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    String symbol = "symbol";
    BigDecimal newPrice = BigDecimal.valueOf(10.0);
    double sharesTraded = 100.0;
    directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_returnsUpdatedQuoteDataBean_JcJS1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    String symbol = "symbol";
    BigDecimal newPrice = BigDecimal.valueOf(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean expectedQuoteDataBean = mock(QuoteDataBean.class);
    when(tradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded)).thenReturn(expectedQuoteDataBean);
    QuoteDataBean actualQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(expectedQuoteDataBean, actualQuoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_SetInSession_fyau0() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    directSLSBBean.completeOrder(1, true);
    verify(tradeDirectMock).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_ReturnOrderDataBean_Xzdf1() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    OrderDataBean orderDataBeanMock = mock(OrderDataBean.class);
    when(tradeDirectMock.completeOrder(1, true)).thenReturn(orderDataBeanMock);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    OrderDataBean result = directSLSBBean.completeOrder(1, true);
    assertNotNull(result);
    verify(tradeDirectMock).completeOrder(1, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_setsInSessionToTrue_GdWu0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    directSLSBBean.createQuote("symbol", "companyName", BigDecimal.valueOf(10.0));
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_callsCreateQuoteOnTradeDirect_Oroq1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    QuoteDataBean quoteDataBean = mock(QuoteDataBean.class);
    when(tradeDirect.createQuote("symbol", "companyName", BigDecimal.valueOf(10.0))).thenReturn(quoteDataBean);
    directSLSBBean.tradeDirect = tradeDirect;
    QuoteDataBean result = directSLSBBean.createQuote("symbol", "companyName", BigDecimal.valueOf(10.0));
    assertEquals(quoteDataBean, result);
    verify(tradeDirect).createQuote("symbol", "companyName", BigDecimal.valueOf(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_SetInSession_pzgj0() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    directSLSBBean.getQuote("symbol");
    verify(tradeDirectMock).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_ReturnQuote_yavW1() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    QuoteDataBean quoteDataBeanMock = mock(QuoteDataBean.class);
    when(tradeDirectMock.getQuote("symbol")).thenReturn(quoteDataBeanMock);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    QuoteDataBean result = directSLSBBean.getQuote("symbol");
    assertEquals(quoteDataBeanMock, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_SetInSession_PZHK0() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    directSLSBBean.getAccountData("someUserID");
    verify(tradeDirectMock).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ReturnAccountData_WiaM1() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    AccountDataBean accountDataBeanMock = mock(AccountDataBean.class);
    when(tradeDirectMock.getAccountData("someUserID")).thenReturn(accountDataBeanMock);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    AccountDataBean result = directSLSBBean.getAccountData("someUserID");
    assertEquals(accountDataBeanMock, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_SetInSession_QNDj0() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    directSLSBBean.updateAccountProfile(profileData);
    verify(tradeDirectMock).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_ReturnValue_yzXy1() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    AccountProfileDataBean returnValue = new AccountProfileDataBean();
    when(tradeDirectMock.updateAccountProfile(profileData)).thenReturn(returnValue);
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(returnValue, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_SetInSession_OOmU0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    directSLSBBean.orderCompleted("userID", 1);
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_OrderCompleted_xeSN1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    directSLSBBean.orderCompleted("userID", 1);
    verify(tradeDirect).orderCompleted("userID", 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_SetInSession_GPAw0() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    directSLSBBean.getAccountProfileData("someUserID");
    verify(tradeDirectMock).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_ReturnAccountProfileData_mjlL1() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    AccountProfileDataBean accountProfileDataBeanMock = mock(AccountProfileDataBean.class);
    when(tradeDirectMock.getAccountProfileData("someUserID")).thenReturn(accountProfileDataBeanMock);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData("someUserID");
    assertEquals(accountProfileDataBeanMock, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_SetInSession_WvSB0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    directSLSBBean.logout("userID");
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_Logout_GAUa1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    directSLSBBean.logout("userID");
    verify(tradeDirect).logout("userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_setInSession_BRRO0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect; // assuming tradeDirect is a field in DirectSLSBBean
    directSLSBBean.getClosedOrders("userID");
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_SetInSession_vKLs0() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    directSLSBBean.getHolding(1);
    verify(tradeDirectMock).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_ReturnHolding_JvPi1() throws Exception {
    TradeDirect tradeDirectMock = mock(TradeDirect.class);
    HoldingDataBean holdingDataBeanMock = mock(HoldingDataBean.class);
    when(tradeDirectMock.getHolding(1)).thenReturn(holdingDataBeanMock);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = tradeDirectMock;
    HoldingDataBean result = directSLSBBean.getHolding(1);
    assertEquals(holdingDataBeanMock, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_SetInSession_clAK0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_BuyOrder_xvnu1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    OrderDataBean orderDataBean = mock(OrderDataBean.class);
    when(tradeDirect.buy("userID", "symbol", 10.0, TradeConfig.SYNCH)).thenReturn(orderDataBean);
    OrderDataBean result = directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertEquals(orderDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setTradeDirect(TradeDirect tradeDirect) {
    this.tradeDirect = tradeDirect;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_NoException_Nsdo2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = tradeDirect;
    directSLSBBean.logout("userID");
  }
}