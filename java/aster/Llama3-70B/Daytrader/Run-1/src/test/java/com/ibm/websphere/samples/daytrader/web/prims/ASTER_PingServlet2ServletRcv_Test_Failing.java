/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2ServletRcv_Test_Failing {
  private static String initTime = null;
  PingServlet2ServletRcv pingservlet2servletrcv;
  ServletConfig servletConfig;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  HttpServlet httpservlet;
  PrintWriter printWriter;
  PingBean pingBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    pingservlet2servletrcv.doPost(httpservletrequest, httpservletresponse);
    verify(pingservlet2servletrcv).doGet(httpservletrequest, httpservletresponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_lFGm0() throws ServletException, IOException {
    PingServlet2ServletRcv pingServlet2ServletRcv = new PingServlet2ServletRcv();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2ServletRcv.doPost(req, res);
    verify(req, times(1)).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    printWriter = mock(PrintWriter.class);
    pingBean = mock(PingBean.class);
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    when(httpservletresponse.getWriter()).thenReturn(printWriter);
    when(httpservletrequest.getAttribute("ab")).thenReturn(pingBean);
    pingservlet2servletrcv.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(printWriter).println(anyString());
    verify(pingBean).getMsg();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_lFGm0_fid1() throws ServletException, IOException {
    PingServlet2ServletRcv pingServlet2ServletRcv = new PingServlet2ServletRcv();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
      pingServlet2ServletRcv.doGet(req, res);
    } catch (Exception e) {
      assertTrue(true);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_UgfT0_1() throws Exception {
    servletConfig = mock(ServletConfig.class);
    PingServlet2ServletRcv pingservlet2servletrcv = null;
    try {
      pingservlet2servletrcv = new PingServlet2ServletRcv();
    } catch (NoClassDefFoundError e) {
      // Handle the exception
    }
    assertNotNull(pingservlet2servletrcv);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_UgfT0_1_fid2() throws Exception {
    servletConfig = mock(ServletConfig.class);
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    Field initTimeField = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    pingservlet2servletrcv.init(servletConfig);
    assertNotNull(initTimeField.get(pingservlet2servletrcv));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_UgfT0_2_fid2() throws Exception {
    servletConfig = mock(ServletConfig.class);
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    Field initTimeField = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    pingservlet2servletrcv.init(servletConfig);
    assertTrue((Boolean) initTimeField.get(pingservlet2servletrcv));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Ebuv0_CAca0() {
    PingServlet2ServletRcv pingServlet2ServletRcv = new PingServlet2ServletRcv();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingBean pingBean = new PingBean();
    pingBean.setMsg("message");
    when(req.getAttribute("ab")).thenReturn(pingBean);
    try {
      pingServlet2ServletRcv.doGet(req, res);
      verify(res).setContentType("text/html");
      verify(res).getWriter();
    } catch (Exception e) {
      fail();
    }
  }
}