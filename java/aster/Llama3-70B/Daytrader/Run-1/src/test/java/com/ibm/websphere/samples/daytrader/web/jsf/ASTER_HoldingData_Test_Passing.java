/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_lkoN0() {
    HoldingData holdingData = new HoldingData();
    double expected = 0.0; // default value of quantity
    double actual = holdingData.getQuantity();
    assertEquals(expected, actual, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_AFIv0() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePrice_nFZf0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal("10.0");
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_biVH0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setPrice(BigDecimal.valueOf(10.0));
    assertEquals(BigDecimal.valueOf(10.0), holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_qrVI0() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = null;
    assertNull(holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_kegV0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal("10.0");
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDate_LzrC0() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = new Date();
    holdingData.setPurchaseDate(purchaseDate);
    assertEquals(purchaseDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_QhfC0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal("10.0");
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteID_Vwxn0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuoteID("testQuoteID");
    assertEquals("testQuoteID", holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_jxKs0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = holdingData.getPurchasePrice();
    assertNull(price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_Bebv0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = BigDecimal.ZERO;
    holdingData.setMarketValue(expected);
    BigDecimal actual = holdingData.getMarketValue();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_DUsS0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setBasis(new BigDecimal("10.0"));
    assertEquals(new BigDecimal("10.0"), holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_TZco0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setGain(BigDecimal.valueOf(10.0));
    assertEquals(BigDecimal.valueOf(10.0), holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_KeXM0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(10.0);
    assertEquals(10.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValue_gyIz0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal("100.0");
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_PKZi0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(1);
    assertEquals(1, holdingData.getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTML_aoGG0_csop0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setGain(new BigDecimal("10.0"));
    assertEquals(FinancialUtils.printGainHTML(new BigDecimal("10.0")), holdingData.getGainHTML());
  }
}