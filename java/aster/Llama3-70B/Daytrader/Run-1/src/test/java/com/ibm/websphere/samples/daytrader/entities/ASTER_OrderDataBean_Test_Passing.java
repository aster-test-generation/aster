/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
  @Mock
  private TradeConfig tradeConfig;
  @Mock
  private AccountDataBean accountDataBean;
  @Mock
  private QuoteDataBean quoteDataBean;
  @Mock
  private HoldingDataBean holdingDataBean;
  private OrderDataBean orderdatabean;
  private String symbol = "TEST_SYMBOL";
  private OrderDataBean orderDataBean;
  private Integer orderID;
  @Mock
  private Integer mockOrderID;
  private BigDecimal price;
  @Mock
  AccountDataBean account;
  @Mock
  QuoteDataBean quote;
  @Mock
  HoldingDataBean holding;
  @Mock
  private Log log;
  private double quantity = 10.0;
  private BigDecimal orderFee;
  private String orderType;
  OrderDataBean otherOrderdatabean;
  OrderDataBean differentOrderdatabean;
  private Date openDate;
  private Date completionDate;
  private String orderStatus;

  /*
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testgetOrderStatus() throws Exception{
         accountDataBean = new AccountDataBean();
         quoteDataBean = new QuoteDataBean("symbol");
         holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
         orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
         String result = orderdatabean.getOrderStatus();
         assertEquals("orderStatus", result);
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testGetOrderStatus_Lpqy0() {
     AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
     QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), 1);
     HoldingDataBean holding = new HoldingDataBean(1, 100, BigDecimal.valueOf(10), new Date(), account, quote);
     OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), new Date(), 100, BigDecimal.valueOf(10), BigDecimal.valueOf(1), "symbol");
     assertEquals("Open", order.getOrderStatus());
  
     private String orderStatus; /*
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testsetOrderStatus() throws Exception{
         account = new AccountDataBean();
         quote = new QuoteDataBean("symbol");
         holding = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), account, quote);
         orderdatabean = new OrderDataBean("type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), account, quote, holding);
         String newOrderStatus = "NEW_STATUS";
         orderdatabean.setOrderStatus(newOrderStatus);
         assertEquals(newOrderStatus, orderdatabean.getOrderStatus());
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testSetOrderStatus_SfXk0() {
     OrderDataBean order = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
     order.setOrderStatus("newStatus");
     assertEquals("newStatus", order.getOrderStatus());
  
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testgetSymbol_QuoteNotNull() throws Exception{
         quote = mock(QuoteDataBean.class);
         symbol = "symbol";
         orderdatabean = new OrderDataBean();
         orderdatabean.setQuote(quote);
         when(quote.getSymbol()).thenReturn("quoteSymbol");
         assertEquals("quoteSymbol", orderdatabean.getSymbol());
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testgetSymbol_QuoteNull() throws Exception{
         quote = mock(QuoteDataBean.class);
         symbol = "symbol";
         orderdatabean = new OrderDataBean();
         orderdatabean.setQuote(quote);
         orderdatabean.setQuote(null);
         orderdatabean.setSymbol(symbol);
         assertEquals(symbol, orderdatabean.getSymbol());
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testGetSymbol_QuoteNotNull_FuPo0() {
     QuoteDataBean quote = new QuoteDataBean("symbol");
     OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), null, quote, null);
     assertEquals("symbol", order.getSymbol());
  
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testGetSymbol_QuoteNull_nKHu1() {
     OrderDataBean order = new OrderDataBean("sell", "close", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol", null, null);
     assertEquals("symbol", order.getSymbol());
  
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testgetOrderID() throws Exception{
         accountDataBean = new AccountDataBean();
         quoteDataBean = new QuoteDataBean("symbol");
         holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
         orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
         oorderIDD;
         Integer result = orderdatabean.getOrderID();
         assertEquals(orderID, result);
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testGetOrderID_fMDw0() {
     AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
     QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 1.0);
     HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), quote);
     OrderDataBean order = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), "symbol");
     assertEquals(Integer.valueOf(1), order.getOrderID());
  
     private String orderStatus; /*
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testisOpen_openStatus() throws Exception{
         orderdatabean = Mockito.mock(OrderDataBean.class);
         when(orderdatabean.getOrderStatus()).thenReturn("open"); // default to "open" status
         assertTrue(orderdatabean.isOpen());
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testisOpen_processingStatus() throws Exception{
         when(orderdatabean.getOrderStatus()).thenReturn("processing");
         orderdatabean = Mockito.mock(OrderDataBean.class);
         when(orderdatabean.getOrderStatus()).thenReturn("open"); // default to "open" status
         assertTrue(orderdatabean.isOpen());
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testisOpen_closedStatus() throws Exception{
         orderdatabean = Mockito.mock(OrderDataBean.class);
         when(orderdatabean.getOrderStatus()).thenReturn("open"); // default to "open" status
         when(orderdatabean.getOrderStatus()).thenReturn("closed");
         assertFalse(orderdatabean.isOpen());
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testIsOpen_Open_yltv0() {
     OrderDataBean order = new OrderDataBean(1, "limit", "open", new Date(), null, 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "ABC");
     assertTrue(order.isOpen());
  
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testIsOpen_Processing_XbLk1() {
     OrderDataBean order = new OrderDataBean(1, "market", "processing", new Date(), null, 20.0, new BigDecimal(20.0), new BigDecimal(2.0), "DEF");
     assertTrue(order.isOpen());
  
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testIsOpen_Closed_zjWv2() {
     OrderDataBean order = new OrderDataBean(1, "stop", "closed", new Date(), new Date(), 30.0, new BigDecimal(30.0), new BigDecimal(3.0), "GHI");
     assertFalse(order.isOpen());
  
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testToString() throws Exception {
         when(accountDataBean.toString()).thenReturn("AccountDataBean");
         when(quoteDataBean.toString()).thenReturn("QuoteDataBean");
         when(holdingDataBean.toString()).thenReturn("HoldingDataBean");
         orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
         String expected = "Order null\n\t      orderType: orderType\n\t    orderStatus: orderStatus\n\t       openDate: " + orderdatabean.getOpenDate() + "\n\t completionDate: " + orderdatabean.getCompletionDate() + "\n\t       quantity: 10.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: " + orderdatabean.getSymbol();
         assertEquals(expected, orderdatabean.toString());
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testToString_oZWS0() {
     AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
     QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), 1);
     HoldingDataBean holding = new HoldingDataBean(1, 100, BigDecimal.valueOf(10), new Date(), quote);
     OrderDataBean order = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 100, BigDecimal.valueOf(10), BigDecimal.valueOf(1), "symbol");
     String expected = "Order 1\n\t      orderType: orderType\n\t    orderStatus: orderStatus\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: symbol";
     assertEquals(expected, order.toString());
  
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testsetAccount() throws Exception{
         orderdatabean = new OrderDataBean();
         orderdatabean.setAccount(account);
         assertEquals(account);
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testgetOpenDate() throws Exception{
         accountDataBean = new AccountDataBean();
         quoteDataBean = new QuoteDataBean("symbol");
         holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
         openDate = new Date();
         orderdatabean = new OrderDataBean("orderType", "orderStatus", openDate, new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol", accountDataBean, quoteDataBean, holdingDataBean);
         Date result = orderdatabean.getOpenDate();
         assertEquals(openDate, result);
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testGetOpenDate_udrq0() {
     AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
     QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 1.0);
     HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("100.0"), new Date(), quote);
     OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), account, quote, holding);
     assertEquals(new Date(), order.getOpenDate());
  
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testsetOpenDate() throws Exception{
         accountDataBean = new AccountDataBean();
         quoteDataBean = new QuoteDataBean("symbol");
         holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
         orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol", accountDataBean, quoteDataBean, holdingDataBean);
         Date newOpenDate = new Date();
         orderdatabean.setOpenDate(newOpenDate);
         assertEquals(openDate);
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
     public void testsetHolding() throws Exception{
         holding = mock(HoldingDataBean.class);
         orderdatabean = new OrderDataBean();
         orderdatabean.setHolding(holding);
         assertEquals(holding);
     }
  Test
  Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  ublic void testGetCompletionDate_DqSp0() {
     AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
     QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
     HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), account, quote);
     OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
     Date completionDate = order.getCompletionDate();
     assertNotNull(completionDate);
  
     private String orderType; /* orderType (buy, sell, etc.) */
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_1() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_2() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_3() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_4() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_5() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_6() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_7() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertTrue(order.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_8() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_9() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0_10() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance2_rvOP1() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), account, quote);
    OrderDataBean order2 = new OrderDataBean("buy", "open", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), account, quote, holding);
    assertNotEquals(order, order2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_bjeX0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol("AAPL");
    assertEquals("AAPL", orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withOrderID_vkGb0() {
    OrderDataBean order = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertEquals(1, order.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withoutOrderID_GtpJ1() {
    OrderDataBean order = new OrderDataBean();
    assertEquals(0, order.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetPrice() throws Exception {
    account = Mockito.mock(AccountDataBean.class);
    quote = Mockito.mock(QuoteDataBean.class);
    holding = Mockito.mock(HoldingDataBean.class);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), account, quote, holding);
    price = BigDecimal.valueOf(100.0);
    // when
    BigDecimal result = orderdatabean.getPrice();
    // then
    assertEquals(price, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testprint() throws Exception {
    HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), new AccountDataBean(), new QuoteDataBean("symbol"));
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.valueOf(100.0), BigDecimal.valueOf(100.0), "profileID");
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), 1.0);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    Mockito.doNothing().when(log).log(Mockito.anyString());
    orderdatabean.print();
    Mockito.verify(log, Mockito.times(1)).log(Mockito.anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_ntEc0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), "quoteID");
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    HoldingDataBean result = order.getHolding();
    assertEquals(holding, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testcancel() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("buy", "open", new Date(), null, 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    orderdatabean.cancel();
    assertEquals("cancelled", orderdatabean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel_Pbka0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetOrderID() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    Integer newOrderID = 123;
    orderdatabean.setOrderID(newOrderID);
    assertEquals(newOrderID, orderdatabean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderID_aFDc0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Integer orderID = 1;
    orderDataBean.setOrderID(orderID);
    assertEquals(orderID, orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetQuantity() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(10.0, BigDecimal.valueOf(100.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), quantity, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), accountDataBean, quoteDataBean, holdingDataBean);
    assertEquals(quantity, orderdatabean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrderFee_1() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), accountDataBean, quoteDataBean, holdingDataBean);
    orderFee = BigDecimal.valueOf(5.0);
    // When
    BigDecimal result = orderdatabean.getOrderFee();
    // Then
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrderFee_2() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), accountDataBean, quoteDataBean, holdingDataBean);
    orderFee = BigDecimal.valueOf(5.0);
    // When
    BigDecimal result = orderdatabean.getOrderFee();
    // Then
    assertEquals(orderFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetOrderType() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    String newOrderType = "newOrderType";
    orderdatabean.setOrderType(newOrderType);
    assertEquals(newOrderType, orderdatabean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType_xVcJ0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("Buy");
    assertEquals("Buy", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetQuote() throws Exception {
    quote = mock(QuoteDataBean.class);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), null, quote, null);
    QuoteDataBean result = orderdatabean.getQuote();
    assertEquals(quote, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_kOlM0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 1.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("10.0"), new Date(), account, quote);
    OrderDataBean order = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("10.0"), account, quote, holding);
    QuoteDataBean result = order.getQuote();
    assertEquals(quote, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_dsnh0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    BigDecimal price = BigDecimal.valueOf(20.0);
    orderDataBean.setPrice(price);
    assertEquals(price, orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testequals_1() throws Exception {
    orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    otherOrderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    differentOrderdatabean = new OrderDataBean(2, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    // Test for same object
    // Test for equal objects
    // Test for different objects
    // Test for null object
    // Test for different class object
    assertTrue(orderdatabean.equals(orderdatabean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testequals_2() throws Exception {
    orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    otherOrderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    differentOrderdatabean = new OrderDataBean(2, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    // Test for same object
    // Test for equal objects
    // Test for different objects
    // Test for null object
    // Test for different class object
    assertTrue(orderdatabean.equals(otherOrderdatabean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testequals_3() throws Exception {
    orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    otherOrderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    differentOrderdatabean = new OrderDataBean(2, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    // Test for same object
    // Test for equal objects
    // Test for different objects
    // Test for null object
    // Test for different class object
    assertFalse(orderdatabean.equals(differentOrderdatabean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testequals_4() throws Exception {
    orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    otherOrderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    differentOrderdatabean = new OrderDataBean(2, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    // Test for same object
    // Test for equal objects
    // Test for different objects
    // Test for null object
    // Test for different class object
    assertFalse(orderdatabean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testequals_5() throws Exception {
    orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    otherOrderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    differentOrderdatabean = new OrderDataBean(2, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    // Test for same object
    // Test for equal objects
    // Test for different objects
    // Test for null object
    // Test for different class object
    assertFalse(orderdatabean.equals(new HoldingDataBean()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_zSpS0() {
    OrderDataBean order = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertTrue(order.equals(order));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_gxSU1() {
    Object obj = new Object();
    OrderDataBean order = new OrderDataBean();
    assertFalse(order.equals(obj));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_RRaS2() {
    OrderDataBean order1 = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    OrderDataBean order2 = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertTrue(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderID_OBAK3() {
    OrderDataBean order1 = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    OrderDataBean order2 = new OrderDataBean(2, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertFalse(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullOrderID_Uqvd4() {
    OrderDataBean order1 = new OrderDataBean(null, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    OrderDataBean order2 = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertFalse(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisSell() throws Exception {
    orderdatabean = Mockito.mock(OrderDataBean.class);
    when(orderdatabean.getOrderType()).thenReturn("sell"); // setup the mock to return "sell" for getOrderType()
    assertTrue(orderdatabean.isSell()); // assert that isSell returns true when getOrderType returns "sell"
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisNotSell() throws Exception {
    orderdatabean = Mockito.mock(OrderDataBean.class);
    when(orderdatabean.getOrderType()).thenReturn("sell"); // setup the mock to return "sell" for getOrderType()
    when(orderdatabean.getOrderType()).thenReturn("buy"); // setup the mock to return "buy" for getOrderType()
    assertFalse(orderdatabean.isSell()); // assert that isSell returns false when getOrderType returns "buy"
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellTrue_Vbdp0() {
    OrderDataBean order = new OrderDataBean(1, "sell", "open", new Date(), null, 10.0, new BigDecimal("10.0"), new BigDecimal("0.0"), "symbol");
    assertTrue(order.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellFalse_ytml1() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), null, 10.0, new BigDecimal("10.0"), new BigDecimal("0.0"), "symbol");
    assertFalse(order.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrderType() throws Exception {
    accountDataBean = mock(AccountDataBean.class);
    quoteDataBean = mock(QuoteDataBean.class);
    holdingDataBean = mock(HoldingDataBean.class);
    orderdatabean = new OrderDataBean("buy", "open", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), accountDataBean, quoteDataBean, holdingDataBean);
    assertEquals("buy", orderdatabean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisCompleted() throws Exception {
    orderdatabean = Mockito.mock(OrderDataBean.class);
    when(orderdatabean.getOrderStatus()).thenReturn("completed");
    assertTrue(orderdatabean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisNotCompleted() throws Exception {
    orderdatabean = Mockito.mock(OrderDataBean.class);
    when(orderdatabean.getOrderStatus()).thenReturn("completed");
    when(orderdatabean.getOrderStatus()).thenReturn("pending");
    assertFalse(orderdatabean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisAlertCompleted() throws Exception {
    when(orderdatabean.getOrderStatus()).thenReturn("alertcompleted");
    orderdatabean = Mockito.mock(OrderDataBean.class);
    when(orderdatabean.getOrderStatus()).thenReturn("completed");
    assertTrue(orderdatabean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisCancelled() throws Exception {
    when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
    orderdatabean = Mockito.mock(OrderDataBean.class);
    when(orderdatabean.getOrderStatus()).thenReturn("completed");
    assertTrue(orderdatabean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_completed_CXmG0() {
    OrderDataBean order = new OrderDataBean(1, "market", "completed", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_alertCompleted_vtAX1() {
    OrderDataBean order = new OrderDataBean(1, "market", "alertcompleted", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_cancelled_yitx2() {
    OrderDataBean order = new OrderDataBean(1, "market", "cancelled", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_pending_wpag3() {
    OrderDataBean order = new OrderDataBean(1, "market", "pending", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuote_SPfp0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(15.0), BigDecimal.valueOf(20.0), 5.0);
    orderDataBean.setQuote(quoteDataBean);
    assertSame(quoteDataBean, orderDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_nFiQ0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    orderDataBean.setQuantity(20.0);
    assertEquals(20.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisBuy() throws Exception {
    orderdatabean = Mockito.mock(OrderDataBean.class);
    when(orderdatabean.getOrderType()).thenReturn("buy");
    assertTrue(orderdatabean.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisNotBuy() throws Exception {
    orderdatabean = Mockito.mock(OrderDataBean.class);
    when(orderdatabean.getOrderType()).thenReturn("buy");
    when(orderdatabean.getOrderType()).thenReturn("sell");
    assertFalse(orderdatabean.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuyTrue_PlDK0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), null, 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuyFalse_Qddi1() {
    OrderDataBean order = new OrderDataBean(1, "sell", "open", new Date(), null, 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDate_SioV0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    Date completionDate = new Date();
    orderDataBean.setCompletionDate(completionDate);
    assertEquals(completionDate, orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetAccount() throws Exception {
    account = mock(AccountDataBean.class);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), account, null, null);
    AccountDataBean result = orderdatabean.getAccount();
    assertEquals(account, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisNotCancelled() throws Exception {
    orderdatabean = Mockito.mock(OrderDataBean.class);
    // Mock the getOrderStatus method to return "open"
    when(orderdatabean.getOrderStatus()).thenReturn("open");
    // Call the isCancelled method
    boolean result = orderdatabean.isCancelled();
    // Assert that the method returns false
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelledTrue_VBag0() {
    OrderDataBean order = new OrderDataBean(1, "market", "cancelled", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelledFalse_pQgJ1() {
    OrderDataBean order = new OrderDataBean(1, "market", "open", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisCancelled_ytaW0() throws Exception {
    OrderDataBean orderdatabean = Mockito.mock(OrderDataBean.class);
    when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
    assertTrue(orderdatabean.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_MMDY0() throws Exception {
    AccountDataBean accountDataBean = new AccountDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    OrderDataBean orderdatabean = new OrderDataBean("sell", "cancelled", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    boolean result = orderdatabean.isCancelled();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testhashCode_ATBC0() throws Exception {
    mockOrderID = Mockito.mock(Integer.class);
    Mockito.when(mockOrderID.hashCode()).thenReturn(123);
    orderdatabean = new OrderDataBean(mockOrderID, "orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    int expectedHashCode = 123;
    int actualHashCode = orderdatabean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisCancelled_aLuZ0() {
    OrderDataBean orderdatabean = Mockito.mock(OrderDataBean.class);
    Mockito.when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
    assertTrue(orderdatabean.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatus_Lpqy0_xFOB0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), 1.0);
    HoldingDataBean holding = null;
    OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), new Date(), 100, BigDecimal.valueOf(10), BigDecimal.valueOf(1), account, quote, holding);
    String orderStatus = order.getOrderStatus();
    assertEquals("Open", orderStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus_SfXk0_IFfl0() {
    OrderDataBean order = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    order.setOrderStatus("cancelled");
    boolean result = order.isCancelled();
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_fMDw0_nbZR0_1() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 1.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), "symbol");
    OrderDataBean order = new OrderDataBean(1, "orderType", "cancelled", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), "symbol");
    assertEquals(1, (int) order.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_fMDw0_nbZR0_2() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 1.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), "symbol");
    OrderDataBean order = new OrderDataBean(1, "orderType", "cancelled", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), "symbol");
    assertTrue(order.isCancelled());
  }

  @Test
  public void testIsCancelled_naUn0() {
    OrderDataBean order = new OrderDataBean("sell", "cancelled", null, null, 0, null, null, null, null, null);
    assertTrue(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_Open_yltv0_lLSj0() {
    OrderDataBean order = new OrderDataBean(1, "limit", "open", new Date(), null, 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "ABC");
    assertFalse(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_Processing_XbLk1_gUoA0() {
    OrderDataBean order = new OrderDataBean(1, "market", "processing", new Date(), null, 20.0, new BigDecimal(20.0), new BigDecimal(2.0), "DEF");
    assertTrue(order.isCancelled() == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_Closed_zjWv2_uuOZ0() {
    OrderDataBean order = new OrderDataBean(1, "stop", "closed", new Date(), new Date(), 30.0, new BigDecimal(30.0), new BigDecimal(3.0), "GHI");
    assertFalse(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenDate_vcsM0() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    openDate = new Date();
    orderdatabean = new OrderDataBean("orderType", "orderStatus", openDate, new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    Date result = orderdatabean.getOpenDate();
    assertEquals(openDate, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetOpenDate_UppL0() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    Date newOpenDate = new Date();
    orderdatabean.setOpenDate(newOpenDate);
    assertEquals(newOpenDate, orderdatabean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetHolding_kgma0() throws Exception {
    holding = mock(HoldingDataBean.class);
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holding);
    assertEquals(holding, orderdatabean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetHolding_hLLz1() throws Exception {
    holding = mock(HoldingDataBean.class);
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holding);
    assertSame(holding, orderdatabean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDate_DqSp0_yPUk0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), "symbol");
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    Date completionDate = order.getCompletionDate();
    assertNotNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetQuote_IzSZ0() throws Exception {
    quote = mock(QuoteDataBean.class);
    orderdatabean = new OrderDataBean();
    orderdatabean.setQuote(quote);
    assertEquals(quote, orderdatabean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetQuantity_IECN0() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean();
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 0.0, BigDecimal.ZERO, BigDecimal.ZERO, accountDataBean, quoteDataBean, holdingDataBean);
    double newQuantity = 10.0;
    orderdatabean.setQuantity(newQuantity);
    assertEquals(newQuantity, orderdatabean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetSymbol_ZJtL0() throws Exception {
    accountDataBean = Mockito.mock(AccountDataBean.class);
    quoteDataBean = Mockito.mock(QuoteDataBean.class);
    holdingDataBean = Mockito.mock(HoldingDataBean.class);
    String symbol = "TEST_SYMBOL";
    orderDataBean = new OrderDataBean("ORDER_TYPE", "ORDER_STATUS", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), accountDataBean, quoteDataBean, holdingDataBean);
    orderDataBean.setSymbol(symbol);
    assertEquals(symbol, orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NgeS0_JNZA0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), 1);
    HoldingDataBean holding = new HoldingDataBean(1, 100, BigDecimal.valueOf(10), new Date(), "symbol");
    OrderDataBean order = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 100, BigDecimal.valueOf(10), BigDecimal.valueOf(1), "symbol");
    String html = order.toHTML();
    assertEquals("<BR>Order <B>1</B>" + "<LI>      orderType: orderType</LI>" + "<LI>    orderStatus: orderStatus</LI>" + "<LI>       openDate: " + order.getOpenDate() + "</LI>" + "<LI> completionDate: " + order.getCompletionDate() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 10.0</LI>" + "<LI>       orderFee: 1.0</LI>" + "<LI>         symbol: symbol</LI>", html);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_fWGX0_StKt0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 1.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), quote.getSymbol());
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    assertEquals(new BigDecimal("1.0"), order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetPrice_cwQj0() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    BigDecimal newPrice = BigDecimal.valueOf(20.0);
    orderdatabean.setPrice(newPrice);
    assertEquals(newPrice, orderdatabean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_FWCV0_EMTr0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), BigDecimal.valueOf(10), 1);
    HoldingDataBean holding = new HoldingDataBean(1, 100, BigDecimal.valueOf(10), new Date(), "symbol");
    OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), new Date(), 100, BigDecimal.valueOf(10), BigDecimal.valueOf(1), account, quote, holding);
    assertEquals("Buy", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetCompletionDate_aANI0() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), null, 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    completionDate = new Date();
    orderdatabean.setCompletionDate(completionDate);
    assertEquals(orderdatabean.getCompletionDate(), completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_MMpR0() {
    OrderDataBean order = new OrderDataBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("10.0"), "profileID");
    order.setAccount(account);
    Assertions.assertEquals(account, order.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetOrderFee() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(0.0), accountDataBean, quoteDataBean, holdingDataBean);
    orderFee = BigDecimal.valueOf(5.0);
    orderdatabean.setOrderFee(orderFee);
    assertEquals(orderFee, orderdatabean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_hbvX0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    BigDecimal orderFee = BigDecimal.valueOf(2.0);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_lXTd0() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    Date openDate = new Date();
    orderDataBean.setOpenDate(openDate);
    assertEquals(openDate, orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHolding_UBZF0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(100.0), new Date(), "quoteID");
    orderDataBean.setHolding(holdingDataBean);
    assertEquals(holdingDataBean, orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetCompletionDate() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    Date expectedCompletionDate = orderdatabean.getCompletionDate();
    assertEquals(expectedCompletionDate, orderdatabean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_RTfk0() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order);
    assertNotNull(order.getOrderID());
    assertNotNull(order.getOrderType());
    assertNotNull(order.getOrderStatus());
    assertNotNull(order.getOpenDate());
    assertNotNull(order.getCompletionDate());
    assertTrue(order.getQuantity() > 0);
    assertNotNull(order.getPrice());
    assertNotNull(order.getOrderFee());
    assertNotNull(order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrderFee() throws Exception {
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), accountDataBean, quoteDataBean, holdingDataBean);
    orderFee = BigDecimal.valueOf(5.0);
    // When
    BigDecimal result = orderdatabean.getOrderFee();
    // Then
    assertNotNull(result);
    assertEquals(orderFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testequals() throws Exception {
    orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    otherOrderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    differentOrderdatabean = new OrderDataBean(2, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    // Test for same object
    assertTrue(orderdatabean.equals(orderdatabean));
    // Test for equal objects
    assertTrue(orderdatabean.equals(otherOrderdatabean));
    // Test for different objects
    assertFalse(orderdatabean.equals(differentOrderdatabean));
    // Test for null object
    assertFalse(orderdatabean.equals(null));
    // Test for different class object
    assertFalse(orderdatabean.equals(new HoldingDataBean()));
  }
}