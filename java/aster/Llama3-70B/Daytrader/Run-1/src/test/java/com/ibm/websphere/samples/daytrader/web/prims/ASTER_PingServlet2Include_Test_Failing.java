/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Include_Test_Failing {
  private static int expectedHitCount;
  private static String expectedInitTime;
  PingServlet2Include pingservlet2include;
  ServletConfig servletConfig;
  HttpServletResponse httpservletresponse;
  ServletConfig servletconfig;
  HttpServletRequest httpservletrequest;
  HttpServlet httpservlet;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    servletconfig = mock(ServletConfig.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpservlet = mock(HttpServlet.class);
    pingservlet2include = new PingServlet2Include();
    when(pingservlet2include.getServletConfig()).thenReturn(servletconfig);
    pingservlet2include.doPost(httpservletrequest, httpservletresponse);
    verify(pingservlet2include).doGet(httpservletrequest, httpservletresponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_uGLb0() {
    PingServlet2Include pingServlet2Include = new PingServlet2Include();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
      pingServlet2Include.doPost(req, res);
      verify(req, times(1)).getAttribute(anyString());
    } catch (ServletException | IOException e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Exception_PnKh1() {
    PingServlet2Include pingServlet2Include = new PingServlet2Include();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getServletContext()).thenThrow(new ServletException());
    try {
      pingServlet2Include.doGet(req, res);
      fail();
    } catch (Exception e) {
      assertEquals(500, res.getStatus());
    }
  }
}