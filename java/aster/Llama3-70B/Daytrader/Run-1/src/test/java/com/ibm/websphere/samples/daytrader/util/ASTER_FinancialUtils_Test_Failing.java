/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_TiJi0() {
    BigDecimal currentBalance = new BigDecimal("100.0000");
    BigDecimal openBalance = new BigDecimal("50.0");
    BigDecimal result = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(new BigDecimal("100.0000"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGain_DNBo0_fid1() {
    BigDecimal currentBalance = new BigDecimal("100.0");
    BigDecimal openBalance = new BigDecimal("50.0");
    BigDecimal expected = new BigDecimal("50.0");
    assertEquals(expected, FinancialUtils.computeGain(currentBalance, openBalance));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_TiJi0_fid1() {
    BigDecimal currentBalance = new BigDecimal("100.0");
    BigDecimal openBalance = new BigDecimal("50.0");
    BigDecimal result = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(new BigDecimal("100.0"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_NegativeGain_bTUk0_fid1() {
    BigDecimal gain = new BigDecimal(-0.05);
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertEquals("(<B><FONT color=\"#ff0000\">-5.00%</FONT></B>)<IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_PositiveGain_vuYH1_fid1() {
    BigDecimal gain = new BigDecimal(0.03);
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertEquals("(<B><FONT color=\"#009900\">+3.00%</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeHoldingsTotalNullInput_qWxn0() {
    Collection<HoldingDataBean> holdingDataBeans = null;
    BigDecimal result = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
    assertEquals(new BigDecimal(0.0), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeHoldingsTotalEmptyCollection_Ipqz1() {
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    BigDecimal result = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
    assertEquals(new BigDecimal(0.0), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeHoldingsTotal_iplI2_fid1() {
    HoldingDataBean holdingDataBean1 = new HoldingDataBean();
    holdingDataBean1.setPurchasePrice(new BigDecimal(10.0));
    holdingDataBean1.setQuantity(2);
    HoldingDataBean holdingDataBean2 = new HoldingDataBean();
    holdingDataBean2.setPurchasePrice(new BigDecimal(20.0));
    holdingDataBean2.setQuantity(3);
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(holdingDataBean1);
    holdingDataBeans.add(holdingDataBean2);
    BigDecimal result = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
    assertEquals(new BigDecimal(80.0), result);
  }
}