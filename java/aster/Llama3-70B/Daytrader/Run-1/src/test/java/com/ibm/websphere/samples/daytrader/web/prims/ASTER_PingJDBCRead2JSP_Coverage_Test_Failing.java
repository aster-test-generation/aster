/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.Log;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingJDBCRead2JSP_Coverage_Test_Failing {
  private PingJDBCRead2JSP pingJDBCRead2JSP;
  private ServletConfig servletConfig;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_mNCv0() throws javax.servlet.ServletException {
    pingJDBCRead2JSP = new PingJDBCRead2JSP();
    servletConfig = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_Fuvz1() throws ServletException {
    pingJDBCRead2JSP.init(servletConfig);
    verify(servletConfig).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_Mxeb0() throws Exception {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead2JSP.doPost(req, res);
    verify(req).getParameterNames();
    verify(res).setStatus(200);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_uhoy0() {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    String expected = "Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class";
    String actual = pingJDBCRead2JSP.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_ServletContextInitialization_jtXY4_NtSY0() throws ServletException, IOException {
    // Assume PingJDBCRead2JSP is in the package com.ibm.websphere.samples.daytrader.web.prims
    PingJDBCRead2JSP pingJDBCRead2JSP = null;
    try {
      pingJDBCRead2JSP = (PingJDBCRead2JSP) Class.forName("com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP").newInstance();
    } catch (InstantiationException e) {
      fail("InstantiationException");
    } catch (IllegalAccessException e) {
      fail("IllegalAccessException");
    } catch (ClassNotFoundException e) {
      fail("ClassNotFoundException");
    }
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletConfig servletConfig = mock(ServletConfig.class);
    when(pingJDBCRead2JSP.getServletConfig()).thenReturn(servletConfig);
    ServletContext ctx = mock(ServletContext.class);
    when(servletConfig.getServletContext()).thenReturn(ctx);
    pingJDBCRead2JSP.init(servletConfig);
    pingJDBCRead2JSP.doGet(req, res);
    verify(servletConfig).getServletContext();
    assertNotNull(ctx);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_QuoteDataInitialization_tvZO3_vzJN0_fid2() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead2JSP.doGet(req, res);
    Object quoteData = req.getAttribute("quoteData");
    assertNotNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_LogError_SHGh0_QZfE0_fid2() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    Exception e = new Exception("Test Exception");
    Log log = mock(Log.class);
    doNothing().when(log).error(e, "PingJDBCRead2JPS -- error getting quote for symbol", "symbol");
    pingJDBCRead2JSP.doGet(req, res);
    verify(log, times(1)).error(e, "PingJDBCRead2JPS -- error getting quote for symbol", "symbol");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SendError_POSp1_iNEe0_fid2() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    Exception e = new Exception("Test Exception");
    doThrow(e).when(pingJDBCRead2JSP).doGet(req, res);
    try {
      pingJDBCRead2JSP.doGet(req, res);
    } catch (Exception ex) {
    }
    verify(res, times(1)).sendError(500, "PingJDBCRead2JSP Exception caught: Test Exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SymbolInitialization_iEPc2_vyTk0() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead2JSP.doGet(req, res);
    verify(req).setAttribute("quoteData", any(QuoteDataBean.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_ServletContextInitialization_jtXY4_NtSY0_fid2() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletConfig servletConfig = mock(ServletConfig.class);
    when(pingJDBCRead2JSP.getServletConfig()).thenReturn(servletConfig);
    ServletContext ctx = mock(ServletContext.class);
    when(servletConfig.getServletContext()).thenReturn(ctx);
    pingJDBCRead2JSP.doGet(req, res);
    verify(servletConfig).getServletContext();
    assertNotNull(ctx);
  }
}