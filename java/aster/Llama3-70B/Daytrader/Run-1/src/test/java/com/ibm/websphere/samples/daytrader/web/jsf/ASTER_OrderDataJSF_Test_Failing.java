/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataJSF_Test_Failing {
  private TradeServices tradeAction;
  private ExternalContext context;
  OrderDataJSF orderdatajsf;
  HttpSession httpsession;
  ExternalContext externalcontext;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrders_LuSL0() {
    Instance<TradeServices> services = mock(Instance.class);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    OrderData[] result = orderDataJSF.getAllOrders();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAllOrders_uvaJ0() {
    Instance<TradeServices> services = mock(Instance.class);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    OrderData[] allOrders = new OrderData[1];
    orderDataJSF.setAllOrders(allOrders);
    assertArrayEquals(allOrders, orderDataJSF.getAllOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrders_LuSL0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    OrderData[] result = orderDataJSF.getAllOrders();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAllOrders_uvaJ0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    OrderData[] allOrders = new OrderData[1];
    orderDataJSF.setAllOrders(allOrders);
    assertNotNull(orderDataJSF.getAllOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderData_WgtW0_MbWP0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    java.util.Date openDate = new java.util.Date();
    java.util.Date completeDate = new java.util.Date();
    OrderData orderData = new OrderData(1, "status", openDate, completeDate, BigDecimal.valueOf(10), "type", 10, "symbol");
    orderDataJSF.setOrderData(orderData);
    assertNotNull(orderDataJSF.getOrderData());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderData_WgtW0_MbWP0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    java.util.Date openDate = new java.util.Date();
    java.util.Date completeDate = new java.util.Date();
    OrderData orderData = new OrderData(1, "status", openDate, completeDate, BigDecimal.valueOf(10), "type", 10, "symbol");
    orderDataJSF.setOrderData(orderData);
    assertEquals(orderData, orderDataJSF.getOrderData());
  }
}