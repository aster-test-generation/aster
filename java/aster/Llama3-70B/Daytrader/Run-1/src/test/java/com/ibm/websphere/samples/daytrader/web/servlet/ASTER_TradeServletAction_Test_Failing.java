/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Failing {
  private QuoteDataBean[] expected;
  HttpSession httpsession;
  ServletContext servletContext;
  HttpServletResponse httpServletResponse;
  String userID = "testUser";
  String results = "testResults";
  AccountDataBean accountDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_SessionInvalidation_HoyE() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    HttpSession session = mock(HttpSession.class);
    when(req.getSession()).thenReturn(session);
    try {
      tradeServletAction.doLogout(ctx, req, resp, userID);
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertEquals("TradeServletAction.doLogout(...)exception logging out user testUser", e.getMessage());
    }
    verify(session).invalidate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_RequestDispatch_gMXn3_IEJz0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    try {
      tradeServletAction.doLogout(ctx, req, resp, userID);
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertEquals("Error logging out user testUser", e.getMessage());
    }
    verify(ctx).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(req).setAttribute(eq("results"), anyString());
    verify(resp).sendRedirect(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_EmptyPassword_ZaUG2_clGJ0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String passwd = "";
    try {
      tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertEquals("Exception logging in user " + userID + " with password", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_passwordMismatch_YaVw0_YrLm0() throws ServletException, IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String password = "pass1";
    try {
      action.doLogin(ctx, req, resp, userID, password);
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertEquals("Exception logging in user " + userID + " with password " + password, e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_SessionInvalidation_HoyE2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    HttpSession session = mock(HttpSession.class);
    when(req.getSession()).thenReturn(session);
    tradeServletAction.doLogout(ctx, req, resp, userID);
    verify(session).invalidate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoLogin_TZyp0() throws Exception {
    Instance<TradeServices> instance = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(instance.get()).thenReturn(tradeServices);
    TradeServletAction tradeservletaction = new TradeServletAction(instance);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    ServletContext servletContext = mock(ServletContext.class);
    HttpSession httpsession = mock(HttpSession.class);
    AccountDataBean accountDataBean = mock(AccountDataBean.class);
    when(tradeServices.login("userID", "passwd")).thenReturn(accountDataBean);
    when(httpservletrequest.getSession(true)).thenReturn(httpsession);
    tradeservletaction.doLogin(servletContext, httpservletrequest, httpServletResponse, "userID", "passwd");
    verify(tradeServices).login("userID", "passwd");
    verify(httpsession).setAttribute("uidBean", "userID");
    verify(httpsession).setAttribute("sessionCreationDate", new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_RequestDispatch_gMXn3_IEJz0_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    tradeServletAction.doLogout(ctx, req, resp, userID);
    verify(ctx).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(req).setAttribute(eq("results"), anyString());
    verify(resp).sendRedirect(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_EmptyPassword_ZaUG2_clGJ0_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String passwd = "";
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
    verify(req).setAttribute("results", "Could not find account for + " + userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_passwordMismatch_YaVw0_YrLm0_fid1() throws ServletException, IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String password = "pass1";
    action.doLogin(ctx, req, resp, userID, password);
    verify(req).setAttribute("results", "Could not find account for + " + userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_illegalArgumentException_SkHt3_DRXn0() throws ServletException, IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String password = "pass1";
    try {
      action.doLogin(ctx, req, resp, userID, password);
    } catch (Exception e) {
    }
    verify(req).setAttribute("results", "Could not find account for + " + userID);
  }
}