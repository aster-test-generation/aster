/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet31AsyncRead_Coverage_Test_Passing {
  private PingServlet31AsyncRead servlet;
  private ServletConfig config;
  private HttpServletResponse res;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_CallsDoPost_mnyl0_Hxro0() throws Exception {
    try {
      PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
      HttpServletRequest req = mock(HttpServletRequest.class);
      HttpServletResponse res = mock(HttpServletResponse.class);
      servlet.doGet(req, res);
      verify(req, times(0)).getAttributeNames();
      assertNotNull(res);
      verify(res, times(1)).setStatus(HttpServletResponse.SC_OK);
    } catch (ExceptionInInitializerError e) {
      // Handle the exception
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void onAllDataRead_lxNr2() throws IOException {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_asyncContext_YtPy6_EGRk0_fid1() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext ac = mock(AsyncContext.class);
    when(req.startAsync()).thenReturn(ac);
    PingServlet31AsyncRead pingServlet31AsyncRead = new PingServlet31AsyncRead();
    pingServlet31AsyncRead.doPost(req, res);
    verify(req, times(1)).startAsync();
  }
}