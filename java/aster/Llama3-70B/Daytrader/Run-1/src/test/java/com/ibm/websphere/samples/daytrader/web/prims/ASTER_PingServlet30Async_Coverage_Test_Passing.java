/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet30Async_Coverage_Test_Passing {
  private PingServlet30Async pingServlet30Async;
  private ServletOutputStream servletOutputStream;
  private ServletConfig config;
  private PingServlet30Async servlet;
  private HttpServletResponse res;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_CompleteAsync_BxJu9_bHFV0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    AsyncContext asyncContext = mock(AsyncContext.class);
    when(request.startAsync()).thenReturn(asyncContext);
    PingServlet30Async pingServlet30Async = new PingServlet30Async();
    pingServlet30Async.doGet(request, response);
    verify(request).startAsync();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GetInputStream_QaKe4_iYhV0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    ServletInputStream servletInputStream = mock(ServletInputStream.class);
    PingServlet30Async pingServlet30Async = new PingServlet30Async();
    when(request.getInputStream()).thenReturn(servletInputStream);
    when(request.getRequestDispatcher("/async")).thenReturn(request.getRequestDispatcher("/async"));
    pingServlet30Async.doGet(request, response);
    verify(request, times(1)).getInputStream();
  }
}