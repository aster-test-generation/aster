/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession3_Test_Failing {
  private static String initTime = null;
  private static int hitCount = 0;
  PingSession3 pingsession3;
  ServletConfig servletConfig;
  HttpServletResponse httpservletresponse;
  HttpServletRequest httpservletrequest;
  HttpSession httpsession;
  HttpServlet httpservlet;
  private static int NUM_OBJECTS = 2;
  PrintWriter printWriter;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpsession = mock(HttpSession.class);
    httpservlet = mock(HttpServlet.class);
    pingsession3 = new PingSession3();
    when(httpservletrequest.getSession(any())).thenReturn(httpsession);
    pingsession3.doPost(httpservletrequest, httpservletresponse);
    verify(pingsession3).doGet(httpservletrequest, httpservletresponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_tqNO0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingSession3.doPost(req, res);
    verify(req, times(1)).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_PeCC0() {
    PingSession3 pingSession3 = new PingSession3();
    String result = pingSession3.getServletInfo();
    assertEquals("HTTP Session Object: Tests management of a large custom session class", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpsession = mock(HttpSession.class);
    httpservlet = mock(HttpServlet.class);
    printWriter = mock(PrintWriter.class);
    pingsession3 = new PingSession3();
    when(httpservletresponse.getWriter()).thenReturn(printWriter);
    when(httpservletrequest.getSession(any())).thenReturn(httpsession);
    when(httpservletrequest.getParameter("num_objects")).thenReturn(null);
    pingsession3.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(httpservletresponse).setHeader("SessionTrackingTest-largeSessionData", "32768bytes");
    verify(printWriter).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet_withNumObjectsParameter() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpsession = mock(HttpSession.class);
    httpservlet = mock(HttpServlet.class);
    printWriter = mock(PrintWriter.class);
    pingsession3 = new PingSession3();
    when(httpservletresponse.getWriter()).thenReturn(printWriter);
    when(httpservletrequest.getSession(any())).thenReturn(httpsession);
    when(httpservletrequest.getParameter("num_objects")).thenReturn("5");
    pingsession3.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(printWriter).println("<html><head> Session object size set to 5K bytes </head><body></body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet_withInvalidNumObjectsParameter() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpsession = mock(HttpSession.class);
    httpservlet = mock(HttpServlet.class);
    printWriter = mock(PrintWriter.class);
    pingsession3 = new PingSession3();
    when(httpservletresponse.getWriter()).thenReturn(printWriter);
    when(httpservletrequest.getSession(any())).thenReturn(httpsession);
    when(httpservletrequest.getParameter("num_objects")).thenReturn("abc");
    pingsession3.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).sendError(500, "PingSession3.doGet(...): error. java.lang.NumberFormatException: For input string: \"abc\"");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_tqNO0_fid1() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
      pingSession3.doGet(req, res);
    } catch (Exception e) {
      // Ignore
    }
    verify(req, times(1)).getSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_PeCC0_fid1() {
    PingSession3 pingSession3 = new PingSession3();
    String result = pingSession3.getServletInfo();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_oibV0_1() throws Exception {
    servletConfig = mock(ServletConfig.class);
    pingsession3 = new PingSession3();
    pingsession3.init(servletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_oibV0_2() throws Exception {
    servletConfig = mock(ServletConfig.class);
    pingsession3 = new PingSession3();
    pingsession3.init(servletConfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SessionIsNull_HlzT0_WgDB0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getSession(true)).thenReturn(null);
    try {
      pingSession3.doGet(request, response);
    } catch (IOException e) {
    } catch (ServletException e) {
    }
    verify(response).sendError(500, "PingSession3.doGet(...): error. ");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SessionIsNotNull_NumObjectsIsNull_bxqQ1_mOHR0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(session);
    when(request.getParameter("num_objects")).thenReturn(null);
    try {
      pingSession3.doGet(request, response);
    } catch (ServletException e) {
    } catch (IOException e) {
    }
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SessionIsNotNull_NumObjectsIsNotNull_YfuV2_vuZG0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(session);
    when(request.getParameter("num_objects")).thenReturn("10");
    try {
      pingSession3.doGet(request, response);
      verify(response).setContentType("text/html");
    } catch (ServletException | IOException e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SessionDataIsNull_zOCd3_awfj0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(session);
    when(session.getAttribute("sessiontest.sessionData")).thenReturn(null);
    try {
      pingSession3.doGet(request, response);
    } catch (ServletException e) {
    }
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SessionDataIsNotNull_HeIC4_myVF0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    PingSession3Object[] sessionData = new PingSession3Object[10];
    when(request.getSession(true)).thenReturn(session);
    when(session.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
    try {
      pingSession3.doGet(request, response);
    } catch (ServletException e) {
    }
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_ExceptionThrown_UTeJ5_qtkz0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getSession(true)).thenThrow(new ServletException());
    try {
      pingSession3.doGet(request, response);
    } catch (ServletException e) {
    }
    verify(response).sendError(500, "PingSession3.doGet(...): error. ");
  }
}