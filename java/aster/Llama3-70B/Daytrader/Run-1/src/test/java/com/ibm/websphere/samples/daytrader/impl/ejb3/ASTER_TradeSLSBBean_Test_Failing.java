/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;

import java.util.Collection;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
  @Mock
  private EntityManager entityManager;
  private TradeSLSBBean tradeslsbbean;
  @Mock
  private AccountProfileDataBean profile;
  @Mock
  private AccountDataBean account;
  @Mock
  private QuoteDataBean quote;
  @Mock
  private HoldingDataBean holding;
  @Mock
  private OrderDataBean order;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange_WVIm0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    // Since publishQuotePriceChange method is not defined in TradeSLSBBean, 
    // we cannot call it. Instead, we can test the getClosedOrders method.
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("someUserId");
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    assertNotNull(tradeSLSBBean);
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    if (marketSummaryDataBean != null) {
      assertNotNull(marketSummaryDataBean.getVolume());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_HoldingNotFound_SZcD0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> orderDataBeans = tradeSLSBBean.getClosedOrders("userID");
    assertNotNull(orderDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("existingSymbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    try {
      tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
      assertTrue(true); // If no exception is thrown, the test passes
    } catch (Exception e) {
      fail("Failed to create Order. Check that the symbol exists in the database.");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    try {
      tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
      assertTrue(true); // No exception thrown
    } catch (Exception e) {
      fail("Failed to create Order. Check that the symbol exists in the database.");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    // Assuming the symbol "symbol" exists in the database
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    try {
      OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
      assertNotNull(order);
    } catch (Exception e) {
      fail("Failed to create Order. Check that the symbol exists in the database.");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_IAiI0_tAaM0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> result = null;
    try {
      result = tradeSLSBBean.getClosedOrders("someUserID");
    } catch (Exception e) {
      // Exception is expected
    }
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_KxpH0_CupW0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      QuoteDataBean quoteDataBean = tradeSLSBBean.pingTwoPhase("symbol");
      assertNotEquals(0, quoteDataBean.getPrice().doubleValue());
    } catch (Exception e) {
      Log.error("testPingTwoPhase_KxpH0", e);
      fail("Exception occurred: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange_WVIm0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    tradeSLSBBean.publishQuotePriceChange(quoteDataBean, BigDecimal.valueOf(5.0), BigDecimal.valueOf(2.0), 100.0);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeNullQuote_KQHv1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.publishQuotePriceChange(null, BigDecimal.valueOf(5.0), BigDecimal.valueOf(2.0), 100.0);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeNullOldPrice_xRxF2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    try {
      tradeSLSBBean.publishQuotePriceChange(quoteDataBean, null, BigDecimal.valueOf(2.0), 100.0);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeNullChangeFactor_urWc3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    try {
      tradeSLSBBean.publishQuotePriceChange(quoteDataBean, BigDecimal.valueOf(5.0), null, 100.0);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertTrue(marketSummaryDataBean.getVolume() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_VzsO0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterSuccess_FwUu0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterSuccess_FwUu0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("userID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterSuccess_FwUu0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterFailure_PeFr1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean("userID", "password", "fullname", "address", "email", "creditcard");
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_egOL0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings("testUser");
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_1_banU0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_1_banU0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertEquals("symbol", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_5_KZQf4_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotEquals(0, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_BpJN0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    OrderDataBean orderDataBean = new OrderDataBean();
    EntityManager entityManager = Mockito.mock(EntityManager.class);
    Mockito.when(entityManager.find(OrderDataBean.class, orderID)).thenReturn(orderDataBean);
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
    Mockito.verify(orderDataBean).cancel();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_Pley0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_Pley0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    assertEquals("symbol", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WpLl0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WpLl0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals("symbol", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WpLl0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals("companyName", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WpLl0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WpLl0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WpLl0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WpLl0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WpLl0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(0, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_iRGO0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_iRGO0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_iRGO0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_iRGO0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_iRGO0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_withValidOrderID_andTwoPhaseTrue_wHGp0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_withValidOrderID_andTwoPhaseFalse_oXYS1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_YfCw0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    AccountDataBean account = AccountDataBean.getRandomInstance();
    profile.setAccount(account);
    account.setProfile(AccountProfileDataBean.getRandomInstance());
    String userID = profile.getUserID();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_YfCw0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    AccountDataBean account = AccountDataBean.getRandomInstance();
    profile.setAccount(account);
    account.setProfile(AccountProfileDataBean.getRandomInstance());
    String userID = profile.getUserID();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertEquals(userID, result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_KRbm0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_KRbm0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("userID", accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_SynchMode_Pyfq0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_SynchMode_Pyfq0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertEquals("buy", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_AsynchMode_JgTS1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_AsynchMode_JgTS1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertEquals("buy", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_Asynch2PhaseMode_ynPs2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_Asynch2PhaseMode_ynPs2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH_2PHASE);
    assertEquals("buy", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_HoldingNotFound_SZcD0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", 1, TradeConfig.SYNCH);
    assertEquals("cancelled", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_SynchMode_qFmc1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    entityManager.persist(profile);
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    entityManager.persist(holding);
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", holding.getHoldingID(), TradeConfig.SYNCH);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_AsynchMode_kGsB2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    entityManager.persist(profile);
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    entityManager.persist(holding);
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", holding.getHoldingID(), TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2PhaseMode_LkCf3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    entityManager.persist(profile);
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    entityManager.persist(holding);
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", holding.getHoldingID(), TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_WmYx0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_WmYx0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(1, holdingDataBean.getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_rqxX0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("user1");
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_EmptyResult_WYOj1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("unknownUser");
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals("orderType", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(10.0, order.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(account, order.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(quote, order.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_zxMV0_Ewgi0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date createDate = new java.util.Date();
    java.sql.Date lastModifiedDate = new java.sql.Date(createDate.getTime());
    AccountDataBean account = new AccountDataBean(1, 1, 1, createDate, lastModifiedDate, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("60.0"), new BigDecimal("10.0"), 5.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("50.0"), java.util.Date.from(createDate.toInstant()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(holding, order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_IAiI0_tAaM0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("someUserID");
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_CreateHolding_fclX5_yoQD0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("buy");
    try {
      OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
      assertNotNull(result.getHolding());
    } catch (EJBException e) {
      fail("EJBException occurred: " + e.getMessage());
    } catch (Exception e) {
      fail("Exception occurred: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_KxpH0_CupW0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      QuoteDataBean quoteDataBean = tradeSLSBBean.pingTwoPhase("symbol");
      assertNotNull(quoteDataBean);
      assertNotEquals(0, quoteDataBean.getPrice().doubleValue());
    } catch (Exception e) {
      Log.error("testPingTwoPhase_KxpH0", e);
      fail("Exception occurred: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_yWHh0_ohIH0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    try {
      Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
      assertNull(result);
    } catch (Exception e) {
      Log.error("testCompleteOrderAsync_yWHh0", e);
      throw new AssertionError("testCompleteOrderAsync_yWHh0 - error", e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DfBo0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertNotNull(marketSummaryDataBean.getGainPercent());
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertTrue(marketSummaryDataBean.getVolume() >= 0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterSuccess_FwUu0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(accountDataBean);
    assertEquals("userID", accountDataBean.getProfileID());
    assertEquals(new BigDecimal(1000), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_1_banU0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);
    assertEquals("symbol", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_5_KZQf4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);
    assertNotEquals(0, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_Pley0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean);
    assertEquals("symbol", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WpLl0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
    assertEquals("symbol", quoteDataBean.getSymbol());
    assertEquals("companyName", quoteDataBean.getCompanyName());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getOpen());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getLow());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getHigh());
    assertEquals(0, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_iRGO0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_YfCw0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    AccountDataBean account = AccountDataBean.getRandomInstance();
    profile.setAccount(account);
    account.setProfile(AccountProfileDataBean.getRandomInstance());
    String userID = profile.getUserID();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNotNull(result);
    assertEquals(userID, result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_KRbm0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("userID", accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_SynchMode_Pyfq0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);
    assertEquals("buy", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_AsynchMode_JgTS1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
    assertEquals("buy", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_Asynch2PhaseMode_ynPs2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderDataBean);
    assertEquals("buy", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_WmYx0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
    assertEquals(1, holdingDataBean.getHoldingID().intValue());
  }
}