/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeConfigServlet_Coverage_Test_Passing {
  private TradeConfig tradeConfig;
  private TradeConfigServlet tradeConfigServlet;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_UBlM0_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("0");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("10");
    when(req.getParameter("MaxQuotes")).thenReturn("100");
    when(req.getParameter("marketSummaryInterval")).thenReturn("10");
    when(req.getParameter("primIterations")).thenReturn("10");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    verify(req, never()).setAttribute(anyString(), any());
  }
}