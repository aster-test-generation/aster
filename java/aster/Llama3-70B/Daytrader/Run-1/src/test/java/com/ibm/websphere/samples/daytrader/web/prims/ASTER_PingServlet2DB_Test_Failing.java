/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import java.io.IOException;
import java.sql.Connection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2DB_Test_Failing {
  private static int expectedHitCount;
  private static String expectedInitTime;
  PingServlet2DB pingservlet2db;
  ServletConfig servletConfig;
  HttpServletResponse httpservletresponse;
  Connection connection;
  TradeDirect tradedirect;
  HttpServletRequest httpservletrequest;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_LiZc0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getMethod()).thenReturn("GET");
    new PingServlet2DB().doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_CoLC0() {
    PingServlet2DB pingServlet2DB = new PingServlet2DB();
    String result = pingServlet2DB.getServletInfo();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet_arLb0() throws Exception {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    Connection connection = mock(Connection.class);
    TradeDirect tradedirect = mock(TradeDirect.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    PingServlet2DB pingservlet2db = new com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB();
    java.io.PrintWriter printwriter = mock(java.io.PrintWriter.class);
    when(tradedirect.getConnPublic()).thenReturn(connection);
    when(httpservletresponse.getWriter()).thenReturn(printwriter);
    pingservlet2db.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(printwriter).println(anyString());
    verify(tradedirect).getConnPublic();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_TQQy0_NkpF0() throws ServletException, IOException {
    PingServlet2DB pingServlet2DB = new PingServlet2DB();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    java.io.PrintWriter out = mock(java.io.PrintWriter.class);
    when(res.getWriter()).thenReturn(out);
    pingServlet2DB.doGet(req, res);
    verify(out).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_LiZc0_fid2() throws ServletException, IOException {
    PingServlet2DB pingServlet2DB = new PingServlet2DB();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2DB.doPost(req, res);
    verify(req).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_CoLC0_fid2() {
    PingServlet2DB pingServlet2DB = new PingServlet2DB();
    String result = pingServlet2DB.getServletInfo();
    assertEquals("Basic JDBC Read using a prepared statment, makes use of TradeJDBC class", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet_arLb0_fid3() throws Exception {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    Connection connection = mock(Connection.class);
    TradeDirect tradedirect = mock(TradeDirect.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    PingServlet2DB pingservlet2db = new PingServlet2DB();
    java.io.PrintWriter printwriter = mock(java.io.PrintWriter.class);
    when(tradedirect.getConnPublic()).thenReturn(connection);
    when(httpservletresponse.getWriter()).thenReturn(printwriter);
    pingservlet2db.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(printwriter).println(anyString());
    verify(tradedirect).getConnPublic();
  }
}