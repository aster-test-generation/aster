/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Passing {
  @Mock
  private TradeDirect tradeDirect;
  private DirectSLSBBean directslsbbean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_bgoN0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      double result = directSLSBBean.investmentReturn(Math.random(), Math.random());
      Assertions.assertTrue(result >= 0);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetInSession_JkKH0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.setInSession(true);
      Assertions.fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
      Assertions.assertEquals("DirectSLSBBean::setInGlobalTxn not supported", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_iWvo0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    int result = directSLSBBean.getImpl();
    assertEquals(TradeConfig.SESSION_TO_DIRECT, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testcreateOrder_WULJ0() throws Exception {
    directslsbbean = new DirectSLSBBean();
    directslsbbean.tradeDirect = tradeDirect;
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    java.util.Date date = new java.util.Date();
    HoldingDataBean holding = new HoldingDataBean(10.0, BigDecimal.valueOf(100.0), java.util.Date.from(date.toInstant()), account, quote);
    String orderType = "BUY";
    double quantity = 10.0;
    OrderDataBean expectedOrder = new OrderDataBean();
    when(tradeDirect.createOrder(account, quote, holding, orderType, quantity)).thenReturn(expectedOrder);
    OrderDataBean actualOrder = directslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(tradeDirect).createOrder(account, quote, holding, orderType, quantity);
    assertEquals(expectedOrder, actualOrder);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_niME0_Xuhr0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
      assertNotNull(accountDataBean);
      assertNotNull(accountDataBean.getProfileID());
      assertNotNull(accountDataBean.getAccountID());
      assertNotNull(accountDataBean.getCreationDate());
      assertNotNull(accountDataBean.getLastLogin());
      assertNotNull(accountDataBean.getBalance());
      assertNotNull(accountDataBean.getOpenBalance());
      assertNotNull(accountDataBean.getLoginCount());
      assertNotNull(accountDataBean.getLogoutCount());
      assertNotNull(accountDataBean.getHoldings());
      assertNotNull(accountDataBean.getOrders());
      assertNotNull(accountDataBean.getProfile());
    } catch (NullPointerException e) {
      // Expected exception
    } catch (Exception e) {
      fail("Unexpected exception occurred: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_VCZC0_JLFL0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
      assertNotNull(closedOrders);
    } catch (NullPointerException e) {
      assertEquals("Cannot invoke \"com.ibm.websphere.samples.daytrader.interfaces.TradeServices.setInSession(boolean)\" because \"this.tradeDirect\" is null", e.getMessage());
    } catch (Exception e) {
      fail("Exception occurred: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WNhV0_MwTt0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = null;
    try {
      quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    } catch (Exception e) {
      // Exception is expected, so do nothing
    }
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_Hxtc0_MKvq0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      Collection<?> result = directSLSBBean.getClosedOrders("userID");
      assertNotNull(result);
    } catch (Exception e) {
      // No-op
    }
  }
}