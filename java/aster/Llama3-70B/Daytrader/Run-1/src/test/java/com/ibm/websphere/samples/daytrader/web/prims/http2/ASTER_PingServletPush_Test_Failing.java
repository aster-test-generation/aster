/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.http2;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.PushBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletPush_Test_Failing {
  private static String initTime;
  private static int hitCount;
  PingServletPush pingservletpush;
  HttpServlet httpservlet;
  ServletConfig servletConfig;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  PushBuilder pushBuilder;
  PrintWriter printWriter;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pushBuilder = mock(PushBuilder.class);
    printWriter = mock(PrintWriter.class);
    pingservletpush = new PingServletPush();
    when(httpservletrequest.newPushBuilder()).thenReturn(pushBuilder);
    when(httpservletresponse.getWriter()).thenReturn(printWriter);
    pingservletpush.doGet(httpservletrequest, httpservletresponse);
    verify(pushBuilder).path("images/graph.gif");
    verify(pushBuilder).push();
    verify(printWriter).write(anyString());
    assertEquals(1, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_PushBuilderNotNull_gPFa0() throws ServletException, IOException {
    PingServletPush pingServletPush = new PingServletPush();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenReturn(mock(PushBuilder.class));
    pingServletPush.doGet(req, resp);
    verify(req).newPushBuilder();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_PushBuilderNull_Hxzx1() throws ServletException, IOException {
    PingServletPush pingServletPush = new PingServletPush();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenReturn(null);
    pingServletPush.doGet(req, resp);
    verify(req).newPushBuilder();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Exception_aiBe2() throws ServletException, IOException {
    PingServletPush pingServletPush = new PingServletPush();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenThrow(new Exception());
    pingServletPush.doGet(req, resp);
    verify(req).newPushBuilder();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NormalFlow_geWN3() throws ServletException, IOException {
    PingServletPush pingServletPush = new PingServletPush();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    PrintWriter writer = mock(PrintWriter.class);
    when(resp.getWriter()).thenReturn(writer);
    when(req.newPushBuilder()).thenReturn(mock(PushBuilder.class));
    pingServletPush.doGet(req, resp);
    verify(resp).getWriter();
    verify(writer).write(anyString());
  }
}