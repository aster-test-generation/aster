/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingJSONPObjectFactory_Coverage_Test_Failing {
  private PingJSONPObjectFactory pingJSONPObjectFactory;
  private ServletConfig servletConfig;
  private HttpServletResponse res;
  private JsonReader jsonReader;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Catch_Block_GZRS1() throws ServletException, IOException {
    PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doThrow(new Exception()).when(pingJSONPObjectFactory).doGet(req, res);
    pingJSONPObjectFactory.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_End_Of_Method_evmN2() throws ServletException, IOException {
    PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJSONPObjectFactory.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_GetOutputStream_sUDe4() throws ServletException, IOException {
    PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
    pingJSONPObjectFactory.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_GenerateJSON_ojaU10() throws ServletException, IOException {
    PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(mock(JsonObject.class).toString()).thenReturn("generatedJSON");
    pingJSONPObjectFactory.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SendError_500_lJzF0_EuPv0() throws ServletException, IOException {
    PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJSONPObjectFactory.doGet(req, res);
    verify(res, times(1)).sendError(500, anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SetContentType_UXnD3_qBPq0() throws ServletException, IOException {
    PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJSONPObjectFactory.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetServletInfo_uDSx0() {
    PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
    String expected = "Basic JSON generation and parsing in a servlet";
    String actual = pingJSONPObjectFactory.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_oaRA0() throws javax.servlet.ServletException {
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    servletConfig = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_bnaY1() throws ServletException {
    pingJSONPObjectFactory.init(servletConfig);
    verify(servletConfig).getServletContext(); // assuming super.init(config) calls getServletContext()
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SetContentType_UXnD3_qBPq0_fid2() throws ServletException, IOException {
    PingServlet pingServlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    verify(res).setContentType("application/json");
  }
}