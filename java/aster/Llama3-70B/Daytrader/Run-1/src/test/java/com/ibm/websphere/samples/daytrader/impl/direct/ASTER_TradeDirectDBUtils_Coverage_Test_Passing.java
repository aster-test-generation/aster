/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.util.MDBStats;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.concurrent.TimeUnit;
import javax.sql.DataSource;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeDirectDBUtils_Coverage_Test_Passing {
  TradeDirectDBUtils tradedirectdbutils;
  DataSource datasource;
  Connection connection;
  PreparedStatement preparedstatement;
  ResultSet resultset;
  InputStream ddlFile;

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTrade_MDBStatsReset_PpJJ1() throws Exception {
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeUpdate()).thenReturn(1);
    RunStatsDataBean result = tradedirectdbutils.resetTrade(true);
    verify(MDBStats.getInstance(), times(1)).reset();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTrade_NewRunStatsDataBean_UAfy2() throws Exception {
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeUpdate()).thenReturn(1);
    RunStatsDataBean result = tradedirectdbutils.resetTrade(true);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTrade_ConnectionNull_czvx3() throws Exception {
    when(datasource.getConnection()).thenReturn(null);
    assertThrows(Exception.class, () -> tradedirectdbutils.resetTrade(true));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTrade_SetAutoCommitFalse_gfKl4() throws Exception {
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeUpdate()).thenReturn(1);
    tradedirectdbutils.resetTrade(true);
    verify(connection, times(1)).setAutoCommit(false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTrade_DeleteFromQuoteEjb_pPar5() throws Exception {
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeUpdate()).thenReturn(1);
    tradedirectdbutils.resetTrade(true);
    verify(preparedstatement, times(1)).executeUpdate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTrade_CloseStatement_ksrM6() throws Exception {
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeUpdate()).thenReturn(1);
    tradedirectdbutils.resetTrade(true);
    verify(preparedstatement, times(1)).close();
  }

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_vVSH0() throws Exception {
    tradedirectdbutils = new TradeDirectDBUtils();
  }
}