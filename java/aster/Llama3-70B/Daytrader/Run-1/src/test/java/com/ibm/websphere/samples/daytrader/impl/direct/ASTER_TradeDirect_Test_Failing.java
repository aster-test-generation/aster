/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.MDBStats;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
  TradeDirect tradedirect;
  Connection connection;
  DataSource datasource;
  Statement statement;
  MDBStats mdbStats;
  Object[] sqlBuffer;
  private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
  private static Integer marketSummaryLock = new Integer(0);
  private static long nextMarketSummary = System.currentTimeMillis();
  PreparedStatement preparedstatement;
  ResultSet resultset;
  TradeConfig tradeConfig;
  private static String getAllQuotesSQL = "select * from quoteejb q";
  private boolean inSession = false;
  TradeDirect tradeDirect;
  PreparedStatement preparedStatement;
  ResultSet resultSet;
  DataSource dataSource;
  private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
  QuoteDataBean quoteDataBean;
  AccountDataBean accountDataBean;
  private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
  private UserTransaction txn;
  HoldingDataBean holdingDataBean;
  private KeySequenceDirect keySequenceDirect;
  private Log log;
  AccountProfileDataBean profileData;
  OrderDataBean orderDataBean;
  private static final String CLOSED_ORDERS_SQL = "(select a.accountid from accountejb a where a.profile_userid = ?)";
  private static final String USER_ID = "test_user";
  private ManagedExecutorService mes;
  private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
  private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
  private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
  private static BigDecimal ZERO = new BigDecimal(0.0);
  private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
  private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_2() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    resultset = mock(ResultSet.class);
    datasource = mock(DataSource.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(0);
    MarketSummaryDataBean marketSummaryDataBean = tradedirect.getMarketSummary();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(-1);
    marketSummaryDataBean = tradedirect.getMarketSummary();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(1);
    long currentTime = System.currentTimeMillis();
    when(System.currentTimeMillis()).thenReturn(currentTime);
    when(System.currentTimeMillis()).thenReturn(currentTime + 1000);
    marketSummaryDataBean = tradedirect.getMarketSummary();
    assertEquals(cachedMSDB, marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_IrGd0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    try {
      tradeDirect.logout(userID);
      MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
      assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
      fail("Logout failed");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume_1() throws Exception {
    connection = mock(Connection.class);
    preparedStatement = mock(PreparedStatement.class);
    resultSet = mock(ResultSet.class);
    dataSource = mock(DataSource.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true);
    when(resultSet.getString("symbol")).thenReturn("ABC");
    when(resultSet.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
    when(resultSet.getDouble("volume")).thenReturn(100.0);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("ABC", BigDecimal.valueOf(1.1), 100.0);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume_2() throws Exception {
    connection = mock(Connection.class);
    preparedStatement = mock(PreparedStatement.class);
    resultSet = mock(ResultSet.class);
    dataSource = mock(DataSource.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true);
    when(resultSet.getString("symbol")).thenReturn("ABC");
    when(resultSet.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
    when(resultSet.getDouble("volume")).thenReturn(100.0);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("ABC", BigDecimal.valueOf(1.1), 100.0);
    assertEquals("ABC", result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume_3() throws Exception {
    connection = mock(Connection.class);
    preparedStatement = mock(PreparedStatement.class);
    resultSet = mock(ResultSet.class);
    dataSource = mock(DataSource.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true);
    when(resultSet.getString("symbol")).thenReturn("ABC");
    when(resultSet.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
    when(resultSet.getDouble("volume")).thenReturn(100.0);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("ABC", BigDecimal.valueOf(1.1), 100.0);
    assertEquals(BigDecimal.valueOf(11.0), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume_4() throws Exception {
    connection = mock(Connection.class);
    preparedStatement = mock(PreparedStatement.class);
    resultSet = mock(ResultSet.class);
    dataSource = mock(DataSource.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true);
    when(resultSet.getString("symbol")).thenReturn("ABC");
    when(resultSet.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
    when(resultSet.getDouble("volume")).thenReturn(100.0);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("ABC", BigDecimal.valueOf(1.1), 100.0);
    assertEquals(110.0, result.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_YSln0() {
    TradeDirect tradeDirect = new TradeDirect();
    double result = tradeDirect.investmentReturn(Math.random(), Math.random());
    assertEquals(0.0, result, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_InSessionTrue_TwoPhaseTrue_QkTR0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_InSessionFalse_TwoPhaseTrue_RJwc1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buyOrder_QEjt0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = orderData.getOrderID();
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, true);
      assertNotNull(result);
      assertEquals(orderID, result.getOrderID());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sellOrder_opBE1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("sell");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = orderData.getOrderID();
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, true);
      assertNotNull(result);
      assertEquals(orderID, result.getOrderID());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buyOrder_Mcjh0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("new");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
      assertNotNull(result);
    } catch (Exception e) {
      fail();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sellOrder_ZKhU1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("new");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
      assertNotNull(result);
    } catch (Exception e) {
      fail();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buyOrder_oiDG0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = 1;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, true);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sellOrder_mNGh1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = 1;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, true);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_cancelledOrder_AqKq2() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("cancelled");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = 1;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, true);
      assertNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0_1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0_2() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0_3() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0_4() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0_5() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0_6() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0_7() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0_8() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertTrue(quoteDataBean.getChange() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0_9() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertTrue(quoteDataBean.getVolume() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_IrGd0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    try {
      tradeDirect.logout(userID);
      assertTrue(true); // logout successful
    } catch (Exception e) {
      fail("Logout failed");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_7_tEUW6_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.sell("userID", new Integer(1), TradeConfig.SYNCH);
    } catch (Exception e) {
      fail();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_8_rTWB7_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.sell("userID", new Integer(1), TradeConfig.ASYNCH);
    } catch (Exception e) {
      fail();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_zGgC0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection connection = tradeDirect.getConnPublic();
    assertNotNull(connection);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_RYrI0() {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    try {
      AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
      assertNotNull(result);
      assertEquals("fullName", result.getFullName());
      assertEquals("address", result.getAddress());
      assertEquals("email", result.getEmail());
      assertEquals("creditCard", result.getCreditCard());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    resultset = mock(ResultSet.class);
    datasource = mock(DataSource.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(0);
    MarketSummaryDataBean marketSummaryDataBean = tradedirect.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(-1);
    marketSummaryDataBean = tradedirect.getMarketSummary();
    assertEquals(cachedMSDB, marketSummaryDataBean);
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(1);
    long currentTime = System.currentTimeMillis();
    when(System.currentTimeMillis()).thenReturn(currentTime);
    when(System.currentTimeMillis()).thenReturn(currentTime + 1000);
    marketSummaryDataBean = tradedirect.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_jyXd0() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean);
    assertNotNull(quoteDataBean.getCompanyName());
    assertNotNull(quoteDataBean.getPrice());
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
    assertNotNull(quoteDataBean.getSymbol());
    assertTrue(quoteDataBean.getChange() >= 0);
    assertTrue(quoteDataBean.getVolume() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume() throws Exception {
    connection = mock(Connection.class);
    preparedStatement = mock(PreparedStatement.class);
    resultSet = mock(ResultSet.class);
    dataSource = mock(DataSource.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true);
    when(resultSet.getString("symbol")).thenReturn("ABC");
    when(resultSet.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
    when(resultSet.getDouble("volume")).thenReturn(100.0);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("ABC", BigDecimal.valueOf(1.1), 100.0);
    assertNotNull(result);
    assertEquals("ABC", result.getSymbol());
    assertEquals(BigDecimal.valueOf(11.0), result.getPrice());
    assertEquals(110.0, result.getVolume(), 0.0);
  }
}