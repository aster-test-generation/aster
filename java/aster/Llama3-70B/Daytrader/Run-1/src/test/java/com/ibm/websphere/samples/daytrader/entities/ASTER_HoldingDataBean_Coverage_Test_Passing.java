/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_QuoteNotNull_fHVK0() {
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean(10.0, BigDecimal.valueOf(100.0), new Date(), null, quote);
    assertEquals("symbol", holding.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_QuoteNullAndQuoteIDNull_otcO2() {
    HoldingDataBean holding = new HoldingDataBean(10.0, BigDecimal.valueOf(100.0), new Date(), null, null);
    assertNull(holding.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_WithNullHoldingID_hEzB0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    int expected = 0;
    int actual = holdingDataBean.hashCode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_WithNonNullHoldingID_kpoZ1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(1, 0.0, null, null, null);
    int expected = 1;
    int actual = holdingDataBean.hashCode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_HoldingID_oOuh0_1() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_HoldingID_oOuh0_2() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertTrue(holdingDataBean.getHoldingID() instanceof Integer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_Quantity_BbDj1() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertTrue(holdingDataBean.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PurchasePrice_cJvm2_1() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PurchasePrice_cJvm2_2() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertTrue(holdingDataBean.getPurchasePrice().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PurchaseDate_hXGQ3_1() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PurchaseDate_hXGQ3_2() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertTrue(holdingDataBean.getPurchaseDate().before(new Date()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QuoteID_rJny4_1() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QuoteID_rJny4_2() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertTrue(holdingDataBean.getQuoteID().length() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withPurchaseDateAndQuoteID_NlKE1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(100.0), BigDecimal.valueOf(100.0), BigDecimal.valueOf(100.0), 0.0);
    HoldingDataBean holdingDataBean = new HoldingDataBean(10.0, BigDecimal.valueOf(100.0), new Date(), new AccountDataBean(), quoteDataBean);
    holdingDataBean.setHoldingID(1);
    String expected = "\n\tHolding Data for holding: 1\n\t\t      quantity:10.0\n\t\t purchasePrice:100.0\n\t\t  purchaseDate:" + new Date() + "\n\t\t       quoteID:symbol";
    assertEquals(expected, holdingDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NotInstanceOfHoldingDataBean_NiFY0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Object object = new Object();
    assertFalse(holdingDataBean.equals(object));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_eykH1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    assertFalse(holdingDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_LErk2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    assertTrue(holdingDataBean.equals(holdingDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentHoldingID_aCam3() {
    HoldingDataBean holdingDataBean1 = new HoldingDataBean(1, 0, null, null, null);
    HoldingDataBean holdingDataBean2 = new HoldingDataBean(2, 0, null, null, null);
    assertFalse(holdingDataBean1.equals(holdingDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameHoldingID_BqEf4() {
    HoldingDataBean holdingDataBean1 = new HoldingDataBean(1, 0, null, null, null);
    HoldingDataBean holdingDataBean2 = new HoldingDataBean(1, 0, null, null, null);
    assertTrue(holdingDataBean1.equals(holdingDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullHoldingID_VtQk5() {
    HoldingDataBean holdingDataBean1 = new HoldingDataBean(null, 0, null, null, null);
    HoldingDataBean holdingDataBean2 = new HoldingDataBean(null, 0, null, null, null);
    assertTrue(holdingDataBean1.equals(holdingDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_QuoteNull_jolz1_mSqb0() {
    HoldingDataBean holding = new HoldingDataBean(10.0, BigDecimal.valueOf(100.0), new Date(), null, null);
    holding = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(100.0), new Date(), "quoteID");
    assertEquals("quoteID", holding.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withHoldingID_krEE0_tujb0_fid1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(10.0, BigDecimal.valueOf(100.0), new Date(), new AccountDataBean(1, 1, new Date(), new Date(), BigDecimal.valueOf(100.0), BigDecimal.valueOf(100.0), "profileID"), new QuoteDataBean("symbol"));
    holdingDataBean.setHoldingID(1);
    String expected = "\n\tHolding Data for holding: 1\n\t\t      quantity:10.0\n\t\t purchasePrice:100.0\n\t\t  purchaseDate:" + new Date() + "\n\t\t       quoteID:symbol";
    assertEquals(expected, holdingDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_HoldingID_oOuh0() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getHoldingID());
    assertTrue(holdingDataBean.getHoldingID() instanceof Integer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PurchasePrice_cJvm2() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getPurchasePrice());
    assertTrue(holdingDataBean.getPurchasePrice().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PurchaseDate_hXGQ3() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getPurchaseDate());
    assertTrue(holdingDataBean.getPurchaseDate().before(new Date()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QuoteID_rJny4() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getQuoteID());
    assertTrue(holdingDataBean.getQuoteID().length() > 0);
  }
}