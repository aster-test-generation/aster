/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SimpleBean1_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDesc_bJGn0() throws Exception {
    SimpleBean1 simpleBean1 = new SimpleBean1();
    String desc = simpleBean1.getDesc();
    assert desc.equals("Test Pattern");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDesc_qARC1() throws Exception {
    SimpleBean1 simpleBean1 = new SimpleBean1();
    String pattern = "Test Pattern";
    String desc = simpleBean1.getDesc();
    assert desc.equals(pattern);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withDefaultValues_jQkh0_lAJQ0() throws Exception {
    try {
      SimpleBean1 simpleBean1 = new SimpleBean1();
      String result = simpleBean1.toString();
      assertNotNull(result);
      assertTrue(result.contains("iMin:"));
      assertTrue(result.contains("iMax:"));
      assertTrue(result.contains("iMinArray:"));
      assertTrue(result.contains("iMaxArray:"));
      assertTrue(result.contains("pattern:"));
      assertTrue(result.contains("setToFail:"));
    } catch (Exception e) {
      fail("Exception occurred");
    }
  }
}