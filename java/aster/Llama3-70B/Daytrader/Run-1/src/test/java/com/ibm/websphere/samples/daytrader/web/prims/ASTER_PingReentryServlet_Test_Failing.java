/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingReentryServlet_Test_Failing {
  PingReentryServlet pingreentryservlet;
  ServletConfig servletConfig;
  HttpServlet httpservlet;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;
  HttpServletRequest httpservletrequest;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    servletConfig = mock(ServletConfig.class);
    httpservlet = mock(HttpServlet.class);
    pingreentryservlet = new PingReentryServlet();
    pingreentryservlet.init(servletConfig);
    verify(httpservlet).init(servletConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_nSmx0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getMethod()).thenReturn("GET");
    new PingReentryServlet().doGet(req, res);
    verify(res, times(1)).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_UEqA0() {
    PingReentryServlet pingReentryServlet = new PingReentryServlet();
    String result = pingReentryServlet.getServletInfo();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpservlet = mock(HttpServlet.class);
    pingreentryservlet = new PingReentryServlet();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    when(httpservletrequest.getParameter("numReentries")).thenReturn("2");
    when(httpservletrequest.getParameter("sleep")).thenReturn("1000");
    when(httpservletrequest.getServerName()).thenReturn("localhost");
    when(httpservletrequest.getServerPort()).thenReturn(8080);
    when(httpservletrequest.getContextPath()).thenReturn("/context");
    pingreentryservlet.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(servletoutputstream).println("1"); // verify the output
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet_NoReentries() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpservlet = mock(HttpServlet.class);
    pingreentryservlet = new PingReentryServlet();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    when(httpservletrequest.getParameter("numReentries")).thenReturn(null);
    when(httpservletrequest.getParameter("sleep")).thenReturn("1000");
    pingreentryservlet.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(servletoutputstream).println("0"); // verify the output
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet_Exception() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpservlet = mock(HttpServlet.class);
    pingreentryservlet = new PingReentryServlet();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    when(httpservletrequest.getParameter("numReentries")).thenReturn("2");
    when(httpservletrequest.getParameter("sleep")).thenReturn("1000");
    when(httpservletrequest.getServerName()).thenReturn("localhost");
    when(httpservletrequest.getServerPort()).thenReturn(8080);
    when(httpservletrequest.getContextPath()).thenReturn("/context");
    doThrow(new IOException("Mocked exception")).when(servletoutputstream).println(anyString());
    pingreentryservlet.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).sendError(500, "Mocked exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NoReentries_UnaV0() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(out).println("0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Reentries_dEDN1() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    when(req.getParameter("numReentries")).thenReturn("5");
    when(req.getServerName()).thenReturn("localhost");
    when(req.getServerPort()).thenReturn(8080);
    when(req.getContextPath()).thenReturn("");
    servlet.doGet(req, res);
    verify(out).println("45");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Sleep_uCia2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    when(req.getParameter("sleep")).thenReturn("1000");
    when(req.getParameter("numReentries")).thenReturn("1");
    when(req.getServerName()).thenReturn("localhost");
    when(req.getServerPort()).thenReturn(8080);
    when(req.getContextPath()).thenReturn("/daytrader");
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.doGet(req, res);
    verify(out).println("0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Exception_GcHL3() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("numReentries")).thenReturn("abc");
    when(req.getServerName()).thenReturn("localhost");
    when(req.getServerPort()).thenReturn(8080);
    when(req.getContextPath()).thenReturn("");
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.doGet(req, res);
    verify(res).sendError(500, anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_HTTPConnectionException_WAML4() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("numReentries")).thenReturn("5");
    when(req.getServerName()).thenReturn("localhost");
    when(req.getServerPort()).thenReturn(8080);
    when(req.getContextPath()).thenReturn("/context");
    URL url = new URL("http://localhost:8080/context");
    HttpURLConnection con = mock(HttpURLConnection.class);
    when(con.getInputStream()).thenThrow(new IOException());
    when(url.openConnection()).thenReturn(con);
    servlet.doGet(req, res);
    verify(res).sendError(500, anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_nSmx0_fid1() throws ServletException, IOException {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req, times(1)).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_UEqA0_fid1() {
    PingReentryServlet pingReentryServlet = new PingReentryServlet();
    String result = pingReentryServlet.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Reentries_dEDN1_fid1() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    when(req.getParameter("numReentries")).thenReturn("5");
    servlet.doGet(req, res);
    verify(out).println("4");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Sleep_uCia2_fid1() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    when(req.getParameter("sleep")).thenReturn("1000");
    servlet.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Exception_GcHL3_fid1() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("numReentries")).thenReturn("abc");
    servlet.doGet(req, res);
    verify(res).sendError(500, anyString());
  }
}