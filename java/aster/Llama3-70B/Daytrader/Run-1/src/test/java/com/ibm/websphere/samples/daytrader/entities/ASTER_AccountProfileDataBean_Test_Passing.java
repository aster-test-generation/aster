/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountProfileDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreditCard_zUTS0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    assertEquals("creditCard", accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ReturnTrue_wjTG0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    assertTrue(accountProfileDataBean.equals(accountProfileDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnFalse_oBvX1() {
    Object object = new Object();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    assertFalse(accountProfileDataBean.equals(object));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_ReturnTrue_pxvF2() {
    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean accountProfileDataBean2 = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    assertTrue(accountProfileDataBean1.equals(accountProfileDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentUserID_ReturnFalse_eYaj3() {
    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean accountProfileDataBean2 = new AccountProfileDataBean("differentUserID", "password", "fullName", "address", "email", "creditCard");
    assertFalse(accountProfileDataBean1.equals(accountProfileDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullUserID_ReturnFalse_wFDH4() {
    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean accountProfileDataBean2 = new AccountProfileDataBean(null, "password", "fullName", "address", "email", "creditCard");
    assertFalse(accountProfileDataBean1.equals(accountProfileDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEmail_IoTK0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.setEmail("newEmail");
    assertEquals("newEmail", accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_upzj0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    String expected = "\n\tAccount Profile Data for userID:userID\n\t\t   passwd:password\n\t\t   fullName:fullName\n\t\t    address:address\n\t\t      email:email\n\t\t creditCard:creditCard";
    assertEquals(expected, accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ULAf0_1() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ULAf0_2() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ULAf0_3() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ULAf0_4() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(accountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ULAf0_5() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ULAf0_6() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ULAf0_7() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUserID_YfMh0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.setUserID("newUserID");
    assertEquals("newUserID", accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEmail_enTo0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email@example.com", "creditCard");
    assertEquals("email@example.com", accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_Wzpq0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    assertEquals("user1", accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_WhenUserIDIsNull_ThenReturn0_mxub0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    assertEquals(0, accountProfileDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_WhenUserIDIsNotNull_ThenReturnUserIDHashCode_bwoc1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "", "", "", "", "");
    assertEquals("user1".hashCode(), accountProfileDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFullName_RkGx0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.setFullName("newFullName");
    assertEquals("newFullName", accountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddress_kxUz0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    assertEquals("address", accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPassword_nowW0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    assertEquals("password", accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreditCard_Gbel0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.setCreditCard("newCreditCard");
    assertEquals("newCreditCard", accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_FsgT0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    String result = accountProfileDataBean.toHTML();
    assertEquals("<BR>Account Profile Data for userID: <B>userID</B>" + "<LI>   passwd:password</LI>" + "<LI>   fullName:fullName</LI>" + "<LI>    address:address</LI>" + "<LI>      email:email</LI>" + "<LI> creditCard:creditCard</LI>", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPassword_fTDd0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.setPassword("newPassword");
    assertEquals("newPassword", accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullName_ZZeI0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    assertEquals("fullName", accountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAddress_CQIH0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.setAddress("newAddress");
    assertEquals("newAddress", accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_grRM0_uaCU0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountProfileDataBean.setAccount(accountDataBean);
    Assertions.assertEquals(accountDataBean, accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_6yf4p_TuWN0_fid1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.setAccount(new AccountDataBean());
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ULAf0() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(accountProfileDataBean);
    assertNotNull(accountProfileDataBean.getUserID());
    assertNotNull(accountProfileDataBean.getPassword());
    assertNotNull(accountProfileDataBean.getFullName());
    assertNotNull(accountProfileDataBean.getAddress());
    assertNotNull(accountProfileDataBean.getEmail());
    assertNotNull(accountProfileDataBean.getCreditCard());
  }
}