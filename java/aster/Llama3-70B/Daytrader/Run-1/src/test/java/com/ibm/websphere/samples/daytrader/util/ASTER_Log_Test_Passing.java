/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Log_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintObject_uOYc0() {
    Log log = new Log();
    Object o = new Object();
    Log.log("\t" + o.toString());
    assertEquals("java.lang.Object@" + Integer.toHexString(System.identityHashCode(o)), o.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_EmptyCollection_ldrN0() {
    Collection<Object> collection = new ArrayList<>();
    Log.printCollection(collection);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_NonEmptyCollection_heba1() {
    Collection<Object> collection = new ArrayList<>();
    collection.add("Element1");
    collection.add("Element2");
    Log.printCollection(collection);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_YVXR0_1() {
    Throwable e = new Throwable("Test Throwable");
    String message = "Test Message";
    Log.error(e, message);
    assertEquals("Test Message\n\t", message + "\n\t");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_YVXR0_2() {
    Throwable e = new Throwable("Test Throwable");
    String message = "Test Message";
    Log.error(e, message);
    assertNotNull(e.getStackTrace());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_mtDl0() {
    Log log = new Log();
    String message = "Test Message";
    Object parm1 = "Parm1";
    Object parm2 = "Parm2";
    Object parm3 = "Parm3";
    Object parm4 = "Parm4";
    Object parm5 = "Parm5";
    Log.trace(message, parm1, parm2, parm3, parm4, parm5);
    String expected = message + "(" + parm1 + ", " + parm2 + ", " + parm3 + ")" + ", " + parm4 + ", " + parm5;
    assertEquals(expected, message + "(" + parm1 + ", " + parm2 + ", " + parm3 + ")" + ", " + parm4 + ", " + parm5);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoTrace_KNeS0() {
    Log log = new Log();
    java.util.logging.Logger logger = java.util.logging.Logger.getLogger("test");
    log = new Log();
    logger.setLevel(java.util.logging.Level.FINE);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_trace_YqzR0() {
    Log log = new Log();
    String message = "Test Message";
    Object parm1 = "Parameter 1";
    Object parm2 = 2;
    Object parm3 = 3.0;
    log.trace(message, parm1, parm2, parm3);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_jBaP0() {
    Log log = new Log();
    String message = "Hello, World!";
    Log.print(message);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_uwcM0() {
    Throwable e = new Throwable();
    Log.error("msg1", "msg2", e);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_WosM0() {
    Log log = new Log();
    String message = "Test Message";
    Object parm1 = "Parm1";
    Object parm2 = "Parm2";
    Object parm3 = "Parm3";
    Object parm4 = "Parm4";
    Object parm5 = "Parm5";
    Object parm6 = "Parm6";
    Object parm7 = "Parm7";
    Log.trace(message, parm1, parm2, parm3, parm4, parm5, parm6, parm7);
    assertEquals("Test Message(Parm1, Parm2, Parm3), Parm4, Parm5, Parm6, Parm7", message + "(" + parm1 + ", " + parm2 + ", " + parm3 + ")" + ", " + parm4 + ", " + parm5 + ", " + parm6 + ", " + parm7);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_BxpK0() {
    Log log = new Log();
    String message = "Test Message";
    Object parm1 = "Parm1";
    Object parm2 = "Parm2";
    Object parm3 = "Parm3";
    Object parm4 = "Parm4";
    Object parm5 = "Parm5";
    Object parm6 = "Parm6";
    Log.trace(message, parm1, parm2, parm3, parm4, parm5, parm6);
    assertEquals("Test Message(Parm1, Parm2, Parm3), Parm4, Parm5, Parm6", message + "(" + parm1 + ", " + parm2 + ", " + parm3 + ")" + ", " + parm4 + ", " + parm5 + ", " + parm6);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_VhwE0() {
    Throwable e = new Throwable();
    Log.error(e, "msg1", "msg2");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_trace_WZqv0_1() {
    Log log = new Log();
    java.util.logging.Logger logger = java.util.logging.Logger.getLogger("test");
    java.util.logging.Level level = java.util.logging.Level.FINE;
    String message = "Test message";
    java.util.logging.LogRecord record = new java.util.logging.LogRecord(level, message + " threadID=" + Thread.currentThread().getId());
    logger.log(record);
    assertEquals(level, record.getLevel());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_trace_WZqv0_2() {
    Log log = new Log();
    java.util.logging.Logger logger = java.util.logging.Logger.getLogger("test");
    java.util.logging.Level level = java.util.logging.Level.FINE;
    String message = "Test message";
    java.util.logging.LogRecord record = new java.util.logging.LogRecord(level, message + " threadID=" + Thread.currentThread().getId());
    logger.log(record);
    assertEquals(message + " threadID=" + Thread.currentThread().getId(), record.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoDebug_nQGZ0() {
    assertTrue(Log.doDebug());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_cRxi0() {
    Throwable e = new Throwable();
    Log.error(e, "msg1", "msg2", "msg3");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_Eavn0() {
    Throwable e = new Throwable();
    Log.error("msg1", "msg2", "msg3", e);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_trace_BiZz0() {
    Log log = new Log();
    String message = "Test Message";
    Object parm1 = new Object();
    Object parm2 = new Object();
    log.trace(message, parm1, parm2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_bFnH0() {
    Throwable e = new Throwable("Test Throwable");
    Log.error("Test Message", e);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_ljBT0() {
    Collection<String> collection = new ArrayList<>();
    collection.add("Element1");
    collection.add("Element2");
    Log log = new Log();
    Log.printCollection("Test Message", collection);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLog_kuUl0_fiFk0() {
    Log log = new Log();
    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();
    java.lang.System.setOut(new java.io.PrintStream(out));
    log.printCollection("Hello", java.util.Collections.singleton("World"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_YVXR0() {
    Throwable e = new Throwable("Test Throwable");
    String message = "Test Message";
    Log.error(e, message);
    assertEquals("Test Message\n\t", message + "\n\t");
    assertNotNull(e.getStackTrace());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_trace_WZqv0() {
    Log log = new Log();
    java.util.logging.Logger logger = java.util.logging.Logger.getLogger("test");
    java.util.logging.Level level = java.util.logging.Level.FINE;
    String message = "Test message";
    java.util.logging.LogRecord record = new java.util.logging.LogRecord(level, message + " threadID=" + Thread.currentThread().getId());
    logger.log(record);
    assertEquals(level, record.getLevel());
    assertEquals(message + " threadID=" + Thread.currentThread().getId(), record.getMessage());
  }
}