/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_QuoteJSF_Test_Failing {
  private TradeServices tradeAction;
  private ExternalContext context;
  private HtmlDataTable dataTable;
  private Integer quantity = 100;
  QuoteJSF quotejsf;
  HttpSession httpsession;
  ExternalContext externalcontext;
  TradeServices tradeServices;
  QuoteData quoteData;
  OrderDataBean orderDataBean;
  OrderData orderData;
  private String symbols = null;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbols_GcGW0() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    quoteJSF.setSymbols("AAPL,GOOG,MSFT");
    assertEquals("AAPL,GOOG,MSFT", quoteJSF.getSymbols());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_StCd0() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    assertEquals(0, quoteJSF.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDataTable_EnYV0() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    HtmlDataTable dataTable = quoteJSF.getDataTable();
    assertNotNull(dataTable);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDataTable_JoOG0() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    HtmlDataTable dataTable = mock(HtmlDataTable.class);
    quoteJSF.setDataTable(dataTable);
    assertSame(dataTable, quoteJSF.getDataTable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuotes_cWrb0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    QuoteData[] quotes = quoteJSF.getQuotes();
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuotes_Nyyu0() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    QuoteData[] quotes = new QuoteData[1];
    quoteJSF.setQuotes(quotes);
    assertArrayEquals(quotes, quoteJSF.getQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbols_Uyuw0() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    assertEquals("", quoteJSF.getSymbols());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_upVu0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    quoteJSF.getAllQuotes();
    verify(quoteJSF).getQuotesBySymbols();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_CKtG0() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    Integer quantity = 10;
    quoteJSF.setQuantity(quantity);
    assertEquals(quantity, quoteJSF.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_StCd0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    QuoteJSF quoteJSF = new QuoteJSF(services);
    assertNull(quoteJSF.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDataTable_EnYV0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    QuoteJSF quoteJSF = new QuoteJSF(services);
    quoteJSF.setQuantity(10); // set quantity to avoid NullPointerException
    HtmlDataTable dataTable = quoteJSF.getDataTable();
    assertNotNull(dataTable);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDataTable_JoOG0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    QuoteJSF quoteJSF = new QuoteJSF(services);
    HtmlDataTable dataTable = mock(HtmlDataTable.class);
    quoteJSF.setDataTable(dataTable);
    assertNotNull(quoteJSF.getDataTable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbols_Uyuw0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    QuoteJSF quoteJSF = new QuoteJSF(services);
    assertNotNull(quoteJSF);
  }
}