/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.util.Log;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingJSONPObject_Coverage_Test_Failing {
  private ServletConfig servletConfig;
  private PingJSONPObject pingJSONPObject;
  private HttpServletResponse res;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_bQiv0() {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    String expected = "Basic JSON generation and parsing in a servlet";
    String actual = pingJSONPObject.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_aPAm1() {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    String expected = "Basic JSON generation and parsing in a servlet";
    String actual = pingJSONPObject.getServletInfo();
    assertEquals("getServletInfo should return 'Basic JSON generation and parsing in a servlet'", expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_EndOfMethod_bcBG2() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJSONPObject.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_GetOutputStream_IjgN5() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    pingJSONPObject.doGet(req, res);
    verify(res, times(1)).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_MnNJ0_VbwR0() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = mock(PingJSONPObject.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    pingJSONPObject.doGet(req, res);
    verify(res).setContentType("application/json");
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_BvBy0() throws javax.servlet.ServletException {
    pingJSONPObject = new PingJSONPObject();
    servletConfig = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_PFYZ1() throws ServletException {
    pingJSONPObject.init(servletConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SetContentType_nTkC4_slTO0() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJSONPObject.doGet(req, res);
    verify(res, times(1)).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_LogError_GvrX0_htZi0() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    Log log = mock(Log.class);
    doNothing().when(log).error(any(Exception.class), anyString());
    try {
      pingJSONPObject.doGet(req, res);
    } catch (Exception e) {
      verify(log, times(1)).error(any(Exception.class), anyString());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SendError_LkiW1_TtMM0_fid3() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doThrow(new IOException()).when(res).sendError(500, anyString());
    try {
      pingJSONPObject.doGet(req, res);
      fail("Expected IOException to be thrown");
    } catch (IOException e) {
      verify(res, times(1)).sendError(500, anyString());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_MnNJ0_VbwR0_fid3() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    pingJSONPObject.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getOutputStream();
  }
}