/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingUpgradeServlet_Test_Failing {
  PingUpgradeServlet pingupgradeservlet;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_UpgradeFound_drJZ0() throws ServletException, IOException {
    PingUpgradeServlet servlet = new PingUpgradeServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getHeader("Upgrade")).thenReturn("echo");
    servlet.doPost(req, res);
    verify(res).setStatus(101);
    verify(res).setHeader("Upgrade", "echo");
    verify(res).setHeader("Connection", "Upgrade");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_UpgradeNotFound_Oriv1() throws ServletException, IOException {
    PingUpgradeServlet servlet = new PingUpgradeServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getHeader("Upgrade")).thenReturn("not-echo");
    servlet.doPost(req, res);
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    pingupgradeservlet = new PingUpgradeServlet();
    pingupgradeservlet.doGet(httpservletrequest, httpservletresponse);
    verify(pingupgradeservlet).doPost(httpservletrequest, httpservletresponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Flij0_Jldg0() {
    PingUpgradeServlet pingUpgradeServlet = new PingUpgradeServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
      pingUpgradeServlet.doGet(req, res);
      verify(res, times(0)); // No interaction with HttpServletResponse is expected
      verify(req, times(1)).getMethod(); // Verify that the getMethod() is called on the request
      verify(pingUpgradeServlet, times(1)).doPost(req, res); // Verify that doPost method is called
    } catch (ServletException | IOException e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_UpgradeNotFound_Oriv1_fid2() throws ServletException, IOException {
    PingUpgradeServlet servlet = new PingUpgradeServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getHeader("Upgrade")).thenReturn("not-echo");
    servlet.doGet(req, res);
    verify(res).setStatus(200);
  }
}