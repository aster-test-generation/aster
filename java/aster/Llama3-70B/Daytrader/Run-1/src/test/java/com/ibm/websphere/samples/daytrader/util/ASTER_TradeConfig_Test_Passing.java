/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Passing {
  private TradeConfig tradeConfig;
  private static int MAX_HOLDINGS;
  private static boolean publishQuotePriceChange;
  private int maxQuotes;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_bzAN0() {
    TradeConfig tradeConfig = new TradeConfig();
    float result = TradeConfig.rndFloat(10);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessMode_KXDL0() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 1; // assuming default accessMode is1
    int actual = TradeConfig.getAccessMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_JxeE0() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 10; // assuming default value of marketSummaryInterval is 10
    tradeConfig.setMarketSummaryInterval(expected);
    int actual = TradeConfig.getMarketSummaryInterval();
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_vUnr0() {
    TradeConfig tradeConfig = new TradeConfig();
    String[] expected = tradeConfig.getRunTimeModeNames();
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_dFGO0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getPrimIterations();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_uaUo0_1() {
    String result = TradeConfig.rndAddress();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_uaUo0_2() {
    String result = TradeConfig.rndAddress();
    assertTrue(result.matches("\\d+ Oak St\\."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_LVKr0() {
    TradeConfig tradeConfig = new TradeConfig();
    int initialCount = tradeConfig.getScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(initialCount + 1, tradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_sAst0() {
    TradeConfig.setRunTimeMode(1);
    assertEquals(1, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_cVRi0_1() {
    String result = TradeConfig.rndFullName();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_cVRi0_2() {
    String result = TradeConfig.rndFullName();
    assertTrue(result.startsWith("first:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_cVRi0_3() {
    String result = TradeConfig.rndFullName();
    assertTrue(result.contains(" last:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_IeJE0() {
    TradeConfig tradeConfig = new TradeConfig();
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertNotNull(scenarioMixes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_VRRV0() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 0; // assuming default value of MAX_USERS is 0
    int actual = TradeConfig.getMAX_USERS();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_JgxE0() {
    TradeConfig.setMarketSummaryInterval(10);
    assertEquals(10, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_ssnl0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getMAX_QUOTES();
    assertEquals(TradeConfig.getMAX_QUOTES(), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndQuantity_iRyD0() {
    float result = TradeConfig.rndQuantity();
    Assertions.assertTrue(result >= 1.0f && result <= 201.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongRun_Skpx0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getLongRun();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPublishQuotePriceChange_ggFv0() {
    TradeConfig.setPublishQuotePriceChange(true);
    assertTrue(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequency_IWHm0() {
    TradeConfig.setListQuotePriceChangeFrequency(10);
    assertEquals(10, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_vNRG0() {
    TradeConfig.setOrderProcessingMode(1);
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDisplayOrderAlerts_BhFo0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getDisplayOrderAlerts();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode_nLmF0() {
    TradeConfig.setAccessMode(1);
    assertEquals(1, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetJDBCDriverNeedsGlobalTransation_FeQd0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getJDBCDriverNeedsGlobalTransation();
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndPrice_KJMp0() {
    float result = TradeConfig.rndPrice();
    assert(result >= 1.0f && result <= 201.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_TdtO0() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 10; // assuming default value of MAX_HOLDINGS is10
    int actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_NewUser_exyO0() {
    TradeConfig tradeConfig = new TradeConfig();
    char result = TradeConfig.getScenarioAction(true);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_NotNewUser_ActionNotB_UEYV1() {
    TradeConfig tradeConfig = new TradeConfig();
    char result = TradeConfig.getScenarioAction(false);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_eIsM0() {
    TradeConfig.setPrimIterations(5);
    assertEquals(5, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_Czrg1_1() {
    String userID = TradeConfig.nextUserID();
    assertNotNull(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_Czrg1_2() {
    String userID = TradeConfig.nextUserID();
    assertTrue(userID.startsWith("uid:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserIDMultipleCalls_OcWE2() {
    String userID1 = TradeConfig.nextUserID();
    String userID2 = TradeConfig.nextUserID();
    assertNotEquals(userID1, userID2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_ONrU0() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndBalance();
    assertEquals("1000000", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_BOBG0() {
    TradeConfig tradeConfig = new TradeConfig();
    String[] webInterfaceNames = TradeConfig.getWebInterfaceNames();
    assertNotNull(webInterfaceNames);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePrices_TBHo0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getUpdateQuotePrices();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBoolean_haPO0() {
    boolean result = TradeConfig.rndBoolean();
    assertTrue(result || !result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCount_zgYc0() {
    TradeConfig.setScenarioCount(5);
    assertEquals(5, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_ZoAV0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getPublishQuotePriceChange();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_NullParm_DhjP1() {
    TradeConfig.setConfigParam(null, "value");
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_EmptyParm_Jmus1() {
    TradeConfig.setConfigParam("", "value");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_NullValue_NOBv2() {
    TradeConfig.setConfigParam("orderProcessingMode", null);
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_EmptyValue_bhWM3() {
    TradeConfig.setConfigParam("orderProcessingMode", "");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_OrderProcessingMode_qxPt4() {
    TradeConfig.setConfigParam("orderProcessingMode", "mode1");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_AccessMode_RyQd5() {
    TradeConfig.setConfigParam("accessMode", "mode1");
    assertEquals(1, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_WebInterface_zHvC6() {
    TradeConfig.setConfigParam("WebInterface", "interface1");
    assertEquals(10, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_PrimIterations_lAGr9() {
    TradeConfig.setConfigParam("primIterations", "30");
    assertEquals(30, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidParm_Zyri10() {
    TradeConfig.setConfigParam("invalidParm", "value");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidValue_oQDn11() {
    TradeConfig.setConfigParam("orderProcessingMode", "invalidValue");
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_OrderProcessingMode_CaseInsensitive_XVCX12() {
    TradeConfig.setConfigParam("ORDERPROCESSINGMODE", "MODE1");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_AccessMode_CaseInsensitive_rKUH13() {
    TradeConfig.setConfigParam("ACCESSMODE", "MODE1");
    assertEquals(1, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_WebInterface_CaseInsensitive_nQMz14() {
    TradeConfig.setConfigParam("WEBINTERFACE", "INTERFACE1");
    assertEquals(10, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_arsh0() {
    TradeConfig tradeConfig = new TradeConfig();
    int expectedResult = 0; // assuming default value
    int actualResult = TradeConfig.getWebInterface();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_mbQI0() {
    TradeConfig tradeConfig = new TradeConfig();
    String[] expected = tradeConfig.getOrderProcessingModeNames();
    String[] actual = TradeConfig.getOrderProcessingModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_OHwT0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.rndInt(10);
    assert(result >= 0 && result < 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRandom_sBeT0() {
    double result = TradeConfig.random();
    assert(result >= 0.0 && result < 1.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_MaZq0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getOrderProcessingMode();
    assertEquals(0, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_UfXz0() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndSymbols();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbolsLength_fZQD1() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndSymbols();
    assertTrue(result.length() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Positive_MPAz0() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assert result.doubleValue() > 0.0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Scale_Ustt1() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(2, result.scale());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_RoundHalfUp_Gvqp2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    BigDecimal rounded = result.setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(result, rounded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RND_USER_false_Swjq1() {
    TradeConfig tradeConfig = new TradeConfig();
    TradeConfig.RND_USER = false;
    String result = TradeConfig.getUserID();
    assertEquals(result, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmail_koSh0_1() {
    String userID = "user:id";
    String result = TradeConfig.rndEmail(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmail_koSh0_2() {
    String userID = "user:id";
    String result = TradeConfig.rndEmail(userID);
    assertTrue(result.contains("@"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmail_koSh0_3() {
    String userID = "user:id";
    String result = TradeConfig.rndEmail(userID);
    assertTrue(result.contains(".com"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_mKXz0_1() {
    String result = TradeConfig.rndCreditCard();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_mKXz0_2() {
    String result = TradeConfig.rndCreditCard();
    assertTrue(result.matches("\\d{1,3}-\\d{1,4}-\\d{1,4}-\\d{1,4}"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_eRcs1() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getRunTimeMode();
    assertEquals(1, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_QejA0_1() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.rndBigDecimal(10.0f);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_QejA0_2() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.rndBigDecimal(10.0f);
    assertEquals(2, result.scale());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterface_BGUJ0() {
    TradeConfig.setWebInterface(10);
    assertEquals(10, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_tTcO0_1() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndUserID();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_tTcO0_2() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndUserID();
    assertTrue(result.startsWith("uid:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBalance_GWnl0() {
    String result = TradeConfig.rndBalance();
    assertEquals("1000000", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBalance_thJA0_1() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndBalance();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_SELL_uouH1_RRfc0() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.getOrderFee("SELL");
    assertEquals(result, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_OTHER_jCsC2_prsv0() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = new BigDecimal("0.0"); // Assuming getOrderFee method returns 0.0 for "OTHER"
    assertEquals(result, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_Pqkd0() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBalance_Hfon1() {
    assertEquals("1000000", TradeConfig.rndBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessMode_KXDL0_fid1() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 0; // assuming default accessMode is 0
    int actual = TradeConfig.getAccessMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_uaUo0() {
    String result = TradeConfig.rndAddress();
    assertNotNull(result);
    assertTrue(result.matches("\\d+ Oak St\\."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_cVRi0() {
    String result = TradeConfig.rndFullName();
    assertNotNull(result);
    assertTrue(result.startsWith("first:"));
    assertTrue(result.contains(" last:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_tBOX0() {
    tradeConfig = new TradeConfig();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_Czrg1() {
    String userID = TradeConfig.nextUserID();
    assertNotNull(userID);
    assertTrue(userID.startsWith("uid:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidValue_oQDn11_fid1() {
    TradeConfig.setConfigParam("orderProcessingMode", "invalidValue");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmail_koSh0() {
    String userID = "user:id";
    String result = TradeConfig.rndEmail(userID);
    assertNotNull(result);
    assertTrue(result.contains("@"));
    assertTrue(result.contains(".com"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_mKXz0() {
    String result = TradeConfig.rndCreditCard();
    assertNotNull(result);
    assertTrue(result.matches("\\d{1,3}-\\d{1,4}-\\d{1,4}-\\d{1,4}"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_QejA0() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.rndBigDecimal(10.0f);
    assertNotNull(result);
    assertEquals(2, result.scale());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_tTcO0() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndUserID();
    assertNotNull(result);
    assertTrue(result.startsWith("uid:"));
  }
}