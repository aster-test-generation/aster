/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.util.Log;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_ExplicitGC_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetServletInfo_THXM0() {
    ExplicitGC explicitGC = new ExplicitGC();
    String expected = "Generate Explicit GC to VM";
    String actual = explicitGC.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_zrCC0() throws ServletException {
    ExplicitGC explicitGC = new ExplicitGC();
    ServletConfig config = mock(ServletConfig.class);
    explicitGC.init(config);
    verify(config).getServletContext(); // Assuming super.init(config) calls getServletContext()
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_FloatToString_YEjk0() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    explicitGC.doGet(req, res);
    verify(out).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_CatchException_ehhl1() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doThrow(new Exception()).when(res).sendError(anyInt(), anyString());
    explicitGC.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_LogError_XTvy2() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    Log log = mock(Log.class);
    explicitGC.doGet(req, res);
    verify(log).error(any(Exception.class), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SendError_EIgU3() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    explicitGC.doGet(req, res);
    verify(res).sendError(500, anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_CloseBracket_rfzG4() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    explicitGC.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SetContentType_nwsV6() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    explicitGC.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_GetOutputStream_uXxj7() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    explicitGC.doGet(req, res);
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_TotalMemory_ajCu9() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    Runtime runtime = mock(Runtime.class);
    when(Runtime.getRuntime()).thenReturn(runtime);
    explicitGC.doGet(req, res);
    verify(runtime).totalMemory();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_MaxMemoryBeforeGC_wLZV10() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    Runtime runtime = mock(Runtime.class);
    when(Runtime.getRuntime()).thenReturn(runtime);
    explicitGC.doGet(req, res);
    verify(runtime).maxMemory();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_FreeMemoryBeforeGC_hMZh11() throws Exception {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    Runtime runtime = mock(Runtime.class);
    when(Runtime.getRuntime()).thenReturn(runtime);
    explicitGC.doGet(req, res);
    verify(runtime).freeMemory();
  }
}