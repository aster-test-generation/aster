/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2CMROne2Many_Test_Failing {
  private static int hitCount;
  private static String initTime;
  PingServlet2Session2CMROne2Many pingservlet2session2cmrone2many;
  ServletConfig servletConfig;
  HttpServletResponse httpservletresponse;
  HttpServletRequest httpservletrequest;
  private String orderName;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservletrequest = mock(HttpServletRequest.class);
    pingservlet2session2cmrone2many = new PingServlet2Session2CMROne2Many();
    pingservlet2session2cmrone2many.doPost(httpservletrequest, httpservletresponse);
    verify(pingservlet2session2cmrone2many).doGet(httpservletrequest, httpservletresponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_SxjH0() throws ServletException, IOException {
    PingServlet2Session2CMROne2Many pingServlet = new PingServlet2Session2CMROne2Many();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doPost(req, res);
    verify(req).getMethod();
    verify(res).getStatus();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_aQrM0() {
    PingServlet2Session2CMROne2Many pingServlet2Session2CMROne2Many = new PingServlet2Session2CMROne2Many();
    String result = pingServlet2Session2CMROne2Many.getServletInfo();
    assertEquals("web primitive, tests Servlet to Entity EJB path", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_IOException_nlmd1_ehEA0() throws IOException {
    PingServlet2Session2CMROne2Many pingServlet = new PingServlet2Session2CMROne2Many();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getWriter()).thenThrow(new IOException());
    try {
      pingServlet.doGet(req, res);
      fail("Expected IOException");
    } catch (IOException e) {
    } catch (ServletException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_SxjH0_fid2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getMethod()).thenReturn("GET");
    when(res.getStatus()).thenReturn(200);
    PingServlet2Session2CMROne2Many pingServlet = new PingServlet2Session2CMROne2Many();
    pingServlet.doGet(req, res);
    verify(req, times(1)).getMethod();
    verify(res, times(1)).setStatus(200);
  }
}