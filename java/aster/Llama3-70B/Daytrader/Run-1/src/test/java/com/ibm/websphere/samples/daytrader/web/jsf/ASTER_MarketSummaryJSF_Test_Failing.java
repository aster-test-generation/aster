/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_MarketSummaryJSF_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTopLosers_zzyq0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] result = marketSummaryJSF.getTopLosers();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenTSIA_IiLF0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal openTSIA = BigDecimal.valueOf(10.0);
    marketSummaryJSF.setOpenTSIA(openTSIA);
    assertNotNull(marketSummaryJSF.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTopGainers_cgNa0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topGainers = new QuoteData[1];
    marketSummaryJSF.setTopGainers(topGainers);
    assertNotNull(marketSummaryJSF.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_LInm0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal tSIA = new BigDecimal("10.0");
    marketSummaryJSF.setTSIA(tSIA);
    assertNotNull(marketSummaryJSF.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDate_mMiF0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    Date expected = new Date();
    marketSummaryJSF.setSummaryDate(expected);
    Date actual = marketSummaryJSF.getSummaryDate();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTopLosers_jtmP0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    assertNotNull(marketSummaryJSF.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTopLosers_Bjhh0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topLosers = new QuoteData[1];
    marketSummaryJSF.setTopLosers(topLosers);
    assertArrayEquals(topLosers, marketSummaryJSF.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTopLosers_NbwZ0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
    assertNull(topLosers);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenTSIA_zzyq0() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal result = marketSummaryJSF.getOpenTSIA();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_PoKu0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal result = marketSummaryJSF.getGainPercent();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenTSIA_IiLF0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal openTSIA = BigDecimal.valueOf(10.0);
    marketSummaryJSF.setOpenTSIA(openTSIA);
    assertEquals(openTSIA, marketSummaryJSF.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTopGainers_cgNa0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topGainers = new QuoteData[1];
    marketSummaryJSF.setTopGainers(topGainers);
    assertArrayEquals(topGainers, marketSummaryJSF.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_LInm0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal tSIA = new BigDecimal("10.0");
    marketSummaryJSF.setTSIA(tSIA);
    assertEquals(tSIA, marketSummaryJSF.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainPercent_AbPs0() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.setGainPercent(new BigDecimal("10.1234"));
    assertEquals(new BigDecimal("10.12"), marketSummaryJSF.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolume_PjPo0() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.setVolume(10.0);
    assertEquals(10.0, marketSummaryJSF.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSummaryDate_keRZ0() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    Date summaryDate = new Date();
    marketSummaryJSF.setSummaryDate(summaryDate);
    assertEquals(summaryDate, marketSummaryJSF.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDate_mMiF0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    Date expected = new Date();
    marketSummaryJSF.setSummaryDate(expected);
    Date actual = marketSummaryJSF.getSummaryDate();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTSIA_hqDG0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    BigDecimal result = marketSummaryJSF.getTSIA();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolume_jtmP0() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    assertEquals(0.0, marketSummaryJSF.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTopLosers_Bjhh0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topLosers = new QuoteData[1];
    marketSummaryJSF.setTopLosers(topLosers);
    assertArrayEquals(topLosers, marketSummaryJSF.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTopLosers_NbwZ0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
    assertNotNull(topLosers);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTML_QxxU0_LQrE0() {
    Instance<TradeServices> services = mock(Instance.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(services);
    marketSummaryJSF.setGainPercent(BigDecimal.valueOf(10.0));
    assertEquals(FinancialUtils.printGainPercentHTML(BigDecimal.valueOf(10.0)), marketSummaryJSF.getGainPercentHTML());
  }
}