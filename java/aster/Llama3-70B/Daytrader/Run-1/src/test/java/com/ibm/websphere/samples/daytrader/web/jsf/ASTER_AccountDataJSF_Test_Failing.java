/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Failing {
  private OrderData[] closedOrders;
  private ExternalContext context;
  private TradeServices tradeAction;
  AccountDataJSF accountdatajsf;
  HttpSession httpsession;
  ExternalContext externalcontext;
  TradeServices tradeServices;

  private <T> T privateMethodInvoker(T object) {
    return spy(object);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSessionCreationDate_LFNR0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date sessionCreationDate = accountDataJSF.getSessionCreationDate();
    assertNotNull(sessionCreationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberOfOrders_YyZm0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertNotNull(accountDataJSF);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_GROr0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertNotNull(accountDataJSF.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_aStQ0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.ZERO);
    BigDecimal result = accountDataJSF.getGainPercent();
    assertEquals(BigDecimal.ZERO, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_mzfw0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertNull(accountDataJSF.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToggleShowAllRows_aSBU0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.ZERO);
    accountDataJSF.toggleShowAllRows();
    assertNotNull(accountDataJSF.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_csql0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.ZERO);
    BigDecimal balance = accountDataJSF.getBalance();
    assertEquals(BigDecimal.ZERO, balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrders_OpkU0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.ZERO);
    OrderData[] result = accountDataJSF.getAllOrders();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_gdiA0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.ZERO);
    BigDecimal openBalance = accountDataJSF.getOpenBalance();
    assertEquals(BigDecimal.ZERO, openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTML_mIov0_Qsfv0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    when(services.select(any())).thenReturn(services);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.valueOf(10.0));
    assertEquals("0.00%", accountDataJSF.getGainPercentHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCurrentTime_osUu0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date currentTime = new Date();
    accountDataJSF.setCurrentTime(currentTime);
    assertEquals(currentTime, accountDataJSF.getCurrentTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_xuXW0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setLoginCount(5);
    assertEquals(5, accountDataJSF.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainPercent_ydfp0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gainPercent = new BigDecimal("10.12345");
    accountDataJSF.setGainPercent(gainPercent);
    assertEquals(new BigDecimal("10.12"), accountDataJSF.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberOfOrders_gPoq0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer numberOfOrders = 10;
    accountDataJSF.setNumberOfOrders(numberOfOrders);
    assertEquals(numberOfOrders, accountDataJSF.getNumberOfOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSessionCreationDate_LFNR0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date sessionCreationDate = accountDataJSF.getSessionCreationDate();
    assertNotNull(sessionCreationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_VPdg0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gain = BigDecimal.valueOf(10.0);
    accountDataJSF.setGain(gain);
    assertEquals(gain, accountDataJSF.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_symO0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setLogoutCount(5);
    assertEquals(5, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastLogin_vsiB0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date lastLogin = new Date();
    accountDataJSF.setLastLogin(lastLogin);
    assertEquals(lastLogin, accountDataJSF.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumOfCashHoldings_suxY0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal sumOfCashHoldings = new BigDecimal("100.0");
    accountDataJSF.setSumOfCashHoldings(sumOfCashHoldings);
    assertEquals(sumOfCashHoldings, accountDataJSF.getSumOfCashHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberHoldings_pCzr0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberHoldings(10);
    assertEquals(10, accountDataJSF.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberOfOrders_YyZm0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getNumberOfOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_SQhV0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gain = BigDecimal.ZERO;
    accountDataJSF.setGain(gain);
    assertEquals(gain, accountDataJSF.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_GROr0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date creationDate = new Date();
    assertSame(creationDate, accountDataJSF.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_Howy0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberOfOrderRows_mnhf0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberOfOrderRows(10);
    assertEquals(10, accountDataJSF.getNumberOfOrderRows());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCurrentTime_ijwk0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date currentTime = accountDataJSF.getCurrentTime();
    assertNotNull(currentTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountID_aTRA0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer accountID = 123;
    accountDataJSF.setAccountID(accountID);
    assertEquals(accountID, accountDataJSF.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_mUEP0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_Pqjp0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] closedOrders = accountDataJSF.getClosedOrders();
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_GVmm0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_aStQ0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal result = accountDataJSF.getGainPercent();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_EylR0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal openBalance = new BigDecimal("100.0");
    accountDataJSF.setOpenBalance(openBalance);
    assertEquals(openBalance, accountDataJSF.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_mzfw0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals("expectedProfileID", accountDataJSF.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_hmfi0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date creationDate = new Date();
    accountDataJSF.setCreationDate(creationDate);
    assertEquals(creationDate, accountDataJSF.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberOfOrderRows_nWAp0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberOfOrderRows(5);
    assertEquals(5, accountDataJSF.getNumberOfOrderRows());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_MSkB0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setProfileID("testProfileID");
    assertEquals("testProfileID", accountDataJSF.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToggleShowAllRows_aSBU0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.toggleShowAllRows();
    assertEquals(0, accountDataJSF.getNumberOfOrderRows());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsTotal_Rhkt0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal holdingsTotal = new BigDecimal("100.00");
    accountDataJSF.setHoldingsTotal(holdingsTotal);
    assertEquals(holdingsTotal, accountDataJSF.getHoldingsTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumOfCashHoldings_JIyZ0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal result = accountDataJSF.getSumOfCashHoldings();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberHoldings_AArC0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer numberHoldings = 10;
    accountDataJSF.setNumberHoldings(numberHoldings);
    assertEquals(numberHoldings, accountDataJSF.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_csql0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal balance = accountDataJSF.getBalance();
    assertNotNull(balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_xsIF0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date lastLogin = accountDataJSF.getLastLogin();
    assertNotNull(lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsTotal_odKU0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal result = accountDataJSF.getHoldingsTotal();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrders_OpkU0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] result = accountDataJSF.getAllOrders();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSessionCreationDate_FUAD0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date sessionCreationDate = new Date();
    accountDataJSF.setSessionCreationDate(sessionCreationDate);
    assertEquals(sessionCreationDate, accountDataJSF.getSessionCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_gdiA0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal openBalance = accountDataJSF.getOpenBalance();
    assertNotNull(openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAllOrders_bxDB0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] allOrders = new OrderData[1];
    accountDataJSF.setAllOrders(allOrders);
    assertArrayEquals(allOrders, accountDataJSF.getAllOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_Lzkb0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal balance = new BigDecimal("100.0");
    accountDataJSF.setBalance(balance);
    assertEquals(balance, accountDataJSF.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTML_RdGc0_qqpj0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setGain(BigDecimal.valueOf(10.0));
    assertEquals("10.0%", accountDataJSF.getGainHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTML_mIov0_Qsfv0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.valueOf(10.0));
    assertEquals(FinancialUtils.printGainPercentHTML(BigDecimal.valueOf(10.0)), accountDataJSF.getGainPercentHTML());
  }
}