/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

public class Aster_PingServlet31Async_Coverage_Test_Failing {
  private HttpServletResponse response;
  private PingServlet31Async pingServlet31Async;
  private ServletConfig servletConfig;
  private PingServlet31Async servlet;
  private HttpServletResponse res;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_azmZ0() {
    PingServlet31Async pingServlet31Async = new PingServlet31Async();
    String expected = "Basic dynamic HTML generation through a servlet";
    String actual = pingServlet31Async.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  public void testDoGet_HxvM0() throws ServletException, IOException {
    PingServlet31Async pingServlet31Async = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet31Async.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_CallsDoPost_WSkq1_vIlf0() throws Exception {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(servlet).doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_XwUV0() throws javax.servlet.ServletException {
    pingServlet31Async = new PingServlet31Async();
    servletConfig = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_fJcb1() throws ServletException {
    pingServlet31Async.init(servletConfig);
    verify(servletConfig).getServletContext(); // assuming super.init(config) calls getServletContext()
  }
}