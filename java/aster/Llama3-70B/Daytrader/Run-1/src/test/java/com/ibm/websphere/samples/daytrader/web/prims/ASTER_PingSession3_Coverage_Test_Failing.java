/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingSession3_Coverage_Test_Failing {
  private ServletConfig servletConfig;
  private PingSession3 pingSession3;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_fgHE0() throws Exception {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingSession3.doPost(req, res);
    verify(req).getMethod(); // This will fail if doGet is not called
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NoException_RmUB1() throws Exception {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingSession3.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_numObjectsNotNull_cIpn0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("num_objects")).thenReturn("10");
    pingSession3.doGet(request, response);
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_numObjectsNull_nHly1() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("num_objects")).thenReturn(null);
    pingSession3.doGet(request, response);
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_IntegerParseException_iyFR2() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("num_objects")).thenReturn("abc");
    pingSession3.doGet(request, response);
    verify(response).sendError(500, "PingSession3.doGet(...): error. java.lang.NumberFormatException: For input string: \"abc\"");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_sessionNotNull_PeRp5() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(session);
    pingSession3.doGet(request, response);
    verify(session).invalidate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_sessionNull_IamL6() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getSession(true)).thenReturn(null);
    pingSession3.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_outputBuffer_bErI7() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("num_objects")).thenReturn("10");
    pingSession3.doGet(request, response);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_sessionDataNotNull_SLcp8() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(session);
    when(session.getAttribute("sessiontest.sessionData")).thenReturn(new PingSession3Object[10]);
    pingSession3.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_sessionDataNull_sxAv9() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(session);
    when(session.getAttribute("sessiontest.sessionData")).thenReturn(null);
    pingSession3.doGet(request, response);
    verify(session).setAttribute("sessiontest.sessionData", any(PingSession3Object[].class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_nZpa0() throws javax.servlet.ServletException {
    pingSession3 = new PingSession3();
    servletConfig = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_ZxXc1() throws ServletException {
    pingSession3.init(servletConfig);
    verify(servletConfig).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetServletInfo_BgeB0_fid3() {
    PingSession3 pingSession3 = new PingSession3();
    String expected = "HTTP Session Object: Tests management of a large custom session class";
    String actual = pingSession3.getServletInfo();
    assertEquals(expected, actual);
  }
}