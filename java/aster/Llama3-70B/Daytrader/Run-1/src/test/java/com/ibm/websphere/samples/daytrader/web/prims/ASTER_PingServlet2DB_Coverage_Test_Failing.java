/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

public class Aster_PingServlet2DB_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_sFDm0() throws ServletException, IOException {
    PingServlet2DB pingServlet2DB = new PingServlet2DB();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2DB.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetServletInfo_AdRu0() {
    PingServlet2DB pingServlet2DB = new PingServlet2DB();
    String expected = "Basic JDBC Read using a prepared statment, makes use of TradeJDBC class";
    String actual = pingServlet2DB.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_IBRr0_sWiR0() throws javax.servlet.ServletException {
    PingServlet2DB pingServlet2DB = new PingServlet2DB();
    javax.servlet.ServletConfig servletConfig = org.mockito.Mockito.mock(javax.servlet.ServletConfig.class);
    pingServlet2DB.init(servletConfig);
  }
}