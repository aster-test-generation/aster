/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeServletAction_Coverage_Test_Failing {
  private TradeServices services;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoHome_SetResults_aKhY2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    tradeServletAction.doHome(ctx, req, resp, userID, results);
    verify(req).setAttribute("results", results);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_PasswordMismatch_ITsk0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String password = "password1";
    String cpassword = "password2";
    String fullName = "Full Name";
    String address = "Address";
    String creditcard = "Credit Card";
    String email = "email@example.com";
    tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
    verify(req).setAttribute("results", "Update profile error: passwords do not match");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_EmptyFields_wyWy1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String password = "";
    String cpassword = "";
    String fullName = "";
    String address = "";
    String creditcard = "";
    String email = "";
    tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
    verify(req).setAttribute("results", "Update profile error: please fill in all profile information fields");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_UpdateSuccessful_beEo2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String password = "password1";
    String cpassword = "password1";
    String fullName = "Full Name";
    String address = "Address";
    String creditcard = "Credit Card";
    String email = "email@example.com";
    tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
    verify(req).setAttribute("results", "Account profile update successful");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegister_ResultsInitialization_dfQZ0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String passwd = "password";
    String cpasswd = "password";
    String fullname = "John Doe";
    String ccn = "1234567890";
    String openBalanceString = "100.0";
    String email = "johndoe@example.com";
    String address = "123 Main St";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(req, times(1)).setAttribute("results", anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegister_PasswordMatch_LQyv1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String passwd = "password";
    String cpasswd = "password";
    String fullname = "John Doe";
    String ccn = "1234567890";
    String openBalanceString = "100.0";
    String email = "johndoe@example.com";
    String address = "123 Main St";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(req, times(1)).setAttribute("results", "Registration operation succeeded;  Account " + anyString() + " has been created.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_tActionIsNull_TBaB0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user";
    String passwd = "pass";
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
    verify(System.out).println("null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_tActionIsNotNull_luHk1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction(mock(Instance.class));
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user";
    String passwd = "pass";
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
    verify(System.out, never()).println("null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_SetAttribute_HHUS1_SEPN0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    TradeServletAction tradeServletAction = new TradeServletAction();
    try {
      tradeServletAction.doLogin(ctx, req, resp, "userID", "passwd");
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertEquals("Exception logging in user userID with password passwd", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_AttributeValue_eowz3_Doqn0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    try {
      tradeServletAction.doLogin(ctx, req, resp, "userID", "passwd");
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertEquals("Exception logging in user userID with password passwd", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_ResultsInitialization_nQWo1_VEGk0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    try {
      tradeServletAction.doLogin(ctx, req, resp, "userID", "passwd");
      fail("Expected Exception");
    } catch (Exception e) {
      assertEquals("Exception logging in user userID with password passwd", e.getMessage());
    }
    verify(req, times(0)).setAttribute(eq("results"), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_mHKH0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "userID";
    String passwd = "passwd";
    try {
      tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertEquals("Exception logging in user " + userID + " with password " + passwd, e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_SLHN0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    tradeServletAction.doLogin(ctx, req, resp, "userID", "passwd");
    verify(resp, times(1)).sendError(401);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_UserIDAndPasswordNull_ThrowsException_Tkey0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = null;
    HttpServletRequest req = null;
    HttpServletResponse resp = null;
    try {
      tradeServletAction.doLogin(ctx, req, resp, null, null);
      fail("Expected Exception");
    } catch (Exception e) {
      assertNotNull(e);
      assertEquals("Exception logging in user null with password null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_SetAttribute_HHUS1_SEPN0_fid1() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    TradeServletAction tradeServletAction = new TradeServletAction();
    tradeServletAction.doLogin(ctx, req, resp, "userID", "passwd");
    verify(req).setAttribute("results", "Could not find account for + userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_AttributeValue_eowz3_Doqn0_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    tradeServletAction.doLogin(ctx, req, resp, "userID", "passwd");
    assertNotNull(req);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_ResultsInitialization_nQWo1_VEGk0_fid1() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    tradeServletAction.doLogin(ctx, req, resp, "userID", "passwd");
    verify(req, times(1)).setAttribute(eq("results"), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_mHKH0_fid1() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "userID";
    String passwd = "passwd";
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_SLHN0_fid1() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    tradeServletAction.doLogin(ctx, req, resp, "userID", "passwd");
    verify(req, times(1)).setAttribute("results", "Could not find account for + userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogin_UserIDAndPasswordNull_ThrowsException_Tkey0_fid1() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = null;
    HttpServletRequest req = null;
    HttpServletResponse resp = null;
    try {
      tradeServletAction.doLogin(ctx, req, resp, null, null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertNotNull(e);
    }
  }
}