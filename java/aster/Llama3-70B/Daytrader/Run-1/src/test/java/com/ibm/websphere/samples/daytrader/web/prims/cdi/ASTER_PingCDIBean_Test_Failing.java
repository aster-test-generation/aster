/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.util.Collections;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.spi.BeanManager;
import javax.enterprise.inject.spi.CDI;
import javax.naming.InitialContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingCDIBean_Test_Failing {
  private static int getBeanManagerHitCountJNDI = 0;
  PingCDIBean pingcdibean;
  InitialContext initialcontext;
  BeanManager beanManager;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanMangerViaJNDI_WhenBeansAreAvailable_thenReturnCount_FNBx0() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.getBeanMangerViaJNDI();
    assertTrue(result > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanMangerViaJNDI_ReturnsOne_WhenBeansFound_Gcmr0() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    System.setProperty("java.naming.factory.initial", "org.apache.openejb.client.LocalInitialContextFactory");
    assertEquals(1, pingCDIBean.getBeanMangerViaJNDI());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanMangerViaCDICurrent_WhenBeansAreAvailable_thenReturnCount_FNBx0() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.getBeanMangerViaCDICurrent();
    assertNotEquals(0, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanMangerViaCDICurrent_WhenNoBeansAreAvailable_thenReturnZero_KfdE1() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    when(CDI.current().getBeanManager().getBeans(Object.class)).thenReturn(Collections.emptySet());
    int result = pingCDIBean.getBeanMangerViaCDICurrent();
    assertEquals(0, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanMangerViaJNDI_ReturnsOne_WhenBeansFound_Gcmr0_fid1() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    assertEquals(1, pingCDIBean.getBeanMangerViaJNDI());
  }
}