/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderDataBean_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_WithNullOrderType_EqWl2() {
    OrderDataBean order = new OrderDataBean(null, "", null, null, 0, null, null, null, null, null);
    assertFalse(order.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_NullOrderStatus_hjTX4() {
    OrderDataBean order = new OrderDataBean(1, "market", null, new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_NullOrderStatus_xOXG2() {
    OrderDataBean order = new OrderDataBean("LIMIT", null, null, null, 0, null, null, null, null, null);
    assertFalse(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withOrderID_OATh0() {
    OrderDataBean order = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(5.0), "AAPL");
    String expected = "Order 1\n\t      orderType: Buy\n\t    orderStatus: Open\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 10.0\n\t          price: 100.0\n\t       orderFee: 5.0\n\t         symbol: AAPL";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withOrderTypeAndStatus_SGtn1() {
    OrderDataBean order = new OrderDataBean("Sell", "Closed", new Date(), new Date(), 20.0, new BigDecimal(200.0), new BigDecimal(10.0), new AccountDataBean(), new QuoteDataBean("GOOG"), new HoldingDataBean());
    String expected = "Order null\n\t      orderType: Sell\n\t    orderStatus: Closed\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 20.0\n\t          price: 200.0\n\t       orderFee: 10.0\n\t         symbol: GOOG";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withAllFields_LSPK2() {
    OrderDataBean order = new OrderDataBean(2, "Buy", "Open", new Date(), new Date(), 30.0, new BigDecimal(300.0), new BigDecimal(15.0), "MSFT");
    String expected = "Order 2\n\t      orderType: Buy\n\t    orderStatus: Open\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 30.0\n\t          price: 300.0\n\t       orderFee: 15.0\n\t         symbol: MSFT";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withOrderID_OATh0_fid2() {
    OrderDataBean order = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(5.0), "AAPL");
    String expected = "Order 1	      orderType: Buy	    orderStatus: Open	       openDate: Fri Jul 19 11:56:58 CDT 2024	 completionDate: Fri Jul 19 11:56:58 CDT 2024	       quantity: 10.0	          price: 100.0	       orderFee: 5.0	         symbol: AAPL\n\t      orderType: Buy\n\t    orderStatus: Open\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 10.0\n\t          price: 100.0\n\t       orderFee: 5.0\n\t         symbol: AAPL";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withOrderTypeAndStatus_SGtn1_fid2() {
    OrderDataBean order = new OrderDataBean("Sell", "Closed", new Date(), new Date(), 20.0, new BigDecimal(200.0), new BigDecimal(10.0), new AccountDataBean(), new QuoteDataBean("GOOG"), new HoldingDataBean());
    String expected = "Order null	      orderType: Sell	    orderStatus: Closed	       openDate: Fri Jul 19 11:56:58 CDT 2024	 completionDate: Fri Jul 19 11:56:58 CDT 2024	       quantity: 20.0	          price: 200.0	       orderFee: 10.0	         symbol: GOOG\n\t      orderType: Sell\n\t    orderStatus: Closed\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 20.0\n\t          price: 200.0\n\t       orderFee: 10.0\n\t         symbol: GOOG";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withAllFields_LSPK2_fid2() {
    OrderDataBean order = new OrderDataBean(2, "Buy", "Open", new Date(), new Date(), 30.0, new BigDecimal(300.0), new BigDecimal(15.0), "MSFT");
    String expected = "Order 2	      orderType: Buy	    orderStatus: Open	       openDate: Fri Jul 19 11:56:58 CDT 2024	 completionDate: Fri Jul 19 11:56:58 CDT 2024	       quantity: 30.0	          price: 300.0	       orderFee: 15.0	         symbol: MSFT\n\t      orderType: Buy\n\t    orderStatus: Open\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 30.0\n\t          price: 300.0\n\t       orderFee: 15.0\n\t         symbol: MSFT";
    assertEquals(expected, order.toString());
  }
}