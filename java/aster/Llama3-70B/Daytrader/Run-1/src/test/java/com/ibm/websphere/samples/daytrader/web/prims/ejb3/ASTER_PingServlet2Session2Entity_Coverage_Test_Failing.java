/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import com.ibm.websphere.samples.daytrader.web.prims.PingServlet;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet2Session2Entity_Coverage_Test_Failing {
  private HttpServletResponse res;
  private PingServlet2Session2Entity pingServlet2Session2Entity;
  private ServletConfig servletConfig;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_prZU0() {
    PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
    String expected = "web primitive, tests Servlet to Session to Entity EJB path";
    String actual = pingServlet2Session2Entity.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_TBGK0() throws javax.servlet.ServletException {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    servletConfig = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_HDxF1() throws ServletException {
    pingServlet2Session2Entity.init(servletConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet1_mQZI0() throws IOException, ServletException {
    PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2Session2Entity.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet2_qUIB1() throws IOException, ServletException {
    PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2Session2Entity.doGet(req, res);
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet3_TkRk2_UfnN0() throws IOException, ServletException {
    PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2Session2Entity.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet7_LEix6_PtcZ0() throws IOException, ServletException {
    PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    TradeConfig tradeConfig = mock(TradeConfig.class);
    when(tradeConfig.getPrimIterations()).thenReturn(1);
    pingServlet2Session2Entity.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_CallsDoGet_nodQ0_Sxoo0() throws ServletException, IOException {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet7_LEix6_PtcZ0_fid2() throws IOException, ServletException {
    PingServlet pingServlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    TradeConfig tradeConfig = mock(TradeConfig.class);
    when(tradeConfig.getPrimIterations()).thenReturn(1);
    pingServlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_CallsDoGet_nodQ0_Sxoo0_fid2() throws ServletException, IOException {
    PingServlet servlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setStatus(200);
  }
}