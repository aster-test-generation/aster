/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.web.prims.PingServlet;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet2TwoPhase_Coverage_Test_Failing {
  private PingServlet2TwoPhase servlet;
  private ServletConfig config;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetServletInfo_qcQI0() {
    PingServlet2TwoPhase pingServlet2TwoPhase = new PingServlet2TwoPhase();
    String expected = "web primitive, tests Servlet to Session to Entity EJB and JMS -- 2-phase commit path";
    String actual = pingServlet2TwoPhase.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_bvwI0() throws Exception {
    PingServlet2TwoPhase servlet = new PingServlet2TwoPhase();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getMethod(); // This will fail if doGet is not called
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_gBja0() throws javax.servlet.ServletException {
    servlet = new PingServlet2TwoPhase();
    config = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_YfkI1() throws ServletException {
    servlet.init(config);
    verify(config).getServletContext(); // assuming super.init(config) calls getServletContext()
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SetContentType_HKzj2() throws IOException, ServletException {
    PingServlet2TwoPhase pingServlet = new PingServlet2TwoPhase();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_GetWriter_zeaO3() throws IOException, ServletException {
    PingServlet2TwoPhase pingServlet = new PingServlet2TwoPhase();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NoException_LuZb1() throws Exception {
    PingServlet2TwoPhase servlet = new PingServlet2TwoPhase();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_StringBuffer_ckvK4_KSlC0() throws IOException, ServletException {
    PingServlet pingServlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    java.io.PrintWriter out = mock(java.io.PrintWriter.class);
    when(res.getWriter()).thenReturn(out);
    verify(out).println(any(String.class));
  }

  @Test
  public void testDoGet_NoException_LuZb1_mmIo0() throws Exception {
    PingServlet2TwoPhase servlet = new PingServlet2TwoPhase();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_StringBuffer_ckvK4_KSlC0_fid2() throws IOException, ServletException {
    PingServlet2TwoPhase pingServlet = new PingServlet2TwoPhase();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doGet(req, res);
    java.io.PrintWriter out = mock(java.io.PrintWriter.class);
    when(res.getWriter()).thenReturn(out);
    verify(out).println(any(StringBuffer.class));
  }
}