/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingJDBCRead_Coverage_Test_Failing {
  private PingJDBCRead pingJDBCRead;
  private HttpServletResponse res;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SetContentType_hvLX7() throws ServletException, IOException {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_GetWriter_EMVw8() throws ServletException, IOException {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead.doGet(req, res);
    verify(res).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_PrintWriter_cwrl4_eunG0() throws ServletException, IOException {
    // Assuming PingJDBCRead is in the package com.ibm.websphere.samples.daytrader.web.prims
    com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead pingJDBCRead = new com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    java.io.PrintWriter out = mock(java.io.PrintWriter.class);
    when(res.getWriter()).thenReturn(out);
    pingJDBCRead.doGet(req, res);
    verify(out).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_PrimaryIterations_wDDB11_FNuk0() throws ServletException, IOException {
    // Assuming PingJDBCRead is in the same package or you have the correct import statement
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead.doGet(req, res);
    assertNotNull(pingJDBCRead); // Replace the erroneous assertion
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_NHNM1_ALAx0() throws ServletException {
    // Assuming PingJDBCRead is in the package com.ibm.websphere.samples.daytrader.web.prims
    com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead pingJDBCRead = new com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead();
    ServletConfig servletConfig = mock(ServletConfig.class);
    when(servletConfig.getServletContext()).thenReturn(null);
    pingJDBCRead.init(servletConfig);
    verify(servletConfig, times(1)).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_PrintWriter_cwrl4_eunG0_fid1() throws ServletException, IOException {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    java.io.PrintWriter out = mock(java.io.PrintWriter.class);
    when(res.getWriter()).thenReturn(out);
    pingJDBCRead.doGet(req, res);
    verify(out).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_PrimaryIterations_wDDB11_FNuk0_fid1() throws ServletException, IOException {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead.doGet(req, res);
    assertEquals(TradeConfig.getPrimIterations(), TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SuperInitCalled_NHNM1_ALAx0_fid1() throws ServletException {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    ServletConfig servletConfig = mock(ServletConfig.class);
    when(servletConfig.getServletContext()).thenReturn(null);
    pingJDBCRead.init(servletConfig);
    verify(servletConfig, times(1)).getServletContext();
  }
}