/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OrderData_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderFee_lWJO0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    assertEquals(new BigDecimal("10.0"), orderData.getOrderFee());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuantity_OqGe0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    assertEquals(10.0, orderData.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderType_Cnhm0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    orderData.setOrderType("newType");
    assertEquals("newType", orderData.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPrice_cctv0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.valueOf(10), "type", 10, "symbol");
    orderData.setPrice(BigDecimal.valueOf(20));
    assertEquals(BigDecimal.valueOf(20), orderData.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_LOzQ0() {
    OrderData orderData = new OrderData(1, "NEW", new Date(), null, BigDecimal.ZERO, "LIMIT", 10.0, "AAPL", BigDecimal.TEN);
    orderData.setOrderStatus("IN_PROGRESS");
    assertEquals("IN_PROGRESS", orderData.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderStatus_monW0() {
    OrderData orderData = new OrderData(1, "Open", new Date(), null, BigDecimal.valueOf(10), "Buy", 10.0, "ABC");
    assertEquals("Open", orderData.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderStatus2_nGjW1() {
    OrderData orderData = new OrderData(1, "Complete", new Date(), new Date(), BigDecimal.valueOf(10), "Sell", 10.0, "ABC");
    assertEquals("Complete", orderData.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_cSuN0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    assertEquals("symbol", orderData.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderID_ziYj0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.valueOf(10), "type", 10, "symbol", BigDecimal.valueOf(20));
    assertEquals(1, orderData.getOrderID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderID2_ANwL1() {
    OrderData orderData = new OrderData(2, "status", new Date(), new Date(), BigDecimal.valueOf(10), "type", 10, "symbol");
    assertEquals(2, orderData.getOrderID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSymbol_rGqQ0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    orderData.setSymbol("newSymbol");
    assertEquals("newSymbol", orderData.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderFee_UDWG0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.ZERO, "type", 1.0, "symbol");
    BigDecimal orderFee = new BigDecimal("10.0");
    orderData.setOrderFee(orderFee);
    assertEquals(orderFee, orderData.getOrderFee());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenDate_bgUL0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    Date openDate = orderData.getOpenDate();
    assertEquals(orderData.getOpenDate(), openDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenDate_YTKZ0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.valueOf(10), "type", 10, "symbol");
    Date date = new Date();
    orderData.setOpenDate(date);
    assertEquals(date, orderData.getOpenDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompletionDate_Arsa0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    Date completionDate = orderData.getCompletionDate();
    assertEquals(new Date(), completionDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrice_Mcdz0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    assertEquals(new BigDecimal("20.0"), orderData.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderType_RpSJ0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    assertEquals("type", orderData.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderID_jSQA0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.valueOf(10), "type", 10, "symbol", BigDecimal.valueOf(10));
    orderData.setOrderID(2);
    assertEquals(2, orderData.getOrderID().intValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuantity_YjIt0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol");
    orderData.setQuantity(20.0);
    assertEquals(20.0, orderData.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotal_KENz0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("5.0"));
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal("50.0"), total);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTotal_uTKb0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), BigDecimal.valueOf(10), "type", 10, "symbol");
    BigDecimal total = BigDecimal.valueOf(100);
    orderData.setTotal(total);
    assertEquals(total, orderData.getTotal());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenDate_bgUL0_fid1() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal("10.0"), "type", 10.0, "symbol", new BigDecimal("20.0"));
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
}
}