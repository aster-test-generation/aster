/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AccountDataBean_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLoginCount_PvUl0() {
    AccountDataBean accountDataBean = new AccountDataBean(1,1, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("20.0"), "profileID");
    assertEquals(2, accountDataBean.getLoginCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_withAccountID_HMGv0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    int expected = 1;
    int actual = accountDataBean.hashCode();
    assertNotEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLoginCount_PvUl0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("20.0"), "profileID");
    assertEquals(2, accountDataBean.getLoginCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrders_zJzi0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("20.0"), "profileID");
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
    assertNotNull(orders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginSuccess_DgmZ0_UmwF0_1_fid1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
    account.setProfile(new AccountProfileDataBean()); // Assuming a no-arg constructor exists
    account.login("password");
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getLastLogin());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginSuccess_DgmZ0_UmwF0_2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
    account.setProfile(new AccountProfileDataBean()); // Assuming a no-arg constructor exists
    account.login("password");
    assertEquals(1, account.getLoginCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrint_snYH0_unGW0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("10.0"), new BigDecimal("20.0"), "profileID");
    accountDataBean.setBalance(new BigDecimal("10.0"));
    accountDataBean.print();
    Date currentDate = new Date();
    assertEquals("AccountDataBean[accountID=1, loginCount=2, logoutCount=0, lastLogin=" + currentDate + ", creationDate=" + currentDate + ", balance=10.0, openBalance=20.0, profileID=profileID]", accountDataBean.toString());
}
}