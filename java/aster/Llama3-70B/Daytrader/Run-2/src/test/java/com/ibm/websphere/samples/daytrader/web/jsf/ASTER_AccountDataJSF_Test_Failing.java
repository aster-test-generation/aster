/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import java.util.Date;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Failing {
private OrderData[] closedOrders;
private ExternalContext context;
private TradeServices tradeAction;
AccountDataJSF accountdatajsf;
HttpSession httpsession;
ExternalContext externalcontext;
TradeServices tradeServices;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionCreationDate_lwEv0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertNotNull(accountDataJSF);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGain_mWFr0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.ZERO);
    BigDecimal gain = accountDataJSF.getGain();
    assertEquals(BigDecimal.ZERO, gain);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_EniL0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date creationDate = accountDataJSF.getCreationDate();
    assertNotNull(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBalance_gkSy0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal balance = new BigDecimal("100.0");
    accountDataJSF.setBalance(balance);
    assertEquals(balance, accountDataJSF.getBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBalance_kUvY0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.ZERO);
    BigDecimal balance = accountDataJSF.getBalance();
    assertEquals(BigDecimal.ZERO, balance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenBalance_vHUY0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.ZERO);
    BigDecimal openBalance = accountDataJSF.getOpenBalance();
    assertEquals(BigDecimal.ZERO, openBalance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBalance_BRVv0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal balance = new BigDecimal("100.0");
    accountDataJSF.setBalance(balance);
    assertNotNull(accountDataJSF);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCurrentTime_mpuc0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date currentTime = new Date();
    accountDataJSF.setCurrentTime(currentTime);
    assertEquals(currentTime, accountDataJSF.getCurrentTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLoginCount_dibJ0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setLoginCount(5);
    assertEquals(5, accountDataJSF.getLoginCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercent_ekuA0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gainPercent = new BigDecimal("10.12345");
    accountDataJSF.setGainPercent(gainPercent);
    assertEquals(new BigDecimal("10.12"), accountDataJSF.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfOrders_feoJ0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberOfOrders(5);
    assertEquals(5, accountDataJSF.getNumberOfOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionCreationDate_lwEv0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date date = accountDataJSF.getSessionCreationDate();
    assertNotNull(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGain_BYGH0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gain = new BigDecimal("10.0");
    accountDataJSF.setGain(gain);
    assertEquals(gain, accountDataJSF.getGain());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLogoutCount_HxQk0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setLogoutCount(5);
    assertEquals(5, accountDataJSF.getLogoutCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastLogin_etEX0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date lastLogin = new Date();
    accountDataJSF.setLastLogin(lastLogin);
    assertEquals(lastLogin, accountDataJSF.getLastLogin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSumOfCashHoldings_xFpK0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal sumOfCashHoldings = new BigDecimal("100.0");
    accountDataJSF.setSumOfCashHoldings(sumOfCashHoldings);
    assertEquals(sumOfCashHoldings, accountDataJSF.getSumOfCashHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberHoldings_VTTH0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberHoldings(5);
    assertEquals(5, accountDataJSF.getNumberHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfOrders_mCAK0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getNumberOfOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGain_mWFr0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gain = accountDataJSF.getGain();
    assertNotNull(gain);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_EniL0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date creationDate = accountDataJSF.getCreationDate();
    assertNotNull(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLogoutCount_LMQy0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getLogoutCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfOrderRows_kwnG0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberOfOrderRows(10);
    assertEquals(10, accountDataJSF.getNumberOfOrderRows());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentTime_iqMt0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date currentTime = accountDataJSF.getCurrentTime();
    assertNotNull(currentTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccountID_cCFR0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer accountID = 123;
    accountDataJSF.setAccountID(accountID);
    assertEquals(accountID, accountDataJSF.getAccountID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLoginCount_ddcq0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals(0, accountDataJSF.getLoginCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_EWrF0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] closedOrders = accountDataJSF.getClosedOrders();
    assertNotNull(closedOrders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountID_VnsT0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer result = accountDataJSF.getAccountID();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercent_QEKM0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal result = accountDataJSF.getGainPercent();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenBalance_qXXX0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal openBalance = new BigDecimal("100.0");
    accountDataJSF.setOpenBalance(openBalance);
    assertEquals(openBalance, accountDataJSF.getOpenBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetProfileID_LQzh0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    assertEquals("expectedProfileID", accountDataJSF.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_EPgM0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date creationDate = new Date();
    accountDataJSF.setCreationDate(creationDate);
    assertEquals(creationDate, accountDataJSF.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfOrderRows_qBWY0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setNumberOfOrderRows(5);
    assertEquals(5, accountDataJSF.getNumberOfOrderRows());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetProfileID_gkSy0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setProfileID("testProfileID");
    assertEquals("testProfileID", accountDataJSF.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToggleShowAllRows_yvFh0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.toggleShowAllRows();
    assertEquals(0, accountDataJSF.getNumberOfOrderRows());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHoldingsTotal_EgpP0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal holdingsTotal = BigDecimal.valueOf(100.0);
    accountDataJSF.setHoldingsTotal(holdingsTotal);
    assertEquals(holdingsTotal, accountDataJSF.getHoldingsTotal());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSumOfCashHoldings_pJrM0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal result = accountDataJSF.getSumOfCashHoldings();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberHoldings_fDNQ0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Integer numberHoldings = 10;
    accountDataJSF.setNumberHoldings(numberHoldings);
    assertEquals(numberHoldings, accountDataJSF.getNumberHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBalance_kUvY0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal balance = accountDataJSF.getBalance();
    assertNotNull(balance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastLogin_kwqy0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date lastLogin = accountDataJSF.getLastLogin();
    assertNotNull(lastLogin);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHoldingsTotal_MBIa0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal expected = BigDecimal.valueOf(100);
    accountDataJSF.setHoldingsTotal(expected);
    assertEquals(expected, accountDataJSF.getHoldingsTotal());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllOrders_bmdP0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] result = accountDataJSF.getAllOrders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSessionCreationDate_WzEd0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    Date sessionCreationDate = new Date();
    accountDataJSF.setSessionCreationDate(sessionCreationDate);
    assertEquals(sessionCreationDate, accountDataJSF.getSessionCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenBalance_vHUY0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal openBalance = accountDataJSF.getOpenBalance();
    assertNotNull(openBalance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAllOrders_IdLQ0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    OrderData[] allOrders = new OrderData[1];
    accountDataJSF.setAllOrders(allOrders);
    assertArrayEquals(allOrders, accountDataJSF.getAllOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBalance_BRVv0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal balance = new BigDecimal("100.0");
    accountDataJSF.setBalance(balance);
    assertEquals(balance, accountDataJSF.getBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainHTML_VKab0_kQoD0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(new BigDecimal("10.0"));
    assertEquals(FinancialUtils.printGainHTML(new BigDecimal("10.0")), accountDataJSF.getGainHTML());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercentHTML_gsbl0_QtNx0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    accountDataJSF.setBalance(BigDecimal.valueOf(10.0));
    assertEquals(FinancialUtils.printGainPercentHTML(BigDecimal.valueOf(10.0)), accountDataJSF.getGainPercentHTML());
}
}