/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.sql.DataSource;
import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeDirectDBUtils_Coverage_Test_Passing {
    private DataSource datasource;
    TradeDirectDBUtils tradedirectdbutils;
    Connection connection;
    PreparedStatement preparedstatement;
    ResultSet resultset;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTrade_NewRunStatsDataBean_xKGI2() throws Exception {
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        RunStatsDataBean runStatsData = tradedirectdbutils.resetTrade(false);
        assertNotNull(runStatsData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTrade_ConnectionNull_gytu3() throws Exception {
        when(datasource.getConnection()).thenReturn(null);
        assertThrows(Exception.class, () -> tradedirectdbutils.resetTrade(false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTrade_SetAutoCommitFalse_tSTS4() throws Exception {
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        tradedirectdbutils.resetTrade(false);
        verify(connection, times(1)).setAutoCommit(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTrade_DeleteFromQuoteEjb_KQdM5() throws Exception {
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeUpdate()).thenReturn(1);
        tradedirectdbutils.resetTrade(true);
        verify(preparedstatement, times(1)).executeUpdate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTrade_CloseConnection_wwxN7() throws Exception {
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        tradedirectdbutils.resetTrade(false);
        verify(connection, times(1)).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckDBProductName_ConnectionNull_wSnw0() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Connection conn = null;
        tradeDirectDBUtils.checkDBProductName();
        assertNull(conn);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckDBProductName_DBProductNameNull_uIvJ1() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        String dbProductName = null;
        tradeDirectDBUtils.checkDBProductName();
        assertNull(dbProductName);
    }
}