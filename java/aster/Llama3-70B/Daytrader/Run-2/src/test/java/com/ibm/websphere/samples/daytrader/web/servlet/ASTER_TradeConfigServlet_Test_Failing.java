/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Failing {
TradeConfigServlet tradeconfigservlet;
ServletConfig servletConfig;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        servletConfig = mock(ServletConfig.class);
        tradeconfigservlet = new TradeConfigServlet();
        // when
        tradeconfigservlet.init(servletConfig);
        // then
        verify(servletConfig).getServletContext();
        verify(servletConfig).getInitParameterNames();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testServiceNullAction_nrpa0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn(null);
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testServiceUpdateConfig_LNjr1() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("updateConfig");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testServiceResetTrade_ymbz2() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("resetTrade");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testServiceBuildDB_ltar3() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDB");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testServiceException_RXdR8() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("unknown");
    servlet.service(req, resp);
    verify(resp).sendError(500, anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_1() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(TradeConfig.getOrderProcessingMode(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_2() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(TradeConfig.getWebInterface(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_3() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(TradeConfig.getMAX_USERS(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_4() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(TradeConfig.getMAX_QUOTES(), 100);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_5() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(TradeConfig.getMarketSummaryInterval(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_6() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(TradeConfig.getPrimIterations(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_7() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertTrue(TradeConfig.getPublishQuotePriceChange());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_8() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(TradeConfig.getListQuotePriceChangeFrequency(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_9() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertTrue(TradeConfig.getLongRun());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_10() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertTrue(TradeConfig.getDisplayOrderAlerts());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate_nNXS0() {
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("0");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("10");
    when(req.getParameter("MaxQuotes")).thenReturn("100");
    when(req.getParameter("marketSummaryInterval")).thenReturn("10");
    when(req.getParameter("primIterations")).thenReturn("10");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    try {
        tradeConfigServlet.doConfigUpdate(req, resp);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate1_UVeE0_EMuq0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("0");
    try {
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate2_RhZP1_oKFl0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    try {
        servlet.doConfigUpdate(req, resp); // fixed code
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(1, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate4_xUbD3_Wtgo0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("0");
    try {
        servlet.doConfigUpdate(req, resp);
        assertEquals(0, TradeConfig.getWebInterface());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate5_dEvs4_NZfO0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("1");
    try {
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(1, TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate6_oTce5_EtPA0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn(null);
    try {
        servlet.doConfigUpdate(req, resp);
        assertEquals(TradeConfig.getWebInterface(), TradeConfig.getWebInterface());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate7_tYAG6_Kzxd0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("10");
    try {
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
    assertEquals(10, TradeConfig.getMAX_USERS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate8_iZYY7_boFA0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn(null);
    try {
    } catch (Exception e) {
    }
    assertEquals(TradeConfig.getMAX_USERS(), TradeConfig.getMAX_USERS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate9_lEwU8_ADav0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn("10");
    try {
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(10, TradeConfig.getMAX_QUOTES());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate10_lVJN9_Fbvh0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn(null);
    try {
    } catch (Exception e) {
    }
    assertEquals(TradeConfig.getMAX_QUOTES(), TradeConfig.getMAX_QUOTES());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate11_UQKu10_wtTZ0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn("10");
    try {
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(10, TradeConfig.getMarketSummaryInterval());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate12_KbFK11_pRHq0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn(null);
    try {
    } catch (Exception e) {
    }
    assertEquals(TradeConfig.getMarketSummaryInterval(), TradeConfig.getMarketSummaryInterval());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate13_xsWE12_WPAH0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn("10");
    try {
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(10, TradeConfig.getPrimIterations());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_1_fid1() throws Exception {
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals("0", TradeConfig.getOrderProcessingMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_PWfH0_7_fid1() throws Exception {
    TradeConfigServlet tradeconfigservlet = mock(TradeConfigServlet.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("0");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("0");
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("100");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("10");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("10");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    verify(tradeconfigservlet).doConfigUpdate(httpservletrequest, httpservletresponse);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate_nNXS0_fid1() {
    try {
        TradeConfigServlet tradeConfigServlet = (TradeConfigServlet) Class.forName("com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet").newInstance();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("OrderProcessingMode")).thenReturn("0");
        when(req.getParameter("WebInterface")).thenReturn("0");
        when(req.getParameter("MaxUsers")).thenReturn("10");
        when(req.getParameter("MaxQuotes")).thenReturn("100");
        when(req.getParameter("marketSummaryInterval")).thenReturn("10");
        when(req.getParameter("primIterations")).thenReturn("10");
        when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
        when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
        when(req.getParameter("EnableLongRun")).thenReturn("true");
        when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
        tradeConfigServlet.doConfigUpdate(req, resp);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate2_RhZP1_oKFl0_fid1() {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    TradeConfigServlet servlet = new TradeConfigServlet();
    try {
        servlet.doConfigUpdate(req, resp); 
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals("1", TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate4_xUbD3_Wtgo0_fid1() {
    // Assuming TradeConfigServlet is in the package com.ibm.websphere.samples.daytrader.web.servlet
    // and it has a default constructor
    com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet servlet = new com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("0");
    try {
        servlet.doConfigUpdate(req, resp);
        assertTrue(TradeConfig.getWebInterface() == 0);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate5_dEvs4_NZfO0_fid1() {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("1");
    try {
        // Assuming TradeConfigServlet is not needed for this test
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals("1", TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate6_oTce5_EtPA0_fid1() {
    try {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("WebInterface")).thenReturn(null);
        servlet.doConfigUpdate(req, resp);
        assertNotNull(TradeConfig.getWebInterface());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
}