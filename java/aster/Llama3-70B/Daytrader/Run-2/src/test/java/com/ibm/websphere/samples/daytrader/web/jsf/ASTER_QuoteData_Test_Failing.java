/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuoteData_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRange_gOEZ0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), "ABC", BigDecimal.valueOf(15.0), BigDecimal.valueOf(3.0), "ABC Company", 100.0, 2.0);
    String range = quoteData.getRange();
    assertEquals(null, range);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGain_Fbws0() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("5.0"), "symbol", new BigDecimal("15.0"), new BigDecimal("3.0"), "companyName", 100.0, 2.0);
    BigDecimal gain = quoteData.getGain();
    assertEquals(new BigDecimal("5.0"), gain);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpen_EHwM0() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("15.0"), "symbol");
    assertEquals(new BigDecimal("10.0"), quoteData.getOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercent_hYxG0() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("5.0"), "symbol", new BigDecimal("15.0"), new BigDecimal("3.0"), "companyName", 100.0, 2.0);
    BigDecimal result = quoteData.getGainPercent();
    assertEquals(new BigDecimal("100.0"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercentHTML_Zegq0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), "symbol", BigDecimal.valueOf(15.0), BigDecimal.valueOf(3.0), "companyName", 100.0, 2.0);
    assertEquals("<html>40.0%</html>", quoteData.getGainPercentHTML());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGain_Fbws0_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("-5.00"), "symbol", new BigDecimal("1-5.00"), new BigDecimal("3.0"), "companyName", 100.0, 2.0);
    BigDecimal gain = quoteData.getGain();
    assertEquals(new BigDecimal("-5.00"), gain);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercent_hYxG0_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("5.0"), "symbol", new BigDecimal("15.0"), new BigDecimal("3.0"), "companyName",-50.00, 2.0);
    BigDecimal result = quoteData.getGainPercent();
    assertEquals(new BigDecimal("100.0"), result);
}
}