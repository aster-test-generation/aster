/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfig_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndNewUserID_ReturnCurrentTime_zxxP8() {
        TradeConfig tradeConfig = new TradeConfig();
        long currentTime = System.currentTimeMillis();
        String result = TradeConfig.rndNewUserID();
        assertTrue(result.contains(String.valueOf(currentTime)));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_LessThanOrEqualToZero_yaRs0() {
        TradeConfig tradeConfig = new TradeConfig();
        BigDecimal result = tradeConfig.getRandomPriceChangeFactor();
        assertEquals(1.0, result.doubleValue(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndNewUserID_ReturnCurrentTime_zxxP8_fid2() {
        TradeConfig tradeConfig = new TradeConfig();
        long currentTime = System.currentTimeMillis();
        String result = TradeConfig.rndNewUserID();
        assertFalse(result.contains(String.valueOf(currentTime)));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_LessThanOrEqualToZero_yaRs0_fid2() {
        TradeConfig tradeConfig = new TradeConfig();
        BigDecimal result = tradeConfig.getRandomPriceChangeFactor();
        assertEquals(0.91, result.doubleValue(), 0.0);
    }
}