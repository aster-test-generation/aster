/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Collection;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.MDBStats;
import com.ibm.websphere.samples.daytrader.util.RecentQuotePriceChangeList;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.Iterator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
TradeDirect tradedirect;
Connection connection;
Statement statement;
DataSource datasource;
MDBStats mdbStats;
Object[] sqlBuffer;
private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
private static Integer marketSummaryLock = new Integer(0);
private static long nextMarketSummary = System.currentTimeMillis();
PreparedStatement preparedstatement;
ResultSet resultset;
TradeConfig tradeConfig;
private static String getAllQuotesSQL = "select * from quoteejb q";
private boolean inSession = false;
TradeDirect tradeDirect;
PreparedStatement preparedStatement;
ResultSet resultSet;
DataSource dataSource;
Log log;
private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
private FinancialUtils financialUtils;
private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
private  UserTransaction txn;
AccountDataBean accountData;
HoldingDataBean holdingData;
QuoteDataBean quoteData;
OrderDataBean orderData;
HoldingDataBean holdingDataBean;
KeySequenceDirect keySequenceDirect;
AccountDataBean accountDataBean;
QuoteDataBean quoteDataBean;
private static final String userID = "testUser";
private static final String getClosedOrdersSQL = "select a.accountid from accountejb a where a.profile_userid = ?";
private ManagedExecutorService mes;
private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
private static BigDecimal ZERO = new BigDecimal(0.0);
private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_1() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradeConfig = mock(TradeConfig.class);
        tradedirect = new TradeDirect();
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(0);
        MarketSummaryDataBean marketSummaryDataBean = tradedirect.getMarketSummary();
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(-1);
        marketSummaryDataBean = tradedirect.getMarketSummary();
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(10);
        long currentTime = System.currentTimeMillis();
        when(System.currentTimeMillis()).thenReturn(currentTime);
        when(nextMarketSummary).thenReturn(currentTime - 10000);
        marketSummaryDataBean = tradedirect.getMarketSummary();
        verify(tradedirect, times(1)).getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_2() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradeConfig = mock(TradeConfig.class);
        tradedirect = new TradeDirect();
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(0);
        MarketSummaryDataBean marketSummaryDataBean = tradedirect.getMarketSummary();
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(-1);
        marketSummaryDataBean = tradedirect.getMarketSummary();
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(10);
        long currentTime = System.currentTimeMillis();
        when(System.currentTimeMillis()).thenReturn(currentTime);
        when(nextMarketSummary).thenReturn(currentTime - 10000);
        marketSummaryDataBean = tradedirect.getMarketSummary();
        verify(tradedirect, times(1)).getMarketSummaryInternal();
        assertEquals(cachedMSDB, marketSummaryDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_exception_WbHx6() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.getMarketSummary();
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
        assertNotNull(result.getOpenTSIA());
        assertNotNull(result.getGainPercent());
        assertNotNull(result.getSummaryDate());
        assertNotNull(result.getTSIA());
        assertEquals(0.0, result.getVolume(), 0.0);
        assertNotNull(result.getTopGainers());
        assertNotNull(result.getTopLosers());
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_mSxW0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = null;
    try {
        result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
        assertNotNull(result.getOpenTSIA());
        assertNotNull(result.getGainPercent());
        assertNotNull(result.getSummaryDate());
        assertNotNull(result.getTSIA());
        assertEquals(0.0, result.getVolume(), 0.0);
        assertNotNull(result.getTopGainers());
        assertNotNull(result.getTopLosers());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume() throws Exception {
    connection = mock(Connection.class);
    preparedStatement = mock(PreparedStatement.class);
    resultSet = mock(ResultSet.class);
    dataSource = mock(DataSource.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(TradeConfig.getPublishQuotePriceChange()).thenReturn(true); // assuming this method returns a boolean value
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(result);
    verify(preparedStatement, times(1)).executeQuery();
    verify(connection, times(1)).prepareStatement(any(String.class));
    verify(dataSource, times(1)).getConnection();
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNull_OutNotNull_SCdX1_YXWY0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal(); // calling the method under test
        Assertions.assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        Assertions.fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_HTHr0_lEXj0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (NullPointerException e) {
        fail("datasource is null");
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_BuyOrder_jzDJ0_mbFe0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_SellOrder_VjOX1_CuqN0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    orderDataBean.setHolding(holdingDataBean);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_NIlG0_DFvm0() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = null;
    try {
        quoteDataBean = tradeDirect.getMarketSummaryInternal().getTopGainers().iterator().next();
    } catch (Exception e) {
    }
    assertNotNull(quoteDataBean.getSymbol());
    assertNotNull(quoteDataBean.getCompanyName());
    assertNotNull(quoteDataBean.getPrice());
    assertEquals(0.0, quoteDataBean.getVolume(), 0.0);
    assertEquals(0.0, quoteDataBean.getChange(), 0.0);
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSession_False_OrderProcessingMode_ASYNCH_2PHASE_UyJB2_Xard0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderDataBean);
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell9_eRRT8_kmOB0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (NullPointerException e) {
        fail("DataSource is not initialized");
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_jKlh0_Wbuh0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getTopLosers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_nVAz0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        // No-op
    }
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertTrue(marketSummaryDataBean.getVolume() >= 0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_getMarketSummaryInternal_tPsB5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(0);
    MarketSummaryDataBean msdb = tradeDirect.getMarketSummary();
    assertNotNull(msdb);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvestmentReturn_kqSD0() {
    TradeDirect tradeDirect = new TradeDirect();
    double result = tradeDirect.investmentReturn(Math.random(), Math.random());
    assertEquals(0.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_InSessionTrue_TwoPhaseTrue_VgDm0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_InSessionFalse_TwoPhaseTrue_dyNh1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_InSessionTrue_TwoPhaseFalse_HRlv2() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = false;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_qzDx0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    Integer orderID = 1;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_COCE1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    Integer orderID = 1;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_cancelledOrder_WRAj2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    orderDataBean.setOrderStatus("cancelled");
    Integer orderID = 1;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNull(result);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_nNzP0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_nXjU1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_cancelledOrder_pgmu2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("cancelled");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_INri0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = orderData.getOrderID();
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNotNull(result);
        assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_HUdm1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = orderData.getOrderID();
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNotNull(result);
        assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_cancelledOrder_WdlG2() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("cancelled");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = orderData.getOrderID();
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNull(result);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_mSxW0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_TwoPhaseFalse_rtGh2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = false;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0_1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0_2() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0_3() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0_4() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0_5() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getLow());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0_6() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getHigh());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0_7() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0_8() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertTrue(quoteDataBean.getChange() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0_9() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertTrue(quoteDataBean.getVolume() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLogout_AWYb0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.logout("testUser");
        assertTrue(true);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginInvalidUser_ksoF1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.login("invalidUser", "validPassword");
        fail("Expected Exception");
    } catch (Exception e) {
        assertEquals("Cannot find account forinvalidUser", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginInvalidPassword_mvLg2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.login("validUser", "invalidPassword");
        fail("Expected Exception");
    } catch (Exception e) {
        assertEquals("TradeDirect:Login failure for user: validUser\n\tIncorrect password-->validUser:invalidPassword", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConnPublic_Urey0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection connection = tradeDirect.getConnPublic();
    assertNotNull(connection);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_eedq0() {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    try {
        AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(result);
        assertEquals("fullName", result.getFullName());
        assertEquals("address", result.getAddress());
        assertEquals("email", result.getEmail());
        assertEquals("creditCard", result.getCreditCard());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
public void testGetMarketSummaryInternal_Bmbe0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean);}
@Test
public void testGetMarketSummaryInternal_Bmbe0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getOpenTSIA());}
@Test
public void testGetMarketSummaryInternal_Bmbe0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getTSIA());}
@Test
public void testGetMarketSummaryInternal_Bmbe0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getVolume());}
@Test
public void testGetMarketSummaryInternal_Bmbe0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getTopGainers());}
@Test
public void testGetMarketSummaryInternal_Bmbe0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getTopLosers());}
@Test
public void testGetMarketSummaryInternal_Bmbe0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getSummaryDate());}
@Test
public void testGetMarketSummaryInternal_Bmbe0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getGainPercent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_tayV0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getGainPercent());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertNotNull(marketSummaryData.getTSIA());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_xTuM0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_NJav0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getGainPercent());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        assertTrue(marketSummaryData.getVolume() >= 0);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_SKUK0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_oDmM0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertNotNull(marketSummaryData.getGainPercent());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_sdSd0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        assertTrue(marketSummaryData.getVolume() >= 0);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthZero_iUOM0_jRmo0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[0];
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthOne_ZoHz1_iYSn0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(result);
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthMultiple_AQul2_VGqv0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table1 (id INT)", "CREATE TABLE test_table2 (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNull_OutNotNull_aSEF1_eMsw0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal(); // calling the method under test
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Expected no exception, but got " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNull_OutNotNull_SCdX1_YXWY0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal(); // calling the method under test
        Assertions.assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        Assertions.fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_interval0_iXEJ0_EBgk0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(0);
    try {
        MarketSummaryDataBean msdb = tradeDirect.getMarketSummaryInternal();
        assertNotNull(msdb);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_intervalNegative_VlWH1_ggsz0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(-1);
    try {
        MarketSummaryDataBean msdb = tradeDirect.getMarketSummaryInternal();
        assertNotNull(msdb);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_PLaq0_PofW0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
    assertNotNull(marketSummaryData);
    assertNotNull(marketSummaryData.getTopGainers());
    assertEquals(5, marketSummaryData.getTopGainers().size());
    assertNotNull(marketSummaryData.getTopLosers());
    assertEquals(5, marketSummaryData.getTopLosers().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_HTHr0_lEXj0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_OGyH0_wAWO0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_KtSv1_yfoB0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_BuyOrder_rmhO0_GLri0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    orderDataBean.setOrderID(1);
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_SellOrder_ErcU1_vmVY0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    orderDataBean.setOrderID(1);
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_qKZb0_wWuu0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
        assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_kDBd0_VBEp0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_EmptyCollection_xXXn1_iUqm0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> quoteDataBeans = marketSummaryDataBean.getTopGainers();
        assertTrue(quoteDataBeans.isEmpty());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_NIlG0_DFvm0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = null;
    try {
        quoteDataBean = tradeDirect.getMarketSummaryInternal().getTopGainers().iterator().next();
    } catch (Exception e) {
    }
    assertNotNull(quoteDataBean);
    assertNotNull(quoteDataBean.getSymbol());
    assertNotNull(quoteDataBean.getCompanyName());
    assertNotNull(quoteDataBean.getPrice());
    assertEquals(0.0, quoteDataBean.getVolume(), 0.0);
    assertEquals(0.0, quoteDataBean.getChange(), 0.0);
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_Ouzr0_gpqK0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    tradeDirect.setInSession(true);
    try {
        OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderData);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeAsynch_pNVL1_wqIB0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    tradeDirect.setInSession(false);
    try {
        OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderData);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeSynch_msXi2_yNJs0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(true);
    try {
        OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderData);
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeSynch_YGzl3_rfTD0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeAsynch2Phase_KNwO5_nrPd0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSession_False_OrderProcessingMode_SYNCH_CwZq0_LZGo0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSession_False_OrderProcessingMode_ASYNCH_WFNv1_JDBW0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSession_True_OrderProcessingMode_SYNCH_UwKr3_JTYP0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSession_True_OrderProcessingMode_ASYNCH_zdGR4_dcZj0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSession_True_OrderProcessingMode_ASYNCH_2PHASE_ZMEH5_QaqM0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_2Phase_ehdU0_kBXv0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeAsynch_2Phase_WZPL1_uaGq0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeSynch_kNlO2_NUqK0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_EVFS4_VFZk0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    tradeDirect.setInSession(true);
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeAsynch_fVWE5_kAOt0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    tradeDirect.setInSession(false);
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_AccountDataBeanNull_IcXj6_eFVl0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    AccountDataBean accountDataBean = null;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell2_Vxjm1_BXNM0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_hoTd0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    boolean inSession = false;
    tradeDirect.setInSession(inSession);
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_1_UKmX0_gwyb0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        Log.error("TradeDirect:testUpdateQuotePriceVolumeInt_1_UKmX0 -- error", e);
    }
    assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_2_QPfy1_iYjf0() {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setUpdateQuotePrices(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt3_MART2_ZUDh0() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("0.01"));
    tradeDirect.recentQuotePriceChangeList.add(quoteDataBean);
    try {
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol", new BigDecimal("1.0"), 10.0, true);
        assertEquals(result.getPrice(), new BigDecimal("0.02"));
    } catch (Exception e) {
        fail("Exception should not be thrown: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt4_WoAY3_aATZ0() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("1000.0"));
    tradeDirect.recentQuotePriceChangeList.add(quoteDataBean);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_3_WmYL2_qtkP0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
        assertNotNull(topGainers);
        Iterator<QuoteDataBean> iterator = topGainers.iterator();
        assertTrue(iterator.hasNext());
        QuoteDataBean quoteDataBean = iterator.next();
        assertNotNull(quoteDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_hFqM0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertTrue(marketSummaryDataBean.getVolume() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_uwvi0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotEquals(0, marketSummaryDataBean.getVolume());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_uwvi0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertEquals(marketSummaryDataBean.getGainPercent(), BigDecimal.ZERO);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_uwvi0_9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertEquals(MarketSummaryDataBean.getRandomInstance().getGainPercent(), marketSummaryDataBean.getGainPercent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_jKlh0_Wbuh0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_jKlh0_Wbuh0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getSummaryDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_jKlh0_Wbuh0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_jKlh0_Wbuh0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getOpenTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_jKlh0_Wbuh0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertTrue(result.getGainPercent().doubleValue() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_jKlh0_Wbuh0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertTrue(result.getVolume() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_jKlh0_Wbuh0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getTopGainers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_rdGG0_ZWPF0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getGainPercent());
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertNotNull(marketSummaryDataBean.getVolume());
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_nVAz0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertTrue(marketSummaryDataBean.getVolume() >= 0);
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_kenM0_HePq0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal1_DYGq0_nZXE0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal2_xFKl1_NTpO0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertEquals(marketSummaryDataBean.getTSIA(), BigDecimal.ZERO);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal3_ZYES2_vRFZ0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertEquals(marketSummaryDataBean.getOpenTSIA(), BigDecimal.ZERO);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal4_bqck3_zVxe0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertEquals(marketSummaryDataBean.getVolume(), 0.0, 0.01);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal6_PJxl5_gNRP0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradeConfig = mock(TradeConfig.class);
        tradedirect = new TradeDirect();
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(0);
        MarketSummaryDataBean marketSummaryDataBean = tradedirect.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(-1);
        marketSummaryDataBean = tradedirect.getMarketSummary();
        assertEquals(cachedMSDB, marketSummaryDataBean);
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(10);
        long currentTime = System.currentTimeMillis();
        when(System.currentTimeMillis()).thenReturn(currentTime);
        when(nextMarketSummary).thenReturn(currentTime - 10000);
        marketSummaryDataBean = tradedirect.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
        verify(tradedirect, times(1)).getMarketSummaryInternal();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_LcgH0() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean);
    assertNotNull(quoteDataBean.getCompanyName());
    assertNotNull(quoteDataBean.getPrice());
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
    assertNotNull(quoteDataBean.getSymbol());
    assertTrue(quoteDataBean.getChange() >= 0);
    assertTrue(quoteDataBean.getVolume() >= 0);
}
}