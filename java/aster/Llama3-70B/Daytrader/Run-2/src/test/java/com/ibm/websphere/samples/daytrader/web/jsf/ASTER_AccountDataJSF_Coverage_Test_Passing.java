/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AccountDataJSF_Coverage_Test_Passing {
  private OrderData[] closedOrders;
  private ExternalContext context;
  private TradeServices tradeAction;
  AccountDataJSF accountdatajsf;
  HttpSession httpsession;
  ExternalContext externalcontext;
@BeforeEach
  @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHome_SessionCreation_WdvN1() throws Exception {
    when(externalcontext.getSession(any())).thenReturn(httpsession);
    accountdatajsf.home();
    verify(httpsession).setAttribute("sessionCreationDate", any());
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHome_GetUserID_yuyJ2() throws Exception {
    when(httpsession.getAttribute("uidBean")).thenReturn("userID");
    accountdatajsf.home();
    verify(tradeAction).getAccountData("userID");
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHome_DisplayOrderAlerts_True_xwUC5() throws Exception {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    accountdatajsf.home();
    verify(tradeAction).getClosedOrders(any());
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHome_DisplayOrderAlerts_False_cAbs6() throws Exception {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(false);
    accountdatajsf.home();
    verify(tradeAction, never()).getClosedOrders(any());
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHome_GetOrders_LongRun_OeKE9() throws Exception {
    when(TradeConfig.getLongRun()).thenReturn(true);
    when(httpsession.getAttribute("uidBean")).thenReturn("userID");
    accountdatajsf.home();
    verify(tradeAction, never()).getOrders("userID");
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHome_SetSessionCreationDate_fqFx13() throws Exception {
    accountdatajsf.home();
    verify(accountdatajsf).setSessionCreationDate(any());
  }
@BeforeEach
    @Test
    public void testhome_Twoz1() throws Exception{
        when(externalcontext.getSession(any())).thenReturn(httpsession);
        accountdatajsf.home();
    }
@BeforeEach
    @Test
    public void testhome_JblP1() throws Exception{
        when(externalcontext.getSession(any())).thenReturn(httpsession);
        accountdatajsf.home();
        verify(httpsession).setAttribute("closedOrders", any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHome_SetCurrentTime_FeTl14() throws Exception {
    accountdatajsf.home();
    verify(accountdatajsf).setCurrentTime(any());
  }
}