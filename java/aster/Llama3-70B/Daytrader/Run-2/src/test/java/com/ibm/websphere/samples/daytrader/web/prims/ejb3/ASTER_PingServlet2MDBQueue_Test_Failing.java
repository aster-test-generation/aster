/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.web.prims.PingServlet;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBQueue_Test_Failing {
private static String initTime;
private static int hitCount;
PingServlet2MDBQueue pingservlet2mdbqueue;
ServletConfig servletConfig;
HttpServletResponse httpservletresponse;
HttpServletRequest httpservletrequest;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        pingservlet2mdbqueue = new PingServlet2MDBQueue();
        pingservlet2mdbqueue.doPost(httpservletrequest, httpservletresponse);
        verify(pingservlet2mdbqueue).doGet(httpservletrequest, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_wVWl0() throws ServletException, IOException {
    PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2MDBQueue.doPost(req, res);
    verify(req).getMethod();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_Wvqs0() {
    PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
    String result = pingServlet2MDBQueue.getServletInfo();
    assertEquals("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_IOException_AyXK1_Ahsx0() throws ServletException, IOException {
    PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        when(res.getWriter()).thenThrow(new IOException());
        try {
            pingServlet2MDBQueue.doGet(req, res);
            fail("IOException should be thrown");
        } catch (IOException e) {
        } catch (ServletException e) {
            fail("ServletException should not be thrown");
        }
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    try {
        verify(res).sendError(500, "PingServlet2MDBQueue.doGet(...): error, ");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_Wvqs0_fid1() {
    PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
    String result = pingServlet2MDBQueue.getServletInfo();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_IOException_AyXK1_Ahsx0_fid1() throws ServletException, IOException {
    PingServlet pingServlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        when(res.getWriter()).thenThrow(new IOException());
        try {
            pingServlet.doGet(req, res);
            fail("IOException should be thrown");
        } catch (IOException e) {
        } catch (ServletException e) {
            fail("ServletException should not be thrown");
        }
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    try {
        verify(res).sendError(500, "PingServlet.doGet(...): error, ");
    } catch (Exception e) {
    }
}
}