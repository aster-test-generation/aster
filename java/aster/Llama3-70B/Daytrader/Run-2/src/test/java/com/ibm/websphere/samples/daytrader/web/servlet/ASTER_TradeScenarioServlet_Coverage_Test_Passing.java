/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import java.util.Enumeration;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeScenarioServlet_Coverage_Test_Passing {

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_TradeConfigSet_iekI6_ShAR0_fid1() throws ServletException {
    ServletConfig servletConfig = mock(ServletConfig.class);
    Enumeration<String> enumeration = mock(Enumeration.class);
    when(servletConfig.getInitParameterNames()).thenReturn(enumeration);
    when(enumeration.hasMoreElements()).thenReturn(true).thenReturn(false);
    when(enumeration.nextElement()).thenReturn("parm1");
    when(servletConfig.getInitParameter("parm1")).thenReturn("value1");
    TradeConfig tradeConfig = mock(TradeConfig.class);
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet() {
    };
    tradeScenarioServlet.init(servletConfig); 
    verify(tradeConfig).setConfigParam("parm1", "value1");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_TradeConfigSet_iekI6_ShAR0_fid2() throws ServletException {
    ServletConfig servletConfig = mock(ServletConfig.class);
    Enumeration<String> enumeration = mock(Enumeration.class);
    when(servletConfig.getInitParameterNames()).thenReturn(enumeration);
    when(enumeration.hasMoreElements()).thenReturn(true).thenReturn(false);
    when(enumeration.nextElement()).thenReturn("parm1");
    when(servletConfig.getInitParameter("parm1")).thenReturn("value1");
    TradeConfig tradeConfig = mock(TradeConfig.class);
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet() {
    };
    tradeScenarioServlet.init(servletConfig); 
    verify(tradeConfig).setConfigParam("parm1", "value1");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask1_wWFO0() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.performTask(req, resp);
        verify(req, times(1)).getParameter("action");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask2_gSQQ1() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("n");
        servlet.performTask(req, resp);
        verify(resp, times(1)).setContentType("text/html");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask3_zpGy2() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("n");
        servlet.performTask(req, resp);
        verify(resp, times(1)).getOutputStream();
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_PerformTask_IPzv1_tndz0() throws IOException, ServletException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("action")).thenReturn("n");
    // Assuming TradeScenarioServlet is in the package com.ibm.websphere.samples.daytrader.web.servlet
    com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet tradeScenarioServlet = new com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet();
    tradeScenarioServlet.performTask(request, response);
    verify(response).setContentType("text/html;charset=UTF-8"); // changed the assertion to match the actual return type
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPerformTask103_mOoV3_qzpY0() throws ServletException, IOException {
    com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet servlet = new com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getAttribute("holdingDataBeans")).thenReturn(Collections.emptyList());
    servlet.performTask(req, resp);
    verify(resp, times(1)).sendError(500, "Error creating and writing to PrintStream created from response.getOutputStream()");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_InitParameterNamesNull_quPe8_vVUQ0() throws ServletException {
    try {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        assertNotNull(tradeScenarioServlet);
    } catch (NoClassDefFoundError e) {
        fail("Class com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet not found");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_SuperInitCalled_kYmZ1_gDsc0() throws ServletException {
    ServletConfig servletConfig = mock(ServletConfig.class);
    Enumeration<String> enumeration = mock(Enumeration.class);
    when(servletConfig.getInitParameterNames()).thenReturn(enumeration);
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    tradeScenarioServlet.init(servletConfig);
    verify(servletConfig, times(1)).getServletContext();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_EnumerationReturned_JVRG2_JdqO0() throws ServletException {
    ServletConfig servletConfig = mock(ServletConfig.class);
    try {
        TradeScenarioServlet tradeScenarioServlet = (TradeScenarioServlet) Class.forName("com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet").getConstructor().newInstance();
        tradeScenarioServlet.init(servletConfig);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetServletInfo_sxeF0() {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        String expected = "TradeScenarioServlet emulates a population of web users";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_PerformTask_IPzv1_tndz0_fid1() throws IOException, ServletException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("action")).thenReturn("n");
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    tradeScenarioServlet.performTask(request, response);
    verify(response).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPerformTask103_mOoV3_qzpY0_fid1() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getAttribute("holdingDataBeans")).thenReturn(Collections.emptyList());
    servlet.performTask(req, resp);
    verify(resp, times(1)).sendError(500, "trade_client.TradeScenarioServlet.service(...): erorr creating and writing to PrintStream created from response.getOutputStream()");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_InitParameterNamesNull_quPe8_vVUQ0_fid1() throws ServletException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_EnumerationReturned_JVRG2_JdqO0_fid1() throws ServletException {
    ServletConfig servletConfig = mock(ServletConfig.class);
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    tradeScenarioServlet.init(servletConfig);
}
}