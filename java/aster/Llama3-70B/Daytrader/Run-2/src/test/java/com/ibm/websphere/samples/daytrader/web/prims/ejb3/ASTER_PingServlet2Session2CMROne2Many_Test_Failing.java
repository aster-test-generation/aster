/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2CMROne2Many_Test_Failing {
private static int hitCount;
private static String initTime;
PingServlet2Session2CMROne2Many pingservlet2session2cmrone2many;
ServletConfig servletConfig;
HttpServletResponse httpservletresponse;
HttpServletRequest httpservletrequest;
private String order;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        pingservlet2session2cmrone2many = new PingServlet2Session2CMROne2Many();
        pingservlet2session2cmrone2many.doPost(httpservletrequest, httpservletresponse);
        verify(pingservlet2session2cmrone2many).doGet(httpservletrequest, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_akqu0() {
    PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        servlet.doPost(req, res);
        verify(req, times(1)).getMethod();
        verify(res, times(1)).getStatus();
    } catch (ServletException | IOException e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_ySsM0() {
    PingServlet2Session2CMROne2Many pingServlet2Session2CMROne2Many = new PingServlet2Session2CMROne2Many();
    String result = pingServlet2Session2CMROne2Many.getServletInfo();
    assertEquals("web primitive, tests Servlet to Entity EJB path", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_IOException_dZmR1_uYLz0() throws IOException {
    PingServlet2Session2CMROne2Many pingServlet = new PingServlet2Session2CMROne2Many();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getWriter()).thenThrow(new IOException());
    try {
        pingServlet.doGet(req, res);
        fail("Expected IOException");
    } catch (IOException e) {
    } catch (ServletException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_akqu0_fid2() {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        when(req.getMethod()).thenReturn("GET");
        new PingServlet2Session2CMROne2Many().doGet(req, res);
        verify(req, times(1)).getMethod();
        verify(res, times(1)).setStatus(500);
    } catch (ServletException | IOException e) {
        fail("Exception should not be thrown");
    }
}
}