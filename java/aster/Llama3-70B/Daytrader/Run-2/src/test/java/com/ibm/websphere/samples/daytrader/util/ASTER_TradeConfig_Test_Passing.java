/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfig_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndFloat_GkpJ0() {
    TradeConfig tradeConfig = new TradeConfig();
    float result = TradeConfig.rndFloat(10);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessMode_UmRv0() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected =1; // assuming default access mode is1
    int actual = TradeConfig.getAccessMode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInterval_YkMk0() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 10; // assuming default value of marketSummaryInterval is 10
    tradeConfig.setMarketSummaryInterval(expected);
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRunTimeModeNames_CPiv0() {
    TradeConfig tradeConfig = new TradeConfig();
    String[] expected = tradeConfig.getRunTimeModeNames();
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrimIterations_xIcp1() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getPrimIterations();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndAddress_rrem0_1() {
    String result = TradeConfig.rndAddress();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndAddress_rrem0_2() {
    String result = TradeConfig.rndAddress();
    assertTrue(result.matches("\\d+ Oak St\\."));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrementScenarioCount_OTDi0() {
    TradeConfig tradeConfig = new TradeConfig();
    int initialCount = tradeConfig.getScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(initialCount + 1, tradeConfig.getScenarioCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRunTimeMode_zBIq0() {
    TradeConfig.setRunTimeMode(1);
    assertEquals(1, TradeConfig.getRunTimeMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetJDBCDriverNeedsGlobalTransation_jFTY0() {
    TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
    assertTrue(TradeConfig.getJDBCDriverNeedsGlobalTransation());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndFullName_Dcyt0_1() {
    String result = TradeConfig.rndFullName();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndFullName_Dcyt0_2() {
    String result = TradeConfig.rndFullName();
    assertTrue(result.startsWith("first:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndFullName_Dcyt0_3() {
    String result = TradeConfig.rndFullName();
    assertTrue(result.contains(" last:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetScenarioMixes_Mjoc0() {
    TradeConfig tradeConfig = new TradeConfig();
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertNotNull(scenarioMixes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMAX_USERS_DSBJ0() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected =15000; // assuming default value of MAX_USERS is15000
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMAX_QUOTES_eGrc0() {
    int result = TradeConfig.getMAX_QUOTES();
    assertEquals(TradeConfig.getMAX_QUOTES(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndQuantity_jQCn0() {
    float result = TradeConfig.rndQuantity();
    assertTrue(result >= 1.0f && result <= 201.0f);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongRun_ANoK0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getLongRun();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetListQuotePriceChangeFrequency_MVBo0() {
    TradeConfig.setListQuotePriceChangeFrequency(10);
    assertEquals(10, TradeConfig.getListQuotePriceChangeFrequency());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderProcessingMode_VLEw0() {
    TradeConfig.setOrderProcessingMode(1);
    assertEquals(1, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDisplayOrderAlerts_hUqj0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getDisplayOrderAlerts();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessMode_DrRg0() {
    TradeConfig.setAccessMode(1);
    assertEquals(1, TradeConfig.getAccessMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetJDBCDriverNeedsGlobalTransation_rpPh0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getJDBCDriverNeedsGlobalTransation();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndPrice_oNYs0() {
    float result = TradeConfig.rndPrice();
    assertTrue(result >= 1.0f && result <= 201.0f);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMAX_HOLDINGS_Qzbr0() {
    int result = TradeConfig.getMAX_HOLDINGS();
    assertEquals(TradeConfig.getMAX_HOLDINGS(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioAction_NewUser_FkGd0() {
        TradeConfig tradeConfig = new TradeConfig();
        char result = TradeConfig.getScenarioAction(true);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioAction_NotNewUser_ActionNotB_jiZJ1() {
        TradeConfig tradeConfig = new TradeConfig();
        char result = TradeConfig.getScenarioAction(false);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPrimIterations_bCUs0() {
    TradeConfig.setPrimIterations(5);
    assertEquals(5, TradeConfig.getPrimIterations());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserID_vVYz0() {
        TradeConfig tradeConfig = new TradeConfig();
        String userID1 = TradeConfig.nextUserID();
        String userID2 = TradeConfig.nextUserID();
        assertNotEquals(userID1, userID2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPage_gFiJ0() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndBalance();
    assertEquals("1000000", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWebInterfaceNames_cvKH0() {
    TradeConfig tradeConfig = new TradeConfig();
    String[] webInterfaceNames = TradeConfig.getWebInterfaceNames();
    assertNotNull(webInterfaceNames);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUpdateQuotePrices_MRIv0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getUpdateQuotePrices();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndBoolean_Cehn0() {
    boolean result = TradeConfig.rndBoolean();
    assertTrue(result || !result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetScenarioCount_HmwZ0() {
    TradeConfig.setScenarioCount(5);
    assertEquals(5, TradeConfig.getScenarioCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPublishQuotePriceChange_UDua0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getPublishQuotePriceChange();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_NullParm_VtYE1() {
    TradeConfig.setConfigParam(null, "value");
    assertEquals(1, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_EmptyParm_Wclc1() {
    TradeConfig.setConfigParam("", "value");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_NullValue_dXQD2() {
    TradeConfig.setConfigParam("orderProcessingMode", null);
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_EmptyValue_FqXu3() {
    TradeConfig.setConfigParam("orderProcessingMode", "");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_OrderProcessingMode_DAhr4() {
    TradeConfig.setConfigParam("orderProcessingMode", "mode1");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_AccessMode_bMpT5() {
    TradeConfig.setConfigParam("accessMode", "mode1");
    assertEquals(1, TradeConfig.getAccessMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_WebInterface_BIyW6() {
    TradeConfig.setConfigParam("WebInterface", "interface1");
    assertEquals(10, TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_PrimIterations_fCxE9() {
    TradeConfig.setConfigParam("primIterations", "30");
    assertEquals(30, TradeConfig.getPrimIterations());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_InvalidParm_FkIX10() {
    TradeConfig.setConfigParam("invalidParm", "value");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_InvalidValue_VyFr11() {
    TradeConfig.setConfigParam("orderProcessingMode", "invalidValue");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_OrderProcessingMode_CaseInsensitive_COAy12() {
    TradeConfig.setConfigParam("ORDERPROCESSINGMODE", "MODE1");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_AccessMode_CaseInsensitive_dOxJ13() {
    TradeConfig.setConfigParam("ACCESSMODE", "MODE1");
    assertEquals(0, TradeConfig.getAccessMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_WebInterface_CaseInsensitive_UtJe14() {
    TradeConfig.setConfigParam("WEBINTERFACE", "INTERFACE1");
    assertEquals(10, TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWebInterface_UrKS10() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getWebInterface();
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderProcessingModeNames_enTx0() {
    TradeConfig tradeConfig = new TradeConfig();
    String[] expected = tradeConfig.getOrderProcessingModeNames();
    String[] actual = TradeConfig.getOrderProcessingModeNames();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndInt_lwnO0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.rndInt(10);
    assertTrue(result >= 0 && result < 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRandom_JwOn0() {
    double result = TradeConfig.random();
    assert(result >= 0.0 && result < 1.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderProcessingMode_wMPN0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getOrderProcessingMode();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndSymbols_EmptyString_DXVO0() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndSymbols();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndSymbols_SingleSymbol_AVJy1_1() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndSymbols();
    assertTrue(result.startsWith("s:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndSymbols_SingleSymbol_AVJy1_2() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndSymbols();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessMode_UmRv0_fid1() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 0; // assuming default access mode is 0
    int actual = TradeConfig.getAccessMode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndAddress_rrem0() {
    String result = TradeConfig.rndAddress();
    assertNotNull(result);
    assertTrue(result.matches("\\d+ Oak St\\."));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndFullName_Dcyt0() {
    String result = TradeConfig.rndFullName();
    assertNotNull(result);
    assertTrue(result.startsWith("first:"));
    assertTrue(result.contains(" last:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndSymbols_MultipleSymbols_BwxW2() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndSymbols();
    assertTrue(result.startsWith("s:"));
    assertTrue(result.contains(","));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomPriceChangeFactor_Positive_cvQD0() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assert result.doubleValue() > 0.0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomPriceChangeFactor_Scale_auWq1() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(2, result.scale());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomPriceChangeFactor_RoundHalfUp_IWlG2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    BigDecimal rounded = result.setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(result, rounded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndEmail_lhWI0() {
    String userID = "user:id";
    String result = TradeConfig.rndEmail(userID);
    assertNotNull(result);
    assertTrue(result.contains(userID.replace(":", "")));
    assertTrue(result.contains("@"));
    assertTrue(result.contains(".com"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndCreditCard_bgGi0() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndCreditCard();
    assertNotNull(result);
    assertTrue(result.matches("\\d{1,3}-\\d{1,4}-\\d{1,4}-\\d{1,4}"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndBigDecimal_gqDs0() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.rndBigDecimal(10.0f);
    assertNotNull(result);
    assertEquals(2, result.scale());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWebInterface_qBMI0() {
    TradeConfig.setWebInterface(10);
    assertEquals(10, TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndUserID_tFjw0() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndUserID();
    assertNotNull(result);
    assertTrue(result.startsWith("uid:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndBalance_DawD0() {
    String result = TradeConfig.rndBalance();
    assertEquals("1000000", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndSymbols_MultipleSymbols_BwxW2_2() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndSymbols();
    assertTrue(result.contains(","));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndEmail_lhWI0_1() {
    String userID = "user:id";
    String result = TradeConfig.rndEmail(userID);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndEmail_lhWI0_2() {
    String userID = "user:id";
    String result = TradeConfig.rndEmail(userID);
    assertTrue(result.contains(userID.replace(":", "")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndEmail_lhWI0_3() {
    String userID = "user:id";
    String result = TradeConfig.rndEmail(userID);
    assertTrue(result.contains("@"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndEmail_lhWI0_4() {
    String userID = "user:id";
    String result = TradeConfig.rndEmail(userID);
    assertTrue(result.contains(".com"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndCreditCard_bgGi0_1() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndCreditCard();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndCreditCard_bgGi0_2() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndCreditCard();
    assertTrue(result.matches("\\d{1,3}-\\d{1,4}-\\d{1,4}-\\d{1,4}"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndBigDecimal_gqDs0_1() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.rndBigDecimal(10.0f);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndBigDecimal_gqDs0_2() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.rndBigDecimal(10.0f);
    assertEquals(2, result.scale());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndUserID_tFjw0_1() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndUserID();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndUserID_tFjw0_2() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndUserID();
    assertTrue(result.startsWith("uid:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndBalance_moFC0() {
    assertEquals("1000000", TradeConfig.rndBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndBalance_Jhih0() {
    String balance = TradeConfig.rndBalance();
    assertEquals("1000000", balance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderFee_BUY_YwdD0_SHzQ0() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.getOrderFee("BUY");
    assertEquals(result, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderFee_SELL_ckkj1_uDoP0() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.getOrderFee("SELL");
    assertEquals(result, result);
}
}