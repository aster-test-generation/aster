/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfig_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetListQuotePriceChangeFrequency_ngYQ10() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getListQuotePriceChangeFrequency();
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrimIterations_xIcp0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getPrimIterations();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMAX_USERS_DSBJ0_fid1() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 0; // assuming default value of MAX_USERS is 0
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetListQuotePriceChangeFrequency_ngYQ0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getListQuotePriceChangeFrequency();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetJDBCDriverNeedsGlobalTransation_rpPh0_fid1() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = TradeConfig.getJDBCDriverNeedsGlobalTransation();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPage_gFiJ0_fid1() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.getPage(1);
    assertEquals("expectedPage", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_NullParm_VtYE0() {
    TradeConfig.setConfigParam(null, "value");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_AccessMode_bMpT5_fid1() {
    TradeConfig.setConfigParam("accessMode", "mode1");
    assertEquals(0, TradeConfig.getAccessMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_WebInterface_BIyW6_fid1() {
    TradeConfig.setConfigParam("WebInterface", "interface1");
    assertEquals(0, TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetConfigParam_WebInterface_CaseInsensitive_UtJe14_fid1() {
    TradeConfig.setConfigParam("WEBINTERFACE", "INTERFACE1");
    assertEquals(0, TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWebInterface_UrKS0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getWebInterface();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndSymbols_SingleSymbol_AVJy1() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndSymbols();
    assertTrue(result.startsWith("s:"));
    assertFalse(result.contains(","));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserID_RND_USER_true_Psjk0() {
    TradeConfig tradeConfig = new TradeConfig();
    TradeConfig.RND_USER = true;
    String result = TradeConfig.getUserID();
    assertEquals(tradeConfig.rndUserID(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserID_RND_USER_false_RnBq1() {
    TradeConfig tradeConfig = new TradeConfig();
    TradeConfig.RND_USER = false;
    String result = TradeConfig.getUserID();
    assertEquals(tradeConfig.nextUserID(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetScenarioCount_LLsD0() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 0; // assuming default value of scenarioCount is 0
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRunTimeMode_xecZ0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getRunTimeMode();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndSymbols_SingleSymbol_AVJy1_2_fid3() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndSymbols();
    assertFalse(result.contains(","));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderFee_OTHER_UJMC2_WDCR0() {
    TradeConfig tradeConfig = new TradeConfig();
    BigDecimal result = TradeConfig.getOrderFee("OTHER");
    assertEquals(new BigDecimal(tradeConfig.rndBalance()), result);
}
}