/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import javax.enterprise.inject.Instance;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeServletAction_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBuy_ResultsInitialization_UAOY0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        String symbol = "symbol1";
        String quantity = "10.0";
        tradeServletAction.doBuy(ctx, req, resp, userID, symbol, quantity);
        verify(req, times(1)).setAttribute("results", "");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccountUpdate_PasswordMismatch_JgPs0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String password = "password";
        String cpassword = "differentPassword";
        String fullName = "fullName";
        String address = "address";
        String creditcard = "creditcard";
        String email = "email";
        tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
        verify(req).setAttribute("results", "Update profile error: passwords do not match");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccountUpdate_EmptyFields_ZRKD1() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String password = "";
        String cpassword = "";
        String fullName = "";
        String address = "";
        String creditcard = "";
        String email = "";
        tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
        verify(req).setAttribute("results", "Update profile error: please fill in all profile information fields");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_Initialization_SMsi1() throws Exception {
        Collection<QuoteDataBean> quoteDataBeans = new ArrayList<QuoteDataBean>();
        assertNotNull(quoteDataBeans);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_SplitSymbols_IcMI2() throws Exception {
        String symbols = "symbol1,symbol2";
        String[] symbolsSplit = symbols.split(",");
        assertEquals(2, symbolsSplit.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_ForLoop_jEFy3() throws Exception {
        String[] symbolsSplit = {"symbol1", "symbol2"};
        for (String symbol : symbolsSplit) {
            assertNotNull(symbol);
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_AddToCollection_lxhi5() throws Exception {
        Collection<QuoteDataBean> quoteDataBeans = new ArrayList<QuoteDataBean>();
        QuoteDataBean quoteDataBean = mock(QuoteDataBean.class);
        quoteDataBeans.add(quoteDataBean);
        assertEquals(1, quoteDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_ThrowServletException_SNVX9() throws Exception {
        Exception exception = new Exception();
        ServletException servletException = new ServletException("TradeServletAction.doQuotes(...)" + " exception user = userID", exception);
        assertNotNull(servletException);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccount_ResultsNotNull_Dwmc3() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String results = "testResults";
        tradeServletAction.doAccount(ctx, req, resp, userID, results);
        verify(req).setAttribute("results", results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogin_tActionIsNull_frYF0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user";
        String passwd = "pass";
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        verify(System.out).println("null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogin_tActionIsNotNull_pNFO1() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction(mock(Instance.class));
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user";
        String passwd = "pass";
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        verify(System.out, never()).println("null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoRegister_ResultsInitialization_AbGe0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String passwd = "password";
        String cpasswd = "password";
        String fullname = "Test User";
        String ccn = "1234567890";
        String openBalanceString = "100.0";
        String email = "test@example.com";
        String address = "Test Address";
        tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
        verify(req, times(1)).setAttribute("results", anyString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoRegister_PasswordMatch_kfzQ1() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String passwd = "password";
        String cpasswd = "password";
        String fullname = "Test User";
        String ccn = "1234567890";
        String openBalanceString = "100.0";
        String email = "test@example.com";
        String address = "Test Address";
        tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
        verify(req, times(1)).setAttribute("results", "Registration operation succeeded;  Account " + anyString() + " has been created.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoRegister_PasswordMismatch_RmzF4() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String passwd = "password";
        String cpasswd = "wrongpassword";
        String fullname = "Test User";
        String ccn = "1234567890";
        String openBalanceString = "100.0";
        String email = "test@example.com";
        String address = "Test Address";
        tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
        verify(req, times(1)).setAttribute("results", "Registration operation failed, your passwords did not match");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoLogin_xumz1_mSlq0() throws Exception{
    TradeServletAction tradeservletaction = new TradeServletAction();
    ServletContext servletcontext = mock(ServletContext.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    String userID = "userID";
    String passwd = "passwd";
    try {
        tradeservletaction.doLogin(servletcontext, httpservletrequest, httpservletresponse, userID, passwd);
        fail("Expected Exception");
    } catch (Exception e) {
        assertEquals("Exception logging in user " + userID + " with password " + passwd, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_PageConfiguration_BTkS3_SiJp0() throws Exception {
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeServletAction tradeServletAction = new TradeServletAction();
    String userID = "testUser";
    String passwd = "testPasswd";
    try {
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_NullServletContext_XaDc7_sqyh0() throws Exception {
    String userID = "user1";
    String passwd = "password";
    ServletContext nullCtx = null;
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    try {
        TradeServletAction tradeServletAction = new TradeServletAction();
        tradeServletAction.doLogin(nullCtx, req, resp, userID, passwd);
    } catch (NullPointerException e) {
        assertNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_ResultsInitialization_AALC1_aoat0() throws Exception {
    String userID = "user1";
    String passwd = "password";
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
    verify(req, never()).setAttribute(eq("results"), anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_RequestDispatch_WelcomePage_PSFs4_BuOS0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String passwd = "testPasswd";
    try {
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        fail("Expected ServletException");
    } catch (ServletException e) {
        assertEquals("Exception logging in user " + userID + " with password " + passwd, e.getMessage());
    }
    verify(req).setAttribute("results", anyString());
    verify(ctx).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).sendRedirect(anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_RequestDispatch_hDOg2_jBVy0() throws Exception {
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user";
    String passwd = "password";
    TradeServletAction tradeServletAction = new TradeServletAction();
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
    verify(ctx, times(1)).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(req).setAttribute("results", "Could not find account for + " + userID);
    verify(resp).sendRedirect(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoLogin_xumz1_mSlq0_fid1() throws Exception{
    TradeServletAction tradeservletaction = new TradeServletAction();
    ServletContext servletcontext = mock(ServletContext.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    String userID = "userID";
    String passwd = "passwd";
    tradeservletaction.doLogin(servletcontext, httpservletrequest, httpservletresponse, userID, passwd);
    verify(httpservletrequest, times(1)).setAttribute("results", any(String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_PageConfiguration_BTkS3_SiJp0_fid1() throws Exception {
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeServletAction tradeServletAction = new TradeServletAction();
    String userID = "testUser";
    String passwd = "testPasswd";
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
    assertNotNull(req.getSession(true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_NullServletContext_XaDc7_sqyh0_fid1() throws Exception {
    String userID = "user1";
    String passwd = "password";
    ServletContext nullCtx = null;
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    try {
        TradeServletAction tradeServletAction = new TradeServletAction();
        tradeServletAction.doLogin(nullCtx, req, resp, userID, passwd);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_RequestDispatch_WelcomePage_PSFs4_BuOS0_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String passwd = "testPasswd";
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
    verify(req).setAttribute("results", anyString());
    verify(ctx).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).sendRedirect(anyString());
}
}