/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Collection;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.MDBStats;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Passing {
TradeDirect tradedirect;
Connection connection;
Statement statement;
DataSource datasource;
MDBStats mdbStats;
Object[] sqlBuffer;
private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
private static Integer marketSummaryLock = new Integer(0);
private static long nextMarketSummary = System.currentTimeMillis();
PreparedStatement preparedstatement;
ResultSet resultset;
TradeConfig tradeConfig;
private static String getAllQuotesSQL = "select * from quoteejb q";
private boolean inSession = false;
TradeDirect tradeDirect;
PreparedStatement preparedStatement;
ResultSet resultSet;
DataSource dataSource;
Log log;
private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
private FinancialUtils financialUtils;
private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
private  UserTransaction txn;
AccountDataBean accountData;
HoldingDataBean holdingData;
QuoteDataBean quoteData;
OrderDataBean orderData;
HoldingDataBean holdingDataBean;
KeySequenceDirect keySequenceDirect;
AccountDataBean accountDataBean;
QuoteDataBean quoteDataBean;
private static final String userID = "testUser";
private static final String getClosedOrdersSQL = "select a.accountid from accountejb a where a.profile_userid = ?";
private ManagedExecutorService mes;
private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
private static BigDecimal ZERO = new BigDecimal(0.0);
private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_InSessionFalse_TwoPhaseTrue_dyNh1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_qzDx0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    Integer orderID = 1;
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
    } catch (Exception e) {
        // Ignore exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_cancelledOrder_WRAj2() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    orderDataBean.setOrderStatus("cancelled");
    Integer orderID = 1;
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
    } catch (Exception e) {
        // Ignore exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_nNzP0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_nXjU1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_cancelledOrder_pgmu2() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("cancelled");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_INri0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = orderData.getOrderID();
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
        assertNotNull(result.getOpenTSIA());
        assertNotNull(result.getGainPercent());
        assertNotNull(result.getSummaryDate());
        assertNotNull(result.getTSIA());
        assertTrue(result.getVolume() >= 0.0);
        assertNotNull(result.getTopGainers());
        assertNotNull(result.getTopLosers());
    } catch (Exception e) {
        // Ignore
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_HUdm1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = orderData.getOrderID();
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
        assertNotNull(result.getOpenTSIA());
        assertNotNull(result.getGainPercent());
        assertNotNull(result.getSummaryDate());
        assertNotNull(result.getTSIA());
        assertEquals(0.0, result.getVolume(), 0.0);
        assertNotNull(result.getTopGainers());
        assertNotNull(result.getTopLosers());
    } catch (Exception e) {
        // Exception is expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_ThrowsException_uxUM1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        tradeDirect.completeOrder(orderID, twoPhase);
        fail("Exception should be thrown");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_TwoPhaseFalse_rtGh2() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
    } catch (Exception e) {
        // Exception is expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_CancelledOrder_zFFF2() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("cancelled");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell11_AHMD10() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.sell("userID", new Integer(1), 0);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell12_UYME11() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.sell(null, new Integer(1), TradeConfig.ASYNCH_2PHASE);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell13_Uprw12() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.sell("userID", null, TradeConfig.ASYNCH_2PHASE);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell14_FtPB13() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.sell("userID", new Integer(1), -1);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginInvalidPassword_mvLg2() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.login("validUser", "invalidPassword");
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginException_qPAq3() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.login(null, null);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_eedq0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
        assertNotNull(result.getOpenTSIA());
        assertNotNull(result.getGainPercent());
        assertNotNull(result.getSummaryDate());
        assertNotNull(result.getTSIA());
        assertTrue(result.getVolume() >= 0);
        assertNotNull(result.getTopGainers());
        assertNotNull(result.getTopLosers());
    } catch (Exception e) {
        // Ignore
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImpl_CiYL0() {
    TradeDirect tradeDirect = new TradeDirect();
    assertEquals(TradeConfig.DIRECT, tradeDirect.getImpl());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_InvalidUserID_FWiw3() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.buy(null, "symbol", 10.0, TradeConfig.SYNCH);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_InvalidSymbol_DLIA4() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.buy("userID", null, 10.0, TradeConfig.SYNCH);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_InvalidQuantity_ljJS5() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.buy("userID", "symbol", 0.0, TradeConfig.SYNCH);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_InvalidOrderProcessingMode_uEtr6() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.buy("userID", "symbol", 10.0, -1);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_ThrowsException_zkeI1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.getClosedOrders(null);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_tayV0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getGainPercent());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertNotNull(marketSummaryData.getTSIA());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_xTuM0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_NJav0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getGainPercent());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        assertTrue(marketSummaryData.getVolume() >= 0);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_SKUK0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthZero_iUOM0_jRmo0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[0];
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthOne_ZoHz1_iYSn0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertFalse(result);
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthMultiple_AQul2_VGqv0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table1 (id INT)", "CREATE TABLE test_table2 (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertFalse(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNotNull_OutNull_hXNT2_mozt0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table (id INT)"};
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal(); 
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNotNull_OutNotNull_qyRT0_Jrus0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        tradeDirect.recreateDBTables(sqlBuffer, out);
        Assertions.assertTrue(true);
    } catch (Exception e) {
        Assertions.fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNotNull_OutNull_trcq2_zJcF0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table (id INT)"};
    java.io.PrintWriter out = null;
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal(); 
        Assertions.assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_interval0_iXEJ0_EBgk0() {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(0);
    try {
        MarketSummaryDataBean msdb = tradeDirect.getMarketSummaryInternal();
        assertNull(msdb);
    } catch (Exception e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_intervalNegative_VlWH1_ggsz0() {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(-1);
    try {
        tradeDirect.getMarketSummaryInternal();
        fail("Exception should be thrown");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_PLaq0_PofW0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        // The error message indicates that the datasource is null, so we expect an exception
        assertNotNull(e);
        return;
    }
    fail("Expected exception, but no exception occurred");
    assertNotNull(marketSummaryData);
    assertNotNull(marketSummaryData.getTopGainers());
    assertNotNull(marketSummaryData.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_kDBd0_VBEp0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (NullPointerException e) {
        assertEquals("Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.datasource\" is null", e.getMessage());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_EmptyCollection_xXXn1_iUqm0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> quoteDataBeans = marketSummaryDataBean.getTopGainers();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(quoteDataBeans);
    } catch (NullPointerException e) {
        // Expected
    } catch (Exception e) {
        fail("Unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_Ouzr0_gpqK0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    tradeDirect.setInSession(true);
    try {
        OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeSynch_msXi2_yNJs0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(true);
    try {
        OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNull(orderData);
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSession_True_OrderProcessingMode_SYNCH_UwKr3_JTYP0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSession_True_OrderProcessingMode_ASYNCH_zdGR4_dcZj0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSession_True_OrderProcessingMode_ASYNCH_2PHASE_ZMEH5_QaqM0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_2Phase_ehdU0_kBXv0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeSynch_kNlO2_NUqK0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_EVFS4_VFZk0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    tradeDirect.setInSession(true);
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_AccountDataBeanNull_IcXj6_eFVl0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    AccountDataBean accountDataBean = null;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_QuoteDataBeanNull_naYZ8_lgNg0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    QuoteDataBean quoteDataBean = null;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertEquals(marketSummaryDataBean, MarketSummaryDataBean.getRandomInstance());
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_JMSException_PnUW9_Fctk0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell2_Vxjm1_BXNM0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell8_fEJH7_RXyx0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (NullPointerException e) {
        assertEquals("Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.datasource\" is null", e.getMessage());
    } catch (Exception e) {
        fail("Unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_hoTd0() {
    TradeDirect tradeDirect = new TradeDirect();
    boolean inSession = false;
    tradeDirect.setInSession(inSession);
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNull(result);
    } catch (Exception e) {
        assertEquals("Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.datasource\" is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_1_UKmX0_gwyb0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        Log.error("TradeDirect:testUpdateQuotePriceVolumeInt_1_UKmX0 -- error", e);
    }
    assertNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_rdGG0_ZWPF0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getGainPercent());
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertNotNull(marketSummaryDataBean.getVolume());
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (NullPointerException e) {
        if (!e.getMessage().contains("Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.datasource\" is null")) {
            fail("Exception occurred: " + e.getMessage());
        }
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal1_DYGq0_nZXE0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        // No need to fail here, the test will fail if an exception is thrown
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal2_xFKl1_NTpO0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNull(marketSummaryDataBean.getTSIA());
    } catch (Exception e) {
        // No operation
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal3_ZYES2_vRFZ0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNull(marketSummaryDataBean.getOpenTSIA());
    } catch (Exception e) {
        // No operation
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal6_PJxl5_gNRP0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (Exception e) {
        // Exception is expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHoldings_Exception_xohG1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.getHoldings(null);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
}