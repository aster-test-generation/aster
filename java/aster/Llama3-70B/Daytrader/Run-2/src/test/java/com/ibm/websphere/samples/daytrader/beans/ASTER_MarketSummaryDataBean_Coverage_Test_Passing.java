/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;
import java.math.BigDecimal;
import java.util.ArrayList;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.ArrayList;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryDataBean_Coverage_Test_Passing {

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopGainers_dlto0_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, null, Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopGainers_dlto0_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, null, Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("Market Summary at:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopGainers_dlto0_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, null, Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("TSIA:10"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopGainers_dlto0_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, null, Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("openTSIA:5"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopGainers_dlto0_5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, null, Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("gain:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopGainers_dlto0_6() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, null, Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("volume:100"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopLosers_CZHe1_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, Arrays.asList(new QuoteDataBean()), null);
    String result = marketSummaryDataBean.toString();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopLosers_CZHe1_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, Arrays.asList(new QuoteDataBean()), null);
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("Market Summary at:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopLosers_CZHe1_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, Arrays.asList(new QuoteDataBean()), null);
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("TSIA:10"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopLosers_CZHe1_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, Arrays.asList(new QuoteDataBean()), null);
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("openTSIA:5"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopLosers_CZHe1_5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, Arrays.asList(new QuoteDataBean()), null);
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("gain:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopLosers_CZHe1_6() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, Arrays.asList(new QuoteDataBean()), null);
    String result = marketSummaryDataBean.toString();
    assertTrue(result.contains("volume:100"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TopGainersNull_kThH0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(10), 100, null, Arrays.asList(new QuoteDataBean()));
        String result = marketSummaryDataBean.toHTML();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TopLosersNull_Irtr1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(10), 100, Arrays.asList(new QuoteDataBean()), null);
        String result = marketSummaryDataBean.toHTML();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TopGainersEmpty_NkCP2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(10), 100, new ArrayList<>(), Arrays.asList(new QuoteDataBean()));
        String result = marketSummaryDataBean.toHTML();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TopLosersEmpty_PPVO3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(10), 100, Arrays.asList(new QuoteDataBean()), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TopGainersHasNext_NQNy4() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("Symbol");
        quoteDataBean.setPrice(BigDecimal.valueOf(10));
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(10), 100, Arrays.asList(quoteDataBean), Arrays.asList(new QuoteDataBean()));
        String result = marketSummaryDataBean.toHTML();
        assertTrue(result.contains("Symbol"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TopLosersHasNext_HzYO5() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("Symbol");
        quoteDataBean.setPrice(BigDecimal.valueOf(10));
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(10), 100, Arrays.asList(new QuoteDataBean()), Arrays.asList(quoteDataBean));
        String result = marketSummaryDataBean.toHTML();
        assertTrue(result.contains("Symbol"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TopGainersIterator_fdLd7() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(10), 100, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
        String result = marketSummaryDataBean.toHTML();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toJSON_JsonObjectBuilder_ViJb0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.ONE, BigDecimal.ONE, 1.0, new ArrayList<>(), new ArrayList<>());
        marketSummaryDataBean.toJSON();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toJSON_topGainers_iterator_IwBi2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.ONE, BigDecimal.ONE, 1.0, Arrays.asList(new QuoteDataBean()), new ArrayList<>());
        marketSummaryDataBean.toJSON();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toJSON_topLosers_iterator_htls9() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.ONE, BigDecimal.ONE, 1.0, new ArrayList<>(), Arrays.asList(new QuoteDataBean()));
        marketSummaryDataBean.toJSON();
    }
}