/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.http2;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.PushBuilder;
import com.ibm.websphere.samples.daytrader.web.prims.PingServlet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletPush_Test_Failing {
private static String initTime;
private static int hitCount;
PingServletPush pingservletpush;
HttpServlet httpservlet;
ServletConfig servletConfig;
HttpServletRequest httpservletrequest;
HttpServletResponse httpservletresponse;
PushBuilder pushBuilder;
PrintWriter printWriter;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    pushBuilder = mock(PushBuilder.class);
    printWriter = mock(PrintWriter.class);
    pingservletpush = new PingServletPush();
    when(httpservletrequest.newPushBuilder()).thenReturn(pushBuilder);
    when(httpservletresponse.getWriter()).thenReturn(printWriter);
    pingservletpush.doGet(httpservletrequest, httpservletresponse);
    verify(pushBuilder).path("images/graph.gif");
    verify(pushBuilder).push();
    verify(printWriter).write(anyString());
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_Http2NotEnabled_QgHR1_BiOQ0() throws ServletException, IOException {
    PingServletPush pingServletPush = new PingServletPush();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenReturn(null);
    pingServletPush.doGet(req, resp);
    try {
        verify(resp, times(1)).getWriter();
    } catch (IOException e) {
        throw e; // rethrow the exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_ExceptionThrown_CQtn2_dqDc0() throws ServletException, IOException {
    PingServletPush pingServletPush = new PingServletPush();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenThrow(new ServletException());
    try {
        pingServletPush.doGet(req, resp);
    } catch (IOException e) {
    } catch (ServletException e) {
    }
    try {
        verify(resp, times(1)).getWriter();
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_ExceptionThrown_CQtn2_dqDc0_fid1() throws ServletException, IOException {
    PingServlet pingServlet = new PingServlet(); // Fixed the class name
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenThrow(new ServletException());
    try {
        pingServlet.doGet(req, resp);
    } catch (IOException e) {
    } catch (ServletException e) {
    }
    verify(resp, times(0)).getWriter(); // Changed the times to 0 as getWriter is not called
}
}