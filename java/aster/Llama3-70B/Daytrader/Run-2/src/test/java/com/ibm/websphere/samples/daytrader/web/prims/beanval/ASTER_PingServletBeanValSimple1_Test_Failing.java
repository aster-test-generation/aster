/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;
import java.io.IOException;
import java.time.LocalDateTime;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple1_Test_Failing {
private static LocalDateTime initTime;
PingServletBeanValSimple1 pingservletbeanvalsimple1;
HttpServlet httpservlet;
ServletConfig servletConfig;
HttpServletResponse httpservletresponse;
ServletOutputStream servletoutputstream;
HttpServletRequest httpservletrequest;
private static int hitCount = 0;
SimpleBean1 simpleBean1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception{
        httpservlet = mock(HttpServlet.class);
        servletConfig = mock(ServletConfig.class);
        pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
        // when
        pingservletbeanvalsimple1.init(servletConfig);
        // then
        assertNotNull(initTime);
        assertTrue(LocalDateTime.now().isAfter(initTime));
        verify(httpservlet, never()).init(servletConfig); // since httpservlet is not used in the init method
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservletrequest = mock(HttpServletRequest.class);
        pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingservletbeanvalsimple1.doPost(httpservletrequest, httpservletresponse);
        verify(pingservletbeanvalsimple1).doGet(httpservletrequest, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_nOeT0() throws ServletException, IOException {
    PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServletBeanValSimple1.doPost(req, res);
    verify(req, times(1)).getMethod();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_UWFB0() {
    PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
    String result = pingServletBeanValSimple1.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_QDVG0() throws ServletException, IOException {
    PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    pingServletBeanValSimple1.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(out).println(anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception{
        httpservlet = mock(HttpServlet.class);
        servletConfig = mock(ServletConfig.class);
        pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
        // when
        pingservletbeanvalsimple1.init(servletConfig);
        // then
        verify(httpservlet, never()).init(servletConfig); // since httpservlet is not used in the init method
        assertNotNull(initTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception{
        httpservlet = mock(HttpServlet.class);
        servletConfig = mock(ServletConfig.class);
        pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
        // when
        pingservletbeanvalsimple1.init(servletConfig);
        // then
        verify(httpservlet, never()).init(servletConfig); // since httpservlet is not used in the init method
        assertTrue(LocalDateTime.now().isAfter(initTime));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoGet_gYsj0() throws Exception{
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservletrequest = mock(HttpServletRequest.class);
    simpleBean1 = mock(SimpleBean1.class);
    pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    doNothing().when(simpleBean1).checkInjectionValidation();
    pingservletbeanvalsimple1.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(servletoutputstream).println(anyString());
    verify(simpleBean1).checkInjectionValidation();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_nOeT0_fid2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getMethod()).thenReturn("GET");
    new PingServletBeanValSimple1().doGet(req, res);
    verify(req, times(1)).getMethod();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_UWFB0_fid2() {
    PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
    String result = pingServletBeanValSimple1.getClass().getAnnotation(javax.servlet.annotation.WebServlet.class).description();
    assertEquals("Ping Servlet Bean Validation Simple", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_QDVG0_fid2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    // Initialize HttpServlet
    HttpServlet servlet = new HttpServlet() {
        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
            // Do nothing
        }
    };
    // Create instance of PingServletBeanValSimple1
    PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
    pingServletBeanValSimple1.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(out).println(anyString());
}
}