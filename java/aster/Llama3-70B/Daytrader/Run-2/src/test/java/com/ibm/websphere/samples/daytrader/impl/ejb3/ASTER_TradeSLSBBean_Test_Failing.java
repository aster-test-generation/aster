/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.concurrent.Future;
import javax.persistence.EntityManager;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import java.sql.Timestamp;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
@Mock
    private EntityManager entityManager;
private TradeSLSBBean tradeslsbbean;
@Mock
    private AccountProfileDataBean profile;
@Mock
    private AccountDataBean account;
@Mock
    private QuoteDataBean quote;
@Mock
    private HoldingDataBean holding;
@Mock
    private OrderDataBean order;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChange_oIVA0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("userID");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    assertNotNull(tradeSLSBBean);
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_3_tIpf2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ZERO, 10.0);
    assertNull(BigDecimal.ZERO);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChange_oIVA0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    tradeSLSBBean.publishQuotePriceChange(quoteDataBean, BigDecimal.valueOf(5.0), BigDecimal.valueOf(2.0), 100.0);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChangeNullQuote_PDHk1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.publishQuotePriceChange(null, BigDecimal.valueOf(5.0), BigDecimal.valueOf(2.0), 100.0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChangeNullOldPrice_KmBW2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    try {
        tradeSLSBBean.publishQuotePriceChange(quoteDataBean, null, BigDecimal.valueOf(2.0), 100.0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChangeNullChangeFactor_GbuC3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    try {
        tradeSLSBBean.publishQuotePriceChange(quoteDataBean, BigDecimal.valueOf(5.0), null, 100.0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getOpenTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getGainPercent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getSummaryDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertTrue(marketSummaryDataBean.getVolume() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopGainers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopLosers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllQuotes_GwOx0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_NewAccount_ExbT0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(accountDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_NewAccount_ExbT0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("userID", accountDataBean.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_NewAccount_ExbT0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, accountDataBean.getLoginCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_NewAccount_ExbT0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, accountDataBean.getLogoutCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_NewAccount_ExbT0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(accountDataBean.getCreationDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_NewAccount_ExbT0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), accountDataBean.getOpenBalance());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_NewAccount_ExbT0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), accountDataBean.getBalance());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_AccountProfileExists_XdrK1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean("userID", "password", "fullname", "address", "email", "creditcard");
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNull(accountDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHoldings_rDEC0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings("testUser");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_3_tIpf2_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ZERO, 10.0);
    assertEquals(BigDecimal.ZERO, quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_4_ViiK3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
    tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertEquals(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER, quoteDataBean.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_5_ZSBT4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
    tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertEquals(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER, quoteDataBean.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCancelOrder_aLxL0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    OrderDataBean orderDataBean = new OrderDataBean();
    EntityManager entityManager = Mockito.mock(EntityManager.class);
    Mockito.when(entityManager.find(OrderDataBean.class, orderID)).thenReturn(orderDataBean);
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
    Mockito.verify(orderDataBean).cancel();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuote_Xvyw0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuote_Xvyw0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    assertEquals("symbol", quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_UnTh0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_UnTh0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals("symbol", quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_UnTh0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals("companyName", quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_UnTh0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_UnTh0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_UnTh0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getLow());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_UnTh0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getHigh());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_UnTh0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(0, quoteDataBean.getVolume(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_hDVS0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_hDVS0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_hDVS0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_hDVS0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_hDVS0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder_withValidOrderID_andTwoPhaseTrue_jFoD0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.queueOrder(123, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder_withValidOrderID_andTwoPhaseFalse_KeKk1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.queueOrder(456, false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_JJuR0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    AccountDataBean account = AccountDataBean.getRandomInstance();
    profile.setAccount(account);
    account.setProfile(AccountProfileDataBean.getRandomInstance());
    String userID = profile.getUserID();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_JJuR0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    AccountDataBean account = AccountDataBean.getRandomInstance();
    profile.setAccount(account);
    account.setProfile(AccountProfileDataBean.getRandomInstance());
    String userID = profile.getUserID();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertEquals(userID, result.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountProfileData_kICH0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountProfileData_kICH0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("userID", accountProfileDataBean.getUserID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_SynchMode_lfYA0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_SynchMode_lfYA0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertEquals("buy", orderDataBean.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_AsynchMode_bBgK1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_AsynchMode_bBgK1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertEquals("buy", orderDataBean.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_Asynch2PhaseMode_ebUn2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_Asynch2PhaseMode_ebUn2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH_2PHASE);
    assertEquals("buy", orderDataBean.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_HoldingNotFound_kPSu0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", 1, TradeConfig.SYNCH);
    assertEquals("cancelled", orderDataBean.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_SynchMode_PsSM1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    profile.getAccount().setBalance(new BigDecimal(100));
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    holding.getQuote().setPrice(new BigDecimal(10));
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", 1, TradeConfig.SYNCH);
    assertEquals("sell", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_AsynchMode_TRst2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    profile.getAccount().setBalance(new BigDecimal(100));
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    holding.getQuote().setPrice(new BigDecimal(10));
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals("sell", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_Asynch2PhaseMode_bFFR3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    profile.getAccount().setBalance(new BigDecimal(100));
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    holding.getQuote().setPrice(new BigDecimal(10));
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
    assertEquals("sell", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHolding_BAlE0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHolding_BAlE0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(1, holdingDataBean.getHoldingID().intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_GOsg0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("user1");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_EmptyResult_nwZQ1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("unknownUser");
    assertTrue(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertNotNull(order);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertEquals("orderType", order.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertEquals("open", order.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertEquals(new Timestamp(System.currentTimeMillis()), order.getOpenDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertNull(order.getCompletionDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertEquals(BigDecimal.valueOf(50).setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertEquals(TradeConfig.getOrderFee("orderType"), order.getOrderFee());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertEquals(account, order.getAccount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertEquals(quote, order.getQuote());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_QILH0_gBPI0_10() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(50), BigDecimal.valueOf(40), BigDecimal.valueOf(30), BigDecimal.valueOf(20), 10);
    HoldingDataBean holding = new HoldingDataBean(10, BigDecimal.valueOf(50), new java.util.Date(), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10);
    assertEquals(holding, order.getHolding());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvestmentReturn_ExaK0_OGKx0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        double result = 0.0; // Initialize result variable
        assertEquals(0.2, result, 0.01);
    } catch (Exception e) {
        Log.error("testInvestmentReturn_ExaK0", e);
        throw new AssertionError("testInvestmentReturn_ExaK0 - error", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAsync_ugHQ0_SCKe0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    try {
        Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(orderID, twoPhase); // This method does not exist in the provided class
        assertNull(result);
    } catch (Exception e) {
        Log.error("testCompleteOrderAsync_ugHQ0", e);
        throw new AssertionError("testCompleteOrderAsync_ugHQ0 - error", e);
    }
}
@Test
public void testGetClosedOrders_WApr1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "some_user_id";
    try {
        Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders(userID);
        assertNotNull(result);
    } catch (Exception e) {
        Log.error("testGetClosedOrders", e);
        throw new AssertionError("testGetClosedOrders - error", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertNotNull(marketSummaryDataBean.getGainPercent());
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertTrue(marketSummaryDataBean.getVolume() >= 0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_NewAccount_ExbT0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(accountDataBean);
    assertEquals("userID", accountDataBean.getProfileID());
    assertEquals(0, accountDataBean.getLoginCount());
    assertEquals(0, accountDataBean.getLogoutCount());
    assertNotNull(accountDataBean.getCreationDate());
    assertEquals(new BigDecimal(1000), accountDataBean.getOpenBalance());
    assertEquals(new BigDecimal(1000), accountDataBean.getBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_3_tIpf2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ZERO, 10.0);
    assertNotNull(quoteDataBean);
    assertEquals(BigDecimal.ZERO, quoteDataBean.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuote_Xvyw0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean);
    assertEquals("symbol", quoteDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_UnTh0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
    assertEquals("symbol", quoteDataBean.getSymbol());
    assertEquals("companyName", quoteDataBean.getCompanyName());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getOpen());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getLow());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getHigh());
    assertEquals(0, quoteDataBean.getVolume(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_hDVS0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_JJuR0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    AccountDataBean account = AccountDataBean.getRandomInstance();
    profile.setAccount(account);
    account.setProfile(AccountProfileDataBean.getRandomInstance());
    String userID = profile.getUserID();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNotNull(result);
    assertEquals(userID, result.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountProfileData_kICH0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("userID", accountProfileDataBean.getUserID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_SynchMode_lfYA0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);
    assertEquals("buy", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_AsynchMode_bBgK1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
    assertEquals("buy", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_Asynch2PhaseMode_ebUn2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderDataBean);
    assertEquals("buy", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHolding_BAlE0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
    assertEquals(1, holdingDataBean.getHoldingID().intValue());
}
}