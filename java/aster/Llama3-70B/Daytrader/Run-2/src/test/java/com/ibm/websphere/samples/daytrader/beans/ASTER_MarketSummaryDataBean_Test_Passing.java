/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryDataBean_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenTSIA_iJiX0() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("10.0"), new BigDecimal("5.0"), 100.0, topGainers, topLosers);
    assertEquals(new BigDecimal("5.0"), marketSummaryDataBean.getOpenTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withNullTopGainersAndTopLosers_hwsB0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, null, null);
    String result = marketSummaryDataBean.toString();
    assertEquals("\n\tMarket Summary at: " + marketSummaryDataBean.getSummaryDate() + "\n\t\t        TSIA:" + marketSummaryDataBean.getTSIA() + "\n\t\t    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "\n\t\t        gain:" + marketSummaryDataBean.getGainPercent() + "\n\t\t      volume:" + marketSummaryDataBean.getVolume(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_TSIA_XyTN0() {
    MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
    assertNotNull(marketSummaryDataBean.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_TopGainers_YFjZ1() {
    MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertEquals(5, marketSummaryDataBean.getTopGainers().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenTSIA_yywL0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.ZERO, BigDecimal.ZERO, 0, new ArrayList<>(), new ArrayList<>());
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    assertEquals(BigDecimal.ONE, marketSummaryDataBean.getOpenTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTSIA_jAFd0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.ZERO, BigDecimal.ZERO, 0.0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    assertEquals(BigDecimal.ONE, marketSummaryDataBean.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_pzwq0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.ZERO, BigDecimal.ZERO, 0.0, new ArrayList<>(), new ArrayList<>());
    marketSummaryDataBean.setVolume(100.0);
    assertEquals(100.0, marketSummaryDataBean.getVolume(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTopLosers_JFAn0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, new ArrayList<>(), new ArrayList<>());
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    assertEquals(topLosers, marketSummaryDataBean.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTSIA_YEBg0() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("10.0"), new BigDecimal("5.0"), 100.0, topGainers, topLosers);
    assertEquals(new BigDecimal("10.0"), marketSummaryDataBean.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTopGainers_Zbis0() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    topGainers.add(new QuoteDataBean());
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("10.0"), new BigDecimal("10.0"), 10.0, topGainers, new ArrayList<>());
    Collection<QuoteDataBean> result = marketSummaryDataBean.getTopGainers();
    assertEquals(topGainers, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTopLosers_OSHO0() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("10"), new BigDecimal("10"), 10, topGainers, topLosers);
    assertEquals(topLosers, marketSummaryDataBean.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_withNullTopGainersAndTopLosers_rfBW0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, null, null);
    String result = marketSummaryDataBean.toHTML();
    assertEquals("<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTopGainers_JUbx0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, new ArrayList<>(), new ArrayList<>());
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    assertEquals(topGainers, marketSummaryDataBean.getTopGainers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_TopGainers_YFjZ1_1() {
    MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
    assertNotNull(marketSummaryDataBean.getTopGainers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_TopGainers_YFjZ1_2() {
    MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
    assertEquals(5, marketSummaryDataBean.getTopGainers().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withTopGainersAndTopLosers_qpUH2_qpjT0() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean();
    quoteDataBean1.setSymbol("stock1");
    quoteDataBean1.setPrice(BigDecimal.valueOf(10));
    QuoteDataBean quoteDataBean2 = new QuoteDataBean();
    quoteDataBean2.setSymbol("stock2");
    quoteDataBean2.setPrice(BigDecimal.valueOf(20));
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(quoteDataBean1);
    topGainers.add(quoteDataBean2);
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(quoteDataBean2);
    topLosers.add(quoteDataBean1);
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, topGainers, topLosers);
    String result = marketSummaryDataBean.toString();
    assertEquals("\n\tMarket Summary at: " + marketSummaryDataBean.getSummaryDate() + "\n\t\t        TSIA:" + marketSummaryDataBean.getTSIA() + "\n\t\t    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "\n\t\t        gain:" + marketSummaryDataBean.getGainPercent() + "\n\t\t      volume:" + marketSummaryDataBean.getVolume() + "\n\t\t   Current Top Gainers:\n\t\t\t" + quoteDataBean1.toString() + "\n\t\t\t" + quoteDataBean2.toString() + "\n\t\t   Current Top Losers:\n\t\t\t" + quoteDataBean2.toString() + "\n\t\t\t" + quoteDataBean1.toString(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolume_IHqf1_FLAE0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.ZERO, BigDecimal.ZERO, 0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    marketSummaryDataBean.setTopGainers(Arrays.asList(new QuoteDataBean()));
    marketSummaryDataBean.setTopLosers(Arrays.asList(new QuoteDataBean()));
    marketSummaryDataBean.setVolume(1000);
    assertEquals(1000, marketSummaryDataBean.getVolume(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withEmptyTopGainersAndTopLosers_yEix1_fid2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, new ArrayList<>(), new ArrayList<>());
    String result = marketSummaryDataBean.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_withEmptyTopGainersAndTopLosers_CALR1_fid2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(BigDecimal.valueOf(10), BigDecimal.valueOf(5), 100, new ArrayList<>(), new ArrayList<>());
    String result = marketSummaryDataBean.toHTML();
    assertEquals("<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI><BR> Current Top Gainers:<BR>   Current Top Losers:", result);
}
}