/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObject_Test_Failing {
private static String initTime;
private static int hitCount;
PingJSONPObject pingjsonpobject;
ServletConfig servletConfig;
HttpServletRequest httpservletrequest;
HttpServletResponse httpservletresponse;
ServletOutputStream servletoutputstream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingjsonpobject = new PingJSONPObject();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingjsonpobject.doPost(httpservletrequest, httpservletresponse);
        verify(pingjsonpobject).doGet(httpservletrequest, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_GULE0() {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        pingJSONPObject.doPost(req, res);
        verify(req, times(1)).getMethod();
    } catch (ServletException | IOException e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_KgUe0() {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    String result = pingJSONPObject.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_TAhd0() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    pingJSONPObject.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(out).println(anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_GULE0_fid1() {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        // PingJSONPObject does not have a doPost method, it has a doGet method
        // So, we will test the doGet method
        PingJSONPObject pingJSONPObject = new PingJSONPObject();
        pingJSONPObject.doGet(req, res);
        verify(req, times(1)).getMethod();
    } catch (ServletException | IOException e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoGet_dOQk0() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservletrequest = mock(HttpServletRequest.class);
    pingjsonpobject = new PingJSONPObject();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingjsonpobject.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(servletoutputstream).println(anyString());
}
}