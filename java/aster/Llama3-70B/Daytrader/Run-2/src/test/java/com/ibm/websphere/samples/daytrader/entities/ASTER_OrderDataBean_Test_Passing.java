/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import java.math.BigDecimal;
import java.util.Date;
import com.ibm.websphere.samples.daytrader.util.Log;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
OrderDataBean orderdatabean;
AccountDataBean accountDataBean;
QuoteDataBean quoteDataBean;
HoldingDataBean holdingDataBean;
private String symbol = "AAPL";
private OrderDataBean orderDataBean;
private Integer orderID;
Integer mockOrderId;
private BigDecimal price;
@Mock
    AccountDataBean account;
@Mock
    QuoteDataBean quote;
@Mock
    HoldingDataBean holding;
@Mock
    private Log log;
private double quantity = 10.0;
private BigDecimal orderFee;
private String orderType;
OrderDataBean otherOrderdatabean;
OrderDataBean differentOrderdatabean;
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderStatus() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
        String expectedStatus = "status";
        String actualStatus = orderdatabean.getOrderStatus();
        assertEquals(expectedStatus, actualStatus);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderStatus_Ddtc0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), account, quote);
    OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    assertEquals("Open", order.getOrderStatus());
}
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderStatus() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
        String newOrderStatus = "NEW_STATUS";
        orderdatabean.setOrderStatus(newOrderStatus);
        assertEquals(newOrderStatus, orderdatabean.getOrderStatus());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_VCzA0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "pending", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(10.0), "AAPL");
    order.setOrderStatus("completed");
    assertEquals("completed", order.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_QuoteNotNull() throws Exception{
        quote = mock(QuoteDataBean.class);
        symbol = "testSymbol";
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuote(quote);
        orderdatabean.setSymbol(symbol);
        when(quote.getSymbol()).thenReturn("quoteSymbol");
        assertEquals("quoteSymbol", orderdatabean.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_QuoteNull() throws Exception{
        quote = mock(QuoteDataBean.class);
        symbol = "testSymbol";
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuote(quote);
        orderdatabean.setSymbol(symbol);
        orderdatabean.setQuote(null);
        assertEquals(symbol, orderdatabean.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_QuoteNotNull_jzzK0() {
    QuoteDataBean quote = new QuoteDataBean("symbol");
    OrderDataBean order = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 0.0, BigDecimal.ZERO, BigDecimal.ZERO, new AccountDataBean(), quote, new HoldingDataBean());
    assertEquals("symbol", order.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_QuoteNull_qjWN1() {
    OrderDataBean order = new OrderDataBean("orderID", "orderType", "orderStatus", new Date(), new Date(), 0.0, BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
    assertEquals("symbol", order.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderID() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
        oorderID1; // set the orderID for testing
        Integer result = orderdatabean.getOrderID();
        assertNotNull(result);
        assertEquals(1, result.intValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderID_gHxd0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 1.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), quote);
    OrderDataBean order = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), "symbol");
    assertEquals(new Integer(1), order.getOrderID());
}
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_Open() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        assertTrue(orderdatabean.isOpen());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_Processing() throws Exception {
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        assertTrue(orderdatabean.isOpen());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_Closed() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        when(orderdatabean.getOrderStatus()).thenReturn("closed");
        assertFalse(orderdatabean.isOpen());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_Open_VLdZ0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), null, 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_Processing_cuvR1() {
    OrderDataBean order = new OrderDataBean(1, "sell", "processing", new Date(), null, 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_Closed_zcfJ2() {
    OrderDataBean order = new OrderDataBean(1, "buy", "closed", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString() throws Exception {
        when(accountDataBean.toString()).thenReturn("AccountDataBean");
        when(quoteDataBean.toString()).thenReturn("QuoteDataBean");
        when(holdingDataBean.toString()).thenReturn("HoldingDataBean");
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), accountDataBean, quoteDataBean, holdingDataBean);
        String expected = "Order null\n\t      orderType: orderType\n\t    orderStatus: orderStatus\n\t       openDate: " + orderdatabean.getOpenDate() + "\n\t completionDate: " + orderdatabean.getCompletionDate() + "\n\t       quantity: 10.0\n\t          price: 100.0\n\t       orderFee: 10.0\n\t         symbol: " + orderdatabean.getSymbol();
        assertEquals(expected, orderdatabean.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_cHJm0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 10.0, new BigDecimal("10.0"), new Date(), quote);
    OrderDataBean order = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("10.0"), "symbol");
    String expected = "Order 1\n\t      orderType: orderType\n\t    orderStatus: orderStatus\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 10.0\n\t          price: 10.0\n\t       orderFee: 10.0\n\t         symbol: symbol";
    assertEquals(expected, order.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount() throws Exception{
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        assertEquals(account);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccount_HfPg0() {
    OrderDataBean order = new OrderDataBean();
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    order.setAccount(account);
    Assertions.assertEquals(account, order.getAccount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderFee() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(0.0), accountDataBean, quoteDataBean, holdingDataBean);
        orderFee = BigDecimal.valueOf(5.0);
        orderdatabean.setOrderFee(orderFee);
        assertEquals(orderFee, orderdatabean.getOrderFee());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderFee_LqXS0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    BigDecimal orderFee = BigDecimal.valueOf(2.0);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenDate() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        openDate = new Date();
        orderdatabean = new OrderDataBean("orderType", "orderStatus", openDate, new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol", accountDataBean, quoteDataBean, holdingDataBean);
        Date result = orderdatabean.getOpenDate();
        assertEquals(openDate, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenDate_jqXC0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), account, quote);
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), null, 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "symbol", account, quote, holding);
    Date openDate = order.getOpenDate();
    assertNotNull(openDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOpenDate() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol", accountDataBean, quoteDataBean, holdingDataBean);
        Date newOpenDate = new Date();
        orderdatabean.setOpenDate(newOpenDate);
        assertEquals(openDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenDate_nQJu0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    Date openDate = new Date();
    orderDataBean.setOpenDate(openDate);
    assertEquals(openDate, orderDataBean.getOpenDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetHolding() throws Exception{
        holding = mock(HoldingDataBean.class);
        orderdatabean = new OrderDataBean();
        orderdatabean.setHolding(holding);
        assertEquals(holding);
        verify(holding, times(1)).equals(anyObject());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHolding_HfMc0() {
    OrderDataBean order = new OrderDataBean();
    HoldingDataBean holding = new HoldingDataBean(1, 10.0, new BigDecimal("10.0"), new Date(), "quoteID");
    order.setHolding(holding);
    assertSame(holding, order.getHolding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
        Date expectedCompletionDate = orderdatabean.getCompletionDate();
        assertEquals(expectedCompletionDate, orderdatabean.getCompletionDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompletionDate_BhNs0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("100.0"), new Date(), quote);
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), account, quote, holding);
    Date completionDate = order.getCompletionDate();
    assertNotNull(completionDate);
}
    private String orderType; /* orderType (buy, sell, etc.) */
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_1() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_2() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOrderID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_3() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_4() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_5() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOpenDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_6() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getCompletionDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_7() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertTrue(orderdatabean.getQuantity() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_8() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_9() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOrderFee());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_10() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_1() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_2() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_3() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_4() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_5() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOpenDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_6() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getCompletionDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_7() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertTrue(order.getQuantity() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_8() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_9() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderFee());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0_10() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance2_pChg1() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), account, quote);
    OrderDataBean order2 = new OrderDataBean("buy", "open", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), account, quote, holding);
    assertNotEquals(order, order2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSymbol_NrVm0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol("AAPL");
    assertEquals("AAPL", orderDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_njxN0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
    int result = orderDataBean.hashCode();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_vYDf1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    int result = orderDataBean.hashCode();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrice() throws Exception{
        account = Mockito.mock(AccountDataBean.class);
        quote = Mockito.mock(QuoteDataBean.class);
        holding = Mockito.mock(HoldingDataBean.class);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), account, quote, holding);
        price = BigDecimal.valueOf(100.0);
        assertEquals(price, orderdatabean.getPrice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHolding_SMeI0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 1.0);
    HoldingDataBean holding = new HoldingDataBean(1, 10.0, new BigDecimal("10.0"), new Date(), "quoteID");
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    HoldingDataBean result = order.getHolding();
    assertEquals(holding, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcancel() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
        orderdatabean.cancel();
        assertEquals("cancelled", orderdatabean.getOrderStatus());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCancel_rCee0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(5.0), "AAPL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderID() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
        Integer newOrderID = 123;
        orderdatabean.setOrderID(newOrderID);
        assertEquals(newOrderID, orderdatabean.getOrderID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderID_gIHr0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Integer orderID = 1;
    orderDataBean.setOrderID(orderID);
    assertEquals(orderID, orderDataBean.getOrderID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(quantity, BigDecimal.valueOf(10), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), quantity, BigDecimal.valueOf(10), BigDecimal.valueOf(1), accountDataBean, quoteDataBean, holdingDataBean);
        assertEquals(quantity, orderdatabean.getQuantity(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderFee() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), accountDataBean, quoteDataBean, holdingDataBean);
        BigDecimal result = orderdatabean.getOrderFee();
        assertEquals(BigDecimal.valueOf(5.0), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderType() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
        String newOrderType = "newOrderType";
        orderdatabean.setOrderType(newOrderType);
        assertEquals(newOrderType, orderdatabean.getOrderType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderType_jvpX0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("Buy");
    assertEquals("Buy", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() throws Exception {
        quote = mock(QuoteDataBean.class);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), null, quote, null);
        QuoteDataBean result = orderdatabean.getQuote();
        assertEquals(quote, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuote_sLtd0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 1.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("10.0"), new Date(), account, quote);
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    QuoteDataBean result = order.getQuote();
    assertEquals(quote, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPrice_lUwt0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    BigDecimal price = BigDecimal.valueOf(20.0);
    orderDataBean.setPrice(price);
    assertEquals(price, orderDataBean.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_1() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(10.0), new Date(), "quoteID");
        orderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        otherOrderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        differentOrderdatabean = new OrderDataBean(2, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        // Same object
        // Same values
        // Different values
        // Different class
        // Null
        assertTrue(orderdatabean.equals(orderdatabean));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_2() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(10.0), new Date(), "quoteID");
        orderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        otherOrderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        differentOrderdatabean = new OrderDataBean(2, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        // Same object
        // Same values
        // Different values
        // Different class
        // Null
        assertTrue(orderdatabean.equals(otherOrderdatabean));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_3() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(10.0), new Date(), "quoteID");
        orderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        otherOrderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        differentOrderdatabean = new OrderDataBean(2, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        // Same object
        // Same values
        // Different values
        // Different class
        // Null
        assertFalse(orderdatabean.equals(differentOrderdatabean));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_4() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(10.0), new Date(), "quoteID");
        orderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        otherOrderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        differentOrderdatabean = new OrderDataBean(2, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        // Same object
        // Same values
        // Different values
        // Different class
        // Null
        assertFalse(orderdatabean.equals(accountDataBean));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_5() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(10.0), new Date(), "quoteID");
        orderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        otherOrderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        differentOrderdatabean = new OrderDataBean(2, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        // Same object
        // Same values
        // Different values
        // Different class
        // Null
        assertFalse(orderdatabean.equals(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_ZHuw0() {
    OrderDataBean order = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertTrue(order.equals(order));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_BkyH1() {
    Object obj = new Object();
    OrderDataBean order = new OrderDataBean();
    assertFalse(order.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_mrnM2() {
    OrderDataBean order1 = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    OrderDataBean order2 = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertTrue(order1.equals(order2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentOrderID_Cnve3() {
    OrderDataBean order1 = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    OrderDataBean order2 = new OrderDataBean(2, "type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertFalse(order1.equals(order2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullOrderID_mdcz4() {
    OrderDataBean order1 = new OrderDataBean(null, "type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    OrderDataBean order2 = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    assertFalse(order1.equals(order2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisSell() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderType()).thenReturn("sell");
        assertFalse(orderdatabean.isSell());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisNotSell() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderType()).thenReturn("sell");
        when(orderdatabean.getOrderType()).thenReturn("buy");
        assertFalse(orderdatabean.isSell());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSell_true_VZGb0() {
    OrderDataBean order = new OrderDataBean(1, "sell", "open", new Date(), null, 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(5.0), "ABC");
    assertTrue(order.isSell());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSell_false_kYGx1() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), null, 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(5.0), "ABC");
    assertFalse(order.isSell());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderType() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = new OrderDataBean("buy", "open", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(5.0), accountDataBean, quoteDataBean, holdingDataBean);
        assertEquals("buy", orderdatabean.getOrderType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted_completed() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        assertFalse(orderdatabean.isCompleted());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted_alertcompleted() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderStatus()).thenReturn("alertcompleted");
        assertFalse(orderdatabean.isCompleted());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted_cancelled() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
        assertFalse(orderdatabean.isCompleted());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted_notCompleted() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderStatus()).thenReturn("pending");
        assertFalse(orderdatabean.isCompleted());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompleted_completed_tuJQ0() {
    OrderDataBean order = new OrderDataBean(1, "market", "completed", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCompleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompleted_alertcompleted_xcjm1() {
    OrderDataBean order = new OrderDataBean(1, "market", "alertcompleted", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCompleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompleted_cancelled_RFyT2() {
    OrderDataBean order = new OrderDataBean(1, "market", "cancelled", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isCompleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompleted_pending_lllZ3() {
    OrderDataBean order = new OrderDataBean(1, "market", "pending", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isCompleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuote_facj0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 10.0);
    orderDataBean.setQuote(quoteDataBean);
    assertSame(quoteDataBean, orderDataBean.getQuote());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuantity_DhoJ0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    orderDataBean.setQuantity(20.0);
    assertEquals(20.0, orderDataBean.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisBuy() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderType()).thenReturn("buy"); // setup orderType to "buy"
        assertFalse(orderdatabean.isBuy()); // assert isBuy returns true when orderType is "buy"
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisNotBuy() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderType()).thenReturn("buy"); // setup orderType to "buy"
        when(orderdatabean.getOrderType()).thenReturn("sell"); // setup orderType to "sell"
        assertFalse(orderdatabean.isBuy()); // assert isBuy returns false when orderType is not "buy"
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBuyTrue_GlPH0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), null, 10.0, new BigDecimal(100.0), new BigDecimal(10.0), "symbol");
    assertTrue(order.isBuy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBuyFalse_Rqib1() {
    OrderDataBean order = new OrderDataBean(1, "sell", "open", new Date(), null, 10.0, new BigDecimal(100.0), new BigDecimal(10.0), "symbol");
    assertFalse(order.isBuy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompletionDate_MkPb0() {
    OrderDataBean order = new OrderDataBean(1, "type", "status", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "symbol");
    Date date = new Date();
    order.setCompletionDate(date);
    assertEquals(date, order.getCompletionDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccount() throws Exception {
        account = mock(AccountDataBean.class);
        orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), account, null, null);
        AccountDataBean result = orderdatabean.getAccount();
        assertEquals(account, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCancelled() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
        assertFalse(orderdatabean.isCancelled());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisNotCancelled() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
        when(orderdatabean.getOrderStatus()).thenReturn("pending");
        assertFalse(orderdatabean.isCancelled());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCancelledTrue_qVpQ0() {
    OrderDataBean order = new OrderDataBean(1, "sell", "cancelled", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "ABC");
    assertTrue(order.isCancelled());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCancelledFalse_QdaU1() {
    OrderDataBean order = new OrderDataBean(1, "sell", "pending", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "ABC");
    assertFalse(order.isCancelled());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCancelled_VCzA0_NCAv0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "cancelled", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(10.0), "AAPL");
    boolean result = order.isCancelled();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_QuoteNotNull_jzzK0_VPOI0() {
    QuoteDataBean quote = new QuoteDataBean("symbol");
    AccountDataBean account = new AccountDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    OrderDataBean order = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 0.0, BigDecimal.ZERO, BigDecimal.ZERO, account, quote, holding);
    assert "symbol".equals(order.getQuote().getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCancelled_EUte0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 1.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), "symbol");
    OrderDataBean order = new OrderDataBean("sell", "cancelled", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), account, quote, holding);
    assertTrue(order.isCancelled());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_Open_VLdZ0_joja0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), null, 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isCancelled());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_Closed_zcfJ2_RCOR0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "closed", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isCancelled());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_qHCL0() throws Exception {
    AccountDataBean accountDataBean = new AccountDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    OrderDataBean orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), accountDataBean, quoteDataBean, holdingDataBean);
    orderdatabean.setOrderID(null);
    orderdatabean.setSymbol(null);
    String expected = "Order null\n\t      orderType: orderType\n\t    orderStatus: orderStatus\n\t       openDate: " + orderdatabean.getOpenDate() + "\n\t completionDate: " + orderdatabean.getCompletionDate() + "\n\t       quantity: 10.0\n\t          price: 100.0\n\t       orderFee: 10.0\n\t         symbol: null";
    assertEquals(expected, orderdatabean.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetOrderFee_TQCP0() throws Exception{
    AccountDataBean accountDataBean = new AccountDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    OrderDataBean orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(0.0), accountDataBean, quoteDataBean, holdingDataBean);
    BigDecimal orderFee = BigDecimal.valueOf(5.0);
    orderdatabean.setOrderFee(orderFee); 
    assertEquals(orderFee, orderdatabean.getOrderFee()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCancelled_Jtpq0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), "quoteID");
    OrderDataBean order = new OrderDataBean("buy", "cancelled", new Date(), null, 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    boolean result = order.isCancelled();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCancelled_QOuj0() throws Exception{
    AccountDataBean accountDataBean = new AccountDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "", 0.0, BigDecimal.valueOf(0.0), BigDecimal.valueOf(0.0), BigDecimal.valueOf(0.0), BigDecimal.valueOf(0.0), 0.0);
    HoldingDataBean holdingDataBean = new HoldingDataBean(0, 1.0, BigDecimal.valueOf(10.0), new java.util.Date(), "quoteID");
    OrderDataBean orderdatabean = new OrderDataBean("orderType", "cancelled", new java.util.Date(), new java.util.Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    assertTrue(orderdatabean.isCancelled());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetQuantity_HklX0() throws Exception{
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean();
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 0.0, BigDecimal.ZERO, BigDecimal.ZERO, accountDataBean, quoteDataBean, holdingDataBean);
    double newQuantity = 10.0;
    orderdatabean.setQuantity(newQuantity);
    assertEquals(newQuantity, orderdatabean.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetSymbol_LlIJ0() throws Exception {
    accountDataBean = mock(AccountDataBean.class);
    quoteDataBean = mock(QuoteDataBean.class);
    holdingDataBean = mock(HoldingDataBean.class);
    String symbol = "TEST_SYMBOL";
    orderDataBean = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(5.0), accountDataBean, quoteDataBean, holdingDataBean);
    orderDataBean.setSymbol(symbol);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_Uomh0_Mwfy0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("100.0"), new Date(), quote.getSymbol());
    OrderDataBean order = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol");
    String html = order.toHTML();
    assertEquals("<BR>Order <B>1</B>" + "<LI>      orderType: orderType</LI>" + "<LI>    orderStatus: orderStatus</LI>" + "<LI>       openDate: " + order.getOpenDate() + "</LI>" + "<LI> completionDate: " + order.getCompletionDate() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 100.0</LI>" + "<LI>       orderFee: 10.0</LI>" + "<LI>         symbol: symbol</LI>", html);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuantity_laVl0_LRxQ0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 10.0, new BigDecimal("10.0"), new Date(), quote.getSymbol());
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    assertEquals(10.0, order.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderFee_mpyf0_RulK0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal("10.0"), new Date(), quote.getSymbol());
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    assertEquals(new BigDecimal("1.0"), order.getOrderFee());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPrice_Zlyg0() throws Exception{
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    BigDecimal newPrice = BigDecimal.valueOf(20.0);
    orderdatabean.setPrice(newPrice);
    assertEquals(newPrice, orderdatabean.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderType_hUgo0_tKWP0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0);
    HoldingDataBean holding = new HoldingDataBean(1, 10.0, new BigDecimal("10.0"), new Date(), quote.getSymbol());
    OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("1.0"), account, quote, holding);
    assertEquals("Buy", order.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetCompletionDate_cUYa0() throws Exception{
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean("symbol");
    holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(10.0), new Date(), accountDataBean, quoteDataBean);
    orderdatabean = new OrderDataBean("orderType", "orderStatus", new Date(), null, 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), accountDataBean, quoteDataBean, holdingDataBean);
    Date newCompletionDate = new Date();
    orderdatabean.setCompletionDate(newCompletionDate);
    assertEquals(newCompletionDate, orderdatabean.getCompletionDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_ZuKI0() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order);
    assertNotNull(order.getOrderID());
    assertNotNull(order.getOrderType());
    assertNotNull(order.getOrderStatus());
    assertNotNull(order.getOpenDate());
    assertNotNull(order.getCompletionDate());
    assertTrue(order.getQuantity() > 0);
    assertNotNull(order.getPrice());
    assertNotNull(order.getOrderFee());
    assertNotNull(order.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception{
        accountDataBean = new AccountDataBean();
        quoteDataBean = new QuoteDataBean("symbol");
        holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(10.0), new Date(), "quoteID");
        orderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        otherOrderdatabean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        differentOrderdatabean = new OrderDataBean(2, "orderType", "orderStatus", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        // Same object
        assertTrue(orderdatabean.equals(orderdatabean));
        // Same values
        assertTrue(orderdatabean.equals(otherOrderdatabean));
        // Different values
        assertFalse(orderdatabean.equals(differentOrderdatabean));
        // Different class
        assertFalse(orderdatabean.equals(accountDataBean));
        // Null
        assertFalse(orderdatabean.equals(null));
    }
}