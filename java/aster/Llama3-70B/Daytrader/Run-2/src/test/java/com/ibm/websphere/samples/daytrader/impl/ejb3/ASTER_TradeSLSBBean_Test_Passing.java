/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import java.math.BigDecimal;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
@Mock
    private EntityManager entityManager;
private TradeSLSBBean tradeslsbbean;
@Mock
    private AccountProfileDataBean profile;
@Mock
    private AccountDataBean account;
@Mock
    private QuoteDataBean quote;
@Mock
    private HoldingDataBean holding;
@Mock
    private OrderDataBean order;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChangeNullQuote_PDHk1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.publishQuotePriceChange(null, BigDecimal.valueOf(5.0), BigDecimal.valueOf(2.0), 100.0);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChangeNullOldPrice_KmBW2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    try {
        tradeSLSBBean.publishQuotePriceChange(quoteDataBean, null, BigDecimal.valueOf(2.0), 100.0);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChangeNullChangeFactor_GbuC3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.publishQuotePriceChange(null, BigDecimal.valueOf(5.0), null, 100.0);
        fail("Expected NullPointerException or EJBException");
    } catch (NullPointerException | EJBException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    assertNotNull(tradeSLSBBean);
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    } catch (NullPointerException e) {
        // handle the exception
    }
    assertNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_RMJK0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    assertNotNull(tradeSLSBBean);
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    } catch (NullPointerException e) {
        // Ignore
    }
    assertNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInSession_VzxV0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.setInSession(true);
        Assertions.fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
        Assertions.assertEquals("TradeSLSBBean::setInGlobalTxn not supported", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_1_rcQH0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_2_Dhep1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_2_Dhep1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertEquals(new QuoteDataBean(), quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_3_tIpf2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ZERO, 10.0);
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrderCompleted_WEfw0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.orderCompleted("user1", 1);
        Assertions.fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
        Assertions.assertEquals("TradeSLSBBean:orderCompleted method not supported", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImpl_DZtl0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    int result = tradeSLSBBean.getImpl();
    assertEquals(TradeConfig.EJB3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_Oboy0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.getClosedOrders("userID");
    } catch (EJBException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_AlreadyCompletedOrder_xZEz3_DEPr0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.getClosedOrders("userID"); // call the method under test
        fail("Expected EJBException");
    } catch (EJBException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhaseNullSymbol_swKu1_IvTE0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        QuoteDataBean quoteDataBean = tradeSLSBBean.pingTwoPhase(null);
        assertNull(quoteDataBean);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_2_Dhep1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);
    assertEquals(new QuoteDataBean(), quoteDataBean);
}
}