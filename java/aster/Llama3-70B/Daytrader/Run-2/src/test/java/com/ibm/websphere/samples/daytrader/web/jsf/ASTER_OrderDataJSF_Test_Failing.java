/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import java.util.ArrayList;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataJSF_Test_Failing {
private TradeServices tradeAction;
private ExternalContext context;
OrderDataJSF orderdatajsf;
HttpSession httpsession;
ExternalContext externalcontext;
String userID = "testUser";
ArrayList<OrderDataBean> orderDataBeans = new ArrayList<>();
OrderDataBean orderDataBean;
private OrderData orderData;
Instance<TradeServices> tradeServicesInstance;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrder_orderDataIsNull() throws Exception {
    httpsession = mock(HttpSession.class);
    externalcontext = mock(ExternalContext.class);
    tradeServicesInstance = mock(Instance.class);
    orderdatajsf = new OrderDataJSF(tradeServicesInstance);
    when(externalcontext.getSession(any())).thenReturn(httpsession);
    // when
    orderdatajsf.getOrder();
    // then
    assertNull(orderData);
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllOrders_BRvw0() {
    Instance<TradeServices> services = mock(Instance.class);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    OrderData[] result = orderDataJSF.getAllOrders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAllOrders_HaLC0() {
    Instance<TradeServices> services = mock(Instance.class);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    OrderData[] allOrders = new OrderData[1];
    orderDataJSF.setAllOrders(allOrders);
    assertArrayEquals(allOrders, orderDataJSF.getAllOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllOrders_BRvw0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    OrderData[] result = orderDataJSF.getAllOrders();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAllOrders_HaLC0_fid1() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    OrderData[] allOrders = new OrderData[1];
    orderDataJSF.setAllOrders(allOrders);
    assertNotNull(orderDataJSF.getAllOrders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderData_PSxn0_agDr0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    java.util.Date openDate = new java.util.Date();
    java.util.Date completeDate = new java.util.Date();
    OrderData orderData = new OrderData(1, "status", openDate, completeDate, BigDecimal.valueOf(10), "type", 10.0, "symbol");
    orderDataJSF.setOrderData(orderData);
    assertSame(orderData, orderDataJSF.getOrderData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderData_PSxn0_agDr0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    java.util.Date openDate = new java.util.Date();
    java.util.Date completeDate = new java.util.Date();
    OrderData orderData = new OrderData(1, "status", openDate, completeDate, BigDecimal.valueOf(10), "type", 10.0, "symbol");
    orderDataJSF.setOrderData(orderData);
    assertEquals(orderData, orderDataJSF.getOrderData());
}
}