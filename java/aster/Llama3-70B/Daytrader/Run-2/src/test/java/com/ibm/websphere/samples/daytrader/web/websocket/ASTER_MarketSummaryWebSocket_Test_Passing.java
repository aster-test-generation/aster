/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;
import javax.enterprise.inject.Instance;
import javax.websocket.Session;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryWebSocket_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSendMarketSummary_latchAwaitException_BIbv5() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    ActionMessage actionMessage = new ActionMessage();
    actionMessage.doDecoding("{\"action\":\"updateMarketSummary\"}");
    Session currentSession = mock(Session.class);
    marketSummaryWebSocket.sendMarketSummary(actionMessage, currentSession);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOnMarketSummarytUpdate_SessionOpen_TFLn0_aZHu0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> instance = mock(Instance.class);
    when(instance.get()).thenReturn(tradeServices);
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket(instance);
    Session session = mock(Session.class);
    when(session.isOpen()).thenReturn(true);
    marketSummaryWebSocket.onOpen(session, null);
    String event = "event";
    marketSummaryWebSocket.onMarketSummarytUpdate(event);
    verify(session.getAsyncRemote()).sendText(anyString());
}
}