/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ShortSignature_False_KfbU0() {
    byte[] signature = new byte[3];
    int length = 3;
    assertFalse(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ZstandardFrame_False_vhGe1() {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0x28;
    signature[1] = (byte) 0xB5;
    signature[2] = (byte) 0x2F;
    signature[3] = (byte) 0x4E;
    int length = 4;
    assertFalse(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ZstandardFrame_True_CSWh2() {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0x28;
    signature[1] = (byte) 0xB5;
    signature[2] = (byte) 0x2F;
    signature[3] = (byte) 0x4E;
    int length = 4;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_SkippableFrame_False_prEQ3() {
    byte[] signature = new byte[5];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x2A;
    signature[2] = (byte) 0xB5;
    signature[3] = (byte) 0x2F;
    signature[4] = (byte) 0x4E;
    int length = 5;
    assertFalse(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_SkippableFrame_True_rnLX4() {
    byte[] signature = new byte[5];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x2A;
    signature[2] = (byte) 0xB5;
    signature[3] = (byte) 0x2F;
    signature[4] = (byte) 0x4E;
    int length = 5;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_NullSignature_False_xXHc5() {
    byte[] signature = null;
    int length = 4;
    try {
        ZstdUtils.matches(signature, length);
        fail("Expected NullPointerException to be thrown");
    } catch (NullPointerException e) {
        // pass
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ZeroLength_False_ZjQs6() {
    byte[] signature = new byte[4];
    int length = 0;
    assertFalse(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_NegativeLength_False_ugyw7() {
    byte[] signature = new byte[4];
    int length = -1;
    assertFalse(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_jabD0() {
    byte[] signature = new byte[]{(byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD};
    int length = 4;
    assertTrue(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nJtn0_1() {
    assertTrue(ZstdUtils.matches(new byte[]{(byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD}, 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nJtn0_2() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nJtn0_3() {
    assertFalse(ZstdUtils.matches(new byte[]{(byte) 0x28, (byte) 0xB6, (byte) 0x2F, (byte) 0xFD}, 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nJtn0_4() {
    assertFalse(ZstdUtils.matches(new byte[]{(byte) 0x51, (byte) 0x2A, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD}, 5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Rqbc0_3() {
    assertFalse(ZstdUtils.matches(new byte[]{(byte) 0x28, (byte) 0xB5, (byte) 0x2F}, 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Rqbc0_4() {
    assertFalse(ZstdUtils.matches(new byte[]{(byte) 0x50, (byte) 0x2A, (byte) 0xB5, (byte) 0x2F}, 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_fFBf0() {
    byte[] signature = new byte[]{(byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD};
    int length = 4;
    boolean result = ZstdUtils.matches(signature, length);
    assertTrue(result);
}
}