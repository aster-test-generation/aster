/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_EmptyPool_wmKO1_mtwC0() {
    ClassConstantPool pool = new ClassConstantPool();
    int localVariableTypeTableLength = 0;
    int[] startPcs = new int[0];
    int[] lengths = new int[0];
    CPUTF8[] names = new CPUTF8[0];
    CPUTF8[] signatures = new CPUTF8[0];
    int[] indexes = new int[0];
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    attribute.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody1_WTKi0_vWNS0() throws IOException {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(2, new int[]{1, 2}, new int[]{3, 4}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("signature1"), new CPUTF8("signature2")}, new int[]{5, 6});
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    attribute.writeBody(dos);
    byte[] bytes = bos.toByteArray();
    assertArrayEquals(new byte[]{0, 2, 0, 1, 0, 3, 0, 0, 0, 5, 0, 2, 0, 4, 0, 1, 0, 6}, bytes);
}
}