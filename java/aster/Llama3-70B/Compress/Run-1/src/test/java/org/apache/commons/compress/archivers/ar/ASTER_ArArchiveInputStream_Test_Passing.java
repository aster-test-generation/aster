/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches1_BABg0() {
    byte[] signature = new byte[8];
    signature[0] = 0x21;
    signature[1] = 0x3c;
    signature[2] = 0x61;
    signature[3] = 0x72;
    signature[4] = 0x63;
    signature[5] = 0x68;
    signature[6] = 0x3e;
    signature[7] = 0x0a;
    assertTrue(ArArchiveInputStream.matches(signature, 8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches2_PPLe1() {
    byte[] signature = new byte[7];
    signature[0] = 0x21;
    signature[1] = 0x3c;
    signature[2] = 0x61;
    signature[3] = 0x72;
    signature[4] = 0x63;
    signature[5] = 0x68;
    signature[6] = 0x3e;
    assertFalse(ArArchiveInputStream.matches(signature, 7));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches3_WsPa2() {
    byte[] signature = new byte[8];
    signature[0] = 0x20;
    signature[1] = 0x3c;
    signature[2] = 0x61;
    signature[3] = 0x72;
    signature[4] = 0x63;
    signature[5] = 0x68;
    signature[6] = 0x3e;
    signature[7] = 0x0a;
    assertFalse(ArArchiveInputStream.matches(signature, 8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches4_cPKC3() {
    byte[] signature = new byte[8];
    signature[0] = 0x21;
    signature[1] = 0x2c;
    signature[2] = 0x61;
    signature[3] = 0x72;
    signature[4] = 0x63;
    signature[5] = 0x68;
    signature[6] = 0x3e;
    signature[7] = 0x0a;
    assertFalse(ArArchiveInputStream.matches(signature, 8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches5_OHwm4() {
    byte[] signature = new byte[8];
    signature[0] = 0x21;
    signature[1] = 0x3c;
    signature[2] = 0x60;
    signature[3] = 0x72;
    signature[4] = 0x63;
    signature[5] = 0x68;
    signature[6] = 0x3e;
    signature[7] = 0x0a;
    assertFalse(ArArchiveInputStream.matches(signature, 8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches6_Wnwt5() {
    byte[] signature = new byte[8];
    signature[0] = 0x21;
    signature[1] = 0x3c;
    signature[2] = 0x61;
    signature[3] = 0x70;
    signature[4] = 0x63;
    signature[5] = 0x68;
    signature[6] = 0x3e;
    signature[7] = 0x0a;
    assertFalse(ArArchiveInputStream.matches(signature, 8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches7_TXWH6() {
    byte[] signature = new byte[8];
    signature[0] = 0x21;
    signature[1] = 0x3c;
    signature[2] = 0x61;
    signature[3] = 0x72;
    signature[4] = 0x62;
    signature[5] = 0x68;
    signature[6] = 0x3e;
    signature[7] = 0x0a;
    assertFalse(ArArchiveInputStream.matches(signature, 8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches8_LzPp7() {
    byte[] signature = new byte[8];
    signature[0] = 0x21;
    signature[1] = 0x3c;
    signature[2] = 0x61;
    signature[3] = 0x72;
    signature[4] = 0x63;
    signature[5] = 0x67;
    signature[6] = 0x3e;
    signature[7] = 0x0a;
    assertFalse(ArArchiveInputStream.matches(signature, 8));
}
}