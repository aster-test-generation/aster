/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZMethod_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_LZMA_Raow1() {
    SevenZMethod sevenZMethod = SevenZMethod.LZMA;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {(byte) 'L', (byte) 'Z', (byte) 'M', (byte) 'A'}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BZIP2_VRNG5() {
    SevenZMethod sevenZMethod = SevenZMethod.BZIP2;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {66, 90, 104}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_AES256SHA256_zzfk6() {
    SevenZMethod sevenZMethod = SevenZMethod.AES256SHA256;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {65, 69, 83, 50, 53, 54, 83, 72, 65, 50, 53, 54}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_X86_FILTER_nEXc7() {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_X86_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {66, 67, 74, 88}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_IA64_FILTER_jwnI9() {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_IA64_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] { 7, 0, 0, 4 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_SPARC_FILTER_LgZQ12() {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_SPARC_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] { 11, 0, 0, 0 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_DELTA_FILTER_NkuJ13() {
    SevenZMethod sevenZMethod = SevenZMethod.DELTA_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {7}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_COPY_Ormo0_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.COPY;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_LZMA_Raow1_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.LZMA;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_LZMA2_kSuO2_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.LZMA2;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_DEFLATE_XeTZ3_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.DEFLATE;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_DEFLATE64_Spvm4_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.DEFLATE64;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BZIP2_VRNG5_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.BZIP2;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_AES256SHA256_zzfk6_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.AES256SHA256;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_X86_FILTER_nEXc7_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_X86_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_PPC_FILTER_qova8_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_PPC_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_IA64_FILTER_jwnI9_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_IA64_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_ARM_FILTER_mmoJ10_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_ARM_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_ARM_THUMB_FILTER_uMVB11_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_ARM_THUMB_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_SPARC_FILTER_LgZQ12_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_SPARC_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_DELTA_FILTER_NkuJ13_fid1() {
    SevenZMethod sevenZMethod = SevenZMethod.DELTA_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(new byte[] {}, result);
}
}