/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_BCnm0_bWVy0() throws IOException {
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    ZstdCompressorInputStream zcis = new ZstdCompressorInputStream(in);
    zcis.close(); // need to close the stream
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_kurS0_vULP0() throws IOException {
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    ZstdCompressorInputStream zstdCompressorInputStream = new ZstdCompressorInputStream(in);
    byte[] b = new byte[10];
    int result = zstdCompressorInputStream.read(b);
    assertEquals(-1, result);
    zstdCompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_ReturnsMinusOne_EtrR0_GGFE0() throws IOException {
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    ZstdCompressorInputStream zis = new ZstdCompressorInputStream(in);
    int result = zis.read();
    assertEquals(-1, result);
    zis.close(); 
}
}