/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_Ddxg0() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 10);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_RZfY1() {
    Object obj = new Object();
    ArArchiveEntry entry = new ArArchiveEntry("name", 10);
    assertFalse(entry.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_BLdK2() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 10);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_grZM3() {
    ArArchiveEntry entry1 = new ArArchiveEntry("name", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("name", 20);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_rWbz4() {
    ArArchiveEntry entry1 = new ArArchiveEntry("name1", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("name2", 20);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullName_LyWZ5() {
    ArArchiveEntry entry1 = new ArArchiveEntry(null, 10);
    ArArchiveEntry entry2 = new ArArchiveEntry(null, 20);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory1_iGhB0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10L);
    assertFalse(arArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory3_cTSR2() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10L, 1, 2, 3, 4L);
    assertFalse(arArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory4_Yidj3() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry(new File("file"), "entryName");
    assertFalse(arArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_Rsgm0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 100, 1, 1, 1, 1000);
    long lastModifiedDate = arArchiveEntry.getLastModified();
    assertEquals(1000, lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_yahE0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10L, 1, 2, 3, 4L);
    assertEquals(2, arArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize1_bKJV0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10);
    assertEquals(10, arArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize3_avLR2() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10, 1, 2, 3, 4);
    assertEquals(10, arArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize4_GGBd3() {
    File inputFile = new File("file");
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry(inputFile, "entryName");
    assertEquals(arArchiveEntry.getLength(), arArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_ZfIS0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10L, 1, 2, 3, 4L);
    assertEquals(1, arArchiveEntry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_tewd0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10);
    int result = arArchiveEntry.hashCode();
    assertEquals(Objects.hash("name"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_3_CnWG2() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10, 1, 2, 3, 4);
    int result = arArchiveEntry.hashCode();
    assertEquals(Objects.hash("name"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_4_YaJX3() {
    File inputFile = new File("file");
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry(inputFile, "entryName");
    int result = arArchiveEntry.hashCode();
    assertEquals(Objects.hash("entryName"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_gGwH0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("testName", 10);
    assertEquals("testName", arArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName3_TgTz2() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("testName", 10, 1, 1, 1, 1);
    assertEquals("testName", arArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName4_iGGH3() {
    File inputFile = new File("testFile");
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry(inputFile, "testEntryName");
    assertEquals("testEntryName", arArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_dhsu0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10L, 1, 1, 0644, 1000L);
    assertEquals(0644, arArchiveEntry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength1_vwGO0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10);
    assertEquals(10, arArchiveEntry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength3_awrR2() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10, 1, 2, 3, 4);
    assertEquals(10, arArchiveEntry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength4_kBOq3() {
    File inputFile = new File("file");
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry(inputFile, "entryName");
    assertEquals(0, arArchiveEntry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified_MZyn0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 100, 1, 1, 1, 1000);
    assertEquals(1000, arArchiveEntry.getLastModified());
}
}