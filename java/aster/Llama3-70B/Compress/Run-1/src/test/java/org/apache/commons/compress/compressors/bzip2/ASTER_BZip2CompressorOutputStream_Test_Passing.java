/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;
import java.io.IOException;
import java.io.OutputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BZip2CompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testChooseBlockSize_withPositiveInputLength_RnJa0() {
    int result = BZip2CompressorOutputStream.chooseBlockSize(264000);
    assertEquals(3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testChooseBlockSize_withZeroInputLength_Ctgo1() {
    int result = BZip2CompressorOutputStream.chooseBlockSize(0);
    assertEquals(BZip2CompressorOutputStream.MAX_BLOCKSIZE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlush_withNullOutputStream_msfO1() throws IOException {
    try {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(null);
        compressorOutputStream.flush();
        fail("Expected NullPointerException to be thrown");
    } catch (NullPointerException e) {
        assertTrue(true); // exception thrown as expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_WithNullOutputStream_Ovin2() throws IOException {
    try {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(null);
        compressor.close();
    } catch (NullPointerException e) {
        // Expected
    } catch (IOException e) {
        fail("Expected NullPointerException, but got IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_WriteRun_CallsWriteRun_umSr5_mvYc0() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    BZip2CompressorOutputStream out = new BZip2CompressorOutputStream(bos, 1);
    byte[] buf = new byte[] { 1, 1, 1, 1, 1 };
    out.write(buf, 0, 5);
    out.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_qaUN0_kGzd0() throws IOException {
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    BZip2CompressorOutputStream bZip2CompressorOutputStream = new BZip2CompressorOutputStream(out, 1);
    bZip2CompressorOutputStream.write(1);
    bZip2CompressorOutputStream.close();
    assertEquals(37, ((java.io.ByteArrayOutputStream) out).size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_Closed_cMvI1_DJsN0() throws IOException {
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    BZip2CompressorOutputStream bZip2CompressorOutputStream = new BZip2CompressorOutputStream(out);
    bZip2CompressorOutputStream.close();
    try {
        bZip2CompressorOutputStream.write(new byte[]{10});
        fail();
    } catch (IOException e) {
        assertEquals("Stream closed", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_Normal_yPAi0_Loac0() throws IOException {
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    BZip2CompressorOutputStream bZip2CompressorOutputStream = new BZip2CompressorOutputStream(out, 9);
    bZip2CompressorOutputStream.write(10);
    bZip2CompressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_Normal_SrPF0_Magt0() throws IOException {
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    BZip2CompressorOutputStream bZip2CompressorOutputStream = new BZip2CompressorOutputStream(out);
    bZip2CompressorOutputStream.write(10);
    bZip2CompressorOutputStream.close();
    assertTrue(((java.io.ByteArrayOutputStream) out).size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_Closed_aAni1_Ebbk0() throws IOException {
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    BZip2CompressorOutputStream bZip2CompressorOutputStream = new BZip2CompressorOutputStream(out);
    bZip2CompressorOutputStream.close();
    try {
        bZip2CompressorOutputStream.write(new byte[]{10});
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Stream closed", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_Normal_vWGB0_YCUr0() throws IOException {
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    BZip2CompressorOutputStream bZip2CompressorOutputStream = new BZip2CompressorOutputStream(out);
    bZip2CompressorOutputStream.write(10);
    bZip2CompressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void write(int b) throws IOException {
            throw new IOException("Test IOException");
        }
}