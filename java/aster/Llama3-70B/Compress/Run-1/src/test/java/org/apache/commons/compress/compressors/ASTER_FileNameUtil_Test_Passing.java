/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_notCompressed_JmMx2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    boolean result = fileNameUtil.isCompressedFileName("file.txt");
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_null_ZuOt3() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    try {
        fileNameUtil.getCompressedFileName(null);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_XoTD0() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "zip");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
    boolean result = fileNameUtil.isCompressedFilename("test.zip");
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_aGil0() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "zip");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
    String fileName = "test.txt";
    String expected = "test.zip";
    String actual = fileNameUtil.getCompressedFilename(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName4_NttB3() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "");
    String result = fileNameUtil.getUncompressedFileName("test");
    assert "test".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName2_HWUo1() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>() {{
        put("txt", ".gz");
    }}, ".txt");
    String result = fileNameUtil.getCompressedFileName("file.txt");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName3_Ytdf2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), ".txt");
    String result = fileNameUtil.getCompressedFileName("file");
    assertEquals("file.txt", result);
}
}