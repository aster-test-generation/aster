/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.archive.internal.nls;
import java.util.Locale;
import java.util.ResourceBundle;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Locale;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Messages_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_ODTS0() {
    String result = Messages.getString("Hello, {}", "World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_IvIT0() {
    String result = Messages.getString("Message: {}", 10);
    assertEquals("Message: {}", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatMultipleArgs_Qmfx2() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatEmptyFormat_chhZ6() {
    String result = Messages.format("", new Object[]{});
    assert result.equals("");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNoArgs_eakg7() {
    String result = Messages.format("Hello World", new Object[]{});
    assert result.equals("Hello World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_BundleNull_AApn1_oriA0() {
    Locale locale = new Locale("en", "US");
    ResourceBundle bundle = Messages.setLocale(locale, "Messages");
    if (bundle != null) {
        String expected = "key arg1 arg2";
        Object[] args = new Object[] {"arg1", "arg2"};
        String actual = bundle.getString("key");
        assert actual != null;
    } else {
        assertNull(bundle);
    }
}
}