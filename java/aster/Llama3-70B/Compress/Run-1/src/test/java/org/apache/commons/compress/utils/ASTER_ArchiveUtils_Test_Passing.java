/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_gOws0() {
    String inputString = "Hello World";
    byte[] expectedBytes = "Hello World".getBytes(java.nio.charset.StandardCharsets.US_ASCII);
    byte[] actualBytes = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expectedBytes, actualBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothNull_nIsF0() {
    assertTrue(ArchiveUtils.isEqual(null, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_FirstNull_SecondNotNull_uYaz1() {
    assertFalse(ArchiveUtils.isEqual(null, new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_FirstNotNull_SecondNull_zCrU2() {
    assertFalse(ArchiveUtils.isEqual(new byte[0], null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothEmpty_BUZO3() {
    assertTrue(ArchiveUtils.isEqual(new byte[0], new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothSame_qIPN4() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothDifferent_KFpV5() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 4};
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_1_IPGh0() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2, 3};
    boolean result = ArchiveUtils.isEqual(buffer1, buffer2, true);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_bLCO0() {
    byte[] buffer = "Hello World".getBytes();
    boolean result = ArchiveUtils.matchAsciiBuffer("Hello World", buffer, 0, buffer.length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisArrayZero_withNonZeroArray_MHHc0() {
    byte[] a = {1, 2, 3, 4, 5};
    assertFalse(ArchiveUtils.isArrayZero(a, a.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisArrayZero_withZeroArray_vGJT1() {
    byte[] a = {0, 0, 0, 0, 0};
    assertTrue(ArchiveUtils.isArrayZero(a, a.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisArrayZero_withEmptyArray_ubuK2() {
    byte[] a = {};
    assertTrue(ArchiveUtils.isArrayZero(a, a.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_ControlCharacters_wENP0() {
    String input = "\u0000\u0001\u0002";
    String expected = "???";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_ISOControlCharacters_Mspo1() {
    String input = "\u007F\u0080\u009F";
    String expected = "???";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_SpecialCharacters_JrbU2() {
    String input = "!@#$";
    String expected = "!@#$";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_EmptyString_ulvh4() {
    String input = "";
    String expected = "";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_NullString_yXJY5() {
    String input = null;
    byte[] actual = new byte[0];
    assertArrayEquals(actual, new byte[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_NormalString_ltvh6() {
    String input = "Hello World";
    String expected = "Hello World";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_qygA0() {
    byte[] inputBytes = "Hello World".getBytes();
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("Hello World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_1_Odsi0() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_2_oMsS1() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 4};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_3_yirr2() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_4_tkRV3() {
    byte[] buffer1 = new byte[] {1, 2, 0};
    byte[] buffer2 = new byte[] {1, 2, 0};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_5_VVaE4() {
    byte[] buffer1 = new byte[] {1, 2, 0};
    byte[] buffer2 = new byte[] {1, 2};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_6_cozR5() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 0};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_7_UWds6() {
    byte[] buffer1 = new byte[] {1, 2};
    byte[] buffer2 = new byte[] {1, 2, 0};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 2, buffer2, 0, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_8_rNPF7() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4};
    byte[] buffer2 = new byte[] {1, 2, 3, 4};
    assertTrue(ArchiveUtils.isEqual(buffer1, 1, 3, buffer2, 1, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_9_oHIZ8() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4};
    byte[] buffer2 = new byte[] {1, 2, 3, 5};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, 3, buffer2, 1, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_10_hcfr9() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, 3, buffer2, 1, 2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_smea0() {
    byte[] buffer1 = {1, 2, 3, 4, 5};
    byte[] buffer2 = {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_xZbW0() {
    String expected = "Hello";
    byte[] buffer = expected.getBytes();
    assertTrue(ArchiveUtils.matchAsciiBuffer(expected, buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_Tlnh0() {
    byte[] inputBytes = "Hello World".getBytes();
    String result = ArchiveUtils.toAsciiString(inputBytes, 0, inputBytes.length);
    assertEquals("Hello World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_JfRc1() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertTrue(ArchiveUtils.isEqualWithNull(buffer1, 0, 3, buffer2, 0, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_DifferentLength_GCdU2() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2};
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, 0, 3, buffer2, 0, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer1_PwEM3() {
    byte[] buffer1 = null;
    byte[] buffer2 = new byte[] {1, 2, 3};
    try {
        ArchiveUtils.isEqualWithNull(buffer1, 0, 3, buffer2, 0, 3);
        fail("Expected NullPointerException to be thrown");
    } catch (NullPointerException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer2_DqGb4() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_DifferentContent_akLD5() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 4};
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, 0, 3, buffer2, 0, 3));
}
}