/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.SortedMap;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveStreamFactory_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_withEncoding_RrrI0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Map<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_withEncoding_RrrI0_fid1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_withoutEncoding_LOoo1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_JHkY0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ARJ"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("DUMP"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_lLNx0() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertNotNull(result);
    assertTrue(!result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qLSS0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_withEncoding_Kxwx0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_withoutEncoding_rbVn1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_RSPC0() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertNotNull(result);
    assertTrue(!result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectZipArchive_mUoe2() throws Exception {
    byte[] zipSignature = {0x50, 0x4b, 0x03, 0x04};
    InputStream in = new ByteArrayInputStream(zipSignature);
    assertEquals("ZIP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectJarArchive_sikp3() throws Exception {
    byte[] jarSignature = {0x50, 0x4b, 0x03, 0x04};
    InputStream in = new ByteArrayInputStream(jarSignature);
    assertEquals("JAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectArArchive_biGA4() throws Exception {
    byte[] arSignature = {0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e};
    InputStream in = new ByteArrayInputStream(arSignature);
    assertEquals("AR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectCpioArchive_fZus5() throws Exception {
    byte[] cpioSignature = {0x71, 0x70, 0x61, 0x63, 0x6b};
    InputStream in = new ByteArrayInputStream(cpioSignature);
    assertEquals("CPIO", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectDumpArchive_ReWY8() throws Exception {
    byte[] dumpSignature = {0x64, 0x75, 0x6d, 0x70};
    InputStream in = new ByteArrayInputStream(dumpSignature);
    assertEquals("DUMP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectTarArchive_MhKW9() throws Exception {
    byte[] tarSignature = {0x75, 0x73, 0x74, 0x61, 0x72};
    InputStream in = new ByteArrayInputStream(tarSignature);
    assertEquals("TAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_JHkY0_2_fid3() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_JHkY0_3_fid3() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ARJ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_JHkY0_4() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_JHkY0_5() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_JHkY0_6() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_JHkY0_7() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_JHkY0_8() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("DUMP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_JHkY0_9() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_lLNx0_1() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_lLNx0_2() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertTrue(!result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qLSS0_2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qLSS0_3() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qLSS0_4() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qLSS0_5() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qLSS0_6() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qLSS0_7() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_RSPC0_1() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_RSPC0_2() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertTrue(!result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_MqNt0_SXjK0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in;
    try {
        in = new ByteArrayInputStream("test".getBytes());
        String archiveType = ArchiveStreamFactory.detect(in);
        assertNotNull(archiveType);
    } catch (ArchiveException e) {
        fail("ArchiveException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStream_UnknownArchiver_pawo9_dHfE0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    try {
        factory.createArchiveOutputStream("unknown", out, null);
        fail();
    } catch (ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_AR_zeoD0() throws ArchiveException, IOException {
    byte[] signature = new byte[]{0x21, 0x3F, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65};
    ByteArrayInputStream in = new ByteArrayInputStream(signature);
    assertEquals("AR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectSevenZArchive_ksrF7_UCIY0() throws Exception {
    byte[] sevenZSignature = {(byte) 0x37, (byte) 0x7a, (byte) 0xbc, (byte) 0xaf, (byte) 0x27, (byte) 0x1c};
    InputStream in = new ByteArrayInputStream(sevenZSignature);
    assertEquals("SEVEN_Z", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectArjArchive_KMkQ6_XZiI0() throws Exception {
    byte[] arjSignature = {(byte)0x60, (byte)0xEA};
    InputStream in = new ByteArrayInputStream(arjSignature);
    assertEquals("ARJ", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream4_eKev3_xWco0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    try {
        ArjArchiveInputStream in = (ArjArchiveInputStream) factory.createArchiveInputStream("ARJ", new ByteArrayInputStream(new byte[0]), null);
        assertNotNull(in);
    } catch (ArchiveException e) {
        fail("ArchiveException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream5_BlkL4_wVsc0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    try {
        try {
            ArjArchiveInputStream in = (ArjArchiveInputStream) factory.createArchiveInputStream("ARJ", new ByteArrayInputStream(new byte[0]), "UTF-8");
            assertNotNull(in);
        } catch (ArchiveException e) {
            fail("ArchiveException was thrown");
        }
    } catch (Exception e) {
        fail("An unexpected exception was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream16_UPPw15_yPxE0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    try {
        ArchiveInputStream in = factory.createArchiveInputStream("DUMP", new ByteArrayInputStream(new byte[0]), null);
        assertNotNull(in);
    } catch (ArchiveException e) {
        fail("ArchiveException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream17_zOOS16_Ibmk0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    try {
        DumpArchiveInputStream in = (DumpArchiveInputStream) factory.createArchiveInputStream("DUMP", new ByteArrayInputStream(new byte[0]), "UTF-8");
        assertNotNull(in);
    } catch (ArchiveException e) {
        fail("ArchiveException should not be thrown");
    }
}
}