/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.TimeUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Failing {
private ZipLong fileTimeToZipLong(FileTime time) {
    return time == null ? null : unixTimeToZipLong(TimeUtils.toUnixTime(time));
}
private ZipLong unixTimeToZipLong(long unixTime) {
    return new ZipLong(unixTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_lFLY0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = x5455_ExtendedTimestamp.getModifyTime();
    long value = modifyTime.getValue();
    assertNotEquals(0, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_uKlx0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1000);
    x5455_ExtendedTimestamp.setAccessFileTime(fileTime);
    assertEquals(1000, x5455_ExtendedTimestamp.getAccessTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_EBTW0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1000);
    x5455_ExtendedTimestamp.setAccessFileTime(fileTime);
    assertSame(new ZipLong(1), x5455_ExtendedTimestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeNotNull_loMC0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(1234567890L);
    x5455.setCreateTime(l);
    assertTrue(x5455.isBit2_createTimePresent());
    assertEquals((byte) (x5455.getFlags() | 0x01), x5455.getFlags());
    assertEquals(l, x5455.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeZero_WGPM2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0L);
    x5455.setCreateTime(l);
    assertTrue(x5455.isBit2_createTimePresent());
    assertEquals((byte) (x5455.getFlags() | 0x01), x5455.getFlags());
    assertEquals(l, x5455.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit1_accessTimePresent_xsJP0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    boolean result = x5455_ExtendedTimestamp.isBit1_accessTimePresent();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_xOPA0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = x5455_ExtendedTimestamp.getHeaderId();
    assertNotNull(headerId);
    assertEquals(headerId.getValue(), headerId.getBytes()[0] << 8 | headerId.getBytes()[1] & 0xFF);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_hTia0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1000);
    x5455_ExtendedTimestamp.setCreateFileTime(fileTime);
    assertEquals(1000, x5455_ExtendedTimestamp.getCreateTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_hYuA0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = x5455_ExtendedTimestamp.getCreateTime();
    long value = createTime.getValue();
    assertNotEquals(0, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_iZGI0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = x5455_ExtendedTimestamp.getAccessTime();
    assertNotNull(accessTime);
    assertEquals(accessTime.getValue(), accessTime.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_QkNK0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    boolean result = x5455_ExtendedTimestamp.isBit0_modifyTimePresent();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit2_createTimePresent_OcTo0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    boolean result = x5455_ExtendedTimestamp.isBit2_createTimePresent();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_xOPA0_2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = x5455_ExtendedTimestamp.getHeaderId();
    assertEquals(headerId.getValue(), headerId.getBytes()[0] << 8 | headerId.getBytes()[1] & 0xFF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_hTia0_fid1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1);
    x5455_ExtendedTimestamp.setCreateFileTime(fileTime);
    assertEquals(1, x5455_ExtendedTimestamp.getCreateTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_iZGI0_1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = x5455_ExtendedTimestamp.getAccessTime();
    assertNotNull(accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_iZGI0_2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = x5455_ExtendedTimestamp.getAccessTime();
    assertEquals(accessTime.getValue(), accessTime.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_modifyTimePresent_EyOB0_MljN0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    byte[] result = x5455_ExtendedTimestamp.getLocalFileDataData();
    assertArrayEquals(new byte[] {2, 1, 2, 3, 4}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_allTimesPresent_vMNk3_tWOB0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setModifyJavaTime(date);
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    byte[] result = x5455_ExtendedTimestamp.getLocalFileDataData();
    assertArrayEquals(new byte[] {7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_7_zGhG6_eBsV0_2() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[5];
    data[0] = 1;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 4);
    assertNotNull(x5455_ExtendedTimestamp.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeNotNull_loMC0_2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(1234567890L);
    x5455.setCreateTime(l);
    assertEquals((byte) (x5455.getFlags() | 0x01), x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeZero_WGPM2_2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0L);
    x5455.setCreateTime(l);
    assertEquals((byte) (x5455.getFlags() | 0x01), x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_bit0_modifyTimePresentTrue_JeFt0_cfNL0_fid3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(new Date());
    ZipShort result = x5455_ExtendedTimestamp.getCentralDirectoryLength();
    assertArrayEquals(new byte[]{0, 5}, result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_bit0_modifyTimePresentFalse_SUaK1_CAJy0_fid3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(new Date(0));
    ZipShort result = x5455_ExtendedTimestamp.getCentralDirectoryLength();
    assertArrayEquals(new byte[]{0, 1}, result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength2_IAIy1_jrME0_fid3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setModifyJavaTime(date);
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    ZipShort result = x5455_ExtendedTimestamp.getLocalFileDataLength();
    assertArrayEquals(new byte[]{0x07, 0x00}, result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength1_ggsf0_kkJF0_fid3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    x5455_ExtendedTimestamp.setModifyJavaTime(date);
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    ZipShort result = x5455_ExtendedTimestamp.getLocalFileDataLength();
    assertArrayEquals(new byte[]{0x09, 0x00}, result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength3_JEPZ2_BfpJ0_fid3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    ZipShort result = x5455_ExtendedTimestamp.getLocalFileDataLength();
    assertArrayEquals(new byte[]{0x07, 0x00}, result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_4_rRZR3_SsNQ0_fid3() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    Date date = new Date();
    obj.setAccessJavaTime(date);
    int result = obj.hashCode();
    assertEquals(-123 * (obj.getFlags() & 0x07) ^ Integer.rotateLeft(obj.getAccessTime().hashCode(), 22), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_modifyTimePresent_EyOB0_MljN0_fid3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    byte[] result = x5455_ExtendedTimestamp.getLocalFileDataData();
    assertArrayEquals(new byte[] {17, 1, 2, 3, 4}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_modifyTimePresent_batT1_bEsz0_fid3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setFlags((byte) 1);
    x5455.setModifyTime(new ZipLong(123456789));
    assertEquals("0x5455 Zip Extra Field: Flags=1 Modify:[Wed Jan 14 06:56:29 GMT 1970] ", x5455.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_accessTimePresent_UyXU2_dvmx0_fid3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setFlags((byte) 2);
    x5455.setAccessTime(new ZipLong(123456789));
    assertEquals("0x5455 Zip Extra Field: Flags=10 Access:[Wed Jan 14 06:56:29 GMT 1970] ", x5455.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_allTimesPresent_vMNk3_tWOB0_fid3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setModifyJavaTime(date);
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    byte[] result = x5455_ExtendedTimestamp.getLocalFileDataData();
    assertArrayEquals(new byte[] {30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_createTimePresent_lYmm3_NKaC0_fid3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setFlags((byte) 4);
    Date createTime = new Date(123456789 * 1000);
    x5455.setAccessJavaTime(createTime);
    assertEquals("0x5455 Zip Extra Field: Flags=100 Create:[Wed Jan 14 06:56:29 GMT 1970] ", x5455.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_allFlagsPresent_kdXw4_PMce0_fid3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setFlags((byte) 7);
    x5455.setModifyTime(new ZipLong(123456789));
    x5455.setAccessJavaTime(new Date(123456789 * 1000));
    x5455.setCreateTime(new ZipLong(123456789));
    assertEquals("0x5455 Zip Extra Field: Flags=111 Modify:[Wed Jan 14 06:56:29 GMT 1970] Access:[Wed Jan 14 06:56:29 GMT 1970] Create:[Wed Jan 14 06:56:29 GMT 1970] ", x5455.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_6_eiDV5_XxHB0_1_fid3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 0);
    assertEquals(0, x5455_ExtendedTimestamp.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_6_eiDV5_XxHB0_2_fid3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 0);
    assertNull(x5455_ExtendedTimestamp.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_6_eiDV5_XxHB0_3_fid3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 0);
    assertNull(x5455_ExtendedTimestamp.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_6_eiDV5_XxHB0_4_fid3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 0);
    assertNull(x5455_ExtendedTimestamp.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_7_zGhG6_eBsV0_1_fid3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[5];
    data[0] = 1;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 4);
    assertEquals(1, x5455_ExtendedTimestamp.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_8_rzTb7_FOQe0_1_fid3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[13];
    data[0] = 7;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 12);
    assertEquals(7, x5455_ExtendedTimestamp.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_8_rzTb7_FOQe0_2() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[13];
    data[0] = 7;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 12);
    assertNotNull(x5455_ExtendedTimestamp.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_8_rzTb7_FOQe0_3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[13];
    data[0] = 7;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 12);
    assertNotNull(x5455_ExtendedTimestamp.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_8_rzTb7_FOQe0_4() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[13];
    data[0] = 7;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 12);
    assertNotNull(x5455_ExtendedTimestamp.getCreateTime());}
}