/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200UnpackerAdapter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnwrap_ysGh0_uIHr0() throws IOException {
    Path path = Paths.get("testFile.txt");
    Files.write(path, "Test content".getBytes());
    java.io.InputStream inputStream = new FileInputStream(path.toFile());
    inputStream = new java.io.BufferedInputStream(inputStream);
    inputStream = new java.io.DataInputStream(inputStream);
    assertEquals(Files.size(path), inputStream.available());
    Files.delete(path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_xAeE0_SneF0() throws IOException {
    File file = new File("testFile");
    java.io.InputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(file);
    assertNotNull(boundedInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnwrap_xAeE0_okYp1() throws IOException {
    File file = new File("testFile");
    FileInputStream fileInputStream = new FileInputStream(file);
    java.io.InputStream inputStream = Pack200UnpackerAdapter.unwrap(fileInputStream);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnwrap_InputStream_uABq1_ndwq0() {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    java.io.InputStream result = Pack200UnpackerAdapter.unwrap(inputStream);
    assertSame(inputStream, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackNullOut_OXoY1_MXhD0() throws IOException {
    Pack200UnpackerAdapter adapter = new Pack200UnpackerAdapter();
    File file = new File("test.txt");
    try {
        adapter.unpack(file, null); // This method is not defined in the provided class
        fail("Expected IllegalArgumentException");
    } catch (NullPointerException e) {
        assertEquals("null", e.getMessage());
    } catch (IllegalArgumentException e) {
        assertEquals("Must specify both input and output streams", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnwrap_FilterInputStream_returnsSame_ebjI1_fid1() throws IOException {
    java.io.ByteArrayInputStream byteArrayInputStream = new java.io.ByteArrayInputStream(new byte[0]);
    FilterInputStream filterInputStream = new java.io.BufferedInputStream(byteArrayInputStream);
    InputStream result = filterInputStream;
    assertSame(filterInputStream, result);
}
}