/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X7875_NewUnix_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_Jjos0() {
    X7875_NewUnix unix = new X7875_NewUnix();
    byte[] result = unix.getCentralDirectoryData();
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_qKHm0() {
    X7875_NewUnix xf = new X7875_NewUnix();
    assert xf.equals(xf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_LEZh1() {
    Object o = new Object();
    X7875_NewUnix xf = new X7875_NewUnix();
    assert !xf.equals(o);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ShortLength_AnVy0() {
    X7875_NewUnix unix = new X7875_NewUnix();
    byte[] data = new byte[2];
    try {
        unix.parseFromLocalFileData(data, 0, 2);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X7875_NewUnix length is too short, only 2 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_mMZg0() {
    X7875_NewUnix x = new X7875_NewUnix();
    ZipShort result = x.getCentralDirectoryLength();
    assertEquals(new ZipShort(0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_zdyj0() {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        x7875_NewUnix.parseFromCentralDirectoryData(buffer, offset, length);
    } catch (ZipException e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_clone_XGbJ0() throws CloneNotSupportedException {
    X7875_NewUnix obj = new X7875_NewUnix();
    Object clonedObj = obj.clone();
    assertNotSame(obj, clonedObj);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthNull_MBmi0() {
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthEmpty_vaBc1() {
    byte[] array = new byte[0];
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    assertArrayEquals(new byte[1], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthLeadingZeroes_emjQ2() {
    byte[] array = new byte[] {0, 0, 1, 2, 3};
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    assertArrayEquals(new byte[] {1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthNoLeadingZeroes_biWV3() {
    byte[] array = new byte[] {1, 2, 3};
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    assertArrayEquals(new byte[] {1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_OkUJ0_1() {
    X7875_NewUnix x = new X7875_NewUnix();
    ZipShort headerId = x.getHeaderId();
    assertNotNull(headerId);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_OkUJ0_2_fid2() {
    X7875_NewUnix x = new X7875_NewUnix();
    ZipShort headerId = x.getHeaderId();
}
}