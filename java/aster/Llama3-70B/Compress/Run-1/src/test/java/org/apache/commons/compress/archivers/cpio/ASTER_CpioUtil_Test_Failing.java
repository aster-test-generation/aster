/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFileType_lZds0() {
    assertEquals(0x1000, CpioUtil.fileType(0x10877));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_1_HYCp0() {
    byte[] number = {0x12, 0x34, 0x56, 0x78};
    boolean swapHalfWord = false;
    long result = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(0x12345678L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_2_oLwn1() {
    byte[] number = {0x78, 0x56, 0x34, 0x12};
    boolean swapHalfWord = true;
    long result = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(0x12345678L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_3_lGFg2() {
    byte[] number = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
    boolean swapHalfWord = false;
    long result = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(0x010203040506L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_5_ZXjs4() {
    byte[] number = {};
    boolean swapHalfWord = false;
    long result = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray1_jdwA0() {
    byte[] result = CpioUtil.long2byteArray(0x1234567890abcdefL, 8, false);
    assertArrayEquals(new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray2_xCsG1() {
    byte[] result = CpioUtil.long2byteArray(0x1234567890abcdefL, 8, true);
    assertArrayEquals(new byte[]{(byte) 0x34, (byte) 0x12, (byte) 0x78, (byte) 0x56, (byte) 0xcd, (byte) 0x90, (byte) 0xef, (byte) 0xab}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray3_UMEJ2() {
    byte[] result = CpioUtil.long2byteArray(0x1234567890abcdefL, 4, false);
    assertArrayEquals(new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray4_clTU3() {
    byte[] result = CpioUtil.long2byteArray(0x1234567890abcdefL, 4, true);
    assertArrayEquals(new byte[]{(byte) 0x34, (byte) 0x12, (byte) 0x78, (byte) 0x56}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_5_ZXjs4_fid2() {
    byte[] number = new byte[4]; // Initialize with a valid length
    boolean swapHalfWord = false;
    try {
        CpioUtil.byteArray2long(number, swapHalfWord); // This should not throw an exception
    } catch (ArrayIndexOutOfBoundsException e) {
        assert true; // Pass the test if an exception is thrown
        return;
    }
    assert false; // Fail the test if no exception is thrown
}
}