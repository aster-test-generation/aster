/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatchesAll_RupP0() {
    boolean result = SegmentConstantPool.regexMatches(SegmentConstantPool.REGEX_MATCH_ALL, "anyString");
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_NegativeIndex_ficj1() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool scp = new SegmentConstantPool(bands);
    try {
        scp.getValue(SegmentConstantPool.UTF_8, -2);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value =-1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_eDdA0() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool scp = new SegmentConstantPool(bands);
    String[] nameArray = new String[] {"test1", "test2", "test3"};
    String compareString = "test2";
    int desiredIndex =-1;
    int result = scp.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex2_NXYt1() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool scp = new SegmentConstantPool(bands);
    String[] primaryArray = {"a", "b", "c"};
    String[] secondaryArray = {"1", "2", "3"};
    String primaryCompareString = "d";
    String secondaryCompareRegex = "2";
    int desiredIndex = 0;
    int result = scp.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assert result == -1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_UnknownType_PhWt2_mnKt0() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool scp = new SegmentConstantPool(bands);
    try {
        scp.matchSpecificPoolEntryIndex(new String[] {}, new String[] {}, "", "", 0);
    } catch (Exception e) {
    }
}
}