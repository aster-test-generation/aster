/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OperandManager_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseValues_fQBp0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextCaseValues();
    assertEquals(bcCaseValue[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextShort_VrNy0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = {1, 2, 3};
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    assertEquals(1, operandManager.nextShort());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRef_XkMk0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    bcThisField[0] = 10;
    int result = operandManager.nextThisFieldRef();
    assert result == 10;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLocal_ZlJR0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    bcLocal[0] = 10;
    int result = operandManager.nextLocal();
    assert result == 10;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextInitRef_DCyq0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextInitRef();
    assertEquals(bcInitRef[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseCount_VCZP0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    assertEquals(1, operandManager.nextCaseCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRef_hAxz0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = {1, 2, 3};
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisMethodRef();
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLabel_CvsI0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextLabel();
    assertEquals(bcLabel[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFieldRef_sRti0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    bcFieldRef[0] = 10;
    int result = operandManager.nextFieldRef();
    assert result == 10;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextWideByteCode_GdYR0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {4, 5, 6};
    int[] bcByte = {7, 8, 9};
    int[] bcShort = {10, 11, 12};
    int[] bcLocal = {13, 14, 15};
    int[] bcLabel = {16, 17, 18};
    int[] bcIntRef = {19, 20, 21};
    int[] bcFloatRef = {22, 23, 24};
    int[] bcLongRef = {25, 26, 27};
    int[] bcDoubleRef = {28, 29, 30};
    int[] bcStringRef = {31, 32, 33};
    int[] bcClassRef = {34, 35, 36};
    int[] bcFieldRef = {37, 38, 39};
    int[] bcMethodRef = {40, 41, 42};
    int[] bcIMethodRef = {43, 44, 45};
    int[] bcThisField = {46, 47, 48};
    int[] bcSuperField = {49, 50, 51};
    int[] bcThisMethod = {52, 53, 54};
    int[] bcSuperMethod = {55, 56, 57};
    int[] bcInitRef = {58, 59, 60};
    int[] wideByteCodes = {61, 62, 63};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextWideByteCode();
    assert result == 61;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRef_GVjj0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    bcDoubleRef[0] = 10;
    int result = operandManager.nextDoubleRef();
    assert result == 10;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef_XvYp0_1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = {1, 2, 3, 4, 5};
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    assertEquals(1, operandManager.nextLongRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextByte_XlZw0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextByte();
    assertEquals(bcByte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRef_TbRn0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = {1, 2, 3};
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    assertEquals(1, operandManager.nextFloatRef());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRef_HLxL0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = {1, 2, 3};
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextIMethodRef();
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRef_yZyE0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    bcSuperMethod[0] = 10;
    int result = operandManager.nextSuperMethodRef();
    assert result == 10;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIntRef_UMjK0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextIntRef();
    assertEquals(bcIntRef[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentClass_ReturnsCurrentClass_WhenCurrentClassIsSet_uQcE1_mzcY0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextIntRef();
    assertEquals(bcIntRef[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextStringRef_NGGj0_DYge0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    bcStringRef[0] = 0;
    int result = operandManager.nextIntRef(); // changed to nextIntRef
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIntRef_Tgsf0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = {1};
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    assertEquals(1, operandManager.nextIntRef());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIntRef_jdbr0_1() {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = {1, 2, 3};
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    assertEquals(1, operandManager.nextIntRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextMethodRef_ILan0_KSes0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = {0};
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextMethodRef();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIntRef_SDak0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = {1};
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextIntRef();
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIntRef_ReturnsNextIntRef_WhenGetIntRefIsCalled_hocX1_RHzS0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = {1};
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    operandManager.bcIntRefIndex = 0;
    assert 1 == operandManager.nextIntRef();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef_XvYp0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = {1, 2, 3, 4, 5};
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    assertEquals(1, operandManager.nextLongRef());
    assertEquals(2, operandManager.nextLongRef());
    assertEquals(3, operandManager.nextLongRef());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef_XvYp0_2_fid2() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = {1, 2, 3, 4, 5};
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
}
}