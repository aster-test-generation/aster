/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_LongString_tIIN3_KWpy0() {
    int maxLength = 100; // Replace with the actual maximum sanitized name length
    String input = new String(new char[maxLength + 1]).replace('\0', 'a');
    String expected = new String(new char[maxLength - 3]).replace('\0', 'a') + "...";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_NullString_yXJY5_fid2() {
    String input = null;
    String expected = "";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer1_PwEM3_fid2() {
    byte[] buffer1 = null;
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, 0, 3, buffer2, 0, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer2_DqGb4_fid2() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = null;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, 0, 3, buffer2, 0, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_LongString_tIIN3_KWpy0_fid2() {
    int maxLength = 100; // Replace with the actual maximum sanitized name length
    String input = new String(new char[maxLength + 1]).replace('\0', 'a');
    String expected = new String(new char[maxLength - 3]).replace('\0', 'a') + "...";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
}