/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_withNonSeekableOutputStream_pdlt1() {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(outputStream);
    assertFalse(zipArchiveOutputStream.isSeekable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_ArchiveAlreadyFinished_AUAF1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive has already been finished", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_UnclosedEntries_rirf2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive contains unclosed entries.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_UnclosedEntries_QlsQ2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive contains unclosed entries.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_VTZs0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    archiveEntry.setMethod(ZipArchiveEntry.DEFLATED);
    archiveEntry.setSize(10);
    archiveEntry.setCompressedSize(10);
    archiveEntry.setCrc(10);
    archiveEntry.setTime(System.currentTimeMillis());
    zipArchiveOutputStream.putArchiveEntry(archiveEntry);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Finished_NQpC1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 65536);
    zipArchiveOutputStream.finished = true;
    try {
        zipArchiveOutputStream.closeArchiveEntry();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Stream has already been finished", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_DEFLATED_PTqD0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipArchiveEntry.DEFLATED);
    zipArchiveOutputStream.putArchiveEntry(entry);
    zipArchiveOutputStream.closeArchiveEntry();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeader_Dkxj0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry ze = new ZipArchiveEntry("test.txt");
    ze.setMethod(8);
    ze.setSize(10);
    ze.setTime(System.currentTimeMillis());
    zipArchiveOutputStream.putArchiveEntry(ze);
    zipArchiveOutputStream.closeArchiveEntry();
    assertNotNull(ze);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten6_NvrD5() {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(out);
    assertEquals(0, zipArchiveOutputStream.getBytesWritten());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_IOException_vKTX0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 65536);
    zipArchiveOutputStream.close();
    assertNotNull(zipArchiveOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreamble_QZPQ0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 65536);
    byte[] preamble = new byte[10];
    zipArchiveOutputStream.writePreamble(preamble);
    assertNotNull(preamble);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_WriteCentralDirectoryInChunks_vbYs4_NBBC0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zipArchiveOutputStream.closeArchiveEntry();
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test2.txt"));
    zipArchiveOutputStream.closeArchiveEntry();
    zipArchiveOutputStream.writeCentralDirectoryEnd();
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_NormalCase_hddE0_GglA0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_SplitZip_JQni3_ruxy0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 65536);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test"));
    zipArchiveOutputStream.closeArchiveEntry();
    zipArchiveOutputStream.writeCentralDirectoryEnd();
    assertTrue(new File("test.zip").exists()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_SplitZip_yaup3_TjfC0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 65536);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zipArchiveOutputStream.closeArchiveEntry();
    zipArchiveOutputStream.writeCentralDirectoryEnd();
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroy_withoutOutputStream_ZhrZ1_pLYl0() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    zipArchiveOutputStream.writeCentralDirectoryEnd();
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_WriteCentralDirectoryInChunks_jrai4_gVwk0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test"));
    zipArchiveOutputStream.closeArchiveEntry();
    zipArchiveOutputStream.writeCentralDirectoryEnd();
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_SplitZip_LmHQ3_lJja0() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 65536); // Changed the segment size to 65536 which is within the valid range
    zipArchiveOutputStream.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_pINV0_tbdu0_1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    archiveEntry.setMethod(ZipArchiveEntry.DEFLATED);
    archiveEntry.setSize(10);
    archiveEntry.setCompressedSize(10);
    archiveEntry.setTime(System.currentTimeMillis());
    zipArchiveOutputStream.putArchiveEntry(archiveEntry);
    assertEquals(archiveEntry.getMethod(), ZipArchiveEntry.DEFLATED);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_pINV0_tbdu0_2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    archiveEntry.setMethod(ZipArchiveEntry.DEFLATED);
    archiveEntry.setSize(10);
    archiveEntry.setCompressedSize(10);
    archiveEntry.setTime(System.currentTimeMillis());
    zipArchiveOutputStream.putArchiveEntry(archiveEntry);
    assertEquals(archiveEntry.getSize(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_pINV0_tbdu0_3() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    archiveEntry.setMethod(ZipArchiveEntry.DEFLATED);
    archiveEntry.setSize(10);
    archiveEntry.setCompressedSize(10);
    archiveEntry.setTime(System.currentTimeMillis());
    zipArchiveOutputStream.putArchiveEntry(archiveEntry);
    assertEquals(archiveEntry.getCompressedSize(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_pINV0_tbdu0_4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    archiveEntry.setMethod(ZipArchiveEntry.DEFLATED);
    archiveEntry.setSize(10);
    archiveEntry.setCompressedSize(10);
    archiveEntry.setTime(System.currentTimeMillis());
    zipArchiveOutputStream.putArchiveEntry(archiveEntry);
    assertEquals(archiveEntry.getTime(), System.currentTimeMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_STORED_NotRandomAccessOutputStream_LcmF2_lnkP0() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipArchiveEntry.STORED);
    zipArchiveOutputStream.putArchiveEntry(entry);
    zipArchiveOutputStream.closeArchiveEntry();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlush_withoutOutputStream_TAcb1_XlYV0() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    zipArchiveOutputStream.writeCentralDirectoryEnd();
    zipArchiveOutputStream.flush();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEnd_withPhased_IMzv1_NKdX0() {
    File file = new File("file");
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        ZipArchiveEntry entry = new ZipArchiveEntry("entry");
        entry.setCrc(123456789);
        zipArchiveOutputStream.putArchiveEntry(entry);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.writeCentralDirectoryEnd();
        assert true;
    } catch (IOException e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeader_eSgv1_CNny0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    zipArchiveEntry.setMethod(0);
    zipArchiveEntry.setSize(10);
    zipArchiveEntry.setTime(System.currentTimeMillis());
    zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
    zipArchiveOutputStream.closeArchiveEntry();
    assertNotNull(zipArchiveEntry);
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEnd_sZlP0_LWHo0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 65536);
    zipArchiveOutputStream.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_eAmw0_iOgA0() throws IOException {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        archiveEntry.setSize(100);
        archiveEntry.setCompressedSize(100);
        archiveEntry.setCrc(123);
        zipArchiveOutputStream.putArchiveEntry(archiveEntry);
        assertTrue(true);
    } catch (IOException e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_Zip64Required_VCsH4_MAMW0() throws IOException {
    ZipArchiveOutputStream zaos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry ze = new ZipArchiveEntry("test.txt");
    ze.setSize(Long.MAX_VALUE);
    try {
        zaos.putArchiveEntry(ze);
        zaos.closeArchiveEntry();
        try {
            zaos.writeCentralDirectoryEnd(); // Replaced zaos.finish() with zaos.writeCentralDirectoryEnd()
        } catch (IOException e) {
        }
    } catch (Zip64RequiredException e) {
        assertEquals(Zip64RequiredException.ARCHIVE_TOO_BIG_MESSAGE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_FpOQ0_nLyx0() throws IOException {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        archiveEntry.setSize(10);
        archiveEntry.setCompressedSize(10);
        archiveEntry.setMethod(ZipArchiveEntry.DEFLATED);
        zipArchiveOutputStream.putArchiveEntry(archiveEntry);
        assertTrue(true);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_iPAK0_pvTP0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    archiveEntry.setSize(100);
    archiveEntry.setCompressedSize(50);
    zipArchiveOutputStream.putArchiveEntry(archiveEntry); // No need to catch IOException here
    assertEquals(100, archiveEntry.getSize());
    assertEquals(50, archiveEntry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_GjbD0_RUEK0() throws IOException {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        archiveEntry.setSize(10);
        archiveEntry.setMethod(ZipArchiveEntry.DEFLATED);
        zipArchiveOutputStream.putArchiveEntry(archiveEntry);
        assertTrue(true);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_GJrT0_QOox0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveOutputStream.putArchiveEntry(archiveEntry);
    } catch (IOException e) {
        Assertions.fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_LRCP0_ivvX0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        archiveEntry.setMethod(ZipArchiveEntry.DEFLATED);
        archiveEntry.setSize(1024);
        archiveEntry.setCompressedSize(512);
        archiveEntry.setCrc(123456);
        archiveEntry.setTime(1643723400);
        zipArchiveOutputStream.putArchiveEntry(archiveEntry);
        Assertions.assertTrue(true);
    } catch (IOException e) {
        Assertions.fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_OrAa0_GDbL0() throws IOException {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveOutputStream.putArchiveEntry(archiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeader_zAkw0_lrcm0() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
    byte[] bytes = "Test content".getBytes();
    zipArchiveOutputStream.write(bytes);
    zipArchiveOutputStream.closeArchiveEntry();
    assertTrue(file.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor1_mNtw0_WsVc0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
    ZipArchiveEntry ze = new ZipArchiveEntry("test");
    ze.setMethod(8); // DEFLATED
    ze.setCrc(123);
    ze.setCompressedSize(100);
    ze.setSize(200);
    try {
        zipArchiveOutputStream.putArchiveEntry(ze);
        byte[] data = new byte[200];
        zipArchiveOutputStream.write(data);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.writeCentralDirectoryEnd();
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor2_aaoz1_UjjB0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
    ZipArchiveEntry ze = new ZipArchiveEntry("test");
    ze.setMethod(0); // STORED
    ze.setCrc(123);
    ze.setCompressedSize(100);
    ze.setSize(200);
    try {
        zipArchiveOutputStream.putArchiveEntry(ze);
        byte[] data = new byte[200];
        zipArchiveOutputStream.write(data);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.writeCentralDirectoryEnd();
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor1_gWyt0_eShD0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    zipArchiveEntry.setMethod(8);
    zipArchiveEntry.setCrc(123);
    zipArchiveEntry.setCompressedSize(100);
    zipArchiveEntry.setSize(200);
    try {
        zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        byte[] data = new byte[200];
        zipArchiveOutputStream.write(data);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.writeCentralDirectoryEnd();
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor2_MhXN1_IlJz0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    zipArchiveEntry.setMethod(0);
    try {
        zipArchiveOutputStream.writeCentralDirectoryEnd(); // Corrected method call
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor3_rWVP2_OCTx0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
        ZipArchiveEntry ze = new ZipArchiveEntry("test");
        ze.setMethod(8); // DEFLATED
        ze.setCrc(123);
        ze.setCompressedSize(Long.MAX_VALUE);
        ze.setSize(Long.MAX_VALUE);
        zipArchiveOutputStream.putArchiveEntry(ze);
        zipArchiveOutputStream.write(new byte[0]);
        zipArchiveOutputStream.closeArchiveEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor3_ejOQ2_MbmZ0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    zipArchiveEntry.setMethod(8);
    zipArchiveEntry.setCrc(123);
    zipArchiveEntry.setCompressedSize(Long.MAX_VALUE);
    zipArchiveEntry.setSize(Long.MAX_VALUE);
    zipArchiveOutputStream.writeCentralDirectoryEnd(); // Added this line
    zipArchiveOutputStream.writeDataDescriptor(zipArchiveEntry); // This line is fixed
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor1_ZRQy0_Niyt0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
    ZipArchiveEntry ze = new ZipArchiveEntry("test");
    ze.setMethod(8);
    ze.setCrc(123);
    ze.setCompressedSize(100);
    ze.setSize(200);
    zipArchiveOutputStream.putArchiveEntry(ze);
    try {
        zipArchiveOutputStream.write(1);
    } catch (IOException e) {
    } finally {
        zipArchiveOutputStream.closeArchiveEntry();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten1_MIvq0_CgZq0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream;
    try {
        zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 65536);
    } catch (IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
    assertEquals(0, zipArchiveOutputStream.getBytesWritten());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor2_wTXp1_FtHs0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
        ZipArchiveEntry ze = new ZipArchiveEntry("test");
        ze.setMethod(8);
        ze.setCrc(123);
        ze.setCompressedSize(100);
        ze.setSize(200);
        ze.getExtraFields(true); // to cover hasZip64Extra method
        zipArchiveOutputStream.putArchiveEntry(ze);
        zipArchiveOutputStream.write(1); // write some data
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.writeCentralDirectoryEnd(); // changed method call
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten4_ppta3_hNbO0() {
    File file = new File("test");
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        assertEquals(0, zipArchiveOutputStream.getBytesWritten());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten4_ppta3_zojn1() throws IOException {
    File file = new File("test");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    assertEquals(0, zipArchiveOutputStream.getBytesWritten());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor3_JBTr2_Krxd0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
        ZipArchiveEntry ze = new ZipArchiveEntry("test");
        ze.setMethod(0);
        ze.setCrc(123);
        ze.setCompressedSize(100);
        ze.setSize(200);
        zipArchiveOutputStream.putArchiveEntry(ze);
        zipArchiveOutputStream.write(new byte[200]);
        zipArchiveOutputStream.closeArchiveEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeader_nCFU0_OJha0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveEntry.setExtraFields(new ZipExtraField[] {new Zip64ExtendedInformationExtraField()});
        zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.writeCentralDirectoryEnd();
        assert true;
    } catch (IOException e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeader_NoZip64Extra_vCJM1_eqyq0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.writeCentralDirectoryEnd(); // Corrected method call
        assert true;
    } catch (IOException e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeader_EzVA0_DwgA0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveEntry.setMethod(8);
        zipArchiveEntry.setSize(10);
        zipArchiveEntry.setTime(1000);
        zipArchiveEntry.setUnixMode(0);
        zipArchiveEntry.setVersionMadeBy(20);
        zipArchiveEntry.setVersionRequired(10);
        zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        zipArchiveOutputStream.closeArchiveEntry();
        assert true;
    } catch (IOException e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeader_TBDf0_YhAC0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        zipArchiveOutputStream.closeArchiveEntry();
        assertTrue(true);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeader_QmsV0_LkKU0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry ze = new ZipArchiveEntry("test.txt");
        ze.setMethod(8);
        ze.setSize(10);
        ze.setCompressedSize(10);
        ze.setCrc(10);
        ze.setTime(10);
        ze.setInternalAttributes(10);
        ze.setExternalAttributes(10);
        ze.setComment("test comment");
        ze.setCentralDirectoryExtra(new byte[10]);
        zipArchiveOutputStream.putArchiveEntry(ze);
        assertEquals(10, ze.getSize());
        zipArchiveOutputStream.closeArchiveEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddRawArchiveEntry5_ulHJ4_glNk0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
        InputStream inputStream = null;
        try {
            zipArchiveOutputStream.addRawArchiveEntry(zipArchiveEntry, inputStream);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData1_kTud0_iMSM0() throws IOException {
    File file = new File("file");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 65536);
    ArchiveEntry archiveEntry = new ZipArchiveEntry("entry");
    ((ZipArchiveEntry) archiveEntry).setMethod(0);
    assertTrue(zipArchiveOutputStream.canWriteEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_uZYy0_yBzx0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        File inputFile = new File("input.txt");
        try {
            ZipArchiveEntry zipArchiveEntry = zipArchiveOutputStream.createArchiveEntry(inputFile, "entryName");
            assertNotNull(zipArchiveEntry);
        } catch (IOException e) {
            fail("IOException occurred");
        }
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryFinished_QjDH1_oUGH0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.close(); // replaced finish() with close()
    File inputFile = new File("input.txt");
    try {
        zipArchiveOutputStream.createArchiveEntry(inputFile, "entryName");
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Stream has already been finished", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData5_drOc4_Tcsl0() throws IOException {
    File file = new File("file");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 65536);
    ArchiveEntry archiveEntry = null;
    assertFalse(zipArchiveOutputStream.canWriteEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void write(int b) throws IOException {
        }
}