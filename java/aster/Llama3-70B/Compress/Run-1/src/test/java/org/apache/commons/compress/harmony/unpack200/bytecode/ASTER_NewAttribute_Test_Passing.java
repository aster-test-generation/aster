/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttribute_Test_Passing {
    private boolean renumbered;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndex_wFFY0() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    NewAttribute newAttribute = new NewAttribute(attributeName, 10);
    assertEquals(10, newAttribute.getLayoutIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_EmptyList_SYra0() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    assertEquals(0, newAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyBody_zWaD0_EDEg0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("AttributeName"), 1);
    ClassFileEntry[] result = newAttribute.getNestedClassFileEntries();
    assert(result.length == 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber1_aTvI0_Lhum0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 1), 1);
    List<Integer> byteCodeOffsets = Arrays.asList(1, 2, 3);
    newAttribute.renumber(byteCodeOffsets);
    assertEquals(true, newAttribute.renumbered);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber2_xwRb1_rdaQ0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 1), 1);
    List<Integer> byteCodeOffsets = Arrays.asList(1, 2, 3, 4, 5);
    newAttribute.renumber(byteCodeOffsets);
    assertEquals(true, newAttribute.renumbered);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setRenumbered(boolean renumbered) {
        this.renumbered = renumbered;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber6_Utxu5_tzBB0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 1), 1);
    List<Integer> byteCodeOffsets = Arrays.asList(1, 1, 1, 1, 1);
    newAttribute.renumber(byteCodeOffsets);
    assertEquals(true, newAttribute.renumbered);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber7_kUbY6_LnAy0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 1), 1);
    List<Integer> byteCodeOffsets = Arrays.asList(5, 4, 3, 2, 1);
    newAttribute.renumber(byteCodeOffsets);
    assertEquals(true, newAttribute.renumbered);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber8_nNjG7_mXiC0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 1), 1);
    List<Integer> byteCodeOffsets = Arrays.asList(10, 20, 30, 40, 50);
    newAttribute.renumber(byteCodeOffsets);
    assertTrue(newAttribute.renumbered);
}
}