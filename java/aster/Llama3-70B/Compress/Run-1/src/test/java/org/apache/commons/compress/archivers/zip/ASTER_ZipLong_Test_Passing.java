/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLong_baqy0() {
    byte[] buf = new byte[8];
    long value = 1234567890L;
    ZipLong.putLong(value, buf, 0);
    long result = ByteUtils.fromLittleEndian(buf, 0, 4);
    assertEquals(value, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_lotk0() {
    ZipLong zipLong = new ZipLong(10);
    assertTrue(zipLong.equals(zipLong));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_SameValue_qqgG1() {
    ZipLong zipLong1 = new ZipLong(10);
    ZipLong zipLong2 = new ZipLong(10);
    assertTrue(zipLong1.equals(zipLong2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_DifferentValue_LjET2() {
    ZipLong zipLong1 = new ZipLong(10);
    ZipLong zipLong2 = new ZipLong(20);
    assertFalse(zipLong1.equals(zipLong2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_intValue_SGkN1() {
    ZipLong zipLong = new ZipLong(123);
    assertEquals(123, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_longValue_rJvW2() {
    ZipLong zipLong = new ZipLong(123L);
    assertEquals(123L, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_byteArrayOffset_WDrC0() {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    byte[] result = zipLong.getBytes();
    assertArrayEquals(new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_longValue_XvxJ2() {
    ZipLong zipLong = new ZipLong(123456789012345678L);
    byte[] result = zipLong.getBytes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_byteArray_iQCa3() {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
    byte[] result = zipLong.getBytes();
    assertArrayEquals(new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_intValue_mtWh1() {
    ZipLong zipLong = new ZipLong(123);
    assertEquals(123, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_longValue_BckG2() {
    ZipLong zipLong = new ZipLong(123L);
    assertEquals(123, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_IntValue_ZbJd1() {
    ZipLong zipLong = new ZipLong(123456789);
    assertEquals(123456789, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_ByteArray_Uhoq3() {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4});
    assertEquals(0x04030201, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_egpg0() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x12;
    bytes[1] = (byte) 0x34;
    bytes[2] = (byte) 0x56;
    bytes[3] = (byte) 0x78;
    long result = ZipLong.getValue(bytes);
    assertEquals(2018915346L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_byteArrayOffset_xFcV0_1() {
    ZipLong zipLong = new ZipLong(new byte[10], 0);
    Object cloned = zipLong.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_byteArrayOffset_xFcV0_2() {
    ZipLong zipLong = new ZipLong(new byte[10], 0);
    Object cloned = zipLong.clone();
    assertNotSame(zipLong, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_intValue_UWQO1_1() {
    ZipLong zipLong = new ZipLong(10);
    Object cloned = zipLong.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_intValue_UWQO1_2() {
    ZipLong zipLong = new ZipLong(10);
    Object cloned = zipLong.clone();
    assertNotSame(zipLong, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_longValue_HhxT2_1() {
    ZipLong zipLong = new ZipLong(10L);
    Object cloned = zipLong.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_longValue_HhxT2_2() {
    ZipLong zipLong = new ZipLong(10L);
    Object cloned = zipLong.clone();
    assertNotSame(zipLong, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_byteArray_jnae3_1() {
    ZipLong zipLong = new ZipLong(new byte[10]);
    Object cloned = zipLong.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_byteArray_jnae3_2() {
    ZipLong zipLong = new ZipLong(new byte[10]);
    Object cloned = zipLong.clone();
    assertNotSame(zipLong, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_djUa0() {
    byte[] result = ZipLong.getBytes(0L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_xxXZ1() {
    byte[] result = ZipLong.getBytes(1L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes7_KuGb6() {
    byte[] result = ZipLong.getBytes(2147483647L);
    assertArrayEquals(new byte[] {-1, -1, -1, 127}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes9_gcZF8() {
    byte[] result = ZipLong.getBytes(4294967295L);
    assertArrayEquals(new byte[] {-1, -1, -1, -1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes10_ylVE9() {
    byte[] result = ZipLong.getBytes(-4294967296L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_lcwR1() {
    byte[] bytes = new byte[4];
    bytes[0] = (byte) 0x12;
    bytes[1] = (byte) 0x34;
    bytes[2] = (byte) 0x56;
    bytes[3] = (byte) 0x78;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_JOTY2() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x00;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x00;
    assertEquals(0L, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue4_qpCa3() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x7F;
    bytes[1] = (byte) 0xFF;
    bytes[2] = (byte) 0xFF;
    bytes[3] = (byte) 0xFF;
    bytes[4] = (byte) 0xFF;
    bytes[5] = (byte) 0xFF;
    bytes[6] = (byte) 0xFF;
    bytes[7] = (byte) 0xFF;
    assertEquals(4294967167L, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue5_kLcL4() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x80;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x00;
    assertEquals(128, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue6_FjHK5() {
    byte[] bytes = new byte[4];
    bytes[0] = (byte) 0x12;
    bytes[1] = (byte) 0x34;
    bytes[2] = (byte) 0x56;
    bytes[3] = (byte) 0x78;
    assertEquals(2018915346L, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue7_oDyJ6() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x12;
    bytes[1] = (byte) 0x34;
    bytes[2] = (byte) 0x56;
    bytes[3] = (byte) 0x78;
    bytes[4] = (byte) 0x90;
    bytes[5] = (byte) 0xAB;
    bytes[6] = (byte) 0xCD;
    bytes[7] = (byte) 0xEF;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_ByteOffset_bZEy0_dRdP0() {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_byteArrayOffset_xFcV0() {
    ZipLong zipLong = new ZipLong(new byte[10], 0);
    Object cloned = zipLong.clone();
    assertNotNull(cloned);
    assertNotSame(zipLong, cloned);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_intValue_UWQO1() {
    ZipLong zipLong = new ZipLong(10);
    Object cloned = zipLong.clone();
    assertNotNull(cloned);
    assertNotSame(zipLong, cloned);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_longValue_HhxT2() {
    ZipLong zipLong = new ZipLong(10L);
    Object cloned = zipLong.clone();
    assertNotNull(cloned);
    assertNotSame(zipLong, cloned);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_byteArray_jnae3() {
    ZipLong zipLong = new ZipLong(new byte[10]);
    Object cloned = zipLong.clone();
    assertNotNull(cloned);
    assertNotSame(zipLong, cloned);
}
}