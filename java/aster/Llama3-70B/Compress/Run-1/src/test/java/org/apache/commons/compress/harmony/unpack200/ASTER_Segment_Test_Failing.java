/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.jar.JarOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Segment_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_1() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_2() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getConstantPool());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_3() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_4() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpFieldClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_5() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpIMethodClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_6() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpMethodClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_7() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpMethodDescriptor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_8() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpSignature());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_9() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpDescriptor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_10() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpUTF8());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_11() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpDescriptorNameInts());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_12() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpDescriptorTypeInts());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_13() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpInt());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0_14() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpLong());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_Hyjx0_iheT0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    byte[] data = new byte[] {(byte) 0x50, (byte) 0x4b, 3, 4, 20, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    InputStream inputStream = new ByteArrayInputStream(data);
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    JarOutputStream out = new JarOutputStream(bos);
    segment.unpack(inputStream, out);
    assertNotEquals("input stream", bos.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_Hyjx0_iheT0_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    InputStream inputStream = new ByteArrayInputStream("input stream".getBytes());
    JarOutputStream out = new JarOutputStream(new ByteArrayOutputStream());
    segment.unpack(inputStream, out);
    assertEquals("input stream", out.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_BSFD0() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands);
    assertNotNull(cpBands.getConstantPool());
    assertNotNull(cpBands.getCpClass());
    assertNotNull(cpBands.getCpFieldClass());
    assertNotNull(cpBands.getCpIMethodClass());
    assertNotNull(cpBands.getCpMethodClass());
    assertNotNull(cpBands.getCpMethodDescriptor());
    assertNotNull(cpBands.getCpSignature());
    assertNotNull(cpBands.getCpDescriptor());
    assertNotNull(cpBands.getCpUTF8());
    assertNotNull(cpBands.getCpDescriptorNameInts());
    assertNotNull(cpBands.getCpDescriptorTypeInts());
    assertNotNull(cpBands.getCpInt());
    assertNotNull(cpBands.getCpLong());
}
}