/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_BQrh8_AmwQ0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 3]));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCount_UNKNOWN_inkd6() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    assertEquals(-1, zipArchiveInputStream.getCompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_eKlb0_Ntfz0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.close();
    try {
        zipArchiveInputStream.read(new byte[0]);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_Qvmt13_wakK0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
    byte[] buffer = new byte[1];
    try {
        int bytesRead = zipArchiveInputStream.read(buffer, 0, 1);
        assertNotNull(buffer);
        assertTrue(bytesRead >= 0);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData2_cyAz1_ODzQ0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setMethod(ZipEntry.STORED);
    assert zipArchiveInputStream.canReadEntryData(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipPositiveValue_xKkU0_kIdc0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    long value = 10;
    long skipped = zipArchiveInputStream.skip(value);
    assertEquals(value, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipLargeValue_RVjI3_liRA0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1024]), "UTF-8", true, true);
    long value = Long.MAX_VALUE;
    try {
        assertEquals(1024, zipArchiveInputStream.skip(value));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry12_uVbP11_zaVy0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_QxuA5_jyBe0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_ifWW7_sODi0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_aRWA8_kJlk0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry10_EISy9_btVL0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8");
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_dNpB2_Xgxa0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_Opla2_XCXV0_fid2() {
    try {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE]));
        assertNull(zipArchiveInputStream.getNextEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_vZIp4_orNH0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE + 1]));
    try {
        assertNull(zipArchiveInputStream.getNextEntry());
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_CBEL6_VAlF0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 2]));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry11_SCVj10_jUWv0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 4]));
    assertNull(zipArchiveInputStream.getNextEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry13_kTmO12_IyBP0_fid2() {
    try {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 5]));
        assertNull(zipArchiveInputStream.getNextEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry17_kvEy16_dFdr0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 7]));
    try {
        assertNull(zipArchiveInputStream.getNextEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry19_CmWF18_vsmP0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 8]));
    assertNull(zipArchiveInputStream.getNextEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_Bbol4_GUaZ0_fid2() {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x03, (byte) 0x04 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_dkiJ5_ULdr0_fid2() {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x01, (byte) 0x02 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_hsTQ6_pHTf0_fid2() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x05, (byte) 0x06 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_QPRn7_NXwE0_fid2() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x07, (byte) 0x08 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_grVo8_iSmv0_fid2() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x09, (byte) 0x10 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry10_oNfX9_AgRP0_fid2() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x11, (byte) 0x12 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry11_cUvI10_NxCy0_fid2() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x13, (byte) 0x14 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry12_Chgf11_tdRR0_fid2() {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x15, (byte) 0x16 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_goNJ1_EbsL0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}));
    try {
        assertNotNull(zipArchiveInputStream.getNextEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_sQrs3_AZXO0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x07, 0x08}));
    assertNotNull(zipArchiveInputStream.getNextEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_eLxU5_SWHY0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNotNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_UJxM7_mkGt0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNotNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry10_IqDE9_iSEo0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNotNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry12_cALf11_cqus0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNotNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_iMGv1_liUw0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_2_jSwn1_bheo0_fid2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        zipArchiveInputStream.close();
    } catch (IOException e) {
    }
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail();
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_3_ojXP2_XPsm0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 1;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail();
    } catch (ArrayIndexOutOfBoundsException e) {
        assertNotNull(e);
    } catch (IOException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_4_msnn3_kKXC0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = -1;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail();
    } catch (ArrayIndexOutOfBoundsException e) {
        assertNotNull(e);
    } catch (IOException e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_5_Jxma4_mmUV0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = -1;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail();
    } catch (ArrayIndexOutOfBoundsException e) {
        assertNotNull(e);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_6_CjEh5_xhxl0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    int offset = 0;
    int length = 2;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail();
    } catch (ArrayIndexOutOfBoundsException e) {
        assertNotNull(e);
    } catch (IOException e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_3_qVoS2_GVRu0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 1;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail();
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_4_QyqA3_hGsM0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = -1;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail();
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_5_PGkJ4_DQuq0_fid2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    int offset = 0;
    int length = 2;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail();
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
}