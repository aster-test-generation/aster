/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipMethod_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_STORED_Jcoi0() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.STORED.getCode());
    assertEquals(ZipMethod.STORED, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_UNSHRINKING_RUGv1() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.UNSHRINKING.getCode());
    assertEquals(ZipMethod.UNSHRINKING, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_EXPANDING_LEVEL_1_yZYn2() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.EXPANDING_LEVEL_1.getCode());
    assertEquals(ZipMethod.EXPANDING_LEVEL_1, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_EXPANDING_LEVEL_2_iUUA3() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.EXPANDING_LEVEL_2.getCode());
    assertEquals(ZipMethod.EXPANDING_LEVEL_2, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_EXPANDING_LEVEL_3_XoOl4() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.EXPANDING_LEVEL_3.getCode());
    assertEquals(ZipMethod.EXPANDING_LEVEL_3, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_EXPANDING_LEVEL_4_ZxyX5() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.EXPANDING_LEVEL_4.getCode());
    assertEquals(ZipMethod.EXPANDING_LEVEL_4, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_IMPLODING_hJFx6() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.IMPLODING.getCode());
    assertEquals(ZipMethod.IMPLODING, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_TOKENIZATION_TPWx7() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.TOKENIZATION.getCode());
    assertEquals(ZipMethod.TOKENIZATION, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_DEFLATED_PMBy8() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.DEFLATED.getCode());
    assertEquals(ZipMethod.DEFLATED, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_ENHANCED_DEFLATED_qWKr9() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.ENHANCED_DEFLATED.getCode());
    assertEquals(ZipMethod.ENHANCED_DEFLATED, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_PKWARE_IMPLODING_UWAA10() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.PKWARE_IMPLODING.getCode());
    assertEquals(ZipMethod.PKWARE_IMPLODING, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_BZIP2_BeGt11() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.BZIP2.getCode());
    assertEquals(ZipMethod.BZIP2, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_LZMA_LiXW12() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.LZMA.getCode());
    assertEquals(ZipMethod.LZMA, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_XZ_dpJe13() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.XZ.getCode());
    assertEquals(ZipMethod.XZ, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_JPEG_PHlX14() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.JPEG.getCode());
    assertEquals(ZipMethod.JPEG, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_WAVPACK_wNgF15() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.WAVPACK.getCode());
    assertEquals(ZipMethod.WAVPACK, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_PPMD_bRNQ16() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.PPMD.getCode());
    assertEquals(ZipMethod.PPMD, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_AES_ENCRYPTED_uTlt17() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.AES_ENCRYPTED.getCode());
    assertEquals(ZipMethod.AES_ENCRYPTED, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_UNKNOWN_TJYj18() {
    ZipMethod method = ZipMethod.getMethodByCode(ZipMethod.UNKNOWN.getCode());
    assertEquals(ZipMethod.UNKNOWN, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCode_STORED_wiBa0_GTYP0() {
    ZipMethod zipMethod = ZipMethod.STORED;
    assertEquals(0, zipMethod.getCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCode_UNSHRINKING_oDqJ1_SYaY0() {
    ZipMethod zipMethod = ZipMethod.UNSHRINKING;
    assertEquals(1, zipMethod.getCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCode_EXPANDING_LEVEL_1_XNOs2_pDox0() {
    ZipMethod zipMethod = ZipMethod.EXPANDING_LEVEL_1;
    assertEquals(2, zipMethod.getCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCode_ENHANCED_DEFLATED_wNrf9_XHLo0() {
    ZipMethod zipMethod = ZipMethod.ENHANCED_DEFLATED;
    assertEquals(9, zipMethod.getCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCode_AES_ENCRYPTED_yFAB17_xCbe0() {
    ZipMethod zipMethod = ZipMethod.AES_ENCRYPTED;
    assertEquals(99, zipMethod.getCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCode_PKWARE_IMPLODING_cBZK10_sPVH0_fid1() {
    ZipMethod zipMethod = ZipMethod.PKWARE_IMPLODING;
    assertEquals(10, zipMethod.getCode());
}
}