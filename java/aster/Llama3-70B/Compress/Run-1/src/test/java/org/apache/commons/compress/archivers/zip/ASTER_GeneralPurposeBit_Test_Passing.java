/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_olHl0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    int expected = 0; // default value
    int actual = generalPurposeBit.getSlidingDictionarySize();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_CJmz0() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    assertTrue(bit.equals(bit));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_hZYx1() {
    Object obj = new Object();
    GeneralPurposeBit bit = new GeneralPurposeBit();
    assertFalse(bit.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_bFfl2() {
    GeneralPurposeBit bit1 = new GeneralPurposeBit();
    GeneralPurposeBit bit2 = new GeneralPurposeBit();
    assertTrue(bit1.equals(bit2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_XQXM0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] result = generalPurposeBit.encode();
    assertArrayEquals(new byte[] {0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_evUN0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    Object clonedGeneralPurposeBit = generalPurposeBit.clone();
    assertNotSame(generalPurposeBit, clonedGeneralPurposeBit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithoutFlags_aKxH4() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] buf = new byte[2];
    generalPurposeBit.encode(buf, 0);
    assertEquals((short) 0, ZipShort.getValue(buf, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode1_vvPH0_wFHh0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    generalPurposeBit.useEncryption(false);
    generalPurposeBit.useStrongEncryption(false);
    generalPurposeBit.useUTF8ForNames(false);
    generalPurposeBit.useDataDescriptor(false);
    assertSame(0, generalPurposeBit.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithLanguageEncodingFlag_eyVW1_gCGn0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    generalPurposeBit.useUTF8ForNames(true);
    byte[] buf = new byte[2];
    generalPurposeBit.encode(buf, 0);
    assertEquals((short) (GeneralPurposeBit.UFT8_NAMES_FLAG), ZipShort.getValue(buf, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode3_dTyL2_nbzP0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    generalPurposeBit.useEncryption(false);
    generalPurposeBit.useStrongEncryption(true);
    generalPurposeBit.useUTF8ForNames(false);
    generalPurposeBit.useDataDescriptor(false);
    assertNotEquals(819, generalPurposeBit.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode2_zDyY1_xibI0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    generalPurposeBit.useEncryption(true);
    generalPurposeBit.useStrongEncryption(false);
    generalPurposeBit.useUTF8ForNames(false);
    generalPurposeBit.useDataDescriptor(false);
    assertNotEquals(819, generalPurposeBit.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithEncryptionFlag_UWSi2_bEEW0() {
    GeneralPurposeBit generalPurposeBit = GeneralPurposeBit.parse(new byte[2], 0);
    generalPurposeBit.useEncryption(true);
    byte[] buf = new byte[2];
    generalPurposeBit.encode(buf, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithStrongEncryptionFlag_uezR3_FCsM0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    generalPurposeBit.useStrongEncryption(true);
    byte[] buf = new byte[2];
    generalPurposeBit.encode(buf, 0);
}
}