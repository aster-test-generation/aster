/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseBoolean_true_jOxr0() {
    byte[] buffer = new byte[1];
    buffer[0] = 1;
    assertTrue(TarUtils.parseBoolean(buffer, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseBoolean_false_KhFV1() {
    byte[] buffer = new byte[1];
    buffer[0] = 0;
    assertFalse(TarUtils.parseBoolean(buffer, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_bHxx0() {
    byte[] buf = new byte[10];
    String name = "test";
    int offset = 0;
    int length = 5;
    int result = TarUtils.formatNameBytes(name, buf, offset, length);
    assertEquals(5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal2_wHVQ1() {
    byte[] buffer = new byte[] { '0', '0', '0', '0' };
    int offset = 0;
    int length = 4;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_IKSK0_1() {
    byte[] buf = new byte[10];
    long value = 123L;
    int offset = 2;
    int length = 5;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(7, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_IKSK0_2() {
    byte[] buf = new byte[10];
    long value = 123L;
    int offset = 2;
    int length = 5;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(' ', buf[offset + length - 2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_IKSK0_3() {
    byte[] buf = new byte[10];
    long value = 123L;
    int offset = 2;
    int length = 5;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_tFQN0() {
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    long result = TarUtils.computeCheckSum(buf);
    assertEquals(15, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSumEmptyArray_EboE1() {
    byte[] buf = new byte[] {};
    long result = TarUtils.computeCheckSum(buf);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytes_kHxw0_1() {
    byte[] buf = new byte[10];
    long value = 123L;
    int offset = 2;
    int length = 6;
    int result = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytes_kHxw0_2() {
    byte[] buf = new byte[10];
    long value = 123L;
    int offset = 2;
    int length = 6;
    int result = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytes_kHxw0_3() {
    byte[] buf = new byte[10];
    long value = 123L;
    int offset = 2;
    int length = 6;
    int result = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(' ', buf[offset + length - 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes1_gcvQ0() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(123L, buf, 0, 9);
    assertEquals(9, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes2_Tehb1() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123L, buf, 0, 9);
    assertEquals(9, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes3_PnWv2() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(0L, buf, 0, 9);
    assertEquals(9, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes4_vgZB3() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(Long.MAX_VALUE, buf, 0, 9);
    assertEquals(9, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes5_dbOO4() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(Long.MIN_VALUE, buf, 0, 9);
    assertEquals(9, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes6_UZct5() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(TarConstants.MAXID, buf, 0, TarConstants.UIDLEN);
    assertEquals(TarConstants.UIDLEN, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_CrdD0() {
    byte[] buffer = new byte[10];
    String result = TarUtils.parseName(buffer, 0, 10);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes_OkGd0_1() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalBytes(123456789L, buf, 0, 10);
    assertEquals(10, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes_OkGd0_2() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalBytes(123456789L, buf, 0, 10);
    assertEquals(' ', buf[9]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes1_sxIB0_1() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(123, buf, 0, 10);
    assertEquals(10, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes2_vkkW1_1() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123, buf, 0, 10);
    assertEquals(10, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes2_vkkW1_2() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123, buf, 0, 10);
    assertEquals((byte) 0xff, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes3_uezK2_1() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(123456789, buf, 0, 10);
    assertEquals(10, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes4_vtkl3_1() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123456789, buf, 0, 10);
    assertEquals(10, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes4_vtkl3_2() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123456789, buf, 0, 10);
    assertEquals((byte) 0xff, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes5_wXrs4_1() {
    byte[] buf = new byte[5];
    int result = TarUtils.formatLongOctalOrBinaryBytes(123, buf, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes6_pmbp5_1() {
    byte[] buf = new byte[5];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123, buf, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes6_pmbp5_2() {
    byte[] buf = new byte[5];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123, buf, 0, 5);
    assertEquals((byte) 0xff, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes7_fWdU6_1() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(Long.MAX_VALUE, buf, 0, 10);
    assertEquals(10, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes7_fWdU6_2() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(Long.MAX_VALUE, buf, 0, 10);
    assertEquals((byte) 0x80, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString1_ltFe0() {
    byte[] buffer = new byte[10];
    TarUtils.formatUnsignedOctalString(0, buffer, 0, 10);
    assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '0', '0', '0'}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString2_Hzua1() {
    byte[] buffer = new byte[10];
    TarUtils.formatUnsignedOctalString(1, buffer, 0, 10);
    assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '0', '0', '1'}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString3_xNWo2() {
    byte[] buffer = new byte[10];
    TarUtils.formatUnsignedOctalString(7, buffer, 0, 10);
    assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '0', '0', '7'}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString4_aNex3() {
    byte[] buffer = new byte[10];
    TarUtils.formatUnsignedOctalString(8, buffer, 0, 10);
    assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '0', '1', '0'}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_InvalidSparseMap_OddLength_kGbh2() {
    String sparseMap = "10,20,30";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_InvalidSparseMap_NegativeValue_GGvA3() {
    String sparseMap = "10,-20,30,40";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
public void testParseOctal7_tGeK6_JQkr0() {
    assertThrows(NullPointerException.class, () -> TarUtils.parseFromPAX01SparseHeaders(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_NumBytesNegative_qaDL2_yRYl0() {
    try {
        TarUtils.parseFromPAX01SparseHeaders("0,-1");
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Sparse struct numbytes contains negative value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_withInvalidSparseMap_TuVC3_zwGH0() {
    String sparseMap = "1,2,3";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_NegativeSparseHeadersCount_GaGz1_AzMb0() {
    String sparseMap = "-1,0";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Sparse struct offset contains negative value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_NegativeSparseOffset_HCTH2_icMI0() {
    String sparseMap = "-1,0,0,0";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Sparse struct offset contains negative value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_HappyPath_HjLM0_KxJb0() {
    try {
        List<TarArchiveStructSparse> result = TarUtils.parseFromPAX01SparseHeaders("0,10,20,30");
        assertNotNull(result);
        assertEquals(2, result.size());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_NullSparseMap_CDVk4_vyXD0() {
    String sparseMap = null;
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_NullSparseMap_CDVk4_BRPD1() throws IOException {
    String sparseMap = null;
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_InvalidSparseEntry_uKed3_fid1() {
    String sparseMap = "1,2,3";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary_binaryNegative_LOeh2_fid1() {
    byte[] buffer = new byte[] {(byte) 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
    long result = TarUtils.parseOctalOrBinary(buffer, 0, 8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary_tooLongBinary_BbII3_fid1() {
    byte[] buffer = new byte[9];
    buffer[0] = (byte) 0xff;
    try {
        TarUtils.parseFromPAX01SparseHeaders("1,2,3,4");
    } catch (IOException e) {
        // pass
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal1_MdSB0_fid1() {
    byte[] buffer = new byte[] { '0', '1', '2', '3' };
    int offset = 0;
    int length = 4;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(83, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal3_DrxK2_fid1() {
    byte[] buffer = new byte[] { ' ', '0', '1', '2', '3' };
    int offset = 0;
    int length = 5;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(83, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal5_KWIw4_fid1() {
    byte[] buffer = new byte[] { '0', '1', '2', '3', '4' };
    int offset = 0;
    int length = 5;
    long result = TarUtils.parseOctal(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal6_EbWu5_fid1() {
    byte[] buffer = new byte[] { '0', '1', '2', '3', '4', '5' };
    int offset = 0;
    int length = 6;
    long result = TarUtils.parseOctal(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyCheckSum1_pPPR0_fid1() {
    byte[] header = new byte[512];
    for (int i = 0; i < 512; i++) {
        header[i] = (byte) i;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyCheckSum3_Tkgc2_fid1() {
    byte[] header = new byte[512];
    for (int i = 0; i < 512; i++) {
        header[i] = (byte) (i * 2);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyCheckSum4_WLrB3_fid1() {
    byte[] header = new byte[512];
    for (int i = 0; i < 512; i++) {
        header[i] = (byte) (i % 2 == 0 ? 0 : 1);
    }
    assertFalse(TarUtils.verifyCheckSum(header));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyCheckSum5_aCrA4_fid1() {
    byte[] header = new byte[512];
    for (int i = 0; i < 512; i++) {
        header[i] = (byte) (i % 3 == 0 ? 0 : 1);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyCheckSum6_wBVK5_fid1() {
    byte[] header = new byte[0];
    // The method verifyCheckSum is not defined in the provided code, 
    // assuming it should return true if the checksum is valid, false otherwise
    // Since the header is empty, it's likely that the method will throw an exception
    try {
        TarUtils.verifyCheckSum(header);
        fail("Expected exception");
    } catch (Exception e) {
        // The test will pass if an exception is thrown
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes7_fkPm6_fid1() {
    byte[] buf = new byte[24]; // Increased buffer size to accommodate 12 bytes
    int result = TarUtils.formatLongOctalOrBinaryBytes(TarConstants.MAXSIZE, buf, 0, 12);
    assertEquals(12, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString5_DQpF4_fid1() {
    byte[] buffer = new byte[10];
    TarUtils.formatUnsignedOctalString(63, buffer, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_IKSK0() {
    byte[] buf = new byte[10];
    long value = 123L;
    int offset = 2;
    int length = 5;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(7, result);
    assertEquals(' ', buf[offset + length - 2]);
    assertEquals(0, buf[offset + length - 1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytes_kHxw0() {
    byte[] buf = new byte[10];
    long value = 123L;
    int offset = 2;
    int length = 6;
    int result = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(8, result);
    assertEquals(0, buf[offset + length - 2]);
    assertEquals(' ', buf[offset + length - 1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes_OkGd0() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalBytes(123456789L, buf, 0, 10);
    assertEquals(10, result);
    assertEquals(' ', buf[9]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes2_vkkW1() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123, buf, 0, 10);
    assertEquals(10, result);
    assertEquals((byte) 0xff, buf[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes4_vtkl3() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123456789, buf, 0, 10);
    assertEquals(10, result);
    assertEquals((byte) 0xff, buf[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes6_pmbp5() {
    byte[] buf = new byte[5];
    int result = TarUtils.formatLongOctalOrBinaryBytes(-123, buf, 0, 5);
    assertEquals(5, result);
    assertEquals((byte) 0xff, buf[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes7_fWdU6() {
    byte[] buf = new byte[10];
    int result = TarUtils.formatLongOctalOrBinaryBytes(Long.MAX_VALUE, buf, 0, 10);
    assertEquals(10, result);
    assertEquals((byte) 0x80, buf[0]);
}
}