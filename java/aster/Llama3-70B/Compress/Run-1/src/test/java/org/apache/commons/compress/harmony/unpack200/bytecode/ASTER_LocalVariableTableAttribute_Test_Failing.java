/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.Arrays;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTableAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_EmptyPool_MAKe1() {
    ClassConstantPool pool = new ClassConstantPool();
    int localVariableTableLength = 0;
    int[] startPcs = {};
    int[] lengths = {};
    CPUTF8[] names = {};
    CPUTF8[] descriptors = {};
    int[] indexes = {};
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    attribute.resolve(pool);
    assert pool.size() == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber3_UptO2() {
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{}, new CPUTF8[]{}, new int[]{});
    List<Integer> byteCodeOffsets = Arrays.asList(1, 2, 3, 4, 5, 6);
    try {
        attribute.renumber(byteCodeOffsets);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_avNf0() {
    ClassConstantPool pool = new ClassConstantPool();
    int localVariableTableLength = 2;
    int[] startPcs = {1, 2};
    int[] lengths = {3, 4};
    CPUTF8[] names = {new CPUTF8("name1"), new CPUTF8("name2")};
    CPUTF8[] descriptors = {new CPUTF8("descriptor1"), new CPUTF8("descriptor2")};
    int[] indexes = {5, 6};
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    attribute.resolve(pool);
    assert pool.size() == 4;
    assert pool.get(0).equals(names[0]);
    assert pool.get(1).equals(descriptors[0]);
    assert pool.get(2).equals(names[1]);
    assert pool.get(3).equals(descriptors[1]);
}
}