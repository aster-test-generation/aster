/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.jar.JarFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_JarFileDoesNotExist_gZcr3() {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    try {
        PackingUtils.copyThroughJar(new JarFile("nonExistingFile.jar"), outputStream);
        fail("Expected IOException");
    } catch (IOException e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConfigWithOptions_cUgX1_usyB0_1() throws IOException {
    PackingOptions options = new PackingOptions();
    options.setLogFile("logFile.log");
    options.setVerbose(true);
    PackingUtils.config(options);
    Logger packingLogger = Logger.getLogger(PackingUtils.class.getName());
    assertTrue(packingLogger.getUseParentHandlers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConfigWithOptions_cUgX1_usyB0_2() throws IOException {
    PackingOptions options = new PackingOptions();
    options.setLogFile("logFile.log");
    options.setVerbose(true);
    PackingUtils.config(options);
    Logger packingLogger = Logger.getLogger(PackingUtils.class.getName());
    assertTrue(packingLogger.isLoggable(Level.INFO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConfigWithOptions_cUgX1_usyB0_3() throws IOException {
    PackingOptions options = new PackingOptions();
    options.setLogFile("logFile.log");
    options.setVerbose(true);
    PackingUtils.config(options);
    Logger packingLogger = Logger.getLogger(PackingUtils.class.getName());
    assertTrue(options.isVerbose()); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_OutputStreamIsNull_xaid2_oBlT0() {
    try {
        JarFile jarFile = new JarFile("test.jar");
        try {
            PackingUtils.getPackingFileListFromJar(jarFile, true);
            fail("Expected IOException");
        } catch (IOException e) {
            assertNotNull(e.getMessage());
        }
    } catch (IOException e) {
    }
}
}