/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZOutputFile_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_kZJR0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.txt"));
    byte[] b = new byte[10];
    sevenZOutputFile.write(b);
    sevenZOutputFile.write(b, 0, b.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withData_kLyU0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.txt"));
    byte[] b = {1, 2, 3};
    sevenZOutputFile.write(b, 0, 3);
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withData_Fnib0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.txt"));
    byte[] data = new byte[] {1, 2, 3};
    sevenZOutputFile.write(data, 0, 3);
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_qTXk0_uLvw0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test"));
    sevenZOutputFile.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_withChannel_zdOx1_MkYN0() throws IOException {
    File file = new File("test");
    file.createNewFile();
    SeekableByteChannel channel = Files.newByteChannel(file.toPath(), StandardOpenOption.WRITE);
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(channel);
    sevenZOutputFile.closeArchiveEntry();
    sevenZOutputFile.close();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_withChannel_zdOx1_MkYN0_fid2() throws IOException {
    File file = new File("test");
    file.createNewFile();
    SeekableByteChannel channel = Files.newByteChannel(file.toPath(), StandardOpenOption.WRITE);
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(channel);
    try {
        sevenZOutputFile.closeArchiveEntry();
        fail("Expected IOException");
    } catch (IOException e) {
        // Expected
    }
    sevenZOutputFile.close();
    assert true;
}
}