/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_true_pVvN0() {
    byte[] signature = {0x5d, 0x00, 0x00};
    int length = 3;
    assertTrue(LZMAUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_length_FVuK1() {
    byte[] signature = {0x5d, 0x00, 0x00};
    int length = 2;
    assertFalse(LZMAUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_signature_cxcv2() {
    byte[] signature = {0x5d, 0x01, 0x00};
    int length = 3;
    assertFalse(LZMAUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_jfju0_ftQP0() {
    String fileName = "test.xz";
    boolean result = LZMAUtils.isLZMACompressionAvailable();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_true_fNEi0_WPTL0() {
    String fileName = "test.xz";
    assertTrue(LZMAUtils.isLZMACompressionAvailable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLZMACompressionAvailable_qRKV0_FKwO0() {
    boolean actual = LZMAUtils.isLZMACompressionAvailable();
    assertTrue(actual);
}
}