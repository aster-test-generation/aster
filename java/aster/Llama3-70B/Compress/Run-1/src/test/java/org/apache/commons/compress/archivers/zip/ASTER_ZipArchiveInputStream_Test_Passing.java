/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_LFH_SIG_sedQ0() {
    byte[] signature = ZipArchiveOutputStream.LFH_SIG.clone();
    assertTrue(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_EOCD_SIG_cNIh1() {
    byte[] signature = ZipArchiveOutputStream.EOCD_SIG.clone();
    assertTrue(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_DD_SIG_TSTR2() {
    byte[] signature = ZipArchiveOutputStream.DD_SIG.clone();
    assertTrue(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_SINGLE_SEGMENT_SPLIT_MARKER_wcAg3() {
    byte[] signature = ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes();
    assertTrue(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_shortSignature_tfde4() {
    byte[] signature = new byte[ZipArchiveOutputStream.LFH_SIG.length - 1];
    assertFalse(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_noMatch_Enxf5() {
    byte[] signature = new byte[ZipArchiveOutputStream.LFH_SIG.length];
    for (int i = 0; i < signature.length; i++) {
        signature[i] = (byte) (i + 1);
    }
    assertFalse(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipNegativeValue_bGqT2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    long value = -10;
    try {
        zipArchiveInputStream.skip(value);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    } catch (IOException e) {
        fail("Unexpected IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount1_umUP0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    assertEquals(0, zipArchiveInputStream.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount2_oZSc1() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    assertEquals(0, zipArchiveInputStream.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount3_imjz2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    assertEquals(0, zipArchiveInputStream.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount4_yaiT3() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
    assertEquals(0, zipArchiveInputStream.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount5_EhgY4() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertEquals(0, zipArchiveInputStream.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_12_UXOm11() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_eKlb0_Ntfz0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.close();
    try {
        zipArchiveInputStream.read(new byte[0]);
    } catch (IOException e) {
        // pass
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_uCFd9_mmup0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    try {
        int bytesRead = zipArchiveInputStream.read(buffer, 0, 0);
        assertEquals(0, bytesRead);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_kDBg13_vEZr0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    byte[] buffer = new byte[0];
    try {
        int bytesRead = zipArchiveInputStream.read(buffer, 0, 0);
        assertEquals(0, bytesRead);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_Qvmt13_wakK0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
    byte[] buffer = new byte[1];
    try {
        int bytesRead = zipArchiveInputStream.read(buffer, 0, 1);
        assertNotNull(buffer);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_Hhfd14_ICtv0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
    byte[] buffer = new byte[1];
    try {
        int bytesRead = zipArchiveInputStream.read(buffer, 0, 1);
        assertEquals(-1, bytesRead);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData1_tALy0_ibqu0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ArchiveEntry archiveEntry = new ZipArchiveEntry();
    assert !zipArchiveInputStream.canReadEntryData(archiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData2_cyAz1_ODzQ0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setMethod(ZipEntry.STORED);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_VJBM3_PfGm0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
    byte[] buffer = new byte[1];
    try {
        int bytesRead = zipArchiveInputStream.read(buffer, 0, 1);
        assertNotNull(buffer);
        assertFalse(bytesRead >= 0);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData1_ybQe0_DEPI0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setCompressedSize(10);
    zipArchiveEntry.setMethod(ZipEntry.DEFLATED);
    assertTrue(zipArchiveInputStream.canReadEntryData(zipArchiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData5_cdda4_hWtR0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test");
    assertFalse(zipArchiveInputStream.canReadEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData5_yDFx4_SgaV0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setCompressedSize(ArchiveEntry.SIZE_UNKNOWN);
    zipArchiveEntry.setMethod(ZipEntry.STORED);
    assertFalse(zipArchiveInputStream.canReadEntryData(zipArchiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData4_nFhq3_aidW0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test");
    assertFalse(zipArchiveInputStream.canReadEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipPositiveValue_xKkU0_kIdc0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    long value =0;
    long skipped = zipArchiveInputStream.skip(value);
    assertEquals(value, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipZeroValue_lopc1_VBkD0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    long value = 0;
    try {
        long skipped = zipArchiveInputStream.skip(value);
        assertEquals(value, skipped);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipEndOfFile_mCmI4_AInl0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    long value = 10;
    try {
        assertEquals(0, zipArchiveInputStream.skip(value));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipLargeValue_RVjI3_liRA0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
    long value = Long.MAX_VALUE;
    try {
        assertEquals(0, zipArchiveInputStream.skip(value));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry1_ZxCL0_nnHF0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_ZTXh5_lCuR0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry12_uVbP11_zaVy0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_MTgk2_ekOc0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_lsBa3_vPxt0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_iupd4_JJkr0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_QxuA5_jyBe0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_ifWW7_sODi0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_aRWA8_kJlk0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry10_EISy9_btVL0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8");
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_dNpB2_Xgxa0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_Opla2_XCXV0() {
    try {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE]));
        assertNotNull(zipArchiveInputStream.getNextEntry());
        fail("Expected IOException to be thrown");
    } catch (IOException e) {
        // Expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_vZIp4_orNH0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE + 1]));
    try {
        zipArchiveInputStream.getNextEntry();
        fail("IOException should be thrown");
    } catch (IOException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_CBEL6_VAlF0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 2]));
    try {
        zipArchiveInputStream.getNextZipEntry();
        fail("IOException was not thrown");
    } catch (IOException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry11_SCVj10_jUWv0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 4]));
    try {
        zipArchiveInputStream.getNextEntry();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Cannot find zip signature within the file", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry15_vSAW14_AEHy0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 6]));
    try {
        assertNull(zipArchiveInputStream.getNextEntry());
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry13_kTmO12_IyBP0() {
    try {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 5]));
        assertNotNull(zipArchiveInputStream.getNextEntry());
    } catch (IOException e) {
        // Expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry17_kvEy16_dFdr0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 7]));
    try {
        assertNotNull(zipArchiveInputStream.getNextEntry());
        fail("Expected IOException to be thrown");
    } catch (IOException e) {
        // Expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry19_CmWF18_vsmP0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE * 8]));
    try {
        zipArchiveInputStream.getNextEntry();
        fail("Expected ZipException");
    } catch (ZipException e) {
        // Expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_Bbol4_GUaZ0() {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x03, (byte) 0x04 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_dkiJ5_ULdr0() {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x01, (byte) 0x02 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_hsTQ6_pHTf0() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x05, (byte) 0x06 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_QPRn7_NXwE0() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x07, (byte) 0x08 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_grVo8_iSmv0() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x09, (byte) 0x10 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry10_oNfX9_AgRP0() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x11, (byte) 0x12 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry11_cUvI10_NxCy0() throws IOException {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x13, (byte) 0x14 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry12_Chgf11_tdRR0() {
    byte[] data = new byte[] { (byte) 0x50, (byte) 0x4b, (byte) 0x15, (byte) 0x16 };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_goNJ1_EbsL0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}));
    try {
        assertNull(zipArchiveInputStream.getNextEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_Itmr2_hsTZ0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x05, 0x06}));
    try {
        assertNull(zipArchiveInputStream.getNextEntry());
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_sQrs3_AZXO0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x07, 0x08}));
    assertNull(zipArchiveInputStream.getNextEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_UnfS4_YiCZ0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x01, 0x02}));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_cnNb6_caYM0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x05, 0x06, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_UJxM7_mkGt0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_ROHV8_RAks0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x01, 0x02, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry10_IqDE9_iSEo0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry11_fgxO10_YDCf0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x05, 0x06, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry12_cALf11_cqus0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry13_MEZR12_lLdQ0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x01, 0x02, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04}));
    try {
        assertNull(zipArchiveInputStream.getNextZipEntry());
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_iMGv1_liUw0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_NopU2_OmRa0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x05, 0x06}));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException should not be thrown, but got: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_1_yDiC0_zJQQ0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = 0;
    try {
        assertEquals(0, zipArchiveInputStream.read(buffer, offset, length));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_2_jSwn1_bheo0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        zipArchiveInputStream.close();
    } catch (IOException e) {
    }
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_3_ojXP2_XPsm0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 1;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
        assertNotNull(e);
    } catch (IOException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_4_msnn3_kKXC0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = -1;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
        assertNotNull(e);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_5_Jxma4_mmUV0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = -1;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
        assertNotNull(e);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_6_CjEh5_xhxl0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    int offset = 0;
    int length = 2;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
        assertNotNull(e);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_3_qVoS2_GVRu0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 1;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_4_QyqA3_hGsM0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = -1;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_5_PGkJ4_DQuq0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    int offset = 0;
    int length = 2;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
}