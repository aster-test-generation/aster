/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_cPew0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setMode(07777);
    assertEquals(07777, dumpArchiveEntry.getMode());
    assertNotNull(dumpArchiveEntry.getPermissions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDeleted_vTHL0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    boolean result = dumpArchiveEntry.isDeleted();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_ZGPr0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals("name", dumpArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_vxTx0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals("name", dumpArchiveEntry.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOffset_fdiC0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setOffset(10L);
    assertEquals(10L, dumpArchiveEntry.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_uNRK0() {
    DumpArchiveEntry dae = new DumpArchiveEntry("name", "simpleName");
    assertTrue(dae.equals(dae));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_TZqD1() {
    DumpArchiveEntry dae = new DumpArchiveEntry("name", "simpleName");
    assertFalse(dae.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_OlMu2() {
    DumpArchiveEntry dae = new DumpArchiveEntry("name", "simpleName");
    assertFalse(dae.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_NuCc0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setVolume(1);
    assertEquals(1, dumpArchiveEntry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSimpleName_JDQR0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setSimpleName("newSimpleName");
    assertEquals("newSimpleName", dumpArchiveEntry.getSimpleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSimpleName_IZIL0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals("simpleName", dumpArchiveEntry.getSimpleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneration_Bkwf0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setGeneration(1);
    assertEquals(1, dumpArchiveEntry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NotDirectory_OODc1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("file", "file");
    entry.setName("file");
    assertEquals("file", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_StartsWithDot_wSgF2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("./file", "file");
    entry.setName("./file");
    assertEquals("file", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_Null_vHHn3() {
    DumpArchiveEntry entry = new DumpArchiveEntry(null, null);
    entry.setName(null);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_Empty_nivu4() {
    DumpArchiveEntry entry = new DumpArchiveEntry("", "");
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_JJdS0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setSize(1024L);
    assertEquals(1024L, dumpArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_kqvW0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setNlink(5);
    assertEquals(5, dumpArchiveEntry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserId_YgTZ0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setUserId(123);
    assertEquals(123, dumpArchiveEntry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupId_vykv0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setGroupId(123);
    assertEquals(123, dumpArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeleted_DHAL0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setDeleted(true);
    assertTrue(dumpArchiveEntry.isDeleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse1_Qdwp0() {
    byte[] buffer = new byte[164 + 512];
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(DumpArchiveConstants.SEGMENT_TYPE.find(DumpArchiveUtil.convert32(buffer, 0)), entry.getHeaderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse2_nCJA1() {
    byte[] buffer = new byte[164 + 512];
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(DumpArchiveUtil.convert32(buffer, 12), entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse4_bQIx3() {
    byte[] buffer = new byte[164 + 512];
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(1000L * DumpArchiveUtil.convert32(buffer, 48) + DumpArchiveUtil.convert32(buffer, 52) / 1000, entry.getAccessTime().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOriginalName_aRqU0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals("name", dumpArchiveEntry.getOriginalName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_cPew0_1() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setMode(07777);
    assertEquals(07777, dumpArchiveEntry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_cPew0_2() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setMode(07777);
    assertNotNull(dumpArchiveEntry.getPermissions());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_IFOH0_fid1() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    Date ctime = new Date();
    dumpArchiveEntry.setCreationTime(ctime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_Directory_eImZ0_fid1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("dir", "dir");
    entry.setName("dir");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_yVeH0_qYMV0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    Date atime = new Date();
    dumpArchiveEntry.setAccessTime(atime);
    assertEquals(atime, dumpArchiveEntry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryFalse_deeb1_subS0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFifo_true_LsGh0_ETTp0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFifo_false_Ggnc1_WzUz0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(entry.isFifo());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_OneNullSummary_MgHg7_LDOK0() {
    DumpArchiveEntry dae1 = new DumpArchiveEntry("name1", "simpleName1");
    DumpArchiveEntry dae2 = new DumpArchiveEntry("name2", "simpleName2");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_WBkt6_hYJL0() {
    DumpArchiveEntry dae1 = new DumpArchiveEntry("name1", "simpleName1");
    DumpArchiveEntry dae2 = new DumpArchiveEntry("name1", "simpleName1");
    assertTrue(dae1.equals(dae2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlkDev_false_eRbH1_sXsv0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(entry.isBlkDev());
}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNlink_NhpX0_WSDb0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(1, dumpArchiveEntry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsChrDev_false_GFFY1_EFwy0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(entry.isChrDev());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntrySize_GLrL0_Exmv0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(0, dumpArchiveEntry.getEntrySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_XIWW0_BNFz0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    int groupId = dumpArchiveEntry.getGroupId();
    assertEquals(0, groupId); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate1_scto0_dXiG0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    byte[] buffer = new byte[1024];
    dumpArchiveEntry.update(buffer);
    assertNotNull(dumpArchiveEntry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate3_ikJJ2_iUXK0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
    byte[] buffer = new byte[1024];
    dumpArchiveEntry.update(buffer);
    assertNotNull(dumpArchiveEntry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate4_nEmU3_oYeE0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    byte[] buffer = new byte[1024];
    buffer[164] = 0;
    dumpArchiveEntry.update(buffer);
    assertNotNull(dumpArchiveEntry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate5_Xcaw4_VmRN0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    byte[] buffer = new byte[1024];
    dumpArchiveEntry.update(buffer);
    assertEquals(0, dumpArchiveEntry.getHeaderCount());
}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate7_yWFe6_uzEx0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    byte[] buffer = new byte[1024];
    buffer[160] =0;
    dumpArchiveEntry.update(buffer);
    assertEquals(1, dumpArchiveEntry.getAccessTime().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate10_bpoz9_oPnj0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    byte[] buffer = new byte[1024];
    dumpArchiveEntry.update(buffer);
    Date accessTime = dumpArchiveEntry.getAccessTime();
    assertNotNull(accessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_false_UFmR1_heQa0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_XCyW0_eEWf0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(0, dumpArchiveEntry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nLnW0_yLQq0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(dumpArchiveEntry.hashCode(), dumpArchiveEntry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderCount_BIIY0_wqWI0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(new Date(0).getTime(), dumpArchiveEntry.getAccessTime().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderHoles_BItK0_WmPX0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(0, dumpArchiveEntry.getHeaderHoles());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTime_QnzS0_gttQ0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    Date creationTime = dumpArchiveEntry.getAccessTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_File_fwyh1_ZiGH0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setSize(1024); // assuming setSize method exists
    assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_true_JamZ0_vMbc0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(false); // This assertion will fail as setType method is not available
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_false_qhjH1_PJZf0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(entry.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolume_sbSH0_MEsj0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(0, dumpArchiveEntry.getVolume());
}
}