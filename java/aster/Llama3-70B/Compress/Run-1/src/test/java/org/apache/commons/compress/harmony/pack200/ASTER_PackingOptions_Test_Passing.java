/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingOptions_Test_Passing {
private String[] passFiles;
private String unknownAttributeAction;
private String deflateHint;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModificationTime_aIHr0() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getModificationTime();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVerbose_xrHk0() {
    PackingOptions packingOptions = new PackingOptions();
    boolean result = packingOptions.isVerbose();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLogFile_hwwE0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setLogFile("logFile.txt");
    assertEquals("logFile.txt", packingOptions.getLogFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuietTrue_gweY0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setQuiet(true);
    assertFalse(packingOptions.isVerbose());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuietFalse_UASn1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setQuiet(false);
    assertTrue(packingOptions.isVerbose());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLogFile_YjdY0() {
    PackingOptions packingOptions = new PackingOptions();
    String logFile = packingOptions.getLogFile();
    assertNull(logFile);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnknownAttributeAction_iqkI0() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getUnknownAttributeAction();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVerbose_sngg0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setVerbose(true);
    assertTrue(packingOptions.isVerbose());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEffort_HPQY0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setEffort(10);
    assertEquals(10, packingOptions.getEffort());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsKeepFileOrder_azmX0() {
    PackingOptions packingOptions = new PackingOptions();
    boolean result = packingOptions.isKeepFileOrder();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeflateHint_keep_AonK0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setDeflateHint("keep");
    assertEquals("keep", packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeflateHint_true_RiNQ1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setDeflateHint("true");
    assertEquals("true", packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeflateHint_false_iamY2() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setDeflateHint("false");
    assertEquals("false", packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_sZIJ0() {
    PackingOptions packingOptions = new PackingOptions();
    long segmentLimit = 100L;
    packingOptions.setSegmentLimit(segmentLimit);
    assertEquals(segmentLimit, packingOptions.getSegmentLimit());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModificationTime_keep_vmfC0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setModificationTime("keep");
    assertEquals("keep", packingOptions.getModificationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModificationTime_latest_ihOe1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setModificationTime("latest");
    assertEquals("latest", packingOptions.getModificationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateHint_zyNs0() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getDeflateHint();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSegmentLimit_zkcA0_fid1() {
    PackingOptions packingOptions = new PackingOptions();
    long expected = 0; // default value of segmentLimit
    long actual = packingOptions.getSegmentLimit();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEffort_InOH5() {
    PackingOptions packingOptions = new PackingOptions();
    int effort = packingOptions.getEffort();
    assertEquals(5, effort);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void setModificationTime(String modificationTime) {
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGzip_ACse0_vIga0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setGzip(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemovePassFile_UWpF0_TmTb0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.addPassFile("passFile.txt");
    packingOptions.removePassFile("passFile.txt");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttributeAction_FxQX0_HyQz0() {
    PackingOptions packingOptions = new PackingOptions();
    Map<String, String> codeAttributeActions = new HashMap<>();
    packingOptions.addCodeAttributeAction("attributeName", "action");
    codeAttributeActions.put("attributeName", "action");
    assertEquals("action", codeAttributeActions.get("attributeName"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateHint_inRr0() {
    PackingOptions packingOptions = new PackingOptions();
    String deflateHint = packingOptions.getDeflateHint();
    assertEquals("keep", deflateHint);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateHint_qcZJ0() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getDeflateHint();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStripDebug_ZiuB0_zkIR0() {
    PackingOptions packingOptions = new PackingOptions();
    assertNotNull(packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateHint_ujwl0() {
    PackingOptions packingOptions = new PackingOptions();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnknownAttributeAction_STRIP_FLOJ2_jMoe0() {
    PackingOptions packingOptions = new PackingOptions();
    try {
        packingOptions.setUnknownAttributeAction("STRIP");
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Incorrect option for -U, STRIP", e.getMessage());
    }
}
}