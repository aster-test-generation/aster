/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_Frfk0() {
    ZipEightByteInteger zip = new ZipEightByteInteger(1L);
    assertTrue(zip.equals(zip));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_EAmh1() {
    ZipEightByteInteger zip1 = new ZipEightByteInteger(1L);
    ZipEightByteInteger zip2 = new ZipEightByteInteger(2L);
    assertFalse(zip1.equals(zip2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withBigInteger_ergz1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("1"));
    assertEquals("ZipEightByteInteger value: " + new BigInteger("1").toString(), zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withLong_XQGm2() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1L);
    assertEquals("ZipEightByteInteger value: " + new BigInteger("1").toString(), zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_withByteArrayOffset_HQNc0() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0);
    byte[] result = zipEightByteInteger.getBytes();
    assertArrayEquals(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_withByteArray_GTye3() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    byte[] result = zipEightByteInteger.getBytes();
    assertArrayEquals(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_with_BigInteger_value_eZWE1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(12345678));
    assertEquals(12345678, zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_with_long_value_ZPDi2() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(12345678);
    assertEquals(12345678, zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ByteOffset_eXLD0() {
    ZipEightByteInteger zip = new ZipEightByteInteger(new byte[8], 0);
    assertEquals(0, zip.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_BigInteger_IOWr1() {
    ZipEightByteInteger zip = new ZipEightByteInteger(BigInteger.ZERO);
    assertEquals(0, zip.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_Long_tdtE2() {
    ZipEightByteInteger zip = new ZipEightByteInteger(0L);
    assertEquals(0, zip.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ByteArray_SEXB3() {
    ZipEightByteInteger zip = new ZipEightByteInteger(new byte[8]);
    assertEquals(0, zip.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue5_NSMh4() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x00;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x00;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
    assertEquals(BigInteger.ZERO, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_ZccV0() {
    byte[] result = ZipEightByteInteger.getBytes(0L);
    assertArrayEquals(new byte[8], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_MhoZ1() {
    BigInteger value = BigInteger.valueOf(0L);
    byte[] result = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(new byte[]{(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_oHwA0_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x12;
    bytes[1] = (byte) 0x34;
    bytes[2] = (byte) 0x56;
    bytes[3] = (byte) 0x78;
    bytes[4] = (byte) 0x90;
    bytes[5] = (byte) 0xAB;
    bytes[6] = (byte) 0xCD;
    bytes[7] = (byte) 0xEF;
    BigInteger result = new BigInteger(1, bytes);
    assertEquals(BigInteger.valueOf(1311768467294899695L), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_withLong_mTpY2_fid1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890123456789L);
    byte[] result = zipEightByteInteger.getBytes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_with_bytes_offset_rBFv0_fid1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0);
    assertEquals(-52642660, zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_with_bytes_nvso3_fid1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    assertEquals(-52642660, zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_KKsm0_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x01;
    bytes[1] = (byte) 0x02;
    bytes[2] = (byte) 0x03;
    bytes[3] = (byte) 0x04;
    bytes[4] = (byte) 0x05;
    bytes[5] = (byte) 0x06;
    bytes[6] = (byte) 0x07;
    bytes[7] = (byte) 0x08;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_wJVt1_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x00;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x01;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_iWXJ2_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x80;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x00;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
    assertEquals(new BigInteger("128"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue4_ihNv3_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x7F;
    bytes[1] = (byte) 0xFF;
    bytes[2] = (byte) 0xFF;
    bytes[3] = (byte) 0xFF;
    bytes[4] = (byte) 0xFF;
    bytes[5] = (byte) 0xFF;
    bytes[6] = (byte) 0xFF;
    bytes[7] = (byte) 0xFF;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
    assertEquals(new BigInteger("18446744073709551487"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue6_Fypw5_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x12;
    bytes[1] = (byte) 0x34;
    bytes[2] = (byte) 0x56;
    bytes[3] = (byte) 0x78;
    bytes[4] = (byte) 0x90;
    bytes[5] = (byte) 0xAB;
    bytes[6] = (byte) 0xCD;
    bytes[7] = (byte) 0xEF;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
    assertEquals(new BigInteger("17279655982273016850"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_GYzv1_fid1() {
    byte[] result = ZipEightByteInteger.getBytes(1L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_withLong_CMde2_iqCK0() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(506097522914839L);
    assertEquals(new BigInteger("506097522914839"), zipEightByteInteger.getValue());
}
}