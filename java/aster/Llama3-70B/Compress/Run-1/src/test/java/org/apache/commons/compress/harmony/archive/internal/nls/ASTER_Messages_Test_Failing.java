/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.archive.internal.nls;
import java.util.Locale;
import java.util.ResourceBundle;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Locale;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Messages_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNullArgs_GgRS0() {
    String result = Messages.format("Hello {}", new Object[]{null});
    assert result.equals("Hello <null>");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatSingleArg_NPCt1() {
    String result = Messages.format("Hello {}", new Object[]{"World"});
    assert result.equals("Hello World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_ODTS0_fid1() {
    String result = Messages.getString("Hello, {}", "World");
    assertEquals("Hello, World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_IvIT0_fid1() {
    String result = Messages.getString("Message: {}", 10);
    assertEquals("Message: 10", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatMultipleArgs_Qmfx2_fid1() {
    String result = Messages.format("Hello {} and {}", new Object[]{"World", "Java"});
    assert result.equals("Hello World and Java");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatEscapedBrace_uyWr3() {
    String result = Messages.format("Hello \\{World}", new Object[]{});
    assert result.equals("Hello {World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatMissingArgument_jBtp4() {
    String result = Messages.format("Hello {} and {}", new Object[]{"World"});
    assert result.equals("Hello World and <missing argument>");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOutOfRangeArgument_Udwz5() {
    String result = Messages.format("Hello {}", new Object[]{});
    assert result.equals("Hello <missing argument>");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNullFormat_fJoQ8() {
    String result = Messages.format(null, new Object[]{});
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNullArgsArray_ISbw9() {
    String result = Messages.format("Hello {}", null);
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_TTrG0() {
    String result = Messages.getString("Hello {} and {}", "World", "Java");
    assertEquals("Hello World and Java", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_hIOe0() {
    String result = Messages.getString("message", 'a');
    assertEquals("messagea", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_lBOV0() {
    Locale locale = new Locale("en", "US");
    ResourceBundle bundle = Messages.setLocale(locale, "messages");
    assertNotNull(bundle);
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_ODTS0_FFhL0() {
        ResourceBundle bundle = Messages.setLocale(Locale.US, "Messages");
        String result = String.format(bundle.getString("Hello"), "World");
        assertEquals("Hello, World", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_BundleIsNull_FIGo0_UHeF0() {
    ResourceBundle bundle = Messages.setLocale(Locale.US, "messages");
    ResourceBundle resourceBundle = ResourceBundle.getBundle("messages", Locale.US);
    if(resourceBundle != null) {
        String result = resourceBundle.getString("message");
        if(result != null) {
            assertEquals("message", result);
        }
    }
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatNullArgs_GgRS0_Ioip0() {
        Locale locale = new Locale("en", "US");
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertNotNull(bundle);
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_IvIT0_JNLL0() {
        Locale locale = new Locale("en", "US");
        ResourceBundle bundle = Messages.setLocale(locale, "Messages");
        String result = String.format(bundle.getString("Message"), 10);
        assertEquals("Message: 10", result);
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_SLOh0() {
        Locale locale = new Locale("en", "US");
        String resource = "messages";
        ResourceBundle result = Messages.setLocale(locale, resource);
        assertNotNull(result);
    }
}