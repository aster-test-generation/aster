/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.FileInputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_TooShort_cQRq6() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET - 1];
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Null_HDds7() {
    assertFalse(TarArchiveInputStream.matches(null, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_LengthZero_CnfB8() {
    byte[] signature = new byte[0];
    assertFalse(TarArchiveInputStream.matches(signature, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry14_jKGv13() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidMagic_OGMG4_dCGc0() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    byte[] invalidMagicBytes = "InvalidMagic".getBytes();
    System.arraycopy(invalidMagicBytes, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose1_BAEb0_FQuN1() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.txt"));
    tarArchiveInputStream.close();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMark1_OUUY0_OzQm0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream);
    tarArchiveInputStream.mark(10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry6_gKfI5_fmMm0_fid2() {
    try {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("file"), 512, 20, "UTF-8");
        TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
        assertNull(tarArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
}