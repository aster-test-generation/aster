/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BinaryTree_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_validInputMultipleValues_wmwI12_QMEs0() throws IOException {
    byte[] encodedTree = new byte[] { (byte) 0x10, (byte) 0x01, (byte) 0x02, (byte) 0x03 };
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(encodedTree);
    BinaryTree tree = BinaryTree.decode(inputStream, 4);
    assertNotNull(tree);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_validInputMultipleValues_wmwI12_QMEs0_fid3() throws IOException {
    byte[] encodedTree = new byte[] { (byte) 0x10, (byte) 0x01, (byte) 0x02, (byte) 0x03 };
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(encodedTree);
    BinaryTree tree = BinaryTree.decode(inputStream, 3);
    assertNotNull(tree);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_validInputSingleValue_qADO13_aQTa0() throws IOException {
    byte[] encodedTree = new byte[] { (byte) 0x01, (byte) 0x01 };
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(encodedTree);
    BinaryTree tree = BinaryTree.decode(inputStream, 1);
    assertNotNull(tree);
}
}