/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.Collections;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPoolArrayCache_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayIsCached_withUncachedArray_ZcRg1() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[] {"a", "b", "c"};
    assertFalse(cache.arrayIsCached(array));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_indexesForArrayKey_cacheMiss_ixBA0() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[] {"a", "b", "c"};
    String key = "b";
    List<Integer> expected = Arrays.asList(1);
    List<Integer> actual = cache.indexesForArrayKey(array, key);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_indexesForArrayKey_cacheHit_QzhD1() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[] {"a", "b", "c"};
    String key = "b";
    cache.indexesForArrayKey(array, key);
    List<Integer> expected = Arrays.asList(1);
    List<Integer> actual = cache.indexesForArrayKey(array, key);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_indexesForArrayKey_keyNotFound_WlvQ2() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[] {"a", "b", "c"};
    String key = "d";
    List<Integer> expected = Collections.emptyList();
    List<Integer> actual = cache.indexesForArrayKey(array, key);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_indexesForArrayKey_emptyArray_yCGX3() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[] {};
    String key = "a";
    List<Integer> expected = Collections.emptyList();
    List<Integer> actual = cache.indexesForArrayKey(array, key);
    assertEquals(expected, actual);
}
}