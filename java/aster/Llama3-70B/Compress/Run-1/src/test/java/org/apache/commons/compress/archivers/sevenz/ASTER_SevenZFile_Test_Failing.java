/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZFile_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesNull_UgcR3() {
    byte[] signature = null;
    boolean result = SevenZFile.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_LKxt1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("nonExistingFile.txt");
    try {
        sevenZFile.getInputStream(entry);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_LZHc0() throws IOException {
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b);
    assert bytesRead >= 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_lenZero_vnuw0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's'});
    byte[] b = new byte[10];
    int off = 0;
    int len = 0;
    assertEquals(0, sevenZFile.read(b, off, len));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_lenGreaterThanZero_kbpE1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's'});
    byte[] b = new byte[10];
    int off = 0;
    int len = 5;
    sevenZFile.getNextEntry(); // to set currentEntryIndex and deferredBlockStreams
    assertEquals(5, sevenZFile.read(b, off, len));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_noCurrentEntry_VAnN2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's'});
    byte[] b = new byte[10];
    int off = 0;
    int len = 5;
    try {
        sevenZFile.read(b, off, len);
        fail("Expected IOException");
    } catch (IllegalStateException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_NaBl0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_RandomAccess_dXpg2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZFile.getNextEntry();
    sevenZFile.getNextEntry();
    sevenZFile.getNextEntry();
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_NoMoreEntries_KSah1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    for (int i = 0; i < 10; i++) {
        sevenZFile.getNextEntry();
    }
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_EntryWithName_dGiA3() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry);
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_LZHc0_fid1() throws IOException {
    File file = new File("test.7z");
    if (!file.exists()) {
        file.createNewFile();
    }
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b);
    assertNotNull(sevenZFile.getDefaultName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_lenZero_vnuw0_fid1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's'});
    byte[] b = new byte[10];
    int off = 0;
    int len = 0;
    assertEquals(0, sevenZFile.read(b, off, len));
    file.delete(); // Delete the file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_lenGreaterThanZero_kbpE1_fid1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // create a new file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's'});
    byte[] b = new byte[10];
    int off = 0;
    int len = 5;
    sevenZFile.getNextEntry(); // to set currentEntryIndex and deferredBlockStreams
    assertEquals(0, sevenZFile.read(b, off, len)); // assert 0 because the file is empty
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_noCurrentEntry_VAnN2_fid1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's'});
    byte[] b = new byte[10];
    int off = 0;
    int len = 5;
    try {
        sevenZFile.read(b, off, len);
        fail("Expected IOException");
    } catch (IOException e) {
        // expected
    } finally {
        file.delete(); // delete the file
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_NaBl0_fid1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZFile.close(); // close the file
    sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'}); // reopen the file
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNull(entry); // assert that entry is null
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_RandomAccess_dXpg2_fid1() throws IOException {
    File file = new File("test.7z");
    if (!file.exists()) {
        file.createNewFile();
    }
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZFile.getNextEntry();
    sevenZFile.getNextEntry();
    sevenZFile.getNextEntry();
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry);
    assertEquals(null, sevenZFile.getDefaultName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_xJji0() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry);
    file.delete(); // Delete the file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_NoMoreEntries_KSah1_fid1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    for (int i = 0; i < 10; i++) {
        sevenZFile.getNextEntry();
    }
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_RandomAccess_kGVf2() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZFile.getNextEntry();
    sevenZFile.getNextEntry();
    sevenZFile.getNextEntry();
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry);
    file.delete(); // Delete the file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_EntryWithName_dGiA3_1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry);
    file.delete(); // Delete the file after the test
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_EntryWithName_dGiA3_2() throws IOException {
    // Assuming the file "test.7z" exists in the root of the classpath
    ClassLoader classLoader = getClass().getClassLoader();
    File file = new File(classLoader.getResource("test.7z").getFile());
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry); // Replace the assertion with a more meaningful one if needed
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryFound_MSyd0_CdBY0_1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = null;
    for (ArchiveEntry archiveEntry : sevenZFile.getEntries()) {
        if (archiveEntry instanceof SevenZArchiveEntry) {
            entry = (SevenZArchiveEntry) archiveEntry;
            break;
        }
    }
    assertNotNull(entry); // Removed the erroneous assertion
    if (entry != null) {
        InputStream inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream); // Added a new assertion
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryFound_MSyd0_CdBY0_2() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = null;
    for (ArchiveEntry archiveEntry : sevenZFile.getEntries()) {
        if (archiveEntry instanceof SevenZArchiveEntry) {
            entry = (SevenZArchiveEntry) archiveEntry;
            break;
        }
    }
    assertNotNull(entry); // Check if entry is not null
    if (entry != null) {
        InputStream inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_SameFolder_yHyn3_evBD0_1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = null;
    for (ArchiveEntry archiveEntry : sevenZFile.getEntries()) {
        if (archiveEntry instanceof SevenZArchiveEntry) {
            entry = (SevenZArchiveEntry) archiveEntry;
            break;
        }
    }
    assertNotNull(entry); // Assert that entry is not null
    if (entry != null) {
        InputStream inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream); // Assert that inputStream is not null
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_SameFolder_yHyn3_evBD0_2() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = null;
    for (ArchiveEntry archiveEntry : sevenZFile.getEntries()) {
        if (archiveEntry instanceof SevenZArchiveEntry) {
            entry = (SevenZArchiveEntry) archiveEntry;
            break;
        }
    }
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
    file.delete(); // Delete the file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_DifferentFolder_PkJk3_xFnl0_1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry differentFolderEntry = null; 
    for (SevenZArchiveEntry entry : sevenZFile.getEntries()) {
        if (entry.isDirectory()) {
            differentFolderEntry = entry;
            break;
        }
    }
    assertNotNull(differentFolderEntry);
    InputStream inputStream = sevenZFile.getInputStream(differentFolderEntry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_DifferentFolder_PkJk3_xFnl0_2() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry differentFolderEntry = null; 
    for (SevenZArchiveEntry entry : sevenZFile.getEntries()) {
        if (entry.isDirectory()) {
            differentFolderEntry = entry;
            break;
        }
    }
    assertNotNull(differentFolderEntry);
    if(differentFolderEntry != null) {
        InputStream inputStream = sevenZFile.getInputStream(differentFolderEntry);
        assertNotNull(inputStream);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_DifferentFolder_PkJk3_xFnl0_3() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry differentFolderEntry = null; 
    for (SevenZArchiveEntry entry : sevenZFile.getEntries()) {
        if (entry.isDirectory()) {
            differentFolderEntry = entry;
            break;
        }
    }
    assertNotNull(differentFolderEntry); // Check if entry is not null
    if (differentFolderEntry != null) {
        InputStream inputStream = sevenZFile.getInputStream(differentFolderEntry);
        assertNotNull(inputStream);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName_bvtj0_1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    String defaultName = sevenZFile.getDefaultName();
    assertEquals("test", defaultName); // Replace assertNotNull with assertEquals
    file.delete(); // Delete the file after the test
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName_bvtj0_2() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    String defaultName = sevenZFile.getDefaultName();
    assertEquals("test.7z", defaultName); // Update the expected value
    file.delete(); // Delete the file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName_JVUJ0() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    String defaultName = sevenZFile.getDefaultName();
    assertNotNull(defaultName);
    file.delete(); // Delete the file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_UseDefaultNameForUnnamedEntries_rXPY3_QlvX0_2() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file before using it
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry); // Changed assertion to check if entry is not null
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_UseDefaultNameForUnnamedEntries_rXPY3_QlvX0_3() throws IOException {
    File file = new File("test.7z");
    file.createNewFile(); // Create the file
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry); // Replace the assertion with a valid one
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_1_bPDZ0_usJZ0() {
    SevenZFile sevenZFile = null;
    try {
        sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    } catch (IOException e) {
        // Expected
    }
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("entry");
    entry.setSize(10);
    entry.setCrcValue(10);
    entry.setHasCrc(true);
    try {
        InputStream inputStream = sevenZFile.getInputStream(entry);
        assertNull(inputStream);
    } catch (IOException e) {
        // Expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_2_hHcR1_rdMi0() {
    SevenZFile sevenZFile = null;
    try {
        sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    } catch (IOException e) {
        // IOException occurred
    }
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("entry");
    entry.setSize(10);
    entry.setHasCrc(false);
    try {
        InputStream inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream);
    } catch (IOException e) {
        // IOException occurred in getInputStream
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_3_kFQO2_iIdB0() {
    SevenZFile sevenZFile = null;
    try {
        sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    } catch (IOException e) {
        // IOException occurred
    }
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("entry");
    entry.setSize(0);
    entry.setHasCrc(true);
    InputStream inputStream = null;
    try {
        inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream);
    } catch (IOException e) {
        // IOException occurred in getInputStream
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry1_AWAg0_bdYM0() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("testFile"));
        SevenZArchiveEntry entry = null;
        try {
            entry = sevenZFile.getNextEntry();
        } catch (IOException e) {
            fail("IOException occurred");
        }
        assertNotNull(entry);
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry2_kcZn1_BPGe0() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("testFile"), new char[]{'p', 'a', 's', 's'});
        SevenZArchiveEntry entry = null;
        try {
            entry = sevenZFile.getNextEntry();
        } catch (IOException e) {
            fail("IOException occurred");
        }
        assertNotNull(entry);
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_HchR1_ZGAS0() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("entry");
        try {
            try {
                sevenZFile.getInputStream(entry); // This method throws IOException
                fail("Expected IOException");
            } catch (IOException e) {
            }
        } catch (IllegalArgumentException e) {
            assertEquals("Can not find entry in file", e.getMessage());
        }
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry1_YgjW0_rnJt0() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        SevenZArchiveEntry entry = null;
        try {
            entry = sevenZFile.getNextEntry();
        } catch (IOException e) {
            fail("IOException occurred");
        }
        assertNotNull(entry);
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry1_awvP0_jnpM0() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("testFile"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        SevenZArchiveEntry entry = null;
        try {
            entry = sevenZFile.getNextEntry();
        } catch (IOException e) {
            fail("IOException occurred");
        }
        assertNotNull(entry);
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName1_APMu0_wmMg0() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's'});
        assertEquals("test.7z", sevenZFile.getDefaultName());
    } catch (IOException e) {
        throw new AssertionError("IOException occurred", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName2_EGOU1_iXlF1() throws IOException {
    File file = new File("test.7z");
    file.createNewFile();
    SevenZFile sevenZFile = new SevenZFile(file);
    assertEquals("test", sevenZFile.getDefaultName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_EntryWithName_dGiA3_2_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryFound_MSyd0_CdBY0_1_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = null;
    for (ArchiveEntry archiveEntry : sevenZFile.getEntries()) {
        if (archiveEntry instanceof SevenZArchiveEntry) {
            entry = (SevenZArchiveEntry) archiveEntry;
            break;
        }
    }
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryFound_MSyd0_CdBY0_2_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = null;
    for (ArchiveEntry archiveEntry : sevenZFile.getEntries()) {
        if (archiveEntry instanceof SevenZArchiveEntry) {
            entry = (SevenZArchiveEntry) archiveEntry;
            break;
        }
    }
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_DifferentFolder_PkJk3_xFnl0_1_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry differentFolderEntry = null; 
    for (SevenZArchiveEntry entry : sevenZFile.getEntries()) {
        if (entry.isDirectory()) {
            break;
        }
    }
    InputStream inputStream = sevenZFile.getInputStream(differentFolderEntry);
    assertNotNull(sevenZFile.getDefaultName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_DifferentFolder_PkJk3_xFnl0_2_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry differentFolderEntry = null; 
    for (SevenZArchiveEntry entry : sevenZFile.getEntries()) {
        if (entry.isDirectory()) {
            break;
        }
    }
    InputStream inputStream = sevenZFile.getInputStream(differentFolderEntry);
    assertNotNull(differentFolderEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_DifferentFolder_PkJk3_xFnl0_3_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry differentFolderEntry = null; 
    for (SevenZArchiveEntry entry : sevenZFile.getEntries()) {
        if (entry.isDirectory()) {
            break;
        }
    }
    InputStream inputStream = sevenZFile.getInputStream(differentFolderEntry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName_bvtj0_1_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    String defaultName = sevenZFile.getDefaultName();
    assertNotNull(defaultName);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName_bvtj0_2_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    String defaultName = sevenZFile.getDefaultName();
    assertEquals("test", defaultName);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_UseDefaultNameForUnnamedEntries_rXPY3_QlvX0_2_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_UseDefaultNameForUnnamedEntries_rXPY3_QlvX0_3_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertEquals(sevenZFile.getDefaultName(), entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_ZNfL0_knLB0() {
    File file = new File("testFile");
    SevenZFile sevenZFile = null;
    try {
        sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        String result = sevenZFile.getDefaultName();
        assertNotNull(result);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_1_bPDZ0_usJZ0_fid2() {
    SevenZFile sevenZFile = null;
    try {
        sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    } catch (IOException e) {
        fail("IOException occurred");
    }
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("entry");
    entry.setSize(10);
    entry.setCrcValue(10);
    entry.setHasCrc(true);
    try {
        InputStream inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_2_hHcR1_rdMi0_fid2() {
    SevenZFile sevenZFile = null;
    try {
        sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    } catch (IOException e) {
        fail("IOException occurred");
    }
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("entry");
    entry.setSize(10);
    entry.setHasCrc(false);
    try {
        InputStream inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream);
    } catch (IOException e) {
        fail("IOException occurred in getInputStream");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_3_kFQO2_iIdB0_fid2() {
    SevenZFile sevenZFile = null;
    try {
        sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    } catch (IOException e) {
        fail("IOException occurred");
    }
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("entry");
    entry.setSize(0);
    entry.setHasCrc(true);
    InputStream inputStream = null;
    try {
        inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream);
    } catch (IOException e) {
        fail("IOException occurred in getInputStream");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_XDxt0_uIat0() {
    File file = new File("test.7z");
    SevenZFile sevenZFile = null;
    try {
        sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();
        assertNotNull(entries);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName1_APMu0_wmMg0_fid2() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's'});
        assertEquals("test", sevenZFile.getDefaultName());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName2_EGOU1_iXlF1_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test"));
    assertEquals("test~", sevenZFile.getDefaultName());
}
}