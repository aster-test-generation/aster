/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X7875_NewUnix_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_OkUJ0() {
    X7875_NewUnix x = new X7875_NewUnix();
    ZipShort headerId = x.getHeaderId();
    assertNotNull(headerId);
    assertEquals(1234, headerId.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_InvalidUidSize_gypx1() {
    X7875_NewUnix unix = new X7875_NewUnix();
    byte[] data = new byte[5];
    data[2] = (byte) 10;
    try {
        unix.parseFromLocalFileData(data, 0, 5);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X7875_NewUnix invalid: uidSize 10 doesn't fit into 5 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_InvalidGidSize_pvaG2() {
    X7875_NewUnix unix = new X7875_NewUnix();
    byte[] data = new byte[7];
    data[2] = (byte) 2;
    data[4] = (byte) 10;
    try {
        unix.parseFromLocalFileData(data, 0, 7);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X7875_NewUnix invalid: gidSize 10 doesn't fit into 7 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_GVhc0() {
    X7875_NewUnix unix = new X7875_NewUnix();
    long uid = unix.getUID();
    assertEquals(0, uid);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_OkUJ0_2() {
    X7875_NewUnix x = new X7875_NewUnix();
    ZipShort headerId = x.getHeaderId();
    assertEquals(1234, headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_GQYU0_dQdv0() {
    X7875_NewUnix unix = new X7875_NewUnix();
    unix.setGID(123L);
    assertArrayEquals(new byte[] {0, 0, 0, 0, 0, 0, 0, 39}, unix.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUID_tRjo0_sYyE0() {
    X7875_NewUnix unix = new X7875_NewUnix();
    unix.setUID(123L);
    assertArrayEquals(new byte[]{(byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 123}, unix.getLocalFileDataData());
}
}