/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ResourceAlignmentExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllowMethodChange_withAlignmentAndAllowMethodChange_OimQ0() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(10, true);
    assertTrue(extraField.allowMethodChange());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllowMethodChange_withAlignment_TlVc1() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(10);
    assertFalse(extraField.allowMethodChange());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllowMethodChange_withNoArgs_KMHl2() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField();
    assertFalse(extraField.allowMethodChange());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllowMethodChange_withAlignmentAndAllowMethodChangeAndPadding_CExT3() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(10, true, 20);
    assertTrue(extraField.allowMethodChange());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData2_ybjp1() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(20);
    byte[] data = extraField.getCentralDirectoryData();
    assertArrayEquals(new byte[] {20, 0}, data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_KEEh0() {
    ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true);
    ZipShort zipShort = resourceAlignmentExtraField.getCentralDirectoryLength();
    assertEquals(2, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_ShortContent_ThrowsZipException_glYR0() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField();
    byte[] buffer = new byte[1];
    try {
        extraField.parseFromCentralDirectoryData(buffer, 0, 1);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): 1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment1_Nsia0() {
    ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(10, true);
    short expected = 10;
    short actual = resourceAlignmentExtraField.getAlignment();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment2_Uwtf1() {
    ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(20);
    short expected = 20;
    short actual = resourceAlignmentExtraField.getAlignment();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment3_vzbZ2() {
    ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
    short expected = 0;
    short actual = resourceAlignmentExtraField.getAlignment();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment4_cyEN3() {
    ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(30, true, 10);
    short expected = 30;
    short actual = resourceAlignmentExtraField.getAlignment();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_NormalContent_AllowMethodChange_JsIL2_aoCb0() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(2, true);
    int BASE_SIZE = 5; 
    byte[] buffer = new byte[BASE_SIZE];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) (1 | 0x02); 
    buffer[2] = (byte) 0x00;
    buffer[3] = (byte) 0x00;
    buffer[4] = (byte) 0x02; 
    assertEquals((short) 2, extraField.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData1_JMvX0_fid2() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(10, true);
    byte[] data = extraField.getCentralDirectoryData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_jUWo0_fid2() {
    ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(10, true, 5);
    ZipShort zipShort = resourceAlignmentExtraField.getLocalFileDataLength();
    assertArrayEquals(ZipShort.getBytes(7), zipShort.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData1_FhiU0_obwW0_fid2() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(10, true);
    byte[] data = extraField.getLocalFileDataData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ofSD0_nxUJ0_fid2() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(0, true);
    byte[] buffer = new byte[10];
    try {
        extraField.parseFromLocalFileData(buffer, 0, 10);
    } catch (ZipException e) {
        fail("ZipException should not be thrown");
    }
    assertEquals(0, extraField.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData2_aRTZ1_SrUO0_fid2() {
    ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(20, false, 5);
    byte[] data = extraField.getLocalFileDataData();
    int BASE_SIZE = 3; // Initialize BASE_SIZE
}
}