/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentValue_fYtB2() {
    ZipShort zipShort1 = new ZipShort(1);
    ZipShort zipShort2 = new ZipShort(2);
    assertFalse(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_BVGT0() {
    byte[] buf = new byte[2];
    ZipShort.putShort(0x1234, buf, 0);
    assertArrayEquals(new byte[]{(byte) 0x34, (byte) 0x12}, buf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withIntValue_EPNa1() {
    ZipShort zipShort = new ZipShort(10);
    assertEquals("ZipShort value: 10", zipShort.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_withIntValue_gNfp1() {
    ZipShort zipShort = new ZipShort(123);
    assertEquals(123, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_intValue_QufG1() {
    ZipShort zipShort = new ZipShort(10);
    assertEquals(10, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_WPWS1() {
    byte[] bytes = new byte[] {0, 0};
    assertEquals(0, ZipShort.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_MCBH2() {
    byte[] bytes = new byte[] {(byte) 0x80, 0};
    assertEquals(128, ZipShort.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue4_nMpT3() {
    byte[] bytes = new byte[] {(byte) 0x7F, 0};
    assertEquals(127, ZipShort.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue7_QhHd6() {
    byte[] bytes = new byte[] {(byte) 0x80, (byte) 0x80};
    assertEquals(32896, ZipShort.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ByteOffset_JGIL0_1() {
    ZipShort zipShort = new ZipShort(new byte[10], 0);
    Object clone = zipShort.clone();
    assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ByteOffset_JGIL0_2() {
    ZipShort zipShort = new ZipShort(new byte[10], 0);
    Object clone = zipShort.clone();
    assertNotSame(zipShort, clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_IntValue_LSHp1_1() {
    ZipShort zipShort = new ZipShort(10);
    Object clone = zipShort.clone();
    assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_IntValue_LSHp1_2() {
    ZipShort zipShort = new ZipShort(10);
    Object clone = zipShort.clone();
    assertNotSame(zipShort, clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ByteArray_vMrx2_1() {
    ZipShort zipShort = new ZipShort(new byte[10]);
    Object clone = zipShort.clone();
    assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ByteArray_vMrx2_2() {
    ZipShort zipShort = new ZipShort(new byte[10]);
    Object clone = zipShort.clone();
    assertNotSame(zipShort, clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_BBAy0() {
    byte[] result = ZipShort.getBytes(0);
    assertArrayEquals(new byte[] {0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes4_LFHz3() {
    byte[] result = ZipShort.getBytes(65535);
    assertArrayEquals(new byte[] {(byte) 0xFF, (byte) 0xFF}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes5_NSUv4() {
    byte[] result = ZipShort.getBytes(-1);
    assertArrayEquals(new byte[] {(byte) 0xFF, (byte) 0xFF}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_lCuW0_fid1() {
    byte[] bytes = new byte[2];
    ZipShort zipShort = new ZipShort(bytes);
    assertTrue(zipShort.equals(zipShort));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_tCyW1_fid1() {
    Object obj = new Object();
    ZipShort zipShort = new ZipShort(new byte[2]);
    assertFalse(zipShort.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withByteArrayOffset_Rsrw0_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2}, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withByteArray_sXAF2_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2});
    assertEquals("ZipShort value: 513", zipShort.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_withByteArrayOffset_fWgV0_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2}, 0);
    assertEquals(513, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_withByteArray_hBEh2_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2});
    assertEquals(513, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArrayOffset_nUwU0_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2}, 0);
    assertEquals(513, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArray_fgPp2_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue5_hkZG4_fid1() {
    byte[] bytes = new byte[] {0, (byte) 0x80};
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue6_bKug5_fid1() {
    byte[] bytes = new byte[] {0, (byte) 0x7F};
    assertEquals(32512, ZipShort.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_VRUB7_fid1() {
    byte[] bytes = new byte[] {(byte) 0x7F, (byte) 0x7F};
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_kgKL8_fid1() {
    byte[] bytes = new byte[] {(byte) 0x80, (byte) 0x7F};
    assertEquals(32640, ZipShort.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_toFp9_fid1() {
    byte[] bytes = new byte[] {(byte) 0x7F, (byte) 0x80};
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_TNRi0_fid1() {
    byte[] bytes = new byte[] {0x12, 0x34, 0x56, 0x78};
    int offset = 1;
    int result = ZipShort.getValue(bytes, offset);
}
}