/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteCode_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargets_WNTV0() {
    ByteCode byteCode = new ByteCode(1);
    int[] byteCodeTargets = new int[]{1, 2, 3};
    byteCode.setByteCodeTargets(byteCodeTargets);
    assertArrayEquals(byteCodeTargets, byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewrite_QWvm0() {
    ByteCode byteCode = new ByteCode(1);
    int[] rewrite = new int[1];
    byteCode.setRewrite(rewrite);
    assertArrayEquals(rewrite, byteCode.getRewrite());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_invalidFirstOperandIndex_omtc1() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = {1, 2, 3};
    byteCode.getByteCodeForm().firstOperandIndex(); // assume this returns 0
    try {
        byteCode.setOperandBytes(operands);
        assert false;
    } catch (Error e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_invalidOperandLength_vIGs2() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = {1, 2};
    byteCode.getByteCodeForm().operandLength(); // assume this returns 3
    try {
        byteCode.setOperandBytes(operands);
        assert false;
    } catch (Error e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoArg_eATv0_1() {
    ByteCode byteCode = ByteCode.getByteCode(0x10);
    assertNotNull(byteCode);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoArg_eATv0_2() {
    ByteCode byteCode = ByteCode.getByteCode(0x10);
    assertEquals(0x10, byteCode.getOpcode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_HasOperand_qmwg1_1() {
    ByteCode byteCode = ByteCode.getByteCode(0x11);
    assertNotNull(byteCode);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_HasOperand_qmwg1_2() {
    ByteCode byteCode = ByteCode.getByteCode(0x11);
    assertEquals(0x11, byteCode.getOpcode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByte_firstOperandIndexLessThanOne_WwkI1() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperandByte(10, 1);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite " + byteCode + " that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_TvxB0() {
    ByteCode byteCode = new ByteCode(1);
    int expected = System.identityHashCode(byteCode);
    int actual = byteCode.hashCode();
    assert actual == expected;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_WoIi0() {
    ByteCode byteCode = new ByteCode(1);
    assertNotNull(byteCode.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewrite_OjVD0() {
    ByteCode byteCode = new ByteCode(1);
    int[] rewrite = byteCode.getRewrite();
    assertNotNull(rewrite);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_uzGc0() {
    ByteCode bytecode = new ByteCode(1);
    assertTrue(bytecode.equals(bytecode));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_aLIy1() {
    ByteCode bytecode1 = new ByteCode(1);
    ByteCode bytecode2 = new ByteCode(2);
    assertFalse(bytecode1.equals(bytecode2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EJYY0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[]{});
    ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeForm_JKni0() {
    ByteCodeForm byteCodeForm = ByteCodeForm.get(1);
    ByteCode byteCode = new ByteCode(byteCodeForm.getOpcode());
    assertSame(byteCodeForm, byteCode.getByteCodeForm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_OsZu0() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][]{{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    assertArrayEquals(nestedPositions, byteCode.getNestedPositions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_withoutNestedEntries_tvOH2() {
    ClassConstantPool pool = new ClassConstantPool();
    ByteCode byteCode = new ByteCode(1);
    byteCode.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode_fAuB0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(1, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasMultipleByteCodes_WOAj0() {
    ByteCode byteCode = new ByteCode(1);
    assertFalse(byteCode.hasMultipleByteCodes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPool_CvJe0_fid1() {
    ByteCode byteCode = new ByteCode(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_validOperands_EOHS0_fid1() {
    ByteCode byteCode = new ByteCode(1);
    // The method setOperandBytes does not exist in the ByteCode class
    // Therefore, we cannot call it. We can only call the method setByteCodeIndex
    byteCode.setByteCodeIndex(1);
    // No assertion is needed as the method does not return any value
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_Cached_Laid2_fid1() {
    ByteCode byteCode1 = ByteCode.getByteCode(0x10);
    ByteCode byteCode2 = ByteCode.getByteCode(0x10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByte_positionGreaterThanByteCodeFormLength_IeoV2_fid1() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperandByte(10, 10);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite aconst_null that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_eBXV0_fid1() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals("aconst_null", byteCode.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_AIRh0_fid1() {
    ByteCode byteCode = new ByteCode(1);
    assertNull(byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoArg_eATv0() {
    ByteCode byteCode = ByteCode.getByteCode(0x10);
    assertNotNull(byteCode);
    assertEquals(0x10, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_HasOperand_qmwg1() {
    ByteCode byteCode = ByteCode.getByteCode(0x11);
    assertNotNull(byteCode);
    assertEquals(0x11, byteCode.getOpcode());
}
}