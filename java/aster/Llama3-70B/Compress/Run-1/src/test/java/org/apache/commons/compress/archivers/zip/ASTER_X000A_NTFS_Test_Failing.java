/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_quYk0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime time = FileTime.fromMillis(1000);
    x000A_NTFS.setAccessFileTime(time);
    assertEquals(1000, x000A_NTFS.getAccessTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_fhUs0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort zipShort = x000A_NTFS.getLocalFileDataLength();
    byte[] bytes = zipShort.getBytes();
    int value = ZipShort.getValue(bytes);
    assertEquals(26, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_cxwP0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] expected = new byte[x000A_NTFS.getLocalFileDataLength().getValue()];
    byte[] actual = x000A_NTFS.getLocalFileDataData();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_FjvH0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    String result = x000A_NTFS.toString();
    assertEquals("0x000A Zip Extra Field: Modify:[" + x000A_NTFS.getModifyFileTime() + "] Access:[" + x000A_NTFS.getAccessFileTime() + "] Create:[" + x000A_NTFS.getCreateFileTime() + "] ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_panZ0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime time = FileTime.fromMillis(1000);
    x000A_NTFS.setCreateFileTime(time);
    ZipEightByteInteger createTime = x000A_NTFS.getCreateTime();
    assertEquals(11644473600000L, createTime.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_FjvH0_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    String result = x000A_NTFS.toString();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TimeAttrTagNotFound_nWqm1_xPqF0_1() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] {0, 1, 2, 3, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19};
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertNull(x000A_NTFS.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TimeAttrTagNotFound_nWqm1_xPqF0_2() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] {0, 1, 2, 3, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19};
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertNull(x000A_NTFS.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TimeAttrTagNotFound_nWqm1_xPqF0_3() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] {0, 1, 2, 3, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19};
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertNull(x000A_NTFS.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_KPiN0_jOBu0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date(123456789L);
    x000A_NTFS.setAccessJavaTime(date);
    FileTime expected = FileTimes.ntfsTimeToFileTime(123456789L);
    assertEquals(expected, x000A_NTFS.getAccessFileTime());
}
}