/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentOptions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasCPNumberCounts_false_HzKj1_XDwV0() {
    SegmentOptions segmentOptions;
    try {
        segmentOptions = new SegmentOptions(0);
    } catch (Pack200Exception e) {
        throw new RuntimeException(e);
    }
    assertFalse(segmentOptions.hasFileModtime()); // Changed the method call to hasFileModtime()
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasFieldFlagsHi_false_JZiN1_UbTt0() {
    try {
        SegmentOptions segmentOptions = new SegmentOptions(0); // error: unreported exception Pack200Exception; must be caught or declared to be thrown
        assertFalse(segmentOptions.hasFileModtime());
    } catch (Pack200Exception e) {
        fail("Should not throw Pack200Exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasFieldFlagsHi_false_JZiN1_uLyM1() throws Pack200Exception {
    SegmentOptions segmentOptions = new SegmentOptions(0);
    assertFalse(segmentOptions.hasFileModtime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasClassFlagsHi_false_Clat1_uZVm0() throws Pack200Exception {
    SegmentOptions segmentOptions = new SegmentOptions(0); // This line has been fixed
    assertFalse(segmentOptions.hasClassFlagsHi());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasClassFlagsHi_false_Clat1_IoSo1() {
    try {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        assertFalse(segmentOptions.hasClassFlagsHi());
    } catch (Pack200Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasFileSizeHi_false_IiKt1_eMZl0() {
    SegmentOptions segmentOptions = null;
    try {
        segmentOptions = new SegmentOptions(0);
    } catch (Pack200Exception e) {
        fail("Unexpected exception");
    }
    assertFalse(segmentOptions.hasFileSizeHi());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasSpecialFormats_false_OFxr1_wTty0() {
    try {
        SegmentOptions segmentOptions = new SegmentOptions(0); // Fix: Wrapped in try-catch block
        assertFalse(segmentOptions.hasFileModtime()); // Changed method call to match the method under test
    } catch (Pack200Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasArchiveFileCounts_false_qYPb1_NjIT0() throws Pack200Exception {
    SegmentOptions segmentOptions = new SegmentOptions(0); // This line has been fixed
    assertFalse(segmentOptions.hasArchiveFileCounts());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasArchiveFileCounts_false_qYPb1_Ekio1() {
    try {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        assertFalse(segmentOptions.hasArchiveFileCounts());
    } catch (Pack200Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasFileOptions_false_Kvhn1_NAcJ0() {
    SegmentOptions segmentOptions;
    try {
        segmentOptions = new SegmentOptions(0);
    } catch (Pack200Exception e) {
        throw new RuntimeException(e);
    }
    assertFalse(segmentOptions.hasFileModtime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasMethodFlagsHi_false_nKSg1_mSxV0() {
    SegmentOptions segmentOptions;
    try {
        segmentOptions = new SegmentOptions(0);
        assertFalse(segmentOptions.hasFileModtime());
    } catch (Pack200Exception e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasAllCodeFlags_false_erXH1_IvmU0() throws Pack200Exception {
    SegmentOptions segmentOptions = new SegmentOptions(0); // This line is fixed
    assertFalse(segmentOptions.hasFileModtime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasFileModtime_false_SZzi1_Hpzv0() throws Pack200Exception {
    SegmentOptions segmentOptions = new SegmentOptions(0); // Error fixed by adding try-catch block
    try {
        segmentOptions = new SegmentOptions(0);
    } catch (Pack200Exception e) {
    }
    assertFalse(segmentOptions.hasFileModtime());
}
}