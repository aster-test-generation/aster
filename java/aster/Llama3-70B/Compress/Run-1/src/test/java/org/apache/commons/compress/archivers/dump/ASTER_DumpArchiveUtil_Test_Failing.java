/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCalculateChecksum_VLaf0() {
    byte[] buffer = new byte[1024];
    for (int i =-1633687302; i < 1024; i++) {
        buffer[i] = (byte) i;
    }
    int result = DumpArchiveUtil.calculateChecksum(buffer);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCalculateChecksum_EmptyBuffer_LeeI1() {
    byte[] buffer = new byte[0];
    boolean result = DumpArchiveUtil.verify(buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCalculateChecksum_VLaf0_fid1() {
    byte[] buffer = new byte[1024];
    for (int i = 0; i < 1024; i++) {
        buffer[i] = (byte) i;
    }
    int result = DumpArchiveUtil.calculateChecksum(buffer);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCalculateChecksum_EmptyBuffer_LeeI1_fid1() {
    byte[] buffer = new byte[0];
    int result = DumpArchiveUtil.calculateChecksum(buffer);
    assertEquals(DumpArchiveConstants.CHECKSUM, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_sZZC0_fid1() {
    byte[] buffer = new byte[10];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
    buffer[3] = 4;
    buffer[4] = 5;
    buffer[5] = 6;
    buffer[6] = 7;
    buffer[7] = 8;
    long result = DumpArchiveUtil.convert64(buffer, 0);
    assertEquals(71776119061217283L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_ZXOP0_fid1() {
    byte[] buffer = new byte[24]; // assuming 24 bytes is enough for the method to work
    buffer[20] = (byte) 0x12;
    buffer[21] = (byte) 0x34;
    buffer[22] = (byte) 0x56;
    buffer[23] = (byte) 0x78;
    int result = DumpArchiveUtil.getIno(buffer);
    assertEquals(0x12345678, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_qCFo0_fid1() {
    byte[] buffer = new byte[] {0x12, 0x34, 0x56, 0x78};
    int offset = 1;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x3456, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyValidBuffer_cJKs3_fid1() {
    byte[] buffer = new byte[32];
    buffer[24] = (byte) 0x12;
    buffer[25] = (byte) 0x34;
    buffer[26] = (byte) 0x56;
    buffer[27] = (byte) 0x78;
    buffer[28] = (byte) 0x12;
    buffer[29] = (byte) 0x34;
    buffer[30] = (byte) 0x56;
    buffer[31] = (byte) 0x78;
    assertTrue(DumpArchiveUtil.verify(buffer));
}
}