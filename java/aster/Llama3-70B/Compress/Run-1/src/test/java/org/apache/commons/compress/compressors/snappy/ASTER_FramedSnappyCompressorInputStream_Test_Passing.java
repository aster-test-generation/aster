/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_withValidSignature_ZNdo0() {
    byte[] signature = {0x01, 0x12, 0x02, 0x12, 0x04, 0x05, 0x06, 0x07, 0x08};
    int length = 9;
    assertFalse(FramedSnappyCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_withInvalidSignature_GcZx1() {
    byte[] signature = {0x01, 0x12, 0x02, 0x12, 0x04, 0x05, 0x06, 0x09};
    int length = 8;
    assertFalse(FramedSnappyCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_withShortSignature_ylzA2() {
    byte[] signature = {0x01, 0x12};
    int length = 2;
    assertFalse(FramedSnappyCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmask_vsfZ0() {
    long result = FramedSnappyCompressorInputStream.unmask(0x12345678L);
    assertEquals(3050321880L, result);
}
}