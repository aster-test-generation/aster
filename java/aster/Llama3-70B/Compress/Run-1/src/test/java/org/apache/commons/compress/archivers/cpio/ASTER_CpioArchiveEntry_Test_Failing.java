/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.nio.charset.Charset;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_true_uZzT0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "name", 1024);
    assertTrue(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_false_rkrS1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "name", 0);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_uuJZ0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 100L);
    long time = cpioArchiveEntry.getTime();
    assertEquals(100L, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary1_Ucnh0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_FWpS0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals("", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName6_HfYo5() {
    File inputFile = new File("file");
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals("entryName", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode1_AWwr0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertEquals(33188, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode2_ptjc1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(33188, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_atlT2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullCharset_ODaR1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(3, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_ILeG2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals(3, entry.getHeaderPadCount(Charset.defaultCharset()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_lvde0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_true_hoAO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_false_WMSi1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 20);
    entry.setMode((short) 2); // set mode to a non-regular file type
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount1_wqtE0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount2_HVev1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals(3, entry.getHeaderPadCount(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount3_kXsy2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(0, entry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount4_xRGM3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("inputFile"), "entryName");
    assertEquals(3, entry.getHeaderPadCount(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize7_cVQi6() {
    File inputFile = new File("file");
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals(0, cpioArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks3_aZHY2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    entry.isDirectory(); // assume this sets the directory flag
    assertEquals(2, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_true_uZzT0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0xC715, "name", 1024);
    entry.setRemoteDeviceMin(1);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_uuJZ0_fid1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name",0L);
    long time = cpioArchiveEntry.getTime();
    assertEquals(100L, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName6_HfYo5_fid1() {
    File inputFile = new File("file");
    inputFile.setReadable(true);
    inputFile.setWritable(true);
    inputFile.setExecutable(true);
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals("entryName", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize7_cVQi6_fid1() {
    File inputFile = new File("file");
    inputFile.setReadable(true);
    inputFile.setWritable(true);
    inputFile.setExecutable(true);
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, inputFile, "entryName");
    assertEquals(0, cpioArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_true_uZKu0_lfBq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) CpioArchiveEntry.C_ISNWK);
    entry.setMode((short) 0120037); 
    assertTrue(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_true_uZKu0_lfBq0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345);
    entry.setMode((short) 0120037); // CpioUtil.C_ISNWK is equivalent to 0120037
    assertTrue(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_true_KDXC0_FCgn0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setMode((short) 0120000); // Assuming C_ISSOCK is 0120000
    assertTrue(entry.isSocket());
}
}