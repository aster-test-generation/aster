/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode1_Rtxk0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setUnixMode(0x755);
    assertEquals(0x41ed, zipArchiveEntry.getExternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode1_Rtxk0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setUnixMode(0x755);
    assertEquals("UNIX", zipArchiveEntry.getPlatform());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode2_qeDL1_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setUnixMode(0x644);
    assertEquals(0x81a4, zipArchiveEntry.getExternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode2_qeDL1_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setUnixMode(0x644);
    assertEquals("UNIX", zipArchiveEntry.getPlatform());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveUnparseableExtraFieldData_WithUnparseableExtra_Vmic0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.removeUnparseableExtraFieldData();
    assertNull(zipArchiveEntry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_LXdy0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertEquals(zipArchiveEntry.getLastModifiedTime().toMillis(), zipArchiveEntry.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_CRWG0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtraFields(new ZipExtraField[] {new UnparseableExtraFieldData() });
    zipArchiveEntry.setExtra();
    assertSame(zipArchiveEntry.getExtraFields()[0], zipArchiveEntry.getExtraFields()[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous4_jUtQ3() throws ZipException {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entry");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(entry);
    boolean result = zipArchiveEntry.isStreamContiguous();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset1_nbdI0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long result = zipArchiveEntry.getLocalHeaderOffset();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_IOException_IFip1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] b = null;
    try {
        zipArchiveEntry.setCentralDirectoryExtra(b);
        assert false;
    } catch (IllegalArgumentException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra1_kvLU0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] extra = new byte[10];
    zipArchiveEntry.setExtra(extra);
    assertEquals(extra, zipArchiveEntry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra2_Nyyc1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    byte[] extra = new byte[5];
    zipArchiveEntry.setExtra(extra);
    assertEquals(extra, zipArchiveEntry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod2_VrVr1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals(0, zipArchiveEntry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod3_Lmlt2() {
    File inputFile = new File("inputFile");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
    assertEquals(0, zipArchiveEntry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataExtra_withExtra_JbwA0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] extra = new byte[] {1, 2, 3};
    zipArchiveEntry.setExtra(extra);
    assertArrayEquals(extra, zipArchiveEntry.getLocalFileDataExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawNameNotNull_UXcp0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] result = zipArchiveEntry.getRawName();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveExtraField_MFZY0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipShort type = new ZipShort((short) 1);
    zipArchiveEntry.removeExtraField(type);
    assertSame(0, zipArchiveEntry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_true_zRyc0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setUnixMode(UnixStat.LINK_FLAG | UnixStat.FILE_TYPE_FLAG);
    assertTrue(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset1_XoEr0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long result = zipArchiveEntry.getDataOffset();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize1_tpLw0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long result = zipArchiveEntry.getSize();
    assertEquals(0, result);
}
@Test
public void testSetAlignment_NotPowerOfTwo_sLNs1_ruKp0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    try {
        zipArchiveEntry.setNameSource(null);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_ExtraFieldsNotNull_bqPQ0_TENO0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtraFields(new ZipExtraField[1]);
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields();
    assertArrayEquals(extraFields, extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra3_pNnB2_WLHu0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry((java.util.zip.ZipEntry) null);
        try {
            zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
        } catch (ZipException e) {
            fail("ZipException occurred");
        }
        byte[] extra = new byte[15];
        zipArchiveEntry.setExtra(extra);
        assertEquals(extra, zipArchiveEntry.getExtra());
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod1_AWeo0_qBiF0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
        assertEquals(0, zipArchiveEntry.getMethod());
    } catch (ZipException e) {
        fail("ZipException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_withNullName_Ksol1_lReh0() {
    try {
        ZipArchiveEntry entry = null;
        try {
            entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("testEntry"));
        } catch (ZipException e) {
            fail("ZipException should not be thrown");
        }
        assertEquals("testEntry", entry.getName());
    } catch (AssertionError e) {
        throw e;
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode1_Rtxk0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setUnixMode(0x755);
    assertEquals(0x41ed, zipArchiveEntry.getExternalAttributes());
    assertEquals("UNIX", zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode2_qeDL1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setUnixMode(0x644);
    assertEquals(0x81a4, zipArchiveEntry.getExternalAttributes());
    assertEquals("UNIX", zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_LXdy0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertEquals(zipArchiveEntry.getLastModifiedTime().toMillis(), zipArchiveEntry.getTime());
    assertEquals(zipArchiveEntry.getLastAccessTime(), zipArchiveEntry.getLastAccessTime());
    assertEquals(zipArchiveEntry.getCreationTime(), zipArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_Gdmu0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = new ZipExtraField[1];
    extraFields[0] = new UnparseableExtraFieldData();
    zipArchiveEntry.setExtraFields(extraFields);
    zipArchiveEntry.setExtra();
    assertSame(extraFields, zipArchiveEntry.getExtraFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldsNull_YpUv0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtraFields(null);
    assertNull(zipArchiveEntry.getExtraFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_drYq0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    UnparseableExtraFieldData unparseableExtraFieldData = zipArchiveEntry.getUnparseableExtraFieldData();
    assertNotNull(unparseableExtraFieldData);
    assertEquals(unparseableExtraFieldData.getHeaderId(), new ZipShort((short) 0));
    assertArrayEquals(unparseableExtraFieldData.getCentralDirectoryData(), new byte[0]);
    assertEquals(unparseableExtraFieldData.getCentralDirectoryLength(), new ZipShort((short) 0));
    assertArrayEquals(unparseableExtraFieldData.getLocalFileDataData(), new byte[0]);
    assertEquals(unparseableExtraFieldData.getLocalFileDataLength(), new ZipShort((short) 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName3_sEeI2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName(null);
    assertNull(zipArchiveEntry.getName());
}
}