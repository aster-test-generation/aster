/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray1_UwgM0() {
    SeekableInMemoryByteChannel seekableInMemoryByteChannel = new SeekableInMemoryByteChannel(10);
    byte[] result = seekableInMemoryByteChannel.array();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray2_OLnp1() {
    SeekableInMemoryByteChannel seekableInMemoryByteChannel = new SeekableInMemoryByteChannel();
    byte[] result = seekableInMemoryByteChannel.array();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray3_fjRP2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel seekableInMemoryByteChannel = new SeekableInMemoryByteChannel(data);
    byte[] result = seekableInMemoryByteChannel.array();
    assertArrayEquals(data, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen1_XvQL0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen2_qlVJ1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate1_EDRF0_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(channel, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate1_EDRF0_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(5, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate1_EDRF0_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(0);
    assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate2_jCQe1_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    SeekableByteChannel result = channel.truncate(10);
    assertEquals(channel, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate2_jCQe1_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    SeekableByteChannel result = channel.truncate(0);
    assertEquals(0, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate2_jCQe1_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    SeekableByteChannel result = channel.truncate(10);
    assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate3_RCXk2_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(channel, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate3_RCXk2_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(5, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate3_RCXk2_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_negativePosition_Rckw1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(-1);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition1_ckwf0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition2_Erdz1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition3_NWoC2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_withDefaultConstructor_LXwT0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_withSizeConstructor_JPWD1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertEquals(10, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_withByteArrayConstructor_JUAV2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[5]);
    assertEquals(5, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withLargeBuffer_TtNT1_PbsE0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer buffer = ByteBuffer.allocate(100);
    buffer.put(new byte[100]);
    buffer.flip();
    try {
        long written = channel.write(buffer);
        assertEquals(100, written);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withClosedChannel_mflc2_UiPF0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.close();
    ByteBuffer buffer = ByteBuffer.allocate(5);
    buffer.put(new byte[] {1, 2, 3, 4, 5});
    buffer.flip();
    try {
        channel.write(buffer);
        fail("Expected ClosedChannelException");
    } catch (ClosedChannelException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withInitialData_QcuQ3_TlWx0() throws IOException {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    ByteBuffer buffer = ByteBuffer.allocate(5);
    buffer.put(new byte[] {6, 7, 8, 9, 10});
    buffer.flip();
    try {
        assertEquals(5, channel.write(buffer));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_1_TPdI0_ZUnM0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer buffer = ByteBuffer.allocate(10);
    buffer.put(new byte[] {1, 2, 3, 4, 5});
    buffer.flip();
    long written = channel.write(buffer);
    assertEquals(5, written);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_2_OOKn1_uEep0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(20);
    ByteBuffer buffer = ByteBuffer.allocate(15);
    buffer.put(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});
    buffer.flip();
    try {
        assertEquals(15, channel.write(buffer));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_3_OziY2_hIRs0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[] {1, 2, 3, 4, 5});
    ByteBuffer buffer = ByteBuffer.allocate(10);
    buffer.put(new byte[] {6, 7, 8, 9, 10});
    buffer.flip();
    try {
        assertEquals(5, channel.write(buffer));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_4_NkHa3_jzeD0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer buffer = ByteBuffer.allocate(1024 * 1024);
    buffer.put(new byte[1024 * 1024]);
    buffer.flip();
    try {
        assertEquals(1024 * 1024, channel.write(buffer));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_validPosition_gcPN0_UFfU0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.position(5);
        assertEquals(5, channel.position());
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_validPosition_gcPN0_xJXw1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.position(5);
        assertEquals(channel, channel);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_WhenBufferIsLargerThanRemaining_ThenReturnPossible_dMzH1_uZji0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    try {
        channel.position(5);
        ByteBuffer buf = ByteBuffer.allocate(10);
        int result = channel.read(buf); // This line has an error
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate3_RCXk2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(channel, result);
    assertEquals(5, channel.size());
    assertEquals(0, channel.position());
}
}