/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.file.attribute.FileTime;
import java.util.Collections;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_oPKK0_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[] {});
    byte[] header = new byte[] {};
    tarArchiveEntry.parseTarHeader(header);
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderIOException_ZKff1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    byte[] header = new byte[]{};
    try {
        tarArchiveEntry.parseTarHeader(header);
        assert false;
    } catch (UncheckedIOException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_TRUd0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertTrue(tarArchiveEntry.getName().equals("name"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_tMwz0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("name", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_JanW0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("name", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFIFO_true_BwBA0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0x20);
    assertTrue(tarArchiveEntry.isFIFO());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLink_true_fCvj0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    assertTrue(tarArchiveEntry.isLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedSparseHeaders_EmptySparseHeaders_FHcd0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    List<TarArchiveStructSparse> result = tarArchiveEntry.getOrderedSparseHeaders();
    assertEquals(Collections.emptyList(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFileNull_dHTr1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    File file = tarArchiveEntry.getFile();
    assertNull(file);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClearExtraPaxHeaders_TGjI0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    tarArchiveEntry.clearExtraPaxHeaders();
    assertTrue(tarArchiveEntry.getExtraPaxHeaders().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_withLinkFlag_DIR_CaDq3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0x40);
    assertFalse(tarArchiveEntry.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGNULongLinkEntry_true_oOQu0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    assertTrue(tarArchiveEntry.isGNULongLinkEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_true_UNkI0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 2);
    assertTrue(tarArchiveEntry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTime_poOh0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
    FileTime time = FileTime.fromMillis(1000);
    tarArchiveEntry.setStatusChangeTime(time);
    assertEquals(time, tarArchiveEntry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxHeader1_lWyf0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    assertTrue(tarArchiveEntry.isPaxHeader());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_FYDj0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    int userId = tarArchiveEntry.getUserId();
    assertEquals(0, userId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGNUSparse3_GHtY2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
    assertTrue(tarArchiveEntry.isGNUSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSparse3_otcg2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
    assertTrue(tarArchiveEntry.isSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_cbJb0_MUgB0_2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals(1, tarArchiveEntry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_cbJb0_MUgB0_7() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertTrue(tarArchiveEntry.isCheckSumOK());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_cbJb0_MUgB0_8() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals((byte) 1, tarArchiveEntry.getLinkFlag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_cbJb0_MUgB0_9() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("name", tarArchiveEntry.getLinkName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_cbJb0_MUgB0_10() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("userName", tarArchiveEntry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_cbJb0_MUgB0_11() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("groupName", tarArchiveEntry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGNULongNameEntry_true_SaRA0_yttp0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0x20);
    assertTrue(tarArchiveEntry.isGNULongNameEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_WindowsAbsolutePath_irDo0_MiDr0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0, true);
    tarArchiveEntry.setName("C:\\test\\file.txt");
    assertEquals("test/file.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedSparseHeaders_LargeOffsetAndNumbytes_PaKe4_rAuv0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test");
    String userName = tarArchiveEntry.getUserName();
    assertNull(userName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedSparseHeaders_SparseHeadersWithZeroOffsetAndNumbytes_XeZA7_cHSa0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test");
    String userName = "userName";
    assertEquals("userName", tarArchiveEntry.getUserName());
}
}