/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MultiReadOnlySeekableByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_CYRY0() {
    List<SeekableByteChannel> channels = new ArrayList<>();
    MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
    try {
        multiReadOnlySeekableByteChannel.truncate(10);
        fail("Expected NonWritableChannelException");
    } catch (NonWritableChannelException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_skfa0() {
    List<SeekableByteChannel> channels = new ArrayList<>();
    SeekableByteChannel channel = null; // initialize channel
    channels.add(channel);
    MultiReadOnlySeekableByteChannel multiChannel = new MultiReadOnlySeekableByteChannel(channels);
    ByteBuffer src = ByteBuffer.allocate(10); // initialize src
    try {
        multiChannel.write(src);
        fail("Expected NonWritableChannelException");
    } catch (NonWritableChannelException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_TVAw0() throws IOException {
    File file1 = new File("file1.txt");
    File file2 = new File("file2.txt");
    file1.createNewFile();
    file2.createNewFile();
    SeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(Arrays.asList(Files.newByteChannel(file1.toPath()), Files.newByteChannel(file2.toPath())));
    assertNotNull(channel);
    assertTrue(channel.isOpen());
    channel.close();
    assertFalse(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_EmptyList_cnId3() throws IOException {
    List<SeekableByteChannel> channels = new ArrayList<>();
    MultiReadOnlySeekableByteChannel multiChannel = new MultiReadOnlySeekableByteChannel(channels);
    multiChannel.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForPaths_MultiplePaths_lhjb1_uZIr0() throws IOException {
    java.nio.file.Path path1 = Files.createTempFile("path1", "tmp");
    java.nio.file.Path path2 = Files.createTempFile("path2", "tmp");
    SeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(Arrays.asList(Files.newByteChannel(path1), Files.newByteChannel(path2)));
    assertTrue(channel instanceof MultiReadOnlySeekableByteChannel);
    long size = channel.size(); // Calling the method under test
    assertTrue(size >= 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForPaths_NullPaths_XNCx2_kFcR1() throws IOException {
    try {
        MultiReadOnlySeekableByteChannel.forPaths((Path[]) null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesNull_VWNl1_kDmR0() throws IOException {
    try {
        MultiReadOnlySeekableByteChannel.forFiles((File[]) null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_TVAw0_fid2() throws IOException {
    File file1 = new File("file1.txt");
    File file2 = new File("file2.txt");
    SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forFiles(file1, file2);
    assertNotNull(channel);
}
}