/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JarMarker_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ThrowsZipException_WhenLengthIsNotZero_xrsW0() {
    JarMarker jarMarker = new JarMarker();
    byte[] data = new byte[10];
    try {
        jarMarker.parseFromLocalFileData(data, 0, 10);
        assert false;
    } catch (ZipException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_RisZ0() {
    JarMarker jarMarker = new JarMarker();
    byte[] result = jarMarker.getCentralDirectoryData();
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_hNzu0_1() {
    JarMarker jarMarker = new JarMarker();
    ZipShort zipShort = jarMarker.getHeaderId();
    assertNotNull(zipShort);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_hNzu51966_2() {
    JarMarker jarMarker = new JarMarker();
    ZipShort zipShort = jarMarker.getHeaderId();
    assertEquals(51966, zipShort.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_TIXc0() {
    JarMarker jarMarker = new JarMarker();
    byte[] result = jarMarker.getLocalFileDataData();
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_iusk0_1() {
    JarMarker jarMarker = JarMarker.getInstance();
    assertNotNull(jarMarker);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_iusk0_2() {
    JarMarker jarMarker = JarMarker.getInstance();
    assertEquals(jarMarker.getHeaderId(), jarMarker.getHeaderId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_MJGl0() {
    JarMarker jarMarker = new JarMarker();
    ZipShort zipShort = jarMarker.getLocalFileDataLength();
    assertNotNull(zipShort);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_DoesNotThrowZipException_WhenLengthIsZero_gxbg1_ARxE0() {
    JarMarker jarMarker = new JarMarker();
    byte[] data = new byte[10];
    try {
        jarMarker.parseFromLocalFileData(data, 0, 0); // This method is not defined in JarMarker class
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_iusk0() {
    JarMarker jarMarker = JarMarker.getInstance();
    assertNotNull(jarMarker);
    assertEquals(jarMarker.getHeaderId(), jarMarker.getHeaderId());
}
}