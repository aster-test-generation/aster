/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrementValidIndex_Ongm0() {
    IntList list = new IntList(10);
    list.add(0, 0);
    list.add(0, 1);
    assertEquals(1, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWithinBounds_rjKg0_fid1() {
    IntList list = new IntList(10);
    assertEquals(5, list.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAtLowerBound_ESKk1_fid1() {
    IntList list = new IntList(10);
    assertEquals(0, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrementValidIndex_Ongm0_fid1() {
    IntList list = new IntList(10);
    list.increment(0);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd9_udHl8() {
    IntList list = new IntList();
    list.add(1, 10);
    assertEquals(10, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd10_miLf9() {
    IntList list = new IntList(10);
    list.add(1, 10);
    assertEquals(10, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd11_vMtf10() {
    IntList list = new IntList();
    list.add(2, 10);
    assertEquals(10, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd12_CssG11() {
    IntList list = new IntList(10);
    list.add(2, 10);
    assertEquals(10, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd3_iuJl2() {
    IntList list = new IntList(10);
    list.add(1, 20);
    assertEquals(2, list.size());
    assertEquals(20, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd4_ePjg3() {
    IntList list = new IntList();
    list.add(1, 20);
    assertEquals(2, list.size());
    assertEquals(20, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd5_kKAJ4() {
    IntList list = new IntList(10);
    list.add(2, 30);
    assertEquals(3, list.size());
    assertEquals(30, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd6_oFps5() {
    IntList list = new IntList();
    list.add(2, 30);
    assertEquals(3, list.size());
    assertEquals(30, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd7_mtSC6() {
    IntList list = new IntList(10);
    list.add(0, 40);
    assertEquals(4, list.size());
    assertEquals(40, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd8_mPaG7() {
    IntList list = new IntList();
    list.add(0, 40);
    assertEquals(4, list.size());
    assertEquals(40, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd9_wLFA8() {
    IntList list = new IntList(10);
    list.add(4, 50);
    assertEquals(5, list.size());
    assertEquals(50, list.get(4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd10_DiNu9() {
    IntList list = new IntList();
    list.add(4, 50);
    assertEquals(5, list.size());
    assertEquals(50, list.get(4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd11_HuJl10() {
    IntList list = new IntList(10);
    list.add(5, 60);
    assertEquals(6, list.size());
    assertEquals(60, list.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd12_TqmS11() {
    IntList list = new IntList();
    list.add(5, 60);
    assertEquals(6, list.size());
    assertEquals(60, list.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd9_xuxr8() {
    IntList list = new IntList(10);
    list.add(3, 50);
    assertEquals(5, list.size());
    assertEquals(50, list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd10_iKJM9() {
    IntList list = new IntList();
    list.add(3, 50);
    assertEquals(5, list.size());
    assertEquals(50, list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_1_EDNP0_2_fid3() {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_2_zVfa1_2() {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_5_XQlZ4_2() {
    IntList list = new IntList(10);
    list.add(10);
    assertEquals(0, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_6_zYYk5_2() {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd3_iuJl2_1() {
    IntList list = new IntList(10);
    list.add(1, 20);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd3_iuJl2_2() {
    IntList list = new IntList(10);
    list.add(1, 20);
    assertEquals(20, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd4_ePjg3_1() {
    IntList list = new IntList();
    list.add(1, 20);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd4_ePjg3_2() {
    IntList list = new IntList();
    list.add(1, 20);
    assertEquals(20, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd5_kKAJ4_1() {
    IntList list = new IntList(10);
    list.add(2, 30);
    assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd5_kKAJ4_2() {
    IntList list = new IntList(10);
    list.add(2, 30);
    assertEquals(30, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd6_oFps5_1() {
    IntList list = new IntList();
    list.add(2, 30);
    assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd6_oFps5_2() {
    IntList list = new IntList();
    list.add(2, 30);
    assertEquals(30, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd7_mtSC6_1() {
    IntList list = new IntList(10);
    list.add(0, 40);
    assertEquals(4, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd8_mPaG7_1() {
    IntList list = new IntList();
    list.add(0, 40);
    assertEquals(4, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd9_wLFA8_1() {
    IntList list = new IntList(10);
    list.add(4, 50);
    assertEquals(5, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd9_wLFA8_2() {
    IntList list = new IntList(10);
    list.add(4, 50);
    assertEquals(50, list.get(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd10_DiNu9_1() {
    IntList list = new IntList();
    list.add(4, 50);
    assertEquals(5, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd10_DiNu9_2() {
    IntList list = new IntList();
    list.add(4, 50);
    assertEquals(50, list.get(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd11_HuJl10_1() {
    IntList list = new IntList(10);
    list.add(5, 60);
    assertEquals(6, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd11_HuJl10_2() {
    IntList list = new IntList(10);
    list.add(5, 60);
    assertEquals(60, list.get(5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd12_TqmS11_1() {
    IntList list = new IntList();
    list.add(5, 60);
    assertEquals(6, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd12_TqmS11_2() {
    IntList list = new IntList();
    list.add(5, 60);
    assertEquals(60, list.get(5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd9_xuxr8_1() {
    IntList list = new IntList(10);
    list.add(3, 50);
    assertEquals(5, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd9_xuxr8_2() {
    IntList list = new IntList(10);
    list.add(3, 50);
    assertEquals(50, list.get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd10_iKJM9_1() {
    IntList list = new IntList();
    list.add(3, 50);
    assertEquals(5, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd10_iKJM9_2() {
    IntList list = new IntList();
    list.add(3, 50);
    assertEquals(50, list.get(3));}
}