/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_withCapacity_frMx0() {
    IntList list = new IntList(5);
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_withoutCapacity_LvjY1() {
    IntList list = new IntList();
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWithinBounds_rjKg0() {
    IntList list = new IntList(10);
    list.add(0, 5);
    assertEquals(5, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAtLowerBound_ESKk1() {
    IntList list = new IntList(10);
    list.add(0, 0);
    assertEquals(0, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_withSmallList_ZroP0() {
    IntList list1 = new IntList(10);
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list1.addAll(list2);
    int[] array = list1.toArray();
    assertArrayEquals(new int[]{1, 2, 3}, array);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_withLargeList_Nydv1() {
    IntList list1 = new IntList();
    IntList list2 = new IntList(20);
    for (int i = 0; i < 20; i++) {
        list2.add(i);
    }
    list1.addAll(list2);
    int[] array = list1.toArray();
    int[] expected = new int[20];
    for (int i = 0; i < 20; i++) {
        expected[i] = i;
    }
    assertArrayEquals(expected, array);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_LHhQ0() {
    IntList intList = new IntList(10);
    int[] result = intList.toArray();
    assertArrayEquals(new int[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_GrowAtEnd_WBcu0() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    list.add(6);
    list.add(7);
    list.add(8);
    list.add(9);
    list.add(10);
    assertTrue(list.add(11));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_NoGrowAtEnd_AcUE1() {
    IntList list = new IntList();
    assertTrue(list.add(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_1_EDNP0_1() {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(20, list.remove(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_1_EDNP0_2() {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_1_EDNP0() {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(20, list.remove(1));
    assertEquals(2, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_2_zVfa1() {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(10, list.remove(0));
    assertEquals(2, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_3_MwPJ2() {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(30, list.remove(2));
    assertEquals(2, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_4_sOUv3() {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(20, list.remove(1));
    assertEquals(2, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_5_XQlZ4() {
    IntList list = new IntList(10);
    list.add(10);
    assertEquals(10, list.remove(0));
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_6_zYYk5() {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    assertEquals(10, list.remove(0));
    assertEquals(1, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_SFpC0() {
    IntList intList = new IntList(10);
    assertEquals(0, intList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd1_VArz0() {
    IntList list = new IntList();
    list.add(0, 10);
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd2_uBGr1() {
    IntList list = new IntList(10);
    list.add(0, 10);
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd3_nLFN2() {
    IntList list = new IntList();
    list.add(0, 10);
    list.add(1, 20);
    assertEquals(20, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd4_YkZb3() {
    IntList list = new IntList(10);
    list.add(0, 10);
    list.add(1, 20);
    assertEquals(20, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd5_XDbB4() {
    IntList list = new IntList();
    list.add(0, 10);
    list.add(1, 20);
    list.add(2, 30);
    assertEquals(30, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd6_CpoK5() {
    IntList list = new IntList(10);
    list.add(0, 10);
    list.add(1, 20);
    list.add(2, 30);
    assertEquals(30, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd7_pyya6() {
    IntList list = new IntList();
    list.add(0, 10);
    list.add(0, 20);
    assertEquals(20, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd8_WgeL7() {
    IntList list = new IntList(10);
    list.add(0, 10);
    list.add(0, 20);
    assertEquals(20, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd1_mcRN0() {
    IntList list = new IntList(10);
    list.add(0, 10);
    assertEquals(1, list.size());
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd2_JONr1() {
    IntList list = new IntList();
    list.add(0, 10);
    assertEquals(1, list.size());
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_2_zVfa1_1() {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(10, list.remove(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_3_MwPJ2_1() {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(30, list.remove(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_4_sOUv3_1() {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(20, list.remove(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_5_XQlZ4_1() {
    IntList list = new IntList(10);
    list.add(10);
    assertEquals(10, list.remove(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_6_zYYk5_1() {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    assertEquals(10, list.remove(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd1_mcRN0_1() {
    IntList list = new IntList(10);
    list.add(0, 10);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd2_JONr1_1() {
    IntList list = new IntList();
    list.add(0, 10);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd7_mtSC6_2() {
    IntList list = new IntList(10);
    list.add(0, 40);
    assertEquals(40, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd8_mPaG7_2() {
    IntList list = new IntList();
    list.add(0, 40);
    assertEquals(40, list.get(0));}
}