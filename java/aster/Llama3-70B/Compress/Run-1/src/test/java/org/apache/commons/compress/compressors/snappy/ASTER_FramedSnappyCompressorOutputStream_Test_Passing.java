/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMask_Sgez0() {
    long x = 123456789L;
    long result = FramedSnappyCompressorOutputStream.mask(x);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withLargeData_nAKF1_hham0() throws IOException {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    FramedSnappyCompressorOutputStream compressorOutputStream = new FramedSnappyCompressorOutputStream(out);
    byte[] data = new byte[1000];
    compressorOutputStream.write(data, 0, 1000);
    compressorOutputStream.close();
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withFlush_zXQy2_ohcT0() throws IOException {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    FramedSnappyCompressorOutputStream compressorOutputStream = new FramedSnappyCompressorOutputStream(out);
    byte[] data = new byte[1024];
    compressorOutputStream.write(data, 0, 1024);
    compressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteMultipleBlocks_Orhk2_sGqP0() throws IOException {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    FramedSnappyCompressorOutputStream fos = new FramedSnappyCompressorOutputStream(out);
    byte[] data = new byte[2048];
    fos.write(data, 0, 2048);
    assertFalse(out.size() > 1024);
    fos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withSmallData_BMMo0_KNPb0() throws IOException {
    OutputStream out = new ByteArrayOutputStream();
    FramedSnappyCompressorOutputStream fos = new FramedSnappyCompressorOutputStream(out);
    byte[] data = new byte[10];
    fos.write(data, 0, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withZeroLengthData_ZUCe2_XZnd0() throws IOException {
    OutputStream out = new ByteArrayOutputStream();
    FramedSnappyCompressorOutputStream fos = new FramedSnappyCompressorOutputStream(out);
    byte[] data = new byte[10];
    fos.write(data, 0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_GqPQ0_LwMk0() throws IOException {
    OutputStream out = new ByteArrayOutputStream();
    FramedSnappyCompressorOutputStream compressorOutputStream = new FramedSnappyCompressorOutputStream(out);
    compressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_lJAG0_BEht0() throws IOException {
    OutputStream out = new ByteArrayOutputStream();
    FramedSnappyCompressorOutputStream fsco = new FramedSnappyCompressorOutputStream(out);
    fsco.close();
}
}