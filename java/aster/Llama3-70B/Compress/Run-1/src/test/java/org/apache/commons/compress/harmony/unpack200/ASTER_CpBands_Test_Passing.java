/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.InputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value2_WEni1() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = false;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_uSJe0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpFieldClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_lDdI0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_hgXc0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpMethodDescriptor();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_DLVe0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpIMethodClass();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_kiLD0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertNull(cpSignature);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void read(java.io.InputStream in) {
    }
}