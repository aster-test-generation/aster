/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_jphF0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 1L, attributes);
    assert(member.equals(member));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_BNxz1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 1L, attributes);
    assert(!member.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_ZDlT2() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 1L, attributes);
    Object obj = new Object();
    assert(!member.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentDescriptor_RNTF4() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor1 = new CPUTF8("descriptor1");
    CPUTF8 descriptor2 = new CPUTF8("descriptor2");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor1, 1L, attributes);
    CPMember member2 = new CPMember(name, descriptor2, 1L, attributes);
    assert(!member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentFlags_oHQA5() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor, 1L, attributes);
    CPMember member2 = new CPMember(name, descriptor, 2L, attributes);
    assert(!member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_uzsg6() {
    CPUTF8 name1 = new CPUTF8("name1");
    CPUTF8 name2 = new CPUTF8("name2");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name1, descriptor, 1L, attributes);
    CPMember member2 = new CPMember(name2, descriptor, 1L, attributes);
    assert(!member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_qDbN7() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor, 1L, attributes);
    CPMember member2 = new CPMember(name, descriptor, 1L, attributes);
    assert(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_NVeE0_JiAB0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    assertEquals("CPMember: " + name.toString() + "(" + descriptor.toString() + ")", cpmember.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_RwsB0_wFUo0_1() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpmember.getNestedClassFileEntries();
    assertEquals(2, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_RwsB0_wFUo0_2() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpmember.getNestedClassFileEntries();
    assertSame(name, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_RwsB0_wFUo0_3() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpmember.getNestedClassFileEntries();
    assertSame(descriptor, entries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_PiHI0_jTTD0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    int expected = 1;
    expected = 31 * expected + attributes.hashCode();
    expected = 31 * expected + descriptor.hashCode();
    expected = 31 * expected + 1;
    expected = 31 * expected + name.hashCode();
    int actual = cpmember.hashCode();
    assert expected == actual;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWrite_NoAttributes_trui1_sExY0_1() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    java.util.List<Attribute> attributes = new java.util.ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    cpmember.doWrite(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals(8, bytes.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWrite_NoAttributes_trui1_sExY0_2() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    java.util.List<Attribute> attributes = new java.util.ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    cpmember.doWrite(dos);
    byte[] bytes = bos.toByteArray();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWrite_NoAttributes_trui1_sExY0_4() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    java.util.List<Attribute> attributes = new java.util.ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    cpmember.doWrite(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals(0, bytes[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWrite_NoAttributes_trui1_sExY0_5() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    java.util.List<Attribute> attributes = new java.util.ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    cpmember.doWrite(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals(0, bytes[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWrite_NoAttributes_trui1_sExY0_6() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    java.util.List<Attribute> attributes = new java.util.ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    cpmember.doWrite(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals(0, bytes[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWrite_NoAttributes_trui1_sExY0_7() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    java.util.List<Attribute> attributes = new java.util.ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    cpmember.doWrite(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals(0, bytes[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWrite_NoAttributes_trui1_sExY0_8() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    java.util.List<Attribute> attributes = new java.util.ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    cpmember.doWrite(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals(0, bytes[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWrite_NoAttributes_trui1_sExY0_9() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    java.util.List<Attribute> attributes = new java.util.ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    cpmember.doWrite(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals(0, bytes[7]);}
}