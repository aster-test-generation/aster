/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_VKAj0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
    assertNotNull(modifyTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_LzyF0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] result = x000A_NTFS.getCentralDirectoryData();
    assertArrayEquals(x000A_NTFS.getLocalFileDataData(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_DoNh0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort expected = x000A_NTFS.getLocalFileDataLength();
    ZipShort actual = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(expected.getValue(), actual.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_pcLf0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    assertEquals(-123, x000A_NTFS.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_withNullValue_Eufx1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setCreateTime(null);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_VoAH0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date();
    x000A_NTFS.setCreateJavaTime(date);
    assertNotNull(x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_ZMse0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date();
    x000A_NTFS.setModifyJavaTime(date);
    assertNotNull(x000A_NTFS.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_sOmC0() {
    X000A_NTFS xf = new X000A_NTFS();
    assert xf.equals(xf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_sVCu1() {
    Object obj = new Object();
    X000A_NTFS xf = new X000A_NTFS();
    assert !xf.equals(obj);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_ESzQ2() {
    X000A_NTFS xf1 = new X000A_NTFS();
    X000A_NTFS xf2 = new X000A_NTFS();
    assert xf1.equals(xf2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNullValue_SKXL1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setAccessTime(null);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_WXFo0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger accessTime = x000A_NTFS.getAccessTime();
    assertNotNull(accessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_withNullArgument_yMyZ1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyTime(null);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_ofVb0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime time = FileTime.fromMillis(1000);
    x000A_NTFS.setModifyFileTime(time);
    assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(time)), x000A_NTFS.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_WjGH0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date();
    x000A_NTFS.setAccessJavaTime(date);
    assertNotNull(x000A_NTFS.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_fhUs0_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort zipShort = x000A_NTFS.getLocalFileDataLength();
    byte[] bytes = zipShort.getBytes();
    int value = ZipShort.getValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_panZ0_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime time = FileTime.fromMillis(1000);
    x000A_NTFS.setCreateFileTime(time);
    ZipEightByteInteger createTime = x000A_NTFS.getCreateTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_WZLp0_eKId0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date(123456789L);
    x000A_NTFS.setAccessJavaTime(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_Ohpx1_HjTB0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date();
    x000A_NTFS.setModifyJavaTime(date);
    assertEquals(-123 ^ x000A_NTFS.getModifyTime().hashCode(), x000A_NTFS.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_3_ZqbR2_hWzl0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date();
    x000A_NTFS.setAccessJavaTime(date);
    assertEquals(-123 ^ Integer.rotateLeft(x000A_NTFS.getAccessTime().hashCode(), 11), x000A_NTFS.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTime_vrIN0_bMla0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date(123456789L);
    x000A_NTFS.setAccessJavaTime(date);
    FileTime expected = FileTime.fromMillis(123456789L);
    assertEquals(expected, x000A_NTFS.getAccessFileTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentModifyTime_obhr3_SVRO0() {
    X000A_NTFS xf1 = new X000A_NTFS();
    X000A_NTFS xf2 = new X000A_NTFS();
    Date date = new Date(122, 0, 1, 0, 0, 0); // 2022-01-01 00:00:00
    xf2.setAccessJavaTime(date);
    assert !xf1.equals(xf2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentAccessTime_ylUO4_brNd0() {
    X000A_NTFS xf1 = new X000A_NTFS();
    X000A_NTFS xf2 = new X000A_NTFS();
    Date date = new GregorianCalendar(2022, Calendar.JANUARY, 1).getTime();
    xf2.setAccessJavaTime(date);
    assert !xf1.equals(xf2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_RDKt0_BYmH0_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort headerId = x000A_NTFS.getHeaderId();
    assertNotNull(headerId);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_RDKt0_BYmH0_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort headerId = x000A_NTFS.getHeaderId();
    assertEquals((short) 0x000A, headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_4_QJFC3_Qsej0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyJavaTime(new Date());
    x000A_NTFS.setAccessJavaTime(new Date());
    x000A_NTFS.setCreateJavaTime(new Date());
    assertEquals(-123 ^ x000A_NTFS.getModifyTime().hashCode() ^ Integer.rotateLeft(x000A_NTFS.getAccessTime().hashCode(), 11) ^ Integer.rotateLeft(x000A_NTFS.getCreateTime().hashCode(), 22), x000A_NTFS.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_sjOR0_cntd0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date(123456789L);
    x000A_NTFS.setAccessJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_RkJS0_zhJt0_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger createTime = x000A_NTFS.getCreateTime();
    byte[] bytes = createTime.getBytes();
    long value = createTime.getLongValue();
    assertNotNull(createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_RkJS0_zhJt0_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger createTime = x000A_NTFS.getCreateTime();
    byte[] bytes = createTime.getBytes();
    long value = createTime.getLongValue();
    assertNotNull(bytes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_RkJS0_zhJt0_3() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger createTime = x000A_NTFS.getCreateTime();
    byte[] bytes = createTime.getBytes();
    long value = createTime.getLongValue();
    assertNotNull(value);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_weBS0_nEkt0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date(123456789L);
    x000A_NTFS.setAccessJavaTime(d);
    assertEquals(d, x000A_NTFS.getAccessJavaTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_tkmB0_RvAu0_1() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] buffer = new byte[10];
    x000A_NTFS.parseFromCentralDirectoryData(buffer, 0, 10);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_tkmB0_RvAu0_2() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] buffer = new byte[10];
    x000A_NTFS.parseFromCentralDirectoryData(buffer, 0, 10);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_tkmB0_RvAu0_3() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] buffer = new byte[10];
    x000A_NTFS.parseFromCentralDirectoryData(buffer, 0, 10);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getCreateTime());}
}