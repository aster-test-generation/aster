/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.logging.Logger;
import org.apache.commons.compress.harmony.pack200.Archive.PackingFile;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_EmptyJar_AJsk2() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertNotNull(packingFileList);
    assertEquals(packingFileList.size(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_LargeClass_xEAK4() throws IOException {
    JarFile jarFile = new JarFile("large-class.jar");
    try {
        PackingUtils.getPackingFileListFromJar(jarFile, true);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Large Class!", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_EmptyJar_AJsk2_1() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertNotNull(packingFileList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_EmptyJar_AJsk2_2() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertEquals(packingFileList.size(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_OMST0() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertNotNull(packingFileList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConfigWithOptions_cUgX1_usyB0_1_fid2() throws IOException {
    PackingOptions options = new PackingOptions();
    options.setLogFile("logFile.log");
    options.setVerbose(true);
    PackingUtils.config(options);
    Logger packingLogger = Logger.getLogger(PackingUtils.class.getName());
    assertFalse(packingLogger.getUseParentHandlers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_withoutManifest_hSKW1_HIEx0_1() throws IOException {
    JarFile jarFile = new JarFile("test-no-manifest.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    Assertions.assertNotNull(packingFileList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_withoutManifest_hSKW1_HIEx0_2() throws IOException {
    JarFile jarFile = new JarFile("test-no-manifest.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    Assertions.assertEquals(0, packingFileList.stream().filter(pf -> pf.getName().equals(JarFile.MANIFEST_NAME)).count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_KeepFileOrder_WNKa0_pIxs0_1() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    Enumeration<JarEntry> jarEntries = jarFile.entries();
    List<JarEntry> jarEntryList = Collections.list(jarEntries);
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertNotNull(packingFileList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_KeepFileOrder_WNKa0_pIxs0_2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    Enumeration<JarEntry> jarEntries = jarFile.entries();
    List<JarEntry> jarEntryList = Collections.list(jarEntries);
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertEquals(packingFileList.size(), jarEntryList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_DontKeepFileOrder_kMmi1_hpTh0_1() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    Enumeration<JarEntry> jarEntries = jarFile.entries();
    int jarEntrySize = 0;
    while (jarEntries.hasMoreElements()) {
        jarEntries.nextElement();
        jarEntrySize++;
    }
    Enumeration<JarEntry> jarEntriesAgain = jarFile.entries();
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, false);
    int jarEntrySizeAgain = 0;
    while (jarEntriesAgain.hasMoreElements()) {
        jarEntriesAgain.nextElement();
        jarEntrySizeAgain++;
    }
    assertNotNull(packingFileList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_DontKeepFileOrder_kMmi1_hpTh0_2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    Enumeration<JarEntry> jarEntries = jarFile.entries();
    int jarEntrySize = 0;
    while (jarEntries.hasMoreElements()) {
        jarEntries.nextElement();
        jarEntrySize++;
    }
    Enumeration<JarEntry> jarEntriesAgain = jarFile.entries();
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, false);
    int jarEntrySizeAgain = 0;
    while (jarEntriesAgain.hasMoreElements()) {
        jarEntriesAgain.nextElement();
        jarEntrySizeAgain++;
    }
    assertNotEquals(packingFileList.size(), jarEntrySizeAgain);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_NormalCase_FaPl0_lyTN0() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    try {
        PackingUtils.getPackingFileListFromJar(jarFile, true); // Changed method call
        assertNotEquals(0, outputStream.size());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
}