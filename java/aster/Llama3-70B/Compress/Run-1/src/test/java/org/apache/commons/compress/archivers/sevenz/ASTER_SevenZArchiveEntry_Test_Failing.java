/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZArchiveEntry_Test_Failing {
    private boolean hasWindowsAttributes;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentMethods_hurN0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Iterable<? extends SevenZMethodConfiguration> result = sevenZArchiveEntry.getContentMethods();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_OYce0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setLastModifiedDate(1643723400000L);
    assertEquals(1643723400000L, sevenZArchiveEntry.getLastModifiedDate().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_ASbE0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setAccessDate(1643723400000L);
    assertEquals(1643723400000L, sevenZArchiveEntry.getAccessDate().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_XdTm0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date expected = FileTimes.toDate(sevenZArchiveEntry.getCreationTime());
    Date actual = sevenZArchiveEntry.getCreationDate();
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasLastModifiedDate_MLbS0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_RwKb0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.hasStream();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_uVwL0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasAccessDate();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_hueZ0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date date = new Date(1643723400000L); // 2022-02-01 12:30:00
    long expected = 132096744000000000L;
    long actual = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDate_fYNW0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasCreationDate();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_rkCL0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date();
    sevenZArchiveEntry.setLastModifiedDate(lastModifiedDate);
    assert sevenZArchiveEntry.getLastModifiedTime() == FileTimes.toFileTime(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItem_rkgS0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.isAntiItem();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_uziG0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasCrc();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_saLJ0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date accessDate = sevenZArchiveEntry.getAccessDate();
    assertNotNull(accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_XAsP0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long ntfsCreationDate = 1643723400000L;
    sevenZArchiveEntry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), sevenZArchiveEntry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeNotNull_lkLQ0_YmjX0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1643723400000L);
    entry.setLastModifiedTime(time);
    assertTrue(entry.getHasWindowsAttributes()); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeNotNull_lkLQ0_YmjX0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1643723400000L);
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeUpdate_QKAW2_wGvA0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time1 = FileTime.fromMillis(1643723400000L);
    FileTime time2 = FileTime.fromMillis(1643723500000L);
    entry.setLastModifiedTime(time1);
    entry.setLastModifiedTime(time2);
    assertTrue(entry.getHasWindowsAttributes()); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeUpdate_QKAW2_wGvA0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time1 = FileTime.fromMillis(1643723400000L);
    FileTime time2 = FileTime.fromMillis(1643723500000L);
    entry.setLastModifiedTime(time1);
    entry.setLastModifiedTime(time2);
    assertEquals(time2, entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeUpdate_kNYJ2_PaUq0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time1 = FileTime.fromMillis(1000);
    FileTime time2 = FileTime.fromMillis(2000);
    entry.setCreationTime(time1);
    entry.setCreationTime(time2);
    assertTrue(entry.getHasWindowsAttributes()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNonNullTime_DOjz0_DGQD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1000);
    entry.setAccessTime(time);
    assertTrue(entry.getHasWindowsAttributes()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withCurrentTime_GpAv2_rpGX0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setAccessTime(time);
    assertTrue(entry.getHasWindowsAttributes()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_XdTm0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean actual = sevenZArchiveEntry.getHasWindowsAttributes();
    assertTrue(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_CynL0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
    assertTrue(result);
}
}