/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarFile_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF1_vqQv0_ZstP0() throws IOException {
    Path tempFile = Files.createTempFile("archive", ".tar");
    TarFile tarFile = new TarFile(tempFile, true);
    boolean result = tarFile.isAtEOF();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF1_vqQv0_RzAL1() throws IOException {
    Path tempFile = Files.createTempFile("archive", ".tar");
    try {
        TarFile tarFile = new TarFile(tempFile, true);
        boolean result = tarFile.isAtEOF();
        Assertions.assertTrue(result);
    } catch (IOException e) {
        Assertions.fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries2_aeJg1_EPxC0() {
    byte[] content = new byte[1024];
    TarFile tarFile = null;
    try {
        tarFile = new TarFile(content, "UTF-8");
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assertNotNull(entries);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries1_dvPA0_RKdT0() {
    try {
        Path tempFile = Files.createTempFile("archive", ".tar");
        TarFile tarFile = new TarFile(tempFile, true);
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assertNotNull(entries);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries3_TYFl2_hRoA0() {
    byte[] content = new byte[1024];
    List<TarArchiveEntry> entries = null;
    try {
        try {
            TarFile tarFile = new TarFile(content, true);
            entries = tarFile.getEntries();
        } catch (IOException e) {
            fail("IOException occurred");
        }
    } catch (Exception e) {
        fail("Exception occurred");
    }
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries6_RnTs5_SbwQ0() throws IOException {
    SeekableByteChannel archive = Files.newByteChannel(Files.createTempFile("archive", ".tar"));
    try {
        TarFile tarFile = new TarFile(archive, 512, 1024, "UTF-8", true);
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assertNotNull(entries);
    } catch (IOException e) {
        throw e; // rethrow the exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries8_Kwlw7_zxAd0() throws IOException {
    Path archivePath = Files.createTempFile("archive", ".tar");
    try {
        try {
            TarFile tarFile = new TarFile(archivePath, "UTF-8");
            List<TarArchiveEntry> entries = tarFile.getEntries();
            assertNotNull(entries);
        } catch (IOException e) {
            throw e;
        }
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries7_Kmov6_kDCE0() throws IOException {
    File archive = null;
    try {
        archive = Files.createTempFile("archive", ".tar").toFile();
    } catch (IOException e) {
        fail("Failed to create temp file");
    }
    try {
        try {
            TarFile tarFile = new TarFile(archive, true);
            List<TarArchiveEntry> entries = tarFile.getEntries();
            assertNotNull(entries);
        } catch (IOException e) {
            fail("Failed to create TarFile");
        }
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries9_fpUc8_IwEN0() throws IOException {
    File archive = Files.createTempFile("archive", ".tar").toFile();
    try {
        try {
            TarFile tarFile = new TarFile(archive, "UTF-8");
            List<TarArchiveEntry> entries = tarFile.getEntries();
            assertNotNull(entries);
        } catch (IOException e) {
            throw e;
        }
    } catch (IOException e) {
        throw e;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries10_DXTJ9_gdHM0() throws IOException {
    File archive = Files.createTempFile("archive", ".tar").toFile();
    TarFile tarFile;
    try {
        tarFile = new TarFile(archive, false); // added false as second argument
    } catch (IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries11_OjNM10_SGTT0() {
    Path archivePath = null;
    try {
        archivePath = Files.createTempFile("archive", ".tar");
        try {
            TarFile tarFile = new TarFile(archivePath);
            List<TarArchiveEntry> entries = tarFile.getEntries();
            assertNotNull(entries);
        } catch (IOException e) {
        }
    } catch (IOException e) {
    }
}
}