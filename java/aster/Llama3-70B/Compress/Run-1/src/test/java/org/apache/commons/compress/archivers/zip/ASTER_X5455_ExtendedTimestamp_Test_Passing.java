/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.TimeUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Passing {
private ZipLong fileTimeToZipLong(FileTime time) {
    return time == null ? null : unixTimeToZipLong(TimeUtils.toUnixTime(time));
}
private ZipLong unixTimeToZipLong(long unixTime) {
    return new ZipLong(unixTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_GeIW0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] actual = x5455_ExtendedTimestamp.getCentralDirectoryData();
    byte[] expected = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlags_PtuP0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte expected = 0; // default value of flags
    assert(expected == x5455_ExtendedTimestamp.getFlags());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeNull_qWeG1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(null);
    assertFalse(x5455.isBit2_createTimePresent());
    assertEquals((byte) (x5455.getFlags() & ~0x01), x5455.getFlags());
    assertNull(x5455.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength6_zkQE5() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort result = x5455_ExtendedTimestamp.getLocalFileDataLength();
    assertArrayEquals(new byte[]{0x01, 0x00}, result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_PLhG0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    int result = obj.hashCode();
    assertEquals(-123 * (obj.getFlags() & 0x07), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_modifyTimePresent_Qjjg0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x01);
    assertTrue(x5455_ExtendedTimestamp.isBit0_modifyTimePresent());
    assertFalse(x5455_ExtendedTimestamp.isBit1_accessTimePresent());
    assertFalse(x5455_ExtendedTimestamp.isBit2_createTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_accessTimePresent_hjYY1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x02);
    assertFalse(x5455_ExtendedTimestamp.isBit0_modifyTimePresent());
    assertTrue(x5455_ExtendedTimestamp.isBit1_accessTimePresent());
    assertFalse(x5455_ExtendedTimestamp.isBit2_createTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_createTimePresent_WdVo2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x04);
    assertFalse(x5455_ExtendedTimestamp.isBit0_modifyTimePresent());
    assertFalse(x5455_ExtendedTimestamp.isBit1_accessTimePresent());
    assertTrue(x5455_ExtendedTimestamp.isBit2_createTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_allPresent_UZof3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x07);
    assertTrue(x5455_ExtendedTimestamp.isBit0_modifyTimePresent());
    assertTrue(x5455_ExtendedTimestamp.isBit1_accessTimePresent());
    assertTrue(x5455_ExtendedTimestamp.isBit2_createTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_ANAP0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1643723400000L);
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    assertEquals(1643723400L, x5455_ExtendedTimestamp.getCreateTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_QrIl0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1643723400000L); // 2022-02-01 12:30:00
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    assertEquals(new ZipLong(1643723400L), x5455_ExtendedTimestamp.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_noTimesPresent_WNxD4() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] result = x5455_ExtendedTimestamp.getLocalFileDataData();
    assertArrayEquals(new byte[] {0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_SBfq0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1643723400000L); // 2022-02-01 12:30:00
    x5455_ExtendedTimestamp.setModifyJavaTime(date);
    ZipLong expected = unixTimeToZipLong(1643723400);
    assertEquals(expected, x5455_ExtendedTimestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_HYcT0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1643723400000L); // 2022-02-01 12:30:00
    x5455_ExtendedTimestamp.setModifyJavaTime(date);
    ZipLong expected = new ZipLong(1643723400L);
    assertEquals(expected, x5455_ExtendedTimestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_AAlV0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    assertTrue(obj.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_DSjm1() {
    Object obj = new Object();
    X5455_ExtendedTimestamp xf = new X5455_ExtendedTimestamp();
    assertFalse(xf.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_TDSP0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1643723400000L);
    x5455_ExtendedTimestamp.setCreateFileTime(fileTime);
    ZipLong createTime = x5455_ExtendedTimestamp.getCreateTime();
    assertNotNull(createTime);
    assertEquals(1643723400L, createTime.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_noFlags_jUqp0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    assertEquals("0x5455 Zip Extra Field: Flags=0 ", x5455.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_gOrc0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1643723400000L);
    x5455_ExtendedTimestamp.setModifyFileTime(fileTime);
    assertEquals(new ZipLong(1643723400L), x5455_ExtendedTimestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeNotNull_WJMv0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(123456789);
    x5455.setModifyTime(l);
    assertTrue(x5455.isBit0_modifyTimePresent());
    assertEquals((byte) (x5455.getFlags() | 1), x5455.getFlags());
    assertEquals(l, x5455.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeNull_MeZt1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setModifyTime(null);
    assertFalse(x5455.isBit0_modifyTimePresent());
    assertEquals((byte) (x5455.getFlags() & ~1), x5455.getFlags());
    assertNull(x5455.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeZero_PmPq2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0);
    x5455.setModifyTime(l);
    assertTrue(x5455.isBit0_modifyTimePresent());
    assertEquals((byte) (x5455.getFlags() | 1), x5455.getFlags());
    assertEquals(l, x5455.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_clone_oRJN0() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    Object clonedObj = obj.clone();
    assertNotSame(obj, clonedObj);
    assertEquals(obj, clonedObj);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNonNullZipLong_lMtk0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(123456789);
    x5455.setAccessTime(l);
    assertTrue(x5455.isBit1_accessTimePresent());
    assertEquals((byte) (x5455.getFlags() | X5455_ExtendedTimestamp.ACCESS_TIME_BIT), x5455.getFlags());
    assertEquals(l, x5455.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNullZipLong_evrL1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setAccessTime(null);
    assertFalse(x5455.isBit1_accessTimePresent());
    assertEquals((byte) (x5455.getFlags() & ~X5455_ExtendedTimestamp.ACCESS_TIME_BIT), x5455.getFlags());
    assertNull(x5455.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withZeroZipLong_vbeg2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0);
    x5455.setAccessTime(l);
    assertTrue(x5455.isBit1_accessTimePresent());
    assertEquals((byte) (x5455.getFlags() | X5455_ExtendedTimestamp.ACCESS_TIME_BIT), x5455.getFlags());
    assertEquals(l, x5455.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_QycQ0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1643723400000L);
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    assertEquals(1643723400L, x5455_ExtendedTimestamp.getAccessTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_fReK0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    assertNotNull(x5455_ExtendedTimestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_uKlx0_fid1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1000);
    x5455_ExtendedTimestamp.setAccessFileTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_EBTW0_fid1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1000);
    x5455_ExtendedTimestamp.setAccessFileTime(fileTime);
    assertEquals(new ZipLong(1), x5455_ExtendedTimestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeNotNull_loMC0_1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(1234567890L);
    x5455.setCreateTime(l);
    assertTrue(x5455.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeNotNull_loMC0_3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(1234567890L);
    x5455.setCreateTime(l);
    assertEquals(l, x5455.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeNull_qWeG1_1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(null);
    assertFalse(x5455.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeNull_qWeG1_2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(null);
    assertEquals((byte) (x5455.getFlags() & ~0x01), x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeNull_qWeG1_3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(null);
    assertNull(x5455.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeZero_WGPM2_1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0L);
    x5455.setCreateTime(l);
    assertTrue(x5455.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeZero_WGPM2_3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0L);
    x5455.setCreateTime(l);
    assertEquals(l, x5455.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_modifyTimePresent_Qjjg0_1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x01);
    assertTrue(x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_modifyTimePresent_Qjjg0_2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x01);
    assertFalse(x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_modifyTimePresent_Qjjg0_3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x01);
    assertFalse(x5455_ExtendedTimestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_accessTimePresent_hjYY1_1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x02);
    assertFalse(x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_accessTimePresent_hjYY1_2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x02);
    assertTrue(x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_accessTimePresent_hjYY1_3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x02);
    assertFalse(x5455_ExtendedTimestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_createTimePresent_WdVo2_1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x04);
    assertFalse(x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_createTimePresent_WdVo2_2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x04);
    assertFalse(x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_createTimePresent_WdVo2_3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x04);
    assertTrue(x5455_ExtendedTimestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_allPresent_UZof3_1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x07);
    assertTrue(x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_allPresent_UZof3_2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x07);
    assertTrue(x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_setFlags_allPresent_UZof3_3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setFlags((byte) 0x07);
    assertTrue(x5455_ExtendedTimestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit1_accessTimePresent_xsJP0_fid1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    boolean result = x5455_ExtendedTimestamp.isBit1_accessTimePresent();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_xOPA0_1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = x5455_ExtendedTimestamp.getHeaderId();
    assertNotNull(headerId);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_TDSP0_1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1643723400000L);
    x5455_ExtendedTimestamp.setCreateFileTime(fileTime);
    ZipLong createTime = x5455_ExtendedTimestamp.getCreateTime();
    assertNotNull(createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_TDSP0_2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1643723400000L);
    x5455_ExtendedTimestamp.setCreateFileTime(fileTime);
    ZipLong createTime = x5455_ExtendedTimestamp.getCreateTime();
    assertEquals(1643723400L, createTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_hYuA0_fid1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = x5455_ExtendedTimestamp.getCreateTime();
    assertNull(createTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_QkNK0_fid1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    boolean result = x5455_ExtendedTimestamp.isBit0_modifyTimePresent();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit2_createTimePresent_OcTo0_fid1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    boolean result = x5455_ExtendedTimestamp.isBit2_createTimePresent();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeNotNull_WJMv0_1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(123456789);
    x5455.setModifyTime(l);
    assertTrue(x5455.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeNotNull_WJMv0_2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(123456789);
    x5455.setModifyTime(l);
    assertEquals((byte) (x5455.getFlags() | 1), x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeNotNull_WJMv0_3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(123456789);
    x5455.setModifyTime(l);
    assertEquals(l, x5455.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeNull_MeZt1_1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setModifyTime(null);
    assertFalse(x5455.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeNull_MeZt1_2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setModifyTime(null);
    assertEquals((byte) (x5455.getFlags() & ~1), x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeNull_MeZt1_3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setModifyTime(null);
    assertNull(x5455.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeZero_PmPq2_1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0);
    x5455.setModifyTime(l);
    assertTrue(x5455.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeZero_PmPq2_2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0);
    x5455.setModifyTime(l);
    assertEquals((byte) (x5455.getFlags() | 1), x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTimeZero_PmPq2_3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0);
    x5455.setModifyTime(l);
    assertEquals(l, x5455.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_clone_oRJN0_1() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    Object clonedObj = obj.clone();
    assertNotSame(obj, clonedObj);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_clone_oRJN0_2() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    Object clonedObj = obj.clone();
    assertEquals(obj, clonedObj);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNonNullZipLong_lMtk0_1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(123456789);
    x5455.setAccessTime(l);
    assertTrue(x5455.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNonNullZipLong_lMtk0_2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(123456789);
    x5455.setAccessTime(l);
    assertEquals((byte) (x5455.getFlags() | X5455_ExtendedTimestamp.ACCESS_TIME_BIT), x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNonNullZipLong_lMtk0_3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(123456789);
    x5455.setAccessTime(l);
    assertEquals(l, x5455.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNullZipLong_evrL1_1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setAccessTime(null);
    assertFalse(x5455.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNullZipLong_evrL1_2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setAccessTime(null);
    assertEquals((byte) (x5455.getFlags() & ~X5455_ExtendedTimestamp.ACCESS_TIME_BIT), x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNullZipLong_evrL1_3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setAccessTime(null);
    assertNull(x5455.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withZeroZipLong_vbeg2_1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0);
    x5455.setAccessTime(l);
    assertTrue(x5455.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withZeroZipLong_vbeg2_2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0);
    x5455.setAccessTime(l);
    assertEquals((byte) (x5455.getFlags() | X5455_ExtendedTimestamp.ACCESS_TIME_BIT), x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withZeroZipLong_vbeg2_3() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0);
    x5455.setAccessTime(l);
    assertEquals(l, x5455.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_bit0_modifyTimePresentTrue_JeFt0_cfNL0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(new Date());
    ZipShort result = x5455_ExtendedTimestamp.getCentralDirectoryLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_bit0_modifyTimePresentFalse_SUaK1_CAJy0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(new Date(0));
    ZipShort result = x5455_ExtendedTimestamp.getCentralDirectoryLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength2_IAIy1_jrME0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setModifyJavaTime(date);
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    ZipShort result = x5455_ExtendedTimestamp.getLocalFileDataLength();
    assertArrayEquals(new byte[]{0x09, 0x00}, result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength1_ggsf0_kkJF0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    x5455_ExtendedTimestamp.setModifyJavaTime(date);
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    ZipShort result = x5455_ExtendedTimestamp.getLocalFileDataLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength3_JEPZ2_BfpJ0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    ZipShort result = x5455_ExtendedTimestamp.getLocalFileDataLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength5_kqKz4_bQcQ0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    ZipShort result = x5455_ExtendedTimestamp.getLocalFileDataLength();
    assertArrayEquals(new byte[]{0x05, 0x00}, result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength4_nEYW3_hQiA0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    ZipShort result = x5455_ExtendedTimestamp.getLocalFileDataLength();
    assertArrayEquals(new byte[]{0x09, 0x00}, result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_FoBP1_rBoN0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    Date date = new Date();
    obj.setModifyJavaTime(date);
    int result = obj.hashCode();
    assertEquals(-123 * (obj.getFlags() & 0x07) ^ obj.getModifyTime().hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_3_RqbA2_xKrG0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    Date date = new Date();
    obj.setAccessJavaTime(date);
    int result = obj.hashCode();
    assertEquals(-123 * (obj.getFlags() & 0x07) ^ Integer.rotateLeft(obj.getAccessTime().hashCode(), 11), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_4_rRZR3_SsNQ0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    Date date = new Date();
    obj.setAccessJavaTime(date);
    int result = obj.hashCode();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTime_ajGr0_lzoA0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1643723400000L);
    x5455_ExtendedTimestamp.setCreateJavaTime(date);
    FileTime expected = TimeUtils.unixTimeToFileTime(1643723400);
    Assertions.assertEquals(expected, x5455_ExtendedTimestamp.getCreateFileTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTime_JuJD0_xuqL0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1643723400000L);
    x5455_ExtendedTimestamp.setModifyJavaTime(date);
    FileTime expected = TimeUtils.unixTimeToFileTime(1643723400);
    Assertions.assertEquals(expected, x5455_ExtendedTimestamp.getModifyFileTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTime_qxzY0_Imxz0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1643723400000L);
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    FileTime expected = TimeUtils.unixTimeToFileTime(1643723400);
    Assertions.assertEquals(expected, x5455_ExtendedTimestamp.getAccessFileTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_accessTimePresent_tKtp1_SfMY0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    byte[] result = x5455_ExtendedTimestamp.getLocalFileDataData();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_createTimePresent_pcVE2_XaNB0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(date);
    byte[] result = x5455_ExtendedTimestamp.getLocalFileDataData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessJavaTime_gYbR0_XwWf0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(new Date(1643723400000L));
    Date expected = new Date(1643723400000L);
    Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_modifyTimePresent_batT1_bEsz0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setFlags((byte) 1);
    x5455.setModifyTime(new ZipLong(123456789));
    assertEquals("0x5455 Zip Extra Field: Flags=1  Modify:[Thu Nov 29 21:33:09 UTC 1973] ", x5455.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_accessTimePresent_UyXU2_dvmx0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setFlags((byte) 2);
    x5455.setAccessTime(new ZipLong(123456789));
    assertEquals("0x5455 Zip Extra Field: Flags=10  Access:[Thu Nov 29 21:33:09 UTC 1973] ", x5455.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_modifyAndAccessTimePresent_leNq5_PlWN0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date modifyDate = new Date();
    Date accessDate = new Date();
    x5455_ExtendedTimestamp.setModifyJavaTime(modifyDate);
    x5455_ExtendedTimestamp.setAccessJavaTime(accessDate);
    byte[] result = x5455_ExtendedTimestamp.getLocalFileDataData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_createTimePresent_lYmm3_NKaC0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setFlags((byte) 4);
    Date createTime = new Date(123456789 * 1000);
    x5455.setAccessJavaTime(createTime);
    assertEquals("0x5455 Zip Extra Field: Flags=110  Access:[Fri Dec 19 07:12:18 UTC 1969] ", x5455.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTime_eFlX0_LYbn0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setCreateJavaTime(new Date(1643723400 * 1000L));
    Date expected = new Date(1643723400 * 1000L);
    Date actual = x5455_ExtendedTimestamp.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyJavaTime_uOMA0_eVzH0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setModifyJavaTime(new Date(1643723400000L));
    Date expected = new Date(1643723400000L);
    Date actual = x5455_ExtendedTimestamp.getModifyJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_allFlagsPresent_kdXw4_PMce0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setFlags((byte) 7);
    x5455.setModifyTime(new ZipLong(123456789));
    x5455.setAccessJavaTime(new Date(123456789 * 1000));
    x5455.setCreateTime(new ZipLong(123456789));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_1_QGyP0_QoLe0_1() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 1);
    assertEquals(0, x5455_ExtendedTimestamp.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_1_QGyP0_QoLe0_2() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 1);
    assertNull(x5455_ExtendedTimestamp.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_1_QGyP0_QoLe0_3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 1);
    assertNull(x5455_ExtendedTimestamp.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_1_QGyP0_QoLe0_4() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 1);
    assertNull(x5455_ExtendedTimestamp.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_2_LirL1_pdZB0_1() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[5];
    data[0] = 1;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 5);
    assertEquals(1, x5455_ExtendedTimestamp.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_2_LirL1_pdZB0_2() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[5];
    data[0] = 1;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 5);
    assertNotNull(x5455_ExtendedTimestamp.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_2_LirL1_pdZB0_3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[5];
    data[0] = 1;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 5);
    assertNull(x5455_ExtendedTimestamp.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_2_LirL1_pdZB0_4() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[5];
    data[0] = 1;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 5);
    assertNull(x5455_ExtendedTimestamp.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_3_myoz2_CFAv0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[9];
    data[0] = 3;
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 9);
        assertEquals(3, x5455_ExtendedTimestamp.getFlags());
        assertNotNull(x5455_ExtendedTimestamp.getModifyTime());
        assertNotNull(x5455_ExtendedTimestamp.getAccessTime());
        assertNull(x5455_ExtendedTimestamp.getCreateTime());
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_oCcA2_vwYO0() {
    X5455_ExtendedTimestamp xf1 = new X5455_ExtendedTimestamp();
    xf1.setFlags((byte) 1);
    xf1.setModifyJavaTime(new Date(1640995200000L));
    xf1.setAccessJavaTime(new Date(1640995200000L));
    xf1.setCreateJavaTime(new Date(1640995200000L));
    X5455_ExtendedTimestamp xf2 = new X5455_ExtendedTimestamp();
    xf2.setFlags((byte) 1);
    xf2.setModifyJavaTime(new Date(1640995200000L));
    xf2.setAccessJavaTime(new Date(1640995200000L));
    xf2.setCreateJavaTime(new Date(1640995200000L));
    assertTrue(xf1.equals(xf2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_4_RnZx3_jcQv0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[13];
    data[0] = 7;
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(data, 0, 13);
        assertEquals(7, x5455_ExtendedTimestamp.getFlags());
        assertNotNull(x5455_ExtendedTimestamp.getModifyTime());
        assertNotNull(x5455_ExtendedTimestamp.getAccessTime());
        assertNotNull(x5455_ExtendedTimestamp.getCreateTime());
    } catch (ZipException e) {
        fail("ZipException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_6_eiDV5_XxHB0_1() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[4]; // Increased size to 4 bytes
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(data, 4, 0);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X5455_ExtendedTimestamp too short, only 0 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_6_eiDV5_XxHB0_2() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[4]; // changed from 1 to 4
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 0);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X5455_ExtendedTimestamp too short, only 0 bytes", e.getMessage());
    }
}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_7_zGhG6_eBsV0_1() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[5];
    data[0] =0;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data,0, 4);
    assertEquals(1, x5455_ExtendedTimestamp.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_7_zGhG6_eBsV0_3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[5];
    data[0] = 1;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 4);
    assertNull(x5455_ExtendedTimestamp.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_7_zGhG6_eBsV0_4() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[5];
    data[0] = 1;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 4);
    assertNull(x5455_ExtendedTimestamp.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentModifyTime_FHNT4_INCw0() {
    X5455_ExtendedTimestamp xf1 = new X5455_ExtendedTimestamp();
    xf1.setFlags((byte) 1);
    xf1.setAccessJavaTime(new Date(1640995200000L));
    xf1.setModifyJavaTime(new Date(1640995200000L));
    xf1.setCreateJavaTime(new Date(1640995200000L));
    X5455_ExtendedTimestamp xf2 = new X5455_ExtendedTimestamp();
    xf2.setFlags((byte) 1);
    xf2.setAccessJavaTime(new Date(1640995200000L));
    xf2.setModifyJavaTime(new Date(1641081600000L));
    xf2.setCreateJavaTime(new Date(1640995200000L));
    assertFalse(xf1.equals(xf2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_8_rzTb7_FOQe0_1() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[13];
    data[0] = 7;
    x5455_ExtendedTimestamp.parseFromLocalFileData(data, 1, 12);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_JMIl0_WpLd0_1() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[10];
    x5455_ExtendedTimestamp.parseFromCentralDirectoryData(buffer, 0, 10);
    assertEquals(0, x5455_ExtendedTimestamp.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_JMIl0_WpLd0_2() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[10];
    x5455_ExtendedTimestamp.parseFromCentralDirectoryData(buffer, 0, 10);
    assertNull(x5455_ExtendedTimestamp.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_JMIl0_WpLd0_3() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[10];
    x5455_ExtendedTimestamp.parseFromCentralDirectoryData(buffer, 0, 10);
    assertNull(x5455_ExtendedTimestamp.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_JMIl0_WpLd0_4() throws ZipException {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[10];
    x5455_ExtendedTimestamp.parseFromCentralDirectoryData(buffer, 0, 10);
    assertNull(x5455_ExtendedTimestamp.getCreateTime());}
}