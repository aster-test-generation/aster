/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesNullSignature_HoiC0() {
    boolean result = LZMACompressorInputStream.matches(null, 3);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesLengthLessThan3_FonT1() {
    byte[] signature = new byte[3];
    boolean result = LZMACompressorInputStream.matches(signature, 2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignatureNotMatching_ZltN2() {
    byte[] signature = new byte[3];
    signature[0] = 0x5d;
    signature[1] = 1;
    signature[2] = 0;
    boolean result = LZMACompressorInputStream.matches(signature, 3);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesValidSignature_dRHB3() {
    byte[] signature = new byte[3];
    signature[0] = 0x5d;
    signature[1] = 0;
    signature[2] = 0;
    boolean result = LZMACompressorInputStream.matches(signature, 3);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesNullAndLengthLessThan3_CyLS4() {
    boolean result = LZMACompressorInputStream.matches(null, 2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_tyHX0_1() {
    byte[] signature = new byte[] { 0x5d, 0, 0, 1, 2, 3 };
    assertTrue(LZMACompressorInputStream.matches(signature, 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_tyHX0_2() {
    byte[] signature = new byte[] { 0x5d, 0, 0, 1, 2, 3 };
    assertFalse(LZMACompressorInputStream.matches(null, 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_tyHX0_3() {
    byte[] signature = new byte[] { 0x5d, 0, 0, 1, 2, 3 };
    assertFalse(LZMACompressorInputStream.matches(signature, 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_tyHX0_4() {
    byte[] signature = new byte[] { 0x5d, 0, 0, 1, 2, 3 };
    assertFalse(LZMACompressorInputStream.matches(new byte[] { 1, 2, 3 }, 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withEndOfFile_RKBM1_WKqM0() throws IOException {
    byte[] signature = new byte[] { 0x5d, 0, 0 };
    assertTrue(LZMACompressorInputStream.matches(signature, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withEndOfFile_RKBM1_gZGv1_1() throws IOException {
    byte[] signature = new byte[] { 0x5d, 0, 0 };
    signature = new byte[] {};
    signature = new byte[] { 0x5d, 0 };
    signature = new byte[] { 0, 0, 0 };
    assertFalse(LZMACompressorInputStream.matches(signature, 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withEndOfFile_RKBM1_gZGv1_2() throws IOException {
    byte[] signature = new byte[] { 0x5d, 0, 0 };
    signature = new byte[] {};
    signature = new byte[] { 0x5d, 0 };
    signature = new byte[] { 0, 0, 0 };
    assertFalse(LZMACompressorInputStream.matches(signature, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withEndOfFile_RKBM1_gZGv1_3() throws IOException {
    byte[] signature = new byte[] { 0x5d, 0, 0 };
    signature = new byte[] {};
    signature = new byte[] { 0x5d, 0 };
    signature = new byte[] { 0, 0, 0 };
    assertFalse(LZMACompressorInputStream.matches(signature, 2));}
}