/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_true_xJSq0_Gkdy0() {
    byte[] signature = new byte[] { (byte) 0x60, (byte) 0xEA, 0x00 };
    assertTrue(ArjArchiveInputStream.matches(signature, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveName_SxlZ0_qDVh0() throws ArchiveException, IOException {
    ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream("test".getBytes()));
    assertEquals("test", arjArchiveInputStream.getArchiveName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveComment_withCharset_YHcD1_EzFI0() throws ArchiveException, IOException {
    ArjArchiveInputStream arjArchiveInputStream;
    try {
        arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream("".getBytes()), "UTF-8");
    } catch (ArchiveException e) {
        throw new AssertionError("Should not throw ArchiveException", e);
    }
    assertEquals("", arjArchiveInputStream.getArchiveComment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_MybE0_YLcy0() throws IOException, ArchiveException {
    ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    arjArchiveInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_noCurrentLocalFileHeader_niDW1_RebB0() throws IOException {
    try {
        ArjArchiveInputStream ais;
        try {
            ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        } catch (ArchiveException e) {
            throw new IOException(e);
        }
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        try {
            ais.read(b, off, len);
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
        }
    } catch (IOException e) {
        throw e;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveName_SxlZ0_qDVh0_fid1() throws ArchiveException, IOException {
    ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream("ARJ test archive".getBytes()));
    assertNull(arjArchiveInputStream.getArchiveName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveComment_withCharset_YHcD1_EzFI0_fid1() throws ArchiveException, IOException {
    ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream("".getBytes()), "UTF-8");
    assertNotNull(arjArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_MybE0_YLcy0_fid1() throws IOException, ArchiveException {
    try (ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]))) {
        arjArchiveInputStream.close();
    }
}
}