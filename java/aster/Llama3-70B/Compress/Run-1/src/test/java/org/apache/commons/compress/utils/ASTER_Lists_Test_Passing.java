/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.ArrayList;
import java.util.Iterator;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Lists_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_wePm0() {
    ArrayList<?> list = Lists.newArrayList();
    assertNotNull(list);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList1_dlWz0() {
    Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();
    ArrayList<Integer> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList2_VozA1() {
    Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals("a", list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList3_lZOZ2() {
    Iterator<Double> iterator = Arrays.asList(1.0, 2.0, 3.0).iterator();
    ArrayList<Double> list = Lists.newArrayList(iterator);
    assertEquals(1.0, list.get(0), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList4_lASi3() {
    Iterator<Character> iterator = Arrays.asList('a', 'b', 'c').iterator();
    ArrayList<Character> list = Lists.newArrayList(iterator);
    assertEquals('a', list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList5_jlcT4() {
    Iterator<Boolean> iterator = Arrays.asList(true, false, true).iterator();
    ArrayList<Boolean> list = Lists.newArrayList(iterator);
    assertEquals(true, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList6_Fplz5() {
    Iterator<Integer> iterator = new ArrayList<Integer>().iterator();
    ArrayList<Integer> list = Lists.newArrayList(iterator);
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList7_CMdY6() {
    Iterator<String> iterator = Arrays.asList("a", "b", "c", "d", "e").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals(5, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList8_UFTh7() {
    Iterator<Integer> iterator = Arrays.asList(1, 2, 3, 4, 5).iterator();
    ArrayList<Integer> list = Lists.newArrayList(iterator);
    assertEquals(5, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList9_oNzs8() {
    Iterator<Double> iterator = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0).iterator();
    ArrayList<Double> list = Lists.newArrayList(iterator);
    assertEquals(5, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList10_gmUi9() {
    Iterator<Character> iterator = Arrays.asList('a', 'b', 'c', 'd', 'e').iterator();
    ArrayList<Character> list = Lists.newArrayList(iterator);
    assertEquals(5, list.size());
}
}