/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches3_vqpK2() {
    byte[] signature = new byte[6];
    signature[0] = 0x30;
    signature[1] = 0x37;
    signature[2] = 0x30;
    signature[3] = 0x37;
    signature[4] = 0x30;
    signature[5] = 0x31;
    assertTrue(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches4_gAEa3() {
    byte[] signature = new byte[6];
    signature[0] = 0x30;
    signature[1] = 0x37;
    signature[2] = 0x30;
    signature[3] = 0x37;
    signature[4] = 0x30;
    signature[5] = 0x32;
    assertTrue(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches5_VJUN4() {
    byte[] signature = new byte[6];
    signature[0] = 0x30;
    signature[1] = 0x37;
    signature[2] = 0x30;
    signature[3] = 0x37;
    signature[4] = 0x30;
    signature[5] = 0x37;
    assertTrue(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches6_iScN5() {
    byte[] signature = new byte[5];
    assertFalse(CpioArchiveInputStream.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches9_QAXP8() {
    byte[] signature = new byte[6];
    signature[0] = 0x30;
    signature[1] = 0x36;
    signature[2] = 0x30;
    signature[3] = 0x37;
    signature[4] = 0x30;
    signature[5] = 0x31;
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches10_tkkV9() {
    byte[] signature = new byte[6];
    signature[0] = 0x30;
    signature[1] = 0x37;
    signature[2] = 0x30;
    signature[3] = 0x36;
    signature[4] = 0x30;
    signature[5] = 0x31;
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches11_vaoA10() {
    byte[] signature = new byte[6];
    signature[0] = 0x30;
    signature[1] = 0x37;
    signature[2] = 0x30;
    signature[3] = 0x37;
    signature[4] = 0x31;
    signature[5] = 0x31;
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches12_cunw11() {
    byte[] signature = new byte[6];
    signature[0] = 0x30;
    signature[1] = 0x37;
    signature[2] = 0x30;
    signature[3] = 0x37;
    signature[4] = 0x30;
    signature[5] = 0x38;
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches13_ydau12() {
    byte[] signature = new byte[0];
    assertFalse(CpioArchiveInputStream.matches(signature, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches14_LMLR13() {
    byte[] signature = null;
    try {
        CpioArchiveInputStream.matches(signature, 6);
        fail();
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches7_ACqs6_yzdG0() {
    byte[] signature = new byte[6];
    signature[0] = (byte) 0x70;
    signature[1] = (byte) 0xC7; // Fix: Cast 0xC7 to byte
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches8_FlWG7_tXYF0() {
    byte[] signature = new byte[6];
    signature[1] = (byte) 0x70;
    signature[0] = (byte) 0xC7; // Fix: Cast 0xC7 to byte
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches1_ARoO0_AVIw0_fid1() {
    byte[] signature = new byte[6];
    signature[0] = (byte) 0x71;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches2_cDWB1_EZSh0_fid1() {
    byte[] signature = new byte[6];
    signature[1] = (byte) 0x71;
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
}