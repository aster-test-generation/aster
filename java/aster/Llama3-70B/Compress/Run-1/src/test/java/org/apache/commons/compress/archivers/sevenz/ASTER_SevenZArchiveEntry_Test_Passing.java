/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZArchiveEntry_Test_Passing {
    private boolean hasWindowsAttributes;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCreationDate_NNSi0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasCreationDate(true);
    assertTrue(sevenZArchiveEntry.getHasCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValue_IYrO0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long expected = 0L; // default value of crc
    long actual = sevenZArchiveEntry.getCrcValue();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDate_xxIR0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasAccessDate(true);
    assertTrue(sevenZArchiveEntry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_zHbE0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long ntfsTime = 1323232323;
    Date expected = FileTimes.ntfsTimeToDate(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc1_Scxp0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(0);
    assertEquals(0, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc2_cokj1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(1);
    assertEquals(1, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc3_OiDh2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(-1);
    assertEquals(-1, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc4_sDFi3() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc5_SExK4() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc6_weZc5() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(10);
    assertEquals(10, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc7_TUqY6() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(100);
    assertEquals(100, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc8_utmJ7() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(1000);
    assertEquals(1000, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc9_uOAt8() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(10000);
    assertEquals(10000, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc10_AvOq9() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(100000);
    assertEquals(100000, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItem_jMxO0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setAntiItem(true);
    assertTrue(sevenZArchiveEntry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_ooGm0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date creationDate = new Date();
    sevenZArchiveEntry.setCreationDate(creationDate);
    assertEquals(FileTimes.toFileTime(creationDate), sevenZArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_kTAd0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_PpxQ1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_ouIp2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_PKnl3() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setName("name1");
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setName("name2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasStream_zFnb4() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasStream(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasStream(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentIsDirectory_zMFv5() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setDirectory(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setDirectory(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentIsAntiItem_WBJH6() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setAntiItem(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setAntiItem(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasCreationDate_ISKj7() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasCreationDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasCreationDate(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentCreationDate_JVLP8() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setCreationDate(new Date());
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setCreationDate(new Date(0));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasLastModifiedDate_mqOZ9() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasLastModifiedDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasLastModifiedDate(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLastModifiedDate_mICY10() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setLastModifiedDate(new Date());
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setLastModifiedDate(new Date(0));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasAccessDate_CTwI11() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasAccessDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasAccessDate(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentAccessDate_ZVHQ12() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setAccessDate(new Date());
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setAccessDate(new Date(0));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasWindowsAttributes_ZxKy13() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasWindowsAttributes(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasWindowsAttributes(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentWindowsAttributes_rTJF14() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setWindowsAttributes(1);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setWindowsAttributes(2);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasCrc_JRFF15() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasCrc(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasCrc(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_vpPf0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setName("testName");
    assertEquals("testName", sevenZArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_FXoj0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    sevenZArchiveEntry.setCrcValue(crc);
    assertEquals(crc, sevenZArchiveEntry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_CrkP0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedSize(100);
    assertEquals(100, sevenZArchiveEntry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_GDfR0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setSize(10);
    assertEquals(10, sevenZArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NameIsNull_brXn0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setName(null);
    assertEquals(0, sevenZArchiveEntry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NameIsNotNull_xTaW1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setName("testName");
    assertEquals("testName".hashCode(), sevenZArchiveEntry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_HAMx0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date accessDate = new Date();
    sevenZArchiveEntry.setAccessDate(accessDate);
    assertEquals(FileTimes.toFileTime(accessDate), sevenZArchiveEntry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_tmdF0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    int result = sevenZArchiveEntry.getCrc();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_cBLX0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    sevenZArchiveEntry.setCompressedCrcValue(crc);
    assertEquals(crc, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDirectory_ctau0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setDirectory(true);
    assertTrue(sevenZArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrc_zSIp0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCrc(123);
    assertEquals(123, sevenZArchiveEntry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributes_SJDM0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    int expected = 0; // or any other expected value
    int actual = sevenZArchiveEntry.getWindowsAttributes();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributes_GIKj0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setWindowsAttributes(123);
    assertEquals(123, sevenZArchiveEntry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setHasWindowsAttributes(boolean hasWindowsAttributes) {
        this.hasWindowsAttributes = hasWindowsAttributes;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_augT0_Ihtv0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_XjRG0_rJGH0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setLastModifiedDate(new Date(1643723400000L));
    Date expected = new Date(1643723400000L);
    Date result = sevenZArchiveEntry.getLastModifiedDate();
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNullTime_FBXE1_ZMYT0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_ZHSL0_XCoF0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    assertFalse(sevenZArchiveEntry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasWindowsAttributes_nEPC0_lzeH0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(true);
    assertTrue(sevenZArchiveEntry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentMethods_hurN0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Iterable<? extends SevenZMethodConfiguration> result = sevenZArchiveEntry.getContentMethods();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_OYce0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setLastModifiedDate(1643723400000L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_ASbE0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setAccessDate(1643723400000L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasLastModifiedDate_MLbS0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_RwKb0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.hasStream();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_uVwL0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasAccessDate();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_hueZ0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date date = new Date(1643723400000L); // 2022-02-01 12:30:00
    long expected = 132096744000000000L;
    long actual = SevenZArchiveEntry.javaTimeToNtfsTime(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDate_fYNW0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasCreationDate();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_rkCL0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date();
    sevenZArchiveEntry.setLastModifiedDate(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItem_rkgS0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.isAntiItem();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_uziG0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasCrc();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_saLJ0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    try {
        sevenZArchiveEntry.getAccessDate();
        fail("Expected UnsupportedOperationException to be thrown");
    } catch (UnsupportedOperationException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_XAsP0_fid1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long ntfsCreationDate = 1643723400000L;
    sevenZArchiveEntry.setCreationDate(ntfsCreationDate);
    try {
        sevenZArchiveEntry.getCreationDate();
    } catch (UnsupportedOperationException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeNotNull_lkLQ0_YmjX0_1_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1643723400000L);
    entry.setLastModifiedTime(time);
}
}