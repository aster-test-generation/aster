/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.OutputStream;
import java.util.ServiceLoader;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.ServiceLoader;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandard_TwAA0() {
    String result = CompressorStreamFactory.getZstandard();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2_YCDc0() {
    String result = CompressorStreamFactory.getBzip2();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames1_ibBE0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    Set<String> compressorNames = compressorStreamFactory.getInputStreamCompressorNames();
    assertEquals(14, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames2_gExU1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> compressorNames = compressorStreamFactory.getInputStreamCompressorNames();
    assertEquals(14, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames3_xBgq2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = compressorStreamFactory.getInputStreamCompressorNames();
    assertEquals(14, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_TSKc0() {
    String gzip = CompressorStreamFactory.getGzip();
    assertNotNull(gzip);
    assertEquals("gz", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_iAOP0() {
    String result = CompressorStreamFactory.getLzma();
    assertNotNull(result);
    assertEquals("lzma", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleton_uiXs0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorStreamFactory singleton = CompressorStreamFactory.getSingleton();
    assertNotNull(singleton);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated2_YNmA1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated3_tqWw2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false);
    assertFalse(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated4_kdPZ3() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated5_YHxm4() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 512);
    assertFalse(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated6_BslM5() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    compressorStreamFactory.getDecompressConcatenated();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_MkMi0() {
    String result = CompressorStreamFactory.getSnappyRaw();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames1_ZmDZ0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    Set<String> compressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(10, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames2_HeCl1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> compressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(10, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames3_Ghtf2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(10, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF1_YkDG0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    assertTrue(compressorStreamFactory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF3_cEJq2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    assertTrue(compressorStreamFactory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenated_WithoutConstructorArgument_dXKQ0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    compressorStreamFactory.setDecompressConcatenated(true);
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_lzJr0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    assertEquals("pack200", CompressorStreamFactory.getPack200());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Block_KkLD0() {
    String result = CompressorStreamFactory.getLZ4Block();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramed_OpGO0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    String result = CompressorStreamFactory.getSnappyFramed();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64_FvjL0() {
    String result = CompressorStreamFactory.getDeflate64();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotli_RRTN0() {
    String brotli = CompressorStreamFactory.getBrotli();
    assertNotNull(brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_qLZA0() {
    String result = CompressorStreamFactory.getXz();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_FGSB0_1() {
    ServiceLoader<CompressorStreamProvider> loader = ServiceLoader.load(CompressorStreamProvider.class);
    assertNotNull(loader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_YguC0_fid1() {
    String result = CompressorStreamFactory.getLZ4Framed();
    assertEquals("lz4-framed", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_TSKc0_1() {
    String gzip = CompressorStreamFactory.getGzip();
    assertNotNull(gzip);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_TSKc0_2() {
    String gzip = CompressorStreamFactory.getGzip();
    assertEquals("gz", gzip);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_iAOP0_1() {
    String result = CompressorStreamFactory.getLzma();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_iAOP0_2() {
    String result = CompressorStreamFactory.getLzma();
    assertEquals("lzma", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated1_lckH0_fid1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate_wSPT0_1() {
    String result = CompressorStreamFactory.getDeflate();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate_wSPT0_2() {
    String result = CompressorStreamFactory.getDeflate();
    assertEquals("deflate", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_XZ_cRef2_SBID0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("xz", out);
    assertNotNull(compressorOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectNullInputStream_vZLj0_nQfG1() {
    Set<String> compressorNames = new HashSet<>();
    compressorNames.add("BZIP2");
    try {
        CompressorStreamFactory.detect(null, compressorNames);
        fail();
    } catch (IllegalArgumentException e) {
        assertEquals("Stream must not be null.", e.getMessage());
    } catch (CompressorException e) {
    }
}
}