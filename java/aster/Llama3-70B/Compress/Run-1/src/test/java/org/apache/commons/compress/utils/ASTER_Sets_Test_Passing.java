/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_EmptyArray_OCIr0() {
    HashSet<String> set = Sets.newHashSet();
    assertTrue(set.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_SingleElementArray_CDfp1_1() {
    HashSet<String> set = Sets.newHashSet("Hello");
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_SingleElementArray_CDfp1_2() {
    HashSet<String> set = Sets.newHashSet("Hello");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleElementsArray_EePH2_1() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleElementsArray_EePH2_2() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleElementsArray_EePH2_3() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleElementsArray_EePH2_4() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("Java"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DuplicateElementsArray_FNdh3_1() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World", "World", "Java");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DuplicateElementsArray_FNdh3_2() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World", "World", "Java");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DuplicateElementsArray_FNdh3_3() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World", "World", "Java");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DuplicateElementsArray_FNdh3_4() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World", "World", "Java");
    assertTrue(set.contains("Java"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_NullElementArray_rrpD4_1() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World", null, "Java");
    assertEquals(4, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_NullElementArray_rrpD4_2() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World", null, "Java");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_NullElementArray_rrpD4_3() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World", null, "Java");
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_NullElementArray_rrpD4_4() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World", null, "Java");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_NullElementArray_rrpD4_5() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World", null, "Java");
    assertTrue(set.contains("Java"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_SingleNullElementArray_HthK5_1() {
    try {
        Sets.newHashSet(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_SingleNullElementArray_HthK5_2() {
    try {
        Sets.newHashSet(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        // Expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleNullElementsArray_SaLR6_1() {
    HashSet<String> set = Sets.newHashSet(null, null, null);
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleNullElementsArray_SaLR6_2() {
    HashSet<String> set = Sets.newHashSet(null, null, null);
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MixedElementsArray_kTCm7_1() {
    HashSet<Object> set = Sets.newHashSet("Hello", 1, null, 2.5, true);
    assertEquals(5, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MixedElementsArray_kTCm7_2() {
    HashSet<Object> set = Sets.newHashSet("Hello", 1, null, 2.5, true);
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MixedElementsArray_kTCm7_3() {
    HashSet<Object> set = Sets.newHashSet("Hello", 1, null, 2.5, true);
    assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MixedElementsArray_kTCm7_4() {
    HashSet<Object> set = Sets.newHashSet("Hello", 1, null, 2.5, true);
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MixedElementsArray_kTCm7_5() {
    HashSet<Object> set = Sets.newHashSet("Hello", 1, null, 2.5, true);
    assertTrue(set.contains(2.5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MixedElementsArray_kTCm7_6() {
    HashSet<Object> set = Sets.newHashSet("Hello", 1, null, 2.5, true);
    assertTrue(set.contains(true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_IntegerArray_tBXJ8_1() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertEquals(5, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_IntegerArray_tBXJ8_2() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_IntegerArray_tBXJ8_3() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_IntegerArray_tBXJ8_4() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_IntegerArray_tBXJ8_5() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_IntegerArray_tBXJ8_6() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DoubleArray_CUSr9_1() {
    HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0);
    assertEquals(5, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DoubleArray_CUSr9_2() {
    HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0);
    assertTrue(set.contains(1.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DoubleArray_CUSr9_3() {
    HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0);
    assertTrue(set.contains(2.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DoubleArray_CUSr9_4() {
    HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0);
    assertTrue(set.contains(3.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DoubleArray_CUSr9_5() {
    HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0);
    assertTrue(set.contains(4.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DoubleArray_CUSr9_6() {
    HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0);
    assertTrue(set.contains(5.0));}
}