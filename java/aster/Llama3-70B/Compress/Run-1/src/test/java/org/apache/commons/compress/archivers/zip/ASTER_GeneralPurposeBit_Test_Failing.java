/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentStrongEncryptionFlag_MktT4_jqNh0() {
    GeneralPurposeBit bit1 = GeneralPurposeBit.parse(new byte[] {0}, 0);
    GeneralPurposeBit bit2 = GeneralPurposeBit.parse(new byte[] {(byte) 0x08}, 0);
    assertNotEquals(bit1, bit2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode4_MBbr3_qdKL0() {
    GeneralPurposeBit generalPurposeBit = GeneralPurposeBit.parse(new byte[] { (byte) 0x08 }, 0);
    generalPurposeBit.useStrongEncryption(true);
    assertEquals(generalPurposeBit.toString().hashCode(), generalPurposeBit.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode5_TbSn4_VDMV0() {
    GeneralPurposeBit generalPurposeBit = GeneralPurposeBit.parse(new byte[] { (byte) 0x08 }, 0);
    generalPurposeBit.useStrongEncryption(true);
    assertEquals(generalPurposeBit.hashCode(), generalPurposeBit.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentStrongEncryptionFlag_MktT4_jqNh0_fid1() {
    GeneralPurposeBit bit1 = GeneralPurposeBit.parse(new byte[] {0}, 0);
    GeneralPurposeBit bit2 = GeneralPurposeBit.parse(new byte[] {(byte) 0x08}, 0);
    assertFalse(bit1.equals(bit2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithEncryptionFlag_UWSi2_bEEW0_fid1() {
    GeneralPurposeBit generalPurposeBit = GeneralPurposeBit.parse(new byte[2], 0);
    generalPurposeBit.useEncryption(true);
    byte[] buf = new byte[2];
    generalPurposeBit.encode(buf, 0);
    assertEquals((short) 2048, ZipShort.getValue(buf, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithStrongEncryptionFlag_uezR3_FCsM0_fid1() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    generalPurposeBit.useStrongEncryption(true);
    byte[] buf = new byte[2];
    generalPurposeBit.encode(buf, 0);
    assertEquals((short) 0x0001, ZipShort.getValue(buf, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode4_MBbr3_qdKL0_fid1() {
    GeneralPurposeBit generalPurposeBit = GeneralPurposeBit.parse(new byte[] { (byte) 0x08 }, 0);
    generalPurposeBit.useStrongEncryption(true);
    assertNotEquals(0, generalPurposeBit.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode5_TbSn4_VDMV0_fid1() {
    GeneralPurposeBit generalPurposeBit = GeneralPurposeBit.parse(new byte[] { (byte) 0x08 }, 0);
    generalPurposeBit.useStrongEncryption(true);
    assertNotEquals(2457, generalPurposeBit.hashCode());
}
}