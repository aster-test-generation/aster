/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_zip_jvoL0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    boolean result = fileNameUtil.getCompressedFileName("file.zip").endsWith(".zip");
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_gz_lRzW1() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String result = fileNameUtil.getCompressedFileName("file.gz");
    assertEquals("file.gz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName1_oNrB0() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "");
    String result = fileNameUtil.getCompressedFileName("test.zip");
    assertEquals("test", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName2_chsH1() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("rar", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "");
    String result = fileNameUtil.getCompressedFileName("test.rar");
    assertEquals("test", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName3_ootB2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("gz", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "");
    String result = fileNameUtil.getCompressedFileName("test.gz");
    assertEquals("test", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName1_Evjv0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), ".txt");
    String result = fileNameUtil.getCompressedFileName("file.txt.txt");
    assertEquals("file.txt.txt", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName4_ehOE3() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>() {{
        put("txt", ".gz");
    }}, ".txt");
    String result = fileNameUtil.getCompressedFileName("file.tar.txt");
    assertEquals("file.tar.txt", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_GLnn0() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
    String fileName = "test.zip";
    String expected = "test";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_zip_jvoL0_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    boolean result = fileNameUtil.isCompressedFileName("file.zip");
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_gz_lRzW1_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    boolean result = fileNameUtil.isCompressedFileName("file.gz");
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_null_ZuOt3_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    boolean result = fileNameUtil.isCompressedFileName(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_aGil0_fid2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "zip");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
    String fileName = "test.txt";
    String expected = "test.zip";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName1_oNrB0_fid2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "");
    String result = fileNameUtil.getUncompressedFileName("test.zip");
    assert "test".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName2_chsH1_fid2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("rar", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "");
    String result = fileNameUtil.getUncompressedFileName("test.rar");
    assert "test".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName3_ootB2_fid2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("gz", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "");
    String result = fileNameUtil.getUncompressedFileName("test.gz");
    assert "test".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName1_Evjv0_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), ".txt");
    String result = fileNameUtil.getCompressedFileName("file.txt");
    assertEquals("file.txt", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName2_HWUo1_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>() {{
        put("txt", ".gz");
    }}, ".txt");
    String result = fileNameUtil.getCompressedFileName("file.txt");
    assertEquals("file.gz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName4_ehOE3_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>() {{
        put("txt", ".gz");
    }}, ".txt");
    String result = fileNameUtil.getCompressedFileName("file.tar");
    assertEquals("file.tar", result);
}
}