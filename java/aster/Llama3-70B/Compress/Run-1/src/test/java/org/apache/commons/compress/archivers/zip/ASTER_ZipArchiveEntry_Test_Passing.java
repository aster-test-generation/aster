/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired1_cjoq0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneralPurposeBit_wCvG0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    zipArchiveEntry.setGeneralPurposeBit(generalPurposeBit);
    assertEquals(generalPurposeBit, zipArchiveEntry.getGeneralPurposeBit());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributes_BIZS0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long externalAttributes = zipArchiveEntry.getExternalAttributes();
    assertEquals(0, externalAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_iOhF0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    Date lastModifiedDate = zipArchiveEntry.getLastModifiedDate();
    assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes_CTwg0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    int result = zipArchiveEntry.getInternalAttributes();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_eTfj0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    int result = zipArchiveEntry.getRawFlag();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_Xtkk0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_ayay0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime time = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(time);
    assertEquals(time, zipArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_cUaZ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_zSxU1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_ZuPI2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_NqyO3() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("name1");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("name2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_DifferentComment_YLiM4() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("name");
    entry1.setComment("comment1");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("name");
    entry2.setComment("comment2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_KRDh0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(fileTime);
    assertNotNull(zipArchiveEntry.getLastAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_KRDh0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(fileTime);
    assertNotNull(zipArchiveEntry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_KRDh0_3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(fileTime);
    assertNotNull(zipArchiveEntry.getLastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStart_XYNR0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long diskNumberStart = 10;
    zipArchiveEntry.setDiskNumberStart(diskNumberStart);
    assertEquals(diskNumberStart, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment1_wBGS0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    int result = zipArchiveEntry.getAlignment();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_sJhN0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("newName", "newRawName".getBytes());
    assertEquals("newName", zipArchiveEntry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_sJhN0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("newName", "newRawName".getBytes());
    assertArrayEquals("newRawName".getBytes(), zipArchiveEntry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_oNpW0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_withExtraFields_XZnJ1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtraFields(new ZipExtraField[] {});
    zipArchiveEntry.setExtra();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ZTnd0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_uHMs0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertTrue(true); // default assertion, replace with actual assertion
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ZtiR0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertNotNull(zipArchiveEntry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_LXdy0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertEquals(zipArchiveEntry.getLastAccessTime(), zipArchiveEntry.getLastAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_LXdy0_3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertEquals(zipArchiveEntry.getCreationTime(), zipArchiveEntry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocalHeaderOffset_fktZ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long localHeaderOffset = 10L;
    zipArchiveEntry.setLocalHeaderOffset(localHeaderOffset);
    assertEquals(localHeaderOffset, zipArchiveEntry.getLocalHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExternalAttributes_dUUj0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExternalAttributes(123L);
    assertEquals(123L, zipArchiveEntry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_vLgR0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] b = new byte[10];
    zipArchiveEntry.setCentralDirectoryExtra(b);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_LtHJ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] b = new byte[10];
    zipArchiveEntry.setCentralDirectoryExtra(b);
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_IncludeUnparseable_ksAL0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
    assertNotNull(extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_DoNotIncludeUnparseable_IyXV1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(false);
    assertNotNull(extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_IncludeUnparseable_AmZs0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
    assertArrayEquals(new ZipExtraField[] {}, extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_DoNotIncludeUnparseable_UwOB1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(false);
    assertArrayEquals(new ZipExtraField[] {}, extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_IncludeUnparseable_OVuw0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
    assertNotEquals(null, extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_DoNotIncludeUnparseable_GsIB1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(false);
    assertNotEquals(null, extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_IncludeUnparseable_pMdw0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
    assertArrayEquals(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY, extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_DoNotIncludeUnparseable_xbEM1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(false);
    assertArrayEquals(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY, extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_TimeSet_uUZt1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setTime(1000);
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_SuperCall_fPug2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertEquals(((java.util.zip.ZipEntry)entry).getTime(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_kGHm0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(zipArchiveEntry, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_kGHm0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(1000, zipArchiveEntry.getLastModifiedTime().toMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_Hkfn0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraField1_EIMC0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipShort type = new ZipShort((short) 1);
    assertNull(zipArchiveEntry.getExtraField(type));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_GYbt0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertNotNull(zipArchiveEntry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_NHXT0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    FileTime fileTime = FileTime.fromMillis(1643723400000L);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertNotNull(zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_LaRO0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1643723400000L);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_Xzln0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertNotNull(zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_NUZy0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setLastAccessTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_Oola0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setLastAccessTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_NRhy0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    FileTime fileTime = FileTime.fromMillis(1643723400000L);
    zipArchiveEntry.setLastAccessTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_PeeD0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastAccessTime(fileTime);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_PeeD0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastAccessTime(fileTime);
    assertEquals(fileTime, result.getLastAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy_HdkF0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    int result = zipArchiveEntry.getVersionMadeBy();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_withNonNullName_Pmhb0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("testName");
    assertEquals("testName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataExtra_withoutExtra_wFaN1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertArrayEquals(ByteUtils.EMPTY_BYTE_ARRAY, zipArchiveEntry.getLocalFileDataExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_true_XSWf0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("dir/");
    assertTrue(zipArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_false_dZmb1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("file.txt");
    assertFalse(zipArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_rILr0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setTime(fileTime);
    assertEquals(1000, zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRawFlag_txZo0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setRawFlag(1);
    assertEquals(1, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStart_IKrs0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long result = zipArchiveEntry.getDiskNumberStart();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixMode_unixPlatform_ZwXG0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals(0, zipArchiveEntry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixMode_nonUnixPlatform_jOBr1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setPlatform(0); // set platform to non-unix
    assertEquals(0, zipArchiveEntry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_NJpw0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setInternalAttributes(0);
    entry.setExternalAttributes(0);
    entry.setExtraFields(new ZipExtraField[] {});
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNotSame(entry, clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_NJpw0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setInternalAttributes(0);
    entry.setExternalAttributes(0);
    entry.setExtraFields(new ZipExtraField[] {});
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getInternalAttributes(), clone.getInternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_NJpw0_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setInternalAttributes(0);
    entry.setExternalAttributes(0);
    entry.setExtraFields(new ZipExtraField[] {});
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getExternalAttributes(), clone.getExternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_NJpw0_4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setInternalAttributes(0);
    entry.setExternalAttributes(0);
    entry.setExtraFields(new ZipExtraField[] {});
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertArrayEquals(entry.getExtraFields(), clone.getExtraFields());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtra_lrGH0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] result = zipArchiveEntry.getCentralDirectoryExtra();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtra_ZzsY0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] result = zipArchiveEntry.getCentralDirectoryExtra();
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_false_xyEn1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setUnixMode(0);
    assertFalse(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionRequired_xAAH0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setVersionRequired(1);
    assertEquals(1, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_PowerOfTwo_RtHe0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setAlignment(1024);
    assertEquals(1024, zipArchiveEntry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_DosTime_KZkb0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long timeEpochMillis = 1643723400000L; // a valid DOS time
    zipArchiveEntry.setTime(timeEpochMillis);
    assertEquals(timeEpochMillis, zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_NonDosTime_JVUR1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long timeEpochMillis = 1643723400001L; // a non-DOS time
    zipArchiveEntry.setTime(timeEpochMillis);
    assertEquals(timeEpochMillis, zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_DosTime_OZIh0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setTime(1234567890000L);
    assertEquals(1234567890000L, zipArchiveEntry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_NotDosTime_QFpx1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setTime(1643723400000L);
    assertEquals(FileTime.fromMillis(1643723400000L), zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_DosTime_uynF0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setTime(1643723400000L);
    assertEquals(1643723400000L, zipArchiveEntry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_NotDosTime_ApVd1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setTime(1643723400001L);
    assertEquals(FileTime.fromMillis(1643723400001L), zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_NonDosTime_IMTD1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long timeEpochMillis = 1643723400001L; // a non-DOS time
    zipArchiveEntry.setTime(timeEpochMillis);
    assertEquals(FileTime.fromMillis(timeEpochMillis), zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_NotDosTime_OvLn1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setTime(1643723399999L);
    assertEquals(FileTime.fromMillis(1643723399999L), zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_DosTime_YyCj0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setTime(1234567890000L);
    assertEquals(1234567890000L, zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_NotDosTime_VquK1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setTime(1643723400000L);
    assertEquals(1643723400000L, zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_NonDosTime_iPOB1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setTime(1643723399999L);
    assertEquals(1643723399999L, zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMethodValid_IaJp0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setMethod(1);
    assertEquals(1, zipArchiveEntry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_NYXc0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields();
    assertNotNull(extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGeneralPurposeBit_FnCx0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
    assertNotNull(generalPurposeBit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform1_pdjI0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals(0, zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInternalAttributes_iIBN0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setInternalAttributes(1);
    assertEquals(1, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguous_ZvhX0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setStreamContiguous(true);
    assertTrue(zipArchiveEntry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_SameComment_SameLastModifiedTime_DifferentLastAccessTime_amTK6_eJSN0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("name");
    entry1.setComment("comment");
    entry1.setLastModifiedTime(java.nio.file.attribute.FileTime.from(java.time.Instant.now()));
    entry1.setLastAccessTime(java.nio.file.attribute.FileTime.from(java.time.Instant.now()));
    ZipArchiveEntry entry2 = new ZipArchiveEntry("name");
    entry2.setComment("comment");
    entry2.setLastModifiedTime(java.nio.file.attribute.FileTime.from(java.time.Instant.now()));
    entry2.setLastAccessTime(java.nio.file.attribute.FileTime.from(java.time.Instant.now().plusSeconds(1)));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_QCjt0_armA0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertEquals(zipArchiveEntry.getExtra(), zipArchiveEntry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_DosTime_KzwD0_XASK0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long timeEpochMillis = 1643723400000L; // a valid DOS time
    zipArchiveEntry.setTime(timeEpochMillis);
    assertEquals(timeEpochMillis, zipArchiveEntry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode1_Rtxk0_2_fid1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setUnixMode(0x755);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_KRDh0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(fileTime);
    assertNotNull(zipArchiveEntry.getLastAccessTime());
    assertNotNull(zipArchiveEntry.getCreationTime());
    assertNotNull(zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_sJhN0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("newName", "newRawName".getBytes());
    assertEquals("newName", zipArchiveEntry.getName());
    assertArrayEquals("newRawName".getBytes(), zipArchiveEntry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void parseFromLocalFileData(byte[] data, int offset, int length) throws ZipException {
            throw new ZipException();
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_gFBA0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertTrue(true); // default assertion
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffset_lQKf0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setDataOffset(10L);
    assertEquals(10L, zipArchiveEntry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_withExtraFields_vfNd1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = new ZipExtraField[] {new UnparseableExtraFieldData()};
    zipArchiveEntry.setExtraFields(extraFields);
    zipArchiveEntry.setExtra();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_withLocalFileData_GeVj2() {
    File inputFile = new File("inputFile");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
    zipArchiveEntry.setExtra();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldsEmptyArray_bfDr1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtraFields(new ZipExtraField[0]);
    assertEquals(0, zipArchiveEntry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName1_KcGd0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("test");
    assertEquals("test", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName2_YwlS1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("test\\test");
    assertEquals("test/test", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName4_bxNB3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("test/test");
    assertEquals("test/test", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeValid_iuJS0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setSize(1024);
    assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_tcjG0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    int result = zipArchiveEntry.hashCode();
    assertEquals("name".hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPlatform_QAgw0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setPlatform(1);
    assertEquals(1, zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionMadeBy_DSps0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setVersionMadeBy(1);
    assertEquals(1, zipArchiveEntry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous1_SmTZ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    boolean result = zipArchiveEntry.isStreamContiguous();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous2_ISMV1() {
    File inputFile = new File("inputFile");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
    boolean result = zipArchiveEntry.isStreamContiguous();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_kGHm0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(zipArchiveEntry, result);
    assertEquals(1000, zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_PeeD0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastAccessTime(fileTime);
    assertNotNull(result);
    assertEquals(fileTime, result.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_NJpw0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setInternalAttributes(0);
    entry.setExternalAttributes(0);
    entry.setExtraFields(new ZipExtraField[] {});
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNotSame(entry, clone);
    assertEquals(entry.getInternalAttributes(), clone.getInternalAttributes());
    assertEquals(entry.getExternalAttributes(), clone.getExternalAttributes());
    assertArrayEquals(entry.getExtraFields(), clone.getExtraFields());
}
}