/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipSplitReadOnlySeekableByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_XkpI0() throws IOException {
    File lastSegmentFile = new File("lastSegmentFile");
    File file1 = new File("file1");
    File file2 = new File("file2");
    file1.createNewFile();
    file2.createNewFile();
    lastSegmentFile.createNewFile();
    Iterable<File> files = Arrays.asList(file1, file2);
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(
        Files.newByteChannel(file1.toPath()), 
        Files.newByteChannel(file2.toPath()), 
        Files.newByteChannel(lastSegmentFile.toPath())
    );
    assertNotNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_LTcd0() throws IOException {
    File file1 = new File("file1.zip");
    File file2 = new File("file2.zip");
    file1.createNewFile();
    file2.createNewFile();
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(Files.newByteChannel(file1.toPath()), Files.newByteChannel(file2.toPath()));
    assertNotNull(channel);
    file1.delete();
    file2.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_jSBh0() throws IOException {
    File lastSegmentFile = new File("testFile.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(Files.newByteChannel(lastSegmentFile.toPath()));
    assertNotNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_XkpI0_fid2() throws IOException {
    File lastSegmentFile = new File("lastSegmentFile");
    File file1 = new File("file1");
    File file2 = new File("file2");
    Iterable<File> files = Arrays.asList(file1, file2);
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNotNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_LTcd0_fid2() throws IOException {
    File file1 = new File("file1.zip");
    File file2 = new File("file2.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(file1, file2);
    assertNotNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_jSBh0_fid2() throws IOException {
    File lastSegmentFile = new File("testFile");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
    assertNotNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_invalidExtension_OrLT1_Hnpg0() {
    java.nio.file.Path lastSegmentPath = java.nio.file.Paths.get("path/to/last/segment.txt");
    try {
        ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentPath);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
}