/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpDoubleValue_DuplicateIndex_GAqY1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPDouble result1 = cpBands.cpDoubleValue(0);
    CPDouble result2 = cpBands.cpDoubleValue(0);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_ZuPR0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpDescriptorNameInts();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_dCNQ0() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger result = cpBands.cpIntegerValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_ReturnsSameObject_WhenCalledTwice_MDuL1() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger result1 = cpBands.cpIntegerValue(0);
    CPInteger result2 = cpBands.cpIntegerValue(0);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_uSJe0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpFieldClass();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_lDdI0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpClass();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_TVfs0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result = cpBands.cpUTF8Value("testString");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_hgXc0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpMethodDescriptor();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue1_MNRn0() {
    CpBands cpBands = new CpBands(new Segment());
    CPClass cpClass = cpBands.cpClassValue("testString");
    assertNotNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFieldValue_rYPq0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPFieldRef result = cpBands.cpFieldValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_DLVe0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpIMethodClass();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_qvIi0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpInt();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value1_nDYi0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = true;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value3_RfSX2() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "";
    boolean searchForIndex = true;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value4_JPFM3() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    boolean searchForIndex = true;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_gqfj0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPLong result = cpBands.cpLongValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_sameIndex_YJhP1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPLong result1 = cpBands.cpLongValue(1);
    CPLong result2 = cpBands.cpLongValue(1);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_vECE0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPClass result = cpBands.cpClassValue(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValue_fnGK0() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat = cpBands.cpFloatValue(1);
    assertNotNull(cpFloat);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValue_ReturnsSameObject_WhenCalledTwiceWithSameIndex_ZQnO1() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat1 = cpBands.cpFloatValue(1);
    CPFloat cpFloat2 = cpBands.cpFloatValue(1);
    assertSame(cpFloat1, cpFloat2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorTypeInts_acXQ0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpDescriptorTypeInts();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue1_VqNN0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result = cpBands.cpSignatureValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLong_dJWS0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] expected = new long[0];
    long[] actual = cpBands.getCpLong();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpMethodValue_dQKo0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPMethodRef result = cpBands.cpMethodValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIMethodValue_WAxf0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPInterfaceMethodRef result = cpBands.cpIMethodValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_kiLD0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertNotNull(cpSignature);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_LxnZ0() {
    CpBands cpBands = new CpBands(new Segment());
    CPString result = cpBands.cpStringValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_ReturnsSameObject_zhWR1() {
    CpBands cpBands = new CpBands(new Segment());
    CPString result1 = cpBands.cpStringValue(0);
    CPString result2 = cpBands.cpStringValue(0);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpNameAndTypeValue_nfOs0() {
    CpBands cpBands = new CpBands(new Segment());
    CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(0);
    assertNotNull(cpNameAndType);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpNameAndTypeValue_ReturnsSameObject_mYFU1() {
    CpBands cpBands = new CpBands(new Segment());
    CPNameAndType cpNameAndType1 = cpBands.cpNameAndTypeValue(0);
    CPNameAndType cpNameAndType2 = cpBands.cpNameAndTypeValue(0);
    assertSame(cpNameAndType1, cpNameAndType2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpNameAndTypeValue1_kYwZ0() {
    CpBands cpBands = new CpBands(new Segment());
    CPNameAndType result = cpBands.cpNameAndTypeValue("descriptor");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value1_PTWT0() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value2_HzEV1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf81 = cpBands.cpUTF8Value(0);
    CPUTF8 cputf82 = cpBands.cpUTF8Value(0);
    assertEquals(cputf81, cputf82);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value3_mAHZ2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf81 = cpBands.cpUTF8Value(0);
    CPUTF8 cputf82 = cpBands.cpUTF8Value(1);
    assertNotEquals(cputf81, cputf82);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_DuplicateIndex_GAqY1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result1 = cpBands.cpUTF8Value(0);
    CPUTF8 result2 = cpBands.cpUTF8Value(0);
    assertEquals(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_ZuPR0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpDescriptorNameInts();
    assertNotEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_dCNQ0_fid1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result = cpBands.cpUTF8Value(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_ReturnsSameObject_WhenCalledTwice_MDuL1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result1 = cpBands.cpUTF8Value(0);
    CPUTF8 result2 = cpBands.cpUTF8Value(0);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_qvIi0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpInt();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_gqfj0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result = cpBands.cpUTF8Value(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_sameIndex_YJhP1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result1 = cpBands.cpUTF8Value(1);
    CPUTF8 result2 = cpBands.cpUTF8Value(1);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_vECE0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result = cpBands.cpUTF8Value(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_fnGK0() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(1);
    assertNotNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_ReturnsSameObject_WhenCalledTwiceWithSameIndex_ZQnO1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cpUTF81 = cpBands.cpUTF8Value(1);
    CPUTF8 cpUTF82 = cpBands.cpUTF8Value(1);
    assertSame(cpUTF81, cpUTF82);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorTypeInts_acXQ0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpDescriptorTypeInts();
    assertNotEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpNameAndTypeValue3_IwEe2_WUWK0() {
    CpBands cpBands = new CpBands(new Segment());
    cpBands.cpUTF8Value(0); // This will populate the map
    CPUTF8 result = cpBands.cpUTF8Value(0);
    assertNotNull(result);
}
}