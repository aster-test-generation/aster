/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_FileInput_dMiP2() throws IOException {
    File file = new File("testFile");
    file.createNewFile();
    Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(file);
    compressor.close();
    assertTrue(file.exists());
    file.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_File_tLDw3() throws IOException {
    File file = new File("testFile");
    file.createNewFile();
    try (Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file)) {
        pack200CompressorInputStream.reset();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_FileInput_dMiP2_fid1() throws IOException {
    Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(new File("testFile"));
    compressor.close();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_File_tLDw3_fid1() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("testFile"));
    pack200CompressorInputStream.reset();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_kiVL0_kuCk0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // create the file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    pack200CompressorInputStream.reset();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupported_IOException_UvVs0_ASHz0() throws IOException {
    File file = new File("testFile");
    file.createNewFile();
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    assertFalse(pack200CompressorInputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_wLdr0_eJHE0() throws IOException {
    File file = new File("testFile");
    file.createNewFile();
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    byte[] b = new byte[10];
    int result = pack200CompressorInputStream.read(b);
    assertEquals(-1, result); // Since the file is empty, read will return -1
    file.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_Velm0_tBfD0() throws IOException {
    File file = new File("testFile");
    file.createNewFile();
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    pack200CompressorInputStream.reset();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_lqzg0_CnJU0() throws IOException {
    File file = new File("testFile");
    file.createNewFile();
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    pack200CompressorInputStream.reset();
    int result = pack200CompressorInputStream.read();
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_GJLI0_LyxT0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    byte[] b = new byte[10];
    int off = 0;
    int count = 5;
    int result = pack200CompressorInputStream.read(b, off, count);
    assertEquals(-1, result);
    pack200CompressorInputStream.reset();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_InMemoryMode_UBXH0_GfHN0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    pack200CompressorInputStream.reset();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_TempFileMode_OElE1_fGlG0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // Create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.TEMP_FILE, new HashMap<>());
    pack200CompressorInputStream.reset();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_InputStream_SdGE2_pGra0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file);
    pack200CompressorInputStream.reset();
}
}