/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPUTF8_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_smjX0_YrYg0() {
    CPUTF8 cpuTF8 = new CPUTF8("testString", 0);
    assertEquals("UTF-8:testString", cpuTF8.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGlobalIndex_WbYh0_tEan0() {
    CPUTF8 cpuTF8 = new CPUTF8("utf8");
    cpuTF8 = new CPUTF8((String)"utf8", 0); // Fix: Cast "utf8" to String
    cpuTF8.setGlobalIndex(10);
    assertEquals(10, cpuTF8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString2_IVkU1_uSup0() {
    CPUTF8 cpuTF8 = new CPUTF8("testUtf8");
    assertEquals("testUtf8", cpuTF8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_WhenHashCodeComputed_ThenReturnCachedHashCode_GKnW1_JLNv0() {
    CPUTF8 cpuTF8 = new CPUTF8("utf8String");
    cpuTF8.hashCode(); // to compute hash code
    int hashCode = cpuTF8.hashCode();
    assertNotEquals(0, hashCode);
}
}