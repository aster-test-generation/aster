/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_readOnceReturnsMinusOne_MKhl1_tkuF0() {
    try {
        java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
        FramedSnappyCompressorInputStream fsis = new FramedSnappyCompressorInputStream(in, FramedSnappyDialect.STANDARD);
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        int result = fsis.read(b, off, len);
        assert(result == -1);
        fsis.close();
    } catch (java.io.IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_withValidSignature_ZNdo0_fid1() {
    byte[] signature = {0x01, 0x12, 0x02, 0x12, 0x04, 0x05, 0x06, 0x07, 0x08};
    int length = 9;
    assertTrue(FramedSnappyCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmask_vsfZ0_fid1() {
    long result = FramedSnappyCompressorInputStream.unmask(0x12345678L);
    assertEquals(0x00045678L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_readOnceReturnsMinusOne_MKhl1_tkuF0_fid3() {
    try {
        java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
        FramedSnappyCompressorInputStream fsis = new FramedSnappyCompressorInputStream(in, FramedSnappyDialect.STANDARD);
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        int result = fsis.read(b, off, len);
        assert(result == -1);
        fsis.close();
    } catch (java.io.IOException e) {
        assert false;
    }
}
}