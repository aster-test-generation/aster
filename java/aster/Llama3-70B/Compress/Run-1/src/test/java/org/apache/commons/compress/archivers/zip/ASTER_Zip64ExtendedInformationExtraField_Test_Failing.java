/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Zip64ExtendedInformationExtraField_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData5_aJwL4() {
    ZipEightByteInteger size = new ZipEightByteInteger(10L);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(20L);
    ZipLong diskStart = new ZipLong(30L);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize, null, diskStart);
    byte[] data = zip64.getLocalFileDataData();
    assertArrayEquals(new byte[16], data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_uZjm0_fid2() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] {});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] {});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[] {});
    ZipLong diskStart = new ZipLong(new byte[] {});
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipShort headerId = zip64ExtendedInformationExtraField.getHeaderId();
    assertNotNull(headerId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_withSize_LiIy0_fid2() {
    ZipEightByteInteger size = new ZipEightByteInteger(10);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(10);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(10);
    ZipLong diskStart = new ZipLong(10);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipShort result = zip64.getLocalFileDataLength();
    assertEquals(2 * 4, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength1_zRQG0_fid2() {
    ZipEightByteInteger size = new ZipEightByteInteger(10L);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(20L);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(30L);
    ZipLong diskStart = new ZipLong(40L);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipShort result = extraField.getCentralDirectoryLength();
    assertEquals(44, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength2_WMvV1_fid2() {
    ZipEightByteInteger size = new ZipEightByteInteger(10L);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(20L);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(size, compressedSize);
    ZipShort result = extraField.getCentralDirectoryLength();
    assertEquals(12, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength4_WDkW3() {
    ZipEightByteInteger size = new ZipEightByteInteger(10L);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(size, null, null, null);
    ZipShort result = extraField.getCentralDirectoryLength();
    assertEquals(4, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength5_VwAY4_fid2() {
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(20L);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(null, compressedSize, null, null);
    ZipShort result = extraField.getCentralDirectoryLength();
    assertEquals(4, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData1_TreE0_fid2() {
    ZipEightByteInteger size = new ZipEightByteInteger(10L);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(20L);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize, null, null);
    byte[] data = zip64.getLocalFileDataData();
    assertArrayEquals(new byte[2 * 4], data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData5_aJwL4_fid2() {
    ZipEightByteInteger size = new ZipEightByteInteger(10L);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(20L);
    ZipLong diskStart = new ZipLong(30L);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize, null, diskStart);
    byte[] data = zip64.getLocalFileDataData();
    assertArrayEquals(new byte[2 * 4], data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData3_hgyW2_kbjP0_fid3() {
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(20L);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(null, compressedSize, null, null);
    try {
        zip64.reparseCentralDirectoryData(false, true, false, false);
        fail();
    } catch (ZipException e) {
        assertEquals("Central directory zip64 extended information extra field's length doesn't match central directory data.", e.getMessage());
    }
}
}