/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import org.apache.commons.compress.harmony.pack200.Archive.PackingFile;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Enumeration;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_EmptyJar_nsFp2() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertNotNull(packingFileList);
    assertEquals(packingFileList.size(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_EmptyJar_nsFp2_1() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertNotNull(packingFileList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_EmptyJar_nsFp2_2() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertEquals(packingFileList.size(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_KeepFileOrder_AQVX0_txor0_1() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    Enumeration<JarEntry> entries = jarFile.entries();
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    int count = 0;
    while (entries.hasMoreElements()) {
        entries.nextElement();
        count++;
    }
    assertNotNull(packingFileList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_KeepFileOrder_AQVX0_txor0_2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    Enumeration<JarEntry> entries = jarFile.entries();
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    int count = 0;
    while (entries.hasMoreElements()) {
        entries.nextElement();
        count++;
    }
    assertEquals(packingFileList.size(), count);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_DontKeepFileOrder_Dwlw1_mIVC0_1() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, false);
    int count = 0;
    for (Enumeration<JarEntry> e = jarFile.entries(); e.hasMoreElements();) {
        e.nextElement();
        count++;
    }
    assertNotNull(packingFileList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_DontKeepFileOrder_Dwlw1_mIVC0_2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, false);
    int count = 0;
    for (Enumeration<JarEntry> e = jarFile.entries(); e.hasMoreElements();) {
        e.nextElement();
        count++;
    }
    assertEquals(packingFileList.size(), count);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_NormalCase_nPvw0_LuxO0_fid2() {
    try {
        JarFile jarFile = new JarFile("test.jar");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            PackingUtils packingUtils = new PackingUtils();
            packingUtils.copyThroughJar(jarFile, outputStream); // Assuming this method exists
            assertNotEquals(0, outputStream.size());
        } catch (IOException e) {
            fail("IOException occurred: " + e.getMessage());
        }
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_NullOutputStream_BXpd2_ySFS0_fid2() {
    try {
        JarFile jarFile = new JarFile("test.jar");
        try {
            PackingUtils.copyThroughJar(jarFile, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        } catch (IOException e) {
            fail("IOException should not be thrown");
        }
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
}