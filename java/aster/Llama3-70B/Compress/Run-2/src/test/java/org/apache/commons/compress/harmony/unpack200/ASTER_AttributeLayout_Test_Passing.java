/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeLayout_Test_Passing {
private String layout = "KQsomeLayout";
private SegmentConstantPool segmentConstantPool;
private ClassFileEntry classFileEntry;
AttributeLayout attributeLayout;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_true_lHYx0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    assertTrue(attributeLayout.matches(attributeLayout.getIndex() | attributeLayout.getContext()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_VOGy1() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
    assertFalse(attributeLayout.matches(attributeLayout.getIndex()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayout_ObWc0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    assertEquals("layout", attributeLayout.getLayout());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDefaultLayout_true_DAEx0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
    assertTrue(attributeLayout.isDefaultLayout());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDefaultLayout_false_mOrG1() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    assertFalse(attributeLayout.isDefaultLayout());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_KQLayout() throws Exception {
        segmentConstantPool = Mockito.mock(SegmentConstantPool.class);
        classFileEntry = Mockito.mock(ClassFileEntry.class);
        attributeLayout = new AttributeLayout("name", 1, layout, 1);
        segmentConstantPool = Mockito.mock(SegmentConstantPool.class);
        classFileEntry = Mockito.mock(ClassFileEntry.class);
        attributeLayout = new AttributeLayout("name", 1, layout, 1);
        // given
        when(segmentConstantPool.getValue(anyInt(), anyLong())).thenReturn(classFileEntry);
        // when
        ClassFileEntry result = attributeLayout.getValue(123L, "Ljava/lang/String;", segmentConstantPool);
        // then
        verify(segmentConstantPool).getValue(anyInt(), eq(123L));
        assertEquals(classFileEntry, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_OtherLayout() throws Exception {
        segmentConstantPool = Mockito.mock(SegmentConstantPool.class);
        classFileEntry = Mockito.mock(ClassFileEntry.class);
        attributeLayout = new AttributeLayout("name", 1, layout, 1);
        // given
        layout = "otherLayout";
        attributeLayout = new AttributeLayout("name", 1, layout, 1);
        when(segmentConstantPool.getValue(anyInt(), anyLong())).thenReturn(classFileEntry);
        // when
        ClassFileEntry result = attributeLayout.getValue(123L, "Ljava/lang/Object;", segmentConstantPool);
        // then
        verify(segmentConstantPool).getValue(anyInt(), eq(123L));
        assertEquals(classFileEntry, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_KQ_Ljava_lang_String_IVSp0() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "KQLjava/lang/String;", 1);
    ClassFileEntry result = attributeLayout.getValue(1L, "Ljava/lang/String;", pool);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_KQ_other_VQsa1() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "KQother", 1);
    ClassFileEntry result = attributeLayout.getValue(1L, "other", pool);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_not_KQ_mevs2() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "other", 1);
    ClassFileEntry result = attributeLayout.getValue(1L, "other", pool);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_AsteriskLayout_DTCa0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "*", 1);
    assertEquals(1, attributeLayout.numBackwardsCallables());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_NonAsteriskLayout_NgID1() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    attributeLayout.setBackwardsCallCount(5); // assuming setBackwardsCallCount method exists
    assertEquals(5, attributeLayout.numBackwardsCallables());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_lwPI0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    assertEquals("context1: name", attributeLayout.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_sOFp0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    int result = attributeLayout.hashCode();
    assertEquals(214747, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_SITg1() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
    int result = attributeLayout.hashCode();
    assertEquals(214747, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_3_Cglh2() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout(null, 1, null, 1);
    int result = attributeLayout.hashCode();
    assertEquals(62, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec1_RoCC0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "O", 1);
    assertEquals(Codec.BRANCH5, attributeLayout.getCodec());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec2_OZqz1() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "P", 1);
    assertEquals(Codec.BCI5, attributeLayout.getCodec());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec3_QVgC2() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "S", 1);
    assertEquals(Codec.SIGNED5, attributeLayout.getCodec());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec4_rSOV3() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "KS", 1);
    assertEquals(Codec.UNSIGNED5, attributeLayout.getCodec());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec5_lUvG4() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "RS", 1);
    assertEquals(Codec.UNSIGNED5, attributeLayout.getCodec());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec6_ncZw5() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "B", 1);
    assertEquals(Codec.BYTE1, attributeLayout.getCodec());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec7_Ylgv6() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "A", 1);
    assertEquals(Codec.UNSIGNED5, attributeLayout.getCodec());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_bwls0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    assertEquals("name", attributeLayout.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContext_JwBX0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    assertEquals(1, attributeLayout.getContext());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndex_ndbM0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    assertEquals(2, attributeLayout.getIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ZPGw0() throws Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    ClassFileEntry result = attributeLayout.getValue(1L, pool);
    assertNotNull(result);
}
}