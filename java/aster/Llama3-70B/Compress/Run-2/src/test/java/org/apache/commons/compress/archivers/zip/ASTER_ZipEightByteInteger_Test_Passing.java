/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_PTEv0() {
    ZipEightByteInteger zip1 = new ZipEightByteInteger(1L);
    assertTrue(zip1.equals(zip1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_cJvo1() {
    ZipEightByteInteger zip1 = new ZipEightByteInteger(1L);
    ZipEightByteInteger zip2 = new ZipEightByteInteger(2L);
    assertFalse(zip1.equals(zip2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withBigInteger_aVTb1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.ONE);
    assertEquals("ZipEightByteInteger value: " + BigInteger.ONE.toString(), zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withLong_eiGi2() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1L);
    assertEquals("ZipEightByteInteger value: " + BigInteger.valueOf(1L).toString(), zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_withBigInteger_eBKg1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(506097522914839L));
    assertEquals(BigInteger.valueOf(506097522914839L), zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_withLong_uTen2() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(506097522914839L);
    assertEquals(BigInteger.valueOf(506097522914839L), zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_byteArrayOffset_hyHW0() {
    ZipEightByteInteger zip = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0);
    assertArrayEquals(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, zip.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_BigInteger_xZlE1() {
    ZipEightByteInteger zip = new ZipEightByteInteger(BigInteger.valueOf(1234567890123456789L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_long_PVpe2() {
    ZipEightByteInteger zip = new ZipEightByteInteger(1234567890123456789L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_byteArray_CcAF3() {
    ZipEightByteInteger zip = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    assertArrayEquals(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, zip.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_ZFFH0() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x01;
    bytes[1] = (byte) 0x02;
    bytes[2] = (byte) 0x03;
    bytes[3] = (byte) 0x04;
    bytes[4] = (byte) 0x05;
    bytes[5] = (byte) 0x06;
    bytes[6] = (byte) 0x07;
    bytes[7] = (byte) 0x08;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
    assertEquals(new BigInteger("578437695752307201"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_BXRh2() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x80;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x00;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue4_Bkjr3() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x7F;
    bytes[1] = (byte) 0xFF;
    bytes[2] = (byte) 0xFF;
    bytes[3] = (byte) 0xFF;
    bytes[4] = (byte) 0xFF;
    bytes[5] = (byte) 0xFF;
    bytes[6] = (byte) 0xFF;
    bytes[7] = (byte) 0xFF;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue5_xfZh4() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x00;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x00;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
    assertEquals(BigInteger.ZERO, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue6_AREz5() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x12;
    bytes[1] = (byte) 0x34;
    bytes[2] = (byte) 0x56;
    bytes[3] = (byte) 0x78;
    bytes[4] = (byte) 0x90;
    bytes[5] = (byte) 0xAB;
    bytes[6] = (byte) 0xCD;
    bytes[7] = (byte) 0xEF;
    BigInteger result = ZipEightByteInteger.getValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_with_bytes_and_offset_BVLh0() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0);
    assertEquals(-52642660, zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_with_BigInteger_value_vVfZ1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(12345678));
    assertEquals(12345678, zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_with_long_value_uGRw2() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(12345678L);
    assertEquals(12345678, zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_with_bytes_grHx3() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    assertEquals(-52642660, zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_withByteOffset_JBke0() {
    ZipEightByteInteger zip = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_withBigInteger_Ipdu1() {
    ZipEightByteInteger zip = new ZipEightByteInteger(BigInteger.valueOf(506097522914839680L));
    assertEquals(506097522914839680L, zip.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_withLong_rLFd2() {
    ZipEightByteInteger zip = new ZipEightByteInteger(506097522914839680L);
    assertEquals(506097522914839680L, zip.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_withByteArray_NRSj3() {
    ZipEightByteInteger zip = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    assertEquals(578437695752307201L, zip.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_JMih1() {
    BigInteger value = new BigInteger("0");
    byte[] result = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(new byte[]{(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes3_nbjx2() {
    BigInteger value = new BigInteger("18446744073709551615");
    byte[] result = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(new byte[]{(byte) -1, (byte) -1, (byte) -1, (byte) -1, (byte) -1, (byte) -1, (byte) -1, (byte) -1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes4_ZnJR3() {
    BigInteger value = new BigInteger("9223372036854775807");
    byte[] result = ZipEightByteInteger.getBytes(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes5_THmY4() {
    BigInteger value = new BigInteger("1");
    byte[] result = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(new byte[]{(byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes7_svJJ6() {
    BigInteger value = new BigInteger("18446744073709551614");
    byte[] result = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(new byte[]{(byte) -2, (byte) -1, (byte) -1, (byte) -1, (byte) -1, (byte) -1, (byte) -1, (byte) -1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes9_FlNt8() {
    BigInteger value = new BigInteger("2");
    byte[] result = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(new byte[]{(byte) 2, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes10_yzmF9() {
    BigInteger value = new BigInteger("4294967294");
    byte[] result = ZipEightByteInteger.getBytes(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_nghL0() {
    byte[] result = ZipEightByteInteger.getBytes(0L);
    assertArrayEquals(new byte[8], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withByteArray_KmXt3_RIbK0() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {1, 0, 0, 0, 0, 0, 0, 0});
    assertEquals("ZipEightByteInteger value: 1", zipEightByteInteger.toString());
}
}