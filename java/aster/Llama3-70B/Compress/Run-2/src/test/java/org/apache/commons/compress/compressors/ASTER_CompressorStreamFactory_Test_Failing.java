/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.OutputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleton_QulC0_2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    assertTrue(factory.getDecompressUntilEOF());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZ_sKPF0_fid2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    assertEquals("Z", CompressorStreamFactory.getZ());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_uPlp0_fid2() {
    String result = CompressorStreamFactory.getLZ4Framed();
    assertEquals("LZ4_Framed", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated1_WxlZ0_fid2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF2_smLr1_fid2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    assertFalse(compressorStreamFactory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZMA_SiXX4_PBEg0_2_fid2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream(CompressorStreamFactory.getXz(), out);
    assertTrue(compressorOutputStream instanceof LZMACompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_SNAPPY_FRAMED_Fnql6_zATh0_1_fid2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("SNAPPY_FRAMED", out);
    assertNotNull(compressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_SNAPPY_FRAMED_Fnql6_zATh0_2_fid2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("SNAPPY_FRAMED", out);
    assertTrue(compressorOutputStream instanceof FramedSnappyCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZ4_BLOCK_TIBy7_ibwc0_1_fid2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("LZ4_BLOCK", out);
    assertNotNull(compressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZ4_BLOCK_TIBy7_ibwc0_2_fid2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("LZ4_BLOCK", out);
    assertTrue(compressorOutputStream instanceof BlockLZ4CompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZ4_FRAMED_aDPR8_nwEY0_1_fid2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("LZ4_FRAMED", out);
    assertNotNull(compressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZ4_FRAMED_aDPR8_nwEY0_2_fid2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("LZ4_FRAMED", out);
    assertTrue(compressorOutputStream instanceof FramedLZ4CompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_ZSTANDARD_ANoj9_aQwH0_2_fid2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream(CompressorStreamFactory.getXz(), out);
    assertTrue(compressorOutputStream instanceof ZstdCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleton_QulC0() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    assertNotNull(factory);
    assertTrue(factory.getDecompressUntilEOF());
}
}