/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.util.zip.CRC32;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZOutputFile_Test_Passing {
@Mock
    private SeekableByteChannel channel;
@Mock
    private ByteArrayOutputStream headerBaos;
@Mock
    private DataOutputStream header;
@Mock
    private ByteBuffer bb;
private SevenZOutputFile sevenzoutputfile;
private boolean finished;
    private final CRC32 crc32 = new CRC32();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withNoData_wbSk1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test"));
    byte[] data = new byte[] {};
    sevenZOutputFile.write(data, 0, 0);
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_dPSt0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test"));
    sevenZOutputFile.finish();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_withPassword_wMQN1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test"), "password".toCharArray());
    sevenZOutputFile.finish();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testclose() throws Exception {
        channel = Mockito.mock(SeekableByteChannel.class);
        sevenzoutputfile = new SevenZOutputFile(channel);
        // given
        finished = false;
        // when
        sevenzoutputfile.close();
        // then
        Mockito.verify(channel).close();
        assertFalse(finished);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_WhenFinishedIsFalse_ThenFinishIsCalled_bMSA0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test"));
    sevenZOutputFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_OodV0_LeZQ0() throws IOException {
    SevenZOutputFile sevenZOutputFile;
    try {
        sevenZOutputFile = new SevenZOutputFile(new File("test"));
    } catch (IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
    File inputFile = new File("input");
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(inputFile, "entryName");
    assertEquals("entryName", entry.getName());
    assertEquals(inputFile.isDirectory(), entry.isDirectory());
    assertNotNull(entry.getLastModifiedDate());
}
}