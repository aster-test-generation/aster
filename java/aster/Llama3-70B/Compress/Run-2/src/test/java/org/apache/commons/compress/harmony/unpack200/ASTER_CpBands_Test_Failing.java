/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_zQjT0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpDescriptorNameInts();
    assertArrayEquals(new int[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_HEhe0() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger result = cpBands.cpIntegerValue(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_ReturnsSameObject_WhenCalledTwiceWithSameIndex_zpcw1() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger result1 = cpBands.cpIntegerValue(1);
    CPInteger result2 = cpBands.cpIntegerValue(1);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_Jxev0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpFieldClass();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_iybI0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpClass();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_xoAg0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result = cpBands.cpUTF8Value("testString");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue1_Gswi0() {
    CpBands cpBands = new CpBands(new Segment());
    CPClass cpClass = cpBands.cpClassValue("testString");
    assertNotNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_cLic0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpMethodDescriptor();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFieldValue_hwcE0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPFieldRef result = cpBands.cpFieldValue(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value1_xqrG0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = true;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value3_Kmoh2() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "";
    boolean searchForIndex = true;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value4_ZkoF3() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    boolean searchForIndex = true;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_dHGN0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpIMethodClass();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_VEQL0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpInt();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_vdjS0() {
    CpBands cpBands = new CpBands(new Segment());
    CPLong result = cpBands.cpLongValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_sameIndex_nLgl1() {
    CpBands cpBands = new CpBands(new Segment());
    CPLong result1 = cpBands.cpLongValue(1);
    CPLong result2 = cpBands.cpLongValue(1);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_zAhy0() {
    CpBands cpBands = new CpBands(new Segment());
    CPClass result = cpBands.cpClassValue(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValue_Cbjr0() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat = cpBands.cpFloatValue(0);
    assertNotNull(cpFloat);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValue_ReturnsSameObject_WhenCalledTwiceWithSameIndex_gzdR1() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat1 = cpBands.cpFloatValue(0);
    CPFloat cpFloat2 = cpBands.cpFloatValue(0);
    assertSame(cpFloat1, cpFloat2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue1_bMBN0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPUTF8 result = cpBands.cpSignatureValue(index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue2_EEpM1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 1;
    CPUTF8 result = cpBands.cpSignatureValue(index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue3_kfMp2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 2;
    CPUTF8 result = cpBands.cpSignatureValue(index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorTypeInts_VGgV0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpDescriptorTypeInts();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLong_huUf0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] result = cpBands.getCpLong();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpMethodValue_uoPQ0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPMethodRef result = cpBands.cpMethodValue(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIMethodValue_sRow0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPInterfaceMethodRef result = cpBands.cpIMethodValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_dWHr0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertNotNull(cpSignature);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_fAVt0() {
    CpBands cpBands = new CpBands(new Segment());
    CPString result = cpBands.cpStringValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_ReturnsSameObject_nULk1() {
    CpBands cpBands = new CpBands(new Segment());
    CPString result1 = cpBands.cpStringValue(0);
    CPString result2 = cpBands.cpStringValue(0);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpNameAndTypeValue_ZDBG0() {
    CpBands cpBands = new CpBands(new Segment());
    CPNameAndType result = cpBands.cpNameAndTypeValue(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpNameAndTypeValue_1_Ttyn0() {
    CpBands cpBands = new CpBands(new Segment());
    String descriptor = "descriptor";
    CPNameAndType result = cpBands.cpNameAndTypeValue(descriptor);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_1_Ynjw0() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_2_SGMl1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(1);
    assertEquals(1, cputf8.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_3_WhUg2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(2);
    assertNotNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpUTF8_NhWh0_lDnn0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result = cpBands.cpUTF8Value(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptor_gaMA0_JDxC0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    int result = cputf8.hashCode(); 
    assertNotNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_HEhe0_fid1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result = cpBands.cpUTF8Value(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_ReturnsSameObject_WhenCalledTwiceWithSameIndex_zpcw1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result1 = cpBands.cpUTF8Value(1);
    CPUTF8 result2 = cpBands.cpUTF8Value(1);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_xoAg0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0; // Initialize index
    CPUTF8 result = cpBands.cpUTF8Value(index); // Pass index instead of string
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFieldValue_hwcE0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result = cpBands.cpUTF8Value(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value1_xqrG0_fid1() {
    CpBands cpBands = new CpBands(new Segment());
    int index = 0;
    CPUTF8 result = cpBands.cpUTF8Value(index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value3_Kmoh2_fid1() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "";
    CPUTF8 result = cpBands.cpUTF8Value(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_VEQL0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpInt();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_vdjS0_fid1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result = cpBands.cpUTF8Value(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_ReturnsSameObject_WhenCalledTwiceWithSameIndex_gzdR1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cpUTF81 = cpBands.cpUTF8Value(0);
    CPUTF8 cpUTF82 = cpBands.cpUTF8Value(0);
    assertSame(cpUTF81, cpUTF82);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_ReturnsSameObject_nULk1_fid1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result1 = cpBands.cpUTF8Value(0);
    CPUTF8 result2 = cpBands.cpUTF8Value(0);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpNameAndTypeValue_1_Ttyn0_fid1() {
    CpBands cpBands = new CpBands(new Segment());
    String descriptor = "descriptor";
    CPUTF8 result = cpBands.cpUTF8Value(0); // Assuming cpUTF8Value method is correct
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpUTF8_NhWh0_lDnn0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    assertNotNull(cpBands);
    CPUTF8 result = cpBands.cpUTF8Value(0);
    assertNull(result);
}
}