/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CPFieldRef_Test_Passing {
private CPFieldRef cpfieldref;
private CPFieldRef sameRef;
private CPFieldRef differentRef;
private ClassConstantPool pool;
DataOutputStream dos;
    private int cachedHashCode;
    private boolean hashCodeComputed;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_KYeX0_kGeP0() {
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("fieldName");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptor = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("fieldDescriptor");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType nameAndType = new org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType(name, descriptor, 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 classNameStr = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("className");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPClass className = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass(classNameStr, 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef fieldRef = new org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef(className, nameAndType, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_QmeE0_uZqd0() {
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 classNameString = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("className");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPClass className = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass(classNameString, 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 nameString = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("name");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptorString = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("descriptor");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType nameAndType = new org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType(nameString, descriptorString, 2);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef cpFieldRef = new org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef((org.apache.commons.compress.harmony.unpack200.bytecode.CPClass) className, nameAndType, 3);
    ClassFileEntry[] result = cpFieldRef.getNestedClassFileEntries();
    assert(result.length == 2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody_neWa0_BCAB0_1() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 className = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("className", 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPClass cpClass = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass(className, 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("name");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptor = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("descriptor");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType nameAndType = new org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType(name, descriptor, 3);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef cpFieldRef = new org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef(cpClass, nameAndType, 3);
    cpFieldRef.writeBody(dos);
    byte[] bytes = bos.toByteArray();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody_neWa0_BCAB0_5() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 className = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("className", 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPClass cpClass = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass(className, 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("name");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptor = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("descriptor");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType nameAndType = new org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType(name, descriptor, 3);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef cpFieldRef = new org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef(cpClass, nameAndType, 3);
    cpFieldRef.writeBody(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals(0, bytes[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_DifferentObjects_lqRd1_vGBC0() {
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name1 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("java/lang/String");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPClass className1 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass(new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("java/lang/String"), 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptor1 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("I");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType descriptorNameAndType1 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType(name1, descriptor1, 3);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef cpFieldRef1 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef(className1, descriptorNameAndType1, 4);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name2 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("java/lang/Object");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPClass className2 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass(new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("java/lang/Object"), 5);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptor2 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("Ljava/lang/Object;");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType descriptorNameAndType2 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType(name2, descriptor2, 7);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef cpFieldRef2 = new org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef(className2, descriptorNameAndType2, 8);
    assertNotEquals(cpFieldRef1.hashCode(), cpFieldRef2.hashCode());
}
}