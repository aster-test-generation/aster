/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.UncheckedIOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveEntry_Test_Failing {
TarArchiveEntry tararchiveentry;
TarArchiveEntry sameTararchiveentry;
TarArchiveEntry differentTararchiveentry;
Object differentObject;
TarArchiveEntry descendentEntry;
TarArchiveEntry tararchiveentry2;
TarArchiveEntry tararchiveentry3;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        tararchiveentry = new TarArchiveEntry(new byte[0]);
        sameTararchiveentry = new TarArchiveEntry(new byte[0]);
        differentTararchiveentry = new TarArchiveEntry(new byte[1]);
        differentObject = new Object();
        // Test for same object
        assertTrue(tararchiveentry.equals(tararchiveentry));
        // Test for same type, same content
        assertTrue(tararchiveentry.equals(sameTararchiveentry));
        // Test for same type, different content
        assertFalse(tararchiveentry.equals(differentTararchiveentry));
        // Test for different type
        assertFalse(tararchiveentry.equals(differentObject));
        // Test for null
        assertFalse(tararchiveentry.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_ioXp0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    byte[] header = new byte[]{};
    tarArchiveEntry.parseTarHeader(header);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_HMeb0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    byte[] header = new byte[]{};
    tarArchiveEntry.parseTarHeader(header);
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderIOException_WGAE1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    byte[] header = new byte[]{};
    try {
        tarArchiveEntry.parseTarHeader(header);
        assert false;
    } catch (UncheckedIOException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_ZjCd0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("name", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_SyCu0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("test", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_oldStyle_sigh1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
    byte[] header = new byte[512];
    header[0] = 'u'; // set old style flag
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("test", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_ulQK0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("name", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGlobalPaxHeader_true_qWXw0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0x75);
    assertTrue(tarArchiveEntry.isGlobalPaxHeader());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGNULongNameEntry_true_SUbk0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0x20);
    assertTrue(tarArchiveEntry.isGNULongNameEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLink_true_BFUn0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    assertTrue(tarArchiveEntry.isLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFileNull_DGkZ1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    File file = tarArchiveEntry.getFile();
    assertNull(file);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_withLinkFlag_DIR_LnuC3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0x40);
    assertFalse(tarArchiveEntry.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_withNullFile_sUsa5() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
    assertFalse(tarArchiveEntry.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClearExtraPaxHeaders_UCaH0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    tarArchiveEntry.clearExtraPaxHeaders();
    assertTrue(tarArchiveEntry.getExtraPaxHeaders().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGNULongLinkEntry_true_MYyr0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    assertTrue(tarArchiveEntry.isGNULongLinkEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeader_EcDW0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[]{});
    tarArchiveEntry.addPaxHeader("key", "value");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_true_HpCZ0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 2);
    assertTrue(tarArchiveEntry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxHeader1_tEaF0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    assertTrue(tarArchiveEntry.isPaxHeader());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_1() throws Exception {
        tararchiveentry = new TarArchiveEntry(new byte[0]);
        sameTararchiveentry = new TarArchiveEntry(new byte[0]);
        differentTararchiveentry = new TarArchiveEntry(new byte[1]);
        differentObject = new Object();
        // Test for same object
        // Test for same type, same content
        // Test for same type, different content
        // Test for different type
        // Test for null
        assertTrue(tararchiveentry.equals(tararchiveentry));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_2() throws Exception {
        tararchiveentry = new TarArchiveEntry(new byte[0]);
        sameTararchiveentry = new TarArchiveEntry(new byte[0]);
        differentTararchiveentry = new TarArchiveEntry(new byte[1]);
        differentObject = new Object();
        // Test for same object
        // Test for same type, same content
        // Test for same type, different content
        // Test for different type
        // Test for null
        assertTrue(tararchiveentry.equals(sameTararchiveentry));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_3() throws Exception {
        tararchiveentry = new TarArchiveEntry(new byte[0]);
        sameTararchiveentry = new TarArchiveEntry(new byte[0]);
        differentTararchiveentry = new TarArchiveEntry(new byte[1]);
        differentObject = new Object();
        // Test for same object
        // Test for same type, same content
        // Test for same type, different content
        // Test for different type
        // Test for null
        assertFalse(tararchiveentry.equals(differentTararchiveentry));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_4() throws Exception {
        tararchiveentry = new TarArchiveEntry(new byte[0]);
        sameTararchiveentry = new TarArchiveEntry(new byte[0]);
        differentTararchiveentry = new TarArchiveEntry(new byte[1]);
        differentObject = new Object();
        // Test for same object
        // Test for same type, same content
        // Test for same type, different content
        // Test for different type
        // Test for null
        assertFalse(tararchiveentry.equals(differentObject));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_5() throws Exception {
        tararchiveentry = new TarArchiveEntry(new byte[0]);
        sameTararchiveentry = new TarArchiveEntry(new byte[0]);
        differentTararchiveentry = new TarArchiveEntry(new byte[1]);
        differentObject = new Object();
        // Test for same object
        // Test for same type, same content
        // Test for same type, different content
        // Test for different type
        // Test for null
        assertFalse(tararchiveentry.equals(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFileNull_DGkZ1_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry((String)null);
    String userName = tarArchiveEntry.getUserName();
    assertNull(userName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_DqUj0_mBDO0_7() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertTrue(tarArchiveEntry.isCheckSumOK());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_WindowsAbsolutePath_FTvq0_jRDM0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0, true);
    tarArchiveEntry.setName("C:\\test\\file.txt");
    assertEquals("test/file.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntriesSingleEntry_wQjn4_wdRE0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("path");
    TarArchiveEntry[] result = tarArchiveEntry.getDirectoryEntries();
    assertEquals(1, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupId_VtuN0_Dfna0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
    tarArchiveEntry.setGroupId(123);
    assertEquals(123, (int) tarArchiveEntry.getGroupId());
}
}