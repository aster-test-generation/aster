/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lz4;
import java.io.OutputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_FramedLZ4CompressorOutputStream_Test_Passing {
private boolean withBlockChecksum = true;
private boolean withBlockDependency = true;
private OutputStream out = mock(OutputStream.class);
private byte[] blockData = new byte[1024];
private int currentIndex = 0;
FramedLZ4CompressorOutputStream framedlz4compressoroutputstream;
private boolean finished;
private OutputStream outputStream;
private Parameters parameters;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testclose() throws Exception {
        out = mock(OutputStream.class);
        framedlz4compressoroutputstream = new FramedLZ4CompressorOutputStream(out);
        framedlz4compressoroutputstream.close();
        verify(out).close();
    }
}