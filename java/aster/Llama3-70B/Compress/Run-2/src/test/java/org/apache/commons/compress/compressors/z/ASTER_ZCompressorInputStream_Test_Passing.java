/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.z;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_length_fNde1_BnGG0() {
    byte[] signature = new byte[] {(byte) 0x1f, (byte) 0x8b, 1, 2, 3};
    assertFalse(ZCompressorInputStream.matches(signature, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_magic1_uPsn2_Knmo0() {
    byte[] signature = new byte[] {1, (byte) 0x1f, 1, 2, 3};
    assertFalse(ZCompressorInputStream.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_magic2_MvZO3_Ordl0() {
    byte[] signature = new byte[] {(byte) 0x1f, (byte) 0x8b, 1, 1, 2, 3};
    assertFalse(ZCompressorInputStream.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_true_uCgS0_zngy0_fid1() {
    byte[] signature = new byte[] {(byte) 0x1f, (byte) 0x8b, 1, 2, 3};
    assertFalse(ZCompressorInputStream.matches(signature, 5));
}
}