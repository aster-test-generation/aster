/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_length_BODT1_AIDK0() {
    byte[] signature = new byte[] { (byte) 0x1f, (byte) 0x8b, 0, 0 };
    assertFalse(DeflateCompressorInputStream.matches(signature, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_magic1_YDWf2_ANqT0() {
    byte[] signature = new byte[] { (byte) 0x1f, (byte) 0x8b, 0, 0 };
    assertFalse(DeflateCompressorInputStream.matches(signature, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_ReturnsMinusOne_aPLL0_MvVs0_fid1() throws IOException {
    DeflateParameters parameters = new DeflateParameters();
    InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    DeflateCompressorInputStream deflateCompressorInputStream = new DeflateCompressorInputStream(inputStream, parameters);
    try {
        int result = deflateCompressorInputStream.read();
        fail("Expected IOException to be thrown");
    } catch (IOException e) {
        assertEquals("Unexpected end of ZLIB input stream", e.getMessage());
    } finally {
        deflateCompressorInputStream.close();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_true_AHvo0_lwQL0_fid1() {
    byte[] signature = new byte[] { (byte) 0x1f, (byte) 0x8b, 0, 0 };
}
}