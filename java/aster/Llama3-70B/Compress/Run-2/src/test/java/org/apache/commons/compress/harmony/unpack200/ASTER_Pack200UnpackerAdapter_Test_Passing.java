/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.apache.commons.io.input.BoundedInputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200UnpackerAdapter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_CvCj0() throws IOException {
    Path path = Paths.get("testFile.txt");
    Files.write(path, "testContent".getBytes());
    BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(path);
    assertEquals(Files.size(path), boundedInputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadPath_qNub0() throws Exception {
    FileInputStream fis = new FileInputStream("test.txt");
    String result = Pack200UnpackerAdapter.readPath(fis);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackNullOut_piTd1() throws Exception {
    Pack200UnpackerAdapter adapter = new Pack200UnpackerAdapter();
    File file = new File("test");
    try {
        adapter.unpack(file, null);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Must specify both input and output streams", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_hanU0() throws IOException {
    File file = new File("testFile");
    BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(file);
    assertNotNull(boundedInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_VezZ0() throws IOException, URISyntaxException {
    URL url = new URL("https://example.com");
    BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(url);
    assertNotNull(boundedInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_FileInputStream_WlCx2() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(fileInputStream);
    assertNotNull(boundedInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackNullOutputStream_VRBV1() throws Exception {
    Pack200UnpackerAdapter adapter = new Pack200UnpackerAdapter();
    InputStream in = new FileInputStream("test.jar");
    try {
        adapter.unpack(in, null);
        assert false;
    } catch (IllegalArgumentException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_VnWG0() throws IOException {
    Path path = Paths.get("path", "to", "file");
    BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream("path", "to", "file");
    assertNotNull(boundedInputStream);
}
}