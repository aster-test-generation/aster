/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEntries_hHep0() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    List<ClassFileEntry> result = classConstantPool.entries();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithNestedEntries_NullEntry_nEDm0() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    ClassFileEntry classFileEntry = null;
    try {
        classConstantPool.addWithNestedEntries(classFileEntry);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_zfDa0() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    assertEquals(0, classConstantPool.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSortClassPool1_xdYk0_OKdf0() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    classConstantPool.sortClassPool();
    assertEquals(0, classConstantPool.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_NotResolved_MEuq1_vUAI0() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    try {
        classConstantPool.size(); // No need to set resolved flag, it's not present in the class
        classConstantPool.get(1);
        fail();
    } catch (IllegalStateException e) {
        assertEquals("Constant pool is not yet resolved; this does not make any sense", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddNestedEntries1_NwRv0_UrBc0() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    classConstantPool.addNestedEntries();
    assertEquals(0, classConstantPool.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_ByteCode_Cfpm0_CibQ0() {
    ClassConstantPool pool = new ClassConstantPool();
    ByteCode entry = new ByteCode((byte) 1);
    assertNull(pool.add(entry));
}
}