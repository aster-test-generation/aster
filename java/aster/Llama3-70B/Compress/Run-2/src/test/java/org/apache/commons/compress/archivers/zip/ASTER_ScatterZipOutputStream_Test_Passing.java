/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ScatterZipOutputStream_Test_Passing {
@Mock
    private StreamCompressor streamCompressor;
@Mock
    private FileBasedScatterGatherBackingStore backingStore;
@Mock
    private InputStream payloadStream;
private ScatterZipOutputStream scatterZipOutputStream;
private long crc32;
private int bytesWrittenForLastEntry;
private int bytesRead;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFileBased_RTKQ0() throws FileNotFoundException {
    File file = new File("testFile");
    ScatterZipOutputStream scatterZipOutputStream = ScatterZipOutputStream.fileBased(file);
    assertNotNull(scatterZipOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFileBased_nRjZ0() throws FileNotFoundException {
    File file = new File("testFile");
    ScatterZipOutputStream scatterZipOutputStream = ScatterZipOutputStream.fileBased(file, 5);
    assertNotNull(scatterZipOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void close_WHsB3() throws IOException {
            throw new IOException();
        }
}