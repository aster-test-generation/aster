/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_MeZG0() throws Exception {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("name"));
    assertTrue(attribute.equals(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameClassSameName_tlVk1() throws Exception {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name"));
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_OTbT2() throws Exception {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("name"));
    Object obj = new Object();
    assertFalse(attribute.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_Uhwe3() throws Exception {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_nAEz4() throws Exception {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("name"));
    assertFalse(attribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_oxDj0() throws Exception {
    CPUTF8 cpuTF8 = new CPUTF8("test");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cpuTF8);
    assertEquals("SourceFile: test", sourceFileAttribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_JHLs0() throws Exception {
    CPUTF8 name = new CPUTF8("utf8");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] result = sourceFileAttribute.getNestedClassFileEntries();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_Zpgq0() throws Exception {
    CPUTF8 cpuTF8 = new CPUTF8("name");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cpuTF8);
    int length = sourceFileAttribute.getLength();
    assert length == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttribute_atOt0() throws Exception {
    CPUTF8 cpuTF8 = new CPUTF8("name");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cpuTF8);
    assertTrue(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_withNonNullName_agFl0() throws Exception {
    CPUTF8 name = new CPUTF8("utf8");
    SourceFileAttribute attribute = new SourceFileAttribute(name);
    int expected = 31 * attribute.getClass().hashCode() + name.hashCode();
    int actual = attribute.hashCode();
    assert expected == actual;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_withNullName_FaEn1() throws Exception {
    SourceFileAttribute attribute = new SourceFileAttribute(null);
    int expected = attribute.getClass().hashCode();
    int actual = attribute.hashCode();
    assert expected == actual;
}
}