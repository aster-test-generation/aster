/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches1_iRiu0() {
    byte[] signature = new byte[] {0x71, (byte) 0xc7, 0, 0, 0, 0};
    assertTrue(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches2_wxAr1() {
    byte[] signature = new byte[] {(byte) 0xc7, 0x71, 0, 0, 0, 0};
    assertTrue(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches3_KnDp2() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x31};
    assertTrue(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches4_bTpu3() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x32};
    assertTrue(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches5_IYZU4() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x37};
    assertTrue(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNotMatches1_gZXH5() {
    byte[] signature = new byte[] {0, 0, 0, 0, 0, 0};
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNotMatches2_anHO6() {
    byte[] signature = new byte[] {0x71, 0, 0, 0, 0, 0};
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNotMatches3_JqwY7() {
    byte[] signature = new byte[] {0x30, 0x30, 0x30, 0x30, 0x30, 0x30};
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNotMatches4_ALQK8() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x30};
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNotMatches5_zdMv9() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30};
    assertFalse(CpioArchiveInputStream.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNotMatches6_FmGt10() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x38};
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNotMatches7_fAhv11() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x39};
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNotMatches8_dpJd12() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x40};
    assertFalse(CpioArchiveInputStream.matches(signature, 6));
}
}