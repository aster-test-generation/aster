/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Failing {
@Test
public void testRenumber4_gFOg3_yuAr0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name", 0)}, new CPUTF8[]{new CPUTF8("signature", 0)}, new int[]{1});
    List<Integer> byteCodeOffsets = Arrays.asList(0);
    try {
        attribute.renumber(byteCodeOffsets);
    } catch (Pack200Exception e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody1_cnZL0_quyv0() throws IOException {
    LocalVariableTypeTableAttribute localVariableTypeTableAttribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name")}, new CPUTF8[]{new CPUTF8("java/lang/String")}, new int[]{3});
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    localVariableTypeTableAttribute.writeBody(dos);
    byte[] bytes = bos.toByteArray();
    assertArrayEquals(new byte[]{1, 0, 1, 0, 1, 0, 2, 0, 4, 110, 97, 109, 101, 0, 4, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 0, 3}, bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody2_fQeD1_Dsnz0() throws IOException {
    LocalVariableTypeTableAttribute localVariableTypeTableAttribute = new LocalVariableTypeTableAttribute(2, new int[]{1, 2}, new int[]{3, 4}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("signature1"), new CPUTF8("signature2")}, new int[]{5, 6});
    assertNotNull(localVariableTypeTableAttribute);
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    localVariableTypeTableAttribute.writeBody(dos);
    byte[] bytes = bos.toByteArray();
    assertNotNull(bytes);
}
@Test
public void testRenumber4_gFOg3_yuAr0_fid2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name", 0)}, new CPUTF8[]{new CPUTF8("signature", 0)}, new int[]{1});
    List<Integer> byteCodeOffsets = Arrays.asList(1);
    try {
        attribute.renumber(byteCodeOffsets);
        assert false;
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody1_cnZL0_quyv0_fid2() throws IOException {
    LocalVariableTypeTableAttribute localVariableTypeTableAttribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name")}, new CPUTF8[]{new CPUTF8("signature")}, new int[]{3});
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    localVariableTypeTableAttribute.writeBody(dos);
    byte[] bytes = bos.toByteArray();
    assertArrayEquals(new byte[]{0, 1, 0, 1, 0, 2, 0, 0, 0, 3}, bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody2_fQeD1_Dsnz0_fid2() throws IOException {
    LocalVariableTypeTableAttribute localVariableTypeTableAttribute = new LocalVariableTypeTableAttribute(2, new int[]{1, 2}, new int[]{3, 4}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("signature1"), new CPUTF8("signature2")}, new int[]{5, 6});
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    localVariableTypeTableAttribute.writeBody(dos);
    byte[] bytes = bos.toByteArray();
    assertArrayEquals(new byte[]{0, 2, 0, 1, 0, 3, 0, 0, 0, 5, 0, 2, 0, 4, 0, 1, 0, 6}, bytes);
}
}