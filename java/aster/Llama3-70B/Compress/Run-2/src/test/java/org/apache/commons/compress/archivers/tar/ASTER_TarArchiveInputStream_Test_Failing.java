/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveInputStream_Test_Failing {
private TarArchiveEntry currEntry;
private TarArchiveInputStream tararchiveinputstream;
private InputStream inputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_GnuSpace_KgIO1() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = ' ';
    signature[TarConstants.VERSION_OFFSET + 1] = ' ';
    signature[TarConstants.VERSION_OFFSET + 2] = ' ';
    assertTrue(TarArchiveInputStream.matches(signature, 512));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Ant_iOVc3() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'A';
    signature[TarConstants.MAGIC_OFFSET + 1] = 'N';
    signature[TarConstants.MAGIC_OFFSET + 2] = 'T';
    signature[TarConstants.MAGIC_OFFSET + 3] = ' ';
    signature[TarConstants.MAGIC_OFFSET + 4] = ' ';
    signature[TarConstants.VERSION_OFFSET] = '1';
    signature[TarConstants.VERSION_OFFSET + 1] = ' ';
    signature[TarConstants.VERSION_OFFSET + 2] = ' ';
    assertTrue(TarArchiveInputStream.matches(signature, 512));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Null_AAqc7() {
    assertFalse(TarArchiveInputStream.matches(null, 512));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRecordSize3_ubuJ2_fggA0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream,512);
    assertEquals(1024, tarArchiveInputStream.getRecordSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Posix_DlLy0_fid2() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = ' ';
    signature[TarConstants.VERSION_OFFSET + 1] = '0';
    signature[TarConstants.VERSION_OFFSET + 2] = '0';
    assert TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_GnuSpace_KgIO1_fid2() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = ' ';
    signature[TarConstants.VERSION_OFFSET + 1] = ' ';
    signature[TarConstants.VERSION_OFFSET + 2] = ' ';
    assert TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Ant_iOVc3_fid2() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'A';
    signature[TarConstants.MAGIC_OFFSET + 1] = 'N';
    signature[TarConstants.MAGIC_OFFSET + 2] = 'T';
    signature[TarConstants.MAGIC_OFFSET + 3] = ' ';
    signature[TarConstants.MAGIC_OFFSET + 4] = ' ';
    signature[TarConstants.VERSION_OFFSET] = '1';
    signature[TarConstants.VERSION_OFFSET + 1] = ' ';
    signature[TarConstants.VERSION_OFFSET + 2] = ' ';
    assert TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Null_AAqc7_fid2() {
    assert !TarArchiveInputStream.matches(null, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_NegativeValue_iLBx2() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 512);
    long skipped = tarArchiveInputStream.skip(-1);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_NonSparseEntry_aVJW0_EXRP0() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 512);
    TarArchiveEntry tarEntry = new TarArchiveEntry("test");
    tarEntry.setSize(1024);
    tarArchiveInputStream.setCurrentEntry(tarEntry);
    long skipped = tarArchiveInputStream.skip(1024);
    assertEquals(1024, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRecordSize3_ubuJ2_fggA0_fid3() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream, 1024);
    assertEquals(1024, tarArchiveInputStream.getRecordSize());
}
}