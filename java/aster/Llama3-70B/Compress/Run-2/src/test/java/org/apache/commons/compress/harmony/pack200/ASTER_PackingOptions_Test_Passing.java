/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingOptions_Test_Passing {
private String[] passFiles;
private String deflateHint;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGzip_ZOZF0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setGzip(true);
    assertTrue(packingOptions.isGzip());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModificationTime_YciN0() {
    PackingOptions packingOptions = new PackingOptions();
    String modificationTime = packingOptions.getModificationTime();
    assertNotNull(modificationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVerbose_zVCe0() {
    PackingOptions packingOptions = new PackingOptions();
    boolean result = packingOptions.isVerbose();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLogFile_JFdv0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setLogFile("logFile.txt");
    assertEquals("logFile.txt", packingOptions.getLogFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLogFile_VKmg0() {
    PackingOptions packingOptions = new PackingOptions();
    String logFile = packingOptions.getLogFile();
    assertNull(logFile);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnknownFieldAttributeAction_Gqlu0() {
    PackingOptions packingOptions = new PackingOptions();
    String type = "someType";
    String expected = packingOptions.getUnknownAttributeAction();
    String actual = packingOptions.getUnknownFieldAttributeAction(type);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetKeepFileOrder_kUUm0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setKeepFileOrder(true);
    assertTrue(packingOptions.isKeepFileOrder());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnknownAttributeAction_nzZg0() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getUnknownAttributeAction();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVerbose_IuJq0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setVerbose(true);
    assertTrue(packingOptions.isVerbose());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEffort_Sbki0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setEffort(10);
    assertEquals(10, packingOptions.getEffort());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsKeepFileOrder_XFZZ0() {
    PackingOptions packingOptions = new PackingOptions();
    boolean result = packingOptions.isKeepFileOrder();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeflateHint_keep_Yinn0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setDeflateHint("keep");
    assertEquals("keep", packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeflateHint_true_Ppqt1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setDeflateHint("true");
    assertEquals("true", packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeflateHint_false_zjJm2() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setDeflateHint("false");
    assertEquals("false", packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_fkUV0() {
    PackingOptions packingOptions = new PackingOptions();
    long segmentLimit = 100L;
    packingOptions.setSegmentLimit(segmentLimit);
    assertEquals(segmentLimit, packingOptions.getSegmentLimit());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModificationTime_Keep_vPVY0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setModificationTime("keep");
    assertEquals("keep", packingOptions.getModificationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModificationTime_Latest_mSth1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setModificationTime("latest");
    assertEquals("latest", packingOptions.getModificationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnknownCodeAttributeAction_hSHt0() {
    PackingOptions packingOptions = new PackingOptions();
    String type = "someType";
    String expected = packingOptions.getUnknownAttributeAction();
    String actual = packingOptions.getUnknownCodeAttributeAction(type);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateHint_xkzn0() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getDeflateHint();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuietTrue_QDdK0_fid1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setQuiet(false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuietFalse_WvJA1_fid1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setQuiet(true);
    assertFalse(packingOptions.isVerbose());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSegmentLimit_xHeq0_fid1() {
    PackingOptions packingOptions = new PackingOptions();
    long expected =1000000; // default value
    long actual = packingOptions.getSegmentLimit();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnknownMethodAttributeAction_Wxtv0_fid1() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getUnknownMethodAttributeAction("type");
    assertEquals("pass", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEffort_dOCX5() {
    PackingOptions packingOptions = new PackingOptions();
    int effort = packingOptions.getEffort();
    assertEquals(5, effort);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateHint_XDOw0() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getDeflateHint();
    assertEquals("keep", result);
}
}