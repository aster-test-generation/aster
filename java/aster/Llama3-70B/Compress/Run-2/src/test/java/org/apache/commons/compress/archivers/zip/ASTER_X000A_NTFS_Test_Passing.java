/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_bPfK0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] result = x000A_NTFS.getCentralDirectoryData();
    byte[] expected = x000A_NTFS.getLocalFileDataData();
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_BhJF0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort zipShort = x000A_NTFS.getLocalFileDataLength();
    byte[] bytes = zipShort.getBytes();
    int value = ZipShort.getValue(bytes);
    assertEquals(32, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_GQZk0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort expected = x000A_NTFS.getLocalFileDataLength();
    ZipShort actual = x000A_NTFS.getCentralDirectoryLength();
    assertArrayEquals(expected.getBytes(), actual.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_MYjI0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    assertEquals(-123, x000A_NTFS.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_withNullValue_zgQW1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setCreateTime(null);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_TlKJ0() {
    X000A_NTFS xf = new X000A_NTFS();
    assertTrue(xf.equals(xf));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_femk1() {
    Object obj = new Object();
    X000A_NTFS xf = new X000A_NTFS();
    assertFalse(xf.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_EhjA2() {
    X000A_NTFS xf1 = new X000A_NTFS();
    X000A_NTFS xf2 = new X000A_NTFS();
    assertTrue(xf1.equals(xf2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_MGgw0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date();
    x000A_NTFS.setCreateJavaTime(date);
    assertNotNull(x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_ROdE0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date();
    x000A_NTFS.setModifyJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_PXbe0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime time = FileTime.fromMillis(1000);
    x000A_NTFS.setCreateFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNullValue_NryF1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setAccessTime(null);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_withNullArgument_cjdp1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyTime(null);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_xeIw0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger accessTime = x000A_NTFS.getAccessTime();
    assertNotNull(accessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void parseFromLocalFileData(byte[] data, int offset, int length) {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_nPll0_miEy0_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
    byte[] bytes = modifyTime.getBytes();
    long longValue = modifyTime.getLongValue();
    long value = modifyTime.getLongValue();
    assertNotNull(modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_nPll0_miEy0_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
    byte[] bytes = modifyTime.getBytes();
    long longValue = modifyTime.getLongValue();
    long value = modifyTime.getLongValue();
    assertNotNull(bytes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_nPll0_miEy0_3() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
    byte[] bytes = modifyTime.getBytes();
    long longValue = modifyTime.getLongValue();
    long value = modifyTime.getLongValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_OYbK1_qUgs0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyJavaTime(new Date());
    assertEquals(-123 ^ x000A_NTFS.getModifyTime().hashCode(), x000A_NTFS.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_4_Ghfz3_mxhb0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyJavaTime(new Date());
    x000A_NTFS.setAccessJavaTime(new Date());
    x000A_NTFS.setCreateJavaTime(new Date());
    assertEquals(-123 ^ x000A_NTFS.getModifyTime().hashCode() ^ Integer.rotateLeft(x000A_NTFS.getAccessTime().hashCode(), 11) ^ Integer.rotateLeft(x000A_NTFS.getCreateTime().hashCode(), 22), x000A_NTFS.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTime_RuDS0_eirM0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date();
    x000A_NTFS.setAccessJavaTime(d);
    FileTime actual = x000A_NTFS.getAccessFileTime();
    assertEquals(FileTime.fromMillis(d.getTime()), actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_withNonNullValue_LnKz0_rcKt0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date(123);
    x000A_NTFS.setAccessJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentModifyTime_npEu3_ATuM0() {
    X000A_NTFS xf1 = new X000A_NTFS();
    X000A_NTFS xf2 = new X000A_NTFS();
    xf2.setAccessJavaTime(new Date(122, 0, 1)); // January 1, 2022
    assertFalse(xf1.equals(xf2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentAccessTime_PsVf4_eXKv0() {
    X000A_NTFS xf1 = new X000A_NTFS();
    X000A_NTFS xf2 = new X000A_NTFS();
    Date date = new Date(122, 0, 1, 0, 0, 0); // 2022-01-01 00:00:00
    xf2.setAccessJavaTime(date);
    assertFalse(xf1.equals(xf2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_unNY0_uzje0_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger createTime = x000A_NTFS.getCreateTime();
    byte[] bytes = createTime.getBytes();
    long longValue = createTime.getLongValue();
    assertNotNull(createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_unNY0_uzje0_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger createTime = x000A_NTFS.getCreateTime();
    byte[] bytes = createTime.getBytes();
    long longValue = createTime.getLongValue();
    assertNotNull(bytes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_unNY0_uzje0_3() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger createTime = x000A_NTFS.getCreateTime();
    byte[] bytes = createTime.getBytes();
    long longValue = createTime.getLongValue();
    assertNotNull(longValue);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_withNonNullArgument_aZCE0_OGmG0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date(123);
    x000A_NTFS.setAccessJavaTime(d);
    assertEquals(d, x000A_NTFS.getAccessJavaTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_zIsC0_LCtz0_1() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] buffer = new byte[10];
    x000A_NTFS.parseFromCentralDirectoryData(buffer, 0, 10);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_zIsC0_LCtz0_2() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] buffer = new byte[10];
    x000A_NTFS.parseFromCentralDirectoryData(buffer, 0, 10);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_zIsC0_LCtz0_3() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] buffer = new byte[10];
    x000A_NTFS.parseFromCentralDirectoryData(buffer, 0, 10);
    assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getCreateTime());}
}