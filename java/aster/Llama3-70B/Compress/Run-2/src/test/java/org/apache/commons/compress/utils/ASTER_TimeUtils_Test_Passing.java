/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToUnixTimeNotNull_NQNT0() {
    FileTime fileTime = FileTime.from(10, TimeUnit.SECONDS);
    long unixTime = TimeUtils.toUnixTime(fileTime);
    assertEquals(10, unixTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToUnixTimeNull_LXrJ1() {
    long unixTime = TimeUtils.toUnixTime(null);
    assertEquals(0, unixTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_UAXD0() {
    FileTime time = FileTime.fromMillis(1643723400000L);
    assertTrue(TimeUtils.isUnixTime(time));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_MinValue_FEOc0() {
    assertTrue(TimeUtils.isUnixTime(Integer.MIN_VALUE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_MaxValue_qagQ1() {
    assertTrue(TimeUtils.isUnixTime(Integer.MAX_VALUE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_OutOfRange_XfXe2() {
    assertFalse(TimeUtils.isUnixTime(Integer.MAX_VALUE + 1L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_cLxq0() {
    Date date = new Date(1643723400000L);
    long expected =132881970000000000L;
    long actual = TimeUtils.toNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToFileTime_yEDP0() {
    Date date = new Date();
    FileTime fileTime = TimeUtils.toFileTime(date);
    assertNotNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTime_fAmq0() {
    long ntfsTime = 13123123123L;
    FileTime expected = FileTimes.ntfsTimeToFileTime(ntfsTime);
    FileTime actual = TimeUtils.ntfsTimeToFileTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToHundredNanos_jzqi0() {
    FileTime fileTime = FileTime.from(Instant.ofEpochSecond(10, 123456789));
    FileTime result = TimeUtils.truncateToHundredNanos(fileTime);
    assertEquals(FileTime.from(Instant.ofEpochSecond(10, 123456700)), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_tczQ0() {
    FileTime fileTime = FileTime.fromMillis(1643723400000L);
    Date date = TimeUtils.toDate(fileTime);
    assertEquals(new Date(1643723400000L), date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_TqNr0() {
    FileTime fileTime = FileTime.fromMillis(1643723400000L);
    long result = TimeUtils.toNtfsTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_WnZu0() {
    long ntfsTime = 131355072000000000L;
    Date expected = new GregorianCalendar(2017, Calendar.APRIL, 1, 3, 0, 0).getTime();
    Date result = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTime_ViGT0_caZH0() {
    long time = 1643723400L;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis() / 1000);
}
}