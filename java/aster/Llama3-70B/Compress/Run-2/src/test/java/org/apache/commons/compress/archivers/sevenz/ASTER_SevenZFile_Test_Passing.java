/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import org.apache.commons.compress.utils.InputStreamStatistics;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZFile_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesEmptySignature_qvPC3() throws Exception {
    byte[] signature = {};
    boolean result = SevenZFile.matches(signature, 0);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_NnEn0() throws Exception {
    File file = new File("testFile");
    char[] password = "password".toCharArray();
    SevenZFile sevenZFile = new SevenZFile(file, password);
    String result = sevenZFile.toString();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_1_mIjg0() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("entry");
    entry.setSize(10);
    entry.setCrcValue(10);
    entry.setHasCrc(true);
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_2_qxPm1() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("entry");
    entry.setSize(10);
    entry.setHasCrc(false);
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_3_JNCM2() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("entry");
    entry.setSize(0);
    entry.setHasCrc(true);
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_PTGX1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("nonExistingFile.txt");
    try {
        sevenZFile.getInputStream(entry);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_1_xyCu0() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("test"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    entry.setSize(10);
    entry.setLastModifiedDate(new Date());
    entry.setCrcValue(123);
    entry.setContentMethods(new SevenZMethodConfiguration(SevenZMethod.LZMA, null));
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_2_tPGO1() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("test"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    entry.setSize(10);
    entry.setLastModifiedDate(new Date());
    entry.setCrcValue(123);
    entry.setContentMethods(new SevenZMethodConfiguration(SevenZMethod.COPY, null));
    try {
        sevenZFile.getInputStream(entry);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_4_GLpc3() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("test"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    entry.setSize(10);
    entry.setLastModifiedDate(new Date());
    entry.setCrcValue(123);
    entry.setContentMethods(new SevenZMethodConfiguration(SevenZMethod.LZMA, null));
    try {
        sevenZFile.getInputStream(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_TjiX1() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("non-existent-entry");
    try {
        sevenZFile.getInputStream(entry);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_AXSB1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test.txt");
    try {
        sevenZFile.getInputStream(entry);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Can not find test.txt in test.7z", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_GaAk0() throws IOException {
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b);
    assert bytesRead >= 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_1_SWwm0() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int off = 0;
    int len = 5;
    assertEquals(0, sevenZFile.read(b, off, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry1_YlfO0() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_pSUz0_1() throws Exception {
    File file = new File("testFile");
    char[] password = "password".toCharArray();
    SevenZFile sevenZFile = new SevenZFile(file, password);
    InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
    assertEquals(0, statistics.getCompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_pSUz0_2() throws Exception {
    File file = new File("testFile");
    char[] password = "password".toCharArray();
    SevenZFile sevenZFile = new SevenZFile(file, password);
    InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
    assertEquals(0, statistics.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_1_gwWZ0() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("file"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    assertEquals(1, sevenZFile.read());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_fzMJ0() throws Exception {
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_withChannelAndPassword_XKrS1_2() throws IOException {
    SeekableByteChannel channel = null; // initialize channel
    char[] password = "password".toCharArray();
    SevenZFile sevenZFile = new SevenZFile(channel, password);
    sevenZFile.close();
    assertArrayEquals(new char[password.length], password);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_withFile_Wjtb2() throws IOException {
    File file = new File("test.txt");
    SevenZFile sevenZFile = new SevenZFile(file);
    sevenZFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_withFileAndPassword_QxJJ3() throws IOException {
    File file = new File("test.txt");
    char[] password = "password".toCharArray();
    SevenZFile sevenZFile = new SevenZFile(file, password);
    sevenZFile.close();
    assertArrayEquals(new char[password.length], password);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName1_IKpf0() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's'});
    assertEquals("test", sevenZFile.getDefaultName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName2_JgoH1() throws Exception {
    SevenZFile sevenZFile = new SevenZFile(new File("test"));
    assertEquals("test~", sevenZFile.getDefaultName());
}
}