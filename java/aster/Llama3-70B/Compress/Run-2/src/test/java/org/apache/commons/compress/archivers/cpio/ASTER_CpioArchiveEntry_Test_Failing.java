/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.nio.charset.Charset;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Failing {
    private short mode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_wafs0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name",0L);
    long time = cpioArchiveEntry.getTime();
    assertEquals(100L, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName6_DRWK5() {
    File inputFile = new File("file");
    inputFile.setReadable(true);
    inputFile.setWritable(true);
    inputFile.setExecutable(true);
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals("entryName", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_true_kARP0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 070701, "test", 1024);
    entry.setMode((short) 040755); // directory mode
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_true_EHTA0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 1024);
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_false_eQIw1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 0);
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_true_dgMq0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1024);
    assertTrue(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_wafs0_fid1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 100L);
    long time = cpioArchiveEntry.getTime();
    assertEquals(100L, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getAlignmentBoundary_1_fBmk0_fid1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_qIGV0_fid1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals("", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName6_DRWK5_fid1() {
    File inputFile = new File("file");
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals("entryName", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_true_kARP0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "test", 1024);
    entry.setMode((short) 040755); // directory mode
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_false_BYCw1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "test", 1024);
    entry.setMode((short) 0100644); // file mode
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode1_sHvi0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertEquals(33188, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode2_IOcw1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(33188, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_eedv2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_GMsz0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullCharset_Zviw1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(3, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_xQvB2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(4, entry.getHeaderPadCount(Charset.defaultCharset()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_rvbB0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_true_EHTA0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "test", 1024);
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_false_eQIw1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "test", 0);
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount1_rYiH0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount2_OKcB1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals(3, entry.getHeaderPadCount(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount3_sqZZ2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(0, entry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount4_BjAZ3_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("inputFile"), "entryName");
    assertEquals(3, entry.getHeaderPadCount(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_ZjzS0_GBKP0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) (1 | 0xC017)); // FORMAT_NEW_MASK = 0xC017
    cpioArchiveEntry.setRemoteDeviceMin(10L);
    assertEquals(10L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_true_Zljh0_snQJ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "name", 1024);
    entry.setMode((short)0120000); // Assuming C_ISLNK is 0120000
    assertTrue(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_false_SwRy1_FOpp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "name", 1024);
    entry.setMode((short) 0100644); // Assuming this is the correct mode
    assertFalse(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_true_vfpD0_pPlz0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "name", 1024);
    entry.setMode((short) (0666 | 0010000)); // 0010000 is the octal value for S_IFIFO
    assertTrue(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_false_IxtB1_hZSu0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "name", 1024);
    entry.setMode((short) 33206); // 33206 is the mode for a regular file
    assertFalse(entry.isPipe());
}
}