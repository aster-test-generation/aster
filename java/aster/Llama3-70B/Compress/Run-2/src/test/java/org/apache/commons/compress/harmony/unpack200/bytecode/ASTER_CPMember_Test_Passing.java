/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_hkLy7() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor, 0L, attributes);
    CPMember member2 = new CPMember(name, descriptor, 0L, attributes);
    assert(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TvnW0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    assertEquals("CPMember: " + name.toString() + "(" + descriptor.toString() + ")", cpmember.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_smyx0_1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpmember.getNestedClassFileEntries();
    assertEquals(2, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_smyx0_2() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpmember.getNestedClassFileEntries();
    assertSame(name, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_smyx0_3() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpmember.getNestedClassFileEntries();
    assertSame(descriptor, entries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_QVYm0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    int hashCode = cpmember.hashCode();
    assertEquals(-1916784969, hashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_zpTc0_fudQ0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 0L, attributes);
    assert(member.equals(member));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_TusU1_QkWu0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 0L, attributes);
    assert(!member.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_XuDo2_WGaP0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 0L, attributes);
    Object obj = new Object();
    assert(!member.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentDescriptor_HFDP4_wfNi0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor1 = new CPUTF8("descriptor1", 0);
    CPUTF8 descriptor2 = new CPUTF8("descriptor2", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor1, 0L, attributes);
    CPMember member2 = new CPMember(name, descriptor2, 0L, attributes);
    assert(!member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentFlags_uWYp5_JkKp0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor, 0L, attributes);
    CPMember member2 = new CPMember(name, descriptor, 1L, attributes);
    assert(!member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_TnJB6_XciV0() {
    CPUTF8 name1 = new CPUTF8("name1", 0);
    CPUTF8 name2 = new CPUTF8("name2", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name1, descriptor, 0L, attributes);
    CPMember member2 = new CPMember(name2, descriptor, 0L, attributes);
    assert(!member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_smyx0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpmember.getNestedClassFileEntries();
    assertEquals(2, entries.length);
    assertSame(name, entries[0]);
    assertSame(descriptor, entries[1]);
}
}