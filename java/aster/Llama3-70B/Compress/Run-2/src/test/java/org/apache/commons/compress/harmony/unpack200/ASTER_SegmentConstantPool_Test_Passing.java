/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SegmentConstantPool_Test_Passing {
SegmentConstantPool segmentconstantpool;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_all_VNIg0() {
    boolean result = SegmentConstantPool.regexMatches(SegmentConstantPool.REGEX_MATCH_ALL, "anyString");
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPoolEntry_NegativeIndex_BQDv2() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool scp = new SegmentConstantPool(bands);
    try {
        scp.getConstantPoolEntry(SegmentConstantPool.UTF_8, -10);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
    }
}
}