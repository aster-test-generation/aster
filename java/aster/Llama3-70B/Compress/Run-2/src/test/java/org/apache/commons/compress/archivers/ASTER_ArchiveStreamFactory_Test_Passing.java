/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.SortedMap;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ArchiveStreamFactory_Test_Passing {
private volatile String entryEncoding = "UTF-8";
@Mock
    private OutputStream out;
@InjectMocks
    private ArchiveStreamFactory archivestreamfactory;
@Mock
    private ArchiveStreamProvider archiveStreamProvider;
@Mock
    private InputStream inputStreamMock;
@Mock
    private Map<String, ArchiveStreamProvider> archiveOutputStreamProviders;
@Mock
    private ArArchiveOutputStream arArchiveOutputStream;
@Mock
    private ZipArchiveOutputStream zipArchiveOutputStream;
@Mock
    private TarArchiveOutputStream tarArchiveOutputStream;
@Mock
    private JarArchiveOutputStream jarArchiveOutputStream;
@Mock
    private CpioArchiveOutputStream cpioArchiveOutputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_withEncoding_DMqk0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_withoutEncoding_EoiG1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_olZS0() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncoding_ASQG0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    archiveStreamFactory.setEntryEncoding("UTF-8");
    assertEquals("UTF-8", archiveStreamFactory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_withEncoding_LAjX0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_withoutEncoding_LTIw1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_withDefaultConstructor_Kqtj0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    assertEquals(null, archiveStreamFactory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_withEncodingConstructor_JkaO1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
    assertEquals("UTF-8", archiveStreamFactory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_UqfF0() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertNotNull(result);
    assertTrue(!result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_DLQo0_1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_DLQo0_2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertFalse(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_DLQo0_3() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertFalse(archiveNames.contains("ARJ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_DLQo0_4() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getInputStreamArchiveNames();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_zrMB0_1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> archiveNames = archiveStreamFactory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_UqfF0_1() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_UqfF0_2() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertTrue(!result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectSevenZArchive_fHTS7_COJf0() throws Exception {
    byte[] sevenZSignature = new byte[6];
    sevenZSignature[0] = (byte) 0x37;
    sevenZSignature[1] = (byte) 0x7a;
    sevenZSignature[2] = (byte) 0xbc;
    sevenZSignature[3] = (byte) 0xaf; 
    sevenZSignature[4] = (byte) 0x27;
    sevenZSignature[5] = (byte) 0x1c;
    InputStream in = new ByteArrayInputStream(sevenZSignature);
    assertEquals("7z", ArchiveStreamFactory.detect(in));
}
}