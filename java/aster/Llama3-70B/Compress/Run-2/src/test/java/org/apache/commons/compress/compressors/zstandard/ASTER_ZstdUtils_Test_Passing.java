/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches1_AQpV0() throws Exception {
    byte[] signature = new byte[5];
    signature[0] = (byte) 0x28;
    signature[1] = (byte) 0xB5;
    signature[2] = (byte) 0x2F;
    signature[3] = (byte) 0x4F;
    signature[4] = (byte) 0x6F;
    assertTrue(ZstdUtils.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches2_lnqi1() throws Exception {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0x28;
    signature[1] = (byte) 0xB5;
    signature[2] = (byte) 0x2F;
    signature[3] = (byte) 0x4F;
    assertFalse(ZstdUtils.matches(signature, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches3_tejJ2() throws Exception {
    byte[] signature = new byte[5];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x2F;
    signature[2] = (byte) 0x4F;
    signature[3] = (byte) 0x6F;
    signature[4] = (byte) 0x7F;
    assertTrue(ZstdUtils.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches4_Oxjc3() throws Exception {
    byte[] signature = new byte[5];
    signature[0] = (byte) 0x28;
    signature[1] = (byte) 0xB6;
    signature[2] = (byte) 0x2F;
    signature[3] = (byte) 0x4F;
    signature[4] = (byte) 0x6F;
    assertFalse(ZstdUtils.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches5_APDS4() throws Exception {
    byte[] signature = new byte[5];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x2F;
    signature[2] = (byte) 0x40;
    signature[3] = (byte) 0x6F;
    signature[4] = (byte) 0x7F;
    assertFalse(ZstdUtils.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches6_PHjW5() throws Exception {
    byte[] signature = new byte[1];
    signature[0] = (byte) 0x28;
    assertFalse(ZstdUtils.matches(signature, 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches7_YfCd6() throws Exception {
    byte[] signature = new byte[5];
    signature[0] = (byte) 0x29;
    signature[1] = (byte) 0xB5;
    signature[2] = (byte) 0x2F;
    signature[3] = (byte) 0x4F;
    signature[4] = (byte) 0x6F;
    assertFalse(ZstdUtils.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches8_vwWV7() throws Exception {
    byte[] signature = new byte[5];
    signature[0] = (byte) 0x51;
    signature[1] = (byte) 0x2F;
    signature[2] = (byte) 0x4F;
    signature[3] = (byte) 0x6F;
    signature[4] = (byte) 0x7F;
    assertFalse(ZstdUtils.matches(signature, 5));
}
}