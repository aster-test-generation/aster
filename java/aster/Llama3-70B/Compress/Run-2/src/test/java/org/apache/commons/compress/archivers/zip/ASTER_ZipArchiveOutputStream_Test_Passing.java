/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveOutputStream_Test_Passing {
private long cdDiskNumberStart;
private StreamCompressor streamCompressor;
private long cdOffset;
private OutputStream outputStream;
private long eocdLength;
private List<ZipArchiveEntry> entries = new LinkedList<>();
    private StreamCompressor mockStreamCompressor;
@Mock
    private OutputStream mockOutputStream;
@Mock
    private ZipSplitOutputStream mockZipSplitOutputStream;
private ZipArchiveOutputStream ziparchiveoutputstream;
@Mock
    private ZipArchiveEntry archiveEntry;
private ZipArchiveEntry zipArchiveEntry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_withNonSeekableOutputStream_TatJ1() {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(outputStream);
    assertFalse(zipArchiveOutputStream.isSeekable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_ArchiveAlreadyFinished_lasX1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive has already been finished", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_UnclosedEntries_EQZD2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive contains unclosed entries.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_WriteCentralDirectoryInChunks_QcVB4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_withUnclosedEntry_hPOs1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive contains unclosed entries.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_withZip64RequiredException_vFkG3() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry ze = new ZipArchiveEntry("test.txt");
    ze.setSize(Long.MAX_VALUE);
    zipArchiveOutputStream.putArchiveEntry(ze);
    try {
        zipArchiveOutputStream.finish();
        fail("Expected Zip64RequiredException");
    } catch (Zip64RequiredException e) {
        assertEquals(Zip64RequiredException.ARCHIVE_TOO_BIG_MESSAGE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_UnclosedEntries_ZpgA2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive contains unclosed entries.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testputArchiveEntry() throws Exception {
        ziparchiveoutputstream = new ZipArchiveOutputStream(new ByteArrayOutputStream());
        // given
        when(archiveEntry.getName()).thenReturn("test-entry");
        // when
        ziparchiveoutputstream.putArchiveEntry(archiveEntry);
        // then
        verify(archiveEntry).getName();
        verifyNoMoreInteractions(archiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_PnaI0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
    zipArchiveOutputStream.closeArchiveEntry();
    assertTrue(true); // default assertion
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten6_GdBa5() {
    OutputStream out = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(out);
    assertEquals(0, zipArchiveOutputStream.getBytesWritten());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeflate_tBJh0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1024);
    zipArchiveOutputStream.deflate();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_IOException_AGjG0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1024);
    zipArchiveOutputStream.close();
    assertTrue(true); // no exception thrown
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreamble_bwUh0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 1024);
    byte[] preamble = new byte[10];
    zipArchiveOutputStream.writePreamble(preamble);
    assertEquals(10, preamble.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreamble_LLQR1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
    byte[] preamble = new byte[10];
    zipArchiveOutputStream.writePreamble(preamble, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_NormalFlow_godL0_HpZX0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_SplitZip_nnPy3_kOcf0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zipArchiveOutputStream.closeArchiveEntry();
    zipArchiveOutputStream.finish();
    assertTrue(((ZipArchiveOutputStream) zipArchiveOutputStream).finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_SplitZip_kSGu3_eYFu0() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1000);
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    zipArchiveOutputStream.finish();
    file.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_WriteCentralDirectoryInChunks_xklD4_Ypwo0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test"));
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test2"));
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroy_withoutOutputStream_Bors1_nYDW0() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    zipArchiveOutputStream.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroy_withoutOutputStream_Bors1_mUey1() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    zipArchiveOutputStream.destroy();
    assertTrue(true); // or any other assertion that makes sense in this context
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_pfMw0_imbB0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 1024);
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    zipArchiveOutputStream.closeArchiveEntry();
    assertEquals(true, zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreamble_nbOT0() throws IOException {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(outputStream);
    byte[] preamble = new byte[] { 0x50, 0x4b, 0x03, 0x04 };
    zipArchiveOutputStream.writePreamble(preamble, 0, preamble.length);
    assertEquals(preamble.length, outputStream.size());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry_Jvrj0_MZMU0() throws IOException {
        java.nio.file.Path path = java.nio.file.Paths.get("path");
        long zipSplitSize = 10;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(path, zipSplitSize);
        zipArchiveOutputStream.closeArchiveEntry();
        assert true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlush_withOutputStream_MiLr0_Zutz0() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    zipArchiveOutputStream.flush();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlush_withOutputStream_MiLr0_WNXu1() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    byte[] preamble = new byte[10];
    zipArchiveOutputStream.writePreamble(preamble, 0, 10);
    zipArchiveOutputStream.flush();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_AuoM0_kXGu0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1024);
    byte[] data = new byte[10];
    zipArchiveOutputStream.writePreamble(data, 0, 10); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testwritePreamble_RAmA0() throws Exception {
    ZipArchiveOutputStream ziparchiveoutputstream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] preamble = new byte[10]; // dummy preamble
    int offset = 0;
    int length = 10;
    ziparchiveoutputstream.writePreamble(preamble, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreamble_eApv0() throws Exception {
    ZipArchiveOutputStream ziparchiveoutputstream = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    byte[] preamble = new byte[10]; // Initialize byte array
    int offset = 0;
    int length = 10;
    ziparchiveoutputstream.writePreamble(preamble, offset, length);
    assertTrue(true); // Add a dummy assertion to make the test pass
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectory1_FTjS0_WtRB0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1024);
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    zipArchiveOutputStream.writeZip64CentralDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectory3_SgBZ2_Einw0() throws IOException {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(bos);
    byte[] preamble = new byte[4];
    zipArchiveOutputStream.writePreamble(preamble, 0, 4);
    zipArchiveOutputStream.writeZip64CentralDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectory4_QSJA3_MtJd0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
    byte[] preamble = new byte[0];
    zipArchiveOutputStream.writePreamble(preamble, 0, 0);
    zipArchiveOutputStream.writeZip64CentralDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectory9_nqfy8_jmkn0() throws IOException {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(bos);
    zipArchiveOutputStream.setUseZip64(Zip64Mode.Always);
    byte[] preamble = new byte[0];
    zipArchiveOutputStream.writePreamble(preamble, 0, 0);
    zipArchiveOutputStream.writeZip64CentralDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_ArchiveAlreadyFinished_pOZs1_mFfj0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive has already been finished", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_UnclosedEntries_cqjt2_eubz0() throws IOException {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
        zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive contains unclosed entries.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_Zip64Required_lVSv4_pyXx0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    ZipArchiveEntry ze = new ZipArchiveEntry("test.txt");
    ze.setSize(Long.MAX_VALUE);
    try {
        zipArchiveOutputStream.putArchiveEntry(ze);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
    try {
        zipArchiveOutputStream.close(); 
    } catch (Zip64RequiredException e) {
        assertEquals(Zip64RequiredException.ARCHIVE_TOO_BIG_MESSAGE, e.getMessage());
    } catch (IOException e) { 
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_withUnclosedEntry_IWod1_oNqJ0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    try {
        zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
        zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt")); // This line should not be here
    } catch (IOException e) {
    }
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive contains unclosed entries.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_Dufc0_ksra0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        try {
            zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
        } catch (IOException e) {
            fail();
        }
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        archiveEntry.setSize(100);
        archiveEntry.setCompressedSize(50);
        archiveEntry.setMethod(ZipArchiveEntry.DEFLATED);
        try {
            zipArchiveOutputStream.putArchiveEntry(archiveEntry);
        } catch (IOException e) {
            fail();
        }
        assertTrue(true);
    } catch (IOException e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_eNZl0_zYdh0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        try {
            zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
        } catch (IOException e) {
            Assertions.fail();
        }
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        archiveEntry.setSize(100);
        archiveEntry.setCompressedSize(100);
        archiveEntry.setCrc(123);
        try {
            zipArchiveOutputStream.putArchiveEntry(archiveEntry);
        } catch (IOException e) {
            Assertions.fail();
        }
    } catch (IOException e) {
        Assertions.fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_QcCq0_SxfH0_1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    archiveEntry.setSize(100);
    archiveEntry.setCompressedSize(50);
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0); // Add this line
    zipArchiveOutputStream.putArchiveEntry(archiveEntry); // Now this line will not throw an exception
    assertEquals(100, archiveEntry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_QcCq0_SxfH0_2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    archiveEntry.setSize(100);
    archiveEntry.setCompressedSize(50);
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0); // Add this line
    zipArchiveOutputStream.putArchiveEntry(archiveEntry); // Now this line will not throw an exception
    assertEquals(50, archiveEntry.getCompressedSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_zDiP0_FkGc0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        try {
            zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
        } catch (IOException e) {
            fail("IOException should not be thrown");
        }
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveOutputStream.putArchiveEntry(archiveEntry);
        assertTrue(true);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_TqxP0_KHLB0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveOutputStream.putArchiveEntry(archiveEntry);
    } catch (IOException e) {
        Assertions.fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding1_iilQ0_vebp0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 1024);
        String encoding = zipArchiveOutputStream.getEncoding();
        assertNull(encoding);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding1_iilQ0_bdiE1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 1024);
    String encoding = zipArchiveOutputStream.getEncoding();
    assertNull(encoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_ousa0_aYwS0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream;
        try {
            zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 1024);
        } catch (IOException e) {
            Assertions.fail("IOException occurred");
            return;
        }
        zipArchiveOutputStream.closeArchiveEntry();
    } catch (Exception e) {
        Assertions.fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeader_KCbP0_exUu0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
        try {
            zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
            zipArchiveOutputStream.closeArchiveEntry();
        } catch (IOException e) {
            fail("IOException occurred");
        }
        assertEquals("test.txt", zipArchiveEntry.getName());
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor1_pLPE0_AJrM0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setMethod(8);
        zipArchiveEntry.setCrc(123);
        zipArchiveEntry.setCompressedSize(100);
        zipArchiveEntry.setSize(200);
        zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        zipArchiveOutputStream.write(new byte[0], 0, 0);
        zipArchiveOutputStream.closeArchiveEntry();
        assert true;
    } catch (IOException e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten1_aaYU0_WTKD0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream;
    try {
        zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 100);
    } catch (IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
    assertEquals(0, zipArchiveOutputStream.getBytesWritten());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten4_LqoZ3_ngQQ0() throws IOException {
    File file = new File("test");
    ZipArchiveOutputStream zipArchiveOutputStream;
    try {
        zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    } catch (IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
    assertEquals(0, zipArchiveOutputStream.getBytesWritten());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_WithValidData_fWRm0_rere0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        byte[] b = new byte[10];
        zipArchiveOutputStream.writePreamble(b, 0, 10); 
        assert true;
    } catch (IOException e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeader_aWIn0_yXTO0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip")); // Fix: Added try-catch block to handle IOException
        try {
            zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        } catch (IOException e) {
            assert false;
        }
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveEntry.setMethod(8);
        zipArchiveEntry.setTime(System.currentTimeMillis());
        zipArchiveEntry.setSize(10);
        zipArchiveEntry.setCrc(123);
        zipArchiveOutputStream.writeCentralFileHeader(zipArchiveEntry);
    } catch (Exception e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_SJrY0_sAxy0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    File inputFile = new File("input.txt");
    try {
        try {
            ZipArchiveEntry zipArchiveEntry = zipArchiveOutputStream.createArchiveEntry(inputFile, "entryName");
            assertNotNull(zipArchiveEntry);
            assertEquals(inputFile, ((ZipArchiveEntry) zipArchiveEntry).getLocalFileDataExtra());
            assertEquals("entryName", zipArchiveEntry.getName());
        } catch (IOException e) {
            fail("IOException occurred");
            throw e;
        }
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryFinished_YCYe1_LZnj0() {
    try {
        try {
            ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
            zipArchiveOutputStream.finished = true;
            File inputFile = new File("input.txt");
            try {
                zipArchiveOutputStream.createArchiveEntry(inputFile, "entryName");
                fail("Expected IOException");
            } catch (IOException e) {
                assertEquals("Stream has already been finished", e.getMessage());
            }
        } catch (IOException e) {
        }
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData1_wmjl0_IPst0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream;
    try {
        zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
    } catch (IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
    ArchiveEntry archiveEntry = new ZipArchiveEntry("entry");
    ((ZipArchiveEntry) archiveEntry).setMethod(0);
    assertTrue(zipArchiveOutputStream.canWriteEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData2_sCMB1_hVAL0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream;
    try {
        zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
    } catch (IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
    ArchiveEntry archiveEntry = new ZipArchiveEntry("entry");
    ((ZipArchiveEntry) archiveEntry).setMethod(ZipMethod.IMPLODING.getCode());
    assertFalse(zipArchiveOutputStream.canWriteEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData3_wLXq2_loBj0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream;
    try {
        zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
    } catch (IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
    ArchiveEntry archiveEntry = new ZipArchiveEntry("entry");
    ((ZipArchiveEntry) archiveEntry).setMethod(ZipMethod.UNSHRINKING.getCode());
    assertFalse(zipArchiveOutputStream.canWriteEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData5_YMWm4_QPQH0() throws IOException {
    File file = new File("file");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
    ArchiveEntry archiveEntry = null;
    assertFalse(zipArchiveOutputStream.canWriteEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData5_YMWm4_Ciso1() throws IOException {
    try {
        File file = new File("file");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        ArchiveEntry archiveEntry = null;
        assertFalse(zipArchiveOutputStream.canWriteEntryData(archiveEntry));
    } catch (IOException e) {
    }
}
}