/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Expander_Test_Failing {
Expander expander;
SevenZFile archive;
Path targetDirectory;
@Mock
    private Path archivePath;
@Mock
    private Path targetPath;
@Mock
    private SeekableByteChannel channel;
@Mock
    private InputStream inputStream;
@Mock
    private FileChannel fileChannel;
@Mock
    private BufferedInputStream bufferedInputStream;
@Mock
    private CloseableConsumer closeableConsumer;
@Mock
    private ArchiveStreamFactory archiveStreamFactory;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpand() throws Exception {
        expander = new Expander();
        archive = Mockito.mock(SevenZFile.class);
        targetDirectory = Mockito.mock(Path.class);
        // given
        SevenZArchiveEntry entry = Mockito.mock(SevenZArchiveEntry.class);
        Mockito.when(archive.getNextEntry()).thenReturn(entry, null);
        // when
        expander.expand(archive, targetDirectory);
        // then
        Mockito.verify(archive, Mockito.times(2)).getNextEntry();
        Mockito.verify(archive, Mockito.atLeastOnce()).read(Mockito.any(byte[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_sMoP0() throws IOException {
    Expander expander = new Expander();
    TarFile archive = new TarFile(new File("archive.tar"));
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals(archive.getEntries().size(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_TdDP0() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("test.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals("target", archive.getEntries().nextElement().getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_xKfJ0() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_ahWy0() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_IgXJ0() throws Exception {
    Expander expander = new Expander();
    File targetDirectory = mock(File.class);
    Path targetPath = mock(Path.class);
    when(targetDirectory.toPath()).thenReturn(targetPath);
    InputStream archive = mock(InputStream.class);
    String format = "someFormat";
    CloseableConsumer closeableConsumer = mock(CloseableConsumer.class);
    expander.expand(format, archive, targetDirectory, closeableConsumer);
    verify(expander).expand(format, archive, targetPath, closeableConsumer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_H_szkX0() throws Exception {
    Expander expander = new Expander();
    InputStream archive = mock(InputStream.class);
    File targetDirectory = mock(File.class);
    Path targetPath = mock(Path.class);
    when(targetDirectory.toPath()).thenReturn(targetPath);
    CloseableConsumer closeableConsumer = mock(CloseableConsumer.class);
    expander.expand("format", archive, targetDirectory, closeableConsumer);
    verify(expander).expand("format", archive, targetPath, closeableConsumer);
}
}