/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.jar;
import java.io.OutputStream;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JarArchiveOutputStream_Test_Passing {
@Mock
    private OutputStream outputStream;
@Mock
    private ZipArchiveEntry zipArchiveEntry;
@Mock
    private JarMarker jarMarker;
private JarArchiveOutputStream jarArchiveOutputStream;
    private boolean jarMarkerAdded;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testputArchiveEntry() throws Exception {
        jarArchiveOutputStream = new JarArchiveOutputStream(outputStream);
        when(jarMarker.getInstance()).thenReturn(jarMarker);
        jarArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        verify(zipArchiveEntry).addAsFirstExtraField(jarMarker);
        assertTrue(jarMarkerAdded);
    }
}