/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SegmentConstantPool_Test_Failing {
SegmentConstantPool segmentconstantpool;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_ReturnsNull_VKQU1() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool scp = new SegmentConstantPool(bands);
    String name = "NonExistingClass";
    try {
        scp.getClassSpecificPoolEntry(0, 0, name);
    } catch (Pack200Exception e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_ReturnsConstantPoolEntry_OBDT0() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool scp = new SegmentConstantPool(bands);
    String name = "TestClass";
    bands.getCpClass()[0] = name;
    ConstantPoolEntry cpe = scp.getClassPoolEntry(name);
    assertNotNull(cpe);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_ReturnsNull_VKQU1_fid3() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool scp = new SegmentConstantPool(bands);
    String name = "NonExistingClass";
    assertNull(scp.getClassPoolEntry(name));
}
}