/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_UwuJ0() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    NewAttribute newAttribute = new NewAttribute(attributeName, 1);
    int[] startPCs = newAttribute.getStartPCs();
    assertArrayEquals(null, startPCs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndex_EgtD0() {
    CPUTF8 attributeName = new CPUTF8("utf8", 1);
    NewAttribute newAttribute = new NewAttribute(attributeName, 2);
    assertEquals(2, newAttribute.getLayoutIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_EmptyList_zKSN0() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    assertEquals(0, newAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber2_kmcT1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 1), 1);
    List<Integer> byteCodeOffsets = Arrays.asList(1, 2, 3);
    newAttribute.renumber(byteCodeOffsets);
    assertEquals(2, byteCodeOffsets.get(1).intValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_NonEmptyList_PApn1_GMOv0() {
    CPUTF8 attributeName = new CPUTF8("attributeName", 0);
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    newAttribute.addBCOffset(1, 1);
    newAttribute.addBCOffset(2, 2);
    newAttribute.addBCOffset(3, 3);
    assertEquals(6, newAttribute.getLength());
}
}