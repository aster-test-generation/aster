/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValue_VkNB2() {
    ZipShort zipShort1 = new ZipShort(10);
    ZipShort zipShort2 = new ZipShort(10);
    assertTrue(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_cnqE0() {
    byte[] buf = new byte[2];
    ZipShort.putShort(0x1234, buf, 0);
    byte[] expected = new byte[] { 0x34, 0x12 };
    assertArrayEquals(expected, buf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withIntValue_iuLD1() {
    ZipShort zipShort = new ZipShort(10);
    assertEquals("ZipShort value: 10", zipShort.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_int_Khuz1() {
    ZipShort zipShort = new ZipShort(123);
    assertEquals(123, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_intValue_EKyp1() {
    ZipShort zipShort = new ZipShort(5);
    assertEquals(5, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_yDqS0() {
    byte[] result = ZipShort.getBytes(0);
    assertArrayEquals(new byte[] {0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes4_JiKS3() {
    byte[] result = ZipShort.getBytes(65535);
    assertArrayEquals(new byte[] {(byte) 0xFF, (byte) 0xFF}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes5_CImN4() {
    byte[] result = ZipShort.getBytes(-1);
    assertArrayEquals(new byte[] {(byte) 0xFF, (byte) 0xFF}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ByteOffset_CztN0_1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3}, 1);
    Object cloned = zipShort.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ByteOffset_CztN0_2() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3}, 1);
    Object cloned = zipShort.clone();
    assertNotSame(zipShort, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_IntValue_qdue1_1() {
    ZipShort zipShort = new ZipShort(123);
    Object cloned = zipShort.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_IntValue_qdue1_2() {
    ZipShort zipShort = new ZipShort(123);
    Object cloned = zipShort.clone();
    assertNotSame(zipShort, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ByteArray_UsJe2_1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3});
    Object cloned = zipShort.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ByteArray_UsJe2_2() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3});
    Object cloned = zipShort.clone();
    assertNotSame(zipShort, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_WUuj0_fid1() {
    byte[] bytes = new byte[2];
    bytes[0] = (byte) 0x01;
    bytes[1] = (byte) 0x02;
    ZipShort zipShort = new ZipShort(bytes);
    assertTrue(zipShort.equals(zipShort));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_tAtK1_fid1() {
    Object obj = new Object();
    ZipShort zipShort = new ZipShort(0);
    assertFalse(zipShort.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withByteOffset_UlVw0_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2}, 0);
    assertEquals("ZipShort value: 513", zipShort.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withByteArray_WARv2_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2});
    assertEquals("ZipShort value: 513", zipShort.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_byteArrayOffset_LBTt0_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2}, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_byteArray_DwNh2_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2});
    assertEquals(513, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_DyGb0_fid1() {
    ZipShort zipShort = new ZipShort(new byte[2], 0);
    byte[] result = zipShort.getBytes();
    assertArrayEquals(new byte[] {0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_lszs1_fid1() {
    ZipShort zipShort = new ZipShort(123);
    byte[] result = zipShort.getBytes();
    assertArrayEquals(new byte[] {123, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes3_fJtx2_fid1() {
    ZipShort zipShort = new ZipShort((short) 0);
    byte[] result = zipShort.getBytes();
    assertArrayEquals(new byte[] {0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_AasU0_fid1() {
    byte[] bytes = new byte[] { 0x01, 0x02 };
    assertEquals(513, ZipShort.getValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_Npwy2_fid1() {
    byte[] bytes = new byte[] { 0x05, 0x06 };
    assertEquals(1541, ZipShort.getValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue7_ZDRk6_fid1() {
    byte[] bytes = new byte[] { 0x13, 0x14 };
    assertEquals(5139, ZipShort.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_CuKL7_fid1() {
    byte[] bytes = new byte[] { 0x15, 0x16 };
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_vaWa8_fid1() {
    byte[] bytes = new byte[] { 0x17, 0x18 };
    assertEquals(6167, ZipShort.getValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Zulo9_fid1() {
    byte[] bytes = new byte[] { 0x19, 0x20 };
}
}