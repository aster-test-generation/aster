/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_EmptyArray_KOsW0() {
    long[] flags = new long[0];
    int result = SegmentUtils.countBit16(flags);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_NoBit16_CDBb1() {
    long[] flags = new long[] {1, 2, 4, 8};
    int result = SegmentUtils.countBit16(flags);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_HasBit16_mnTD2() {
    long[] flags = new long[] {1 << 16, 2, 4, 1 << 16};
    int result = SegmentUtils.countBit16(flags);
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_EmptyArray_CnXG0() {
    int[] flags = new int[0];
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_NoBit16_KcEI1() {
    int[] flags = new int[]{1, 2, 4, 8};
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_HasBit16_qmqu2() {
    int[] flags = new int[]{1, 2, 65536, 8};
    assertEquals(1, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_EmptyArray_bETx0() {
    long[][] flags = {};
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_NoBit16_wkGy1() {
    long[][] flags = {{1, 2, 4}, {8, 16, 32}};
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_HasBit16_msNQ2() {
    long[][] flags = {{1, 2, 65536}, {8, 16, 32}};
    assertEquals(1, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs1_IXww0() {
    assertEquals(0, SegmentUtils.countArgs("()V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs2_vJsd1() {
    assertEquals(1, SegmentUtils.countArgs("(I)V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs6_kObh5() {
    assertEquals(1, SegmentUtils.countArgs("(Ljava/lang/String;)V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs7_ZZtI6() {
    assertEquals(1, SegmentUtils.countArgs("([I)V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs8_glkg7() {
    assertEquals(1, SegmentUtils.countArgs("([D)V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs9_KBEt8() {
    assertEquals(2, SegmentUtils.countArgs("(ILjava/lang/String;)V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs11_FHQF10() {
    assertEquals(3, SegmentUtils.countArgs("(IILjava/lang/String;)V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs13_FSyl12() {
    assertEquals(4, SegmentUtils.countArgs("(IIILjava/lang/String;)V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountInvokeInterfaceArgs_ABnm0_fid1() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs12_lahd11_fid1() {
    assertEquals(6, SegmentUtils.countArgs("(IDD[D)V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs18_UnSo13() {
    assertEquals(8, SegmentUtils.countArgs("(IDDD[D)V", 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_KlLj0_1() {
    assertEquals(2, SegmentUtils.countArgs("(II)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_KlLj0_4() {
    assertEquals(2, SegmentUtils.countArgs("(ILjava/lang/Object;)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_IVBf0_4() {
    assertEquals(2, SegmentUtils.countArgs("(J)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_IVBf0_5() {
    assertEquals(2, SegmentUtils.countArgs("(D)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_IVBf0_6() {
    assertEquals(1, SegmentUtils.countArgs("(Ljava/lang/Object;)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_IVBf0_8() {
    assertEquals(1, SegmentUtils.countArgs("([[I)V", 2));}
}