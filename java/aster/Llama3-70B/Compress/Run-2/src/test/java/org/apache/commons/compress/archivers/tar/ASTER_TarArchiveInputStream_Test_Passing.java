/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveInputStream_Test_Passing {
private TarArchiveEntry currEntry;
private TarArchiveInputStream tararchiveinputstream;
private InputStream inputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Posix_DlLy0() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = ' ';
    signature[TarConstants.VERSION_OFFSET + 1] = '0';
    signature[TarConstants.VERSION_OFFSET + 2] = '0';
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_GnuZero_DXvX2() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = '0';
    signature[TarConstants.VERSION_OFFSET + 1] = '0';
    signature[TarConstants.VERSION_OFFSET + 2] = '0';
    assert TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidMagic_bDsA4() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'i';
    signature[TarConstants.MAGIC_OFFSET + 1] = 'n';
    signature[TarConstants.MAGIC_OFFSET + 2] = 'v';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'l';
    signature[TarConstants.VERSION_OFFSET] = ' ';
    signature[TarConstants.VERSION_OFFSET + 1] = '0';
    signature[TarConstants.VERSION_OFFSET + 2] = '0';
    assert !TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidVersion_YfYW5() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = 'i';
    signature[TarConstants.VERSION_OFFSET + 1] = 'n';
    signature[TarConstants.VERSION_OFFSET + 2] = 'v';
    assert !TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_TooShort_adFZ6() {
    byte[] signature = new byte[10];
    assert !TarArchiveInputStream.matches(signature, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_LengthZero_HtIq8() {
    byte[] signature = new byte[512];
    assert !TarArchiveInputStream.matches(signature, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupported1_qWgV0_RXJi0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream);
    assertFalse(tarArchiveInputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupported3_EDnR2_evDU0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream, "UTF-8");
    assertFalse(tarArchiveInputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupported4_eKqP3_MPXC0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream, 1024, 512);
    assertFalse(tarArchiveInputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMark4_DfRR3_sjkK0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream, 1024, 512);
    tarArchiveInputStream.mark(10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMark5_dVSP4_tbjG0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream, 1024, 512, "UTF-8");
    tarArchiveInputStream.mark(10);
}
}