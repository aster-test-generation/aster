/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveOutputStream_Test_Failing {
TarArchiveOutputStream tararchiveoutputstream;
OutputStream outputStream;
TarArchiveEntry tarArchiveEntry;
Map<String, String> headers;
private boolean finished;
private ZipEncoding zipEncoding;
private static ZipEncoding ASCII = ZipEncodingHelper.getZipEncoding(StandardCharsets.US_ASCII);
private long currBytes;
private boolean haveUnclosedEntry;
private long currSize;
private byte[] recordBuf;
private boolean addPaxHeadersForNonAsciiNames;
TarArchiveEntry archiveEntry;
ZipEncoding encoding;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testputArchiveEntry_RmyE0_1() throws Exception {
    outputStream = Mockito.mock(OutputStream.class);
    tararchiveoutputstream = new TarArchiveOutputStream(outputStream);
    archiveEntry = Mockito.mock(TarArchiveEntry.class);
    recordBuf = new byte[1024];
    currSize = 0;
    haveUnclosedEntry = false;
    Mockito.when(archiveEntry.isGlobalPaxHeader()).thenReturn(false);
    Mockito.when(archiveEntry.getName()).thenReturn("test-entry");
    Mockito.when(archiveEntry.getSize()).thenReturn(1024L);
    tararchiveoutputstream.putArchiveEntry(archiveEntry);
    Mockito.verify(outputStream, Mockito.times(1)).write(Mockito.any(byte[].class));
    Assertions.assertTrue(haveUnclosedEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testputArchiveEntry_RmyE0_2() throws Exception {
    outputStream = Mockito.mock(OutputStream.class);
    tararchiveoutputstream = new TarArchiveOutputStream(outputStream);
    archiveEntry = Mockito.mock(TarArchiveEntry.class);
    recordBuf = new byte[1024];
    currSize = 0;
    haveUnclosedEntry = false;
    Mockito.when(archiveEntry.isGlobalPaxHeader()).thenReturn(false);
    Mockito.when(archiveEntry.getName()).thenReturn("test-entry");
    Mockito.when(archiveEntry.getSize()).thenReturn(1024L);
    tararchiveoutputstream.putArchiveEntry(archiveEntry);
    Mockito.verify(outputStream, Mockito.times(1)).write(Mockito.any(byte[].class));
    Assertions.assertEquals(currSize, tararchiveoutputstream.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testputArchiveEntry_RmyE0_1_fid1() throws Exception {
    outputStream = Mockito.mock(OutputStream.class);
    tararchiveoutputstream = new TarArchiveOutputStream(outputStream);
    archiveEntry = Mockito.mock(TarArchiveEntry.class);
    recordBuf = new byte[1024];
    currSize = 0;
    haveUnclosedEntry = false;
    Mockito.when(archiveEntry.isGlobalPaxHeader()).thenReturn(false);
    Mockito.when(archiveEntry.getName()).thenReturn("test-entry");
    Mockito.when(archiveEntry.getSize()).thenReturn(1024L);
    tararchiveoutputstream.putArchiveEntry(archiveEntry);
    Mockito.verify(outputStream, Mockito.times(1)).write(Mockito.any(byte[].class), Mockito.anyInt(), Mockito.anyInt());
    Assertions.assertTrue(haveUnclosedEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testputArchiveEntry_RmyE0_2_fid1() throws Exception {
    outputStream = Mockito.mock(OutputStream.class);
    tararchiveoutputstream = new TarArchiveOutputStream(outputStream);
    archiveEntry = Mockito.mock(TarArchiveEntry.class);
    recordBuf = new byte[1024];
    currSize = 0;
    haveUnclosedEntry = false;
    Mockito.when(archiveEntry.isGlobalPaxHeader()).thenReturn(false);
    Mockito.when(archiveEntry.getName()).thenReturn("test-entry");
    Mockito.when(archiveEntry.getSize()).thenReturn(1024L);
    tararchiveoutputstream.putArchiveEntry(archiveEntry);
    Mockito.verify(outputStream, Mockito.times(1)).write(Mockito.any(byte[].class), Mockito.eq(0), Mockito.eq(512));
    Assertions.assertEquals(currSize, tararchiveoutputstream.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void flushBlock_IjWr5() throws IOException {
            throw new IOException("Flush block exception");
        }
}