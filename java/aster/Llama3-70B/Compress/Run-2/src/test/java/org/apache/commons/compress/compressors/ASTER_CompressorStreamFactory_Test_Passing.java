/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.SortedMap;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandard_wGnh0() {
    String result = CompressorStreamFactory.getZstandard();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders1_BFrQ0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders2_mTNW1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2_CVbJ0() {
    String result = CompressorStreamFactory.getBzip2();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders1_KYHY0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders2_kOJx1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames1_nODg0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    Set<String> compressorNames = compressorStreamFactory.getInputStreamCompressorNames();
    assertEquals(14, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames2_yxPZ1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> compressorNames = compressorStreamFactory.getInputStreamCompressorNames();
    assertEquals(14, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames3_szse2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = compressorStreamFactory.getInputStreamCompressorNames();
    assertEquals(14, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_FSIm0_1() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_FSIm0_2() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertNotEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZ_sKPF0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_uPlp0() {
    String result = CompressorStreamFactory.getLZ4Framed();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_MvLF0_1() {
    String gzip = CompressorStreamFactory.getGzip();
    assertNotNull(gzip);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_MvLF0_2() {
    String gzip = CompressorStreamFactory.getGzip();
    assertEquals("gz", gzip);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated2_dEsP1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated3_FuFE2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false);
    assertFalse(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated4_Qare3() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated5_POwZ4() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 512);
    assertFalse(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated7_VJwQ6() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    assertFalse(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated8_rYuE7() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 1024);
    assertFalse(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated9_lcqs8() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 512);
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_jKcQ0_1() {
    String result = CompressorStreamFactory.getLzma();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_jKcQ0_2() {
    String result = CompressorStreamFactory.getLzma();
    assertEquals("lzma", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleton_QulC0_1() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    assertNotNull(factory);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_fNvH0() {
    String result = CompressorStreamFactory.getSnappyRaw();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames1_wvQe0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    Set<String> compressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(10, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames2_Fqvz1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> compressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(10, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames3_fUrh2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(10, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF1_lCrr0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    assertTrue(compressorStreamFactory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF2_smLr1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    assertTrue(compressorStreamFactory instanceof CompressorStreamFactory);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF3_Tllj2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    assertTrue(compressorStreamFactory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_xPrZ0() {
    String result = CompressorStreamFactory.getPack200();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Block_DaKh0() {
    String result = CompressorStreamFactory.getLZ4Block();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate_jKha0() {
    String result = CompressorStreamFactory.getDeflate();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramed_Smtv0() {
    String result = CompressorStreamFactory.getSnappyFramed();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64_DufX0() {
    String result = CompressorStreamFactory.getDeflate64();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_AhtX0_1() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_AhtX0_2() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertNotEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotli_QTQU0() {
    String brotli = CompressorStreamFactory.getBrotli();
    assertNotNull(brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_rfNj0() {
    String result = CompressorStreamFactory.getXz();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_fzSR0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String result = factory.getXz();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_pdtM0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String xz = factory.getXz();
    assertNotNull(xz);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_LCSE0() throws Exception {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String result = factory.getXz();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_DEFLATE64_yWXu11_ItyO0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    CompressorInputStream cis = factory.createCompressorInputStream("DEFLATE64", in, true);
    assertNotNull(cis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_BZIP2_csEZ1_ifWx0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("BZIP2", out);
    assertNotNull(compressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_BZIP2_csEZ1_ifWx0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("BZIP2", out);
    assertTrue(compressorOutputStream instanceof org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_XZ_BbIM2_OYjs0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream(CompressorStreamFactory.getXz(), out);
    assertNotNull(compressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_XZ_BbIM2_OYjs0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream(CompressorStreamFactory.getXz(), out);
    assertTrue(compressorOutputStream instanceof XZCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_PACK200_ZVhH3_jaWE0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("PACK200", out);
    assertNotNull(compressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_PACK200_ZVhH3_jaWE0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("PACK200", out);
    assertTrue(compressorOutputStream instanceof Pack200CompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZMA_SiXX4_PBEg0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream(CompressorStreamFactory.getXz(), out);
    assertFalse(compressorOutputStream instanceof LZMACompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_DEFLATE_gcEf5_LYGh0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("DEFLATE", out);
    assertNotNull(compressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_DEFLATE_gcEf5_LYGh0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("DEFLATE", out);
    assertTrue(compressorOutputStream instanceof DeflateCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_SNAPPY_FRAMED_Fnql6_zATh0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    try {
        factory.createCompressorOutputStream("SNAPPY_FRAMED", out);
        fail("Expected CompressorException");
    } catch (CompressorException e) {
        assertEquals("Compressor: SNAPPY_FRAMED not found.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZ4_BLOCK_TIBy7_ibwc0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    try {
        factory.createCompressorOutputStream("LZ4_BLOCK", out);
        fail("Expected CompressorException");
    } catch (CompressorException e) {
        assertEquals("Compressor: LZ4_BLOCK not found.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZ4_FRAMED_aDPR8_nwEY0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    try {
        factory.createCompressorOutputStream("LZ4_FRAMED", out);
        fail("Expected CompressorException");
    } catch (CompressorException e) {
        assertEquals("Compressor: LZ4_FRAMED not found.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_ZSTANDARD_ANoj9_aQwH0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream(CompressorStreamFactory.getXz(), out);
    assertFalse(compressorOutputStream instanceof ZstdCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_QkSK0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertEquals("xz", factory.getXz());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_nein0() {
    assertEquals("xz", CompressorStreamFactory.getXz());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_FSIm0() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(result);
    assertNotEquals(0, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_MvLF0() {
    String gzip = CompressorStreamFactory.getGzip();
    assertNotNull(gzip);
    assertEquals("gz", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_jKcQ0() {
    String result = CompressorStreamFactory.getLzma();
    assertNotNull(result);
    assertEquals("lzma", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_AhtX0() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertNotNull(result);
    assertNotEquals(0, result.size());
}
}