/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttributeBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls1_OReI0() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[1];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, backwardsCalls[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls2_Qvlx1() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[0];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, backwardsCalls.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls3_uHbH2() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[1];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, backwardsCalls[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls4_MOzQ3() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = null;
    try {
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withNullBackwardsCalls_KLkY3() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    try {
        newAttributeBands.setBackwardsCalls(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls1_UQKK0() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[1];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, backwardsCalls[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls2_ENRQ1_1() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[2];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, backwardsCalls[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls2_ENRQ1_2() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[2];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, backwardsCalls[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls3_rbDr2() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[0];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls4_QYtL3() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = null;
    try {
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        fail();
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls2_DOJN1() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout callable", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[1];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, backwardsCalls[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls3_bXPU2() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout replication", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[1];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, backwardsCalls[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls4_qWUs3_1() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout callable replication", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[2];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, backwardsCalls[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls4_qWUs3_2() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout callable replication", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[2];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, backwardsCalls[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_O_oxsN0() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(Codec.BRANCH5, newAttributeBands.getCodec("Olayout"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_P_rXBE1() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(Codec.BCI5, newAttributeBands.getCodec("Playout"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_S_oDZw2() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(Codec.SIGNED5, newAttributeBands.getCodec("Slayout"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_B_MiDU3() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(Codec.BYTE1, newAttributeBands.getCodec("Blayout"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_KS_jsCp4() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(Codec.UNSIGNED5, newAttributeBands.getCodec("KSlayout"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_RS_OpWn5() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(Codec.UNSIGNED5, newAttributeBands.getCodec("RSlayout"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_Default_lcMG6() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(Codec.UNSIGNED5, newAttributeBands.getCodec("Xlayout"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_uwCC0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    newAttributeBands.unpack();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCount_pmCY0() throws Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
}