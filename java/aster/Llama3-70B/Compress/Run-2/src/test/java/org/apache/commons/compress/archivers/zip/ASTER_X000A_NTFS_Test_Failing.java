/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_IYZF0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    String result = x000A_NTFS.toString();
    assertNull(result);
}
@Test
    public void testParseFromLocalFileData_InvalidData_SGyN2_pRHZ2() {
        X000A_NTFS ntfs = new X000A_NTFS();
        byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04 };
        int offset = 4;
        int length = data.length - offset;
        assertThrows(ZipException.class, () -> ntfs.parseFromLocalFileData(data, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_gtdv0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime time = FileTime.fromMillis(1000);
    x000A_NTFS.setAccessFileTime(time);
    assertEquals(1000, x000A_NTFS.getAccessTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_BhJF0_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort zipShort = x000A_NTFS.getLocalFileDataLength();
    byte[] bytes = zipShort.getBytes();
    int value = ZipShort.getValue(bytes);
    assertEquals(26, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_vAEx0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] expected = new byte[x000A_NTFS.getLocalFileDataLength().getValue()];
    byte[] actual = x000A_NTFS.getLocalFileDataData();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_ROdE0_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date();
    x000A_NTFS.setModifyJavaTime(d);
    assertEquals(d.getTime(), x000A_NTFS.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_IYZF0_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    String result = x000A_NTFS.toString();
    assertEquals("0x000A Zip Extra Field: Modify:[" + x000A_NTFS.getModifyFileTime() + "] Access:[" + x000A_NTFS.getAccessFileTime() + "] Create:[" + x000A_NTFS.getCreateFileTime() + "] ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_PXbe0_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime time = FileTime.fromMillis(1000);
    x000A_NTFS.setCreateFileTime(time);
    assertEquals("1970-01-01T00:00:01Z", x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_nPll0_miEy0_3_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
    byte[] bytes = modifyTime.getBytes();
    long longValue = modifyTime.getLongValue();
    long value = modifyTime.getLongValue();
    assertTrue(longValue > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_nPll0_miEy0_4() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
    byte[] bytes = modifyTime.getBytes();
    long longValue = modifyTime.getLongValue();
    long value = modifyTime.getLongValue();
    assertTrue(value > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_3_hknf2_cSyq0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyJavaTime(new Date());
    x000A_NTFS.setAccessJavaTime(new Date());
    assertEquals(-123 ^ x000A_NTFS.getModifyJavaTime().hashCode() ^ Integer.rotateLeft(x000A_NTFS.getAccessJavaTime().hashCode(), 11), x000A_NTFS.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessJavaTime_Znsd0_zDoa0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date(123456789L);
    x000A_NTFS.setAccessJavaTime(d);
    Date expected = FileTimes.ntfsTimeToDate(123456789L);
    Date actual = x000A_NTFS.getAccessJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TimeAttrTagFound_HHwa0_pTWh0_1() throws java.util.zip.ZipException {
    X000A_NTFS ntfs = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19 };
    int offset = 4;
    int length = data.length - offset;
    ntfs.parseFromLocalFileData(data, offset, length);
    assertEquals(0x0102030405060708L, ntfs.getModifyTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TimeAttrTagFound_HHwa0_pTWh0_2() throws java.util.zip.ZipException {
    X000A_NTFS ntfs = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19 };
    int offset = 4;
    int length = data.length - offset;
    ntfs.parseFromLocalFileData(data, offset, length);
    assertEquals(0x0910111213141516L, ntfs.getAccessTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TimeAttrTagFound_HHwa0_pTWh0_3() throws java.util.zip.ZipException {
    X000A_NTFS ntfs = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19 };
    int offset = 4;
    int length = data.length - offset;
    ntfs.parseFromLocalFileData(data, offset, length);
    assertEquals(0x1718190000000000L, ntfs.getCreateTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TimeAttrTagNotFound_iMBl1_oBpa0_1() throws ZipException {
    X000A_NTFS ntfs = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19 };
    int offset = 4;
    int length = data.length - offset;
    ntfs.parseFromLocalFileData(data, offset, length);
    assertNull(ntfs.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TimeAttrTagNotFound_iMBl1_oBpa0_2() throws ZipException {
    X000A_NTFS ntfs = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19 };
    int offset = 4;
    int length = data.length - offset;
    ntfs.parseFromLocalFileData(data, offset, length);
    assertNull(ntfs.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TimeAttrTagNotFound_iMBl1_oBpa0_3() throws ZipException {
    X000A_NTFS ntfs = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19 };
    int offset = 4;
    int length = data.length - offset;
    ntfs.parseFromLocalFileData(data, offset, length);
    assertNull(ntfs.getCreateTime());}
}