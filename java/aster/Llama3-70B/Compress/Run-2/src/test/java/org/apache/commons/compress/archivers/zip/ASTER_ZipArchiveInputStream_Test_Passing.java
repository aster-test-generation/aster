/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.CRC32;
import java.util.zip.ZipEntry;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveInputStream_Test_Passing {
@Mock
    private InputStream inputStream;
private ZipArchiveInputStream ziparchiveinputstream;
private byte[] skipBuf = new byte[1024];
private ZipEncoding zipEncoding;
@Mock
    private ZipArchiveEntry zipArchiveEntry;
@Mock
    private ZipUtil zipUtil;
private ZipArchiveInputStream zipArchiveInputStream;
@Mock
    private ZipEntry current;
@Mock
    private CRC32 currentCrc;
@Mock
    private InputStream currentInputStream;
    private int entriesRead;
        private boolean hasDataDescriptor;
    private boolean closed;
    private boolean hitCentralDirectory;
        private final ZipArchiveEntry entry = new ZipArchiveEntry();
    private long uncompressedCount;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_LFH_SIG_IrPN0() {
    byte[] signature = ZipArchiveOutputStream.LFH_SIG.clone();
    assertTrue(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_EOCD_SIG_sMFq1() {
    byte[] signature = ZipArchiveOutputStream.EOCD_SIG.clone();
    assertTrue(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_DD_SIG_QNRV2() {
    byte[] signature = ZipArchiveOutputStream.DD_SIG.clone();
    assertTrue(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_SINGLE_SEGMENT_SPLIT_MARKER_mFju3() {
    byte[] signature = ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes();
    assertTrue(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_shortSignature_TsVo4() {
    byte[] signature = new byte[ZipArchiveOutputStream.LFH_SIG.length - 1];
    assertFalse(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_noMatch_QLmr5() {
    byte[] signature = new byte[ZipArchiveOutputStream.LFH_SIG.length];
    for (int i = 0; i < signature.length; i++) {
        signature[i] = (byte) (i + 1);
    }
    assertFalse(ZipArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextEntry() throws Exception {
        inputStream = Mockito.mock(InputStream.class);
        ziparchiveinputstream = new ZipArchiveInputStream(inputStream);
        // Mock the getNextZipEntry method to return a mock ZipArchiveEntry
        ZipArchiveEntry mockEntry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveinputstream.getNextZipEntry()).thenReturn(mockEntry);
        // Call the getNextEntry method
        ZipArchiveEntry actualEntry = ziparchiveinputstream.getNextEntry();
        // Assert that the mock entry is returned
        Assertions.assertEquals(mockEntry, actualEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipNegativeValue_BAYz2() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    long value = -10;
    try {
        zipArchiveInputStream.skip(value);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    } catch (IOException e) {
        fail("Unexpected IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCount_UNKNOWN_Zlvr6() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_MTiM8_QnGs0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    byte[] buffer = new byte[1024];
    try {
        int bytesRead = zipArchiveInputStream.read(buffer, 0, buffer.length);
        assertNotNull(buffer);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_wBuI12_CysC0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    try {
        int bytesRead = zipArchiveInputStream.read(buffer, 0, buffer.length);
        assertEquals(0, bytesRead);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_NotZipArchiveEntry_ReturnsFalse_QrVP0() throws Exception {
    zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    MockitoAnnotations.initMocks(this);
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    boolean result = zipArchiveInputStream.canReadEntryData(archiveEntry);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData3_GGLq2_hoYO0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test");
    assertFalse(zipArchiveInputStream.canReadEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData1_WJNk0_qYMD0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setCompressedSize(10);
    zipArchiveEntry.setMethod(ZipEntry.DEFLATED);
    assertTrue(zipArchiveInputStream.canReadEntryData(zipArchiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData5_HiNW4_FORa0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setCompressedSize(ArchiveEntry.SIZE_UNKNOWN);
    zipArchiveEntry.setMethod(ZipMethod.ENHANCED_DEFLATED.getCode());
    assertTrue(zipArchiveInputStream.canReadEntryData(zipArchiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipZeroValue_QLbU1_ZSUu0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    long value = 0;
    try {
        assertEquals(value, zipArchiveInputStream.skip(value));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipEndOfFile_IxsN4_EoXy0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    long value = 10;
    try {
        assertEquals(0, zipArchiveInputStream.skip(value));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry1_kzBz0_azak0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_NEZN5_SWtE0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_mULq6_yWcm0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_maHF7_wIKK0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_QBGx8_AVHC0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry10_WcDA9_ibWc0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
    try {
        zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry11_qIvN10_zucG0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry12_jpdR11_xZXX0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry13_FdmX12_sjlq0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry14_aQnm13_rAxG0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8");
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_BSRg3_rodN0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_VSNF4_WGFl0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_SuFt5_IqbT0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_BIuE6_zGHD0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_OzmR7_uEAT0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8", true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry10_DyCW9_uipO0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]), "UTF-8");
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_uBcc1_Nrvo0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    try {
        zipArchiveInputStream.close();
    } catch (IOException e) {
    }
    try {
        zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_TLel2_MWwh0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[ZipFile.MIN_EOCD_SIZE]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        // Expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_siJx1_eZrr0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_DasT1_oLnJ0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_vPxF2_VdOF0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x05, 0x06}));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_GwSc2_MUGH0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[4]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_vQfw3_Krcl0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[5]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_cjKu4_esxB0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[6]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_WrIE5_DZEF0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[7]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_exRR6_nSqa0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[8]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_maDV7_xXZz0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[9]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_kVEA8_JVSs0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry10_wBbx9_DlLB0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[11]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry11_eJYH10_iGwq0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[12]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry12_MVKl11_cmQY0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[13]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry13_xwmY12_jyLu0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[14]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry14_rUHm13_iOsQ0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[15]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry15_KBat14_iiWw0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[16]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry16_pzkI15_HqwY0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[17]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry17_PFcr16_zXiM0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[18]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry18_YhwM17_gvsy0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[19]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry19_adgr18_GEtW0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[20]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_tDiB5_RNoj0() {
    byte[] lfhBuf = new byte[30];
    lfhBuf[0] = (byte) 0x50;
    lfhBuf[1] = (byte) 0x4b;
    lfhBuf[2] = (byte) 0x03;
    lfhBuf[3] = (byte) 0x04;
    try {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(lfhBuf), "UTF-8", true);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_gbtl7_RZoe0() {
    byte[] lfhBuf = new byte[30];
    lfhBuf[0] = (byte) 0x50;
    lfhBuf[1] = (byte) 0x4b;
    lfhBuf[2] = (byte) 0x03;
    lfhBuf[3] = (byte) 0x04;
    try {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(lfhBuf), "UTF-8", true, true, true);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_1_YRHI0_FSAC0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = 0;
    try {
        assertEquals(0, zipArchiveInputStream.read(buffer, offset, length));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_2_mkCo1_bLnw0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        zipArchiveInputStream.close();
    } catch (IOException e) {
    }
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_3_oimu2_udPU0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 1;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_4_KPdp3_nltp0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = -1;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_5_YPiK4_xofS0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    int offset = 0;
    int length = 2;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_4_RcxM3_OFtW0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    int offset = 1;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_5_sRCe4_xuVg0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    int offset = 0;
    int length = -1;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_6_vWSq5_nmCU0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    int offset = -1;
    int length = 0;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (ArrayIndexOutOfBoundsException e) {
    } catch (IOException e) {
    }
}
}