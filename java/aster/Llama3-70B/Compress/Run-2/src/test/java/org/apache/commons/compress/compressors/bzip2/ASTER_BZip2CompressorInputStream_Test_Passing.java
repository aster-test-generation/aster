/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BZip2CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesTrue_QDrf0() throws Exception {
    byte[] signature = new byte[] {'B', 'Z', 'h', 1, 2, 3};
    assertTrue(BZip2CompressorInputStream.matches(signature, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesFalseLength_Awuu1() throws Exception {
    byte[] signature = new byte[] {'B', 'Z', 'h', 1, 2, 3};
    assertFalse(BZip2CompressorInputStream.matches(signature, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesFalseFirstByte_OTpp2() throws Exception {
    byte[] signature = new byte[] {'A', 'Z', 'h', 1, 2, 3};
    assertFalse(BZip2CompressorInputStream.matches(signature, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesFalseSecondByte_cUvK3() throws Exception {
    byte[] signature = new byte[] {'B', 'X', 'h', 1, 2, 3};
    assertFalse(BZip2CompressorInputStream.matches(signature, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesFalseThirdByte_oIca4() throws Exception {
    byte[] signature = new byte[] {'B', 'Z', 'i', 1, 2, 3};
    assertFalse(BZip2CompressorInputStream.matches(signature, 3));
}
}