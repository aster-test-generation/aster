/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_QVYm0_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 1L, attributes);
    int hashCode = cpmember.hashCode();
    assertEquals(31 * (31 * (31 * (31 + attributes.hashCode()) + descriptor.hashCode()) + 1L) + name.hashCode(), hashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentAttributes_EWSZ3_rzpa0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    List<Attribute> attributes1 = new ArrayList<>();
    List<Attribute> attributes2 = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor, 0L, attributes1);
    CPMember member2 = new CPMember(name, descriptor, 0L, attributes2);
    assert(!member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_xIHd0_LTLe0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 0, attributes);
    ClassConstantPool pool = new ClassConstantPool();
    member.resolve(pool);
    assertEquals(1, member.hashCode()); 
}
}