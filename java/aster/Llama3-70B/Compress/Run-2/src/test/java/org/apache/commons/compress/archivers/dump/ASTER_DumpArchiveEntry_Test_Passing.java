/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_hOTx0_1() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setMode(07777);
    assertEquals(07777, dumpArchiveEntry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_hOTx0_2() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setMode(07777);
    assertNotNull(dumpArchiveEntry.getPermissions());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDeleted_tSJV0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    boolean result = dumpArchiveEntry.isDeleted();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_ThkL0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals("name", dumpArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_etZL0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    Date ctime = new Date();
    dumpArchiveEntry.setCreationTime(ctime);
    assertEquals(ctime.getTime(), dumpArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_NoEr0() throws Exception {
    DumpArchiveEntry obj = new DumpArchiveEntry("name", "simpleName");
    assertTrue(obj.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_eTfL1() throws Exception {
    DumpArchiveEntry obj = new DumpArchiveEntry("name", "simpleName");
    assertFalse(obj.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_CmUc2() throws Exception {
    DumpArchiveEntry obj = new DumpArchiveEntry("name", "simpleName");
    assertFalse(obj.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_wShe0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals("name", dumpArchiveEntry.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOffset_lwjk0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setOffset(10L);
    assertEquals(10L, dumpArchiveEntry.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_nfKk0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setVolume(1);
    assertEquals(1, dumpArchiveEntry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSimpleName_fisD0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setSimpleName("newSimpleName");
    assertEquals("newSimpleName", dumpArchiveEntry.getSimpleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSimpleName_fhuA0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals("simpleName", dumpArchiveEntry.getSimpleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneration_qxFf0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setGeneration(1);
    assertEquals(1, dumpArchiveEntry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_Directory_YMMJ0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("dir", "dir");
    entry.setName("dir");
    assertEquals("dir/", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NotDirectory_ITre1() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("file", "file");
    entry.setName("file");
    assertEquals("file", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_RelativePath_ACGE2() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("./file", "file");
    entry.setName("./file");
    assertEquals("file", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_Null_YQmo3() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry(null, null);
    entry.setName(null);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_EmptyString_zIvt4() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("", "");
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_FAJv0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setSize(1024);
    assertEquals(1024, dumpArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_tvwW0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setNlink(5);
    assertEquals(5, dumpArchiveEntry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserId_tvIj0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setUserId(123);
    assertEquals(123, dumpArchiveEntry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupId_CodN0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setGroupId(123);
    assertEquals(123, dumpArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse1_Ypsm0() throws Exception {
    byte[] buffer = new byte[164 + 512];
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(DumpArchiveConstants.SEGMENT_TYPE.find(DumpArchiveUtil.convert32(buffer, 0)), entry.getHeaderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse2_axAJ1() throws Exception {
    byte[] buffer = new byte[164 + 512];
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(DumpArchiveUtil.convert32(buffer, 12), entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse4_RABh3() throws Exception {
    byte[] buffer = new byte[164 + 512];
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(1000L * DumpArchiveUtil.convert32(buffer, 48) + DumpArchiveUtil.convert32(buffer, 52) / 1000, entry.getAccessTime().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeleted_bbnE0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setDeleted(true);
    assertTrue(dumpArchiveEntry.isDeleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOriginalName_ytox0() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals("name", dumpArchiveEntry.getOriginalName());
}
}