/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLong_sUYo0() throws Exception {
    byte[] buf = new byte[8];
    long value = 1234567890L;
    ZipLong.putLong(value, buf, 0);
    long result = ByteUtils.fromLittleEndian(buf, 0, 4);
    assertEquals(value, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_SiJi0() throws Exception {
    ZipLong zipLong = new ZipLong(10);
    assertTrue(zipLong.equals(zipLong));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_SameValue_nADJ1() throws Exception {
    ZipLong zipLong1 = new ZipLong(10);
    ZipLong zipLong2 = new ZipLong(10);
    assertTrue(zipLong1.equals(zipLong2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_DifferentValue_BMtC2() throws Exception {
    ZipLong zipLong1 = new ZipLong(10);
    ZipLong zipLong2 = new ZipLong(20);
    assertFalse(zipLong1.equals(zipLong2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_byteArrayOffset_WLVc0() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3}, 0);
    assertEquals(0, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_intValue_tRXR1() throws Exception {
    ZipLong zipLong = new ZipLong(123);
    assertEquals(123, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_longValue_EClM2() throws Exception {
    ZipLong zipLong = new ZipLong(123L);
    assertEquals(123L, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_byteArray_Firg3() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3});
    assertEquals(0, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_byteArrayOffset_Zuhd0() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3}, 0);
    byte[] result = zipLong.getBytes();
    assertArrayEquals(new byte[]{1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_intValue_PRIG1() throws Exception {
    ZipLong zipLong = new ZipLong(123);
    byte[] result = zipLong.getBytes();
    assertArrayEquals(new byte[]{(byte) 123}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_longValue_lEzy2() throws Exception {
    ZipLong zipLong = new ZipLong(123L);
    byte[] result = zipLong.getBytes();
    assertArrayEquals(new byte[]{(byte) 123}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_byteArray_gSPc3() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3});
    byte[] result = zipLong.getBytes();
    assertArrayEquals(new byte[]{1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_pjqU0() throws Exception {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x12;
    bytes[1] = (byte) 0x34;
    bytes[2] = (byte) 0x56;
    bytes[3] = (byte) 0x78;
    bytes[4] = (byte) 0x90;
    bytes[5] = (byte) 0xAB;
    bytes[6] = (byte) 0xCD;
    bytes[7] = (byte) 0xEF;
    assertEquals(0x1234567890ABCDEFL, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_OkQF1() throws Exception {
    byte[] bytes = new byte[4];
    bytes[0] = (byte) 0x12;
    bytes[1] = (byte) 0x34;
    bytes[2] = (byte) 0x56;
    bytes[3] = (byte) 0x78;
    assertEquals(0x12345678L, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_HZWx2() throws Exception {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x00;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x00;
    assertEquals(0L, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue4_GwgT3() throws Exception {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x01;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x00;
    assertEquals(1L, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue6_sHhK5() throws Exception {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x00;
    bytes[1] = (byte) 0x00;
    bytes[2] = (byte) 0x00;
    bytes[3] = (byte) 0x00;
    bytes[4] = (byte) 0x00;
    bytes[5] = (byte) 0x00;
    bytes[6] = (byte) 0x00;
    bytes[7] = (byte) 0x01;
    assertEquals(1L, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_byteArrayOffset_DpIq0() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    assertEquals(0x01020304, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_intValue_wlLP1() throws Exception {
    ZipLong zipLong = new ZipLong(0x01020304);
    assertEquals(0x01020304, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_longValue_gvPJ2() throws Exception {
    ZipLong zipLong = new ZipLong(0x0102030405060708L);
    assertEquals(0x01020304, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_byteArray_TVsf3() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4});
    assertEquals(0x01020304, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArrayOffset_piln0() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3}, 0);
    assertEquals(0, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_intValue_flmb1() throws Exception {
    ZipLong zipLong = new ZipLong(123);
    assertEquals(123, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_longValue_keEj2() throws Exception {
    ZipLong zipLong = new ZipLong(123L);
    assertEquals(123, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArray_aJpd3() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3});
    assertEquals(0, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_nrfL0() throws Exception {
    byte[] result = ZipLong.getBytes(0L);
    assertArrayEquals(new byte[] {0, 0, 0, 0, 0, 0, 0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_bGTS1() throws Exception {
    byte[] result = ZipLong.getBytes(1L);
    assertArrayEquals(new byte[] {0, 0, 0, 0, 0, 0, 0, 1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes3_frBu2() throws Exception {
    byte[] result = ZipLong.getBytes(-1L);
    assertArrayEquals(new byte[] {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes4_gRnF3() throws Exception {
    byte[] result = ZipLong.getBytes(Long.MAX_VALUE);
    assertArrayEquals(new byte[] {(byte) 0x7F, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes5_FsEQ4() throws Exception {
    byte[] result = ZipLong.getBytes(Long.MIN_VALUE);
    assertArrayEquals(new byte[] {(byte) 0x80, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes6_uxkF5() throws Exception {
    byte[] result = ZipLong.getBytes(123456789L);
    assertArrayEquals(new byte[] {(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0x75, (byte) 0xBC, (byte) 0x9A}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes7_IOLP6() throws Exception {
    byte[] result = ZipLong.getBytes(987654321L);
    assertArrayEquals(new byte[] {(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0x3A, (byte) 0x17, (byte) 0x49}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes8_Trad7() throws Exception {
    byte[] result = ZipLong.getBytes(123456789012L);
    assertArrayEquals(new byte[] {(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0x1A, (byte) 0xCB, (byte) 0x59}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes9_cWna8() throws Exception {
    byte[] result = ZipLong.getBytes(987654321098L);
    assertArrayEquals(new byte[] {(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0x3E, (byte) 0x5C, (byte) 0x6E}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes10_UQrP9() throws Exception {
    byte[] result = ZipLong.getBytes(1234567890123L);
    assertArrayEquals(new byte[] {(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0x12, (byte) 0x34, (byte) 0x57}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLong_byteArray_int_betN0() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[10]);
    byte[] buf = new byte[10];
    int offset = 0;
    zipLong.putLong(buf, offset);
    assertEquals(buf, new byte[10]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_byteArrayOffset_Oyqq0() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[10], 5);
    Object clone = zipLong.clone();
    assertNotNull(clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_intValue_YUdh1() throws Exception {
    ZipLong zipLong = new ZipLong(10);
    Object clone = zipLong.clone();
    assertNotNull(clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_longValue_qfqM2() throws Exception {
    ZipLong zipLong = new ZipLong(10L);
    Object clone = zipLong.clone();
    assertNotNull(clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_byteArray_PpfK3() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[10]);
    Object clone = zipLong.clone();
    assertNotNull(clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_nRGE0() throws Exception {
    byte[] bytes = new byte[8];
    bytes[0] = 0x12;
    bytes[1] = 0x34;
    bytes[2] = 0x56;
    bytes[3] = 0x78;
    long result = ZipLong.getValue(bytes, 0);
    assertEquals(0x12345678L, result);
}
}