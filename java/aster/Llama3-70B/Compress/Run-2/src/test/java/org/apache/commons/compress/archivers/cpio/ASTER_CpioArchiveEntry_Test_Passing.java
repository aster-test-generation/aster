/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
    private short mode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_true_dgMq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1024);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_false_VCXa1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 0);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_rvzE0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setGID(123L);
    assertEquals(123L, cpioArchiveEntry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getAlignmentBoundary_1_fBmk0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_qIGV0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertNull(cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName2_WWbn1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals("name", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName3_JtXm2() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
    assertEquals("name", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName5_FXEm4() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name");
    assertEquals("name", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName7_RlnE6() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name", 10);
    assertEquals("name", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInode_iwfX0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setInode(12345L);
    assertEquals(12345L, cpioArchiveEntry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMaj_gbfH0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMaj_yAna0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setRemoteDeviceMaj(123L);
    assertEquals(123L, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_stIs0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_tkiJ1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    Object obj = new Object();
    assertFalse(entry.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_uHBI2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_OwbF3() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry("name");
    CpioArchiveEntry entry2 = new CpioArchiveEntry("name");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_lEJv4() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry("name1");
    CpioArchiveEntry entry2 = new CpioArchiveEntry("name2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullName_EPNZ5() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, null, 0);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, null, 0);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_false_BYCw1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 1024);
    entry.setMode((short) 0100644); // file mode
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMin_TjWl0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_HaCP0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    Date lastModifiedDate = cpioArchiveEntry.getLastModifiedDate();
    assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_njQR0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_tGLt0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat1_Ysef0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    short result = cpioArchiveEntry.getFormat();
    assertEquals((short) 1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_CJCi0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setChksum(123456789L);
    assertEquals(123456789L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode1_sHvi0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode2_IOcw1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(32768, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_eedv2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMin_OSdI0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullName_Flhi0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullCharset_Zviw1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_rvbB110() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(110, cpioArchiveEntry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_fFJn0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setName("newName");
    assertEquals("newName", cpioArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInode1_fHSk0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_eFGx0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 10L);
    int result = cpioArchiveEntry.hashCode();
    assertEquals(Objects.hash(cpioArchiveEntry.getName()), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount1_DvGR0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount2_rcLR1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals(2, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount3_Znpr2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 16);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount1_rYiH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount2_OKcB1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount4_BjAZ3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "entryName", 0);
    entry.setRemoteDeviceMin(5);
    assertEquals(0, entry.getHeaderPadCount(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_tDfh0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUID_clwb0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setUID(123L);
    assertEquals(123L, cpioArchiveEntry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_Kjid0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setMode(0x41ED);
    assertEquals(0x41ED, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID1_LRfH0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_pBvo0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1024L);
    assertEquals(1024L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinks_KHDq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setNumberOfLinks(5);
    assertEquals(5, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks1_xrIu0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks2_OrAF1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 10);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_GvwX0_mfUi0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setRemoteDeviceMin(10);
    assertEquals(10, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_true_SoxZ0_ijqX0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setMode((short) 0140000); // Assuming C_ISSOCK is 0140000
    assertTrue(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_false_aVPu1_JvbP0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setMode((short) 0100644); // octal value for a regular file
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDevice_UNPo0_DVvu0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setRemoteDeviceMin(123L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks3_DVvg2_aAXT0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    entry.setRemoteDeviceMin(5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_true_SHWu0_LYuZ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1024);
    entry.setMode((short) 0020000); // Assuming C_ISCHR is 0020000
    assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMin_YfVj0_NIxS0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setRemoteDeviceMin(10L);
}
}