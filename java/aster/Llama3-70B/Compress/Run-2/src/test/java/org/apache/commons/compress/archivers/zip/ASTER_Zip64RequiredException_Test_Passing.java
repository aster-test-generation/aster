/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Zip64RequiredException_Test_Passing {
Zip64RequiredException zip64requiredexception;
ZipArchiveEntry zipArchiveEntry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetEntryTooBigMessage() throws Exception{
        zipArchiveEntry = mock(ZipArchiveEntry.class);
        when(zipArchiveEntry.getName()).thenReturn("testEntry");
        zip64requiredexception = new Zip64RequiredException("");
        String result = Zip64RequiredException.getEntryTooBigMessage(zipArchiveEntry);
        assertEquals("testEntry's size exceeds the limit of 4GByte.", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryTooBigMessage_eBZR0() {
    ZipArchiveEntry ze = new ZipArchiveEntry("entryName");
    String result = Zip64RequiredException.getEntryTooBigMessage(ze);
    assertEquals("entryName's size exceeds the limit of 4GByte.", result);
}
}