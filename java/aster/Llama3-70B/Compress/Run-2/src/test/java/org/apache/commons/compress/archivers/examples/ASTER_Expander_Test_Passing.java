/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Expander_Test_Passing {
Expander expander;
SevenZFile archive;
Path targetDirectory;
@Mock
    private Path archivePath;
@Mock
    private Path targetPath;
@Mock
    private SeekableByteChannel channel;
@Mock
    private InputStream inputStream;
@Mock
    private FileChannel fileChannel;
@Mock
    private BufferedInputStream bufferedInputStream;
@Mock
    private CloseableConsumer closeableConsumer;
@Mock
    private ArchiveStreamFactory archiveStreamFactory;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_IgXJ0_fid1() throws Exception {
    Expander expander = new Expander();
    File targetDirectory = mock(File.class);
    Path targetPath = mock(Path.class);
    when(targetDirectory.toPath()).thenReturn(targetPath);
    InputStream archive = mock(InputStream.class);
    String format = "zip"; // Changed the format to a supported one
    CloseableConsumer closeableConsumer = mock(CloseableConsumer.class);
    expander.expand(format, archive, targetDirectory, closeableConsumer);
    verify(expander).expand(format, archive, targetPath, closeableConsumer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_H_szkX0_fid1() throws Exception {
    Expander expander = new Expander();
    InputStream archive = mock(InputStream.class);
    File targetDirectory = mock(File.class);
    Path targetPath = mock(Path.class);
    when(targetDirectory.toPath()).thenReturn(targetPath);
    CloseableConsumer closeableConsumer = mock(CloseableConsumer.class);
    expander.expand("zip", archive, targetDirectory, closeableConsumer);
    verify(expander).expand("zip", archive, targetPath, closeableConsumer);
}
}