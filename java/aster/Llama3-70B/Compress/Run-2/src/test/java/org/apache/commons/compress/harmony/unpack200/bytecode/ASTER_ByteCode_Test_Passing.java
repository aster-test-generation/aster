/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ByteCode_Test_Passing {
ByteCode bytecode;
CodeAttribute codeAttribute;
ByteCodeForm byteCodeForm;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargets_aPro0() {
    ByteCode byteCode = new ByteCode(1);
    int[] byteCodeTargets = new int[]{1, 2, 3};
    byteCode.setByteCodeTargets(byteCodeTargets);
    assertArrayEquals(byteCodeTargets, byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_HasOperand_ugdI1() {
    ByteCode byteCode = ByteCode.getByteCode(20);
    assertFalse(byteCode.getByteCodeForm().hasNoOperand());
    assertEquals(20, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewrite_Octu0() {
    ByteCode byteCode = new ByteCode(1);
    int[] rewrite = new int[] {1, 2, 3};
    byteCode.setRewrite(rewrite);
    assertArrayEquals(rewrite, byteCode.getRewrite());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_DWlQ0() {
    ByteCode byteCode = new ByteCode(1);
    int expected = System.identityHashCode(byteCode);
    int actual = byteCode.hashCode();
    assert actual == expected;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_WrSk0() {
    ByteCode byteCode = new ByteCode(1);
    assertNotNull(byteCode.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewrite_KRMZ0() {
    ByteCode byteCode = new ByteCode(1);
    int[] rewrite = byteCode.getRewrite();
    assert rewrite != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_YaJu0() {
    ByteCode bytecode = new ByteCode(1);
    assertTrue(bytecode.equals(bytecode));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_vpFX1() {
    ByteCode bytecode1 = new ByteCode(1);
    ByteCode bytecode2 = new ByteCode(2);
    assertFalse(bytecode1.equals(bytecode2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_guwC0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[]{});
    ClassFileEntry[] nested = byteCode.getNestedClassFileEntries();
    assertNotNull(nested);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeForm_zOjn0() {
    ByteCodeForm byteCodeForm = ByteCodeForm.get(1);
    ByteCode byteCode = new ByteCode(byteCodeForm.getOpcode());
    assertSame(byteCodeForm, byteCode.getByteCodeForm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_withoutNestedEntries_WFBM2() {
    ClassConstantPool pool = new ClassConstantPool();
    ByteCode bytecode = new ByteCode(1);
    bytecode.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_Klcf0() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][]{{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    assertArrayEquals(nestedPositions, byteCode.getNestedPositions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode_mYHi0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(1, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasMultipleByteCodes_VwZc0() {
    ByteCode byteCode = new ByteCode(1);
    assertFalse(byteCode.hasMultipleByteCodes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoOperand_UFlP0_1() {
    ByteCode byteCode = ByteCode.getByteCode(10);
    assertFalse(byteCode.getByteCodeForm().hasNoOperand());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoOperand_UFlP0_2() {
    ByteCode byteCode = ByteCode.getByteCode(10);
    assertEquals(10, byteCode.getOpcode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_HasOperand_ugdI1_1() {
    ByteCode byteCode = ByteCode.getByteCode(20);
    assertFalse(byteCode.getByteCodeForm().hasNoOperand());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_HasOperand_ugdI1_2() {
    ByteCode byteCode = ByteCode.getByteCode(20);
    assertEquals(20, byteCode.getOpcode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoArgByteCodes_nVZn2_2() {
    ByteCode byteCode1 = ByteCode.getByteCode(10);
    ByteCode byteCode2 = ByteCode.getByteCode(10);
    assertEquals(10, byteCode1.getOpcode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_oVcs1() {
    ByteCode bytecode = new ByteCode(1);
    assertEquals(1, bytecode.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions_MBBm0_fid1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    assertNull(byteCode.getNestedPositions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_eJJS0_fid1() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals("aconst_null", byteCode.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_ViYO0_fid1() {
    ByteCode byteCode = new ByteCode(1);
    assertNull(byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_invalidFirstOperandIndex_ibYI1_qrjX0() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = {1, 2, 3};
    try {
        byteCode.setByteCodeIndex(0);
        byteCode.setOperandBytes(operands);
        assert false;
    } catch (Error e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_invalidOperandLength_HxBj2_Owsv0() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = {1, 2, 3, 4};
    try {
        byteCode.setByteCodeIndex(0); // Assuming setByteCodeIndex is used to set the byte code index
        assert false;
    } catch (Error e) {
    }
}
}