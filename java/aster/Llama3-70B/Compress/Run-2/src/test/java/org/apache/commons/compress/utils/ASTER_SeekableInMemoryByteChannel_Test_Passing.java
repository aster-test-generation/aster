/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray1_UriL0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    byte[] result = channel.array();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray2_fhsE1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    byte[] result = channel.array();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray3_tczF2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    byte[] result = channel.array();
    assertArrayEquals(data, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate3_ldJm2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(channel, result);
    assertEquals(5, channel.size());
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen1_Bsxp0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen2_aVsZ1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionNegative_iyOe1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(-1);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionTooLarge_LQmS2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    try {
        channel.position(Integer.MAX_VALUE + 1);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition1_wdPr0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition2_mHOB1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition3_UsWH2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withAvailableBytes_SwQV0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(5);
    int bytesRead = channel.read(buf);
    assertEquals(5, bytesRead);
    assertEquals(5, buf.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withNoAvailableBytes_cUVn1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[0]);
    ByteBuffer buf = ByteBuffer.allocate(5);
    int bytesRead = channel.read(buf);
    assertEquals(-1, bytesRead);
    assertEquals(0, buf.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withMoreRequestedThanAvailable_wldy2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(5);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int bytesRead = channel.read(buf);
    assertEquals(5, bytesRead);
    assertEquals(5, buf.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_withDefaultConstructor_PSsU0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_withSizeConstructor_ezDw1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertEquals(10, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_withByteArrayConstructor_ZroO2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[5]);
    assertEquals(5, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate1_lkNF0_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(channel, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate1_lkNF0_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(5, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate1_lkNF0_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(0);
    assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate2_FXLB1_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    SeekableByteChannel result = channel.truncate(10);
    assertEquals(channel, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate2_FXLB1_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    SeekableByteChannel result = channel.truncate(0);
    assertEquals(0, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate2_FXLB1_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    SeekableByteChannel result = channel.truncate(10);
    assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate3_ldJm2_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(channel, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate3_ldJm2_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(5, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate3_ldJm2_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withAvailableBytes_SwQV0_1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(5);
    int bytesRead = channel.read(buf);
    assertEquals(5, bytesRead);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withAvailableBytes_SwQV0_2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(5);
    int bytesRead = channel.read(buf);
    assertEquals(5, buf.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withNoAvailableBytes_cUVn1_1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[0]);
    ByteBuffer buf = ByteBuffer.allocate(5);
    int bytesRead = channel.read(buf);
    assertEquals(-1, bytesRead);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withNoAvailableBytes_cUVn1_2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[0]);
    ByteBuffer buf = ByteBuffer.allocate(5);
    int bytesRead = channel.read(buf);
    assertEquals(0, buf.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withMoreRequestedThanAvailable_wldy2_1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(5);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int bytesRead = channel.read(buf);
    assertEquals(5, bytesRead);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withMoreRequestedThanAvailable_wldy2_2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(5);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int bytesRead = channel.read(buf);
    assertEquals(5, buf.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withEnoughSpace_VxBX0_JwxF0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.allocate(5);
    buffer.put(new byte[] {1, 2, 3, 4, 5});
    buffer.flip();
    try {
        assertEquals(5, channel.write(buffer));
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_needResize_LbWk1_ytEE0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(5);
    ByteBuffer buffer = ByteBuffer.allocate(10);
    buffer.put(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
    buffer.flip();
    try {
        assertEquals(10, channel.write(buffer));
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_channelClosed_fbyr2_WaVl0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.close(); // close the channel
    ByteBuffer buffer = ByteBuffer.allocate(5);
    buffer.put(new byte[] {1, 2, 3, 4, 5});
    buffer.flip();
    try {
        channel.write(buffer);
        fail("Expected ClosedChannelException");
    } catch (ClosedChannelException e) {
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withInitialData_gjbm3_BxWB0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[] {1, 2, 3, 4, 5});
    ByteBuffer buffer = ByteBuffer.allocate(5);
    buffer.put(new byte[] {6, 7, 8, 9, 10});
    buffer.flip();
    try {
        assertEquals(5, channel.write(buffer));
    } catch (IOException e) {
        fail("IOException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withSmallBuffer_BIkj0_GQOj0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[] {1, 2, 3});
    int written;
    try {
        written = channel.write(buffer);
        assertEquals(3, written);
    } catch (IOException e) {
        throw new AssertionError("IOException should not be thrown", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withLargeBuffer_FfLD1_FSoQ0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer buffer = ByteBuffer.wrap(new byte[1024]);
    try {
        int written = channel.write(buffer);
        assertEquals(1024, written);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withResize_Xlar2_IoPz0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[20]);
    int written = (int) channel.write(buffer); // Casting to int as write method returns long
    assertEquals(20, written);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_withMaxSize_kVBX3_TzHR0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer buffer = ByteBuffer.wrap(new byte[Integer.MAX_VALUE - 1]);
    try {
        int written = channel.write(buffer);
        assertEquals(Integer.MAX_VALUE - 1, written);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
}