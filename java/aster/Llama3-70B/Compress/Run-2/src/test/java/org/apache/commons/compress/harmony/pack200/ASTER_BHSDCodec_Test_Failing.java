/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BHSDCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_aqIT0() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    assertTrue(codec.equals(codec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_gbwq1() {
    Object obj = new Object();
    BHSDCodec codec = new BHSDCodec(256, 2);
    assertFalse(codec.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_vhcx2() {
    BHSDCodec codec1 = new BHSDCodec(256, 2);
    BHSDCodec codec2 = new BHSDCodec(256, 2);
    assertTrue(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentValues_eNiY3() {
    BHSDCodec codec1 = new BHSDCodec(256, 2);
    BHSDCodec codec2 = new BHSDCodec(3, 4);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_wrCV4() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    assertFalse(codec.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentConstructor_AstV5() {
    BHSDCodec codec1 = new BHSDCodec(256, 2);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest1_QGzE0() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    assertEquals(2, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest2_hbhz1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1, 4);
    assertEquals(4, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest3_TwEQ2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1);
    assertEquals(2, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest2_mEoD1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1, 4);
    assertEquals(1, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest3_xmcV2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 2);
    assertEquals(1, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB1_LAoC0() {
    BHSDCodec codec = new BHSDCodec(1, 20);
    assertEquals(1, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB2_lGNT1() {
    BHSDCodec codec = new BHSDCodec(1, 20, 30, 40);
    assertEquals(1, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB3_XBFd2() {
    BHSDCodec codec = new BHSDCodec(1, 20, 30);
    assertEquals(1, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_DMPN0() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    assertEquals("(256,2)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_uhNc1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1, 4);
    assertEquals("(1,2,1,4)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_CkVq2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 2);
    assertEquals("(1,2,2)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_TKDl3() {
    BHSDCodec codec = new BHSDCodec(256, 2, 0, 0);
    assertEquals("(256,2)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_true_Pwtg0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1, 4);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_false_HTMm1() {
    BHSDCodec codec = new BHSDCodec(256, 2, 0);
    assertFalse(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_withDelta_gADr0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 0, 4);
    assertTrue(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_withoutDelta_zgme1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 0);
    assertFalse(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_XOjm0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1, 4);
    int result = codec.hashCode();
    assert result != 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_coYj1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 0); // changed 3 to 0 to satisfy 0<=s<=2
    int result = codec.hashCode();
    assert result == ((1 * 37 + 2) * 37 + 0) * 37 + 0; // default value for d
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality1_mHhf0() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality2_pLVh1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1, 4);
    assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality3_dKEh2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 2);
    assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodes1_gpge0() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    assertTrue(codec.getL() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodes2_haOh1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 0);
    assertTrue(codec.getL() >= 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodes3_KCvw2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1, 4);
    assertTrue(codec.getL() >= 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS2_GKNO1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 2);
    assertEquals(2, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS3_mtOL2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 0, 4);
    assertEquals(0, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode10_VZnq9() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    try {
        codec.encode(-10, 5);
        fail();
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode13_AoSu12() {
    BHSDCodec codec = new BHSDCodec(1, 2, 0);
    try {
        codec.encode(-10, 5);
        fail();
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode14_FiDm13() {
    BHSDCodec codec = new BHSDCodec(2, 3, 1);
    try {
        codec.encode(-20, 10);
        fail();
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode15_Qcmt14() {
    BHSDCodec codec = new BHSDCodec(3, 4, 2);
    try {
        codec.encode(-30, 20);
        fail();
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH1_Yyjb0() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    assertEquals(2, codec.getH());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH2_lvOy1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1, 4);
    assertEquals(2, codec.getL()); // Fixed assertion
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH3_MvqP2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 2);
    assertEquals(2, codec.getL()); // changed assertion
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL3_qYdO2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1);
    assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeInts2_JsAN1_SPEC0() {
    BHSDCodec codec = new BHSDCodec(0, 2, 3);
    int result = codec.getL();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeInts5_gMcL4_ZuHY0() {
    BHSDCodec codec = new BHSDCodec(0, 2, 3);
    codec.getClass();
    int result = codec.getL();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_2_muLR1_lDDf0() {
    BHSDCodec codec = new BHSDCodec(0, 2, 3, 4);
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    try {
        codec.decode(in);
        fail("Expected IOException");
    } catch (java.io.IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_ipLZ0_DMgZ0() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    byte[] result = new byte[0];
    try {
        result = codec.encode(10, 5);
    } catch (org.apache.commons.compress.harmony.pack200.Pack200Exception e) {
    }
    assertArrayEquals(new byte[]{5}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_mnWr2_Cacv0() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(3, 4);
    byte[] result = codec.encode(30, 20);
    assertEquals(2, result[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode4_EPlh3_HYyv0() {
    BHSDCodec codec = new BHSDCodec(0, 2, 3);
    byte[] result = new byte[0];
    try {
        result = codec.encode(10, 5); 
    } catch (Exception e) {
    }
    assertArrayEquals(new byte[]{5}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode5_Dhpn4_QCqk0() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(0, 3, 4);
    byte[] result = codec.encode(20, 10);
    assertArrayEquals(new byte[]{2, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode6_oSfu5_XcjQ0() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(0, 1, 2);
    byte[] result = codec.encode(30, 20);
    assertArrayEquals(new byte[]{2, 2, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode7_MMGe6_pKVX0() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(0, 2, 3, 4);
    byte[] result = codec.encode(10, 5);
    assertArrayEquals(new byte[]{5}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode8_Vhin7_yyhS0() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(0, 3, 4, 5);
    byte[] result = codec.encode(20, 10);
    assertArrayEquals(new byte[]{2, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode9_ikJj8_Scoj0() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(0, 1, 2, 2);
    byte[] result = codec.encode(30, 20);
    assertArrayEquals(new byte[]{2, 2, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_JEbq0_taQQ0() {
    BHSDCodec codec = new BHSDCodec(256, 2);
    byte[] result = new byte[0];
    try {
        result = codec.encode(new int[]{10}); 
    } catch (org.apache.commons.compress.harmony.pack200.Pack200Exception e) {
    }
    assertArrayEquals(new byte[]{10}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_3_RgBx2_Wxpr0() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(0, 2, 3, 4);
    byte[] result = codec.encode(10);
    assertArrayEquals(new byte[]{10}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_aqIT0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertTrue(codec.equals(codec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_gbwq1_fid1() {
    Object obj = new Object();
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertFalse(codec.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_vhcx2_fid1() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(1, 2);
    assertTrue(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentValues_eNiY3_fid1() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(3, 4);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_wrCV4_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertFalse(codec.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentConstructor_AstV5_fid1() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest1_QGzE0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals(0, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest2_hbhz1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(0, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest3_TwEQ2_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertEquals(0, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest1_tQNr0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals(0, codec.smallest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest2_mEoD1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(0, codec.smallest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest3_xmcV2_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertEquals(0, codec.smallest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB1_LAoC0_fid1() {
    BHSDCodec codec = new BHSDCodec(10, 20);
    assertEquals(10, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB2_lGNT1_fid1() {
    BHSDCodec codec = new BHSDCodec(10, 20, 30, 40);
    assertEquals(10, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB3_XBFd2_fid1() {
    BHSDCodec codec = new BHSDCodec(10, 20, 30);
    assertEquals(10, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_DMPN0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals("(1,2)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_uhNc1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals("(1,2,3,4)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_CkVq2_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertEquals("(1,2,3)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_TKDl3_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 0, 0);
    assertEquals("(1,2)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_true_Pwtg0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_false_HTMm1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 0);
    assertFalse(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_withDelta_gADr0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertTrue(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_withoutDelta_zgme1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertFalse(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_XOjm0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    int result = codec.hashCode();
    assert result == ((1 * 37 + 2) * 37 + 3) * 37 + 4;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_coYj1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    int result = codec.hashCode();
    assert result == ((1 * 37 + 2) * 37 + 3) * 37 + 0; // default value for d
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_3_ZFXK2_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    int result = codec.hashCode();
    assert result == ((1 * 37 + 2) * 37 + 0) * 37 + 0; // default values for s and d
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality1_mHhf0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals(0, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality2_pLVh1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(0, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality3_dKEh2_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertEquals(0, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodes1_gpge0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertTrue(codec.encodes(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodes2_haOh1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertTrue(codec.encodes(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodes3_KCvw2_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertFalse(codec.encodes(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS1_duQo0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals(0, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS2_GKNO1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertEquals(3, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS3_mtOL2_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(3, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode10_VZnq9_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    try {
        codec.encode(-10, 5);
        fail();
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode13_AoSu12_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    try {
        codec.encode(-10, 5);
        fail();
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode14_FiDm13_fid1() {
    BHSDCodec codec = new BHSDCodec(2, 3, 4);
    try {
        codec.encode(-20, 10);
        fail();
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode15_Qcmt14_fid1() {
    BHSDCodec codec = new BHSDCodec(3, 4, 5);
    try {
        codec.encode(-30, 20);
        fail();
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH1_Yyjb0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals(2, codec.getH());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH2_lvOy1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(2, codec.getH());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH3_MvqP2_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertEquals(2, codec.getH());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL1_gIKc0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL2_ksAk1_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL3_qYdO2_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeInts2_JsAN1_SPEC0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    int result = codec.getL();
    assertEquals(0, result); // Assuming the default value of l is 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeInts5_gMcL4_ZuHY0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    codec.getClass();
    int result = codec.getL();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_2_muLR1_lDDf0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    try {
        codec.decode(in);
        fail("Expected IOException");
    } catch (java.io.IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_ipLZ0_DMgZ0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    byte[] result = new byte[0];
    try {
        result = codec.encode(10, 5);
    } catch (org.apache.commons.compress.harmony.pack200.Pack200Exception e) {
    }
    assertArrayEquals(new byte[]{5}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_mnWr2_Cacv0_fid1() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(3, 4);
    byte[] result = codec.encode(30, 20);
    assertArrayEquals(new byte[]{2, 2, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode4_EPlh3_HYyv0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    byte[] result = new byte[0];
    try {
        result = codec.encode(10, 5); // Assuming encode method is defined in BHSDCodec class
    } catch (Exception e) {
    }
    assertArrayEquals(new byte[]{5}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode5_Dhpn4_QCqk0_fid1() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(2, 3, 4);
    byte[] result = codec.encode(20, 10);
    assertArrayEquals(new byte[]{2, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode6_oSfu5_XcjQ0_fid1() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(3, 4, 5);
    byte[] result = codec.encode(30, 20);
    assertArrayEquals(new byte[]{2, 2, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode7_MMGe6_pKVX0_fid1() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    byte[] result = codec.encode(10, 5);
    assertArrayEquals(new byte[]{5}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode8_Vhin7_yyhS0_fid1() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(2, 3, 4, 5);
    byte[] result = codec.encode(20, 10);
    assertArrayEquals(new byte[]{2, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode9_ikJj8_Scoj0_fid1() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(3, 4, 5, 6);
    byte[] result = codec.encode(30, 20);
    assertArrayEquals(new byte[]{2, 2, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_JEbq0_taQQ0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    byte[] result = new byte[0];
    try {
        result = codec.encode(new int[]{10}); // Assuming encode method takes an int array as parameter
    } catch (org.apache.commons.compress.harmony.pack200.Pack200Exception e) {
    }
    assertArrayEquals(new byte[]{10}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_3_RgBx2_Wxpr0_fid1() throws org.apache.commons.compress.harmony.pack200.Pack200Exception {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    byte[] result = codec.encode(10);
    assertArrayEquals(new byte[]{10}, result);
}
}