/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZMethod_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_COPY_eoDx0() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.COPY;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_LZMA_zPZc1() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.LZMA;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_LZMA2_CzAI2() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.LZMA2;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_DEFLATE_MzmL3() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.DEFLATE;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_DEFLATE64_uSAq4() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.DEFLATE64;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BZIP2_rMFm5() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.BZIP2;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_AES256SHA256_TbTj6() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.AES256SHA256;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_X86_FILTER_RAzg7() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_X86_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_PPC_FILTER_TlUH8() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_PPC_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_IA64_FILTER_csTt9() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_IA64_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_ARM_FILTER_gUsl10() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_ARM_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_ARM_THUMB_FILTER_daIh11() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_ARM_THUMB_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_SPARC_FILTER_fAwa12() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.BCJ_SPARC_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_DELTA_FILTER_FPXj13() throws Exception {
    SevenZMethod sevenZMethod = SevenZMethod.DELTA_FILTER;
    byte[] result = sevenZMethod.getId();
    assertArrayEquals(sevenZMethod.getId(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testById_Copy_WdLm0() throws Exception {
    SevenZMethod method = SevenZMethod.byId(new byte[] {0x00});
    assertEquals(SevenZMethod.COPY, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testById_LZMA_oXLT1() throws Exception {
    SevenZMethod method = SevenZMethod.byId(new byte[] {0x03});
    assertEquals(SevenZMethod.LZMA, method);
}
}