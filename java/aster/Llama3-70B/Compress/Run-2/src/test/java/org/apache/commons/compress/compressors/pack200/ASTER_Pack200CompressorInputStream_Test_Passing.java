/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ShortSignature_PIGg0() {
    byte[] signature = new byte[3];
    assertFalse(Pack200CompressorInputStream.matches(signature, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_jofp0_lLtG0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // Create the file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, Collections.emptyMap());
    long count = 10;
    long result = pack200CompressorInputStream.skip(count);
    assertEquals(10, result);
    pack200CompressorInputStream.close(); // Close the stream
    file.delete(); // Delete the file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_KZUJ0_Vaml0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, Collections.emptyMap());
    byte[] b = new byte[10];
    int off = 0;
    int count = 5;
    int result = pack200CompressorInputStream.read(b, off, count);
    assertEquals(count, result);
    pack200CompressorInputStream.close(); // close the stream
    file.delete(); // delete the file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_File_xzPN3_fid2() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // Create the file before using it
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file);
    pack200CompressorInputStream.close(); // Close the stream after use
    file.delete(); // Delete the file after use
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_BeIU0_qDii0_fid2() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, Collections.emptyMap());
    int result = pack200CompressorInputStream.read();
    assertEquals(80, result);
    pack200CompressorInputStream.close(); // close the stream
    file.delete(); // delete the file
}
}