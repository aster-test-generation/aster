/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_magic1_pYzS2_fiTP0() {
    byte[] signature = new byte[] { 0, (byte) 0x60, 0, 0 };
    assertFalse(ArjArchiveInputStream.matches(signature, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_magic2_nQEJ3_fMQv0() {
    byte[] signature = new byte[] { (byte) 0x60, 0, 0, 0 };
    assertFalse(ArjArchiveInputStream.matches(signature, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_withNullCurrentLocalFileHeader_ruik1_FTQX0() throws IOException {
    try {
        ArjArchiveInputStream ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] b = new byte[10];
        ais.read(b, 0, 10);
        fail("Expected IllegalStateException");
    } catch (IllegalStateException e) {
    } catch (ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry1_PkAJ0_mBhH0_fid2() {
    try {
        ArjArchiveInputStream ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ArjArchiveEntry ae = ais.getNextEntry();
        assertNull(ae);
        ais.close(); 
    } catch (ArchiveException e) {
        // ArchiveException is expected
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveComment_cKBj0_XNqe0_fid2() throws ArchiveException, IOException {
    ArjArchiveInputStream arjArchiveInputStream = null;
    try {
        arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream("".getBytes())); // error fixed by adding try-catch block
    } catch (ArchiveException e) {
    }
    try {
    } finally {
        if (arjArchiveInputStream != null) {
            arjArchiveInputStream.close();
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_gPID0_EKWM0_fid2() throws IOException, ArchiveException {
    ArjArchiveInputStream arjArchiveInputStream = null;
    try {
        arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    } catch (ArchiveException e) {
    }
    if (arjArchiveInputStream != null) {
        arjArchiveInputStream.close();
    }
}
}