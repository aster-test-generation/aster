/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Failing {
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
private SevenZArchiveEntry sevenzarchiveentry;
    private boolean hasWindowsAttributes;
    private boolean hasLastModifiedDate;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_GCKi0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 1643723400000L;
    sevenZArchiveEntry.setLastModifiedDate(ntfsLastModifiedDate);
    assertTrue(sevenZArchiveEntry.getLastModifiedDate() != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_HcRi0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean actual = sevenZArchiveEntry.getHasWindowsAttributes();
    assertTrue(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_PIdM0() {
    long ntfsTime = 1323232323;
    long expected = ntfsTime * 10000 - 11644473600000L;
    long result = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime).getTime();
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_withNullTime_uZrb1_yIAy0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    assertNull(entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_withNullTime_TWmW1_hyfN0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(null);
    assertNull(entry.getCreationDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentMethods_pdHV0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Iterable<? extends SevenZMethodConfiguration> result = sevenZArchiveEntry.getContentMethods();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_GCKi0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 1643723400000L;
    sevenZArchiveEntry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), sevenZArchiveEntry.getLastModifiedDate().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_JxKf0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setAccessDate(1643723400000L);
    assertEquals(1643723400000L, sevenZArchiveEntry.getAccessDate().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_HcRi0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date expected = FileTimes.toDate(sevenZArchiveEntry.getCreationTime());
    Date actual = sevenZArchiveEntry.getCreationDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_PIdM0_fid2() {
    long ntfsTime = 1323232323;
    Date expected = new Date(ntfsTime * 10000 - 11644473600000L);
    Date result = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasLastModifiedDate_qoDv0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_ElMA0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date creationDate = new Date();
    sevenZArchiveEntry.setCreationDate(creationDate);
    assert sevenZArchiveEntry.getCreationTime() == FileTimes.toFileTime(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_vnQK0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.hasStream();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_akia0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasAccessDate();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_vPPH0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date date = new Date(1643723400000L); // 2022-02-01 12:30:00
    long expected = 132096744000000000L;
    long result = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDate_Httg0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasCreationDate();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_exTP0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date();
    sevenZArchiveEntry.setLastModifiedDate(lastModifiedDate);
    assert sevenZArchiveEntry.getLastModifiedTime() == FileTimes.toFileTime(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItem_upVN0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.isAntiItem();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_Pqqs0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasCrc();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_bRGS0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date expected = FileTimes.toDate(sevenZArchiveEntry.getAccessTime());
    Date actual = sevenZArchiveEntry.getAccessDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_nQKO0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCreationDate(1643723400000L);
    assertEquals(1643723400000L, sevenZArchiveEntry.getCreationDate().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNonNullTime_aXlT0_WjfP0_fid2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1000);
    entry.setAccessTime(time);
    assertTrue(entry.getHasWindowsAttributes()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withCurrentTime_WqEy2_aybp0_fid2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setAccessTime(time);
    assertTrue(entry.getHasWindowsAttributes()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetContentMethods_daWG0_2_fid2() throws Exception {
    SevenZArchiveEntry sevenzarchiveentry = new SevenZArchiveEntry();
    SevenZMethodConfiguration methodConfig1 = mock(SevenZMethodConfiguration.class);
    SevenZMethodConfiguration methodConfig2 = mock(SevenZMethodConfiguration.class);
    Iterable<SevenZMethodConfiguration> contentMethods = Arrays.asList(methodConfig1, methodConfig2);
    sevenzarchiveentry.setContentMethods(contentMethods);
    assertTrue(sevenzarchiveentry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_LXnr0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
    assertTrue(result);
}
}