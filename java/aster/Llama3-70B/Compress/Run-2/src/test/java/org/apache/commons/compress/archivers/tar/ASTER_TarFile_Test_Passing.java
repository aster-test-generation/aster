/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarFile_Test_Passing {
@Mock
    private SeekableByteChannel archive;
@InjectMocks
    private TarFile tarfile;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAtEOF_pAeF0() throws Exception {
    TarFile tarFile = new TarFile(new File("archive"), true);
    tarFile.setAtEOF(true);
    assertTrue(tarFile.isAtEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_WTHA0() throws Exception {
    TarFile tarFile = new TarFile(new File("archive"), true);
    TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 1);
    InputStream inputStream = tarFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF1_uBRj0() throws Exception {
    TarFile tarFile = new TarFile(Files.createTempFile("archive", ".tar"), true);
    boolean result = tarFile.isAtEOF();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries1_KRSc0() throws Exception {
    TarFile tarFile = new TarFile(Files.createTempFile("archive", ".tar"), true);
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries2_fOVF1() throws Exception {
    byte[] content = new byte[1024];
    TarFile tarFile = new TarFile(content, "UTF-8");
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries3_keqB2() throws Exception {
    byte[] content = new byte[1024];
    TarFile tarFile = new TarFile(content, true);
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries4_tDbr3() throws Exception {
    SeekableByteChannel content = Files.newByteChannel(Files.createTempFile("archive", ".tar"));
    TarFile tarFile = new TarFile(content);
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries5_Szos4() throws Exception {
    byte[] content = new byte[1024];
    TarFile tarFile = new TarFile(content);
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries6_shhT5() throws Exception {
    SeekableByteChannel archive = Files.newByteChannel(Files.createTempFile("archive", ".tar"));
    TarFile tarFile = new TarFile(archive, 1024, 1024, "UTF-8", true);
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries7_sBQh6() throws Exception {
    File archive = File.createTempFile("archive", ".tar");
    TarFile tarFile = new TarFile(archive, true);
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries8_niaf7() throws Exception {
    Path archivePath = Files.createTempFile("archive", ".tar");
    TarFile tarFile = new TarFile(archivePath, "UTF-8");
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries9_hBJp8() throws Exception {
    File archive = File.createTempFile("archive", ".tar");
    TarFile tarFile = new TarFile(archive, "UTF-8");
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries10_nwsS9() throws Exception {
    File archive = File.createTempFile("archive", ".tar");
    TarFile tarFile = new TarFile(archive);
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries11_fPRW10() throws Exception {
    Path archivePath = Files.createTempFile("archive", ".tar");
    TarFile tarFile = new TarFile(archivePath);
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertNotNull(entries);
}
}