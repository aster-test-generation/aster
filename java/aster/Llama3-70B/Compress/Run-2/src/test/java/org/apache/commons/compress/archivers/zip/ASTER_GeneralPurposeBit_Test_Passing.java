/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_IOgV0() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    int expected = 0; // default value
    int actual = generalPurposeBit.getSlidingDictionarySize();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_xcCZ0() throws Exception {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    assertTrue(bit.equals(bit));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_cxQQ1() throws Exception {
    Object obj = new Object();
    GeneralPurposeBit bit = new GeneralPurposeBit();
    assertFalse(bit.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_EUbd2() throws Exception {
    GeneralPurposeBit bit1 = new GeneralPurposeBit();
    GeneralPurposeBit bit2 = new GeneralPurposeBit();
    assertTrue(bit1.equals(bit2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse1_tFjE0_5() throws Exception {
    byte[] data = new byte[] { (byte) 0x00, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse1_tFjE0_6() throws Exception {
    byte[] data = new byte[] { (byte) 0x00, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse2_PYzI1_5() throws Exception {
    byte[] data = new byte[] { (byte) 0x08, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse2_PYzI1_6() throws Exception {
    byte[] data = new byte[] { (byte) 0x08, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse3_SFZI2_5() throws Exception {
    byte[] data = new byte[] { (byte) 0x00, (byte) 0x08 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse3_SFZI2_6() throws Exception {
    byte[] data = new byte[] { (byte) 0x00, (byte) 0x08 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse4_TeYo3_5() throws Exception {
    byte[] data = new byte[] { (byte) 0x40, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse4_TeYo3_6() throws Exception {
    byte[] data = new byte[] { (byte) 0x40, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse5_sHfY4_5() throws Exception {
    byte[] data = new byte[] { (byte) 0x01, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse5_sHfY4_6() throws Exception {
    byte[] data = new byte[] { (byte) 0x01, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse6_Dmfi5_5() throws Exception {
    byte[] data = new byte[] { (byte) 0x10, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(8192, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse6_Dmfi5_6() throws Exception {
    byte[] data = new byte[] { (byte) 0x10, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse7_SQVS6_5() throws Exception {
    byte[] data = new byte[] { (byte) 0x02, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse7_SQVS6_6() throws Exception {
    byte[] data = new byte[] { (byte) 0x02, (byte) 0x00 };
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertEquals(3, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_uWfa0() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] result = generalPurposeBit.encode();
    assertArrayEquals(new byte[] {0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_EtOr0() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    Object clone = generalPurposeBit.clone();
    assertNotNull(clone);
}
}