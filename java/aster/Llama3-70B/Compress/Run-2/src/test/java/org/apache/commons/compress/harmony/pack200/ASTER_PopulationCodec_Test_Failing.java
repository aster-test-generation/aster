/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PopulationCodec_Test_Failing {
private byte[] encode(PopulationCodec populationCodec, int[] favoured, int[] tokens, int[] unfavoured) throws Pack200Exception {
    return populationCodec.encode(favoured, tokens, unfavoured);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_rgBZ0_koVJ0() {
    BHSDCodec aCodec = new BHSDCodec(256, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = null;
    try {
        runCodec = new RunCodec(5, aCodec, bCodec);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    }
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    int[] favoured = {1, 2, 3};
    int[] tokens = {4, 5, 6};
    int[] unfavoured = {7, 8, 9};
    byte[] result = null;
    try {
        result = encode(populationCodec, favoured, tokens, unfavoured);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    }
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFavouredCodec_wCdb0_NMzp0() {
    BHSDCodec aCodec = new BHSDCodec(256, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec favouredCodec = null;
    RunCodec unfavouredCodec = null;
    try {
        favouredCodec = new RunCodec(5, aCodec, bCodec);
        unfavouredCodec = new RunCodec(6, bCodec, aCodec);
    } catch (Pack200Exception e) {
    }
    PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 7, unfavouredCodec);
    Codec codec = populationCodec.getFavouredCodec();
    assertSame(favouredCodec, codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_TDaR0_pvQn0() {
    BHSDCodec aCodec = new BHSDCodec(256, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    try {
        try {
            RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
            PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
            try {
                populationCodec.encode(7, 8);
                fail("Expected Pack200Exception");
            } catch (Pack200Exception e) {
                assertEquals("Population encoding does not work unless the number of elements are known", e.getMessage());
            }
        } catch (Pack200Exception e) {
        }
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFavoured_xboj0_wZDl0() {
    BHSDCodec aCodec = new BHSDCodec(256, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = null;
    try {
        runCodec = new RunCodec(5, aCodec, bCodec);
    } catch (Pack200Exception e) {
        assert false; // or some other appropriate action
    }
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    Codec favouredCodec = populationCodec.getFavouredCodec();
    assertNotNull(favouredCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_GFyh0_zaDp0() {
    BHSDCodec aCodec = new BHSDCodec(256, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = null;
    try {
        runCodec = new RunCodec(5, aCodec, bCodec);
    } catch (Pack200Exception e) {
        assert false; // or some other error handling
    }
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    try {
        byte[] result = populationCodec.encode(7);
        assert result != null;
    } catch (Pack200Exception e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_rgBZ0_koVJ0_fid3() {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = null;
    try {
        runCodec = new RunCodec(5, aCodec, bCodec);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    }
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    int[] favoured = {1, 2, 3};
    int[] tokens = {4, 5, 6};
    int[] unfavoured = {7, 8, 9};
    byte[] result = null;
    try {
        result = encode(populationCodec, favoured, tokens, unfavoured);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    }
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnfavouredCodec_wCdb0_NMzp0() {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec favouredCodec = null;
    RunCodec unfavouredCodec = null;
    try {
        favouredCodec = new RunCodec(5, aCodec, bCodec);
        unfavouredCodec = new RunCodec(6, bCodec, aCodec);
    } catch (Pack200Exception e) {
    }
    PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 7, unfavouredCodec);
    Codec codec = populationCodec.getFavouredCodec();
    assertSame(favouredCodec, codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_TDaR0_pvQn0_fid3() {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    try {
        try {
            RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
            PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
            try {
                populationCodec.encode(7, 8);
                fail("Expected Pack200Exception");
            } catch (Pack200Exception e) {
                assertEquals("Population encoding does not work unless the number of elements are known", e.getMessage());
            }
        } catch (Pack200Exception e) {
        }
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFavoured_xboj0_wZDl0_fid3() {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = null;
    try {
        runCodec = new RunCodec(5, aCodec, bCodec);
    } catch (Pack200Exception e) {
        assert false; // or some other appropriate action
    }
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    Codec favouredCodec = populationCodec.getFavouredCodec();
    assert favouredCodec != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_GFyh0_zaDp0_fid3() {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = null;
    try {
        runCodec = new RunCodec(5, aCodec, bCodec);
    } catch (Pack200Exception e) {
        assert false; // or some other error handling
    }
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    try {
        byte[] result = populationCodec.encode(7);
        assert null == result;
    } catch (Pack200Exception e) {
    }
}
}