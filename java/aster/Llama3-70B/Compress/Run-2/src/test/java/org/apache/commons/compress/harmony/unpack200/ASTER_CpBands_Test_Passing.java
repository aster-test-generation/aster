/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value2_uVeG1() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = false;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_Jxev0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpFieldClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_iybI0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_cLic0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpMethodDescriptor();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value4_ZkoF3_fid1() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    try {
        cpBands.cpUTF8Value(0);
        fail("Expected NullPointerException to be thrown");
    } catch (NullPointerException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_dHGN0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpIMethodClass();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorTypeInts_VGgV0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpDescriptorTypeInts();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLong_huUf0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] result = cpBands.getCpLong();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_dWHr0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertNull(cpSignature);
}
}