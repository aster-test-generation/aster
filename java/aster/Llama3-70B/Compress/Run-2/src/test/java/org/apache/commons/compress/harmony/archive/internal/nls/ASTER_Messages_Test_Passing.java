/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.archive.internal.nls;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Messages_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat1_oTBc0() {
    Object[] args = new Object[] { "arg1" };
    String result = Messages.format("Hello {0}", args);
    assertEquals("Hello arg1", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat2_WtJP1() {
    Object[] args = new Object[] { "arg1", "arg2" };
    String result = Messages.format("Hello {0} and {1}", args);
    assertEquals("Hello arg1 and arg2", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat3_yPfr2() {
    Object[] args = new Object[] { "arg1" };
    String result = Messages.format("Hello \\{0}", args);
    assertEquals("Hello {0}", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat4_kBkU3() {
    Object[] args = new Object[] { "arg1" };
    String result = Messages.format("Hello {1}", args);
    assertEquals("Hello <missing argument>", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat5_uzhN4() {
    Object[] args = new Object[] { null };
    String result = Messages.format("Hello {0}", args);
    assertEquals("Hello <null>", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat6_lXby5() {
    Object[] args = new Object[] { "arg1", "arg2" };
    String result = Messages.format("Hello {0} and {2}", args);
    assertEquals("Hello arg1 and <missing argument>", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat7_WrkK6() {
    Object[] args = new Object[] { "arg1" };
    String result = Messages.format("Hello {0} and {0}", args);
    assertEquals("Hello arg1 and arg1", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat8_hlGW7() {
    Object[] args = new Object[] { "arg1", "arg2" };
    String result = Messages.format("Hello {1} and {0}", args);
    assertEquals("Hello arg2 and arg1", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat9_lZFQ8() {
    Object[] args = new Object[] { "arg1" };
    String result = Messages.format("Hello {0} and {0} and {0}", args);
    assertEquals("Hello arg1 and arg1 and arg1", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat10_FoBD9() {
    Object[] args = new Object[] { "arg1", "arg2", "arg3" };
    String result = Messages.format("Hello {0} and {1} and {2}", args);
    assertEquals("Hello arg1 and arg2 and arg3", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_YCDX0_fid1() {
    String result = Messages.getString("Hello, {}", "World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_xfJb0_fid1() {
    String result = Messages.getString("Message: {}", 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_XyAR0_fid1() {
    String result = Messages.getString("Hello {} and {}", "John", "Doe");
    assertEquals("Hello {} and {}", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_iKao0_fid1() {
    String result = Messages.getString("Message: %c", 'a');
    assertEquals("Message: %c", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_raiP0_fid1() {
    Locale locale = new Locale("en", "US");
    ResourceBundle resourceBundle = Messages.setLocale(locale, "messages");
    assertNull(resourceBundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_BundleIsNull_gDnH0_BoJl0() {
    ResourceBundle bundle = Messages.setLocale(Locale.US, "messages");
    try {
        ResourceBundle.getBundle("messages", Locale.US).getString("message");
        fail("Expected MissingResourceException");
    } catch (MissingResourceException e) {
        // Expected
    }
}
}