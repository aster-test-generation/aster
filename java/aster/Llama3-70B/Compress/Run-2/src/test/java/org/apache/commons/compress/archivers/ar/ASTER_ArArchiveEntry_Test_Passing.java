/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_Swxl0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_lxCw1() {
    Object obj = new Object();
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertFalse(entry.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_EHoi2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_OGBD3() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("test", 20);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_WAjd4() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test1", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("test2", 20);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullName_RTKq5() {
    ArArchiveEntry entry1 = new ArArchiveEntry(null, 10);
    ArArchiveEntry entry2 = new ArArchiveEntry(null, 20);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_cnFd0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10);
    assertFalse(arArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate1_BTZb0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 100L);
    Date date = arArchiveEntry.getLastModifiedDate();
    assertNotNull(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate4_ngaM3() {
    File inputFile = new File("file");
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry(inputFile, "entryName");
    Date date = arArchiveEntry.getLastModifiedDate();
    assertNotNull(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_NbKm0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10, 1, 2, 3, 4);
    assertEquals(2, arArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_gSCe0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10);
    assertEquals(10, arArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_ihKJ0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10, 1, 2, 3, 4);
    assertEquals(1, arArchiveEntry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_ZYUl0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10L);
    int result = arArchiveEntry.hashCode();
    assertEquals(Objects.hash(arArchiveEntry.getName()), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_3_syTp2() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10L, 1, 2, 3, 4L);
    int result = arArchiveEntry.hashCode();
    assertEquals(Objects.hash(arArchiveEntry.getName()), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_4_HmTy3() {
    File inputFile = new File("file");
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry(inputFile, "entryName");
    int result = arArchiveEntry.hashCode();
    assertEquals(Objects.hash(arArchiveEntry.getName()), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_lpSf0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("testName", 10);
    assertEquals("testName", arArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName3_mdTg2() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("testName", 10, 1, 2, 3, 4);
    assertEquals("testName", arArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName4_NAFW3() {
    File inputFile = new File("testFile");
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry(inputFile, "testEntryName");
    assertEquals("testEntryName", arArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength1_oHoP0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10);
    assertEquals(10, arArchiveEntry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength3_Gxyb2() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10, 1, 1, 1, 1);
    assertEquals(10, arArchiveEntry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength4_aMEA3() {
    File inputFile = new File("file");
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry(inputFile, "entryName");
    assertEquals(0, arArchiveEntry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_WTlm0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 10L, 1, 1, 0644, 1000L);
    assertEquals(0644, arArchiveEntry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified_pQPN0() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 100, 1, 1, 1, 1000);
    assertEquals(1000, arArchiveEntry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate3_uZiv2_fid1() {
    ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 100L, 1, 1, 1, 1000L);
    long lastModified = arArchiveEntry.getLastModified();
    assertEquals(1000L, lastModified);
}
}