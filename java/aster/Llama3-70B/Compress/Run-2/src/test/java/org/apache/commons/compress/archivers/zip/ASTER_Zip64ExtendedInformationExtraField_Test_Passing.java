/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Zip64ExtendedInformationExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_lrPZ0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[8]);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[8]);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[8]);
    ZipLong diskStart = new ZipLong(new byte[8]);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipEightByteInteger result = zip64.getCompressedSize();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_withSize_ocFY0() {
    ZipEightByteInteger size = new ZipEightByteInteger(10);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(10);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(10);
    ZipLong diskStart = new ZipLong(10);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipEightByteInteger result = zip64.getCompressedSize();
    assertEquals(10, result.getValue().longValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_withoutSize_kXEO1() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField();
    ZipShort result = zip64.getLocalFileDataLength();
    assertEquals(0, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength1_qumb0() {
    ZipEightByteInteger size = new ZipEightByteInteger(10);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(20);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(30);
    ZipLong diskStart = new ZipLong(40);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipShort result = zip64.getCentralDirectoryLength();
    assertEquals(28, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength2_sQEY1() {
    ZipEightByteInteger size = new ZipEightByteInteger(10);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(20);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    ZipShort result = zip64.getCentralDirectoryLength();
    assertEquals(16, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength3_eIyO2() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField();
    ZipShort result = zip64.getCentralDirectoryLength();
    assertEquals(0, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_rjnw0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipLong diskStart = new ZipLong(10);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    assertSame(size, extraField.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskStartNumber_fPAk0() {
    ZipEightByteInteger size = new ZipEightByteInteger(1L);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(2L);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(3L);
    ZipLong diskStart = new ZipLong(4L);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    assertEquals(diskStart.getValue(), zip64.getDiskStartNumber().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRelativeHeaderOffset_SXeK0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    assertSame(relativeHeaderOffset, extraField.getRelativeHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData1_dNHP0() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField();
    byte[] result = zip64.getLocalFileDataData();
    assertArrayEquals(ByteUtils.EMPTY_BYTE_ARRAY, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData2_TeDZ1() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] result = zip64.getLocalFileDataData();
    assertEquals(16, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData5_QFMF4() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize, null, diskStart);
    byte[] result = zip64.getLocalFileDataData();
    assertEquals(16, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRelativeHeaderOffset_uQyV0() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger rho = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    zip64.setRelativeHeaderOffset(rho);
    assertSame(rho, zip64.getRelativeHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_VKEY0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] {9, 10, 11, 12, 13, 14, 15, 16});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[] {17, 18, 19, 20, 21, 22, 23, 24});
    ZipLong diskStart = new ZipLong(1234567890);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    assertSame(compressedSize, extraField.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_InsufficientBuffer_RXWH1_PBJf0() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField();
    byte[] buffer = new byte[4];
    try {
        zip64.parseFromLocalFileData(buffer, 0, 4);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("Zip64 extended information must contain both size values in the local file header.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_WfnS0_WkCx0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger size = new ZipEightByteInteger(10);
    zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, new ZipEightByteInteger(10), new ZipEightByteInteger(10), new ZipLong(10));
    assertSame(size, zip64ExtendedInformationExtraField.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_MhjU0_XMWs0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger compressedSize = new ZipEightByteInteger((long) 10);
    zip64ExtendedInformationExtraField.setCompressedSize(compressedSize);
    assertSame(compressedSize, zip64ExtendedInformationExtraField.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskStartNumber_WNOa0_dSxo0() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField();
    ZipLong ds = new ZipLong(10);
    zip64.setDiskStartNumber(ds);
    assertSame(ds, zip64.getDiskStartNumber());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData3_oLgd2_pgnx0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, null);
    try {
        zip64.getLocalFileDataData();
        fail();
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData4_NTpn3_MjKd0() {
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(null, compressedSize, null, null);
    try {
        zip64.getLocalFileDataData();
        fail();
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData2_uOBG1_Ezhs0() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField();
    byte[] buffer = new byte[28];
    try {
        zip64.parseFromCentralDirectoryData(buffer, 0, 28);
        assertEquals(new ZipEightByteInteger(buffer, 0).getValue(), zip64.getSize().getValue());
        assertEquals(new ZipEightByteInteger(buffer, 4).getValue(), zip64.getCompressedSize().getValue());
        assertEquals(new ZipEightByteInteger(buffer, 8).getValue(), zip64.getRelativeHeaderOffset().getValue());
    } catch (ZipException e) {
        fail("ZipException should not be thrown");
    }
}
}