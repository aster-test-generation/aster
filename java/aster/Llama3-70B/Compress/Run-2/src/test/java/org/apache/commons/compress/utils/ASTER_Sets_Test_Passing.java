/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_EmptyArray_SEkq0() {
    HashSet<String> set = Sets.newHashSet();
    assertTrue(set.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_SingleElementArray_PbAv1_1() {
    HashSet<String> set = Sets.newHashSet("Hello");
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_SingleElementArray_PbAv1_2() {
    HashSet<String> set = Sets.newHashSet("Hello");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleElementsArray_UfNJ2_1() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleElementsArray_UfNJ2_2() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleElementsArray_UfNJ2_3() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_MultipleElementsArray_UfNJ2_4() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("Java"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DuplicateElementsArray_BGRa3_1() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DuplicateElementsArray_BGRa3_2() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DuplicateElementsArray_BGRa3_3() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_NullElementArray_heEP4_1() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_NullElementArray_heEP4_2() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_NullElementArray_heEP4_3() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_NullElementArray_heEP4_4() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_SameObjectArray_ortL5_1() {
    String obj = "Hello";
    HashSet<String> set = Sets.newHashSet(obj, obj, obj);
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_SameObjectArray_ortL5_2() {
    String obj = "Hello";
    HashSet<String> set = Sets.newHashSet(obj, obj, obj);
    assertTrue(set.contains(obj));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DifferentObjectsArray_yFGr6_2() {
    String obj1 = "Hello";
    String obj2 = new String("Hello");
    HashSet<String> set = Sets.newHashSet(obj1, obj2);
    assertTrue(set.contains(obj1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_DifferentObjectsArray_yFGr6_3() {
    String obj1 = "Hello";
    String obj2 = new String("Hello");
    HashSet<String> set = Sets.newHashSet(obj1, obj2);
    assertTrue(set.contains(obj2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_ArrayWithNullElement_NfQG7_1() {
    String[] array = new String[] {"Hello", null, "World"};
    HashSet<String> set = Sets.newHashSet(array);
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_ArrayWithNullElement_NfQG7_2() {
    String[] array = new String[] {"Hello", null, "World"};
    HashSet<String> set = Sets.newHashSet(array);
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_ArrayWithNullElement_NfQG7_3() {
    String[] array = new String[] {"Hello", null, "World"};
    HashSet<String> set = Sets.newHashSet(array);
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_ArrayWithNullElement_NfQG7_4() {
    String[] array = new String[] {"Hello", null, "World"};
    HashSet<String> set = Sets.newHashSet(array);
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_ArrayWithDuplicateElements_pAXD8_1() {
    String[] array = new String[] {"Hello", "Hello", "World"};
    HashSet<String> set = Sets.newHashSet(array);
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_ArrayWithDuplicateElements_pAXD8_2() {
    String[] array = new String[] {"Hello", "Hello", "World"};
    HashSet<String> set = Sets.newHashSet(array);
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_ArrayWithDuplicateElements_pAXD8_3() {
    String[] array = new String[] {"Hello", "Hello", "World"};
    HashSet<String> set = Sets.newHashSet(array);
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_ArrayWithSameObject_aMWh9_1() {
    String obj = "Hello";
    String[] array = new String[] {obj, obj, obj};
    HashSet<String> set = Sets.newHashSet(array);
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_ArrayWithSameObject_aMWh9_2() {
    String obj = "Hello";
    String[] array = new String[] {obj, obj, obj};
    HashSet<String> set = Sets.newHashSet(array);
    assertTrue(set.contains(obj));}
}