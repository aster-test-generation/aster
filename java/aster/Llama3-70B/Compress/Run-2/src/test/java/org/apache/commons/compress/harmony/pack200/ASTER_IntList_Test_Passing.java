/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_withCapacity_BDcs0() throws Exception {
    IntList intList = new IntList(5);
    assertTrue(intList.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_withoutCapacity_ahJN1() throws Exception {
    IntList intList = new IntList();
    assertTrue(intList.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_tEPj0() throws Exception {
    IntList list1 = new IntList(10);
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list1.addAll(list2);
    int[] array = list1.toArray();
    assertArrayEquals(new int[]{1, 2, 3}, array);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_EmptyList_ujBj1() throws Exception {
    IntList list1 = new IntList();
    IntList list2 = new IntList();
    list1.addAll(list2);
    assertTrue(list1.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValidIndex_wIPt0() throws Exception {
    IntList list = new IntList(10);
    assertEquals(5, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInvalidIndex_fFQf1() throws Exception {
    IntList list = new IntList(10);
    try {
        list.get(10);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNegativeIndex_XVhu2() throws Exception {
    IntList list = new IntList(10);
    try {
        list.get(-1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_cFTg0() throws Exception {
    IntList intList = new IntList(10);
    int[] result = intList.toArray();
    assertArrayEquals(new int[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_1_PwzM0_1() throws Exception {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(20, list.remove(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_1_PwzM0_2() throws Exception {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_2_xcBM1_1() throws Exception {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    assertEquals(10, list.remove(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_2_xcBM1_2() throws Exception {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_3_ZYCq2_1() throws Exception {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(30, list.remove(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_4_xSlY3_1() throws Exception {
    IntList list = new IntList();
    list.add(10);
    assertEquals(10, list.remove(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_4_xSlY3_2() throws Exception {
    IntList list = new IntList();
    list.add(10);
    assertEquals(0, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_5_caeR4_1() throws Exception {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    list.add(40);
    assertEquals(20, list.remove(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_5_caeR4_2() throws Exception {
    IntList list = new IntList(10);
    list.add(10);
    list.add(20);
    list.add(30);
    list.add(40);
    assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_6_qkHC5_1() throws Exception {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(10, list.remove(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_6_qkHC5_2() throws Exception {
    IntList list = new IntList();
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_withCapacity_AQwT0() throws Exception {
    IntList intList = new IntList(10);
    assertTrue(intList.add(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_withCapacity_gyXf2() throws Exception {
    IntList intList = new IntList(10);
    boolean result = intList.add(5);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_withoutCapacity_KCUD3() throws Exception {
    IntList intList = new IntList();
    boolean result = intList.add(10);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrementValidIndex_lkBb0() throws Exception {
    IntList list = new IntList(10);
    list.increment(0);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd1_OpNs0() throws Exception {
    IntList list = new IntList(10);
    list.add(0, 10);
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd2_SQqy1() throws Exception {
    IntList list = new IntList();
    list.add(0, 10);
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd3_wWCk2() throws Exception {
    IntList list = new IntList(10);
    list.add(1, 20);
    assertEquals(20, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd4_QwaG3() throws Exception {
    IntList list = new IntList();
    list.add(1, 20);
    assertEquals(20, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd5_kgDy4() throws Exception {
    IntList list = new IntList(10);
    list.add(2, 30);
    assertEquals(30, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd6_djZo5() throws Exception {
    IntList list = new IntList();
    list.add(2, 30);
    assertEquals(30, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd7_nxTu6() throws Exception {
    IntList list = new IntList(10);
    list.add(0, 40);
    assertEquals(40, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd8_HquP7() throws Exception {
    IntList list = new IntList();
    list.add(0, 40);
    assertEquals(40, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd9_djRz8() throws Exception {
    IntList list = new IntList(10);
    list.add(3, 50);
    assertEquals(50, list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd10_BHdh9() throws Exception {
    IntList list = new IntList();
    list.add(3, 50);
    assertEquals(50, list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd11_dlLV10() throws Exception {
    IntList list = new IntList(10);
    list.add(4, 60);
    assertEquals(60, list.get(4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd12_Qtya11() throws Exception {
    IntList list = new IntList();
    list.add(4, 60);
    assertEquals(60, list.get(4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd5_rMlx4() throws Exception {
    IntList list = new IntList(10);
    list.add(5, 30);
    assertEquals(30, list.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd6_ZBfD5() throws Exception {
    IntList list = new IntList();
    list.add(5, 30);
    assertEquals(30, list.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd9_xtnv8() throws Exception {
    IntList list = new IntList(10);
    list.add(10, 50);
    assertEquals(50, list.get(10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd10_AyjM9() throws Exception {
    IntList list = new IntList();
    list.add(10, 50);
    assertEquals(50, list.get(10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd11_zXNr10() throws Exception {
    IntList list = new IntList(10);
    list.add(5, 60);
    assertEquals(60, list.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd12_pkDY11() throws Exception {
    IntList list = new IntList();
    try {
        list.add(-1, 70);
        fail();
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_UeLr0() throws Exception {
    IntList intList = new IntList(10);
    assertEquals(0, intList.size());
}
}