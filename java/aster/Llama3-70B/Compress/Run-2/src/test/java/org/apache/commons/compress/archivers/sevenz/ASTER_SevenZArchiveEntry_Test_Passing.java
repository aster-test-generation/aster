/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
private SevenZArchiveEntry sevenzarchiveentry;
    private boolean hasWindowsAttributes;
    private boolean hasLastModifiedDate;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentMethods_pdHV0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Iterable<? extends SevenZMethodConfiguration> result = sevenZArchiveEntry.getContentMethods();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCreationDate_Vqzr0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasCreationDate(true);
    assertTrue(sevenZArchiveEntry.getHasCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValue_UiZu0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long crcValue = sevenZArchiveEntry.getCrcValue();
    assertEquals(0, crcValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_JxKf0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setAccessDate(1643723400000L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDate_IQFH0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasAccessDate(true);
    assertTrue(sevenZArchiveEntry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc1_krkb0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(0);
    assertEquals(0, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc2_IGeO1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(1);
    assertEquals(1, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc3_cFbI2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(-1);
    assertEquals(-1, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc4_Oeue3() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc5_sbyt4() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc6_LHHS5() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(10);
    assertEquals(10, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc7_gAKD6() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(100);
    assertEquals(100, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc8_mHFo7() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(1000);
    assertEquals(1000, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc9_mdAh8() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(10000);
    assertEquals(10000, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc10_OYCA9() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(100000);
    assertEquals(100000, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasLastModifiedDate_qoDv0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_YWrN0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_JLKS1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_yDoa2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_oVQi3() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setName("name1");
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setName("name2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasStream_lqtp4() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasStream(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasStream(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentIsDirectory_KZpe5() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setDirectory(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setDirectory(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentIsAntiItem_vCOT6() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setAntiItem(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setAntiItem(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasCreationDate_YFte7() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasCreationDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasCreationDate(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentCreationDate_Orcw8() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setCreationDate(new Date());
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setCreationDate(new Date(0));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasLastModifiedDate_PvZh9() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasLastModifiedDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasLastModifiedDate(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLastModifiedDate_qdxq10() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setLastModifiedDate(new Date());
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setLastModifiedDate(new Date(0));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasAccessDate_xfLV11() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasAccessDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasAccessDate(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentAccessDate_djFG12() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setAccessDate(new Date());
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setAccessDate(new Date(0));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasWindowsAttributes_ljYi13() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasWindowsAttributes(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasWindowsAttributes(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentWindowsAttributes_awna14() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setWindowsAttributes(1);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setWindowsAttributes(2);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHasCrc_ZaJm15() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasCrc(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasCrc(false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItem_rlXX0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setAntiItem(true);
    assertTrue(sevenZArchiveEntry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_ElMA0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date creationDate = new Date();
    sevenZArchiveEntry.setCreationDate(creationDate);
    assertTrue(FileTimes.toFileTime(creationDate).equals(sevenZArchiveEntry.getCreationTime()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_ElMA0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean hasWindowsAttributes = sevenZArchiveEntry.getHasWindowsAttributes();
    assertTrue(hasWindowsAttributes == false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_vnQK0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.hasStream();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_akia0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasAccessDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_Ykdn0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setName("testName");
    assertEquals("testName", sevenZArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_BBIf0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    sevenZArchiveEntry.setCrcValue(crc);
    assertEquals(crc, sevenZArchiveEntry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_JESV0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long size = 100L;
    sevenZArchiveEntry.setCompressedSize(size);
    assertEquals(size, sevenZArchiveEntry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_TOyM0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setSize(1024);
    assertEquals(1024, sevenZArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NameIsNull_UEFK0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setName(null);
    assertEquals(0, sevenZArchiveEntry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NameIsNotNull_ccmq1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setName("testName");
    assertEquals("testName".hashCode(), sevenZArchiveEntry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_vPPH0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date date = new Date(1643723400000L); // 2022-02-01 12:30:00
    long expected =132881970000000000L;
    long result = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_zYyv0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    int result = sevenZArchiveEntry.getCrc();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDate_Httg0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasCreationDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_AJEI0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    sevenZArchiveEntry.setCompressedCrcValue(crc);
    assertEquals(crc, sevenZArchiveEntry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_exTP0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date();
    sevenZArchiveEntry.setLastModifiedDate(lastModifiedDate);
    assertTrue(sevenZArchiveEntry.getLastModifiedTime().equals(FileTimes.toFileTime(lastModifiedDate)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean hasWindowsAttributes = sevenZArchiveEntry.getHasWindowsAttributes();
    assertFalse(hasWindowsAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItem_upVN0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.isAntiItem();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_Pqqs0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasCrc();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDirectory_KGFZ0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setDirectory(true);
    assertTrue(sevenZArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_bRGS0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean actual = sevenZArchiveEntry.getHasWindowsAttributes();
    assertFalse(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_Ogwx0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    long expected = 0; // default value of size
    long actual = sevenZArchiveEntry.getSize();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_nQKO0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCreationDate(1643723400000L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrc_DXTl0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCrc(123);
    assertEquals(123, sevenZArchiveEntry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributes_OMvC0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    int expected = 0; // or any other expected value
    int actual = sevenZArchiveEntry.getWindowsAttributes();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributes_CQdL0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setWindowsAttributes(123);
    assertEquals(123, sevenZArchiveEntry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_withDefaultConstructor_defaultValue_kMVB0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_withNullTime_uZrb1_yIAy0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    assertFalse(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_withNullTime_uZrb1_VJmL1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    try {
        entry.getLastModifiedDate();
        fail("Expected UnsupportedOperationException to be thrown");
    } catch (UnsupportedOperationException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_ygtP0_acGh0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setLastModifiedDate(new Date(1643723400000L));
    Date expected = new Date(1643723400000L);
    Date result = sevenZArchiveEntry.getLastModifiedDate();
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_withNullTime_TWmW1_hyfN0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(null);
    assertFalse(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withNonNullTime_aXlT0_WjfP0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1000);
    entry.setAccessTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_withCurrentTime_WqEy2_aybp0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setAccessTime(time);
    assertFalse(entry.getHasWindowsAttributes()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_yxhC0_IOiX0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(true);
    assertTrue(sevenZArchiveEntry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_sAik0_JuiP0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean hasWindowsAttributes = sevenZArchiveEntry.getHasWindowsAttributes();
    assertEquals(false, hasWindowsAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetContentMethods_daWG0_1() throws Exception {
    SevenZArchiveEntry sevenzarchiveentry = new SevenZArchiveEntry();
    SevenZMethodConfiguration methodConfig1 = mock(SevenZMethodConfiguration.class);
    SevenZMethodConfiguration methodConfig2 = mock(SevenZMethodConfiguration.class);
    Iterable<SevenZMethodConfiguration> contentMethods = Arrays.asList(methodConfig1, methodConfig2);
    sevenzarchiveentry.setContentMethods(contentMethods);
    assertEquals(contentMethods, sevenzarchiveentry.getContentMethods());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetContentMethods_daWG0_2() throws Exception {
    SevenZArchiveEntry sevenzarchiveentry = new SevenZArchiveEntry();
    SevenZMethodConfiguration methodConfig1 = mock(SevenZMethodConfiguration.class);
    SevenZMethodConfiguration methodConfig2 = mock(SevenZMethodConfiguration.class);
    Iterable<SevenZMethodConfiguration> contentMethods = Arrays.asList(methodConfig1, methodConfig2);
    sevenzarchiveentry.setContentMethods(contentMethods);
    assertFalse(sevenzarchiveentry.getHasWindowsAttributes());}
}