/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_1_ROVi0() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_2_PRge1() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 4};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_3_WZjZ2() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_4_LNTn3() {
    byte[] buffer1 = new byte[] {1, 2, 0};
    byte[] buffer2 = new byte[] {1, 2, 0};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_5_IoCm4() {
    byte[] buffer1 = new byte[] {1, 2, 0};
    byte[] buffer2 = new byte[] {1, 2};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_6_bgeX5() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 0};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_7_HbPd6() {
    byte[] buffer1 = new byte[] {1, 2};
    byte[] buffer2 = new byte[] {1, 2, 0};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 2, buffer2, 0, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_8_vXHY7() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4};
    byte[] buffer2 = new byte[] {1, 2, 3, 4};
    assertTrue(ArchiveUtils.isEqual(buffer1, 1, 3, buffer2, 1, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_9_IpZR8() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4};
    byte[] buffer2 = new byte[] {1, 2, 3, 5};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, 3, buffer2, 1, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_10_NQAh9() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, 3, buffer2, 1, 2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_ieXt0() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualDifferentLength_hgkL1() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2};
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualDifferentContent_LJxn2() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 4};
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_rgQc0() {
    String inputString = "Hello, World!";
    byte[] expectedBytes = inputString.getBytes(java.nio.charset.StandardCharsets.US_ASCII);
    byte[] actualBytes = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expectedBytes, actualBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_ControlCharacters_aMBh0() {
    String input = "\u0000\u0001\u0002";
    String expected = "???";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_NonASCIICharacters_vFUu2() {
    String input = "";
    String expected = "";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_LongString_Ndwu3() {
    String input = "abcdefghijklmnopqrstuvwxyz";
    String expected = "abcdefghijklmnop...";
    String actual = ArchiveUtils.sanitize(input);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_NullString_JphR5() {
    String input = null;
    // ArchiveUtils.sanitize method does not exist, so we cannot call it
    // Instead, we can test the isEqualWithNull method
    byte[] buffer1 = null;
    byte[] buffer2 = null;
    boolean actual = ArchiveUtils.isEqualWithNull(buffer1, 0, 0, buffer2, 0, 0);
    assertTrue(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_NormalString_DSEc6() {
    String input = "Hello World";
    String expected = "Hello World";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothArraysAreEqual_sbxR0() {
    byte[] buffer1 = {1, 2, 3, 4, 5};
    byte[] buffer2 = {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_rnZB0() {
    String expected = "Hello";
    byte[] buffer = expected.getBytes(java.nio.charset.StandardCharsets.US_ASCII);
    int offset = 0;
    int length = buffer.length;
    assertTrue(ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisArrayZero_withNonZeroElement_ziDF0() {
    byte[] a = {0, 0, 1, 0};
    int size = 4;
    assertFalse(ArchiveUtils.isArrayZero(a, size));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisArrayZero_withAllZeroElements_nAkZ1() {
    byte[] a = {0, 0, 0, 0};
    int size = 4;
    assertTrue(ArchiveUtils.isArrayZero(a, size));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisArrayZero_withEmptyArray_AnKa2() {
    byte[] a = {};
    int size = 0;
    assertTrue(ArchiveUtils.isArrayZero(a, size));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_TMLx0() {
    byte[] inputBytes = "Hello World".getBytes();
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("Hello World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_nrlc0() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_nilN0() {
    String expected = "Hello";
    byte[] buffer = expected.getBytes();
    assertTrue(ArchiveUtils.matchAsciiBuffer(expected, buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_uITJ0() {
    byte[] inputBytes = "Hello, World!".getBytes();
    String result = ArchiveUtils.toAsciiString(inputBytes, 0, inputBytes.length);
    assertEquals("Hello, World!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_RWxc0() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertTrue(ArchiveUtils.isEqualWithNull(buffer1, 0, 3, buffer2, 0, 3));
}
}