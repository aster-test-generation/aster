/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X7875_NewUnix_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_SeEM0() throws Exception {
    X7875_NewUnix xf = new X7875_NewUnix();
    assert xf.equals(xf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_pwSW1() throws Exception {
    Object o = new Object();
    X7875_NewUnix xf = new X7875_NewUnix();
    assert !xf.equals(o);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_2_Wkfa1() throws Exception {
    X7875_NewUnix x = new X7875_NewUnix();
    byte[] data = new byte[] {1, 2};
    int offset = 0;
    int length = 2;
    try {
        x.parseFromLocalFileData(data, offset, length);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X7875_NewUnix length is too short, only 2 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_3_LuCA2() throws Exception {
    X7875_NewUnix x = new X7875_NewUnix();
    byte[] data = new byte[] {1, 5, 1, 1, 1, 1, 1};
    int offset = 0;
    int length = 7;
    try {
        x.parseFromLocalFileData(data, offset, length);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X7875_NewUnix invalid: uidSize 5 doesn't fit into 7 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_KDkX0() throws Exception {
    X7875_NewUnix unix = new X7875_NewUnix();
    byte[] result = unix.getCentralDirectoryData();
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_risE0_1() throws Exception {
    X7875_NewUnix x = new X7875_NewUnix();
    ZipShort headerId = x.getHeaderId();
    assertNotNull(headerId);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_risE0_2() throws Exception {
    X7875_NewUnix x = new X7875_NewUnix();
    ZipShort headerId = x.getHeaderId();
    assertEquals(1234, headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_HsJx0() throws Exception {
    X7875_NewUnix unix = new X7875_NewUnix();
    long gid = unix.getGID();
    assertEquals(0, gid);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_Gcyi0() throws Exception {
    X7875_NewUnix unix = new X7875_NewUnix();
    long uid = unix.getUID();
    assertEquals(0, uid);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_CEne0() throws Exception {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        x7875_NewUnix.parseFromCentralDirectoryData(buffer, offset, length);
    } catch (ZipException e) {
        Assertions.fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthNull_GAhc0() throws Exception {
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthEmpty_IXhN1_1() throws Exception {
    byte[] array = new byte[0];
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthEmpty_IXhN1_2() throws Exception {
    byte[] array = new byte[0];
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    assertEquals((byte) 0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthLeadingZeroes_KHfl2_1() throws Exception {
    byte[] array = new byte[] { 0, 0, 1, 2, 3 };
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    assertEquals(4, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthLeadingZeroes_KHfl2_2() throws Exception {
    byte[] array = new byte[] { 0, 0, 1, 2, 3 };
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    assertArrayEquals(new byte[] { 1, 2, 3, 0 }, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthNoLeadingZeroes_OFAj3_1() throws Exception {
    byte[] array = new byte[] { 1, 2, 3, 0 };
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    assertEquals(4, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLengthNoLeadingZeroes_OFAj3_2() throws Exception {
    byte[] array = new byte[] { 1, 2, 3, 0 };
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    assertArrayEquals(array, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_clone_cijD0() throws CloneNotSupportedException {
    X7875_NewUnix obj = new X7875_NewUnix();
    Object clonedObj = obj.clone();
    assertNotSame(obj, clonedObj);
}
}