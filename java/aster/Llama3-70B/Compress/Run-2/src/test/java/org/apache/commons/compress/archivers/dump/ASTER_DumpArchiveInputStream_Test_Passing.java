/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DumpArchiveInputStream_Test_Passing {
private long entrySize;
private Map<Integer, Dirent> names = new HashMap<>();
private boolean hasHitEOF;
private long filepos;
private Queue<DumpArchiveEntry> queue;
private DumpArchiveEntry active;
private byte[] readBuf = new byte[DumpArchiveConstants.TP_SIZE];
private int readIdx;
private long entryOffset;
private int recordOffset;
DumpArchiveInputStream dumparchiveinputstream;
InputStream is;
DumpArchiveEntry entry;
byte[] headerBytes;
InputStream inputStream;
DumpArchiveEntry dumpArchiveEntry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_lengthLessThan32_BcxU0() {
    byte[] buffer = new byte[10];
    assertFalse(DumpArchiveInputStream.matches(buffer, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_NFS_MAGICDoesNotMatch_aYuk3() {
    byte[] buffer = new byte[32];
    buffer[24] = 0;
    buffer[25] = 0;
    buffer[26] = 0;
    buffer[27] = 0;
    assertFalse(DumpArchiveInputStream.matches(buffer, 32));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextDumpEntry() throws Exception {
        inputStream = Mockito.mock(InputStream.class);
        dumpArchiveEntry = Mockito.mock(DumpArchiveEntry.class);
        dumparchiveinputstream = new DumpArchiveInputStream(inputStream);
        Mockito.when(dumparchiveinputstream.getNextEntry()).thenReturn(dumpArchiveEntry);
        DumpArchiveEntry result = dumparchiveinputstream.getNextDumpEntry();
        assertEquals(dumpArchiveEntry, result);
        Mockito.verify(dumparchiveinputstream).getNextEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_NFS_MAGICMatches_wbgy2_fid1() {
    byte[] buffer = new byte[32];
    buffer[24] = (byte) (DumpArchiveConstants.NFS_MAGIC >> 24);
    buffer[25] = (byte) (DumpArchiveConstants.NFS_MAGIC >> 16);
    buffer[26] = (byte) (DumpArchiveConstants.NFS_MAGIC >> 8);
    buffer[27] = (byte) DumpArchiveConstants.NFS_MAGIC;
    assertFalse(DumpArchiveInputStream.matches(buffer, 32));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_nCur0() throws Exception {
    InputStream is = Mockito.mock(InputStream.class);
    DumpArchiveInputStream dumparchiveinputstream = new DumpArchiveInputStream(is);
    Mockito.doNothing().when(is).close();
    dumparchiveinputstream.close();
    Mockito.verify(is, Mockito.times(1)).close();
}
}