/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveInputStream_Test_Passing {
private TarArchiveEntry currEntry;
private TarArchiveInputStream tararchiveinputstream;
private InputStream inputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Posix_ISvt0() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = ' ';
    signature[TarConstants.VERSION_OFFSET + 1] = '0';
    assert TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_GnuSpace_QWLO1() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = ' ';
    signature[TarConstants.VERSION_OFFSET + 1] = ' ';
    assert TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_GnuZero_hcPf2() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = '0';
    signature[TarConstants.VERSION_OFFSET + 1] = '0';
    assert TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Ant_qrHe3() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'A';
    signature[TarConstants.MAGIC_OFFSET + 1] = 'N';
    signature[TarConstants.MAGIC_OFFSET + 2] = 'T';
    signature[TarConstants.MAGIC_OFFSET + 3] = '0';
    signature[TarConstants.MAGIC_OFFSET + 4] = '0';
    signature[TarConstants.VERSION_OFFSET] = 'A';
    signature[TarConstants.VERSION_OFFSET + 1] = 'N';
    signature[TarConstants.VERSION_OFFSET + 2] = 'T';
    assert TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidMagic_oAwS4() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'i';
    signature[TarConstants.MAGIC_OFFSET + 1] = 'n';
    signature[TarConstants.MAGIC_OFFSET + 2] = 'v';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'l';
    signature[TarConstants.VERSION_OFFSET] = ' ';
    signature[TarConstants.VERSION_OFFSET + 1] = '0';
    assert !TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidVersion_wWXY5() {
    byte[] signature = new byte[512];
    signature[TarConstants.MAGIC_OFFSET] = 'u';
    signature[TarConstants.MAGIC_OFFSET + 1] = 's';
    signature[TarConstants.MAGIC_OFFSET + 2] = 't';
    signature[TarConstants.MAGIC_OFFSET + 3] = 'a';
    signature[TarConstants.MAGIC_OFFSET + 4] = 'r';
    signature[TarConstants.VERSION_OFFSET] = 'i';
    signature[TarConstants.VERSION_OFFSET + 1] = 'n';
    assert !TarArchiveInputStream.matches(signature, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_TooShort_mfQE6() {
    byte[] signature = new byte[10];
    assert !TarArchiveInputStream.matches(signature, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_Null_Fglj7() {
    assert !TarArchiveInputStream.matches(null, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_LengthZero_UkSm8() {
    byte[] signature = new byte[512];
    assert !TarArchiveInputStream.matches(signature, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_NonSparse_yfql0_GQkN0() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
    TarArchiveEntry currEntry = new TarArchiveEntry("test");
    tarArchiveInputStream.setCurrentEntry(currEntry);
    assertEquals(50, tarArchiveInputStream.skip(50));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_Sparse_Hzyn1_zrVQ0() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
    TarArchiveEntry currEntry = new TarArchiveEntry("test");
    currEntry.setSize(100);
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    sparseHeaders.add(new TarArchiveStructSparse(0, 50));
    currEntry.setSparseHeaders(sparseHeaders);
    tarArchiveInputStream.setCurrentEntry(currEntry);
    assertEquals(50, tarArchiveInputStream.skip(50));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupported1_zdwq0_ZqUt0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream);
    assertFalse(tarArchiveInputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupported4_LHFH3_pOsP0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream, 1024, 512);
    assertFalse(tarArchiveInputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMark1_aTdv0_cUfz0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream);
    tarArchiveInputStream.mark(10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMark5_Kxit4_Ynxj0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream, 1024, 512, "UTF-8");
    tarArchiveInputStream.mark(10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset1_BZEH0_Yltf0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream);
    tarArchiveInputStream.reset();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset5_CvMw4_sjNh0() throws IOException {
    FileInputStream fileInputStream = new FileInputStream("test.txt");
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(fileInputStream, 1024, 512);
    tarArchiveInputStream.reset();
    assertTrue(true);
}
}