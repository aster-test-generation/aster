/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ByteCode_Test_Passing {
@Mock
    private CodeAttribute codeAttribute;
@Mock
    private ByteCodeForm byteCodeForm;
private ByteCode bytecode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes_validInput_mwja0() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperand2Bytes(0x1234, 0);
    assertEquals(0x12, byteCode.getByteCodeForm().getRewrite()[0]);
    assertEquals(0x34, byteCode.getByteCodeForm().getRewrite()[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_validOperands_xzkd0() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = {1, 2, 3};
    byteCode.setOperandBytes(operands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_noRewrite_boee1() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = {1, 2, 3};
    try {
        byteCode.setOperandBytes(operands);
        assert false;
    } catch (Error e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_invalidOperandsLength_ShsS2() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = {1, 2};
    try {
        byteCode.setOperandBytes(operands);
        assert false;
    } catch (Error e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_nestedByteCode_VTXg3() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] operands = {1, 2, 3};
    byteCode.setOperandBytes(operands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPool_gqsw0() {
    ByteCode byteCode = new ByteCode(1);
    assertTrue(byteCode.nestedMustStartClassPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargets_PvuW0() {
    ByteCode byteCode = new ByteCode(1);
    int[] byteCodeTargets = new int[]{1, 2, 3};
    byteCode.setByteCodeTargets(byteCodeTargets);
    assertArrayEquals(byteCodeTargets, byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoArg_ixpb0() {
    ByteCode byteCode = ByteCode.getByteCode(0x10);
    assertNotNull(byteCode);
    assertEquals(0x10, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_HasOperand_gAGM1() {
    ByteCode byteCode = ByteCode.getByteCode(0x11);
    assertNotNull(byteCode);
    assertEquals(0x11, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoArg_Cached_aBzS2() {
    ByteCode byteCode1 = ByteCode.getByteCode(0x10);
    ByteCode byteCode2 = ByteCode.getByteCode(0x10);
    assertSame(byteCode1, byteCode2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewrite_HjGm0() {
    ByteCode byteCode = new ByteCode(1);
    int[] rewrite = new int[1];
    byteCode.setRewrite(rewrite);
    assertArrayEquals(rewrite, byteCode.getRewrite());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByte_firstOperandIndexLessThanOne_eGrY1() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperandByte(10, 1);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite " + byteCode + " that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByte_positionGreaterThanByteCodeFormLength_wXUd2() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperandByte(10, 10);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite " + byteCode + " with an byte at position 10 but this won't fit in the rewrite array", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_GNCo0() {
    ByteCode byteCode = new ByteCode(1);
    int expected = System.identityHashCode(byteCode);
    int actual = byteCode.hashCode();
    assert actual == expected;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_qFiK0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals("byteCodeFormName", byteCode.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApplyByteCodeTargetFixup() throws Exception {
        bytecode = new ByteCode(0);
        when(bytecode.getByteCodeForm()).thenReturn(byteCodeForm);
        bytecode.applyByteCodeTargetFixup(codeAttribute);
        verify(byteCodeForm).fixUpByteCodeTargets(bytecode, codeAttribute);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_HhcJ0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(0, byteCode.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewrite_oSKL0() {
    ByteCode byteCode = new ByteCode(1);
    int[] rewrite = byteCode.getRewrite();
    assertNotNull(rewrite);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_Mhqj0() {
    ByteCode bytecode = new ByteCode(1);
    assertTrue(bytecode.equals(bytecode));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_GLfU1() {
    ByteCode bytecode1 = new ByteCode(1);
    ByteCode bytecode2 = new ByteCode(2);
    assertFalse(bytecode1.equals(bytecode2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_OCCZ0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] result = byteCode.getNestedPosition(0);
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions_Yxjq0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[][] result = byteCode.getNestedPositions();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_mzgf0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals("some_opcode_name", byteCode.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_GhyG0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[]{});
    ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_hkNG0() {
    ByteCode byteCode = new ByteCode(1);
    int[] targets = byteCode.getByteCodeTargets();
    assertNotNull(targets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeForm_nbNf0() {
    ByteCodeForm byteCodeForm = ByteCodeForm.get(1);
    ByteCode byteCode = new ByteCode(byteCodeForm.getOpcode());
    assertSame(byteCodeForm, byteCode.getByteCodeForm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_withNoNestedEntries_qeCN1() {
    ClassConstantPool pool = new ClassConstantPool();
    ByteCode bytecode = new ByteCode(1);
    bytecode.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_PIYr0() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][]{{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    assertArrayEquals(nestedPositions, byteCode.getNestedPositions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeIndex_GLvk0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(0, byteCode.getByteCodeIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode_xBcT0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(1, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasMultipleByteCodes_xHpq0() {
    ByteCode byteCode = new ByteCode(1);
    assertFalse(byteCode.hasMultipleByteCodes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes_validInput_mwja0_1() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperand2Bytes(0x1234, 0);
    assertEquals(0x12, byteCode.getByteCodeForm().getRewrite()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes_validInput_mwja0_2() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperand2Bytes(0x1234, 0);
    assertEquals(0x34, byteCode.getByteCodeForm().getRewrite()[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoArg_ixpb0_1() {
    ByteCode byteCode = ByteCode.getByteCode(0x10);
    assertNotNull(byteCode);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoArg_ixpb0_2() {
    ByteCode byteCode = ByteCode.getByteCode(0x10);
    assertEquals(0x10, byteCode.getOpcode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_HasOperand_gAGM1_1() {
    ByteCode byteCode = ByteCode.getByteCode(0x11);
    assertNotNull(byteCode);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_HasOperand_gAGM1_2() {
    ByteCode byteCode = ByteCode.getByteCode(0x11);
    assertEquals(0x11, byteCode.getOpcode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWrite_Nested_NjHs1_oCHs0() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(1, nested);
    byteCode.setByteCodeIndex(0); 
    byteCode.doWrite(dos);
    assertArrayEquals(new byte[]{1}, bos.toByteArray());
}
}