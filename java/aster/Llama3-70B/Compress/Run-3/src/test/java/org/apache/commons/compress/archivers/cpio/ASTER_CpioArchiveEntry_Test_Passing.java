/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_true_kDuh0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "name", 1024);
    assertTrue(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_false_RNam1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "name", 0);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_KquX0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 01006064, "name", 10);
    long chksum = cpioArchiveEntry.getChksum();
    assertEquals(0, chksum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_nEHD0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 100L);
    long time = cpioArchiveEntry.getTime();
    assertEquals(100L, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_Ychw0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setGID(123L);
    assertEquals(123L, cpioArchiveEntry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getAlignmentBoundary_1_fJeQ0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_LCWb0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName2_biiT1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals("name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName3_Efld2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals("name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName6_MDeR5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
    assertEquals("name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName7_wibN6() {
    File inputFile = new File("file");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals("entryName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName8_MIvi7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 10);
    assertEquals("name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInode_WtRP0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setInode(12345L);
    assertEquals(12345L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMaj_uLfH0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_tugT0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_myCg1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    Object obj = new Object();
    assertFalse(entry.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_rnBE2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_pUwK3() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry("name");
    CpioArchiveEntry entry2 = new CpioArchiveEntry("name");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_Dshj4() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry("name1");
    CpioArchiveEntry entry2 = new CpioArchiveEntry("name2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullName_AyAj5() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, null, 0);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, null, 0);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_false_evBt1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 0);
    entry.setMode(0);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMin_RFde0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_UOHL0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    Date lastModifiedDate = cpioArchiveEntry.getLastModifiedDate();
    assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_jrDo0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_OTyh0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat1_NefE0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    short result = cpioArchiveEntry.getFormat();
    assertEquals((short) 1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_xuXp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setChksum(123456789L);
    assertEquals(123456789L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode1_HpcH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertEquals(33188, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode2_KdXx1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(33188, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_CiLd2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_mVSF0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMin_EYqw0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullName_vOQV0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullCharset_fvWa1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(3, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_dlrr2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals(3, entry.getHeaderPadCount(Charset.defaultCharset()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMin_eCUL0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setDeviceMin(10L);
    assertEquals(10L, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize1_bJBh0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_CjBR0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setName("newName");
    assertEquals("newName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_true_nTYq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "test", 1024);
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_false_FuXj1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "test", 0);
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInode1_rqXo0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_EOpS0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 10L);
    int result = cpioArchiveEntry.hashCode();
    assertEquals(Objects.hash(cpioArchiveEntry.getName()), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount1_KKSi0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount2_VSsl1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals(2, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount3_PfOt2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 16);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount1_jHuM0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount2_OGpN1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals(3, entry.getHeaderPadCount(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount3_cqdx2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(0, entry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount4_XLfi3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("inputFile"), "entryName");
    assertEquals(3, entry.getHeaderPadCount(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_DhUa0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMaj_erTF0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setDeviceMaj(10L);
    assertEquals(10L, cpioArchiveEntry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUID_rdOL0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setUID(123L);
    assertEquals(123L, cpioArchiveEntry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_sAkn0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setMode(0x41ED);
    assertEquals(0x41ED, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_xZFn0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_zpOy0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    assertEquals(100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinks_VLWS0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setNumberOfLinks(5L);
    assertEquals(5L, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks1_YQdC0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks2_SJlU1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 10);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_true_gEdH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "test", 1024);
    assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_false_YjGP1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12345, "test", 0);
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName5_MsrY4_qgRR0() throws IOException {
    java.nio.file.Path inputPath = java.nio.file.Paths.get("path");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputPath, "entryName");
    assertEquals("entryName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_true_hpXT0_lxfb0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setRemoteDeviceMin(1); // Assuming this is the correct remote device min for a network file
    assertTrue(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_true_gzWj0_OqPm0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 0);
    entry.setMode((short) 040755); 
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_true_jUYR0_TtVe0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    entry.setMode((short) 0120577); // Assuming C_ISLNK is 0120577
    assertTrue(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_false_WHwM1_AZyH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    entry.setMode((short) 0100644); 
    assertFalse(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_true_cDXQ0_BUDo0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1024);
    entry.setMode((short) 0x1000); // C_ISFIFO value in hexadecimal
    assertTrue(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_false_KmLv1_HfFL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1024);
    entry.setMode((short) 0100000); // C_ISREG value in octal
    assertFalse(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testValidSize_KTum0_jwTj0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "name", 1024);
    entry.setRemoteDeviceMin(1024);
    assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_true_hPkm0_DmVc0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1024);
    entry.setMode((short) 0120000); // assuming C_ISSOCK is 0120000 in octal
    assertTrue(entry.isSocket());
}
}