/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpDoubleValue_DuplicateIndex_TXAO1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPDouble result1 = cpBands.cpDoubleValue(0);
    CPDouble result2 = cpBands.cpDoubleValue(0);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_KQHy0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpDescriptorNameInts();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_kjCo0() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger result = cpBands.cpIntegerValue(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_ReturnsSameObject_WhenCalledTwiceWithSameIndex_sydE1() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger result1 = cpBands.cpIntegerValue(1);
    CPInteger result2 = cpBands.cpIntegerValue(1);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_WgPN0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpFieldClass();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_SFaw0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpClass();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_lWCS0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result = cpBands.cpUTF8Value("testString");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpClassValue_1_csRJ0() {
    CpBands cpBands = new CpBands(new Segment());
    CPClass result = cpBands.cpClassValue("testString");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_aRmn0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpMethodDescriptor();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFieldValue_rQlu0() {
    CpBands cpBands = new CpBands(new Segment());
    CPFieldRef cpFieldRef = cpBands.cpFieldValue(0);
    assertNotNull(cpFieldRef);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value1_ZJRf0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = true;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value2_akVK1() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = false;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value3_MLib2() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "";
    boolean searchForIndex = true;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value4_ImZS3() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    boolean searchForIndex = true;
    CPUTF8 result = cpBands.cpUTF8Value(string, searchForIndex);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_yhWj0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] result = cpBands.getCpIMethodClass();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_gkkq0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpInt();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_wDAw0() {
    CpBands cpBands = new CpBands(new Segment());
    CPLong result = cpBands.cpLongValue(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_ReturnsSameObject_WhenCalledTwiceWithSameIndex_OTmJ1() {
    CpBands cpBands = new CpBands(new Segment());
    CPLong result1 = cpBands.cpLongValue(1);
    CPLong result2 = cpBands.cpLongValue(1);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_scIL0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPClass result = cpBands.cpClassValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValue_WzBF0() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat = cpBands.cpFloatValue(0);
    assertNotNull(cpFloat);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValue_ReturnsSameObject_WhenCalledTwiceWithSameIndex_sGIT1() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat1 = cpBands.cpFloatValue(0);
    CPFloat cpFloat2 = cpBands.cpFloatValue(0);
    assertSame(cpFloat1, cpFloat2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue1_bwld0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPUTF8 result = cpBands.cpSignatureValue(index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue2_CkUi1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 1;
    CPUTF8 result = cpBands.cpSignatureValue(index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue3_grZM2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 2;
    CPUTF8 result = cpBands.cpSignatureValue(index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorTypeInts_YIgu0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] result = cpBands.getCpDescriptorTypeInts();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLong_VnfA0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] expected = new long[0];
    long[] actual = cpBands.getCpLong();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpMethodValue_ARZu0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPMethodRef result = cpBands.cpMethodValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIMethodValue_ooVf0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPInterfaceMethodRef result = cpBands.cpIMethodValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_Xsdw0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertNotNull(cpSignature);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_KHHv0() {
    CpBands cpBands = new CpBands(new Segment());
    CPString result = cpBands.cpStringValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_ReturnsSameObject_WhenCalledTwice_dloW1() {
    CpBands cpBands = new CpBands(new Segment());
    CPString result1 = cpBands.cpStringValue(0);
    CPString result2 = cpBands.cpStringValue(0);
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpNameAndTypeValue_hFxn0() {
    CpBands cpBands = new CpBands(new Segment());
    CPNameAndType result = cpBands.cpNameAndTypeValue(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpNameAndTypeValue_1_ropk0() {
    CpBands cpBands = new CpBands(new Segment());
    String descriptor = "descriptor";
    CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
    assertNotNull(cpNameAndType);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value1_TVOW0_1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value1_TVOW0_2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertEquals(0, cputf8.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value2_yWBv1_1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(1);
    assertNotNull(cputf8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value2_yWBv1_2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(1);
    assertEquals(1, cputf8.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value3_LNjn2_1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf81 = cpBands.cpUTF8Value(2);
    CPUTF8 cputf82 = cpBands.cpUTF8Value(2);
    assertNotNull(cputf81);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value3_LNjn2_2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf81 = cpBands.cpUTF8Value(2);
    CPUTF8 cputf82 = cpBands.cpUTF8Value(2);
    assertNotNull(cputf82);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value3_LNjn2_3() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf81 = cpBands.cpUTF8Value(2);
    CPUTF8 cputf82 = cpBands.cpUTF8Value(2);
    assertEquals(cputf81.hashCode(), cputf82.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpNameAndTypeValue_nullDescriptor_okhn1_EtuL0() {
    CpBands cpBands = new CpBands(new Segment());
    String[] cpUTF8 = new String[1]; // Initialize and populate cpUTF8
    cpUTF8[0] = "someString";
    CPUTF8 result = cpBands.cpUTF8Value(0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpNameAndTypeValue_3_mXIa2_BJiN0() {
    CpBands cpBands = new CpBands(new Segment());
    String descriptor = "descriptor";
    cpBands.cpUTF8Value(1); // Assuming cpUTF8Value method is used to populate the map
    CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
    assertNotNull(cpNameAndType);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value1_TVOW0() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8);
    assertEquals(0, cputf8.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value2_yWBv1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(1);
    assertNotNull(cputf8);
    assertEquals(1, cputf8.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value3_LNjn2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf81 = cpBands.cpUTF8Value(2);
    CPUTF8 cputf82 = cpBands.cpUTF8Value(2);
    assertNotNull(cputf81);
    assertNotNull(cputf82);
    assertEquals(cputf81.hashCode(), cputf82.hashCode());
}
}