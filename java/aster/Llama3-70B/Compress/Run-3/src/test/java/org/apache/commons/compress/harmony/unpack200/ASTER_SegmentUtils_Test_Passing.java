/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountInvokeInterfaceArgs_ruDv0() {
    assertEquals(1, SegmentUtils.countInvokeInterfaceArgs("()V"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_fZKe0() {
    assertEquals(1, SegmentUtils.countArgs("()"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_EmptyArray_UUoN0() {
    long[] flags = new long[0];
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_NoBit16_idtf1() {
    long[] flags = new long[] {1, 2, 4, 8};
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_HasBit16_tyxt2() {
    long[] flags = new long[] {1 << 16, 2, 4, 8, 1 << 16};
    assertEquals(2, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_EmptyArray_Jtct0() {
    int[] flags = new int[0];
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_NoBit16_Pryi1() {
    int[] flags = new int[] {1, 2, 4, 8};
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_HasBit16_YbnF2() {
    int[] flags = new int[] {65536, 2, 4, 8, 131072};
    assertEquals(2, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_EmptyArray_GjMz0() {
    long[][] flags = new long[][]{};
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_NoBit16_ubNu1() {
    long[][] flags = new long[][]{{1, 2, 4}, {8, 16, 32}};
    assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_SingleBit16_NNYk2() {
    long[][] flags = new long[][]{{1, 2, 65536}, {8, 16, 32}};
    assertEquals(1, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_MultipleBit16_PSeQ3() {
    long[][] flags = new long[][]{{1, 2, 65536}, {8, 16, 65536}, {65536, 65536, 32}};
    assertEquals(3, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs1_JoWr0() {
    int result = SegmentUtils.countArgs("(I)V", 2);
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs2_tUGe1() {
    int result = SegmentUtils.countArgs("(II)V", 2);
    assert result == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs3_LXpx2() {
    int result = SegmentUtils.countArgs("(III)V", 2);
    assert result == 3;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs4_nKpT3() {
    int result = SegmentUtils.countArgs("(Ljava/lang/String;)V", 2);
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs5_Setg4() {
    int result = SegmentUtils.countArgs("(Ljava/lang/String;I)V", 2);
    assert result == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs6_cUjD5() {
    int result = SegmentUtils.countArgs("([I)V", 2);
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs7_xCRd6() {
    int result = SegmentUtils.countArgs("([II)V", 2);
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs8_kxoB7() {
    int result = SegmentUtils.countArgs("(D)V", 2);
    assert result == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs9_ZPHr8() {
    int result = SegmentUtils.countArgs("(J)V", 2);
    assert result == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs10_SCSf9() {
    int result = SegmentUtils.countArgs("(Ljava/lang/String;Ljava/lang/String;)V", 2);
    assert result == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs11_ZhVc10() {
    int result = SegmentUtils.countArgs("(Ljava/lang/String;[I)V", 2);
    assert result == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs12_pSmL11() {
    int result = SegmentUtils.countArgs("(Ljava/lang/String;D)V", 2);
    assert result == 3;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs13_flek12() {
    int result = SegmentUtils.countArgs("(Ljava/lang/String;J)V", 2);
    assert result == 3;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs14_xEvH13() {
    try {
        SegmentUtils.countArgs("Invalid descriptor", 2);
        assert false;
    } catch (IllegalArgumentException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_VZwt0_1() {
    assertEquals(2, SegmentUtils.countArgs("(ID)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_VZwt0_2() {
    assertEquals(3, SegmentUtils.countArgs("(Ljava/lang/String;I)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_VZwt0_3() {
    assertEquals(1, SegmentUtils.countArgs("(I)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_VZwt0_4() {
    assertEquals(2, SegmentUtils.countArgs("(JI)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_VZwt0_5() {
    assertEquals(2, SegmentUtils.countArgs("(JD)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_OvSQ0_1() {
    assertEquals(2, SegmentUtils.countArgs("(II)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_OvSQ0_2() {
    assertEquals(3, SegmentUtils.countArgs("(III)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_OvSQ0_3() {
    assertEquals(4, SegmentUtils.countArgs("(IIII)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_OvSQ0_4() {
    assertEquals(3, SegmentUtils.countArgs("(IID)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_OvSQ0_5() {
    assertEquals(3, SegmentUtils.countArgs("(IIJ)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_OvSQ0_6() {
    assertEquals(2, SegmentUtils.countArgs("(ILjava/lang/Object;)V", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_OvSQ0_7() {
    assertEquals(2, SegmentUtils.countArgs("(I[Ljava/lang/Object;)V", 2));}
}