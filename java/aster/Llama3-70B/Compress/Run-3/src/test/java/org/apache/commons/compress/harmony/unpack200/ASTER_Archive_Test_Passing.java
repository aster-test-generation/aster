/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.jar.JarOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Archive_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_IOException_GIyv13() throws Pack200Exception, IOException {
    Archive archive = new Archive(new FileInputStream("inputFile"), new JarOutputStream(new FileOutputStream("outputFile")));
    try {
        archive.unpack();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_RemovePackFile_PHGA9() throws Pack200Exception, IOException {
    Archive archive = new Archive(new FileInputStream("inputFile"), new JarOutputStream(new FileOutputStream("outputFile")));
    archive.setRemovePackFile(true);
    archive.unpack();
    assertFalse(Files.exists(Paths.get("inputFile")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_GZIPInputStream_DkMH0_Ztmv0() throws Pack200Exception, IOException {
    Archive archive = new Archive("inputFile", "outputFile");
    archive.setQuiet(true);
    archive.unpack();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_RemovePackFile_PHGA9_RYGZ0() throws Pack200Exception, IOException {
    FileInputStream fileInputStream = new FileInputStream("inputFile");
    FileOutputStream fileOutputStream = new FileOutputStream("outputFile");
    JarOutputStream jarOutputStream = new JarOutputStream(fileOutputStream);
    Archive archive = new Archive(fileInputStream, jarOutputStream);
    archive.setQuiet(true);
    archive.unpack();
    assertFalse(Files.exists(Paths.get("inputFile")));
}
}