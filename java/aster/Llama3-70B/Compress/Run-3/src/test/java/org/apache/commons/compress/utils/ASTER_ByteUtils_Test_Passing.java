/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_uxta0() {
    byte[] bytes = {0x12, 0x34, 0x56, 0x78};
    long result = ByteUtils.fromLittleEndian(bytes, 0, 4);
    assertEquals(0x12345678L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_withOffset_cGNz1() {
    byte[] bytes = {0x00, 0x00, 0x12, 0x34, 0x56, 0x78};
    long result = ByteUtils.fromLittleEndian(bytes, 2, 4);
    assertEquals(0x12345678L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_toLittleEndian_withPositiveValue_TKMj0() {
    byte[] b = new byte[8];
    ByteUtils.toLittleEndian(b, 0x1234567890abcdefL, 0, 8);
    assertArrayEquals(new byte[]{(byte) 0x0f, (byte) 0xcd, (byte) 0xab, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12}, b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_toLittleEndian_withNegativeValue_jdDa1() {
    byte[] b = new byte[8];
    ByteUtils.toLittleEndian(b, -1L, 0, 8);
    assertArrayEquals(new byte[]{(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff}, b);
}
}