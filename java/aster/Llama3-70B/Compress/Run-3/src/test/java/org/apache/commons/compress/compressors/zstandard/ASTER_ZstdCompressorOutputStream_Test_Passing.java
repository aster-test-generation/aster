/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import java.io.IOException;
import java.io.OutputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdCompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlush_withLevel_Ojfl1_iSPB0() throws IOException {
    java.io.ByteArrayOutputStream outStream = new java.io.ByteArrayOutputStream();
    ZstdCompressorOutputStream zstdCompressorOutputStream = new ZstdCompressorOutputStream(outStream, 1);
    zstdCompressorOutputStream.flush();
    assertTrue(outStream.toString().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_Ojfl1_jIdj1() throws IOException {
    java.io.ByteArrayOutputStream outStream = new java.io.ByteArrayOutputStream();
    ZstdCompressorOutputStream zstdCompressorOutputStream = new ZstdCompressorOutputStream(outStream, 1);
    zstdCompressorOutputStream.close();
    assertTrue(outStream.toString().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlush_withLevelAndCloseFrameOnFlush_cFob2_lphP0() throws IOException {
    java.io.ByteArrayOutputStream outStream = new java.io.ByteArrayOutputStream();
    ZstdCompressorOutputStream zstdCompressorOutputStream = new ZstdCompressorOutputStream(outStream, 1, true);
    zstdCompressorOutputStream.close();
    assertTrue(outStream.toString().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlush_withLevelAndCloseFrameOnFlushAndUseChecksum_bSHe3_UxBc0() throws IOException {
    java.io.OutputStream outStream = new java.io.ByteArrayOutputStream();
    ZstdCompressorOutputStream zstdCompressorOutputStream = new ZstdCompressorOutputStream(outStream, 1, true, true);
    zstdCompressorOutputStream.close();
    assertTrue(((java.io.ByteArrayOutputStream) outStream).toString().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_tDxx0_FONI0() throws IOException {
    java.io.ByteArrayOutputStream outStream = new java.io.ByteArrayOutputStream();
    ZstdCompressorOutputStream zstdCompressorOutputStream = new ZstdCompressorOutputStream(outStream);
    zstdCompressorOutputStream.write(1);
    zstdCompressorOutputStream.close();
    assertEquals(1, ((java.io.ByteArrayOutputStream) outStream).toByteArray()[0]);
}
}