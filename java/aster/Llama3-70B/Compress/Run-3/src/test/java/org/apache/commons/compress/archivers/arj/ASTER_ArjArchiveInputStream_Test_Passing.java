/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_true_wHwh0() {
    byte[] signature = new byte[] { (byte) 0x60, (byte) 0xEA, 0x00 };
    assertTrue(ArjArchiveInputStream.matches(signature, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_length_ntMh1() {
    byte[] signature = new byte[] { (byte) 0x60, (byte) 0xEA, 0x00 };
    assertFalse(ArjArchiveInputStream.matches(signature, 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_magic1_AkJp2() {
    byte[] signature = new byte[] { (byte) 0x61, (byte) 0xEA, 0x00 };
    assertFalse(ArjArchiveInputStream.matches(signature, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_false_magic2_mIZA3() {
    byte[] signature = new byte[] { (byte) 0x60, (byte) 0xEB, 0x00 };
    assertFalse(ArjArchiveInputStream.matches(signature, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveName_xwMz0_akmq0() throws ArchiveException, IOException {
    ArjArchiveInputStream arjArchiveInputStream = null;
    try {
        arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream("test".getBytes())); // throws ArchiveException
        assertEquals("test", arjArchiveInputStream.getArchiveName());
    } catch (ArchiveException e) {
    } finally {
        if (arjArchiveInputStream != null) {
            arjArchiveInputStream.close();
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveName_withCharset_lcZl1_KJJU0() {
    try {
        ArjArchiveInputStream arjArchiveInputStream = null;
        try {
            arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream("test".getBytes()), "UTF-8");
        } catch (ArchiveException e) {
            fail("ArchiveException should not be thrown");
        }
        assertEquals("test", arjArchiveInputStream.getArchiveName());
        arjArchiveInputStream.close();
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry1_YkPX0_ioUa0() throws ArchiveException, IOException {
    ArjArchiveInputStream ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ArjArchiveEntry entry = null;
    try {
        entry = ais.getNextEntry();
    } catch (IOException e) {
    }
    assertNull(entry);
    ais.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_true_qqPl0_ShjP0() throws ArchiveException, IOException {
    ArjArchiveInputStream ais;
    try {
        ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    } catch (ArchiveException e) {
        throw new AssertionError("Should not throw ArchiveException", e);
    }
    ArchiveEntry ae = new ArjArchiveEntry();
    assertTrue(ais.canReadEntryData(ae));
    ais.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_false_notSTORED_qkFW2_ETPy0() {
    try {
        try {
            ArjArchiveInputStream ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
            ArchiveEntry ae = new ArjArchiveEntry();
            assertFalse(ais.canReadEntryData(ae));
        } catch (ArchiveException e) {
            fail("ArchiveException should not be thrown");
        }
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_WhenCurrentLocalFileHeaderIsNull_ThrowsIllegalStateException_vLtG1_HZbL0() {
    try {
        ArjArchiveInputStream ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        try {
            ais.read(b, off, len); // This line throws IOException
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
        } catch (IOException e) {
        }
    } catch (ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveComment_gITp0_ajxf0() throws ArchiveException, IOException {
    ArjArchiveInputStream arjArchiveInputStream = null;
    try {
        arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream("".getBytes()));
        assertEquals("", arjArchiveInputStream.getArchiveComment());
    } finally {
        if (arjArchiveInputStream != null) {
            arjArchiveInputStream.close();
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_tCVx0_YezF1() throws IOException, ArchiveException {
    ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    arjArchiveInputStream.close();
}
}