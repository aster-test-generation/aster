/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtraFieldUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNoDefault_withoutImplementation_gKYK1() {
    ZipShort headerId = new ZipShort((short) 2);
    ZipExtraField result = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeLocalFileDataData_EmptyArray_GXCr0() {
    ZipExtraField[] data = new ZipExtraField[0];
    byte[] result = ExtraFieldUtils.mergeLocalFileDataData(data);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeLocalFileDataData_NullElement_Isjl7() {
    ZipExtraField[] dataArray = new ZipExtraField[] { null };
    byte[] result = ExtraFieldUtils.mergeLocalFileDataData(dataArray);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeLocalFileDataData_NullArray_cubB8() {
    byte[] result = ExtraFieldUtils.mergeLocalFileDataData(null);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeCentralDirectoryData_EmptyArray_DbFl0() {
    ZipExtraField[] data = new ZipExtraField[0];
    byte[] result = ExtraFieldUtils.mergeCentralDirectoryData(data);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeCentralDirectoryData_NullElement_YXqQ5() {
    ZipExtraField[] data = new ZipExtraField[]{null};
    byte[] result = ExtraFieldUtils.mergeCentralDirectoryData(data);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeCentralDirectoryData_NullArray_FMeQ6() {
    byte[] result = ExtraFieldUtils.mergeCentralDirectoryData(null);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNotNull_WKOP0_1() {
    ZipShort headerId = new ZipShort((short) 1);
    ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
    assertNotNull(field);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNotNull_WKOP0_2() {
    ZipShort headerId = new ZipShort((short) 1);
    ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
    assertEquals(headerId, field.getHeaderId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNull_yNma1_1() {
    ZipShort headerId = new ZipShort((short) 2);
    ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
    assertNotNull(field);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNull_yNma1_2() {
    ZipShort headerId = new ZipShort((short) 2);
    ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
    assertEquals(headerId, field.getHeaderId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNull_yNma1_3() {
    ZipShort headerId = new ZipShort((short) 2);
    ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
    assertTrue(field instanceof UnrecognizedExtraField);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_NullData_ThrowsZipException_ygdn2_NKHd0() {
    try {
        ExtraFieldUtils.parse(null);
        fail("Expected ZipException");
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_MTrM0_oUCq0() {
    byte[] data = new byte[10];
    try {
        ZipExtraField[] result = ExtraFieldUtils.parse(data);
        assertNotNull(result);
    } catch (ZipException e) {
        fail("ZipException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_MTrM0_ZqjQ1() throws ZipException {
    byte[] data = new byte[10];
    ZipExtraField[] result = ExtraFieldUtils.parse(data);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNotNull_WKOP0() {
    ZipShort headerId = new ZipShort((short) 1);
    ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
    assertNotNull(field);
    assertEquals(headerId, field.getHeaderId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNull_yNma1() {
    ZipShort headerId = new ZipShort((short) 2);
    ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
    assertNotNull(field);
    assertEquals(headerId, field.getHeaderId());
    assertTrue(field instanceof UnrecognizedExtraField);
}
}