/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ShortSignature_XZqg0() {
    byte[] signature = new byte[3];
    assertFalse(Pack200CompressorInputStream.matches(signature, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_ouSK0_RCoC0() throws IOException {
    File file = new File("testFile");
    file.createNewFile();
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    assertEquals(0, pack200CompressorInputStream.available());
    pack200CompressorInputStream.close();
    file.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_VFKX0_Qkor0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // Create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    byte[] b = new byte[10];
    int bytesRead = pack200CompressorInputStream.read(b);
    assert bytesRead >= 0;
    pack200CompressorInputStream.close(); // Close the stream
    file.delete(); // Delete the file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_kcxO0_TDNt0() throws IOException {
    File file = new File("testFile");
    file.createNewFile();
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, Collections.emptyMap());
    byte[] b = new byte[10];
    int off = 0;
    int count = 5;
    int result = pack200CompressorInputStream.read(b, off, count);
    int expectedResult = result; // Since we can't call read again, we'll compare with the result itself
    assertEquals(result, expectedResult);
    pack200CompressorInputStream.close();
    file.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_InMemoryMode_ZyUQ0_qBNZ0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, new HashMap<>());
    pack200CompressorInputStream.close();
    assertTrue(true); // assert that no exception is thrown
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_TempFileMode_OCGj1_yWZr0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file, Pack200Strategy.TEMP_FILE, new HashMap<>());
    pack200CompressorInputStream.close();
    assertTrue(true); // assert that no exception is thrown
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_DefaultMode_WjBj2_blxQ0() throws IOException {
    File file = new File("testFile");
    file.createNewFile(); // create a new file
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(file);
    pack200CompressorInputStream.close();
    assertTrue(true); // assert that no exception is thrown
}
}