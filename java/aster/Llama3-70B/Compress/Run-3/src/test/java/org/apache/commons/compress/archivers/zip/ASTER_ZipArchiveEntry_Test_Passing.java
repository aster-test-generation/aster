/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveEntry_Test_Passing {
private int versionRequired = 123;
@Mock
    private ZipArchiveEntry ziparchiveentry;
private GeneralPurposeBit generalPurposeBit;
private ZipArchiveEntry zipArchiveEntry;
private int platform = PLATFORM_FAT;
private static int SHORT_SHIFT = 16;
@Mock
    private Path inputPath;
@Mock
    private File inputFile;
private long externalAttributes = 123L;
private static final long OFFSET_UNKNOWN = -1L;
private long localHeaderOffset = OFFSET_UNKNOWN;
    private ZipArchiveEntry other;
@Mock
    private java.util.zip.ZipEntry zipEntry;
@Mock
    private UnparseableExtraFieldData unparseableExtra;
private int internalAttributes = 123;
private int rawFlag = 123;
private long time = -1;
private String name = "test-name";
private byte[] rawName = "test-raw-name".getBytes();
private int alignment = 4;
@Mock
    private ExtraFieldUtils extraFieldUtils;
private ZipExtraField[] extraFields;
@Mock
    private ZipExtraField mockZipExtraField;
@Mock
private static final long SIZE_UNKNOWN = -1L;
private boolean isStreamContiguous;
    private ZipArchiveEntry zipArchiveEntryMock;
private int method = ZipMethod.UNKNOWN_CODE;
@Mock
    private ZipExtraField extraField;
@Mock
    private ZipShort type;
private boolean lastModifiedDateSet;
@Mock
    private java.time.Instant lastModifiedTime;
@Mock
    private byte[] extra;
private static String ZIP_DIR_SEP = "/";
@Mock
    private FileTime fileTime;
private static int PLATFORM_FAT = 0;
private static int PLATFORM_UNIX = 1;
private static int SHORT_MASK = 0xFFFF;
@Mock
    private byte[] localExtra;
@Mock
    private byte[] centralDirectoryExtra;
@Mock
    private ZipExtraField[] localFields;
@Mock
    private ZipExtraField[] centralFields;
@Mock
    private ZipExtraField localField;
@Mock
    private ZipExtraField centralField;
@Mock
    private ExtraFieldParsingBehavior parsingBehavior;
@Mock
    private ZipArchiveEntry mockZipArchiveEntry;
@Mock
    private ZipUtil zipUtil;
@Mock
    private ZipExtraField zipExtraField;
@Mock
    private ZipExtraField zeMock;
@Mock
    private UnparseableExtraFieldData uefdMock;
private long size = SIZE_UNKNOWN;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVersionRequired() throws Exception {
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveentry.getVersionRequired()).thenReturn(versionRequired);
        int result = ziparchiveentry.getVersionRequired();
        assertEquals(versionRequired, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired1_guNT0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired2_yGVj1() {
    File inputFile = new File("inputFile");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
    assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneralPurposeBit_EPuE0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    zipArchiveEntry.setGeneralPurposeBit(generalPurposeBit);
    assertEquals(generalPurposeBit, zipArchiveEntry.getGeneralPurposeBit());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode1_rMAv0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setUnixMode(0);
    assertEquals(0, zipArchiveEntry.getExternalAttributes() >>> 16);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode1_rMAv0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setUnixMode(0);
    assertEquals("unix", zipArchiveEntry.getPlatform());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode2_LHmw1_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setUnixMode(0200);
    assertEquals(0200 << 16 | 1, zipArchiveEntry.getExternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode2_LHmw1_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setUnixMode(0200);
    assertEquals("unix", zipArchiveEntry.getPlatform());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributes_RINJ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long externalAttributes = zipArchiveEntry.getExternalAttributes();
    assertEquals(0, externalAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_EZrg0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_yGDv1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_UNac2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_YDvX3() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("name1");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("name2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_DifferentComment_IIyN4() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("name");
    entry1.setComment("comment1");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("name");
    entry2.setComment("comment2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLastModifiedDate_1() throws Exception {
        ziparchiveentry = new ZipArchiveEntry(zipEntry);
        // given
        when(zipEntry.getTime()).thenReturn(1643723400L); // some arbitrary timestamp
        // when
        Date lastModifiedDate = ziparchiveentry.getLastModifiedDate();
        // then
        assertNotNull(lastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLastModifiedDate_2() throws Exception {
        ziparchiveentry = new ZipArchiveEntry(zipEntry);
        // given
        when(zipEntry.getTime()).thenReturn(1643723400L); // some arbitrary timestamp
        // when
        Date lastModifiedDate = ziparchiveentry.getLastModifiedDate();
        // then
        assertEquals(1643723400L, lastModifiedDate.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_NsCL0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    Date lastModifiedDate = zipArchiveEntry.getLastModifiedDate();
    assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveUnparseableExtraFieldData_WithUnparseableExtra_lYjX0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.removeUnparseableExtraFieldData();
    assertNull(zipArchiveEntry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes_nSsP0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    int result = zipArchiveEntry.getInternalAttributes();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawFlag() throws Exception {
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveentry.getRawFlag()).thenReturn(rawFlag);
        int result = ziparchiveentry.getRawFlag();
        assertEquals(rawFlag, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag1_QTYK0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals(0, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag2_DKYM1() {
    File inputFile = new File("inputFile");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
    assertEquals(0, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_MBxw0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime time = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(time);
    assertEquals(time, zipArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_oGKr0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime creationTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(creationTime);
    assertEquals(creationTime, zipArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_svOz0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStart_vGuZ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long diskNumberStart = 1;
    zipArchiveEntry.setDiskNumberStart(diskNumberStart);
    assertEquals(diskNumberStart, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_TMOm0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("newName", "newRawName".getBytes());
    assertEquals("newName", zipArchiveEntry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_TMOm0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("newName", "newRawName".getBytes());
    assertArrayEquals("newRawName".getBytes(), zipArchiveEntry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment1_NVTJ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    int result = zipArchiveEntry.getAlignment();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_OWiw0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertTrue(true); // default assertion, can be modified based on the requirement
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_dOvv0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_vuhV0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertTrue(true); // default assertion, replace with actual assertion
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_withExtraFields_mIHx1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = new ZipExtraField[1];
    extraFields[0] = new UnparseableExtraFieldData();
    zipArchiveEntry.setExtraFields(extraFields);
    zipArchiveEntry.setExtra();
    assertTrue(true); // default assertion, replace with actual assertion
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_DEBY0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtraFields(new ZipExtraField[] {});
    zipArchiveEntry.setExtra();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExternalAttributes_aWOR0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExternalAttributes(123L);
    assertEquals(123L, zipArchiveEntry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_neLa0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] b = new byte[10];
    zipArchiveEntry.setCentralDirectoryExtra(b);
    assertNotNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra1_mNGd0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] extra = new byte[10];
    zipArchiveEntry.setExtra(extra);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra2_MWsY1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    byte[] extra = new byte[10];
    zipArchiveEntry.setExtra(extra);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_IncludeUnparseable_qfzY0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
    assertNotNull(extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_DoNotIncludeUnparseable_WWWN1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(false);
    assertNotNull(extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_IncludeUnparseable_mkUt0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
    assertArrayEquals(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY, extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_DoNotIncludeUnparseable_TuHV1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(false);
    assertArrayEquals(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY, extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod() throws Exception {
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveentry.getMethod()).thenReturn(method);
        int result = ziparchiveentry.getMethod();
        assertEquals(ZipMethod.UNKNOWN_CODE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod1_rBrB0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals(0, zipArchiveEntry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod2_RaPZ1() {
    File inputFile = new File("inputFile");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
    assertEquals(0, zipArchiveEntry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraField1_qTdl0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipShort type = new ZipShort((short) 1);
    assertNull(zipArchiveEntry.getExtraField(type));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_TimeSet_ldvG1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setTime(12345);
    assertEquals(12345, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_SuperCall_PLQT2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertEquals(((java.util.zip.ZipEntry)entry).getTime(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_UItq0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastModifiedTime(fileTime);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetLastAccessTime() throws Exception {
        ziparchiveentry = new ZipArchiveEntry(zipEntry);
        // Given
        FileTime fileTime = FileTime.fromMillis(1643723400000L);
        when(zipEntry.setLastAccessTime(fileTime)).thenReturn(zipEntry);
        // When
        ZipEntry result = ziparchiveentry.setLastAccessTime(fileTime);
        // Then
        verify(zipEntry).setLastAccessTime(fileTime);
        assertEquals(ziparchiveentry, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_tIBH0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastAccessTime(fileTime);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_tIBH0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastAccessTime(fileTime);
    assertEquals(fileTime, result.getLastAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy_Zodw0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals(20, zipArchiveEntry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        ziparchiveentry = new ZipArchiveEntry(zipEntry);
        // given
        when(zipEntry.getName()).thenReturn("mocked-name");
        // when
        String actualName = ziparchiveentry.getName();
        // then
        assertEquals("mocked-name", actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_1_XDEe0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals("name", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtra_1() throws Exception {
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveentry.getExtra()).thenReturn(extra);
        // Test case 1: getExtra returns null
        Mockito.when(ziparchiveentry.getExtra()).thenReturn(null);
        byte[] result = ziparchiveentry.getLocalFileDataExtra();
        // Test case 2: getExtra returns a non-null byte array
        byte[] expectedExtra = new byte[] {1, 2, 3};
        Mockito.when(ziparchiveentry.getExtra()).thenReturn(expectedExtra);
        result = ziparchiveentry.getLocalFileDataExtra();
        assertArrayEquals(ByteUtils.EMPTY_BYTE_ARRAY, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtra_2() throws Exception {
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveentry.getExtra()).thenReturn(extra);
        // Test case 1: getExtra returns null
        Mockito.when(ziparchiveentry.getExtra()).thenReturn(null);
        byte[] result = ziparchiveentry.getLocalFileDataExtra();
        // Test case 2: getExtra returns a non-null byte array
        byte[] expectedExtra = new byte[] {1, 2, 3};
        Mockito.when(ziparchiveentry.getExtra()).thenReturn(expectedExtra);
        result = ziparchiveentry.getLocalFileDataExtra();
        assertArrayEquals(expectedExtra, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataExtra_withExtra_APGp0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] extra = new byte[] {1, 2, 3};
    zipArchiveEntry.setExtra(extra);
    assertArrayEquals(extra, zipArchiveEntry.getLocalFileDataExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataExtra_withoutExtra_HMYK1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertArrayEquals(ByteUtils.EMPTY_BYTE_ARRAY, zipArchiveEntry.getLocalFileDataExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDirectory() throws Exception {
        zipArchiveEntryMock = mock(ZipArchiveEntry.class);
        when(zipArchiveEntryMock.getName()).thenReturn("some/directory/");
        boolean result = zipArchiveEntryMock.isDirectory();
        assertTrue(result);
        verify(zipArchiveEntryMock).getName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_true_keTW0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("dir/");
    assertTrue(zipArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_false_GiLH1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("file.txt");
    assertFalse(zipArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetTime() throws Exception {
        ziparchiveentry = new ZipArchiveEntry("");
        // given
        when(fileTime.toMillis()).thenReturn(1643723400L); // some arbitrary timestamp
        // when
        ziparchiveentry.setTime(fileTime);
        // then
        // since setTime calls setTime(long) internally, we can't directly verify the call
        // but we can verify that the internal state of the object has changed
        // in this case, we assume that the internal state is not publicly accessible
        // so we can't write a meaningful assertion here
        // if you have a way to verify the internal state, add it here
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_OjKo0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setTime(fileTime);
    assertEquals(1000, zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRawFlag_tPpY0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setRawFlag(1);
    assertEquals(1, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStart_VhHW0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long result = zipArchiveEntry.getDiskNumberStart();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixMode_unixPlatform_BdJz0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertEquals(0, entry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawName_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        ziparchiveentry = new ZipArchiveEntry("test-name");
        // Set up the rawName field
        Field rawNameField = ZipArchiveEntry.class.getDeclaredField("rawName");
        rawNameField.setAccessible(true);
        rawNameField.set(ziparchiveentry, rawName);
        // Test the getRawName method
        byte[] result = ziparchiveentry.getRawName();
        // Test the getRawName method when rawName is null
        rawNameField.set(ziparchiveentry, null);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawName_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        ziparchiveentry = new ZipArchiveEntry("test-name");
        // Set up the rawName field
        Field rawNameField = ZipArchiveEntry.class.getDeclaredField("rawName");
        rawNameField.setAccessible(true);
        rawNameField.set(ziparchiveentry, rawName);
        // Test the getRawName method
        byte[] result = ziparchiveentry.getRawName();
        // Test the getRawName method when rawName is null
        rawNameField.set(ziparchiveentry, null);
        assertArrayEquals(rawName, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawName_3() throws Exception {
        MockitoAnnotations.initMocks(this);
        ziparchiveentry = new ZipArchiveEntry("test-name");
        // Set up the rawName field
        Field rawNameField = ZipArchiveEntry.class.getDeclaredField("rawName");
        rawNameField.setAccessible(true);
        rawNameField.set(ziparchiveentry, rawName);
        // Test the getRawName method
        byte[] result = ziparchiveentry.getRawName();
        // Test the getRawName method when rawName is null
        rawNameField.set(ziparchiveentry, null);
        assertNull(ziparchiveentry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawNameNotNull_zNFQ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] result = zipArchiveEntry.getRawName();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtra_XzRv0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] result = zipArchiveEntry.getCentralDirectoryExtra();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveExtraField_zqFl0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipShort type = new ZipShort(1);
    zipArchiveEntry.removeExtraField(type);
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_true_AQuY0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setUnixMode(UnixStat.LINK_FLAG | UnixStat.FILE_TYPE_FLAG);
    assertTrue(zipArchiveEntry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_false_nujX1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setUnixMode(UnixStat.FILE_TYPE_FLAG);
    assertFalse(zipArchiveEntry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionRequired_wEoU0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setVersionRequired(1);
    assertEquals(1, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_PowerOfTwo_fpwO0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setAlignment(1024);
    assertEquals(1024, zipArchiveEntry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_NotPowerOfTwo_FNyh1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    try {
        zipArchiveEntry.setAlignment(1023);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_BiggerThan0xFFFF_eWBD2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    try {
        zipArchiveEntry.setAlignment(0x10000);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_NotDosTime() throws Exception {
        zipArchiveEntry = new ZipArchiveEntry("test");
        MockitoAnnotations.initMocks(this);
        // given
        long timeEpochMillis = 123456789L;
        when(ZipUtil.isDosTime(timeEpochMillis)).thenReturn(false);
        when(FileTime.fromMillis(timeEpochMillis)).thenReturn(fileTime);
        // when
        zipArchiveEntry.setTime(timeEpochMillis);
        // then
        verify(zipArchiveEntry, times(1)).setLastModifiedTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_DosTime_wSgm0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long timeEpochMillis = 1643723400000L; // a valid DOS time
    zipArchiveEntry.setTime(timeEpochMillis);
    assertEquals(timeEpochMillis, zipArchiveEntry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_NonDosTime_Qnmt1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long timeEpochMillis = 1643723400001L; // a non-DOS time
    zipArchiveEntry.setTime(timeEpochMillis);
    assertEquals(FileTime.fromMillis(timeEpochMillis), zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMethodValid_AUuR0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setMethod(1);
    assertEquals(1, zipArchiveEntry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraField_UnparseableExtraFieldData_UUBk0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField ze = new UnparseableExtraFieldData();
    zipArchiveEntry.addAsFirstExtraField(ze);
    assertSame(ze, zipArchiveEntry.getExtraField(ze.getHeaderId()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraField_NullExtraField_PcuI3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    try {
        zipArchiveEntry.addAsFirstExtraField(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_bNhi0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields();
    assertNotNull(extraFields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGeneralPurposeBit_uCVk0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
    assertNotNull(generalPurposeBit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset1_bXlE0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long result = zipArchiveEntry.getDataOffset();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize1_Mgzi0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    assertEquals(0, zipArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize2_RtfJ1() {
    File inputFile = new File("inputFile");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
    assertEquals(0, zipArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPlatform() throws Exception {
        ziparchiveentry = new ZipArchiveEntry("");
        assertEquals(platform, ziparchiveentry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform1_KZCm0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    int result = zipArchiveEntry.getPlatform();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform2_zwrP1() {
    File inputFile = new File("inputFile");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
    int result = zipArchiveEntry.getPlatform();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInternalAttributes_yINs0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setInternalAttributes(123);
    assertEquals(123, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguous_iPHm0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setStreamContiguous(true);
    assertTrue(zipArchiveEntry.isStreamContiguous());
}
@Test
public void testSetExtra6_LwCJ5_CqYK0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    byte[] extra = null;
    zipArchiveEntry.setExtra(extra);
}
@Test
public void testSetExtra7_STjl6_nplg0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    byte[] extra = new byte[0];
    zipArchiveEntry.setExtra(extra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_SameComment_SameLastModifiedTime_DifferentLastAccessTime_yRiW6_bOlc0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("name");
    entry1.setComment("comment");
    entry1.setLastModifiedTime(java.nio.file.attribute.FileTime.from(java.time.Instant.now()));
    entry1.setLastAccessTime(java.nio.file.attribute.FileTime.from(java.time.Instant.now()));
    ZipArchiveEntry entry2 = new ZipArchiveEntry("name");
    entry2.setComment("comment");
    entry2.setLastModifiedTime(java.nio.file.attribute.FileTime.from(java.time.Instant.now()));
    entry2.setLastAccessTime(java.nio.file.attribute.FileTime.from(java.time.Instant.now().plusSeconds(1)));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ySxG0_SeMQ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtra();
    assertEquals(zipArchiveEntry.getExtra(), zipArchiveEntry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired3_fbmp2_IErP0() {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entry");
    ZipArchiveEntry zipArchiveEntry;
    try {
        zipArchiveEntry = new ZipArchiveEntry(entry);
        assertEquals(0, zipArchiveEntry.getVersionRequired());
    } catch (ZipException e) {
        fail("ZipException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode3_pCWo2_YDnp0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry((java.util.zip.ZipEntry) null);
        try {
            zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
        } catch (ZipException e) {
            fail("ZipException should not be thrown");
        }
        zipArchiveEntry.setUnixMode(0x100);
        assertEquals(0x100 << 16 | 0x10, zipArchiveEntry.getExternalAttributes());
        assertEquals("unix", zipArchiveEntry.getPlatform());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag4_HWro3_csco0() {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entry");
    ZipArchiveEntry zipArchiveEntry;
    try {
        zipArchiveEntry = new ZipArchiveEntry(entry);
        assertEquals(0, zipArchiveEntry.getRawFlag());
    } catch (ZipException e) {
        fail("ZipException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous3_WRSL2_rsJM0() {
    Path inputPath = null; // initialize Path object
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputPath, "entryName", LinkOption.NOFOLLOW_LINKS);
        boolean result = zipArchiveEntry.isStreamContiguous();
        assert result == false;
    } catch (IOException e) {
        assert false; // or handle the exception as per your requirement
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra3_yQog2_oSNM0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
        try {
            zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
        } catch (ZipException e) {
            fail("ZipException occurred");
        }
        byte[] extra = new byte[10];
        zipArchiveEntry.setExtra(extra);
        assertTrue(true);
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra5_glJx4_seaN0() {
    try {
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("name");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(zipArchiveEntry1);
        byte[] extra = new byte[10];
        zipArchiveEntry.setExtra(extra);
        assertTrue(true);
    } catch (ZipException e) {
        fail("ZipException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod3_vxzT2_UIfH0() {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entry");
    ZipArchiveEntry zipArchiveEntry;
    try {
        zipArchiveEntry = new ZipArchiveEntry(entry);
        assertEquals(0, zipArchiveEntry.getMethod());
    } catch (ZipException e) {
        fail("ZipException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod5_DtWx4_kbVE0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(entry);
        assertEquals(0, zipArchiveEntry.getMethod());
    } catch (ZipException e) {
        fail("ZipException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod5_DtWx4_RcYT1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    try {
        try {
            ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(entry);
            assertEquals(0, zipArchiveEntry.getMethod());
        } catch (ZipException e) {
            fail("ZipException was thrown");
        }
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_2_fcDT1_YHUn0() throws ZipException {
    ZipArchiveEntry zipArchiveEntry;
    try {
        zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
    } catch (ZipException e) {
        throw new AssertionError("ZipException should not be thrown", e);
    }
    assertEquals("entry", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixMode_nonUnixPlatform_sgxw1_bMTQ0() {
    try {
        ZipArchiveEntry entry = null;
        try {
            entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
        } catch (ZipException e) {
            fail("ZipException should not be thrown");
        }
        assertEquals(0, entry.getUnixMode());
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_Null_iOmt7_kmNw0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    try {
        try {
            ZipExtraField[] extraFields = entry.getExtraFields(null);
            assertNotNull(extraFields);
        } catch (ZipException e) {
            fail("ZipException should not be thrown");
        }
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawNameNull_KHox1_BYtY0() throws ZipException {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry((java.util.zip.ZipEntry) null);
        byte[] result = zipArchiveEntry.getRawName();
        assertNull(result);
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize4_IMun3_srFk0() {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entry");
    ZipArchiveEntry zipArchiveEntry;
    try {
        zipArchiveEntry = new ZipArchiveEntry(entry);
        assertEquals(0, zipArchiveEntry.getSize());
    } catch (ZipException e) {
        fail("ZipException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode1_rMAv0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setUnixMode(0);
    assertEquals(0, zipArchiveEntry.getExternalAttributes() >>> 16);
    assertEquals("unix", zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode2_LHmw1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setUnixMode(0200);
    assertEquals(0200 << 16 | 1, zipArchiveEntry.getExternalAttributes());
    assertEquals("unix", zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLastModifiedDate() throws Exception {
        ziparchiveentry = new ZipArchiveEntry(zipEntry);
        // given
        when(zipEntry.getTime()).thenReturn(1643723400L); // some arbitrary timestamp
        // when
        Date lastModifiedDate = ziparchiveentry.getLastModifiedDate();
        // then
        assertNotNull(lastModifiedDate);
        assertEquals(1643723400L, lastModifiedDate.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_TMOm0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("newName", "newRawName".getBytes());
    assertEquals("newName", zipArchiveEntry.getName());
    assertArrayEquals("newRawName".getBytes(), zipArchiveEntry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void parseFromLocalFileData(byte[] data, int offset, int length) throws ZipException {
            throw new ZipException();
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffset_OTiR0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setDataOffset(10L);
    assertEquals(10L, zipArchiveEntry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldsNull_MtDV0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtraFields(null);
    assertNull(zipArchiveEntry.getExtraFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldsEmptyArray_zeyN1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setExtraFields(new ZipExtraField[0]);
    assertEquals(0, zipArchiveEntry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_fclR0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    UnparseableExtraFieldData unparseableExtraFieldData = zipArchiveEntry.getUnparseableExtraFieldData();
    assertNotNull(unparseableExtraFieldData);
    assertEquals(unparseableExtraFieldData.getHeaderId(), new ZipShort((short) 0));
    assertArrayEquals(unparseableExtraFieldData.getCentralDirectoryData(), new byte[0]);
    assertEquals(unparseableExtraFieldData.getCentralDirectoryLength(), new ZipShort((short) 0));
    assertArrayEquals(unparseableExtraFieldData.getLocalFileDataData(), new byte[0]);
    assertEquals(unparseableExtraFieldData.getLocalFileDataLength(), new ZipShort((short) 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName1_yPJk0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("test\\name");
    assertEquals("test/name", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName2_Qyku1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setName("test/name");
    assertEquals("test/name", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName3_gPew2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
    zipArchiveEntry.setName(null);
    assertNull(zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeValid_dBdQ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setSize(10);
    assertEquals(10, zipArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisStreamContiguous() throws Exception {
        MockitoAnnotations.initMocks(this);
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Set the expected behavior of the isStreamContiguous method
        when(ziparchiveentry.isStreamContiguous()).thenReturn(true);
        // Call the method under test
        boolean result = ziparchiveentry.isStreamContiguous();
        // Assert the result
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous1_tSNZ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    boolean result = zipArchiveEntry.isStreamContiguous();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous2_JIaP1() {
    File inputFile = new File("inputFile");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
    boolean result = zipArchiveEntry.isStreamContiguous();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        when(ziparchiveentry.getName()).thenReturn("mocked-name");
        int expectedHashCode = "mocked-name".hashCode();
        int actualHashCode = ziparchiveentry.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_NjJH0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    int result = zipArchiveEntry.hashCode();
    assertEquals("name".hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPlatform_veZq0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setPlatform(1);
    assertEquals(1, zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionMadeBy_OLFf0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setVersionMadeBy(123);
    assertEquals(123, zipArchiveEntry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset1_ociD0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    long result = zipArchiveEntry.getLocalHeaderOffset();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocalHeaderOffset_XFAu0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setLocalHeaderOffset(10L);
    assertEquals(10L, zipArchiveEntry.getLocalHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetExternalAttributes() throws Exception {
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Act
        ziparchiveentry.setExternalAttributes(externalAttributes);
        // Assert
        Mockito.verify(ziparchiveentry).setExternalAttributes(externalAttributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_tIBH0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setLastAccessTime(fileTime);
    assertNotNull(result);
    assertEquals(fileTime, result.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtra() throws Exception {
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveentry.getExtra()).thenReturn(extra);
        // Test case 1: getExtra returns null
        Mockito.when(ziparchiveentry.getExtra()).thenReturn(null);
        byte[] result = ziparchiveentry.getLocalFileDataExtra();
        assertArrayEquals(ByteUtils.EMPTY_BYTE_ARRAY, result);
        // Test case 2: getExtra returns a non-null byte array
        byte[] expectedExtra = new byte[] {1, 2, 3};
        Mockito.when(ziparchiveentry.getExtra()).thenReturn(expectedExtra);
        result = ziparchiveentry.getLocalFileDataExtra();
        assertArrayEquals(expectedExtra, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawName() throws Exception {
        MockitoAnnotations.initMocks(this);
        ziparchiveentry = new ZipArchiveEntry("test-name");
        // Set up the rawName field
        Field rawNameField = ZipArchiveEntry.class.getDeclaredField("rawName");
        rawNameField.setAccessible(true);
        rawNameField.set(ziparchiveentry, rawName);
        // Test the getRawName method
        byte[] result = ziparchiveentry.getRawName();
        assertNotNull(result);
        assertArrayEquals(rawName, result);
        // Test the getRawName method when rawName is null
        rawNameField.set(ziparchiveentry, null);
        assertNull(ziparchiveentry.getRawName());
    }
}