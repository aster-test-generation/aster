/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNull_myjo0_1() {
    HashSet<Object> set = Sets.newHashSet();
    assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNull_myjo0_2() {
    HashSet<Object> set = Sets.newHashSet();
    assertTrue(set.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetSingleElement_WclV1_1() {
    HashSet<String> set = Sets.newHashSet("Hello");
    assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetSingleElement_WclV1_2() {
    HashSet<String> set = Sets.newHashSet("Hello");
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetSingleElement_WclV1_3() {
    HashSet<String> set = Sets.newHashSet("Hello");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleElements_yvzk2_1() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleElements_yvzk2_2() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleElements_yvzk2_3() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleElements_yvzk2_4() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleElements_yvzk2_5() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("Java"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetDuplicateElements_acCt3_1() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetDuplicateElements_acCt3_2() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetDuplicateElements_acCt3_3() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetDuplicateElements_acCt3_4() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullElements_mQpP4_1() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullElements_mQpP4_2() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullElements_mQpP4_3() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullElements_mQpP4_4() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullElements_mQpP4_5() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetEmptyArray_jIjj5_1() {
    HashSet<String> set = Sets.newHashSet(new String[0]);
    assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetEmptyArray_jIjj5_2() {
    HashSet<String> set = Sets.newHashSet(new String[0]);
    assertTrue(set.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetSingleNullElement_qaNu6_1() {
    HashSet<String> set = Sets.newHashSet((String)null);
    assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetSingleNullElement_qaNu6_2() {
    HashSet<String> set = Sets.newHashSet((String)null);
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetSingleNullElement_qaNu6_3() {
    HashSet<String> set = Sets.newHashSet((String)null);
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullArray_qsKu7() {
    HashSet<String> set = Sets.newHashSet((String[])null);
    assertNull(set);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetGeneric_dWYS8_1() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetGeneric_dWYS8_2() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertEquals(5, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetGeneric_dWYS8_3() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetGeneric_dWYS8_4() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetGeneric_dWYS8_5() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetGeneric_dWYS8_6() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetGeneric_dWYS8_7() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3, 4, 5);
    assertTrue(set.contains(5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetLargeArray_BSQa9_1() {
    String[] elements = new String[1000];
    for (int i = 0; i < 1000; i++) {
        elements[i] = "Element " + i;
    }
    HashSet<String> set = Sets.newHashSet(elements);
    for (int i = 0; i < 1000; i++) {
    }
    assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetLargeArray_BSQa9_2() {
    String[] elements = new String[1000];
    for (int i = 0; i < 1000; i++) {
        elements[i] = "Element " + i;
    }
    HashSet<String> set = Sets.newHashSet(elements);
    for (int i = 0; i < 1000; i++) {
    }
    assertEquals(1000, set.size());}
}