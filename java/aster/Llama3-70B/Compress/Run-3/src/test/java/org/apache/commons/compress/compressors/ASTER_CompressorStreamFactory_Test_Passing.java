/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.SortedMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandard_gwXq0() {
    String result = CompressorStreamFactory.getZstandard();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders1_yAoV0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders2_LwUs1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2_BeiJ0() {
    String result = CompressorStreamFactory.getBzip2();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders1_JGvA0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders2_PgWJ1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getInputStreamCompressorNames_1_edku0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    Set<String> result = compressorStreamFactory.getInputStreamCompressorNames();
    assertEquals(14, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_qabK0_1() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_qabK0_2() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertNotEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZ_lOAB0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertEquals("Z", CompressorStreamFactory.getZ());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_JjjF0() {
    String result = CompressorStreamFactory.getLZ4Framed();
    assertEquals("LZ4_FRAMED", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_Pmal0_1() {
    String gzip = CompressorStreamFactory.getGzip();
    assertNotNull(gzip);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_Pmal0_2() {
    String gzip = CompressorStreamFactory.getGzip();
    assertEquals("gz", gzip);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated1_RphF0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated2_AOKs1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated3_TnCc2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false);
    assertFalse(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated4_sWhn3() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    assertTrue(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated5_FPDK4() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 512);
    assertFalse(compressorStreamFactory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated6_RVnr5() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    compressorStreamFactory.getDecompressConcatenated();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_LBPr0() {
    String result = CompressorStreamFactory.getLzma();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleton_MGlt0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorStreamFactory singleton = CompressorStreamFactory.getSingleton();
    assertNotNull(singleton);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_jotF0() {
    String result = CompressorStreamFactory.getSnappyRaw();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames1_IaTa0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    Set<String> compressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(10, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames2_uSal1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> compressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(10, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames3_AZNi2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(10, compressorNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF1_orIK0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    assertTrue(compressorStreamFactory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF2_pWDN1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    assertFalse(compressorStreamFactory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF3_cEkY2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    assertTrue(compressorStreamFactory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenated_withDefaultConstructor_XtUO0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    factory.setDecompressConcatenated(true);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_etgK0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    assertEquals("pack200", CompressorStreamFactory.getPack200());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Block_AQoh0() {
    String result = CompressorStreamFactory.getLZ4Block();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate_YpNA0() {
    String result = CompressorStreamFactory.getDeflate();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramed_ongT0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    String result = CompressorStreamFactory.getSnappyFramed();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64_RMAO0() {
    String result = CompressorStreamFactory.getDeflate64();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_URUF0_1() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_URUF0_2() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertTrue(!result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotli_Dmou0() {
    String brotli = CompressorStreamFactory.getBrotli();
    assertNotNull(brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_ZsAx0() {
    String result = CompressorStreamFactory.getXz();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_zrkp0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String result = factory.getXz();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_cgRu0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String xz = factory.getXz();
    assertNotNull(xz);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_ZSTANDARD_utYF4_BIiD0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    CompressorInputStream cis = factory.createCompressorInputStream("ZSTANDARD", in, true);
    assertNotNull(cis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_PACK200_gtjb6_Yrav0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    CompressorInputStream cis = factory.createCompressorInputStream("PACK200", in, true);
    assertNotNull(cis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_mExr0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String xz = factory.getXz();
    assertNotNull(xz);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_DEFLATE64_amWn11_xfCj1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertEquals("xz", CompressorStreamFactory.getXz());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_esmy13_wIyb0() throws Exception {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String result = CompressorStreamFactory.getXz();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_UuxO0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String result = CompressorStreamFactory.getXz();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_BZIP2_GeUK1_QvYg0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("BZIP2", out);
    assertNotNull(compressorOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_XZ_YXmA2_SCQz0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream(CompressorStreamFactory.getXz(), out);
    assertNotNull(compressorOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_DEFLATE_umzP5_xRgL0() throws CompressorException {
    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("DEFLATE", out);
    assertNotNull(compressorOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_SNAPPY_FRAMED_gUMS6_ktMQ0() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    java.io.OutputStream out = new java.io.ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("SNAPPY_FRAMED", out);
    assertNotNull(compressorOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZ4_BLOCK_fGAU7_iCuD0() throws CompressorException {
    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("LZ4_BLOCK", out);
    assertNotNull(compressorOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStream_LZ4_FRAMED_phpC8_NEWR0() throws CompressorException {
    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream("LZ4_FRAMED", out);
    assertNotNull(compressorOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectBZIP2_rhUW3_fIeW0() throws CompressorException, IOException {
    Set<String> compressorNames = new HashSet<>();
    compressorNames.add("BZIP2");
    byte[] signature = new byte[12];
    signature[0] = 'B';
    signature[1] = 'Z';
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(signature);
    assertEquals("BZIP2", CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectGZIP_GGxZ4_hOHr0() throws CompressorException, IOException {
    Set<String> compressorNames = new HashSet<>();
    compressorNames.add("GZIP");
    byte[] signature = new byte[12];
    signature[0] = (byte) 0x1F;
    signature[1] = (byte) 0x8B;
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(signature);
    assertEquals("GZIP", CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectPACK200_cTqw5_POSr0() throws CompressorException, IOException {
    Set<String> compressorNames = new HashSet<>();
    compressorNames.add("PACK200");
    byte[] signature = new byte[12];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x41;
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(signature);
    assertEquals("PACK200", CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectSNAPPY_FRAMED_ZFsI6_UrUB0() throws CompressorException, IOException {
    Set<String> compressorNames = new HashSet<>();
    compressorNames.add("SNAPPY_FRAMED");
    byte[] signature = new byte[12];
    signature[0] = (byte) 0xFF;
    signature[1] = (byte) 0x06;
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(signature);
    assertEquals("SNAPPY_FRAMED", CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectZ_JhzV7_EoGZ0() throws CompressorException, IOException {
    Set<String> compressorNames = new HashSet<>();
    compressorNames.add("Z");
    byte[] signature = new byte[12];
    signature[0] = (byte) 0x1F;
    signature[1] = (byte) 0x8B;
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(signature);
    assertEquals("Z", CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectDEFLATE_vKDf8_aXMz0() throws CompressorException, IOException {
    Set<String> compressorNames = new HashSet<>();
    compressorNames.add("DEFLATE");
    byte[] signature = new byte[12];
    signature[0] = (byte) 0x49;
    signature[1] = (byte) 0x5E;
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(signature);
    assertEquals("DEFLATE", CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectXZ_ZNSO9_UHOM0() throws CompressorException, IOException {
    Set<String> compressorNames = new HashSet<>();
    compressorNames.add("XZ");
    byte[] signature = new byte[12];
    signature[0] = (byte) 0xFD;
    signature[1] = (byte) 0x37;
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(signature);
    assertEquals(CompressorStreamFactory.getXz(), CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_WfzX0() {
    assertEquals("xz", CompressorStreamFactory.getXz());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_qabK0() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(result);
    assertNotEquals(0, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_Pmal0() {
    String gzip = CompressorStreamFactory.getGzip();
    assertNotNull(gzip);
    assertEquals("gz", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_URUF0() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertNotNull(result);
    assertTrue(!result.isEmpty());
}
}