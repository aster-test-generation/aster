/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_1_cPzD0() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2, 3};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_2_oxjj1() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2, 4};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 3, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_3_Vqop2() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_4_KcUS3() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2, 3, 0};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 3, buffer2, 0, 4, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_5_QXAz4() {
    byte[] buffer1 = {1, 2, 3, 0};
    byte[] buffer2 = {1, 2, 3};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 4, buffer2, 0, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_6_OLlL5() {
    byte[] buffer1 = {1, 2, 3, 4};
    byte[] buffer2 = {1, 2, 3, 0};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 4, buffer2, 0, 4, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_7_Dkfu6() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2, 3};
    assertTrue(ArchiveUtils.isEqual(buffer1, 1, 2, buffer2, 1, 2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_8_FkmU7() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2, 4};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, 2, buffer2, 1, 2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_9_JvNY8() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, 2, buffer2, 1, 1, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_10_kFQP9() {
    byte[] buffer1 = {1, 2, 3, 0};
    byte[] buffer2 = {1, 2, 3, 0};
    assertTrue(ArchiveUtils.isEqual(buffer1, 1, 3, buffer2, 1, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothNull_ZBPr0() {
    assertTrue(ArchiveUtils.isEqual(null, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_FirstNull_SecondNotNull_gNcS1() {
    assertFalse(ArchiveUtils.isEqual(null, new byte[1]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_FirstNotNull_SecondNull_GIxl2() {
    assertFalse(ArchiveUtils.isEqual(new byte[1], null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothEmpty_SfmA3() {
    assertTrue(ArchiveUtils.isEqual(new byte[0], new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothEqual_YevR4() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2, 3};
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothNotEqual_iddn5() {
    byte[] buffer1 = {1, 2, 3};
    byte[] buffer2 = {1, 2, 4};
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_XVJL0() {
    String inputString = "Hello World";
    byte[] expectedBytes = inputString.getBytes(java.nio.charset.StandardCharsets.US_ASCII);
    byte[] actualBytes = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expectedBytes, actualBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_ControlCharacters_DLPp0() {
    String input = "\u0000\u0001\u0002";
    String expected = "???";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_SpecialCharacters_dSeZ1() {
    String input = "!@#$";
    String expected = "!@#$";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_EmptyString_jgVF3() {
    String input = "";
    String expected = "";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_Null_TdKh4() {
    String input = null;
    String expected = null;
    String actual = ArchiveUtils.sanitize(input);
    assert actual == expected;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_UniCodeBlock_DgXQ5() {
    String input = "\u2000";
    String expected = "?";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_NormalString_Nxrt6() {
    String input = "HelloWorld";
    String expected = "HelloWorld";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_BothArraysAreEqual_WSrd0() {
    byte[] buffer1 = {1, 2, 3, 4, 5};
    byte[] buffer2 = {1, 2, 3, 4, 5};
    boolean result = ArchiveUtils.isEqual(buffer1, buffer2, false);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_dnPa0() {
    String expected = "Hello";
    byte[] buffer = expected.getBytes(java.nio.charset.StandardCharsets.US_ASCII);
    int offset = 0;
    int length = buffer.length;
    assertTrue(ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisArrayZero_withNonZeroArray_NJFN0() {
    byte[] a = {1, 2, 3, 4, 5};
    assertFalse(ArchiveUtils.isArrayZero(a, a.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisArrayZero_withZeroArray_RJyr1() {
    byte[] a = {0, 0, 0, 0, 0};
    assertTrue(ArchiveUtils.isArrayZero(a, a.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisArrayZero_withEmptyArray_VecL2() {
    byte[] a = {};
    assertTrue(ArchiveUtils.isArrayZero(a, a.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_fkvZ0() {
    byte[] inputBytes = "Hello World".getBytes();
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("Hello World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SYXB0() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_wmbN0() {
    String expected = "Hello";
    byte[] buffer = expected.getBytes();
    assertTrue(ArchiveUtils.matchAsciiBuffer(expected, buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_FjUc0() {
    byte[] inputBytes = "Hello World!".getBytes();
    String result = ArchiveUtils.toAsciiString(inputBytes, 0, inputBytes.length);
    assertEquals("Hello World!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_ZLue0() {
    byte[] buffer1 = new byte[] {1, 2, 3};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertTrue(ArchiveUtils.isEqualWithNull(buffer1, 0, 3, buffer2, 0, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_LongString_sHdV2_IARi0() {
    int maxLength = 100; // Replace with the actual maximum sanitized name length
    String input = new String(new char[maxLength + 1]).replace('\0', 'a');
    String expected = new String(new char[maxLength - 3]).replace('\0', 'a') + "...";
    String actual = ArchiveUtils.sanitize(input);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_DirectoryEntry_WXeN0_tJQP0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("directory/");
    entry.setInternalAttributes((int) 0x04000000); // Set directory attribute
    String result = ArchiveUtils.toString(entry);
    assertEquals("d       0 directory/", result);
}
}