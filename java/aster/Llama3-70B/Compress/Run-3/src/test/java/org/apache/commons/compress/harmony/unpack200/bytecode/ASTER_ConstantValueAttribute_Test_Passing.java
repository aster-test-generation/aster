/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_HTZN0() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertTrue(attribute.equals(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SuperClass_KdGe1() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    Object obj = new Object();
    assertFalse(attribute.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_SJsA2() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ByteCode differentClass = new ByteCode(1);
    assertFalse(attribute.equals(differentClass));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameEntry_GpGS3() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute1 = new ConstantValueAttribute(entry);
    ConstantValueAttribute attribute2 = new ConstantValueAttribute(entry);
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentEntry_UmZa4() {
    ByteCode entry1 = new ByteCode(1);
    ByteCode entry2 = new ByteCode(2);
    ConstantValueAttribute attribute1 = new ConstantValueAttribute(entry1);
    ConstantValueAttribute attribute2 = new ConstantValueAttribute(entry2);
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_gIgY0() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(entry);
    assertEquals("Constant:" + entry.toString(), constantValueAttribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_bGTF0() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] result = constantValueAttribute.getNestedClassFileEntries();
    assert(result.length == 2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_HPkm0() {
    ByteCode byteCode = new ByteCode(1);
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(byteCode);
    assertEquals(2, constantValueAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_asSe0() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(entry);
    int result = constantValueAttribute.hashCode();
    assertEquals(31 * (entry.hashCode() + 1), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_zxTx1() {
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(null);
    int result = constantValueAttribute.hashCode();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody_ZdFq0_Cywb0() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(entry);
    constantValueAttribute.writeBody(dos);
    assertEquals(2, bos.size());
}
}