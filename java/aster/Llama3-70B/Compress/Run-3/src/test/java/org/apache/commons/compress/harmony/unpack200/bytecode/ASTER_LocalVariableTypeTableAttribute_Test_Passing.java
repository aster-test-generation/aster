/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber3_UJMj2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{}, new CPUTF8[]{}, new int[]{});
    List<Integer> byteCodeOffsets = Arrays.asList(1, 2, 3, 4, 5);
    try {
        attribute.renumber(byteCodeOffsets);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCodeLength_lnku0_AlAU0() {
    LocalVariableTypeTableAttribute localVariableTypeTableAttribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("name")}, new CPUTF8[]{new CPUTF8("signature")}, new int[]{1});
    LocalVariableTypeTableAttribute.setAttributeName(new CPUTF8("attributeName"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody1_BdPf0_qbUt0() throws IOException {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(2, new int[]{1, 2}, new int[]{3, 4}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("signature1"), new CPUTF8("signature2")}, new int[]{5, 6});
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    attribute.writeBody(dos);
    byte[] bytes = bos.toByteArray();
    assertArrayEquals(new byte[]{0, 2, 0, 1, 0, 3, 0, 0, 0, 5, 0, 2, 0, 4, 0, 1, 0, 6}, bytes);
}
}