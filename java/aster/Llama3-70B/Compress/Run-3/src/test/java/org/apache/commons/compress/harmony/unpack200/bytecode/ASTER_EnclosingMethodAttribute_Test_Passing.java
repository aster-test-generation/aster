/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_EnclosingMethodAttribute_Test_Passing {
EnclosingMethodAttribute enclosingmethodattribute;
private ClassConstantPool pool;
private int methodIndex = 1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody_wMwc0_ZYlZ0_1() throws IOException {
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("name");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptor = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("descriptor");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType method = new org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType(name, descriptor, 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPClass cpClass = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass(new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("className"), 2);
    EnclosingMethodAttribute enclosingMethodAttribute = new EnclosingMethodAttribute(cpClass, method);
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    enclosingMethodAttribute.writeBody(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals((short) 2, bytes[0] << 8 | bytes[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody_wMwc0_ZYlZ0_2() throws IOException {
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("name");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptor = new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("descriptor");
    org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType method = new org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType(name, descriptor, 1);
    org.apache.commons.compress.harmony.unpack200.bytecode.CPClass cpClass = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass(new org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8("className"), 2);
    EnclosingMethodAttribute enclosingMethodAttribute = new EnclosingMethodAttribute(cpClass, method);
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.DataOutputStream dos = new java.io.DataOutputStream(bos);
    enclosingMethodAttribute.writeBody(dos);
    byte[] bytes = bos.toByteArray();
    assertEquals((short) 1, bytes[2] << 8 | bytes[3]);}
}