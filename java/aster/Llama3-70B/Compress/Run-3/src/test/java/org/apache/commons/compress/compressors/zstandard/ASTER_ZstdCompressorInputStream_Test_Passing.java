/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_xbdj0_vFJp0() throws IOException {
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    ZstdCompressorInputStream zstdCompressorInputStream = new ZstdCompressorInputStream(in);
    zstdCompressorInputStream.close();
    assertEquals(0, in.available()); // Fix: Call available on the underlying stream
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupported_without_BufferPool_nkgX1_zAmn0() throws IOException {
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    ZstdCompressorInputStream zstdCompressorInputStream = new ZstdCompressorInputStream(in);
    org.junit.Assert.assertTrue(zstdCompressorInputStream.markSupported());
    zstdCompressorInputStream.close(); // Added this line to close the stream
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_ReturnsMinusOne_WhenEndOfFile_fkwy0_gGZv0() throws IOException {
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    ZstdCompressorInputStream zstdCompressorInputStream = new ZstdCompressorInputStream(in);
    int result = zstdCompressorInputStream.read();
    assertEquals(-1, result);
    zstdCompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_ReturnsByte_WhenInputStreamHasData_uBRg1_rtxy0() throws IOException {
    byte[] data = {1, 2, 3};
    java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(data);
    ZstdCompressorInputStream zstdCompressorInputStream = new ZstdCompressorInputStream(in);
    int result = zstdCompressorInputStream.read();
    assertEquals(1, result);
    zstdCompressorInputStream.close();
}
}