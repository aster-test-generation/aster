/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withCountryAndLocation_maUi0() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    assertEquals("countryAndLocation", unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withoutCountryAndLocation_ixmP1() {
    UnLocode unLocode = new UnLocode();
    assertEquals("", unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ONYp0() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    assertTrue(unLocode.equals(unLocode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_SameValue_vnFl1() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    assertTrue(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_DifferentValue_WNgV2() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("differentCountryAndLocation");
    assertFalse(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_fTHH3() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    assertFalse(unLocode.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_ewCw0() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    assertEquals("countryAndLocation", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringEmpty_pWhF1() {
    UnLocode unLocode = new UnLocode();
    assertEquals("", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameObject_VIHH0() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = unLocode1;
    assertTrue(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentObjectSameValue_jPlS1() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    assertTrue(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentObjectDifferentValue_NFmm2() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("differentCountryAndLocation");
    assertFalse(unLocode1.sameValueAs(unLocode2));
  }
}