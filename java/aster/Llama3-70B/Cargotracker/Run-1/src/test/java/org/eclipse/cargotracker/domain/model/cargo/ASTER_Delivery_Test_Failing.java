/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.validation.constraints.NotNull;
import java.lang.reflect.Field;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Failing {
  private HandlingEvent lastEvent;
  private RouteSpecification routeSpecification;
  private Itinerary itinerary;
  private HandlingHistory handlingHistory;
  private Delivery delivery;
  @NotNull
  private boolean misdirected;
  @Mock
  private HandlingActivity nextExpectedActivityMock;
  private Voyage currentVoyage;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;
  private boolean isUnloadedAtDestination;
  private TransportStatus transportStatus;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisMisdirected_1() throws Exception {
    lastEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    // Set the misdirected flag to true
    Field field = delivery.getClass().getDeclaredField("misdirected");
    field.setAccessible(true);
    field.setBoolean(delivery, true);
    // Test the isMisdirected method
    // Set the misdirected flag to false
    field.setBoolean(delivery, false);
    // Test the isMisdirected method again
    assertTrue(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisMisdirected_2() throws Exception {
    lastEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    // Set the misdirected flag to true
    Field field = delivery.getClass().getDeclaredField("misdirected");
    field.setAccessible(true);
    field.setBoolean(delivery, true);
    // Test the isMisdirected method
    // Set the misdirected flag to false
    field.setBoolean(delivery, false);
    // Test the isMisdirected method again
    assertFalse(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetMisdirected_HPnE0_1() throws Exception {
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    boolean misdirected = true;
    delivery.setMisdirected(misdirected);
    assertTrue(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetMisdirected_HPnE0_2() throws Exception {
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    boolean misdirected = true;
    delivery.setMisdirected(misdirected);
    assertEquals(misdirected, delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisMisdirected() throws Exception {
    lastEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    // Set the misdirected flag to true
    Field field = delivery.getClass().getDeclaredField("misdirected");
    field.setAccessible(true);
    field.setBoolean(delivery, true);
    // Test the isMisdirected method
    assertTrue(delivery.isMisdirected());
    // Set the misdirected flag to false
    field.setBoolean(delivery, false);
    // Test the isMisdirected method again
    assertFalse(delivery.isMisdirected());
  }
}