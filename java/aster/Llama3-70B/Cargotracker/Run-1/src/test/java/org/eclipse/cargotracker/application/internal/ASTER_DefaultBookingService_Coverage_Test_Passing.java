/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DefaultBookingService_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_AssignToRouteFails_gCGt2() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    Cargo cargo = mock(Cargo.class);
    Itinerary itinerary = new Itinerary();
    TrackingId trackingId = new TrackingId("123");
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    doThrow(new RuntimeException()).when(cargo).assignToRoute(itinerary);
    try {
      service.assignCargoToRoute(itinerary, trackingId);
      fail("Expected RuntimeException");
    } catch (RuntimeException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_StoreCargoFails_hGUP3() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    Cargo cargo = mock(Cargo.class);
    Itinerary itinerary = new Itinerary();
    TrackingId trackingId = new TrackingId("123");
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    doThrow(new RuntimeException()).when(cargoRepository).store(cargo);
    try {
      service.assignCargoToRoute(itinerary, trackingId);
      fail("Expected RuntimeException");
    } catch (RuntimeException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_CargoRepositoryFind_HfLT0() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("id");
    Cargo cargo = new Cargo();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    service.changeDestination(trackingId, new UnLocode("countryAndLocation"));
    verify(cargoRepository).find(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_UnLocodeNull_oyny7() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("id");
    try {
      service.changeDestination(trackingId, null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }
}