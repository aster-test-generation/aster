/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DefaultBookingService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_CargoFound_Kzwz0() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    Cargo cargo = mock(Cargo.class);
    Itinerary itinerary = new Itinerary();
    TrackingId trackingId = new TrackingId("123");
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    service.assignCargoToRoute(itinerary, trackingId);
    verify(cargo).assignToRoute(itinerary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_CargoNotFound_JjXh1() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    Itinerary itinerary = new Itinerary();
    TrackingId trackingId = new TrackingId("123");
    when(cargoRepository.find(trackingId)).thenReturn(null);
    service.assignCargoToRoute(itinerary, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_nextTrackingId_TzhB0() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.nextTrackingId()).thenReturn(new TrackingId());
    service.bookNewCargo(new UnLocode("countryAndLocation"), new UnLocode("countryAndLocation"), null);
    verify(cargoRepository, times(1)).nextTrackingId();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_logMessage_RzDT6() {
    DefaultBookingService service = new DefaultBookingService();
    Logger logger = mock(Logger.class);
    service.bookNewCargo(new UnLocode("countryAndLocation"), new UnLocode("countryAndLocation"), null);
    verify(logger, times(1)).log(Level.INFO, "Booked new cargo with tracking ID {0}", anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_returnTrackingId_HEGf7() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = service.bookNewCargo(new UnLocode("countryAndLocation"), new UnLocode("countryAndLocation"), null);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_throwException_MWyV8() {
    DefaultBookingService service = new DefaultBookingService();
    try {
      service.bookNewCargo(null, new UnLocode("countryAndLocation"), null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_CargoRepositoryStore_obBz4() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("id");
    UnLocode unLocode = new UnLocode("countryAndLocation");
    Cargo cargo = new Cargo();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    service.changeDestination(trackingId, unLocode);
    verify(cargoRepository).store(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_LoggerLog_ppde5() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("id");
    UnLocode unLocode = new UnLocode("countryAndLocation");
    Logger logger = mock(Logger.class);
    service.changeDestination(trackingId, unLocode);
    verify(logger).log(eq(Level.INFO), anyString(), any(Object[].class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_TrackingIdNull_LvXi6() {
    DefaultBookingService service = new DefaultBookingService();
    UnLocode unLocode = new UnLocode("countryAndLocation");
    try {
      service.changeDestination(null, unLocode);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_CargoNotFound_qmHs8() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("id");
    UnLocode unLocode = new UnLocode("countryAndLocation");
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.find(trackingId)).thenReturn(null);
    try {
      service.changeDestination(trackingId, unLocode);
      fail("Expected RuntimeException");
    } catch (RuntimeException e) {
    }
  }
}