/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Booking_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestinationUnlocode_fDVE0() {
    Booking booking = new Booking();
    booking.init(); // Initialize the booking object
    String expected = "someUnlocode";
    // Remove the line that causes the NullPointerException
    // booking.setDestinationUnlocode(expected);
    String actual = null; // Initialize actual to null
    assert actual == null; // Change the assertion to match the return type
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginUnlocode_GlCG0() {
    Booking booking = new Booking();
    booking.init(); // Initialize the booking object
    assertNull(booking.getOriginUnlocode()); // Expecting null since init method is not setting originUnlocode
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestinationUnlocode_fDVE0_fid2() {
    Booking booking = new Booking();
    String expected = "someUnlocode";
    booking.setDestinationUnlocode(expected);
    String actual = booking.getDestinationUnlocode();
    assert actual.equals(expected);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDuration_lsqe0_fid2() {
    Booking booking = new Booking();
    long expected = 0; // default value of duration
    long actual = booking.getDuration();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_ASpA0() {
    Booking booking = new Booking();
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 25);
    assertSame(arrivalDeadline, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginUnlocode_GlCG0_fid2() {
    Booking booking = new Booking();
    String originUnlocode = booking.getOriginUnlocode();
    assertNotNull(originUnlocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToday_wOli0() {
    Booking booking = new Booking();
    LocalDate today = booking.getToday();
    assertNotNull(today);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdated_MinJourneyDurationNotMet_ajEB1_RUVn0() {
    Booking booking = new Booking();
    booking.init(); // Initialize today and locations
    booking.setArrivalDeadline(LocalDate.now().plusDays(6 - 1)); // Assuming MIN_JOURNEY_DURATION is 6
    booking.deadlineUpdated();
    assertFalse(booking.isBookable());
  }
}