/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEventRegistrationAttempt_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocode_Zaif0() {
    UnLocode unLocode = new UnLocode("AEAJM"); // changed to a valid UN/LOCODE
    TrackingId trackingId = new TrackingId("id");
    VoyageNumber voyageNumber = new VoyageNumber("number");
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    UnLocode result = handlingEventRegistrationAttempt.getUnLocode();
    assertEquals(unLocode, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_ZTVv0() {
    UnLocode unLocode = new UnLocode("USNYC"); // changed to a valid UN/LOCODE
    VoyageNumber voyageNumber = new VoyageNumber("number");
    TrackingId trackingId = new TrackingId("id");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertNotNull(attempt.getCompletionTime()); // changed assertion to match return type
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_DwJz0() {
    UnLocode unLocode = new UnLocode("USNYC"); // Fixed UN/LOCODE
    VoyageNumber voyageNumber = new VoyageNumber("number");
    TrackingId trackingId = new TrackingId("id");
    LocalDateTime registrationDate = LocalDateTime.now();
    LocalDateTime completionDate = LocalDateTime.now();
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertEquals(completionDate, handlingEventRegistrationAttempt.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_TxWM0() {
    UnLocode unLocode = new UnLocode("USNYC"); // Changed to a valid UN/LOCODE
    VoyageNumber voyageNumber = new VoyageNumber("number");
    TrackingId trackingId = new TrackingId("id");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    TrackingId result = attempt.getTrackingId();
    assertEquals(trackingId, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_cOGd0_EEZk0() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("id"), new VoyageNumber("number"), HandlingEvent.Type.LOAD, new UnLocode("NLRTM"));
    assertEquals("HandlingEventRegistrationAttempt{registrationTime=" + handlingEventRegistrationAttempt.getRegistrationTime() + ", completionTime=" + handlingEventRegistrationAttempt.getCompletionTime() + ", trackingId=" + handlingEventRegistrationAttempt.getTrackingId() + ", voyageNumber=" + handlingEventRegistrationAttempt.getVoyageNumber() + ", type=" + handlingEventRegistrationAttempt.getType() + ", unLocode=" + handlingEventRegistrationAttempt.getUnLocode() + '}', handlingEventRegistrationAttempt.toString());
  }
}