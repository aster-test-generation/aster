/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_Ykef0() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertNotNull(eventTypes);
    assertEquals(eventTypes.size(), HandlingEvent.Type.values().length);
    for (Map.Entry<HandlingEvent.Type, HandlingEvent.Type> entry : eventTypes.entrySet()) {
      assertEquals(entry.getKey(), entry.getValue());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocation_fUKH0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("Test Location");
    assertEquals("Test Location", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_ohFA0() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now();
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_sXcS0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("12345");
    assertEquals("12345", eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_LOAD_KqJj0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    assertEquals(HandlingEvent.Type.LOAD, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_UNLOAD_aMGN1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.UNLOAD);
    assertEquals(HandlingEvent.Type.UNLOAD, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_RECEIVE_MExf2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.RECEIVE);
    assertEquals(HandlingEvent.Type.RECEIVE, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_CLAIM_QXfX3() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.CLAIM);
    assertEquals(HandlingEvent.Type.CLAIM, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_CUSTOMS_fJtZ4() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.CUSTOMS);
    assertEquals(HandlingEvent.Type.CUSTOMS, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_sameValueAs_ACow5() {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    eventLogger.setEventType(type);
    assertTrue(type.sameValueAs(eventLogger.getEventType()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_prohibitsVoyage_vkkF6() {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type type = HandlingEvent.Type.UNLOAD;
    eventLogger.setEventType(type);
    assertFalse(type.prohibitsVoyage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_multipleCalls_JaMz9() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setEventType(HandlingEvent.Type.UNLOAD);
    assertEquals(HandlingEvent.Type.UNLOAD, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_GcHN0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("12345");
    assertEquals("12345", eventLogger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_Owdw0_fid1() {
    EventLogger eventLogger = new EventLogger();
    assertEquals("M/d/yyyy h:m a", eventLogger.getCompletionTimePattern());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_MzHu0_fid1() {
    EventLogger eventLogger = new EventLogger();
    assertNull(eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_jgSu0_fid1() {
    EventLogger eventLogger = new EventLogger();
    assertNull(eventLogger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_Ykef0_1() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    for (Map.Entry<HandlingEvent.Type, HandlingEvent.Type> entry : eventTypes.entrySet()) {
    }
    assertNotNull(eventTypes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_Ykef0_2() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    for (Map.Entry<HandlingEvent.Type, HandlingEvent.Type> entry : eventTypes.entrySet()) {
    }
    assertEquals(eventTypes.size(), HandlingEvent.Type.values().length);
  }
}