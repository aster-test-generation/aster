/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DefaultBookingService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_nextTrackingId_iqiL0() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.nextTrackingId()).thenReturn(new TrackingId());
    service.bookNewCargo(new UnLocode(""), new UnLocode(""), null);
    verify(cargoRepository, times(1)).nextTrackingId();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_returnTrackingId_psPz7() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = service.bookNewCargo(new UnLocode(""), new UnLocode(""), null);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_throwException_oLYu8() {
    DefaultBookingService service = new DefaultBookingService();
    try {
      service.bookNewCargo(null, new UnLocode(""), null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }
}