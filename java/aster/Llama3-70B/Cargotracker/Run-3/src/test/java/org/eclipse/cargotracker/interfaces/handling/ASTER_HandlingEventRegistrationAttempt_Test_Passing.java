/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEventRegistrationAttempt_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_bruq0() throws Exception {
    TrackingId trackingId = new TrackingId("123");
    VoyageNumber voyageNumber = new VoyageNumber("V123");
    UnLocode unLocode = new UnLocode("USNYC");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertEquals(trackingId, attempt.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType_NsiJ0() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("id"),
            new VoyageNumber("number"),
            HandlingEvent.Type.LOAD,
            new UnLocode("countryAndLocation"));
    assertEquals(HandlingEvent.Type.LOAD, handlingEventRegistrationAttempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocode_xKka0() throws Exception {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    TrackingId trackingId = new TrackingId("id");
    VoyageNumber voyageNumber = new VoyageNumber("number");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    UnLocode result = attempt.getUnLocode();
    assertSame(unLocode, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_aXzQ0() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("id"),
            new VoyageNumber("number"),
            HandlingEvent.Type.LOAD,
            new UnLocode("countryAndLocation"));
    VoyageNumber voyageNumber = handlingEventRegistrationAttempt.getVoyageNumber();
    assertEquals(new VoyageNumber("number"), voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRegistrationTime_osXf0() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    VoyageNumber voyageNumber = new VoyageNumber("V123");
    UnLocode unLocode = new UnLocode("USNYC");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertEquals(attempt.getRegistrationTime(), attempt.getRegistrationTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_RSRl0() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 0, 0, 0),
            LocalDateTime.of(2022, 1, 1, 0, 0, 0),
            new TrackingId("id"),
            new VoyageNumber("number"),
            HandlingEvent.Type.LOAD,
            new UnLocode("countryAndLocation")
    );
    assertEquals(LocalDateTime.of(2022, 1, 1, 0, 0, 0), handlingEventRegistrationAttempt.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_hvtj0() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 0, 0, 0),
            LocalDateTime.of(2022, 1, 1, 0, 0, 0),
            new TrackingId("123"),
            new VoyageNumber("V123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USNYC")
    );
    assertEquals("HandlingEventRegistrationAttempt{registrationTime=2022-01-01T00:00, completionTime=2022-01-01T00:00, trackingId=123, voyageNumber=V123, type=LOAD, unLocode=USNYC}", handlingEventRegistrationAttempt.toString());
  }
}