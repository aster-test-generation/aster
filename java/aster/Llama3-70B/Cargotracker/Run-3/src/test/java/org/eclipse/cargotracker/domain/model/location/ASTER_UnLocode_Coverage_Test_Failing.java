/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_withNonNullUnLocode_eWVg0() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    assertTrue(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_withNullUnLocode_vssk1() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    assertFalse(unLocode1.sameValueAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_withDifferentUnLocode_kOQr2() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation1");
    UnLocode unLocode2 = new UnLocode("countryAndLocation2");
    assertFalse(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ReturnsTrue_zQUB0() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    assertTrue(unLocode.equals(unLocode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_ReturnsFalse_lxfV1() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    assertFalse(unLocode.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnsFalse_QdBp2() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    assertFalse(unLocode.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValue_ReturnsTrue_pLrc3() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    assertTrue(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentValue_ReturnsFalse_ownt4() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation1");
    UnLocode unLocode2 = new UnLocode("countryAndLocation2");
    assertFalse(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testHashCode_KmEn0_fid2() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    String unlocodeString = "countryAndLocation";
    assertEquals(unlocodeString.hashCode(), unLocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObjectDifferentConstructor_ReturnsTrue_ikCL5_gqrB0_2_fid2() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    assertTrue(unLocode1.hashCode() == unLocode2.hashCode());
  }
}