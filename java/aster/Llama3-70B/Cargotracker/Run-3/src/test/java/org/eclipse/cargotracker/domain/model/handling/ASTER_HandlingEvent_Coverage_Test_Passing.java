/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.voyage.Schedule;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEvent_Coverage_Test_Passing {
  HandlingEvent handlingEvent;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_HashCodeBuilder_hfIB0() {
    HandlingEvent handlingEvent = new HandlingEvent();
    int hashCode = handlingEvent.hashCode();
    assertNotEquals(0, hashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_appendVoyage_VSpQ2() {
    Voyage voyage = new Voyage(new VoyageNumber("V001"), new Schedule());
    HandlingEvent handlingEvent = new HandlingEvent(null, null, null, null, null, voyage);
    int hashCode = handlingEvent.hashCode();
    assertEquals(voyage.hashCode(), hashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_appendCompletionTime_CgQg3() {
    LocalDateTime completionTime = LocalDateTime.now();
    HandlingEvent handlingEvent = new HandlingEvent(null, completionTime, null, null, null, null);
    int hashCode = handlingEvent.hashCode();
    assertEquals(completionTime.hashCode(), hashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_ReturnsFalse_dPAL2() throws Exception {
    assertFalse(handlingEvent.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnsFalse_WRIO3() throws Exception {
    assertFalse(handlingEvent.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_StringBuilder_tajB0() {
    HandlingEvent handlingEvent = new HandlingEvent();
    String result = handlingEvent.toString();
    assertEquals(true, result.startsWith("\n--- Handling event ---\n"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_AppendNewLine1_hOAl2() {
    HandlingEvent handlingEvent = new HandlingEvent();
    String result = handlingEvent.toString();
    assertEquals(true, result.contains("\n"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_CompletedOn_Hszt7() {
    HandlingEvent handlingEvent = new HandlingEvent(null, LocalDateTime.now(), null, null, null, null);
    String result = handlingEvent.toString();
    assertEquals(true, result.contains("Completed on: "));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_RegisteredOn_BoRs9() {
    HandlingEvent handlingEvent = new HandlingEvent(null, null, LocalDateTime.now(), null, null, null);
    String result = handlingEvent.toString();
    assertEquals(true, result.contains("Registered on: "));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_VoyageNull_vJHf12() {
    HandlingEvent handlingEvent = new HandlingEvent();
    String result = handlingEvent.toString();
    assertEquals(false, result.contains("Voyage: "));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_ReturnValue_FKLl13() {
    HandlingEvent handlingEvent = new HandlingEvent();
    String result = handlingEvent.toString();
    assertEquals(true, result.endsWith("\n"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_Empty_tyhd15() {
    HandlingEvent handlingEvent = new HandlingEvent();
    String result = handlingEvent.toString();
    assertEquals(true, result.equals("\n--- Handling event ---\nCargo: null\nType: null\nLocation: null\nCompleted on: null\nRegistered on: null\n\n"));
  }
}