/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_uHPl0_qZvX0_1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN";
    String destinationUnLocode = "DESTINATION";
    String deadline = "DEADLINE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long diffInMillies = java.time.Duration.between(fromDate, toDate).toMillis();
    assertNotNull(transitPaths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_uHPl0_qZvX0_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN";
    String destinationUnLocode = "DESTINATION";
    String deadline = "DEADLINE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long diffInMillies = java.time.Duration.between(fromDate, toDate).toMillis();
    assertEquals(1, transitPaths.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_uHPl0_qZvX0_3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN";
    String destinationUnLocode = "DESTINATION";
    String deadline = "DEADLINE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long diffInMillies = java.time.Duration.between(fromDate, toDate).toMillis();
    assertNotNull(transitEdges);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_uHPl0_qZvX0_4() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN";
    String destinationUnLocode = "DESTINATION";
    String deadline = "DEADLINE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long diffInMillies = java.time.Duration.between(fromDate, toDate).toMillis();
    assertEquals(2, transitEdges.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_uHPl0_qZvX0_5() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN";
    String destinationUnLocode = "DESTINATION";
    String deadline = "DEADLINE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long diffInMillies = java.time.Duration.between(fromDate, toDate).toMillis();
    assertNotNull(fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_uHPl0_qZvX0_6() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN";
    String destinationUnLocode = "DESTINATION";
    String deadline = "DEADLINE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long diffInMillies = java.time.Duration.between(fromDate, toDate).toMillis();
    assertNotNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_uHPl0_qZvX0_7() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN";
    String destinationUnLocode = "DESTINATION";
    String deadline = "DEADLINE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long diffInMillies = java.time.Duration.between(fromDate, toDate).toMillis();
    assertTrue(diffInMillies >= 86400000 && diffInMillies <= 86400000 + 3600000);
  }
}