/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.service.RoutingService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DefaultBookingService_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_WhenTrackingIdIsNull_ThrowsNullPointerException_Rycn2() {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    try {
      defaultBookingService.requestPossibleRoutesForCargo(null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_logMessage_tzNw6() {
    DefaultBookingService service = new DefaultBookingService();
    Logger logger = mock(Logger.class);
    service.bookNewCargo(new UnLocode(""), new UnLocode(""), null);
    verify(logger, times(1)).log(eq(Level.INFO), eq("Booked new cargo with tracking ID {0}"), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_findOriginLocation_wXlp1_XmnX0() {
    DefaultBookingService service = new DefaultBookingService();
    RoutingService routingService = mock(RoutingService.class);
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.find(new TrackingId(""))).thenReturn(new Cargo());
    when(routingService.fetchRoutesForSpecification(null)).thenReturn(new ArrayList<Itinerary>());
    service.requestPossibleRoutesForCargo(new TrackingId(""));
    verify(cargoRepository, times(1)).find(new TrackingId(""));
    verify(routingService, times(1)).fetchRoutesForSpecification(null);
  }
}