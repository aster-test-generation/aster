/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_LocationDtoAssembler_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoList_streamingWorksCorrectly_bthA4_mZif0_1() {
    LocationDtoAssembler assembler = new LocationDtoAssembler();
    List<org.eclipse.cargotracker.domain.model.location.Location> allLocations = Arrays.asList(new org.eclipse.cargotracker.domain.model.location.Location(), new org.eclipse.cargotracker.domain.model.location.Location());
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> result = assembler.toDtoList(allLocations);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoList_streamingWorksCorrectly_bthA4_mZif0_2() {
    LocationDtoAssembler assembler = new LocationDtoAssembler();
    List<org.eclipse.cargotracker.domain.model.location.Location> allLocations = Arrays.asList(new org.eclipse.cargotracker.domain.model.location.Location(), new org.eclipse.cargotracker.domain.model.location.Location());
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> result = assembler.toDtoList(allLocations);
    assertEquals(2, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoList_withSingleLocation_returnsSingleDto_cXhD2_vJUy0_1() {
    LocationDtoAssembler assembler = new LocationDtoAssembler();
    org.eclipse.cargotracker.domain.model.location.Location location = new org.eclipse.cargotracker.domain.model.location.Location();
    List<org.eclipse.cargotracker.domain.model.location.Location> allLocations = Arrays.asList(location);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> result = assembler.toDtoList(allLocations);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoList_withSingleLocation_returnsSingleDto_cXhD2_vJUy0_2() {
    LocationDtoAssembler assembler = new LocationDtoAssembler();
    org.eclipse.cargotracker.domain.model.location.Location location = new org.eclipse.cargotracker.domain.model.location.Location();
    List<org.eclipse.cargotracker.domain.model.location.Location> allLocations = Arrays.asList(location);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> result = assembler.toDtoList(allLocations);
    assertEquals(1, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoList_collectingWorksCorrectly_JWlA6_itZD0_3() {
    LocationDtoAssembler assembler = new LocationDtoAssembler();
    List<org.eclipse.cargotracker.domain.model.location.Location> allLocations = Arrays.asList(new org.eclipse.cargotracker.domain.model.location.Location(), new org.eclipse.cargotracker.domain.model.location.Location());
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> result = assembler.toDtoList(allLocations);
    assertTrue(result instanceof java.util.ArrayList);
  }
}