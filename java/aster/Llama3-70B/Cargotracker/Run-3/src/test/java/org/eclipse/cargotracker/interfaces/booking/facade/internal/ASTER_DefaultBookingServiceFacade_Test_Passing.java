/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_1() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_2() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_3() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_4() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getOriginCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_5() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_6() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getFinalDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_7() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getFinalDestinationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_8() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getFinalDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_9() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getNextLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_10() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_11() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_12() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getLastKnownLocationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_13() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_14() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_knCX0_15() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute.getLegs());
  }
}