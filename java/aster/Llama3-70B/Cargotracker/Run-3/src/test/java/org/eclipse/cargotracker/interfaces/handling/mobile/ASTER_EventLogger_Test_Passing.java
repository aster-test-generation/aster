/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.model.SelectItem;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_pujF0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_QKFV0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String voyageNumber = eventLogger.getVoyageNumber();
    assertNotNull(voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_tvAP0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime expected = eventLogger.getCompletionTime();
    LocalDateTime actual = eventLogger.getCompletionTime();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_LxRs0_1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    for (HandlingEvent.Type type : HandlingEvent.Type.values()) {
    }
    assertEquals(eventTypes.size(), HandlingEvent.Type.values().length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_HCyJ0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now();
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocation_RaXJ0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("Test Location");
    assertEquals("Test Location", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_tqLa0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("12345");
    assertEquals("12345", eventLogger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_wePj0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    assertEquals("yyyy-MM-dd HH:mm:ss", eventLogger.getCompletionTimePattern());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_sMhr0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> voyages = eventLogger.getVoyages();
    assertNotNull(voyages);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_jCKv0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type type = eventLogger.getEventType();
    assertNotNull(type);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIds_ZLkv0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = eventLogger.getTrackingIds();
    assertNotNull(trackingIds);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocations_Cnsk0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> locations = eventLogger.getLocations();
    assertNotNull(locations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_kNrW0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String expected = null; // or any other expected value
    String actual = eventLogger.getLocation();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_JDkd0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("12345");
    assertEquals("12345", eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_null_YgzS8() throws Exception {
    EventLogger eventLogger = new EventLogger();
    try {
      eventLogger.setEventType(null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }
}