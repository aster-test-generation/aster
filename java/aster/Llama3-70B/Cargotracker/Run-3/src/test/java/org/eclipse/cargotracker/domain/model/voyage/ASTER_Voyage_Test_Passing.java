/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Voyage_Test_Passing {
  Voyage voyage;
  VoyageNumber voyageNumber;
  Schedule schedule;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ReturnsTrue() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    assertTrue(voyage.equals(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_ReturnsFalse() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    assertFalse(voyage.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnsFalse() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    assertFalse(voyage.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameIdentity_ReturnsTrue() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    Voyage sameVoyage = new Voyage(voyageNumber, schedule);
    assertTrue(voyage.equals(sameVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentIdentity_ReturnsFalse() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    Voyage differentVoyage = new Voyage(new VoyageNumber("456"), new Schedule());
    assertFalse(voyage.equals(differentVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_rcBg0() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    Schedule result = voyage.getSchedule();
    assertEquals(schedule, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_JcFa0() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertEquals("Voyage " + voyageNumber.toString(), voyage.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_rLbC0() throws Exception {
    Schedule schedule = new Schedule();
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Voyage voyage = new Voyage(voyageNumber, schedule);
    VoyageNumber result = voyage.getVoyageNumber();
    assertEquals(voyageNumber, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_Rlll0() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expected = voyageNumber.hashCode();
    int actual = voyage.hashCode();
    assert expected == actual;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_etiY0() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertTrue(voyage.equals(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_CMCm1() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_tnXF2() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentVoyage_Jtya3() throws Exception {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    assertFalse(voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_SameVoyageNumber_OfuL0() throws Exception {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("123"), new Schedule());
    assertTrue(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_DifferentVoyageNumber_bMEC1() throws Exception {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    assertFalse(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_NullVoyage_uLPR2() throws Exception {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage1.sameIdentityAs(null));
  }
}