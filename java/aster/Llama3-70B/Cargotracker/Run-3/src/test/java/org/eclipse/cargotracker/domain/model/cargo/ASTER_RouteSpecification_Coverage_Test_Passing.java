/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RouteSpecification_Coverage_Test_Passing {
  RouteSpecification routespecification;

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_SRaX0() throws Exception {
    routespecification = new RouteSpecification();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_srCB1() throws Exception {
    assertFalse(routespecification.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentClass_QVyL2() throws Exception {
    Object obj = new Object();
    assertFalse(routespecification.equals(obj));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_PsXz3() throws Exception {
    RouteSpecification sameObject = routespecification;
    assertTrue(routespecification.equals(sameObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedBy_ItineraryIsNull_ReturnsFalse_EGbI0() {
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = null;
    assertFalse(routeSpecification.isSatisfiedBy(itinerary));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_HashCodeBuilder_zlbI0() {
    RouteSpecification routeSpecification = new RouteSpecification();
    int hashCode = routeSpecification.hashCode();
    assert hashCode != 0; // hashCode should not be 0
  }
}