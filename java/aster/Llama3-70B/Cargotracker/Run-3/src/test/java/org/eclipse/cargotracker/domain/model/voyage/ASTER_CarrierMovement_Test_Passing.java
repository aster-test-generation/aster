/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CarrierMovement_Test_Passing {
  private LocalDateTime departureTime;
  private CarrierMovement carriermovement;
  private LocalDateTime arrivalTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureTime_bfFw0() throws Exception {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    Location departureLocation = new Location(unLocode1, "departureLocation");
    Location arrivalLocation = new Location(unLocode2, "arrivalLocation");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    assertEquals(departureTime, carrierMovement.getDepartureTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_zYAC0() throws Exception {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    Location departureLocation = new Location(unLocode, "departureName");
    Location arrivalLocation = new Location(new UnLocode(), "arrivalName");
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, LocalDateTime.now(), LocalDateTime.now());
    Location result = carrierMovement.getDepartureLocation();
    assertEquals(departureLocation, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_MHtW0() throws Exception {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    Location departureLocation = new Location(unLocode1, "departureName");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    Location arrivalLocation = new Location(unLocode2, "arrivalName");
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, LocalDateTime.now(), LocalDateTime.now());
    CarrierMovement carrierMovement2 = new CarrierMovement(departureLocation, arrivalLocation, LocalDateTime.now(), LocalDateTime.now());
    assertEquals(carrierMovement.hashCode(), carrierMovement2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_soGz0() throws Exception {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    Location departureLocation = new Location(unLocode1, "departureName");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    Location arrivalLocation = new Location(unLocode2, "arrivalName");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    assertEquals(arrivalTime, carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_hMga0() throws Exception {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    Location departureLocation = new Location(unLocode1, "departureName");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    Location arrivalLocation = new Location(unLocode2, "arrivalName");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    Location result = carrierMovement.getArrivalLocation();
    assertEquals(arrivalLocation, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ReturnsTrue_Kvdp0() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertTrue(carrierMovement.equals(carrierMovement));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_ReturnsFalse_RSzA1() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertFalse(carrierMovement.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnsFalse_TwdL2() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertFalse(carrierMovement.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_ReturnsTrue_tGdE3() throws Exception {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    Location location1 = new Location(unLocode1, "name");
    Location location2 = new Location(unLocode2, "name");
    CarrierMovement carrierMovement1 = new CarrierMovement(location1, location2, LocalDateTime.now(), LocalDateTime.now());
    CarrierMovement carrierMovement2 = new CarrierMovement(location1, location2, LocalDateTime.now(), LocalDateTime.now());
    assertTrue(carrierMovement1.equals(carrierMovement2));
  }
}