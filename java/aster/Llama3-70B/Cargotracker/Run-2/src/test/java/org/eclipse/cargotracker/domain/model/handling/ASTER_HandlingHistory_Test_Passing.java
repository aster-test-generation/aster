/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMostRecentlyCompletedEvent_EmptyList_Zqnb0() {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<>());
    assertNull(handlingHistory.getMostRecentlyCompletedEvent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ReturnsTrue_GrZC0() {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<>());
    assertTrue(handlingHistory.equals(handlingHistory));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_ReturnsFalse_DOQj1() {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<>());
    assertFalse(handlingHistory.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnsFalse_UmlP2() {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<>());
    assertFalse(handlingHistory.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValue_ReturnsTrue_jpNP3() {
    Collection<HandlingEvent> handlingEvents = new ArrayList<>();
    HandlingHistory handlingHistory1 = new HandlingHistory(handlingEvents);
    HandlingHistory handlingHistory2 = new HandlingHistory(new ArrayList<>(handlingEvents));
    assertTrue(handlingHistory1.equals(handlingHistory2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllHandlingEvents_HAZE0() {
    Collection<HandlingEvent> handlingEvents = new ArrayList<>();
    HandlingHistory handlingHistory = new HandlingHistory(handlingEvents);
    List<HandlingEvent> result = handlingHistory.getAllHandlingEvents();
    assertEquals(handlingEvents, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_UQFR0() {
    Collection<HandlingEvent> handlingEvents = new ArrayList<>();
    HandlingHistory handlingHistory = new HandlingHistory(handlingEvents);
    assertEquals(handlingEvents.hashCode(), handlingHistory.hashCode());
  }
}