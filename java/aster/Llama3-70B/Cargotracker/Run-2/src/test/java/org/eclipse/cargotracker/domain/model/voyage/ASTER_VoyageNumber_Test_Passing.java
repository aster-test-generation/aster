/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withParameter_zgyb0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    assertEquals("123", voyageNumber.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withoutParameter_zhBo1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    assertNull(voyageNumber.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_hKOY0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    assertTrue(voyageNumber.equals(voyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_wemz1() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    assertFalse(voyageNumber.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ERSU2() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    assertFalse(voyageNumber.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentVoyageNumber_TeDc3() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("456");
    assertFalse(voyageNumber1.equals(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameValue_BMyc0() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("123");
    assertTrue(voyageNumber1.sameValueAs(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentValue_dqum1() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("456");
    assertFalse(voyageNumber1.sameValueAs(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_NullValue_IIPE2() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    assertFalse(voyageNumber1.sameValueAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withNumber_QQvJ0() {
    VoyageNumber voyageNumber = new VoyageNumber("1234");
    assertEquals("1234", voyageNumber.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withoutNumber_Hwcz1() {
    VoyageNumber voyageNumber = new VoyageNumber();
  }
}