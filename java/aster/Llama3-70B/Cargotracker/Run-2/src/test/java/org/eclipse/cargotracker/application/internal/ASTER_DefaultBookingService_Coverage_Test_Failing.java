/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.*;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.service.RoutingService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DefaultBookingService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_CargoNotFound_CnNk1() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    TrackingId trackingId = new TrackingId("123");
    Itinerary itinerary = new Itinerary();
    when(cargoRepository.find(trackingId)).thenReturn(null);
    service.assignCargoToRoute(itinerary, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_nextTrackingId_plii0() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.nextTrackingId()).thenReturn(new TrackingId());
    service.bookNewCargo(new UnLocode(""), new UnLocode(""), null);
    verify(cargoRepository).nextTrackingId();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_logMessage_ZdWv6() {
    DefaultBookingService service = new DefaultBookingService();
    Logger logger = mock(Logger.class);
    service.bookNewCargo(new UnLocode(""), new UnLocode(""), null);
    verify(logger).log(Level.INFO, "Booked new cargo with tracking ID {0}", anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_returnTrackingId_Pyzg7() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = new TrackingId();
    assertEquals(trackingId, service.bookNewCargo(new UnLocode(""), new UnLocode(""), null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_KNah0() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    RoutingService routingService = mock(RoutingService.class);
    TrackingId trackingId = new TrackingId("id");
    Cargo cargo = mock(Cargo.class);
    RouteSpecification routeSpecification = new RouteSpecification();
    List<Itinerary> itineraries = new ArrayList<>();
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    when(cargo.getRouteSpecification()).thenReturn(routeSpecification);
    when(routingService.fetchRoutesForSpecification(routeSpecification)).thenReturn(itineraries);
    List<Itinerary> result = service.requestPossibleRoutesForCargo(trackingId);
    assertSame(itineraries, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_KNah0_fid3() {
    DefaultBookingService service = new DefaultBookingService();
    CargoRepository cargoRepository = mock(CargoRepository.class);
    RoutingService routingService = mock(RoutingService.class);
    TrackingId trackingId = new TrackingId("id");
    Cargo cargo = new Cargo();
    List<Itinerary> itineraries = new ArrayList<>();
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    when(cargo.getRouteSpecification()).thenReturn(new RouteSpecification());
    when(routingService.fetchRoutesForSpecification(any(RouteSpecification.class))).thenReturn(itineraries);
    List<Itinerary> result = service.requestPossibleRoutesForCargo(trackingId);
    assertEquals(itineraries, result);
  }
}