/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withCountryAndLocation_hitX0_fid1() {
    UnLocode unLocode = new UnLocode("USNYC"); // valid UN/LOCODE
    assertEquals("USNYC", unLocode.toString()); // changed assertion type to match return type
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withoutCountryAndLocation_AaPX1_fid1() {
    UnLocode unLocode = new UnLocode();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_fcxx0_fid1() {
    UnLocode unLocode = new UnLocode();
    assertTrue(unLocode.equals(unLocode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_SameValue_CAxY1_fid1() {
    UnLocode unLocode1 = new UnLocode("USNYC"); // valid UN/LOCODE
    UnLocode unLocode2 = new UnLocode("USNYC"); // valid UN/LOCODE
    assertTrue(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_DifferentValue_oIgK2_fid1() {
    UnLocode unLocode1 = new UnLocode("USNYC"); // valid UN/LOCODE
    UnLocode unLocode2 = new UnLocode("USLAX"); // valid UN/LOCODE
    assertFalse(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_daby3_fid1() {
    UnLocode unLocode = new UnLocode();
    assertFalse(unLocode.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withCountryAndLocation_gaQU0_fid1() {
    UnLocode unLocode = new UnLocode("USNYC"); // valid UN/LOCODE
    assertEquals("USNYC", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withoutCountryAndLocation_XlNv1_fid1() {
    UnLocode unLocode = new UnLocode();
    assertNull(unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameObject_XHzt0_fid1() {
    UnLocode unLocode1 = new UnLocode("USNYC"); // valid UN/LOCODE
    UnLocode unLocode2 = unLocode1;
    assertTrue(unLocode1.hashCode() == unLocode2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentObjectSameValue_UfBB1_fid1() {
    UnLocode unLocode1 = new UnLocode("USNYC"); // Changed to a valid UN/LOCODE
    UnLocode unLocode2 = new UnLocode("USNYC"); // Changed to a valid UN/LOCODE
    assertTrue(unLocode1.hashCode() == unLocode2.hashCode()); // Changed assertion type
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentObjectDifferentValue_hvwP2_fid1() {
    UnLocode unLocode1 = new UnLocode("NLRTM"); // valid UN/LOCODE
    UnLocode unLocode2 = new UnLocode("USNYC"); // valid UN/LOCODE
    assertFalse(unLocode1.sameValueAs(unLocode2));
  }
}