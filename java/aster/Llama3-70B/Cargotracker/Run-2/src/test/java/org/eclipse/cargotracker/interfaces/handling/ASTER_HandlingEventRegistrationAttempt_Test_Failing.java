/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEventRegistrationAttempt_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocode_fOfE0_NrxV0_fid1() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    TrackingId trackingId = new TrackingId("id");
    VoyageNumber voyageNumber = new VoyageNumber("number");
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    UnLocode result = handlingEventRegistrationAttempt.getUnLocode();
    assertEquals(unLocode, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType_PQwY0_ZJgN0_fid1() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    VoyageNumber voyageNumber = new VoyageNumber("number");
    TrackingId trackingId = new TrackingId("id");
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertEquals(HandlingEvent.Type.LOAD, handlingEventRegistrationAttempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRegistrationTime_Mjpd0_SnGd0_fid1() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    VoyageNumber voyageNumber = new VoyageNumber("number");
    TrackingId trackingId = new TrackingId("id");
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertEquals(LocalDateTime.now(), handlingEventRegistrationAttempt.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_blmZ0_ATOr0_fid1() {
    TrackingId trackingId = new TrackingId("id");
    VoyageNumber voyageNumber = new VoyageNumber("number");
    UnLocode unLocode = new UnLocode("countryAndLocation");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    TrackingId result = attempt.getTrackingId();
    assertEquals(trackingId, result);
  }
}