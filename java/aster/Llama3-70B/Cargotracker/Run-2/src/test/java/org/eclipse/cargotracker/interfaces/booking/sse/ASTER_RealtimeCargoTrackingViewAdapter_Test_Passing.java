/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import java.util.EnumMap;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.eclipse.cargotracker.domain.model.cargo.RoutingStatus;
import org.eclipse.cargotracker.domain.model.cargo.TransportStatus;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingViewAdapter_Test_Passing {
  private Cargo cargo;
  private RealtimeCargoTrackingViewAdapter realtimecargotrackingviewadapter;
  private Delivery delivery;
  private EnumMap<RoutingStatus, String> routingStatusLabels;
  private TransportStatus transportStatus;
  @Mock
  private RoutingStatus routingStatus;
  @Mock
  private LocationViewAdapter lastKnownLocation;
  private EnumMap<TransportStatus, String> transportStatusLabels;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_NotRouted() throws Exception {
    cargo = Mockito.mock(Cargo.class);
    delivery = Mockito.mock(Delivery.class);
    transportStatus = Mockito.mock(TransportStatus.class);
    routingStatus = Mockito.mock(RoutingStatus.class);
    Mockito.when(cargo.getDelivery()).thenReturn(delivery);
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    Mockito.when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.NOT_ROUTED);
    assertEquals("NOT_ROUTED", realtimecargotrackingviewadapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_Misrouted() throws Exception {
    cargo = Mockito.mock(Cargo.class);
    delivery = Mockito.mock(Delivery.class);
    transportStatus = Mockito.mock(TransportStatus.class);
    routingStatus = Mockito.mock(RoutingStatus.class);
    Mockito.when(cargo.getDelivery()).thenReturn(delivery);
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    Mockito.when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.MISROUTED);
    assertEquals("MISROUTED", realtimecargotrackingviewadapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_Misdirected() throws Exception {
    cargo = Mockito.mock(Cargo.class);
    delivery = Mockito.mock(Delivery.class);
    transportStatus = Mockito.mock(TransportStatus.class);
    routingStatus = Mockito.mock(RoutingStatus.class);
    Mockito.when(cargo.getDelivery()).thenReturn(delivery);
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    Mockito.when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.ROUTED);
    Mockito.when(delivery.isMisdirected()).thenReturn(true);
    assertEquals("MISDIRECTED", realtimecargotrackingviewadapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_AtDestination() throws Exception {
    cargo = Mockito.mock(Cargo.class);
    delivery = Mockito.mock(Delivery.class);
    transportStatus = Mockito.mock(TransportStatus.class);
    routingStatus = Mockito.mock(RoutingStatus.class);
    Mockito.when(cargo.getDelivery()).thenReturn(delivery);
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    Mockito.when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.ROUTED);
    Mockito.when(delivery.isMisdirected()).thenReturn(false);
    Mockito.when(delivery.isUnloadedAtDestination()).thenReturn(true);
    assertEquals("AT_DESTINATION", realtimecargotrackingviewadapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_TransportStatus() throws Exception {
    cargo = Mockito.mock(Cargo.class);
    delivery = Mockito.mock(Delivery.class);
    transportStatus = Mockito.mock(TransportStatus.class);
    routingStatus = Mockito.mock(RoutingStatus.class);
    Mockito.when(cargo.getDelivery()).thenReturn(delivery);
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    Mockito.when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.ROUTED);
    Mockito.when(delivery.isMisdirected()).thenReturn(false);
    Mockito.when(delivery.isUnloadedAtDestination()).thenReturn(false);
    Mockito.when(delivery.getTransportStatus()).thenReturn(transportStatus);
    Mockito.when(transportStatus.toString()).thenReturn("IN_TRANSIT");
    assertEquals("IN_TRANSIT", realtimecargotrackingviewadapter.getStatusCode());
  }
}