/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ItinerarySelection_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditates_sABH0() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertNotNull(routeCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertNotNull(cargoRoute);
    assertEquals("finalDestinationName", cargoRoute.getFinalDestinationName());
    assertEquals("finalDestination", cargoRoute.getFinalDestination());
    assertEquals("trackingId", cargoRoute.getTrackingId());
    assertEquals("finalDestinationCode", cargoRoute.getFinalDestinationCode());
    assertEquals("originCode", cargoRoute.getOriginCode());
    assertEquals("nextLocation", cargoRoute.getNextLocation());
    assertEquals("originName", cargoRoute.getOriginName());
    assertEquals("origin", cargoRoute.getOrigin());
    assertEquals("arrivalDeadline", cargoRoute.getArrivalDeadline());
    assertEquals("lastKnownLocationName", cargoRoute.getLastKnownLocationName());
    assertEquals("lastKnownLocation", cargoRoute.getLastKnownLocation());
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
    assertNotNull(cargoRoute.getLegs());
    assertEquals("lastKnownLocationCode", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCandidates_XDII0() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> expected = new ArrayList<>();
    List<RouteCandidate> actual = itinerarySelection.getRouteCandidates();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_yVVd0() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_1() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_2() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("finalDestinationName", cargoRoute.getFinalDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_3() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("finalDestination", cargoRoute.getFinalDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_4() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_5() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("finalDestinationCode", cargoRoute.getFinalDestinationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_6() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("originCode", cargoRoute.getOriginCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_7() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("nextLocation", cargoRoute.getNextLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_8() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("originName", cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_9() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("origin", cargoRoute.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_10() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("arrivalDeadline", cargoRoute.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_11() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("lastKnownLocationName", cargoRoute.getLastKnownLocationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_12() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("lastKnownLocation", cargoRoute.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_13() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_14() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertNotNull(cargoRoute.getLegs());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_EPkk0_15() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("lastKnownLocationCode", cargoRoute.getLastKnownLocationCode());
  }
}