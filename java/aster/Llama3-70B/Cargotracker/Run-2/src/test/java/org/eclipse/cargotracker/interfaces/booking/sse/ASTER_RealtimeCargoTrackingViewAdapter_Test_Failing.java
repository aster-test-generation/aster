/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import java.util.EnumMap;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.eclipse.cargotracker.domain.model.cargo.RoutingStatus;
import org.eclipse.cargotracker.domain.model.cargo.TransportStatus;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingViewAdapter_Test_Failing {
  private Cargo cargo;
  private RealtimeCargoTrackingViewAdapter realtimecargotrackingviewadapter;
  private Delivery delivery;
  private EnumMap<RoutingStatus, String> routingStatusLabels;
  private TransportStatus transportStatus;
  @Mock
  private RoutingStatus routingStatus;
  @Mock
  private LocationViewAdapter lastKnownLocation;
  private EnumMap<TransportStatus, String> transportStatusLabels;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_LastKnownLocation() throws Exception {
    cargo = mock(Cargo.class);
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(transportStatus);
    when(transportStatus.equals(TransportStatus.NOT_RECEIVED)).thenReturn(false);
    when(realtimecargotrackingviewadapter.getLastKnownLocation()).thenReturn(lastKnownLocation);
    assertEquals(lastKnownLocation, realtimecargotrackingviewadapter.getLocation());
  }
}