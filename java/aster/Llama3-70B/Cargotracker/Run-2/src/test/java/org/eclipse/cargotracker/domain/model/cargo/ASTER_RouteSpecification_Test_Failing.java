/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RouteSpecification_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_ReturnsTrue_woNx3_obgf0() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    UnLocode unLocode2 = new UnLocode("countryAndLocation");
    Location location1 = new Location(unLocode1, "name");
    Location location2 = new Location(unLocode1, "name");
    RouteSpecification routeSpecification1 = new RouteSpecification(location1, location2, LocalDate.now());
    RouteSpecification routeSpecification2 = new RouteSpecification(location1, location2, LocalDate.now());
    assertTrue(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_VDfI0_Ogvw0() {
    UnLocode unLocode1 = new UnLocode("countryAndLocation");
    Location origin = new Location(unLocode1, "origin");
    Location destination = new Location(unLocode1, "destination");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, LocalDate.now());
    RouteSpecification routeSpecification2 = new RouteSpecification(origin, destination, LocalDate.now());
    assert routeSpecification.hashCode() == routeSpecification2.hashCode();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testhashCode_UDtv0() throws Exception {
    LocalDate arrivalDeadline = LocalDate.now();
    UnLocode unLocodeOrigin = new UnLocode("");
    UnLocode unLocodeDestination = new UnLocode("");
    Location origin = new Location(unLocodeOrigin, "origin");
    Location destination = new Location(unLocodeDestination, "destination");
    RouteSpecification routespecification;
    routespecification = new RouteSpecification(origin, destination, arrivalDeadline);
    int hashCode = routespecification.hashCode();
    int expectedHashCode = new HashCodeBuilder().append(origin.hashCode()).append(destination.hashCode()).append(arrivalDeadline.hashCode()).toHashCode();
    assertEquals(expectedHashCode, hashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_ReturnsTrue_woNx3_obgf0_fid2() {
    UnLocode unLocode1 = new UnLocode("USNYC"); // Changed to a valid UN/LOCODE
    UnLocode unLocode2 = new UnLocode("USNYC"); // Changed to a valid UN/LOCODE
    Location location1 = new Location(unLocode1, "name");
    Location location2 = new Location(unLocode1, "name");
    RouteSpecification routeSpecification1 = new RouteSpecification(location1, location2, LocalDate.now());
    RouteSpecification routeSpecification2 = new RouteSpecification(location1, location2, LocalDate.now());
    assertTrue(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_VDfI0_Ogvw0_fid2() {
    UnLocode unLocode1 = new UnLocode("USNYC"); // Changed to a valid UN/LOCODE
    Location origin = new Location(unLocode1, "origin");
    Location destination = new Location(unLocode1, "destination");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, LocalDate.now());
    RouteSpecification routeSpecification2 = new RouteSpecification(origin, destination, LocalDate.now());
    assert routeSpecification.equals(routeSpecification2); // Changed to equals assertion
  }
}