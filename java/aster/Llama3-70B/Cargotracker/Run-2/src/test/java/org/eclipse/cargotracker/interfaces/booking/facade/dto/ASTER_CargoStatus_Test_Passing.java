/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoStatus_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisdirected_YqBI0() {
    List<TrackingEvents> handlingEvents = new ArrayList<>();
    CargoStatus cargoStatus = new CargoStatus("trackigId", "destination", "statusText", true, "eta", "nextExpectedActivity", handlingEvents);
    assertTrue(cargoStatus.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_wAqG0() {
    List<TrackingEvents> handlingEvents = new ArrayList<>();
    CargoStatus cargoStatus = new CargoStatus("trackingId1", "destination1", "statusText1", true, "eta1", "nextExpectedActivity1", handlingEvents);
    assertEquals("trackingId1", cargoStatus.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_hScj0() {
    CargoStatus cargoStatus = new CargoStatus("trackingId", "destination", "statusText", false, "eta", "nextExpectedActivity", new ArrayList<TrackingEvents>());
    assertEquals("destination", cargoStatus.getDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusText_YNMW0() {
    List<TrackingEvents> handlingEvents = new ArrayList<>();
    CargoStatus cargoStatus = new CargoStatus("trackigId", "destination", "statusText", false, "eta", "nextExpectedActivity", handlingEvents);
    assertEquals("statusText", cargoStatus.getStatusText());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEta_BvaA0() {
    List<TrackingEvents> handlingEvents = new ArrayList<>();
    CargoStatus cargoStatus = new CargoStatus("trackingId", "destination", "statusText", false, "eta", "nextExpectedActivity", handlingEvents);
    assertEquals("eta", cargoStatus.getEta());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextExpectedActivity_updO0() {
    List<TrackingEvents> handlingEvents = new ArrayList<>();
    CargoStatus cargoStatus = new CargoStatus("trackigId", "destination", "statusText", true, "eta", "nextExpectedActivity", handlingEvents);
    assertEquals("nextExpectedActivity", cargoStatus.getNextExpectedActivity());
  }
}