/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Booking_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestinationUnlocode_KziD0() {
    Booking booking = new Booking();
    String expected = "";
    String actual = booking.getDestinationUnlocode();
    assertNull(expected);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginUnlocode_ESGw0() {
    Booking booking = new Booking();
    booking.init(); // Initialize the booking object
    String originUnlocode = booking.getOriginUnlocode();
    assertNull(originUnlocode); // Initialize the booking object before calling getOriginUnlocode
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToday_LRTG0() {
    Booking booking = new Booking();
    booking.init(); // Initialize the booking object
    // Add a getter method for today in the Booking class
    // assertNotNull(booking.today); // This will not work as today is not accessible
    // Instead, add a getter method in the Booking class
    assertNotNull(booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestinationUnlocode_KziD0_fid2() {
    Booking booking = new Booking();
    String expected = "";
    String actual = booking.getDestinationUnlocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDuration_TUeO0_fid2() {
    Booking booking = new Booking();
    long expected = 0; // default value of duration
    long actual = booking.getDuration();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_PYBu0() {
    Booking booking = new Booking();
    LocalDate arrivalDeadline = LocalDate.of(2022, 1, 1);
    assertSame(arrivalDeadline, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginUnlocode_ESGw0_fid2() {
    Booking booking = new Booking();
    String originUnlocode = booking.getOriginUnlocode();
    assertNotNull(originUnlocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToday_LRTG0_fid2() {
    Booking booking = new Booking();
    LocalDate today = booking.getToday();
    assertNotNull(today);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdated_MinJourneyDurationMet_Cwph0_XYrV0() {
    Booking booking = new Booking();
    booking.init(); // Initialize the booking object
    booking.setArrivalDeadline(LocalDate.now().plusDays(5)); // Assuming MIN_JOURNEY_DURATION is 5
    booking.deadlineUpdated();
    assertTrue(booking.isBookable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdated_MinJourneyDurationNotMet_qytB1_kdrQ0() {
    Booking booking = new Booking();
    booking.init(); // Initialize the booking object
    booking.setArrivalDeadline(LocalDate.now().plusDays(5 - 1)); // Assuming MIN_JOURNEY_DURATION is 5
    booking.deadlineUpdated();
    assertFalse(booking.isBookable());
  }
}