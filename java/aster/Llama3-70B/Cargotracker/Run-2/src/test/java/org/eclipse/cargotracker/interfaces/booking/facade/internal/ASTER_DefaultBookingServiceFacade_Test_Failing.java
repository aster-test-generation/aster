/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoStatus;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_found_ZzcI0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoStatus cargoStatus = facade.loadCargoForTracking("trackingIdValue");
    assertNotNull(cargoStatus);
    assertEquals("trackingIdValue", cargoStatus.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_notFound_PCbP1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoStatus cargoStatus = facade.loadCargoForTracking("nonExistingTrackingId");
    assertNull(cargoStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_gJvs0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute route = facade.loadCargoForRouting("trackingId");
    assertNotNull(route);
    assertEquals("trackingId", route.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_found_ZzcI0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoStatus cargoStatus = facade.loadCargoForTracking("trackingIdValue");
    assertNotNull(cargoStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_found_ZzcI0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoStatus cargoStatus = facade.loadCargoForTracking("trackingIdValue");
    assertEquals("trackingIdValue", cargoStatus.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_gJvs0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute route = facade.loadCargoForRouting("trackingId");
    assertNotNull(route);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_gJvs0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute route = facade.loadCargoForRouting("trackingId");
    assertEquals("trackingId", route.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_AzPy0_Ofqe0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }
}