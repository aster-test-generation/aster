/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.messaging.jms;

import jakarta.jms.Destination;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.eclipse.cargotracker.interfaces.handling.HandlingEventRegistrationAttempt;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JmsApplicationEvents_Test_Failing {
  @Mock
  private Logger logger;
  @Mock
  private Destination deliveredCargoQueue;
  @Mock
  private TrackingId trackingId;
  @Mock
  private Cargo cargo;
  private JmsApplicationEvents jmsApplicationEvents;
  @Mock
  private Destination cargoHandledQueue;
  @Mock
  private HandlingEvent event;
  private JmsApplicationEvents jmsapplicationevents;
  @Mock
  private Destination handlingEventQueue;
  @Mock
  private Destination misdirectedCargoQueue;
  @Mock
  private UnLocode unLocode;
  private static final int LOW_PRIORITY = 0;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testReceivedHandlingEventRegistrationAttempt_IiPM0_UKpx0() {
    JmsApplicationEvents jmsApplicationEvents = new JmsApplicationEvents();
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            java.time.LocalDateTime.now(),
            java.time.LocalDateTime.now(),
            new TrackingId("trackingId"),
            new VoyageNumber("voyageNumber"),
            HandlingEvent.Type.LOAD,
            new UnLocode("SESTO"));
    jmsApplicationEvents.receivedHandlingEventRegistrationAttempt(attempt);
    assertEquals(attempt.getUnLocode().toString(), "SESTO");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testReceivedHandlingEventRegistrationAttempt_IiPM0_UKpx0_fid2() {
    JmsApplicationEvents jmsApplicationEvents = new JmsApplicationEvents();
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            java.time.LocalDateTime.now(),
            java.time.LocalDateTime.now(),
            new TrackingId("trackingId"),
            new VoyageNumber("voyageNumber"),
            HandlingEvent.Type.LOAD,
            new UnLocode("countryAndLocation"));
    jmsApplicationEvents.receivedHandlingEventRegistrationAttempt(attempt);
    assertEquals(attempt.getUnLocode().toString(), "countryAndLocation");
  }
}