/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.shared;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DomainObjectUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_1_tSYT0() {
    String actual = null;
    String safe = "safe";
    assertEquals(safe, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_2_MIrI1() {
    Integer actual = 10;
    Integer safe = 20;
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_3_Kjgx2() {
    Object actual = new Object();
    Object safe = new Object();
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_4_GJVl3() {
    String actual = "";
    String safe = "safe";
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_5_Ajyy4() {
    Object actual = null;
    Object safe = null;
    assertNull(DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_6_FTgd5() {
    Boolean actual = true;
    Boolean safe = false;
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_7_xUmg6() {
    Character actual = 'a';
    Character safe = 'b';
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_8_bcRx7() {
    Byte actual = 10;
    Byte safe = 20;
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_9_OLQz8() {
    Short actual = 10;
    Short safe = 20;
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_10_jzjG9() {
    Long actual = 10L;
    Long safe = 20L;
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }
}