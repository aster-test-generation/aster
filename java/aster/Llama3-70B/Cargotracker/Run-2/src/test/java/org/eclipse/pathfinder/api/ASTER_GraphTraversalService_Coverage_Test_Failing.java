/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(transitPaths);
    if (transitPaths != null && !transitPaths.isEmpty()) {
      TransitPath transitPath = transitPaths.get(0);
      List<TransitEdge> transitEdges = transitPath.getTransitEdges();
      if (transitEdges != null && !transitEdges.isEmpty()) {
        TransitEdge transitEdge = transitEdges.get(0);
        LocalDateTime fromDate = transitEdge.getFromDate();
        LocalDateTime toDate = transitEdge.getToDate();
        long ONE_DAY_MS = 24 * 60 * 60 * 1000;
        long ONE_HOUR_MS = 60 * 60 * 1000;
        long duration = java.time.Duration.between(fromDate, toDate).toMillis();
      }
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(transitPaths);
    if (transitPaths.size() > 0) {
      TransitPath transitPath = transitPaths.get(0);
      List<TransitEdge> transitEdges = transitPath.getTransitEdges();
      if (transitEdges.size() > 0) {
        TransitEdge transitEdge = transitEdges.get(0);
        LocalDateTime fromDate = transitEdge.getFromDate();
        LocalDateTime toDate = transitEdge.getToDate();
        long ONE_DAY_MS = 24 * 60 * 60 * 1000;
        long ONE_HOUR_MS = 60 * 60 * 1000;
        long duration = java.time.Duration.between(fromDate, toDate).toMillis();
        assertTrue(duration > 0);
      }
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(transitPaths);
    if (transitPaths != null && !transitPaths.isEmpty()) {
      TransitPath transitPath = transitPaths.get(0);
      List<TransitEdge> transitEdges = transitPath.getTransitEdges();
      assertNotNull(transitEdges);
      if (transitEdges != null && !transitEdges.isEmpty()) {
        TransitEdge transitEdge = transitEdges.get(0);
        assertNotNull(transitEdge);
        LocalDateTime fromDate = transitEdge.getFromDate();
        assertNotNull(fromDate);
        LocalDateTime toDate = transitEdge.getToDate();
        assertNotNull(toDate);
        long ONE_DAY_MS = 24 * 60 * 60 * 1000;
        long ONE_HOUR_MS = 60 * 60 * 1000;
        long duration = java.time.Duration.between(fromDate, toDate).toMillis();
      }
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_4() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(transitPaths);
    if (transitPaths.size() > 0) {
      TransitPath transitPath = transitPaths.get(0);
      List<TransitEdge> transitEdges = transitPath.getTransitEdges();
      assertNotNull(transitEdges);
      if (transitEdges.size() > 0) {
        TransitEdge transitEdge = transitEdges.get(0);
        assertNotNull(transitEdge);
        LocalDateTime fromDate = transitEdge.getFromDate();
        assertNotNull(fromDate);
        LocalDateTime toDate = transitEdge.getToDate();
        assertNotNull(toDate);
        long ONE_DAY_MS = 24 * 60 * 60 * 1000;
        long ONE_HOUR_MS = 60 * 60 * 1000;
        long duration = java.time.Duration.between(fromDate, toDate).toMillis();
        assertTrue(duration > 0);
      }
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_5() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(transitPaths);
    if (transitPaths != null && !transitPaths.isEmpty()) {
      TransitPath transitPath = transitPaths.get(0);
      List<TransitEdge> transitEdges = transitPath.getTransitEdges();
      if (transitEdges != null && !transitEdges.isEmpty()) {
        TransitEdge transitEdge = transitEdges.get(0);
        LocalDateTime fromDate = transitEdge.getFromDate();
        assertNotNull(fromDate);
        LocalDateTime toDate = transitEdge.getToDate();
        assertNotNull(toDate);
        long ONE_DAY_MS = 24 * 60 * 60 * 1000;
        long ONE_HOUR_MS = 60 * 60 * 1000;
        long duration = java.time.Duration.between(fromDate, toDate).toMillis();
      }
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_6() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(transitPaths);
    if (transitPaths != null && !transitPaths.isEmpty()) {
      TransitPath transitPath = transitPaths.get(0);
      List<TransitEdge> transitEdges = transitPath.getTransitEdges();
      if (transitEdges != null && !transitEdges.isEmpty()) {
        TransitEdge transitEdge = transitEdges.get(0);
        LocalDateTime fromDate = transitEdge.getFromDate();
        LocalDateTime toDate = transitEdge.getToDate();
        long ONE_DAY_MS = 24 * 60 * 60 * 1000;
        long ONE_HOUR_MS = 60 * 60 * 1000;
        long duration = java.time.Duration.between(fromDate, toDate).toMillis();
        assertNotNull(toDate);
      }
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_7() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(transitPaths);
    if (transitPaths.size() > 0) {
      TransitPath transitPath = transitPaths.get(0);
      List<TransitEdge> transitEdges = transitPath.getTransitEdges();
      if (transitEdges.size() > 0) {
        TransitEdge transitEdge = transitEdges.get(0);
        LocalDateTime fromDate = transitEdge.getFromDate();
        LocalDateTime toDate = transitEdge.getToDate();
        long ONE_DAY_MS = 24 * 60 * 60 * 1000;
        long ONE_HOUR_MS = 60 * 60 * 1000;
        long duration = java.time.Duration.between(fromDate, toDate).toMillis();
        assertTrue(duration >= ONE_DAY_MS && duration <= ONE_DAY_MS + ONE_HOUR_MS);
      }
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_1_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long ONE_DAY_MS = 24 * 60 * 60 * 1000;
    long ONE_HOUR_MS = 60 * 60 * 1000;
    long duration = java.time.Duration.between(fromDate, toDate).toMillis();
    assertNotNull(transitPaths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_2_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long ONE_DAY_MS = 24 * 60 * 60 * 1000;
    long ONE_HOUR_MS = 60 * 60 * 1000;
    long duration = java.time.Duration.between(fromDate, toDate).toMillis();
    assertEquals(1, transitPaths.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_3_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long ONE_DAY_MS = 24 * 60 * 60 * 1000;
    long ONE_HOUR_MS = 60 * 60 * 1000;
    long duration = java.time.Duration.between(fromDate, toDate).toMillis();
    assertNotNull(transitEdges);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_4_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long ONE_DAY_MS = 24 * 60 * 60 * 1000;
    long ONE_HOUR_MS = 60 * 60 * 1000;
    long duration = java.time.Duration.between(fromDate, toDate).toMillis();
    assertEquals(2, transitEdges.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_5_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long ONE_DAY_MS = 24 * 60 * 60 * 1000;
    long ONE_HOUR_MS = 60 * 60 * 1000;
    long duration = java.time.Duration.between(fromDate, toDate).toMillis();
    assertNotNull(fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_6_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long ONE_DAY_MS = 24 * 60 * 60 * 1000;
    long ONE_HOUR_MS = 60 * 60 * 1000;
    long duration = java.time.Duration.between(fromDate, toDate).toMillis();
    assertNotNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_CrGq0_wNhz0_7_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "ORIGIN_CODE";
    String destinationUnLocode = "DESTINATION_CODE";
    String deadline = "DEADLINE_VALUE";
    List<TransitPath> transitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = transitPaths.get(0);
    List<TransitEdge> transitEdges = transitPath.getTransitEdges();
    TransitEdge transitEdge = transitEdges.get(0);
    LocalDateTime fromDate = transitEdge.getFromDate();
    LocalDateTime toDate = transitEdge.getToDate();
    long ONE_DAY_MS = 24 * 60 * 60 * 1000;
    long ONE_HOUR_MS = 60 * 60 * 1000;
    long duration = java.time.Duration.between(fromDate, toDate).toMillis();
    assertTrue(duration >= ONE_DAY_MS && duration <= ONE_DAY_MS + ONE_HOUR_MS);
  }
}