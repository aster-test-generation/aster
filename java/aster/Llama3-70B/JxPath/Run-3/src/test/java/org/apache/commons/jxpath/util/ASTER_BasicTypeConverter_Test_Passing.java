/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_AbstractClass_CGtQ0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(AbstractCollection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_ConcreteClass_Vyqb2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(ArrayList.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_Set_zLty3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Set.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_Collection_ZKvv4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_ConcreteClass_DlzS0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        assertNotNull(collection);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Interface_wHdu1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertNotNull(collection);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_AbstractClass_cAVN2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.allocateCollection(AbstractList.class);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Set_bOOL3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertNotNull(collection);
        assertTrue(collection instanceof HashSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Collection_QiyU4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Collection.class);
        assertNotNull(collection);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_UnknownType_uBjx5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.allocateCollection(String.class);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableList_SbuO0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("element1");
        list.add("element2");
        Collection<String> unmodifiableList = converter.unmodifiableCollection(list);
        assertThrows(UnsupportedOperationException.class, () -> unmodifiableList.add("element3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableSortedSet_lvHt1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("element1");
        sortedSet.add("element2");
        Collection<String> unmodifiableSortedSet = converter.unmodifiableCollection(sortedSet);
        assertThrows(UnsupportedOperationException.class, () -> unmodifiableSortedSet.add("element3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableSet_RwAH2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("element1");
        set.add("element2");
        Collection<String> unmodifiableSet = converter.unmodifiableCollection(set);
        assertThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add("element3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollection_KeBs3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new Vector<>();
        collection.add("element1");
        collection.add("element2");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertThrows(UnsupportedOperationException.class, () -> unmodifiableCollection.add("element3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveBoolean_SpeS0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(boolean.class);
        assertEquals(Boolean.FALSE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveChar_kxMS1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(char.class);
        assertEquals(Character.valueOf('\0'), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveByte_AsJa2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(byte.class);
        assertEquals(Byte.valueOf((byte) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveShort_Jlbx3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(short.class);
        assertEquals(Short.valueOf((short) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveInt_RhSb4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(int.class);
        assertEquals(Integer.valueOf(0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveLong_zbzD5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(long.class);
        assertEquals(Long.valueOf(0L), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveFloat_DAow6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(float.class);
        assertEquals(Float.valueOf(0.0f), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveDouble_AVaI7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(double.class);
        assertEquals(Double.valueOf(0.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveUnknown_lEey8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(String.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Byte_pCAG0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.0);
        assertEquals(10, result.byteValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Short_GqSx1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.0);
        assertEquals(10, result.shortValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Integer_NOBw2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.0);
        assertEquals(10, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Long_ZpZt3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.0);
        assertEquals(10, result.longValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Float_SnUh4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.0);
        assertEquals(10.0f, result.floatValue(), 0.0f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Double_hRgS5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.0);
        assertEquals(10.0, result.doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_BigInteger_nfNT6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.0);
        assertEquals(BigInteger.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Unknown_pMRM10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(String.class, 10.0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Boolean_BdkH0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Boolean result = (Boolean) converter.convertStringToPrimitive("true", Boolean.class);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Character_hMSY1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Character result = (Character) converter.convertStringToPrimitive("a", Character.class);
        Assertions.assertEquals('a', result.charValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Byte_SCic2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Byte result = (Byte) converter.convertStringToPrimitive("1", Byte.class);
        Assertions.assertEquals(1, result.byteValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Short_kulc3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Short result = (Short) converter.convertStringToPrimitive("1", Short.class);
        Assertions.assertEquals(1, result.shortValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Integer_Metz4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer result = (Integer) converter.convertStringToPrimitive("1", Integer.class);
        Assertions.assertEquals(1, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Long_iLmQ5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Long result = (Long) converter.convertStringToPrimitive("1", Long.class);
        Assertions.assertEquals(1, result.longValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Float_DaLu6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Float result = (Float) converter.convertStringToPrimitive("1.0", Float.class);
        Assertions.assertEquals(1.0f, result.floatValue(), 0.0f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Double_fkfE7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Double result = (Double) converter.convertStringToPrimitive("1.0", Double.class);
        Assertions.assertEquals(1.0, result.doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Null_RXQF8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", String.class);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNullObject_KnNV0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertSameType_ZENl1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "Hello";
        assertTrue(converter.canConvert(str, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertAssignableType_ZTMl2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object obj = new Object();
        assertTrue(converter.canConvert(obj, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToBoolean_NDfW3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "true";
        assertTrue(converter.canConvert(str, Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertBooleanToNumber_sBTo4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Boolean bool = true;
        assertTrue(converter.canConvert(bool, Number.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNumberToBoolean_XTuA5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number num = 1;
        assertTrue(converter.canConvert(num, Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArrayToArray_Rtiu7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] arr = new String[]{"Hello", "World"};
        assertTrue(converter.canConvert(arr, String[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArrayToCollection_RRoE8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] arr = new String[]{"Hello", "World"};
        assertTrue(converter.canConvert(arr, Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertCollectionToArray_dFGg9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> coll = Arrays.asList("Hello", "World");
        assertTrue(converter.canConvert(coll, String[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertCollectionToCollection_jmaw10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> coll = Arrays.asList("Hello", "World");
        assertTrue(converter.canConvert(coll, Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertUnsupportedType_lDyb13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object obj = new Object();
        assertFalse(converter.canConvert(obj, UUID.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNullToPrimitive_LOgc14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, int.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToCharacter_wagh16() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "a";
        assertTrue(converter.canConvert(str, Character.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToByte_pqEt17() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "1";
        assertTrue(converter.canConvert(str, Byte.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToShort_jsgk18() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "1";
        assertTrue(converter.canConvert(str, Short.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToInteger_wQeh19() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "1";
        assertTrue(converter.canConvert(str, Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToLong_FRyJ20() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "1";
        assertTrue(converter.canConvert(str, Long.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToFloat_SQtU21() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "1.0";
        assertTrue(converter.canConvert(str, Float.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToDouble_WCST22() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "1.0";
        assertTrue(converter.canConvert(str, Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArrayToPrimitiveArray_ZTdX23() {
        BasicTypeConverter converter = new BasicTypeConverter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_BZYh0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(null, int.class);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToObject_XxXq1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(null, Object.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToArray_EOah4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] array = new String[]{"value"};
        Object result = converter.convert(array, String[].class);
        assertArrayEquals(array, (String[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToCollection_bsLx5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] array = new String[]{"value"};
        Object result = converter.convert(array, Collection.class);
        assertEquals(1, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToArray_JrhW6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add("value");
        Object result = converter.convert(collection, String[].class);
        assertArrayEquals(new String[]{"value"}, (String[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToCollection_HQeK7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add("value");
        Object result = converter.convert(collection, Collection.class);
        assertEquals(1, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToString_qCfn8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert("value", String.class);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToNumber_tOOZ9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(Boolean.TRUE, Integer.class);
        assertEquals(1, ((Number) result).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToBoolean_jMgH11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(1, Boolean.class);
        assertTrue((Boolean) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToNumber_Xibk12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(1, Double.class);
        assertEquals(1.0, ((Number) result).doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_HsgG13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert("1", int.class);
        assertEquals(1, ((Number) result).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToBoolean_QhAt14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert("true", Boolean.class);
        assertTrue((Boolean) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToNumber_JopD15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert("1", Double.class);
        assertEquals(1.0, ((Number) result).doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_ConcreteClass_DlzS0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_ConcreteClass_DlzS0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Interface_wHdu1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Interface_wHdu1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Set_bOOL3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Set_bOOL3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertTrue(collection instanceof HashSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Collection_QiyU4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Collection.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Collection_QiyU4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Collection.class);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToAtomicBoolean_buMz10_huVT0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(Boolean.TRUE, java.util.concurrent.atomic.AtomicBoolean.class);
        assertTrue(((java.util.concurrent.atomic.AtomicBoolean) result).get());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Null_AxtG11_fid2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.allocateNumber(null, 10.0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToNumber_RJeV6_fid2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "1";
        assertFalse(converter.canConvert(str, Number.class));
    }
}