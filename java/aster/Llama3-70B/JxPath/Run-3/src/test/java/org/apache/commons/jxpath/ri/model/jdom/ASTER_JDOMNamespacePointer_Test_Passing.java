/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespacePointer_Test_Passing {
    JDOMNamespacePointer jdomnamespacepointer;
    NodePointer pointer1;
    NodePointer pointer2;
    DOMNodePointer parent;
    private String prefix = "testPrefix";
    JDOMNamespacePointer mockJDOMNamespacePointer;
    DOMNodePointer domNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        parent = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        pointer1 = mock(NodePointer.class);
        pointer2 = mock(NodePointer.class);
        int result = jdomnamespacepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        parent = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        when(jdomnamespacepointer.getNamespaceURI()).thenReturn("namespaceURI");
        Object result = jdomnamespacepointer.getImmediateNode();
        assertEquals("namespaceURI", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        parent = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        assertEquals(prefix.hashCode(), jdomnamespacepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        QName expectedQName = new QName(prefix);
        QName actualQName = jdomnamespacepointer.getName();
        assertEquals(expectedQName.getName(), actualQName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(domNodePointer, "prefix");
        int length = jdomnamespacepointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(domNodePointer, "prefix");
        Object baseValue = jdomnamespacepointer.getBaseValue();
        assertNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        boolean result = jdomnamespacepointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_fid1() throws Exception {
        parent = mock(DOMNodePointer.class);
        when(parent.asPath()).thenReturn("parent/path");
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        String result = jdomnamespacepointer.asPath();
        assertEquals("parent/path/namespace::testPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObject_ReturnsFalse_YvEY0() throws Exception {
        String prefix = "prefix";
        DOMNodePointer mockDOMNodePointer = mock(DOMNodePointer.class);
        JDOMNamespacePointer jdomnamespacepointer = new JDOMNamespacePointer(mockDOMNodePointer, prefix);
        Object obj = new Object();
        assertFalse(jdomnamespacepointer.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue_VqSg0() throws Exception {
        DOMNodePointer mockDOMNodePointer = mock(DOMNodePointer.class);
        JDOMNamespacePointer jdomnamespacepointer = new JDOMNamespacePointer(mockDOMNodePointer, "prefix");
        assertTrue(jdomnamespacepointer.equals(jdomnamespacepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SamePrefix_ReturnsTrue_zbUO0() throws Exception {
        DOMNodePointer mockDOMNodePointer = mock(DOMNodePointer.class);
        JDOMNamespacePointer jdomnamespacepointer = new JDOMNamespacePointer(mockDOMNodePointer, "prefix");
        JDOMNamespacePointer mockJDOMNamespacePointer = new JDOMNamespacePointer(mockDOMNodePointer, "prefix");
        assertTrue(jdomnamespacepointer.equals(mockJDOMNamespacePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentPrefix_ReturnsFalse_lMWi0() throws Exception {
        DOMNodePointer mockDOMNodePointer = mock(DOMNodePointer.class);
        JDOMNamespacePointer jdomnamespacepointer = new JDOMNamespacePointer(mockDOMNodePointer, "prefix");
        JDOMNamespacePointer mockJDOMNamespacePointer = new JDOMNamespacePointer(mockDOMNodePointer, "differentPrefix");
        assertFalse(jdomnamespacepointer.equals(mockJDOMNamespacePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_OmGK0() throws Exception {
        parent = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        when(parent.asPath()).thenReturn("parentPath");
        String result = jdomnamespacepointer.asPath();
        assertEquals("parentPath/namespace::prefix", result);
        verify(parent, times(1)).asPath();
    }
}