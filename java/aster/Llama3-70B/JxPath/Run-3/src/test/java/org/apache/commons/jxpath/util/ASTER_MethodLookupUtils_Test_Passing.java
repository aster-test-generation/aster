/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ExactMatch_iROz0_1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"test"});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ExactMatch_iROz0_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"test"});
        assertEquals("java.lang.String", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod1_phti0() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "valueOf", new Object[]{"test"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod2_KCAO1() {
        Method method = MethodLookupUtils.lookupStaticMethod(Integer.class, "parseInt", new Object[]{"10"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod4_rnPA3() {
        Method method = MethodLookupUtils.lookupStaticMethod(Boolean.class, "parseBoolean", new Object[]{"true"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod7_nBnM6() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "forName", new Object[]{"java.lang.String"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod8_izWI7() {
        Method method = MethodLookupUtils.lookupStaticMethod(System.class, "currentTimeMillis", new Object[]{});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod9_qORI8() {
        Method method = MethodLookupUtils.lookupStaticMethod(Thread.class, "currentThread", new Object[]{});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod10_aFRj9() {
        Method method = MethodLookupUtils.lookupStaticMethod(Runtime.class, "getRuntime", new Object[]{});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod13_YCIC12() {
        Method method = MethodLookupUtils.lookupStaticMethod(Arrays.class, "sort", new Object[]{new int[]{1, 2}});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod14_WEpu13() {
        Method method = MethodLookupUtils.lookupStaticMethod(Collections.class, "emptyList", new Object[]{});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod2_Cake1() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{null});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod5_Hbbr4() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{1, 2});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod6_idMY5() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{null, 2});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod8_cwQg7() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "indexOf", new Object[]{null});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod9_Sdim8() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "indexOf", new Object[]{new Object()});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod11_KEGb10() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "indexOf", new Object[]{null, 1});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod14_LblQ13() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "concat", new Object[]{null});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod15_msPO14() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "concat", new Object[]{new Object()});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod17_bhEs16() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "replace", new Object[]{null, ""});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NoMatch_knrD1_mLrH0() {
        Class targetClass = String.class;
        Object[] parameters = new Object[]{"arg1", "arg2"};
        Method method = MethodLookupUtils.lookupMethod(targetClass, "myMethod", parameters);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_ExactMatch_ruSv0_nPAM0() {
        Class targetClass = String.class;
        Object[] parameters = new Object[]{"arg0", "arg1"};
        Method method = MethodLookupUtils.lookupMethod(targetClass, "concat", parameters);
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_ParameterTypeMismatch_MFyn7_QUzv0() {
        Class targetClass = String.class;
        Object[] parameters = new Object[]{"arg1", 2, "arg3"};
        Method method = MethodLookupUtils.lookupMethod(targetClass, "myMethod", parameters);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NullInParameter_jqnD8_YbFH0() {
        Class targetClass = Object.class;
        Object[] parameters = new Object[]{null, "arg2"};
        Method method = MethodLookupUtils.lookupMethod(targetClass, "someMethod", parameters);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NullInParameter_jqnD8_dDpF1() {
        Class targetClass = Object.class;
        Object[] parameters = new Object[]{new Object(), null, "arg2"};
        Method method = MethodLookupUtils.lookupMethod(targetClass, "someMethod", parameters);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ExactMatch_iROz0() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"test"});
        assertNotNull(constructor);
        assertEquals("java.lang.String", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameter_WIaK3_1_fid2() {
        try {
            MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous constructor [null]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_dLSe10_fid2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod6_SoeJ5_fid2() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod12_wWrz11_fid2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "format", new Object[]{"test", "arg"});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod3_kMCW2_fid2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{new Object()});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod4_kPKi3_fid2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{1});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod7_hQTo6_fid2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "indexOf", new Object[]{""});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod10_gpEa9_fid2() {
        try {
            MethodLookupUtils.lookupMethod(String.class, "indexOf", new Object[]{"", 1});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: indexOf", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod12_dEsP11_fid2() {
        try {
            MethodLookupUtils.lookupMethod(String.class, "indexOf", new Object[]{new Object(), 1});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: indexOf", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod13_bVmb12_fid2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "concat", new Object[]{""});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod16_bAwK15_fid2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "replace", new Object[]{"", ""});
        assertNull(method);
    }
}