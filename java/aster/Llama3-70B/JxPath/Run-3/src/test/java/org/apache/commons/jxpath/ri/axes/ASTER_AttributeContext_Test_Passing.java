/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeContext_Test_Passing {
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private AttributeContext attributeContext;
    @Mock
    private NodeIterator iterator;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodePointer currentNodePointer;
    private boolean setStarted = false;
    private static QName WILDCARD = new QName(null, "*");
    private NodeTest nodeTest;
    private SelfContext selfContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_1() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        // Given
        setStarted = true;
        iterator = iterator;
        // When
        attributeContext.reset();
        // Then
        assertTrue(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test2_kPRW1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        attributeContext.setPosition(10);
        assertFalse(attributeContext.setPosition(15));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test3_Pjpz2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(3);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        attributeContext.setPosition(0);
        assertTrue(attributeContext.setPosition(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test4_HdAE3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(4);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        attributeContext.setPosition(20);
        assertFalse(attributeContext.setPosition(20));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeTypeTest_NOT_NODE_TYPE_NODE_HwEN2() {
        NodeTypeTest nodeTest = new NodeTypeTest(2);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTest), nodeTest), nodeTest);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        assertFalse(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_gRtF0() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        NodePointer result = attributeContext.getCurrentNodePointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode_WrXk0() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext namespaceContext = mock(NamespaceContext.class);
        when(namespaceContext.getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        NodeIterator iterator = mock(NodeIterator.class);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(namespaceContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.attributeIterator(WILDCARD)).thenReturn(iterator);
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        boolean result = attributeContext.nextNode();
        assertTrue(result);
        verify(namespaceContext, times(1)).getCurrentNodePointer();
        verify(currentNodePointer, times(1)).attributeIterator(WILDCARD);
        verify(iterator, times(1)).setPosition(anyInt());
        verify(iterator, times(1)).getNodePointer();
    }
}