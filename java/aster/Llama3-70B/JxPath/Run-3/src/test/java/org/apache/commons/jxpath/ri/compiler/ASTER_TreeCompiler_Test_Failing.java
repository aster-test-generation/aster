/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_VMaS0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{new Object(), new Object()};
        CoreOperationAnd result = (CoreOperationAnd) treeCompiler.and(arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_RJpe0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object[] args = new Object[]{new Object()};
        Object result = treeCompiler.function(qName, args);
        assertNotNull(result);
        assertTrue(result instanceof ExtensionFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_RJpe0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object[] args = new Object[]{new Object()};
        Object result = treeCompiler.function(qName, args);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_RJpe0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object[] args = new Object[]{new Object()};
        Object result = treeCompiler.function(qName, args);
        assertTrue(result instanceof ExtensionFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThan_qgJI0_jJuk0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Expression left = new VariableReference(new QName("left"));
        Expression right = new VariableReference(new QName("right"));
        Object result = treeCompiler.function(new QName("gt"), new Object[]{left, right});
        assertTrue(result instanceof CoreOperationGreaterThan);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_VMaS0_fid2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{new Object(), new Object()};
        Object result = treeCompiler.function(new QName("and"), arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_RJpe0_1_fid2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object[] args = new Object[]{new Object()};
        Expression result = (Expression) treeCompiler.function(qName, args);
        assertNotNull(result);
    }
}