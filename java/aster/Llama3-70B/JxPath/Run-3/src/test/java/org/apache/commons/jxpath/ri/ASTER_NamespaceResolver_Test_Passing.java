/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
    private NamespaceResolver namespaceresolver;
    private NamespaceResolver parentResolver;
    NamespaceResolver namespaceResolver;
    NodePointer nodePointer;
    NodeIterator nodeIterator;
    NodePointer nsPointer;
    QName qName;
    Map<String, String> reverseMap;
    Map<String, String> namespaceMap;
    @Mock
    private NamespaceResolver parent;
    Pointer pointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetNamespaceContextPointer() throws Exception {
        namespaceResolver = new NamespaceResolver();
        nodePointer = mock(NodePointer.class);
        namespaceResolver.setNamespaceContextPointer(nodePointer);
        assertEquals(nodePointer, namespaceResolver.pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSeal_withParent_WiTq0_1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertTrue(resolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSeal_withParent_WiTq0_2() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertTrue(parent.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSeal_withoutParent_MsSc1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.seal();
        assertTrue(resolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_3() throws Exception {
        namespaceMap = new HashMap<>();
        parentResolver = mock(NamespaceResolver.class);
        namespaceResolver = new NamespaceResolver(parentResolver);
        // Case 1: prefix is found in namespaceMap
        String prefix = "prefix1";
        String uri = "uri1";
        namespaceMap.put(prefix, uri);
        // Case 2: prefix is not found in namespaceMap, but found in parent
        prefix = "prefix2";
        uri = "uri2";
        when(parentResolver.getExternallyRegisteredNamespaceURI(prefix)).thenReturn(uri);
        // Case 3: prefix is not found in namespaceMap or parent
        prefix = "prefix3";
        assertNull(namespaceResolver.getExternallyRegisteredNamespaceURI(prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_1_NTIs0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String namespaceURI = "http://example.com";
        String result = namespaceResolver.getPrefix(namespaceURI);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_2_Svfv1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
        String namespaceURI = "http://example.com";
        String result = namespaceResolver.getPrefix(namespaceURI);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_ParentNull_ReturnsNull_vUCi0() {
        NamespaceResolver resolver = new NamespaceResolver();
        String result = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI1_YHhc0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String result = namespaceResolver.getExternallyRegisteredNamespaceURI("prefix");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_parentNotNull_pointerNull_IJzK0() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        Pointer pointer = parent.getNamespaceContextPointer();
        assertSame(pointer, resolver.getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_parentNull_pointerNull_jgmD2() {
        NamespaceResolver resolver = new NamespaceResolver();
        assertNull(resolver.getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_FVzn0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        boolean result = namespaceResolver.isSealed();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_withParent_LjJg1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
        boolean result = namespaceResolver.isSealed();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_1_fvzy0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String prefix = "prefix";
        String result = namespaceResolver.getNamespaceURI(prefix);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_Bduc0_1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        Object clone = namespaceResolver.clone();
        assertNotNull(clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_Bduc0_2() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        Object clone = namespaceResolver.clone();
        assertNotSame(namespaceResolver, clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_XCmo0_1() throws Exception {
        parentResolver = mock(NamespaceResolver.class);
        namespaceResolver = new NamespaceResolver(parentResolver);
        NamespaceResolver clone = (NamespaceResolver) namespaceResolver.clone();
        assertNotNull(clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_XCmo0_2() throws Exception {
        parentResolver = mock(NamespaceResolver.class);
        namespaceResolver = new NamespaceResolver(parentResolver);
        NamespaceResolver clone = (NamespaceResolver) namespaceResolver.clone();
        assertNotSame(namespaceResolver, clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSeal_withParent_WiTq0() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertTrue(resolver.isSealed());
        assertTrue(parent.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_Bduc0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        Object clone = namespaceResolver.clone();
        assertNotNull(clone);
        assertNotSame(namespaceResolver, clone);
    }
}