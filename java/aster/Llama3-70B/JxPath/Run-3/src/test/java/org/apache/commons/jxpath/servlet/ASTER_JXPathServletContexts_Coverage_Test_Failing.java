/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathServletContexts_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_NewContext_MfVa1() {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getPageContext(pageContext);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_GetRequestContext_oyls2() {
        PageContext pageContext = mock(PageContext.class);
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(pageContext.getRequest()).thenReturn(request);
        ServletContext servletContext = mock(ServletContext.class);
        when(pageContext.getServletContext()).thenReturn(servletContext);
        JXPathServletContexts.getPageContext(pageContext);
        verify(request, times(1));
        verify(servletContext, times(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_SetVariables_saGN3() {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext jXPathContext = mock(JXPathContext.class);
        JXPathServletContexts.getPageContext(pageContext);
        verify(jXPathContext, times(1)).setVariables(any(Variables.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_SetAttribute_bzCv4() {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext jXPathContext = mock(JXPathContext.class);
        JXPathServletContexts.getPageContext(pageContext);
        verify(pageContext, times(1)).setAttribute(Constants.JXPATH_CONTEXT, jXPathContext);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_GetParentContext_leHt6() {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext parentContext = mock(JXPathContext.class);
        JXPathServletContexts.getPageContext(pageContext);
        verify(parentContext, times(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_NewContextFactory_mqaZ7() {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext parentContext = mock(JXPathContext.class);
        JXPathContext result = JXPathServletContexts.getPageContext(pageContext);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_SetVariables_zaxw4() throws Exception {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext context = mock(JXPathContext.class);
        KeywordVariables variables = mock(KeywordVariables.class);
        JXPathServletContexts.getSessionContext(session, servletContext);
        verify(context).setVariables(variables);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_SetSessionAttribute_INEf5() throws Exception {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext context = mock(JXPathContext.class);
        JXPathServletContexts.getSessionContext(session, servletContext);
        verify(session).setAttribute(Constants.JXPATH_CONTEXT, context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_ReturnContext_gWdQ6() throws Exception {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext context = mock(JXPathContext.class);
        JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
        assertEquals(context, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ContextNotNull_pniB0() throws Exception {
        ServletRequest request = mock(ServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = mock(JXPathContext.class);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(context);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(context, result);
}
}