/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPropertyPointer_Test_Failing {
    DynaBeanPropertyPointer dynabeanpropertypointer;
    @Mock
    DOMNodePointer parent;
    @Mock
    DynaBean dynaBean;
    private String name = "testProperty";
    private DynaClass dynaClass;
    private int propertyIndex = -1;
    private DynaProperty[] dynaProperties;
    private static final String CLASS = "class";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_starProperty() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("*");
        assertNull(dynabeanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActualProperty_1() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynaClass = mock(DynaClass.class);
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(mock(DOMNodePointer.class), dynaBean);
        // Test case 1: Property exists
        when(dynaClass.getDynaProperty(anyString())).thenReturn(mock(DynaProperty.class));
        // Test case 2: Property does not exist
        when(dynaClass.getDynaProperty(anyString())).thenReturn(null);
        assertTrue(dynabeanpropertypointer.isActualProperty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActualProperty_2() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynaClass = mock(DynaClass.class);
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(mock(DOMNodePointer.class), dynaBean);
        // Test case 1: Property exists
        when(dynaClass.getDynaProperty(anyString())).thenReturn(mock(DynaProperty.class));
        // Test case 2: Property does not exist
        when(dynaClass.getDynaProperty(anyString())).thenReturn(null);
        assertFalse(dynabeanpropertypointer.isActualProperty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_wholeCollection_OeQR0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynaBean.getDynaClass()).thenReturn(mock(DynaClass.class));
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("someProperty");
        Field field = DynaBeanPropertyPointer.class.getDeclaredField("propertyIndex");
        field.setAccessible(true);
        field.set(dynabeanpropertypointer, DynaBeanPropertyPointer.UNSPECIFIED_PROPERTY);
        when(dynaBean.get("someProperty")).thenReturn("someValue");
        assertEquals("someValue", dynabeanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_indexedProperty_ArrayIndexOutOfBoundsException_OqHK0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynaClass = mock(DynaClass.class);
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("someProperty");
        when(dynaBean.get("someProperty", 1)).thenThrow(new ArrayIndexOutOfBoundsException());
        when(dynabeanpropertypointer.getPropertyIndex()).thenReturn(1);
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> dynabeanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_indexedProperty_IllegalArgumentException_ItqE0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynaBean.getDynaClass()).thenReturn(mock(DynaClass.class));
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("someProperty");
        when(dynaBean.get("someProperty", 1)).thenThrow(new IllegalArgumentException());
        when(dynaBean.get("someProperty")).thenReturn("someValue");
        Field field = DynaBeanPropertyPointer.class.getDeclaredField("propertyIndex");
        field.setAccessible(true);
        field.set(dynabeanpropertypointer, 1);
        assertEquals("someValue", dynabeanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_nonIndexedProperty_indexNotZero_TDvd0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynaBean.getDynaClass()).thenReturn(mock(DynaClass.class));
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("someProperty");
        Field field = DynaBeanPropertyPointer.class.getDeclaredField("propertyIndex");
        field.setAccessible(true);
        field.set(dynabeanpropertypointer, 1);
        when(dynaBean.get("someProperty")).thenReturn("someValue");
        assertNotNull(dynabeanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActualProperty() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynaClass = mock(DynaClass.class);
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(mock(DOMNodePointer.class), dynaBean);
        // Test case 1: Property exists
        when(dynaClass.getDynaProperty(anyString())).thenReturn(mock(DynaProperty.class));
        assertTrue(dynabeanpropertypointer.isActualProperty());
        // Test case 2: Property does not exist
        when(dynaClass.getDynaProperty(anyString())).thenReturn(null);
        assertFalse(dynabeanpropertypointer.isActualProperty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_wholeCollection_OeQR0_fid2() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("someProperty");
        Field field = DynaBeanPropertyPointer.class.getDeclaredField("propertyIndex");
        field.setAccessible(true);
        field.set(dynabeanpropertypointer, DynaBeanPropertyPointer.UNSPECIFIED_PROPERTY);
        when(dynaBean.get("someProperty")).thenReturn("someValue");
        assertEquals("someValue", dynabeanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_indexedProperty_ArrayIndexOutOfBoundsException_OqHK0_fid2() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("someProperty");
        when(dynaBean.get("someProperty", 1)).thenThrow(new ArrayIndexOutOfBoundsException());
        when(dynabeanpropertypointer.getPropertyIndex()).thenReturn(1);
        assertNull(dynabeanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_indexedProperty_IllegalArgumentException_ItqE0_fid2() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("someProperty");
        when(dynaBean.get("someProperty", 1)).thenThrow(new IllegalArgumentException());
        when(dynaBean.get("someProperty")).thenReturn("someValue");
        Field field = DynaBeanPropertyPointer.class.getDeclaredField("propertyIndex");
        field.setAccessible(true);
        field.set(dynabeanpropertypointer, 1);
        assertEquals("someValue", dynabeanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_nonIndexedProperty_collection_WjJJ0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("someProperty");
        when(dynaBean.get("someProperty")).thenReturn(Arrays.asList("value1", "value2"));
        Field propertyIndexField = DynaBeanPropertyPointer.class.getDeclaredField("propertyIndex");
        propertyIndexField.setAccessible(true);
        propertyIndexField.set(dynabeanpropertypointer, 0);
        assertEquals("value1", dynabeanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_nonIndexedProperty_indexNotZero_TDvd0_fid2() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynabeanpropertypointer.getPropertyName()).thenReturn("someProperty");
        Field field = DynaBeanPropertyPointer.class.getDeclaredField("propertyIndex");
        field.setAccessible(true);
        field.set(dynabeanpropertypointer, 1);
        when(dynaBean.get("someProperty")).thenReturn("someValue");
        assertNull(dynabeanpropertypointer.getImmediateNode());
    }
}