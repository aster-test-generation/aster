/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathIntrospector_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeanInfo_BeanClassIsJXPathBeanInfo_XZvf1_UQfe0() throws Exception {
    Class<?> beanClass = JXPathBasicBeanInfo.class;
    JXPathIntrospector introspector = new JXPathIntrospector();
    introspector.registerAtomicClass(beanClass);
    JXPathBeanInfo beanInfo = introspector.getBeanInfo(beanClass);
    assertNotNull(beanInfo);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterAtomicClass_ReturnVoid_kiPa3_AXLL0() {
    Class beanClass = Object.class;
    JXPathIntrospector.registerAtomicClass(beanClass);
    JXPathBeanInfo returnedBeanInfo = JXPathIntrospector.getBeanInfo(beanClass);
    assertNotNull(returnedBeanInfo);
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterAtomicClass_pfik0() throws Exception {
        JXPathIntrospector.registerAtomicClass(JXPathBeanInfo.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeanInfo_Instantiate_KNey0_mXvv0() throws Exception {
    Class<?> beanClass = Object.class;
    JXPathIntrospector introspector = new JXPathIntrospector();
    java.lang.reflect.Field byClassField = JXPathIntrospector.class.getDeclaredField("byClass");
    byClassField.setAccessible(true);
    java.util.Map byClass = (java.util.Map) byClassField.get(introspector);
    byClass.clear();
    JXPathIntrospector.registerAtomicClass(beanClass);
    JXPathBeanInfo beanInfo = (JXPathBeanInfo) byClass.get(beanClass);
    assertNotNull(beanInfo);
}
}