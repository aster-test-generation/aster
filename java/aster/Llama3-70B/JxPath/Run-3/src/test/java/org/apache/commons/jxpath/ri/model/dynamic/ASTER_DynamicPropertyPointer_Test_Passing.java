/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPropertyPointer_Test_Passing {
    @Mock
    private DynamicPropertyHandler handler;
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Object bean;
    @Mock
    private Object property;
    private DynamicPropertyPointer dynamicpropertypointer;
    private String[] names;
    private String name;
    @Mock
    private JXPathContext context;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private Object value;
    private AbstractFactory factory;
    private String propertyName;
    @Mock
    private Object propertyValue;
    @Mock
    private Object baseValue;
    DOMNodePointer domNodePointer;
    private int propertyIndex = -1;
    DOMNodePointer parentPointer;
    private String requiredPropertyName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActualProperty() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        boolean result = dynamicpropertypointer.isActualProperty();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyName_qgNm0() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        String propertyName = "testProperty";
        dynamicpropertypointer.setPropertyName(propertyName);
        assertEquals(propertyName, dynamicpropertypointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyIndex_pEQV0_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        int newIndex = 10;
        dynamicpropertypointer.setPropertyIndex(newIndex);
        assertEquals(newIndex, dynamicpropertypointer.getPropertyIndex());
    }
}