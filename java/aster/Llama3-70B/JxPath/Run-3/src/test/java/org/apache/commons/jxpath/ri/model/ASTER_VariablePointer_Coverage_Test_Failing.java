/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_VariablePointer_Coverage_Test_Failing {
private QName name;
    private VariablePointer variablePointer;
    private JXPathContext context;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_NullValue_BBel0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertTrue(variablePointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_NonAtomicValue_lvwN2() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertFalse(variablePointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionWithValue_neZJ0_mDSs0() {
    QName name = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(name);
    Object value = new java.util.ArrayList<>();
    Object baseValue = value;
    boolean result = variablePointer.isCollection();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_indexNotWholeCollection_lrxu2_HFMb0() {
    VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
    variablePointer.index = 1;
    variablePointer.setValue("new value");
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_nullValuePointer_HnKb1_ptZn0() {
    VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
    variablePointer.setValue("new value");
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_ActualTrue_ValueNotNull_XXtF0_XxVa0() {
    VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
    variablePointer = new VariablePointer(new KeywordVariables("actual", true), new QName("prefix", "localName"));
    Object baseValue = "someValue";
    when(variablePointer.getBaseValue()).thenReturn(baseValue);
    int length = variablePointer.getLength();
    assertEquals(5, length); // assuming ValueUtils.getLength("someValue") returns 5
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionWithValue_neZJ0_mDSs0_fid1() {
    QName name = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(name);
    Object value = new java.util.ArrayList<>();
    variablePointer.setValue(value);
    boolean result = variablePointer.isCollection();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_CreateCollection_OeHd1() {
        int index = 0;
        Object value = new Object();
        NodePointer result = variablePointer.createChild(context, name, index, value);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_SetValue_XahJ2() {
        int index = 0;
        Object value = new Object();
        NodePointer result = variablePointer.createChild(context, name, index, value);
        assertEquals(value, result.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_Clone_ZbNW3() {
        int index = 0;
        Object value = new Object();
        NodePointer result = variablePointer.createChild(context, name, index, value);
        assertNotSame(variablePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_SetIndex_ZBRD4() {
        int index = 0;
        Object value = new Object();
        NodePointer result = variablePointer.createChild(context, name, index, value);
        assertEquals(index, result.getIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_ReturnNodePointer_hVSE5() {
        int index = 0;
        Object value = new Object();
        NodePointer result = variablePointer.createChild(context, name, index, value);
        assertTrue(result instanceof NodePointer);
    }
}