/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import org.apache.commons.jxpath.functions.ConstructorFunction;
import org.apache.commons.jxpath.functions.MethodFunction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassFunctions_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_ConstructorNotNull_rrMR0() {
        ClassFunctions classFunctions = new ClassFunctions(String.class, "namespace");
        Object[] parameters = new Object[] { "arg1" };
        Function function = classFunctions.getFunction("namespace", "new", parameters);
        assert function instanceof ConstructorFunction;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_StaticMethodNotNull_vQRz2() {
        ClassFunctions classFunctions = new ClassFunctions(String.class, "namespace");
        Object[] parameters = new Object[] { "arg1" };
        Function function = classFunctions.getFunction("namespace", "valueOf", parameters);
        assert function instanceof MethodFunction;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_StaticMethodNull_RMhy3() {
        ClassFunctions classFunctions = new ClassFunctions(String.class, "namespace");
        Object[] parameters = new Object[] { "arg1" };
        Function function = classFunctions.getFunction("namespace", "nonExistingMethod", parameters);
        assert function == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_InstanceMethodNotNull_MsPg4() {
        ClassFunctions classFunctions = new ClassFunctions(String.class, "namespace");
        Object[] parameters = new Object[] { "arg1" };
        Function function = classFunctions.getFunction("namespace", "toLowerCase", parameters);
        assert function instanceof MethodFunction;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_DifferentNamespace_IcbF7() {
        ClassFunctions classFunctions = new ClassFunctions(String.class, "namespace");
        Object[] parameters = new Object[] { "arg1" };
        Function function = classFunctions.getFunction("differentNamespace", "new", parameters);
        assert function == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_SameNamespace_JZob8() {
        ClassFunctions classFunctions = new ClassFunctions(String.class, "namespace");
        Object[] parameters = new Object[] { "arg1" };
        Function function = classFunctions.getFunction("namespace", "new", parameters);
        assert function != null;
    }
}