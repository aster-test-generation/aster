/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Array_aQIx0() {
        Object value = new int[5];
        assertTrue(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Collection_vZzN1() {
        Object value = new ArrayList<>();
        assertTrue(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_NotCollection_VdZm2() {
        Object value = "Hello";
        assertFalse(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NotContainer_cfhX1() {
        Object result = ValueUtils.getValue("value");
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Array_lSqv0() {
        assertEquals(1, ValueUtils.getCollectionHint(int[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Collection_dAJI1() {
        assertEquals(1, ValueUtils.getCollectionHint(Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Primitive_UCFb2() {
        assertEquals(-1, ValueUtils.getCollectionHint(int.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_FinalClass_OGvQ4() {
        assertEquals(-1, ValueUtils.getCollectionHint(String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_NormalClass_BtnH5() {
        assertEquals(0, ValueUtils.getCollectionHint(Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_issY0() {
        Iterator iterator = ValueUtils.iterate(null);
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_FbXc1() {
        Object collection = new Object[0];
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Array_pCzg0() {
        Object[] array = new Object[5];
        ValueUtils.setValue(array, 0, "value");
        assertEquals("value", array[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_List_HMhV1() {
        List<Object> list = new ArrayList<>();
        list.add(null);
        ValueUtils.setValue(list, 0, "value");
        assertEquals("value", list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullCollection_JrZN2() {
        Object collection = null;
        ValueUtils.setValue(collection, 0, "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_UnsupportedCollection_wbRD3() {
        Collection<Object> collection = new HashSet<>();
        try {
            ValueUtils.setValue(collection, 0, "value");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_InvalidIndex_fwUr4() {
        Object[] array = new Object[5];
        try {
            ValueUtils.setValue(array, 5, "value");
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthNull_ZIxP0() {
        assertEquals(0, ValueUtils.getLength(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthArray_jJUv1() {
        Object[] array = new Object[]{1, 2, 3};
        assertEquals(3, ValueUtils.getLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthCollection_EnSa2() {
        Collection collection = new ArrayList();
        collection.add(1);
        collection.add(2);
        assertEquals(2, ValueUtils.getLength(collection));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthSingleObject_QYfS3() {
        assertEquals(1, ValueUtils.getLength("singleObject"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_vKdi0() {
        Object[] array = new Object[]{"a", "b", "c"};
        Object result = ValueUtils.getValue(array, 1);
        assert result.equals("b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_OutOfBounds_vEjA1() {
        Object[] array = new Object[]{"a", "b", "c"};
        Object result = ValueUtils.getValue(array, 5);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_Akyf2() {
        List<String> list = new ArrayList<String>();
        list.add("a");
        list.add("b");
        list.add("c");
        Object result = ValueUtils.getValue(list, 1);
        assert result.equals("b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_OutOfBounds_ijCZ3() {
        List<String> list = new ArrayList<String>();
        list.add("a");
        list.add("b");
        list.add("c");
        Object result = ValueUtils.getValue(list, 5);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Collection_uReC4() {
        Collection<String> collection = new HashSet<String>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Object result = ValueUtils.getValue(collection, 0);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Collection_OutOfBounds_Lzwp5() {
        Collection<String> collection = new HashSet<String>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Object result = ValueUtils.getValue(collection, 5);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Null_AEIE6() {
        Object result = ValueUtils.getValue(null, 0);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyList_kRmy7() {
        List<String> list = new ArrayList<String>();
        Object result = ValueUtils.getValue(list, 0);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyCollection_DZMm8() {
        Collection<String> collection = new HashSet<String>();
        Object result = ValueUtils.getValue(collection, 0);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ArrayList_jrnM9() {
        ArrayList<String> arrayList = new ArrayList<String>();
        arrayList.add("a");
        arrayList.add("b");
        arrayList.add("c");
        Object result = ValueUtils.getValue(arrayList, 1);
        assert result.equals("b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_LinkedList_mewI10() {
        LinkedList<String> linkedList = new LinkedList<String>();
        linkedList.add("a");
        linkedList.add("b");
        linkedList.add("c");
        Object result = ValueUtils.getValue(linkedList, 1);
        assert result.equals("b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Vector_kSTs11() {
        Vector<String> vector = new Vector<String>();
        vector.add("a");
        vector.add("b");
        vector.add("c");
        Object result = ValueUtils.getValue(vector, 1);
        assert result.equals("b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Stack_emnJ12() {
        Stack<String> stack = new Stack<String>();
        stack.add("a");
        stack.add("b");
        stack.add("c");
        Object result = ValueUtils.getValue(stack, 1);
        assert result.equals("b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionNull_yQRn0() {
        Object result = ValueUtils.expandCollection(null, 10);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_idJj1() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(5, Array.getLength(result));
        assertArrayEquals(new Object[]{1, 2, 3, null, null}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_tgNp2() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(5, ((Collection) result).size());
        assertEquals(list, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArrayTooSmall_DGUP3() {
        Object[] array = new Object[]{1, 2, 3};
        try {
            ValueUtils.expandCollection(array, 2);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionUnsupportedType_MruY4() {
        try {
            ValueUtils.expandCollection(new Object(), 10);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_vYEO0() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        assertArrayEquals(new Object[]{1, 2, 4, 5}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_OutOfBounds_HGtP1() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        try {
            ValueUtils.remove(array, 10);
            fail();
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Veag2() {
        List list = new ArrayList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, list.size());
        assertEquals(1, list.get(0));
        assertEquals(2, list.get(1));
        assertEquals(4, list.get(2));
        assertEquals(5, list.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_OutOfBounds_kOKW3() {
        List list = new ArrayList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        try {
            ValueUtils.remove(list, 10);
            fail();
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_orpm4() {
        Collection collection = new HashSet();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        Object result = ValueUtils.remove(collection, 2);
        assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_OutOfBounds_SiMp5() {
        Collection collection = new HashSet();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        try {
            ValueUtils.remove(collection, 10);
            fail();
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Null_hOMu6() {
        Object result = ValueUtils.remove(null, 0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_LinkedList_bMCB10() {
        List list = new LinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, list.size());
        assertEquals(1, list.get(0));
        assertEquals(2, list.get(1));
        assertEquals(4, list.get(2));
        assertEquals(5, list.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Vector_KFnB11() {
        List list = new Vector();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, list.size());
        assertEquals(1, list.get(0));
        assertEquals(2, list.get(1));
        assertEquals(4, list.get(2));
        assertEquals(5, list.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Interface_qgRn3_fid1() {
        assertEquals(1, ValueUtils.getCollectionHint(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_lQgv2_fid1() {
        Object collection = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(collection);
        ArrayList list = new ArrayList();
        list.add("a");
        list.add("b");
        list.add("c");
        Iterator expectedIterator = list.iterator();
        while (iterator.hasNext() && expectedIterator.hasNext()) {
            assertEquals(expectedIterator.next(), iterator.next());
        }
        assertFalse(iterator.hasNext());
        assertFalse(expectedIterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyCollection_WDnJ3_fid1() {
        Collection collection = new ArrayList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_Fhjp4_fid1() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator iterator = ValueUtils.iterate(collection);
        iterator.next();
        iterator.next();
        assertEquals("c", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingleObject_VtUJ5_fid1() {
        Object collection = "a";
        Iterator iterator = ValueUtils.iterate(collection);
        ArrayList list = new ArrayList();
        list.add("a");
        Iterator expectedIterator = list.iterator();
        assertTrue(iterator.hasNext());
        assertEquals(expectedIterator.next(), iterator.next());
        assertFalse(iterator.hasNext());
        assertFalse(expectedIterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandler_EfCz0_fid1() {
        // The method getDynamicPropertyHandler is not defined in the provided class ValueUtils
        // So, we cannot test it. The method under test is remove, so we will test it.
        Object collection = new int[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(collection, 2);
        assertNotNull(result);
        assertArrayEquals(new int[]{1, 2, 4, 5}, (int[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_idJj1_1() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(5, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_idJj1_2() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertArrayEquals(new Object[]{1, 2, 3, null, null}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_tgNp2_1() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(5, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_tgNp2_2() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(list, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionSameSize_kGww5_fid1() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 3);
        assertArrayEquals(array, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Veag2_1() {
        List list = new ArrayList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Veag2_2() {
        List list = new ArrayList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(1, list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Veag2_3() {
        List list = new ArrayList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(2, list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Veag2_4() {
        List list = new ArrayList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, list.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Veag2_5() {
        List list = new ArrayList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(5, list.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_EmptyList_gOyE7_fid1() {
        List list = new ArrayList();
        try {
            ValueUtils.remove(list, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No such element at index 0", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_EmptyCollection_WlEj8_fid1() {
        Collection collection = new HashSet();
        try {
            ValueUtils.remove(collection, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No such element at index 0", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_LinkedList_bMCB10_1() {
        List list = new LinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_LinkedList_bMCB10_2() {
        List list = new LinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(1, list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_LinkedList_bMCB10_3() {
        List list = new LinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(2, list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_LinkedList_bMCB10_4() {
        List list = new LinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, list.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_LinkedList_bMCB10_5() {
        List list = new LinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(5, list.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Vector_KFnB11_1() {
        List list = new Vector();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Vector_KFnB11_2() {
        List list = new Vector();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(1, list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Vector_KFnB11_3() {
        List list = new Vector();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(2, list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Vector_KFnB11_4() {
        List list = new Vector();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, list.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Vector_KFnB11_5() {
        List list = new Vector();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(5, list.get(3));
    }

    @Test
    public void testRemove_InvocationTargetException_TzXt2_fqPU0() {
        Object collection = new Object[1];
        int index = 0;
        try {
            ValueUtils.remove(collection, index);
        } catch (JXPathException e) {
            // Expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvocationTargetException_EtAY3_iewd0() {
        try {
            ValueUtils.remove(new int[]{1, 2, 3}, 1);
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NonExistingProperty_bShz1_QZTX0() {
        try {
            ValueUtils.remove(new int[0], 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_PublicMethod_PublicClass_jKId0_PgQY0() {
        try {
            Method method = String.class.getMethod("toString");
            Method accessibleMethod = ValueUtils.getAccessibleMethod(method);
            assertSame(method, accessibleMethod);
        } catch (NoSuchMethodException e) {
            fail("NoSuchMethodException should not be thrown");
        } catch (SecurityException e) {
            fail("SecurityException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_NonPublicMethod_PublicClass_porj1_TjCv0() {
        Method method = null;
        try {
            method = ValueUtils.class.getDeclaredMethod("remove", Object.class, int.class);
        } catch (NoSuchMethodException e) {
        }
        Method accessibleMethod = ValueUtils.getAccessibleMethod(method);
        assertNotNull(accessibleMethod);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_InterfaceMethod_PublicInterface_cUJM3_NkBv0() {
        try {
            Method method = List.class.getMethod("size");
            Method accessibleMethod = ValueUtils.getAccessibleMethod(method);
            assertSame(method, accessibleMethod);
        } catch (NoSuchMethodException e) {
            fail("NoSuchMethodException occurred");
        } catch (SecurityException e) {
            fail("SecurityException occurred");
        }
    }
}