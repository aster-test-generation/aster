/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
    @Mock
    private Constant expression;
    @Mock
    private Expression[] predicates;
    @Mock
    private Step[] steps;
    @Mock
    private EvalContext context;
    private ExpressionPath expressionpath;
    private EvalContext evalContext;
    ExpressionPath expressionPath;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_FAlu0() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression[] result = expressionPath.getPredicates();
        assertArrayEquals(predicates, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ExpressionIsContextDependent_QDRc0() {
        Constant expression = new Constant("string");
        ExpressionPath ep = new ExpressionPath(expression, null, null);
        assertTrue(ep.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_NullPredicates_bcqw3() {
        Constant expression = new Constant(1);
        ExpressionPath ep = new ExpressionPath(expression, null, null);
        assertFalse(ep.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath1_LTsl0() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.isSimpleExpressionPath();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath2_UHqx1() {
        Constant constant = new Constant(1);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.isSimpleExpressionPath();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_CoreOperation_cQJG0() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath ep = new ExpressionPath(expression, predicates, steps);
        assertEquals("string", ep.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ExpressionPath_FpFv1() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath ep = new ExpressionPath(expression, predicates, steps);
        assertEquals("(string)", ep.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withPredicates_QDNz3() {
        Constant expression = new Constant("string");
        Expression predicate1 = new Constant("predicate1");
        Expression predicate2 = new Constant("predicate2");
        Expression[] predicates = new Expression[]{predicate1, predicate2};
        Step[] steps = new Step[0];
        ExpressionPath ep = new ExpressionPath(expression, predicates, steps);
        assertEquals("string[predicate1][predicate2]", ep.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withNumberConstant_gIIy6() {
        Constant expression = new Constant(123);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath ep = new ExpressionPath(expression, predicates, steps);
        assertEquals("123", ep.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withNullPredicates_welL7() {
        Constant expression = new Constant("string");
        Expression[] predicates = null;
        Step[] steps = new Step[0];
        ExpressionPath ep = new ExpressionPath(expression, predicates, steps);
        assertEquals("string", ep.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_AWeT0() throws Exception {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("expression"), new Expression[0], new Step[0]);
        EvalContext evalContext = mock(EvalContext.class);
        boolean firstMatch = true;
        Object result = expressionPath.expressionPath(evalContext, firstMatch);
        verify(evalContext).setPosition(anyInt());
        assertEquals("computedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute_FQXs0_cTGR0() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        InitialContext initialContext = new InitialContext(namespaceContext);
        EvalContext evalContext = initialContext;
        evalContext.setPosition(1);
        Object result = expressionPath.expressionPath(evalContext, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpressionPath_VkMy0() throws Exception {
        Constant expression = mock(Constant.class);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        EvalContext evalContext = mock(EvalContext.class);
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        when(expression.compute(evalContext)).thenReturn(evalContext);
        NodePointer nodePointer = mock(NodePointer.class);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        Object result = expressionPath.expressionPath(evalContext, true);
        assertEquals(nodePointer, result);
    }
}