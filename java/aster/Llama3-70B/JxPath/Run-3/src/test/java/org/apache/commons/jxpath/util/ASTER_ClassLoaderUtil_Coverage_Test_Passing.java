/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassLoaderUtil_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextCLNotNull_Rpmc0() throws ClassNotFoundException {
        ClassLoader originalContextCL = Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader());
        Class<?> clazz = ClassLoaderUtil.getClass("java.lang.String", true);
        assertNotNull(clazz);
        Thread.currentThread().setContextClassLoader(originalContextCL);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextCLNull_GLLE1_1() throws java.lang.ClassNotFoundException {
        ClassLoader originalContextCL = Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(null);
        Thread.currentThread().setContextClassLoader(originalContextCL);
        ClassNotFoundException exception = assertThrows(ClassNotFoundException.class, () -> ClassLoaderUtil.getClass("NonExistingClass", true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextCLNull_GLLE1() throws java.lang.ClassNotFoundException {
        ClassLoader originalContextCL = Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(null);
        ClassNotFoundException exception = assertThrows(ClassNotFoundException.class, () -> ClassLoaderUtil.getClass("NonExistingClass", true));
        assertNotNull(exception);
        Thread.currentThread().setContextClassLoader(originalContextCL);
    }
}