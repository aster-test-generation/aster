/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Failing {
    private Object node;
    private JDOMNodePointer jdomnodepointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    private Element element;
    private Text textNode;
    private Element elementNode;
    private Locale locale;
    private NodeTest nodeTest;
    private JXPathContext context;
    private QName name;
    private AbstractFactory factory;
    private NodeIterator iterator;
    private NodePointer nodePointer;
    QName qName;
    JDOMAttributeIterator jdomAttributeIterator;
    private ProcessingInstruction processingInstruction;
    NodePointer startWith;
    boolean reverse;
    private Attribute attribute;
    private Document document;
    private NamespaceResolver namespaceResolver;
    private JDOMNodePointer other;
    private NodePointer pointer;
    private NodeTest test;
    private NodeIterator nodeIterator;
    private Comment comment;
    private Text text;
    private Element parent;
    private List content;
    private String id;
    private CDATA cdata;
    private ProcessingInstruction pi;
    private Namespace namespace;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild() throws Exception {
        node = Mockito.mock(Object.class);
        context = Mockito.mock(JXPathContext.class);
        name = Mockito.mock(QName.class);
        factory = Mockito.mock(AbstractFactory.class);
        iterator = Mockito.mock(NodeIterator.class);
        nodePointer = Mockito.mock(NodePointer.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.getDefault());
        // given
        Mockito.when(context.getNamespaceURI(name.getPrefix())).thenReturn("namespaceURI");
        Mockito.when(name.getPrefix()).thenReturn("prefix");
        Mockito.when(factory.createObject(context, jdomnodepointer, node, name.toString(), 0)).thenReturn(true);
        Mockito.when(jdomnodepointer.childIterator(Mockito.any(NodeTest.class), Mockito.anyBoolean(), Mockito.any())).thenReturn(iterator);
        Mockito.when(iterator.setPosition(1)).thenReturn(true);
        Mockito.when(iterator.getNodePointer()).thenReturn(nodePointer);
        // when
        NodePointer result = jdomnodepointer.createChild(context, name, 0);
        // then
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        node = Mockito.mock(Object.class);
        element = Mockito.mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        pointer1 = Mockito.mock(NodePointer.class);
        pointer2 = Mockito.mock(NodePointer.class);
        // Mocking getBaseValue() method of NodePointer
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        // Test case 1: Both nodes are attributes
        int result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
        // Test case 2: Node1 is attribute, Node2 is not
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
        // Test case 3: Node1 is not attribute, Node2 is
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(1, result);
        // Test case 4: Both nodes are not attributes
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(node instanceof Element).thenReturn(true);
        Mockito.when(((Element) node).getContent()).thenReturn(Arrays.asList(Mockito.mock(Object.class), Mockito.mock(Object.class)));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_TextNode_NullValue() throws Exception {
        locale = Locale.US;
        textNode = mock(Text.class);
        elementNode = mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(textNode, locale);
        jdomnodepointer.setValue(null);
        verify(textNode).getParent();
        verify(textNode.getParent()).removeContent(textNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementNode_ElementValue() throws Exception {
        locale = Locale.US;
        textNode = mock(Text.class);
        elementNode = mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(textNode, locale);
        Element elementValue = mock(Element.class);
        List getContent = mock(List.class);
        when(elementNode.getContent()).thenReturn(getContent);
        jdomnodepointer = new JDOMNodePointer(elementNode, locale);
        jdomnodepointer.setValue(elementValue);
        verify(getContent).clear();
        verify(elementNode).addContent(elementValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementNode_TextValue() throws Exception {
        locale = Locale.US;
        textNode = mock(Text.class);
        elementNode = mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(textNode, locale);
        Text textValue = mock(Text.class);
        List getContent = mock(List.class);
        when(elementNode.getContent()).thenReturn(getContent);
        jdomnodepointer = new JDOMNodePointer(elementNode, locale);
        jdomnodepointer.setValue(textValue);
        verify(getContent).clear();
        verify(elementNode).addContent(textValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementNode_CDATAValue() throws Exception {
        locale = Locale.US;
        textNode = mock(Text.class);
        elementNode = mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(textNode, locale);
        CDATA cdataValue = mock(CDATA.class);
        List getContent = mock(List.class);
        when(elementNode.getContent()).thenReturn(getContent);
        jdomnodepointer = new JDOMNodePointer(elementNode, locale);
        jdomnodepointer.setValue(cdataValue);
        verify(getContent).clear();
        verify(elementNode).addContent(cdataValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementNode_PIValue() throws Exception {
        locale = Locale.US;
        textNode = mock(Text.class);
        elementNode = mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(textNode, locale);
        ProcessingInstruction piValue = mock(ProcessingInstruction.class);
        List getContent = mock(List.class);
        when(elementNode.getContent()).thenReturn(getContent);
        jdomnodepointer = new JDOMNodePointer(elementNode, locale);
        jdomnodepointer.setValue(piValue);
        verify(getContent).clear();
        verify(elementNode).addContent(piValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementNode_CommentValue() throws Exception {
        locale = Locale.US;
        textNode = mock(Text.class);
        elementNode = mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(textNode, locale);
        Comment commentValue = mock(Comment.class);
        List getContent = mock(List.class);
        when(elementNode.getContent()).thenReturn(getContent);
        jdomnodepointer = new JDOMNodePointer(elementNode, locale);
        jdomnodepointer.setValue(commentValue);
        verify(getContent).clear();
        verify(elementNode).addContent(commentValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementNode_StringValue() throws Exception {
        locale = Locale.US;
        textNode = mock(Text.class);
        elementNode = mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(textNode, locale);
        String stringValue = "test value";
        List getContent = mock(List.class);
        when(elementNode.getContent()).thenReturn(getContent);
        jdomnodepointer = new JDOMNodePointer(elementNode, locale);
        jdomnodepointer.setValue(stringValue);
        verify(getContent).clear();
        verify(elementNode).addContent(new Text(stringValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // given
        int expectedHashCode = 123;
        Mockito.when(node.hashCode()).thenReturn(expectedHashCode);
        // when
        int actualHashCode = jdomnodepointer.hashCode();
        // then
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateAttribute() throws Exception {
        node = Mockito.mock(Element.class);
        context = Mockito.mock(JXPathContext.class);
        name = new QName("prefix", "localName");
        element = (Element) node;
        namespaceResolver = Mockito.mock(NamespaceResolver.class);
        iterator = Mockito.mock(NodeIterator.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        Mockito.when(jdomnodepointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        Mockito.when(namespaceResolver.getNamespaceURI("prefix")).thenReturn("namespaceUri");
        Mockito.when(element.getAttribute(name.getName(), Namespace.getNamespace("prefix", "namespaceUri"))).thenReturn(null);
        Mockito.when(element.getAttribute(name.getName())).thenReturn(null);
        Mockito.when(jdomnodepointer.attributeIterator(name)).thenReturn(iterator);
        Mockito.when(iterator.setPosition(1)).thenReturn(true);
        NodePointer result = jdomnodepointer.createAttribute(context, name);
        assertNotNull(result);
        assertEquals(iterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Comment() throws Exception {
        node = Mockito.mock(Object.class);
        nodeIterator = Mockito.mock(NodeIterator.class);
        nodePointer = Mockito.mock(NodePointer.class);
        element = Mockito.mock(Element.class);
        comment = Mockito.mock(Comment.class);
        text = Mockito.mock(Text.class);
        processingInstruction = Mockito.mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Given
        Mockito.when(node instanceof Comment).thenReturn(true);
        Mockito.when(((Comment) node).getText()).thenReturn(" comment text ");
        // When
        String result = (String) jdomnodepointer.getValue();
        // Then
        assertEquals("comment text", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Text() throws Exception {
        node = Mockito.mock(Object.class);
        nodeIterator = Mockito.mock(NodeIterator.class);
        nodePointer = Mockito.mock(NodePointer.class);
        element = Mockito.mock(Element.class);
        comment = Mockito.mock(Comment.class);
        text = Mockito.mock(Text.class);
        processingInstruction = Mockito.mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Given
        Mockito.when(node instanceof Text).thenReturn(true);
        Mockito.when(((Text) node).getText()).thenReturn(" text value ");
        // When
        String result = (String) jdomnodepointer.getValue();
        // Then
        assertEquals("text value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ProcessingInstruction() throws Exception {
        node = Mockito.mock(Object.class);
        nodeIterator = Mockito.mock(NodeIterator.class);
        nodePointer = Mockito.mock(NodePointer.class);
        element = Mockito.mock(Element.class);
        comment = Mockito.mock(Comment.class);
        text = Mockito.mock(Text.class);
        processingInstruction = Mockito.mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Given
        Mockito.when(node instanceof ProcessingInstruction).thenReturn(true);
        Mockito.when(((ProcessingInstruction) node).getData()).thenReturn(" pi data ");
        // When
        String result = (String) jdomnodepointer.getValue();
        // Then
        assertEquals("pi data", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_IIuJ0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("ns", "ln"), Locale.US);
        QName name = pointer.getName();
        assertEquals("ns", name.getPrefix());
        assertEquals("ln", name.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_EmptyNamespacePrefix_Element_UZLg1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("", "ln"), Locale.US);
        QName name = pointer.getName();
        assertNull(name.getPrefix());
        assertEquals("ln", name.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNamespacePrefix_Element_XrJw3() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element(null, "ln"), Locale.US);
        QName name = pointer.getName();
        assertNull(name.getPrefix());
        assertEquals("ln", name.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLanguage() throws Exception {
        locale = Locale.ENGLISH;
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        // Test case 1: current language is null
        Mockito.when(jdomnodepointer.getLanguage()).thenReturn(null);
        assertTrue(jdomnodepointer.isLanguage("en"));
        // Test case 2: current language matches the input language
        Mockito.when(jdomnodepointer.getLanguage()).thenReturn("en-US");
        assertTrue(jdomnodepointer.isLanguage("en"));
        // Test case 3: current language does not match the input language
        Mockito.when(jdomnodepointer.getLanguage()).thenReturn("fr-FR");
        assertFalse(jdomnodepointer.isLanguage("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_ElementWithoutPrefix_zqvx1() {
        Element element = new Element("localName", "uri", "localName");
        String prefix = JDOMNodePointer.getPrefix(element);
        assert prefix == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_xmlPrefix() throws Exception {
        node = mock(Document.class);
        element = mock(Element.class);
        document = mock(Document.class);
        namespace = mock(Namespace.class);
        when(node instanceof Document).thenReturn(true);
        when(((Document) node).getRootElement()).thenReturn(element);
        when(element.getNamespace("prefix")).thenReturn(namespace);
        when(namespace.getURI()).thenReturn("http://example.com");
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        assertEquals(Namespace.XML_NAMESPACE.getURI(), jdomnodepointer.getNamespaceURI("xml"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_nullElement() throws Exception {
        node = mock(Document.class);
        element = mock(Element.class);
        document = mock(Document.class);
        namespace = mock(Namespace.class);
        when(node instanceof Document).thenReturn(true);
        when(((Document) node).getRootElement()).thenReturn(element);
        when(element.getNamespace("prefix")).thenReturn(namespace);
        when(namespace.getURI()).thenReturn("http://example.com");
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(node instanceof Document).thenReturn(false);
        when(node instanceof Element).thenReturn(false);
        assertNull(jdomnodepointer.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_nullNamespace() throws Exception {
        node = mock(Document.class);
        element = mock(Element.class);
        document = mock(Document.class);
        namespace = mock(Namespace.class);
        when(node instanceof Document).thenReturn(true);
        when(((Document) node).getRootElement()).thenReturn(element);
        when(element.getNamespace("prefix")).thenReturn(namespace);
        when(namespace.getURI()).thenReturn("http://example.com");
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(element.getNamespace("prefix")).thenReturn(null);
        assertNull(jdomnodepointer.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_documentWithoutRootElement_WOot6() {
        Document document = new Document();
        JDOMNodePointer pointer = new JDOMNodePointer(document, Locale.US);
        String result = pointer.getNamespaceURI("prefix");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode8_hksi7() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("test", "ns"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode12_mEOP11() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("*", "ns"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_1() throws Exception {
        node = Mockito.mock(Object.class);
        element = Mockito.mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        pointer1 = Mockito.mock(NodePointer.class);
        pointer2 = Mockito.mock(NodePointer.class);
        // Mocking getBaseValue() method of NodePointer
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        // Test case 1: Both nodes are attributes
        int result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        // Test case 2: Node1 is attribute, Node2 is not
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        // Test case 3: Node1 is not attribute, Node2 is
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        // Test case 4: Both nodes are not attributes
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(node instanceof Element).thenReturn(true);
        Mockito.when(((Element) node).getContent()).thenReturn(Arrays.asList(Mockito.mock(Object.class), Mockito.mock(Object.class)));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_2() throws Exception {
        node = Mockito.mock(Object.class);
        element = Mockito.mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        pointer1 = Mockito.mock(NodePointer.class);
        pointer2 = Mockito.mock(NodePointer.class);
        // Mocking getBaseValue() method of NodePointer
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        // Test case 1: Both nodes are attributes
        int result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        // Test case 2: Node1 is attribute, Node2 is not
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        // Test case 3: Node1 is not attribute, Node2 is
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        // Test case 4: Both nodes are not attributes
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(node instanceof Element).thenReturn(true);
        Mockito.when(((Element) node).getContent()).thenReturn(Arrays.asList(Mockito.mock(Object.class), Mockito.mock(Object.class)));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_3() throws Exception {
        node = Mockito.mock(Object.class);
        element = Mockito.mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        pointer1 = Mockito.mock(NodePointer.class);
        pointer2 = Mockito.mock(NodePointer.class);
        // Mocking getBaseValue() method of NodePointer
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        // Test case 1: Both nodes are attributes
        int result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        // Test case 2: Node1 is attribute, Node2 is not
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        // Test case 3: Node1 is not attribute, Node2 is
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        // Test case 4: Both nodes are not attributes
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Object.class));
        Mockito.when(node instanceof Element).thenReturn(true);
        Mockito.when(((Element) node).getContent()).thenReturn(Arrays.asList(Mockito.mock(Object.class), Mockito.mock(Object.class)));
        result = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateAttribute_1() throws Exception {
        node = Mockito.mock(Element.class);
        context = Mockito.mock(JXPathContext.class);
        name = new QName("prefix", "localName");
        element = (Element) node;
        namespaceResolver = Mockito.mock(NamespaceResolver.class);
        iterator = Mockito.mock(NodeIterator.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        Mockito.when(jdomnodepointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        Mockito.when(namespaceResolver.getNamespaceURI("prefix")).thenReturn("namespaceUri");
        Mockito.when(element.getAttribute(name.getName(), Namespace.getNamespace("prefix", "namespaceUri"))).thenReturn(null);
        Mockito.when(element.getAttribute(name.getName())).thenReturn(null);
        Mockito.when(jdomnodepointer.attributeIterator(name)).thenReturn(iterator);
        Mockito.when(iterator.setPosition(1)).thenReturn(true);
        NodePointer result = jdomnodepointer.createAttribute(context, name);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateAttribute_2() throws Exception {
        node = Mockito.mock(Element.class);
        context = Mockito.mock(JXPathContext.class);
        name = new QName("prefix", "localName");
        element = (Element) node;
        namespaceResolver = Mockito.mock(NamespaceResolver.class);
        iterator = Mockito.mock(NodeIterator.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        Mockito.when(jdomnodepointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        Mockito.when(namespaceResolver.getNamespaceURI("prefix")).thenReturn("namespaceUri");
        Mockito.when(element.getAttribute(name.getName(), Namespace.getNamespace("prefix", "namespaceUri"))).thenReturn(null);
        Mockito.when(element.getAttribute(name.getName())).thenReturn(null);
        Mockito.when(jdomnodepointer.attributeIterator(name)).thenReturn(iterator);
        Mockito.when(iterator.setPosition(1)).thenReturn(true);
        NodePointer result = jdomnodepointer.createAttribute(context, name);
        assertEquals(iterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_IIuJ0_1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("ns", "ln"), Locale.US);
        QName name = pointer.getName();
        assertEquals("ns", name.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_IIuJ0_2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("ns", "ln"), Locale.US);
        QName name = pointer.getName();
        assertEquals("ln", name.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_EmptyNamespacePrefix_Element_UZLg1_1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("", "ln"), Locale.US);
        QName name = pointer.getName();
        assertNull(name.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_EmptyNamespacePrefix_Element_UZLg1_2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("", "ln"), Locale.US);
        QName name = pointer.getName();
        assertEquals("ln", name.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNamespacePrefix_Element_XrJw3_1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element(null, "ln"), Locale.US);
        QName name = pointer.getName();
        assertNull(name.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNamespacePrefix_Element_XrJw3_2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element(null, "ln"), Locale.US);
        QName name = pointer.getName();
        assertEquals("ln", name.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLanguage_1() throws Exception {
        locale = Locale.ENGLISH;
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        // Test case 1: current language is null
        Mockito.when(jdomnodepointer.getLanguage()).thenReturn(null);
        // Test case 2: current language matches the input language
        Mockito.when(jdomnodepointer.getLanguage()).thenReturn("en-US");
        // Test case 3: current language does not match the input language
        Mockito.when(jdomnodepointer.getLanguage()).thenReturn("fr-FR");
        assertTrue(jdomnodepointer.isLanguage("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLanguage_3() throws Exception {
        locale = Locale.ENGLISH;
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        // Test case 1: current language is null
        Mockito.when(jdomnodepointer.getLanguage()).thenReturn(null);
        // Test case 2: current language matches the input language
        Mockito.when(jdomnodepointer.getLanguage()).thenReturn("en-US");
        // Test case 3: current language does not match the input language
        Mockito.when(jdomnodepointer.getLanguage()).thenReturn("fr-FR");
        assertFalse(jdomnodepointer.isLanguage("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_U_1_dtiv0() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(jdomnodepointer.createChild(context, name, 0)).thenReturn(nodePointer);
        NodePointer result = jdomnodepointer.createChild(context, name, 0, "value");
        verify(nodePointer).setValue("value");
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_e_tYyh0() throws Exception {
        node = mock(Document.class);
        element = mock(Element.class);
        document = mock(Document.class);
        namespace = mock(Namespace.class);
        when(node instanceof Document).thenReturn(true);
        when(((Document) node).getRootElement()).thenReturn(element);
        when(element.getNamespace("prefix")).thenReturn(namespace);
        when(namespace.getURI()).thenReturn("http://example.com");
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        assertEquals("http://example.com", jdomnodepointer.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_ohCV0() throws Exception {
        org.w3c.dom.Node node = Mockito.mock(org.w3c.dom.Node.class);
        Mockito.when(node.getNamespaceURI()).thenReturn("namespace-uri");
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        String namespaceURI = jdomnodepointer.getNamespaceURI("prefix");
        assertEquals("namespace-uri", namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Element_keEX2_GoiP0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("element"), Locale.US);
        Element value = new Element("value");
        pointer.setValue(value);
        assertEquals(value, pointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Text_Empty_jURJ1_pFzN0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("old"), Locale.US);
        pointer.setValue("");
        assertNull(pointer.getNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Comment_Instance_pMzY7_qrCh0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("element"), Locale.US);
        Comment value = new Comment("comment");
        pointer.setValue(value);
        assertEquals(value, pointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_PI_Instance_mDMc6_ZOeM0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("element"), Locale.US);
        ProcessingInstruction value = new ProcessingInstruction("pi", "target");
        pointer.setValue(value);
        assertEquals(value, pointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLanguage_xMQb0() throws Exception {
        org.w3c.dom.Node node = Mockito.mock(org.w3c.dom.Node.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        Mockito.when(JDOMNodePointer.findEnclosingAttribute(node, "lang", Namespace.XML_NAMESPACE)).thenReturn("en-US");
        String language = jdomnodepointer.getLanguage();
        assertEquals("en-US", language);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild2_QYMy1_wGap0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.US, "id");
        QName name = new QName("qualifiedName");
        NodePointer result = nodePointer.createChild(context, name, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_CDATA_KYRI5_XgZg0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("parent"), Locale.US);
        pointer.setValue(new CDATA("text"));
        assertEquals("text", ((CDATA) ((Element) pointer.getImmediateNode()).getContent().get(0)).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild4_jMnm3_qYxU0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.US);
        QName name = new QName("qualifiedName");
        NodePointer result = nodePointer.createChild(context, name, JDOMNodePointer.WHOLE_COLLECTION);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild1_DpfJ0_fxOa0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.US);
        QName name = new QName("prefix", "localName");
        NodePointer result = nodePointer.createChild(context, name, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild5_awel4_SMwL0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.US, "id");
        QName name = new QName("prefix", "localName");
        NodePointer result = nodePointer.createChild(context, name, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_wZEb0_milN0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.US);
        NodePointer ptr = nodePointer.createChild(context, name, 0, "value");
        assertEquals("value", ptr.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_Ftzp0_2() throws Exception {
        Object node = Mockito.mock(Object.class);
        Locale locale = Mockito.mock(Locale.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, locale);
        NamespaceResolver namespaceResolver = Mockito.mock(NamespaceResolver.class);
        jdomnodepointer.setNamespaceResolver(namespaceResolver);
        NamespaceResolver result = jdomnodepointer.getNamespaceResolver();
        assertEquals(namespaceResolver, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute5_xqJd4_wnSU0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("qualifiedName");
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US, "id");
        NodePointer result = pointer.createAttribute(context, name);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute2_RWew1_mxBq0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US, "id");
        NodePointer result = pointer.createAttribute(context, name);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute4_rwAL3_LvGt0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        NodePointer result = pointer.createAttribute(context, name);
        assertNotNull(result);
    }
}