/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributeIterator_Test_Failing {
    private int position = 0;
    DOMAttributeIterator domattributeiterator;
    Node node;
    DOMNodePointer nodepointer;
    Attr attr;
    QName qname;
    NamedNodeMap namednodemap;
    private List<Attr> attributes = new ArrayList<>();
    DOMAttributeIterator domAttributeIterator;
    DOMNodePointer nodePointer;
    NamedNodeMap namedNodeMap;
    QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        qname = mock(QName.class);
        namednodemap = mock(NamedNodeMap.class);
        domattributeiterator = new DOMAttributeIterator(nodepointer, qname);
        when(nodepointer.getNode()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namednodemap);
        int result = domattributeiterator.getPosition();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointer_WLQe0_1() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        QName qname = mock(QName.class);
        NamedNodeMap namednodemap = mock(NamedNodeMap.class);
        List<Attr> list = new ArrayList<>();
        list.add(attr);
        List<Attr> attributes = list;
        Locale locale = mock(Locale.class);
        DOMNodePointer parent = new DOMNodePointer(node, locale);
        DOMAttributeIterator domattributeiterator = new DOMAttributeIterator(parent, qname);
        when(node.getAttributes()).thenReturn(namednodemap);
        when(namednodemap.getNamedItem(qname.toString())).thenReturn(attr);
        when(attributes.get(0)).thenReturn(attr);
        NodePointer result = domattributeiterator.getNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointer_WLQe0_2() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        QName qname = mock(QName.class);
        NamedNodeMap namednodemap = mock(NamedNodeMap.class);
        List<Attr> list = new ArrayList<>();
        list.add(attr);
        List<Attr> attributes = list;
        Locale locale = mock(Locale.class);
        DOMNodePointer parent = new DOMNodePointer(node, locale);
        DOMAttributeIterator domattributeiterator = new DOMAttributeIterator(parent, qname);
        when(node.getAttributes()).thenReturn(namednodemap);
        when(namednodemap.getNamedItem(qname.toString())).thenReturn(attr);
        when(attributes.get(0)).thenReturn(attr);
        NodePointer result = domattributeiterator.getNodePointer();
        assertTrue(result instanceof DOMAttributePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointer_WLQe0_3() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        QName qname = mock(QName.class);
        NamedNodeMap namednodemap = mock(NamedNodeMap.class);
        List<Attr> list = new ArrayList<>();
        list.add(attr);
        List<Attr> attributes = list;
        Locale locale = mock(Locale.class);
        DOMNodePointer parent = new DOMNodePointer(node, locale);
        DOMAttributeIterator domattributeiterator = new DOMAttributeIterator(parent, qname);
        when(node.getAttributes()).thenReturn(namednodemap);
        when(namednodemap.getNamedItem(qname.toString())).thenReturn(attr);
        when(attributes.get(0)).thenReturn(attr);
        NodePointer result = domattributeiterator.getNodePointer();
        assertEquals(attr, ((DOMAttributePointer) result).getNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointer_WLQe0_1_fid2() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        QName qname = mock(QName.class);
        NamedNodeMap namednodemap = mock(NamedNodeMap.class);
        when(node.getAttributes()).thenReturn(namednodemap);
        when(namednodemap.getNamedItem(qname.toString())).thenReturn(attr);
        Locale locale = mock(Locale.class);
        DOMNodePointer parent = new DOMNodePointer(node, locale);
        DOMAttributeIterator domattributeiterator = new DOMAttributeIterator(parent, qname);
        NodePointer result = domattributeiterator.getNodePointer();
        assertNotNull(result);
        assertEquals(parent, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointer_WLQe0_2_fid2() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        QName qname = mock(QName.class);
        NamedNodeMap namednodemap = mock(NamedNodeMap.class);
        when(node.getAttributes()).thenReturn(namednodemap);
        when(namednodemap.getNamedItem(qname.toString())).thenReturn(attr);
        Locale locale = mock(Locale.class);
        DOMNodePointer parent = new DOMNodePointer(node, locale);
        DOMAttributeIterator domattributeiterator = new DOMAttributeIterator(parent, qname);
        NodePointer result = domattributeiterator.getNodePointer();
        assertTrue(result instanceof DOMAttributePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointer_WLQe0_3_fid2() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        QName qname = mock(QName.class);
        NamedNodeMap namednodemap = mock(NamedNodeMap.class);
        when(node.getAttributes()).thenReturn(namednodemap);
        when(namednodemap.getNamedItem(qname.toString())).thenReturn(attr);
        Locale locale = mock(Locale.class);
        DOMNodePointer parent = new DOMNodePointer(node, locale);
        DOMAttributeIterator domattributeiterator = new DOMAttributeIterator(parent, qname);
        NodePointer result = domattributeiterator.getNodePointer();
        assertEquals(attr, result.getNode());
    }
}