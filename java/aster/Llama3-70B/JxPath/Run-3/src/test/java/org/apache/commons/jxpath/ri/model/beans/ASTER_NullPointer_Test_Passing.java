/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Passing {
    private QName name;
    private NullPointer nullpointer;
    private NullPointer otherNullPointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private JXPathContext context;
    @Mock
    private Object value;
    private Pointer pointer;
    PropertyPointer propertyPointer;
    private String id = "testId";
    Locale locale;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        nullpointer = new NullPointer(parent, new QName("test"));
        // given
        NodePointer nodePointer = mock(NodePointer.class);
        when(parent.createPath(context, value)).thenReturn(nodePointer);
        when(nodePointer.getValuePointer()).thenReturn(nodePointer);
        // when
        NodePointer result = nullpointer.createPath(context, value);
        // then
        verify(parent).createPath(context, value);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        nullpointer = new NullPointer(Locale.US, "id");
        assertFalse(nullpointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_rlHM0() {
        Locale locale = new Locale("en", "US");
        String id = "id";
        NullPointer nullPointer = new NullPointer(locale, id);
        boolean result = nullPointer.isCollection();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_vUFc0() {
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        assertTrue(nullPointer.equals(nullPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_LgGs1() {
        Object obj = new Object();
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        assertFalse(nullPointer.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameName_eafr2() {
        QName name = new QName("qualifiedName");
        NullPointer nullPointer1 = new NullPointer(name, Locale.US);
        NullPointer nullPointer2 = new NullPointer(name, Locale.US);
        assertTrue(nullPointer1.equals(nullPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_wroc3() {
        QName name1 = new QName("qualifiedName1");
        QName name2 = new QName("qualifiedName2");
        NullPointer nullPointer1 = new NullPointer(name1, Locale.US);
        NullPointer nullPointer2 = new NullPointer(name2, Locale.US);
        assertFalse(nullPointer1.equals(nullPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullName_VHUf4() {
        NullPointer nullPointer1 = new NullPointer((QName) null, Locale.US);
        NullPointer nullPointer2 = new NullPointer((QName) null, Locale.US);
        assertTrue(nullPointer1.equals(nullPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_OneNullName_qmda5() {
        QName name = new QName("qualifiedName");
        NullPointer nullPointer1 = new NullPointer(name, Locale.US);
        NullPointer nullPointer2 = new NullPointer((QName) null, Locale.US);
        assertFalse(nullPointer1.equals(nullPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withId() throws Exception {
        parent = mock(DOMNodePointer.class);
        nullpointer = new NullPointer(mock(Locale.class), id);
        assertEquals("id(testId)", nullpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withNullParent() throws Exception {
        parent = mock(DOMNodePointer.class);
        nullpointer = new NullPointer(mock(Locale.class), id);
        nullpointer = new NullPointer(mock(QName.class), mock(Locale.class));
        assertEquals("null()", nullpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_fEYw0() {
        Locale locale = new Locale("en", "US");
        NullPointer nullPointer = new NullPointer(locale, "id");
        PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        nullpointer = new NullPointer(Locale.US, "id");
        int length = nullpointer.getLength();
        assertEquals(0, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        locale = new Locale("en", "US");
        name = new QName("prefix", "localName");
        nullpointer = new NullPointer(locale, "id");
        Object result = nullpointer.getBaseValue();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        nullpointer = new NullPointer(new Locale("en", "US"), "id");
        assertFalse(nullpointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_NAbb0() {
        Locale locale = new Locale("en", "US");
        String id = "id";
        NullPointer nullPointer = new NullPointer(locale, id);
        assertEquals(0, nullPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withId_hXlk0() {
        NullPointer nullPointer = new NullPointer(Locale.US, "testId");
        assertEquals("id(testId)", nullPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withoutIdAndParent_yONL2() {
        NullPointer nullPointer = new NullPointer(new QName("name"), Locale.US);
        assertEquals("null()", nullPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        nullpointer = new NullPointer(Locale.US, "id");
        boolean result = nullpointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_DQqM0() {
        Locale locale = new Locale("en", "US");
        String id = "testId";
        NullPointer nullPointer = new NullPointer(locale, id);
        assertNull(nullPointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_cWqd0() {
        Locale locale = new Locale("en", "US");
        String id = "testId";
        NullPointer nullPointer = new NullPointer(locale, id);
        assertFalse(nullPointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_XMmE0() {
        Locale locale = new Locale("en", "US");
        String id = "id";
        NullPointer nullPointer = new NullPointer(locale, id);
        assertTrue(nullPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_1_APKv0_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer parent = new VariablePointer(variables, new QName("prefix", "localName"));
        NullPointer nullPointer = new NullPointer(parent, new QName("qualifiedName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_npFq0_fid1() {
        Locale locale = new Locale("en", "US");
        String id = "testId";
        NullPointer nullPointer = new NullPointer(locale, id);
        QName name = new QName("qualifiedName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_P1_aDvN0() throws Exception {
        parent = mock(DOMNodePointer.class);
        context = mock(JXPathContext.class);
        nullpointer = new NullPointer(parent, mock(QName.class));
        NodePointer nodePointer = mock(NodePointer.class);
        when(parent.createPath(context)).thenReturn(nodePointer);
        when(nodePointer.getValuePointer()).thenReturn(nodePointer);
        NodePointer result = nullpointer.createPath(context);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_withoutParent_EslF1_YYwB0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        try {
            nullPointer.createPath(context, new Object());
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameName_ETyG0() throws Exception {
        QName name = new QName("testQualifiedName");
        NullPointer nullpointer = new NullPointer(Locale.US, "id");
        NullPointer otherNullPointer = new NullPointer(Locale.US, "id");
        assertTrue(nullpointer.equals(otherNullPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_withoutParent_GQyI1_BtRk0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        try {
            nullPointer.createPath(context);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }
}