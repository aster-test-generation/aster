/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Failing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Attr attr;
    @Mock
    private NodePointer pointer1;
    @Mock
    private NodePointer pointer2;
    private DOMAttributePointer domattributepointer;
    private DOMAttributePointer anotherDOMAttributePointer;
    NodeTest nodeTest;
    NodeTypeTest nodeTypeTest;
    DOMAttributePointer domAttributePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        when(DOMNodePointer.getPrefix(attr)).thenReturn("prefix");
        when(DOMNodePointer.getLocalName(attr)).thenReturn("localName");
        QName result = domattributepointer.getName();
        assertEquals("prefix", result.getPrefix());
        assertEquals("localName", result.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        // Test case 1: prefix is null
        when(DOMNodePointer.getPrefix(attr)).thenReturn(null);
        assertNull(domattributepointer.getNamespaceURI());
        // Test case 2: prefix is not null, parent returns namespace URI
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        when(DOMNodePointer.getPrefix(attr)).thenReturn(prefix);
        when(parent.getNamespaceURI(prefix)).thenReturn(namespaceURI);
        assertEquals(namespaceURI, domattributepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_1() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        when(DOMNodePointer.getPrefix(attr)).thenReturn("prefix");
        when(DOMNodePointer.getLocalName(attr)).thenReturn("localName");
        QName result = domattributepointer.getName();
        assertEquals("prefix", result.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_2() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        when(DOMNodePointer.getPrefix(attr)).thenReturn("prefix");
        when(DOMNodePointer.getLocalName(attr)).thenReturn("localName");
        QName result = domattributepointer.getName();
        assertEquals("localName", result.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_1() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        // Test case 1: prefix is null
        when(DOMNodePointer.getPrefix(attr)).thenReturn(null);
        // Test case 2: prefix is not null, parent returns namespace URI
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        when(DOMNodePointer.getPrefix(attr)).thenReturn(prefix);
        when(parent.getNamespaceURI(prefix)).thenReturn(namespaceURI);
        assertNull(domattributepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_2() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        // Test case 1: prefix is null
        when(DOMNodePointer.getPrefix(attr)).thenReturn(null);
        // Test case 2: prefix is not null, parent returns namespace URI
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        when(DOMNodePointer.getPrefix(attr)).thenReturn(prefix);
        when(parent.getNamespaceURI(prefix)).thenReturn(namespaceURI);
        assertEquals(namespaceURI, domattributepointer.getNamespaceURI());
    }
}