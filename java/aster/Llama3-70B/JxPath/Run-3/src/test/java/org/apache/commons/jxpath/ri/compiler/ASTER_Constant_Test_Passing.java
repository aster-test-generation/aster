/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verifyNoInteractions;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Constant_Test_Passing {
    private Object value = "some value";
    Constant constant;
    EvalContext evalContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        constant = new Constant("some value");
        evalContext = Mockito.mock(EvalContext.class);
        // when
        Object result = constant.computeValue(evalContext);
        // then
        assertEquals(value, result);
        Mockito.verifyNoInteractions(evalContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_String_jnOs0() {
        Constant constant = new Constant("string");
        boolean result = constant.isContextDependent();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_Number_ZbIo1() {
        Constant constant = new Constant(10);
        boolean result = constant.isContextDependent();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_String_aWGo0() {
        Constant constant = new Constant("string");
        assertFalse(constant.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_Number_kRKb1() {
        Constant constant = new Constant(1);
        assertFalse(constant.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNumber_LpGB0() {
        Constant constant = new Constant(10);
        assertEquals("10", constant.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithString_hiIK1() {
        Constant constant = new Constant("Hello");
        assertEquals("'Hello'", constant.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompute_nKVY0() throws Exception {
        evalContext = mock(EvalContext.class);
        constant = new Constant("testString");
        Object value = "testString"; // Initialize the value variable
        Field field = Constant.class.getDeclaredField("value"); // Get the private field
        field.setAccessible(true); // Make the private field accessible
        field.set(constant, value); // Set the value to the private field
        Object result = constant.compute(evalContext);
        assertEquals(value, result);
        verifyNoInteractions(evalContext);
    }
}