/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_KrCf1_1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_KrCf1_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertEquals("int", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoMatch_iLqt2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{1});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameter_WIaK3_1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameter_WIaK3_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
        assertEquals("java.lang.String", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoConstructors_Eoac6() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_PrimitiveType_viOe7_1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(int.class, new Object[]{1});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_PrimitiveType_viOe7_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(int.class, new Object[]{1});
        assertEquals("int", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_WrapperType_xQzw8_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertEquals("java.lang.Integer", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ArrayType_RPiJ9_1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String[].class, new Object[]{new String[]{"test"}});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ArrayType_RPiJ9_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String[].class, new Object[]{new String[]{"test"}});
        assertEquals("[Ljava.lang.String;", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_dLSe10() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, null);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod3_bJvF2() {
        Method method = MethodLookupUtils.lookupStaticMethod(Math.class, "max", new Object[]{1, 2});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod5_fDZX4() {
        Method method = MethodLookupUtils.lookupStaticMethod(Character.class, "toUpperCase", new Object[]{'a'});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod6_SoeJ5() {
        Method method = MethodLookupUtils.lookupStaticMethod(Void.class, "toString", new Object[]{});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod11_Qacd10() {
        Method method = MethodLookupUtils.lookupStaticMethod(ProcessBuilder.class, "start", new Object[]{});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod12_wWrz11() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "format", new Object[]{"test", "arg"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod1_mcaB0() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod3_kMCW2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{new Object()});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod4_kPKi3() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{1});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod7_hQTo6() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "indexOf", new Object[]{""});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod10_gpEa9() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "indexOf", new Object[]{"", 1});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod12_dEsP11() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "indexOf", new Object[]{new Object(), 1});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod13_bVmb12() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "concat", new Object[]{""});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod16_bAwK15() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "replace", new Object[]{"", ""});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_KrCf1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertNotNull(constructor);
        assertEquals("int", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameter_WIaK3() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
        assertNotNull(constructor);
        assertEquals("java.lang.String", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_PrimitiveType_viOe7() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(int.class, new Object[]{1});
        assertNotNull(constructor);
        assertEquals("int", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_WrapperType_xQzw8() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertNotNull(constructor);
        assertEquals("java.lang.Integer", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ArrayType_RPiJ9() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String[].class, new Object[]{new String[]{"test"}});
        assertNotNull(constructor);
        assertEquals("[Ljava.lang.String;", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_KrCf1_1_fid2() {
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_KrCf1_2_fid2() {
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertEquals("java.lang.Integer", constructor.getDeclaringClass().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoMatch_iLqt2_fid2() {
        try {
            MethodLookupUtils.lookupMethod(String.class, "init", new Object[]{1});
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: init", e.getMessage());
            return;
        }
        fail("Expected JXPathException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_WrapperType_xQzw8_1_fid2() {
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{int.class});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_WrapperType_xQzw8_2_fid2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{int.class});
        assertEquals("int", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod3_bJvF2_fid2() {
        try {
            MethodLookupUtils.lookupMethod(Math.class, "max", new Object[]{1, 2});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: max", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod5_fDZX4_fid2() {
        try {
            MethodLookupUtils.lookupMethod(Character.class, "toUpperCase", new Object[]{'a'});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: toUpperCase", e.getMessage());
        }
    }
}