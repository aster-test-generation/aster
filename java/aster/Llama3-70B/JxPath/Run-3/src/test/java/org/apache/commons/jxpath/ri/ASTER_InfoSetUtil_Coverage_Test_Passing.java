/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_InfoSetUtil_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_XaLi0() {
        String str = "10.5";
        double result = InfoSetUtil.doubleValue(str);
        assertEquals(10.5, result, 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_EmptyString_XWiw1() {
        String str = "";
        double result = InfoSetUtil.doubleValue(str);
        assertEquals(0.0, result, 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Object_IKSW6() {
        Object obj = new Object();
        double result = InfoSetUtil.doubleValue(obj);
        assertEquals(Double.NaN, result, 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_String_oWgY0() {
        String str = "10.5";
        Number result = InfoSetUtil.number(str);
        assertEquals(10.5, result.doubleValue(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_Boolean_hLpW9() {
        Boolean bool = true;
        Number result = InfoSetUtil.number(bool);
        assertEquals(1, result.intValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Double_JwQl0() {
        Double value = 1.0;
        assertTrue(InfoSetUtil.booleanValue(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NegativeZero_JBBx1() {
        Double value = -0.0;
        assertFalse(InfoSetUtil.booleanValue(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NaN_ZYjP2() {
        Double value = Double.NaN;
        assertFalse(InfoSetUtil.booleanValue(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_String_fmZv8() {
        String str = "Hello";
        assertTrue(InfoSetUtil.booleanValue(str));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_EmptyString_DUdB9() {
        String str = "";
        assertFalse(InfoSetUtil.booleanValue(str));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Null_eYyF10() {
        Object obj = null;
        assertFalse(InfoSetUtil.booleanValue(obj));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setValue(Object object) {
    }
@Test
public void testStringValue_Object_ReturnsString_PnGc0() {
    Object object = 123;
    String result = InfoSetUtil.stringValue(object);
    assertEquals("123", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStringValue_Object_ReturnsString_GXEP0_1() {
    assertEquals("123", InfoSetUtil.stringValue(123));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStringValue_Object_ReturnsString_GXEP0_2() {
    assertEquals("123.45", InfoSetUtil.stringValue(123.45));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStringValue_Object_ReturnsString_GXEP0_3() {
    assertEquals("true", InfoSetUtil.stringValue(true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStringValue_Object_ReturnsString_GXEP0_4() {
    assertEquals("", InfoSetUtil.stringValue(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStringValue_Object_ReturnsString_GXEP0_5() {
    assertEquals("123", InfoSetUtil.stringValue(Long.valueOf(123)));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStringValue_Object_ReturnsString_GXEP0_6() {
    assertEquals("123.45", InfoSetUtil.stringValue(Double.valueOf(123.45)));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStringValue_Object_ReturnsString_GXEP0_7() {
    assertEquals("false", InfoSetUtil.stringValue(false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumber_Object_bkOY7_gtva0_fid2() {
    Object obj = new Object();
    Number result = InfoSetUtil.number(obj);
    assertEquals(Double.NaN, result.doubleValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumber_Null_QaIx8_WXkd0_fid2() {
    Number result = InfoSetUtil.number(null);
    assertEquals(Double.NaN, result.doubleValue(), 0);
}
}