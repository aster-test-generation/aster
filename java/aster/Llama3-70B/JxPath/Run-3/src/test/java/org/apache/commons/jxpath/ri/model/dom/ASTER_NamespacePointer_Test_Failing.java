/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Failing {
    @Mock
    private NodePointer pointer1;
    @Mock
    private NodePointer pointer2;
    @Mock
    private DOMNodePointer parent;
    private NamespacePointer namespacepointer;
    private String prefix = "testPrefix";
    private NamespacePointer namespacePointer;
    private NamespacePointer otherNamespacePointer;
    private NamespacePointer differentNamespacePointer;
    NodeTest nodeTest;
    NodeTypeTest nodeTypeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, "prefix");
        // given
        when(parent.getNamespaceURI()).thenReturn("namespaceURI");
        // when
        Object result = namespacepointer.getImmediateNode();
        // then
    assertNull(result);
        verify(parent, times(1)).getNamespaceURI();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_fid2() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, "prefix");
        // given
        when(parent.getNamespaceURI()).thenReturn("namespaceURI");
        // when
        Object result = namespacepointer.getImmediateNode();
        // then
        assertEquals("namespaceURI", result);
        verify(parent, times(1)).getNamespaceURI();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_fid2() throws Exception {
        parent = mock(DOMNodePointer.class);
        when(parent.asPath()).thenReturn("parent/path");
        namespacePointer = new NamespacePointer(parent, prefix);
        String result = namespacePointer.asPath();
        assertEquals("parent/path/namespace::myPrefix", result);
    }
}