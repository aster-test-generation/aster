/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Interface_qgRn3() {
        assertEquals(0, ValueUtils.getCollectionHint(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_lQgv2() {
        Object collection = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(collection);
        ArrayList list = new ArrayList();
        list.add("a");
        list.add("b");
        list.add("c");
        assertEquals(list.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyCollection_WDnJ3() {
        Collection collection = new ArrayList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_Fhjp4() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(collection.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingleObject_VtUJ5() {
        Object collection = "a";
        Iterator iterator = ValueUtils.iterate(collection);
        ArrayList list = new ArrayList();
        list.add("a");
        assertEquals(list.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandler_EfCz0() {
        DynamicPropertyHandler handler = ValueUtils.getDynamicPropertyHandler(DynamicPropertyHandler.class);
        assertNotNull(handler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionSameSize_kGww5() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 3);
        assertEquals(array, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_EmptyList_gOyE7() {
        List list = new ArrayList();
        Object result = ValueUtils.remove(list, 0);
        assertEquals(0, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_EmptyCollection_WlEj8() {
        Collection collection = new HashSet();
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(0, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullBean_Hdgk2_EUkW0() {
        NullPointerException exception = null;
        try {
            ValueUtils.remove(null, 0);
        } catch (NullPointerException e) {
            exception = e;
        }
        assertNotNull(exception);
    }

    @Test
    public void testRemove_InvocationTargetException_TzXt2_fqPU0_fid3() {
        Object collection = new Object[1];
        int index = 0;
        try {
            ValueUtils.remove(collection, index);
            assert false;
        } catch (JXPathException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullBean_Hdgk2_EUkW0_fid3() {
        try {
            ValueUtils.remove(null, 0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
}