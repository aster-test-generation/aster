/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Iterator;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.Path;
import org.apache.commons.jxpath.ri.compiler.TreeCompiler;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.NodePointerFactory;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.util.ClassLoaderUtil;
import org.apache.commons.jxpath.util.TypeUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathContextReferenceImpl_Test_Failing {
    @Mock
    private JXPathContext parentContext;
    @Mock
    private Object contextBean;
    @Mock
    private NodePointer contextPointer;
    @Mock
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    @Mock
    private Pointer pointer;
    @Mock
    private EvalContext evalContext;
    @Mock
    private Expression expression;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private Path path;
    @Mock
    private RootContext rootContext;
    @Mock
    private InitialContext initialContext;
    @Mock
    private NodePointer absoluteRootPointer;
    @Mock
    private Iterator iterator;
    private static Vector nodeFactories = new Vector();
    private static NodePointerFactory[] nodeFactoryArray = null;
    NodePointerFactory nodePointerFactory;
    @Mock
    private ClassLoaderUtil classLoaderUtil;
    @Mock
    private Expression expr;
    @Mock
    private NodePointerFactory nodePointerFactory1;
    @Mock
    private NodePointerFactory nodePointerFactory2;
    @Mock
    private NamespaceResolver namespaceResolver;
    @Mock
    private Pointer namespaceContextPointer;
    private JXPathContext jxpathContext;
    @Mock
    private ExceptionHandler exceptionHandler;
    @Mock
    private TypeUtils typeUtils;
    private static Compiler COMPILER = new TreeCompiler();
    @Mock
    private Functions functions;
    @Mock
    private Function function;
    @Mock
    private QName functionName;
    @Mock
    private VariablePointerFactory variablePointerFactory;
    @Mock
    private Locale locale;
    @Mock
    private QName name;
    private Pointer rootPointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremovePath() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean);
        // given
        String xpath = "some/xpath";
        when(jxpathcontextreferenceimpl.getPointer(xpath, expression)).thenReturn(nodePointer);
        // when
        jxpathcontextreferenceimpl.removePath(xpath, expression);
        // then
        verify(nodePointer).remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean);
        String xpath = "some/xpath";
        Object value = "some value";
        when(expr.computeValue(evalContext)).thenReturn(value);
        jxpathcontextreferenceimpl.setValue(xpath, expr, value);
        verify(expr).computeValue(evalContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointerFactories_2() throws Exception {
        nodeFactoryArray = new NodePointerFactory[]{nodePointerFactory1, nodePointerFactory2};
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        NodePointerFactory[] result = jxpathcontextreferenceimpl.getNodePointerFactories();
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointerFactories_3() throws Exception {
        nodeFactoryArray = new NodePointerFactory[]{nodePointerFactory1, nodePointerFactory2};
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        NodePointerFactory[] result = jxpathcontextreferenceimpl.getNodePointerFactories();
        assertSame(nodePointerFactory1, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointerFactories_4() throws Exception {
        nodeFactoryArray = new NodePointerFactory[]{nodePointerFactory1, nodePointerFactory2};
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        NodePointerFactory[] result = jxpathcontextreferenceimpl.getNodePointerFactories();
        assertSame(nodePointerFactory2, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompiler_2() throws Exception {
        parentContext = mock(JXPathContext.class);
        contextBean = new Object();
        contextPointer = mock(NodePointer.class);
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        Compiler compiler = jxpathcontextreferenceimpl.getCompiler();
        assertEquals(COMPILER, compiler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFunction() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(jxpathContext, new Object());
        when(jxpathContext.getFunctions()).thenReturn(functions);
        when(functionName.getPrefix()).thenReturn("prefix");
        when(functionName.getName()).thenReturn("name");
        when(functions.getFunction("prefix", "name", new Object[]{})).thenReturn(function);
        Function result = jxpathcontextreferenceimpl.getFunction(functionName, new Object[]{});
        assertEquals(function, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePathAndSetValue_Iyql0() throws Exception {
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        JXPathContextReferenceImpl jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        jxpathcontextreferenceimpl.namespaceResolver = namespaceResolver;
        String xpath = "some/xpath";
        Object value = new Object();
        Pointer result = jxpathcontextreferenceimpl.createPathAndSetValue(xpath, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_x_qYrE0() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        String xpath = "some/xpath";
        NamespaceResolver namespaceResolver = jxpathcontextreferenceimpl.getNamespaceResolver();
        when(namespaceResolver.getPrefix("some")).thenReturn("somePrefix");
        when(jxpathcontextreferenceimpl.getValue(xpath)).thenReturn("expected value");
        Object result = jxpathcontextreferenceimpl.getValue(xpath);
        assertEquals("expected value", result);
        verify(namespaceResolver).getPrefix("some");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_hBZf0_qmAf0_fid2() {
        JXPathContextReferenceImpl jXPathContextReferenceImpl = new JXPathContextReferenceImpl(null, new Object());
        Pointer pointer = jXPathContextReferenceImpl.createPathAndSetValue("//test", new Object());
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddNodePointerFactory_uwYN0_2_fid2() throws Exception {
        JXPathContextReferenceImpl jxpathcontextreferenceimpl;
        NodePointerFactory nodePointerFactory;
        JXPathContext context = mock(JXPathContext.class);
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(context, null);
        nodePointerFactory = mock(NodePointerFactory.class);
        jxpathcontextreferenceimpl.addNodePointerFactory(nodePointerFactory);
        assertTrue(nodeFactories.contains(nodePointerFactory));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddNodePointerFactory_uwYN0_3() throws Exception {
        JXPathContextReferenceImpl jxpathcontextreferenceimpl;
        NodePointerFactory nodePointerFactory;
        JXPathContext context = mock(JXPathContext.class);
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(context, null);
        nodePointerFactory = mock(NodePointerFactory.class);
        jxpathcontextreferenceimpl.addNodePointerFactory(nodePointerFactory);
        assertNull(nodeFactoryArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddNodePointerFactory_HXhu0_ddza0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        context.getNamespaceResolver();
        assertSame(namespaceResolver, context.getNamespaceResolver());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_nullParameters_lYfY3_WtgW0() {
        JXPathContextReferenceImpl ctx = new JXPathContextReferenceImpl(new JXPathContextReferenceImpl(new JXPathContextReferenceImpl(null, null), null, null), null, null);
        QName functionName = new QName("prefix", "localName");
        try {
            ctx.getFunction(functionName, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertNotNull(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointerFactories() throws Exception {
        nodeFactoryArray = new NodePointerFactory[]{nodePointerFactory1, nodePointerFactory2};
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        NodePointerFactory[] result = jxpathcontextreferenceimpl.getNodePointerFactories();
        assertNotNull(result);
        assertEquals(2, result.length);
        assertSame(nodePointerFactory1, result[0]);
        assertSame(nodePointerFactory2, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompiler() throws Exception {
        parentContext = mock(JXPathContext.class);
        contextBean = new Object();
        contextPointer = mock(NodePointer.class);
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        Compiler compiler = jxpathcontextreferenceimpl.getCompiler();
        assertNotNull(compiler);
        assertEquals(COMPILER, compiler);
    }
}