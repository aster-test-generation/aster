/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNameTest_bVkH0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qname = new QName("namespace", "localPart");
        NodeNameTest nodeNameTest = (NodeNameTest) treeCompiler.nodeNameTest(qname);
        assertNotNull(nodeNameTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_LBVV0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.nodeTypeTest(1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_IJtj0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
        assertTrue(result instanceof VariableReference);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_oFBB0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] steps = new Object[]{};
        Object result = treeCompiler.locationPath(true, steps);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_IJtj0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_IJtj0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object result = treeCompiler.variableReference(qName);
        assertTrue(result instanceof VariableReference);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqual_NameAttributeTest_GFjv0_cgNw0() {
        TreeCompiler compiler = new TreeCompiler();
        Object name = new QName("name");
        Object[] args = new Object[0];
        Object result = compiler.function(name, args);
        assertTrue(result instanceof ExtensionFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_jqRx0_EEeb0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.function(new QName("name"), new Object[0]);
        assertTrue(result instanceof ExtensionFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThan_qgJI0_jJuk0_fid2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Expression left = new VariableReference(new QName("left"));
        Expression right = new VariableReference(new QName("right"));
        Object result = treeCompiler.function(new QName("gt"), new Object[]{left, right});
        assertFalse(result instanceof CoreOperationGreaterThan);
    }
}