/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.xml.DocumentContainer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointer_Test_Failing {
    @Mock
    private NodePointer pointer1;
    @Mock
    private NodePointer pointer2;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private DocumentContainer container;
    private ContainerPointer containerpointer;
    private ContainerPointer otherContainerPointer;
    @Mock
    private NodeTest nodeTest;
    private ContainerPointer containerPointer;
    @Mock
    private Object immediateNode;
    @Mock
    private QName name;
    @Mock
    private Object baseValue;
    @Mock
    private ValueUtils valueUtils;
    private DocumentContainer documentContainer;
    private Locale locale;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodePointer namespacePointerResult;
    @Mock
    private NodeTest test;
    private DOMNodePointer domNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateValuePointer() throws Exception {
        when(parent.getName()).thenReturn(name);
        containerPointer = new ContainerPointer(parent, container);
        // Given
        when(containerPointer.getImmediateNode()).thenReturn(immediateNode);
        // When
        NodePointer result = containerPointer.getImmediateValuePointer();
        // Then
        verify(containerPointer).getImmediateNode();
        verify(parent).getName();
        assertEquals(NodePointer.newChildNodePointer(containerPointer, name, immediateNode), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerpointer = new ContainerPointer(parent, container);
        QName expectedName = new QName("test");
        when(parent.getName()).thenReturn(expectedName);
        QName actualName = containerpointer.getName();
        assertNull(expectedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerpointer = new ContainerPointer(parent, container);
        // when getBaseValue returns null
        when(containerpointer.getBaseValue()).thenReturn(null);
        // when getBaseValue returns a non-null value
        when(containerpointer.getBaseValue()).thenReturn(baseValue);
        when(ValueUtils.getLength(baseValue)).thenReturn(5);
        assertEquals(1, containerpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerpointer = new ContainerPointer(parent, container);
        // when getBaseValue returns null
        when(containerpointer.getBaseValue()).thenReturn(null);
        // when getBaseValue returns a non-null value
        when(containerpointer.getBaseValue()).thenReturn(baseValue);
        when(ValueUtils.getLength(baseValue)).thenReturn(5);
        assertEquals(5, containerpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerpointer = new ContainerPointer(parent, container);
        // given
        when(parent.getValuePointer()).thenReturn(mock(VariablePointer.class));
        when(parent.getValuePointer().namespaceIterator()).thenReturn(nodeIterator);
        // when
        NodeIterator result = containerpointer.namespaceIterator();
        // then
    assertNull(nodeIterator);
        verify(parent).getValuePointer();
        verify(parent.getValuePointer()).namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_gwxM0_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        baseValue = mock(Object.class);
        containerPointer = new ContainerPointer(parent, container);
        when(parent.getBaseValue()).thenReturn(baseValue);
        when(containerPointer.getLength()).thenReturn(10);
        when(valueUtils.getValue(baseValue, 5)).thenReturn("mockedValue");
        when(valueUtils.getValue(baseValue)).thenReturn("wholeCollectionValue");
        Object result = containerPointer.getImmediateNode();
        containerPointer.setIndex(-1);
        result = containerPointer.getImmediateNode();
        assertEquals("wholeCollectionValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerpointer = new ContainerPointer(parent, container);
        when(parent.getValuePointer()).thenReturn(parent);
        when(parent.attributeIterator(name)).thenReturn(nodeIterator);
        NodeIterator result = containerpointer.attributeIterator(name);
        assertEquals(nodeIterator, result);
        verify(parent).getValuePointer();
        verify(parent).attributeIterator(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_fid1() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerpointer = new ContainerPointer(parent, container);
        QName expectedName = new QName("test");
        when(parent.getName()).thenReturn(expectedName);
        QName actualName = containerpointer.getName();
        assertEquals(expectedName, actualName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerpointer = new ContainerPointer(parent, container);
        // when getBaseValue returns null
        when(containerpointer.getBaseValue()).thenReturn(null);
        assertEquals(1, containerpointer.getLength());
        // when getBaseValue returns a non-null value
        when(containerpointer.getBaseValue()).thenReturn(baseValue);
        when(ValueUtils.getLength(baseValue)).thenReturn(5);
        assertEquals(5, containerpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_fid1() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerpointer = new ContainerPointer(parent, container);
        // given
        when(parent.getValuePointer()).thenReturn(mock(VariablePointer.class));
        when(parent.getValuePointer().namespaceIterator()).thenReturn(nodeIterator);
        // when
        NodeIterator result = containerpointer.namespaceIterator();
        // then
        assertEquals(nodeIterator, result);
        verify(parent).getValuePointer();
        verify(parent.getValuePointer()).namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_gwxM0_1_fid3() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerPointer = new ContainerPointer(parent, container);
        when(containerPointer.getBaseValue()).thenReturn(baseValue);
        when(containerPointer.getLength()).thenReturn(10);
        when(valueUtils.getValue(baseValue, 5)).thenReturn("mockedValue");
        when(valueUtils.getValue(baseValue)).thenReturn("wholeCollectionValue");
        Object result = containerPointer.getImmediateNode();
        containerPointer.setIndex(-1);
        result = containerPointer.getImmediateNode();
        assertEquals("mockedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_gwxM0_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        container = mock(DocumentContainer.class);
        containerPointer = new ContainerPointer(parent, container);
        when(containerPointer.getBaseValue()).thenReturn(baseValue);
        when(containerPointer.getLength()).thenReturn(10);
        when(valueUtils.getValue(baseValue, 5)).thenReturn("mockedValue");
        when(valueUtils.getValue(baseValue)).thenReturn("wholeCollectionValue");
        Object result = containerPointer.getImmediateNode();
        containerPointer.setIndex(-1);
        result = containerPointer.getImmediateNode();
        assertEquals("wholeCollectionValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_NullValue_xVsf0_KxQs0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("qualifiedName");
        VariablePointer parent = new VariablePointer(variables, name);
        org.w3c.dom.Node node = null;
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        try {
            java.net.URL url = new java.net.URL("http://example.com");
            DocumentContainer container = new DocumentContainer(url);
            ContainerPointer containerPointer = new ContainerPointer(domNodePointer, container);
            NodeIterator iterator = containerPointer.namespaceIterator();
            assertNotNull(iterator);
        } catch (java.net.MalformedURLException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_hupu0_2_fid3() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        ContainerPointer containerPointer;
        DocumentContainer container = mock(DocumentContainer.class);
        DOMNodePointer valuePointer = mock(DOMNodePointer.class);
        when(parent.getValuePointer()).thenReturn(valuePointer);
        containerPointer = new ContainerPointer(parent, container);
        when(valuePointer.namespaceIterator()).thenReturn(mock(NodeIterator.class));
        when(containerPointer.getValuePointer()).thenReturn(valuePointer);
        when(valuePointer.isLeaf()).thenReturn(true);
        when(valuePointer.isLeaf()).thenReturn(false);
        assertFalse(containerPointer.isLeaf());
    }
}