/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointerFactory_Test_Passing {
    DynaBeanPointerFactory dynabeanpointerfactory;
    NodePointer parent;
    QName name;
    DynaBean bean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer() throws Exception {
        dynabeanpointerfactory = new DynaBeanPointerFactory();
        parent = Mockito.mock(NodePointer.class);
        name = new QName("prefix", "localName");
        bean = Mockito.mock(DynaBean.class);
        NodePointer result = dynabeanpointerfactory.createNodePointer(parent, name, bean);
        assertNotNull(result);
        assertTrue(result instanceof DynaBeanPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_notDynaBean() throws Exception {
        dynabeanpointerfactory = new DynaBeanPointerFactory();
        parent = Mockito.mock(NodePointer.class);
        name = new QName("prefix", "localName");
        bean = Mockito.mock(DynaBean.class);
        Object notDynaBean = new Object();
        NodePointer result = dynabeanpointerfactory.createNodePointer(parent, name, notDynaBean);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_nVyw0() {
        DynaBeanPointerFactory dynaBeanPointerFactory = new DynaBeanPointerFactory();
        int result = dynaBeanPointerFactory.getOrder();
        assertEquals(DynaBeanPointerFactory.DYNA_BEAN_POINTER_FACTORY_ORDER, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_NotDynaBean_NpmI1() {
        DynaBeanPointerFactory factory = new DynaBeanPointerFactory();
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        Locale locale = Locale.US;
        NodePointer pointer = factory.createNodePointer(name, bean, locale);
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_1() throws Exception {
        dynabeanpointerfactory = new DynaBeanPointerFactory();
        parent = Mockito.mock(NodePointer.class);
        name = new QName("prefix", "localName");
        bean = Mockito.mock(DynaBean.class);
        NodePointer result = dynabeanpointerfactory.createNodePointer(parent, name, bean);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_2() throws Exception {
        dynabeanpointerfactory = new DynaBeanPointerFactory();
        parent = Mockito.mock(NodePointer.class);
        name = new QName("prefix", "localName");
        bean = Mockito.mock(DynaBean.class);
        NodePointer result = dynabeanpointerfactory.createNodePointer(parent, name, bean);
        assertTrue(result instanceof DynaBeanPointer);
    }
}