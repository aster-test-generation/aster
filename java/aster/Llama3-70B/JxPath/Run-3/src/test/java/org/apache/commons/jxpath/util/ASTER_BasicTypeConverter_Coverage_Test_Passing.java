/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.lang.reflect.Array;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicTypeConverter_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollection_Set_Adcv0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("Element1");
        set.add("Element2");
        Collection<String> unmodifiableSet = converter.unmodifiableCollection(set);
        assertTrue(unmodifiableSet instanceof Set);
        assertEquals(set, unmodifiableSet);
        try {
            unmodifiableSet.add("Element3");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollection_GenericCollection_AuyK1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("Element1");
        collection.add("Element2");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertTrue(unmodifiableCollection instanceof Collection);
        assertEquals(collection, unmodifiableCollection);
        try {
            unmodifiableCollection.add("Element3");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicInteger_rxXi0_1() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicInteger.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicInteger_rxXi0_2() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicInteger.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertEquals(java.util.concurrent.atomic.AtomicInteger.class, result.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLong_cwtH1_1() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicLong.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLong_cwtH1_2() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicLong.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertEquals(java.util.concurrent.atomic.AtomicLong.class, result.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicIntegerWithValue_PNrY2_2() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicInteger.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertEquals(10, ((java.util.concurrent.atomic.AtomicInteger) result).get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLongWithValue_fVEd3_2() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicLong.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertEquals(10, ((java.util.concurrent.atomic.AtomicLong) result).get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicIntegerWithInvalidType_CxTf8() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = String.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_array_rUov4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[] { "1", "2" };
        Object result = converter.convert(array, String[].class);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_array_getComponentType_yHxe5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[] { "1", "2" };
        Class<?> cType = String.class;
        Object result = converter.convert(array, cType);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_array_newInstance_BWsF6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[] { "1", "2" };
        Class<?> cType = String.class;
        Object arrayInstance = Array.newInstance(cType, 2);
        Object result = converter.convert(array, cType);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_array_set_ODRG7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[] { "1", "2" };
        Class<?> cType = String.class;
        Object arrayInstance = Array.newInstance(cType, 2);
        Array.set(arrayInstance, 0, "1");
        Object result = converter.convert(array, cType);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_Collection_DOdX8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("1");
        collection.add("2");
        Object result = converter.convert(collection, String[].class);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_length_greater_than_zero_IeXG12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[] { "1", "2" };
        Object result = converter.convert(array, String.class);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_length_zero_PcTK13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[] {};
        Object result = converter.convert(array, String.class);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNull_LyMv0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertAssignable_szIZ1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("hello", String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertString_ERSe2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("hello", Boolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertBooleanToNumber_hBOE3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(true, Number.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNumberToBoolean_mulH4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(1, Boolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToBoolean_udvG5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("true", Boolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToCharacter_CFAO6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("a", Character.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToByte_lXmt7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1", Byte.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToShort_PQXi8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1", Short.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToInteger_DZjj9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1", Integer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToLong_KauJ10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1", Long.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToFloat_LYIc11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1.0", Float.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToDouble_OhMn12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1.0", Double.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArray_PpBD13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new String[] {"hello"}, String[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertCollection_xPjn14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Arrays.asList("hello"), Collection.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArrayToArray_WPYZ15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new String[] {"hello"}, Object[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArrayToCollection_Yyhf16() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new String[] {"hello"}, Collection.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertCollectionToArray_ZglK17() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Arrays.asList("hello"), String[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArrayWithLength_jlXH23() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new String[] {"hello", "world"}, String[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert_Collection_addAll_thnL10_QmpY0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<String> collection = new ArrayList<>();
    collection.add("1");
    collection.add("2");
    Collection<String> allocatedCollection = new ArrayList<String>();
    allocatedCollection.addAll(collection);
    Object result = converter.convertStringToPrimitive(collection.iterator().next(), String.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert_NodeSet_TXzf0_vORB0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object nodeSet = "true";
    Object result = converter.convertStringToPrimitive(nodeSet, Boolean.class);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert_NodeSet_TXzf0_vORB0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object nodeSet = "true";
    Object result = converter.convertStringToPrimitive(nodeSet, Boolean.class);
    assertEquals(true, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert_NodeSet_TXzf0_jphx1_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object nodeSet = "true";
    Object result = converter.convertStringToPrimitive(nodeSet, Boolean.class);
    assertEquals(Boolean.TRUE, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert_Pointer_ZJCL2_EbUz0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object pointer = "true";
    Object result = converter.convertStringToPrimitive(pointer, Boolean.class);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert_Pointer_ZJCL2_APzD1_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object pointer = "true";
    Object result = converter.convertStringToPrimitive(pointer, Boolean.class);
    assertTrue((Boolean) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert_Pointer_getValue_ZcCo3_LMLL1_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object pointer = "true"; 
    Object result = converter.convertStringToPrimitive(pointer, Boolean.class);
    assertEquals(Boolean.TRUE, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertPointer_wOiD20_AiYK0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object pointer = "hello";
    assertFalse(converter.convertStringToPrimitive(pointer, String.class) != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive_yRwB0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Boolean.TRUE, converter.convertStringToPrimitive("true", Boolean.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive_yRwB0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Character.valueOf('a'), converter.convertStringToPrimitive("a", Character.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive_yRwB0_3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Byte.valueOf((byte) 1), converter.convertStringToPrimitive("1", Byte.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive_yRwB0_4() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Short.valueOf((short) 1), converter.convertStringToPrimitive("1", Short.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive_yRwB0_5() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Integer.valueOf(1), converter.convertStringToPrimitive("1", Integer.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive_yRwB0_6() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Long.valueOf(1), converter.convertStringToPrimitive("1", Long.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive_yRwB0_7() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Float.valueOf(1.0f), converter.convertStringToPrimitive("1.0", Float.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive_yRwB0_8() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Double.valueOf(1.0), converter.convertStringToPrimitive("1.0", Double.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicInteger_rxXi0() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicInteger.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertEquals(java.util.concurrent.atomic.AtomicInteger.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLong_cwtH1() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicLong.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertEquals(java.util.concurrent.atomic.AtomicLong.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicIntegerWithValue_PNrY2() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicInteger.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertEquals(10, ((java.util.concurrent.atomic.AtomicInteger) result).get());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLongWithValue_fVEd3() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicLong.class;
        double value = 10;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertEquals(10, ((java.util.concurrent.atomic.AtomicLong) result).get());
    }
}