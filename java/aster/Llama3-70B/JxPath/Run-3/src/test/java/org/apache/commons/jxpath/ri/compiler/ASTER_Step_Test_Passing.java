/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_shWX0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        Expression[] predicates = new Expression[0];
        Step step = new Step(2, nodeTypeTest, predicates);
        assertEquals(2, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_jbjD0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        Expression[] predicates = new Expression[1];
        Step step = new Step(1, nodeTypeTest, predicates);
        assertArrayEquals(predicates, step.getPredicates());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeTest_UUmk0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        Expression[] predicates = new Expression[0];
        Step step = new Step(1, nodeTypeTest, predicates);
        NodeTest nodeTest = step.getNodeTest();
        assertEquals(nodeTypeTest, nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_AXIS_SELF_ZYXW0() {
        assertEquals("self", Step.axisToString(Compiler.AXIS_SELF));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentNullPredicates_jrnH0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        Step step = new Step(1, nodeTypeTest, null);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ChildAxis_tNrl0() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_CHILD, nodeTest, new Expression[0]);
        assertEquals(nodeTest.toString(), step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AttributeAxis_dLCt1() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_ATTRIBUTE, nodeTest, new Expression[0]);
        assertEquals("@" + nodeTest.toString(), step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SelfAxis_NodeTypeNode_WkPw2() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_SELF, nodeTest, new Expression[0]);
        assertEquals(".", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ParentAxis_NodeTypeNode_egVK4() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_PARENT, nodeTest, new Expression[0]);
        assertEquals("..", step.toString());
    }
}