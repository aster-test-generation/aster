/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_bufposEqualsBufsize_VHgn0_1() throws java.io.IOException {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("abc"), 1, 1, 3);
        simpleCharStream.inBuf = 2;
        simpleCharStream.bufpos = 2;
        assertEquals('a', simpleCharStream.readChar());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_bufposEqualsBufsize_VHgn0_2_0() throws java.io.IOException {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("abc"), 1, 1, 3);
        simpleCharStream.inBuf = 2;
        simpleCharStream.bufpos = 2;
        assertEquals(1, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_bufposResetToZero_afSi1_2_0() throws java.io.IOException {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("abc"), 1, 1, 3);
        simpleCharStream.inBuf = 2;
        simpleCharStream.bufpos = 2;
        assertEquals(0, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsLF_zvlr0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.prevCharIsLF = true;
        stream.UpdateLineColumn('a');
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsCR_iJAN3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.prevCharIsCR = true;
        stream.UpdateLineColumn('a');
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_CRfollowedByLF_hEWf5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.prevCharIsCR = true;
        stream.UpdateLineColumn('\n');
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLine_eXqc0_EKSk0() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("Test"));
    simpleCharStream.UpdateLineColumn('T');
    int line = simpleCharStream.bufline[0];
    assert line == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_bufposEqualsBufsize_VHgn0() throws java.io.IOException {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("abc"), 1, 1, 3);
        simpleCharStream.inBuf = 2;
        simpleCharStream.bufpos = 2;
        assertEquals('a', simpleCharStream.readChar());
        assertEquals(1, simpleCharStream.bufpos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_bufposResetToZero_afSi1() throws java.io.IOException {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("abc"), 1, 1, 3);
        simpleCharStream.inBuf = 2;
        simpleCharStream.bufpos = 2;
        assertEquals('a', simpleCharStream.readChar());
        assertEquals(0, simpleCharStream.bufpos);
    }
}