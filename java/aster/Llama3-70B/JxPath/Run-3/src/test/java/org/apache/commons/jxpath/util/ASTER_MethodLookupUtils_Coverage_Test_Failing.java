/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MethodLookupUtils_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ParameterIncrement_qjbL1() throws Exception {
        Class<?> targetClass = Class.forName("com.example.TestClass2");
        Object[] parameters = new Object[]{"param1", "param2"};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_Tqjb2() throws Exception {
        Class<?> targetClass = Class.forName("com.example.TestClass3");
        Object[] parameters = new Object[]{null, "param2"};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_MethodFound_GuJg4() {
        Class targetClass = MethodLookupUtils.class;
        String name = "someStaticMethod";
        Object[] parameters = new Object[] { new Object() };
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertNotNull(method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupMethod_AmbiguousMatch_TmUv3_wwYF0() {
    try {
        MethodLookupUtils.lookupMethod(this.getClass(), "ambiguousMethod", new Object[]{1, 2});
        assert false;
    } catch (JXPathException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupMethod_AmbiguousMatch_TmUv3_wwYF0_fid3() {
    try {
        MethodLookupUtils.lookupMethod(this.getClass(), "ambiguousMethod", new Object[]{1, 2});
        fail("Expected JXPathException");
    } catch (JXPathException e) {
    }
}
}