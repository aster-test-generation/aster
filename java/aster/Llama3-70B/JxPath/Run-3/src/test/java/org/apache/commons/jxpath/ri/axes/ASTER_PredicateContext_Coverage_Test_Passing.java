/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.Constant;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PredicateContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_setupDynamicPropertyPointerFalse_IFyB5() {
        PredicateContext predicateContext = new PredicateContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new Constant("string"));
        assertFalse(predicateContext.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_setPosition_hyvM1_ZnOP0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    when(namespaceContext.nextSet()).thenReturn(true);
    PredicateContext predicateContext = new PredicateContext(namespaceContext, new Constant("string"));
    assertTrue(predicateContext.nextSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_DynamicPropertyPointerNull_jARu2_mwxh0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    SelfContext selfContext = new SelfContext(namespaceContext, new NodeTypeTest(1));
    NamespaceContext parentContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
    PredicateContext predicateContext = new PredicateContext(parentContext, new Constant("string"));
    NodePointer nodePointer = predicateContext.getCurrentNodePointer();
    NodePointer parentNodePointer = parentContext.getCurrentNodePointer();
    assert nodePointer == parentNodePointer;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_computeValueIterator_rLzQ6_xlZN1() {
    PredicateContext predicateContext = new PredicateContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new Constant(1));
    assertFalse(predicateContext.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_PositionNotZero_zwEQ3_lpwD0() {
    NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
    PredicateContext predicateContext = new PredicateContext(namespaceContext, new Constant("string"));
    ((EvalContext) predicateContext).setPosition(1);
    NodePointer nodePointer = predicateContext.getCurrentNodePointer();
    NodePointer parentNodePointer = namespaceContext.getCurrentNodePointer();
    assert nodePointer == parentNodePointer;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPosition_NameTestExpressionNull_ungR1_YzBL0_fid2() throws Exception {
    PredicateContext predicateContext = new PredicateContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new Constant("string"));
    assertNotNull(predicateContext);
}
}