/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrecedingOrFollowingContext_Test_Failing {
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private PrecedingOrFollowingContext precedingorfollowingcontext;
    private boolean reverse;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodePointer currentRootLocation;
    @Mock
    private NodePointer parent;
    @Mock
    private NodeIterator iterator;
    private Stack stack = null;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        namespaceContext = new NamespaceContext(new SelfContext(namespaceContext, nodeTypeTest), nodeTypeTest);
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        when(precedingorfollowingcontext.nextNode()).thenReturn(true);
        boolean result = precedingorfollowingcontext.setPosition(5);
        verify(precedingorfollowingcontext, times(5)).nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_Reset() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        namespaceContext = new NamespaceContext(new SelfContext(namespaceContext, nodeTypeTest), nodeTypeTest);
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        when(precedingorfollowingcontext.nextNode()).thenReturn(false);
        boolean result = precedingorfollowingcontext.setPosition(5);
        verify(precedingorfollowingcontext).reset();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset() throws Exception {
        namespaceContext = Mockito.mock(NamespaceContext.class);
        nodeTypeTest = Mockito.mock(NodeTypeTest.class);
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        setStarted = true;
        precedingorfollowingcontext.reset();
        assertFalse(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(parentContext, nodeTest, true);
        // given
        when(parentContext.getCurrentNodePointer()).thenReturn(currentRootLocation);
        when(currentRootLocation.getParent()).thenReturn(parent);
        when(parent.childIterator(null, true, currentRootLocation)).thenReturn(iterator);
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.isLeaf()).thenReturn(false);
        when(currentNodePointer.childIterator(null, true, null)).thenReturn(iterator);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        // when
        boolean result = precedingorfollowingcontext.nextNode();
        // then
        assertTrue(result);
        verify(currentNodePointer).testNode(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_EHRL0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        NodePointer nodePointer = precedingOrFollowingContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test1_IlGL0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        assertTrue(precedingOrFollowingContext.setPosition(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test2_MTuX1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
        assertFalse(precedingOrFollowingContext.setPosition(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test3_KXqU2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(3);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        assertTrue(precedingOrFollowingContext.setPosition(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test4_pvIq3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(4);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
        assertTrue(precedingOrFollowingContext.setPosition(7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode1_ugbo0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, false);
        assertTrue(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode2_iKSd1() {
        NodeTypeTest nodeTest = new NodeTypeTest(2);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, true);
        assertFalse(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode3_RsoE2() {
        NodeTypeTest nodeTest = new NodeTypeTest(3);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, false);
        assertTrue(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode4_IsRJ3() {
        NodeTypeTest nodeTest = new NodeTypeTest(4);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, true);
        assertFalse(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode5_oSjd4() {
        NodeTypeTest nodeTest = new NodeTypeTest(5);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, false);
        assertTrue(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode6_OEzs5() {
        NodeTypeTest nodeTest = new NodeTypeTest(6);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, true);
        assertFalse(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode7_DZup6() {
        NodeTypeTest nodeTest = new NodeTypeTest(7);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, false);
        assertTrue(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode8_lPbn7() {
        NodeTypeTest nodeTest = new NodeTypeTest(8);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, true);
        assertFalse(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode9_fLkW8() {
        NodeTypeTest nodeTest = new NodeTypeTest(9);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, false);
        assertTrue(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode10_TUJz9() {
        NodeTypeTest nodeTest = new NodeTypeTest(10);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, true);
        assertFalse(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode11_cIrY10() {
        NodeTypeTest nodeTest = new NodeTypeTest(11);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, false);
        assertTrue(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode12_vduH11() {
        NodeTypeTest nodeTest = new NodeTypeTest(12);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, true);
        assertFalse(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_OnEE0_1() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        NodePointer currentNodePointer = Mockito.mock(NodePointer.class);
        PrecedingOrFollowingContext precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        Mockito.when(precedingorfollowingcontext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer result = precedingorfollowingcontext.getCurrentNodePointer();
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_OnEE0_2() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        NodePointer currentNodePointer = Mockito.mock(NodePointer.class);
        PrecedingOrFollowingContext precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        Mockito.when(precedingorfollowingcontext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer result = precedingorfollowingcontext.getCurrentNodePointer();
        Assertions.assertEquals(currentNodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_EHRL0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        precedingOrFollowingContext.nextNode(); // Call nextNode to set currentRootLocation
        NodePointer nodePointer = precedingOrFollowingContext.getCurrentNodePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test1_IlGL0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, nodeTypeTest), nodeTypeTest);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        precedingOrFollowingContext.nextNode(); // Initialize currentRootLocation
        assertFalse(precedingOrFollowingContext.setPosition(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test3_KXqU2_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(3);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, nodeTypeTest), nodeTypeTest);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        precedingOrFollowingContext.nextNode();
        assertFalse(precedingOrFollowingContext.setPosition(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test4_pvIq3_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(4);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
        precedingOrFollowingContext.nextNode(); // Initialize currentRootLocation
        assertTrue(precedingOrFollowingContext.nextNode());
    }
}