/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PredicateContext_Test_Failing {
    @Mock
    private Expression expression;
    private boolean done = false;
    private NamespaceContext namespaceContext;
    @Mock
    private InfoSetUtil infoSetUtil;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodePointer nodePointer;
    private SelfContext selfContext;
    @Mock
    private Constant expressionConstant;
    @Mock
    private Iterator iterator;
    @Mock
    private Expression nameTestExpression;
    @Mock
    private PropertyPointer dynamicPropertyPointer;
    private PredicateContext predicateContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_OnHN0() {
        Constant constant = new Constant("string");
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        assertTrue(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_Position1_SetPositionTrue_aXHw1() {
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        PredicateContext predicateContext = new PredicateContext(parentContext, new Constant("string"));
        predicateContext.setPosition(1);
        NodePointer nodePointer = predicateContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode1_ohhW0() {
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        Constant expression = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(parentContext, expression);
        assertTrue(predicateContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode2_SvKX1() {
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        Constant expression = new Constant(1);
        PredicateContext predicateContext = new PredicateContext(parentContext, expression);
        assertTrue(predicateContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode7_irrb6() {
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        Constant expression = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(parentContext, expression);
        parentContext.setPosition(1);
        assertTrue(predicateContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode8_iiqL7() {
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        Constant expression = new Constant(1);
        PredicateContext predicateContext = new PredicateContext(parentContext, expression);
        parentContext.setPosition(1);
        assertTrue(predicateContext.nextNode());
    }

    @Test
    public void testNextNode_JJhQ1() {
        boolean result = predicateContext.nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_position0_vgBU0_fid3() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        PredicateContext predicateContext = new PredicateContext(namespaceContext, new Constant("expression"));
        when(predicateContext.setPosition(1)).thenReturn(false);
        NodePointer result = predicateContext.getCurrentNodePointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_lBFi0_ZLqD0_fid3() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        PredicateContext predicateContext = new PredicateContext(namespaceContext, new Constant("string"));
        predicateContext.nextNode(); // Call nextNode to set the done flag
        assertFalse(!predicateContext.nextNode()); // Access the done flag indirectly
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_OqYJ0_caVj0_fid3() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        PredicateContext predicateContext = new PredicateContext(namespaceContext, new Constant("string"));
        assertTrue(predicateContext.nextNode());
    }

    @Test
    public void testNextNode_YrIx0_fid3() {
        predicateContext = new PredicateContext(parentContext, expression);
        assertTrue(predicateContext.nextNode());
    }
}