/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verifyNoInteractions;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ChildContext_Test_Passing {
    @Mock
    private NodeIterator iterator;
    private ChildContext childContext;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private NodePointer nodePointer;
    @Mock
    private NodePointer pointer;
    @Mock
    private NamespaceContext namespaceContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer2_zFcf1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(parentContext, nodeTypeTest, true, true);
        Assertions.assertNull(childContext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer3_biAZ2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(parentContext, nodeTypeTest, true, true);
        childContext.setPosition(0);
        Assertions.assertNull(childContext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_egHp0_ZsgV0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        childContext.setPosition(1);
        childContext.getSingleNodePointer(); // Call the method under test
        assertTrue(childContext.getPosition() == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_PositionNot0_ReturnGetCurrentNodePointer_FJKd2_qCSq0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        childContext.setPosition(1);
        Pointer pointer = childContext.getSingleNodePointer();
        assertEquals(childContext.getCurrentNodePointer(), pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_LmXY0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        assertFalse(childContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_DGcL0_fid1() throws Exception {
        parentContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        childContext = new ChildContext(parentContext, nodeTypeTest, true, true);
        iterator = null; // Initialize iterator to null
        childContext.reset();
        assertNull(iterator);
        verifyNoInteractions(parentContext, nodeTypeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_iDEq1_anTc0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
        childContext.setPosition(1);
        Pointer pointer = childContext.getSingleNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_briZ2_VGVx0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, true);
        childContext.setPosition(1);
        Pointer pointer = childContext.getSingleNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_zLTx3_KRLL0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, true);
        childContext.setPosition(1);
        Pointer pointer = childContext.getSingleNodePointer();
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_Position0_NextSetTrue_IteratorNull_ReturnNull_GZAr1_qPuC0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        childContext.setPosition(0);
        try {
            childContext.getSingleNodePointer();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException e) {
            // pass
        }
    }
}