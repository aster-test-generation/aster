/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Failing {
    private int[] jj_la1 = new int[39];
    private Compiler compiler;
    private int jj_gen;
    @Mock
    private Compiler compilerMock;
    @Mock
    private XPathParserTokenManager tokenManagerMock;
    @Mock
    private SimpleCharStream streamMock;
    XPathParser xpathparser;
    @Mock
    private Object ex;
    @Mock
    private Object p;
    @Mock
    private ArrayList ps;
    @Mock
    private ArrayList steps;
    XPathParserTokenManager tokenManager;
    SimpleCharStream stream;
    private int jj_endpos;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    private int jj_kind = -1;
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    static private int[] jj_la1_0;
    @Mock
    private Token token;
    SimpleCharStream simpleCharStream;
    @Mock
    private Token tokenMock;
    @Mock
    private Token jj_nt;
    private Token jj_scanpos, jj_lastpos;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionName() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        // given
        Object expectedQName = "mockedQName";
        when(xpathparser.QName_Without_CoreFunctions()).thenReturn(expectedQName);
        // when
        Object actualQName = xpathparser.FunctionName();
        // then
        assertEquals(expectedQName, actualQName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        ParseException parseException = xpathparser.generateParseException();
        assertNotNull(parseException);
        String message = parseException.getMessage();
        assertNotNull(message);
        assertTrue(message.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testenable_tracing() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(tokenManager);
        xpathparser.enable_tracing();
        // Since enable_tracing is empty, we can't assert anything specific
        // But we can assert that it doesn't throw any exception
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPathExpr() throws Exception {
        stream = Mockito.mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        // Mock FilterExpr() to return a dummy object
        Object filterExprResult = new Object();
        Mockito.when(xpathparser.FilterExpr()).thenReturn(filterExprResult);
        // Call PathExpr() and assert the result
        Object result = xpathparser.PathExpr();
        Assertions.assertEquals(filterExprResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAndExpr() throws Exception {
        stream = Mockito.mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        compiler = Mockito.mock(Compiler.class);
        xpathparser = new XPathParser(tokenManager);
        // given
        Object ex = Mockito.mock(Object.class);
        Object r = Mockito.mock(Object.class);
        ArrayList list = new ArrayList();
        list.add(ex);
        list.add(r);
        Mockito.when(xpathparser.EqualityExpr()).thenReturn(ex, r);
        Mockito.when(compiler.and(list.toArray())).thenReturn(ex);
        // when
        Object result = xpathparser.AndExpr();
        // then
        assertEquals(ex, result);
        Mockito.verify(xpathparser, Mockito.times(2)).EqualityExpr();
        Mockito.verify(compiler).and(list.toArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdditiveExpr() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        compiler = mock(Compiler.class);
        xpathparser = new XPathParser(tokenManager);
        // mock SubtractiveExpr to return a value
        when(xpathparser.SubtractiveExpr()).thenReturn("expr1", "expr2");
        // mock compiler.sum to return a value
        when(compiler.sum(any(Object[].class))).thenReturn("result");
        // call the method under test
        Object result = xpathparser.AdditiveExpr();
        // assert the result
        assertEquals("result", result);
        // verify that SubtractiveExpr was called twice
        verify(xpathparser, times(2)).SubtractiveExpr();
        // verify that compiler.sum was called once
        verify(compiler).sum(any(Object[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubtractiveExpr() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        compiler = mock(Compiler.class);
        xpathparser = new XPathParser(tokenManager);
        // given
        Object ex = mock(Object.class);
        Object r = mock(Object.class);
        when(xpathparser.MultiplicativeExpr()).thenReturn(ex, r);
        when(compiler.minus(ex, r)).thenReturn(ex);
        // when
        Object result = xpathparser.SubtractiveExpr();
        // then
        assertEquals(ex, result);
        verify(compiler, times(1)).minus(ex, r);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextToken() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        token = mock(Token.class);
        when(tokenManager.getNextToken()).thenReturn(token);
        Token result = xpathparser.getNextToken();
        assertEquals(token, result);
        verify(tokenManager, times(1)).getNextToken();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgument() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        // mock the Expression() method to return a dummy object
        Object dummyObject = new Object();
        when(xpathparser.Expression()).thenReturn(dummyObject);
        // call the Argument() method
        Object result = xpathparser.Argument();
        // assert that the result is the same as the dummy object
        assertEquals(dummyObject, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdisable_tracing() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(tokenManager);
        xpathparser.disable_tracing();
        // Since disable_tracing is an empty method, we can't assert anything specific
        // But we can assert that it doesn't throw any exception
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_NCName_SWWx0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        try {
            String result = parser.NCName();
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpression() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        // given
        when(tokenManager.getNextToken()).thenReturn(new Token()); // mock the token
        // when
        Object result = xpathparser.Expression();
        // then
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException_1() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        ParseException parseException = xpathparser.generateParseException();
        String message = parseException.getMessage();
        assertNotNull(parseException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException_2() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        ParseException parseException = xpathparser.generateParseException();
        String message = parseException.getMessage();
        assertNotNull(message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException_3() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        ParseException parseException = xpathparser.generateParseException();
        String message = parseException.getMessage();
        assertTrue(message.length() > 0);
    }

    @Test
    public void testQName_Without_CoreFunctions_loRl0() throws ParseException {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.QName_Without_CoreFunctions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_aJXT6_vOUM0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        parser.token = new Token();
        parser.token.kind = 89;
        ParseException exception = parser.generateParseException();
        assertNotNull(exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_ttSy6_ebHR0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        parser.token = new Token();
        parser.token.kind = 1;
        ParseException e = parser.generateParseException();
        assertNotNull(e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_IeQY11_eThM0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        parser.token = new Token();
        parser.token.kind = 6;
        ParseException e = parser.generateParseException();
        assertNotNull(e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_AfGj2_jOZE0() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1), 1));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_ObWH1_NWuS0_2() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertEquals("Expected exception message", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_DeJZ9_Zgkg0_2() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        parser.token = new Token();
        parser.token.kind = 3;
        ParseException exception = parser.generateParseException();
        assertEquals("Expected exception message", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_bAdy7_jxdi0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{1, 2, 3})));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_WeTu4_IpGm0_2() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Error", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_hILb5_PRFO0_2() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        ParseException exception = parser.generateParseException();
        assertEquals("Error", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_GrQb9_PUDY0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        parser.token = new Token();
        parser.token.kind = 10;
        ParseException e = parser.generateParseException();
        assertNotNull(e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_UmsN10_TKzu0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        parser.token = new Token();
        parser.token.kind = 20;
        ParseException e = parser.generateParseException();
        assertNotNull(e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_lRia6_bJFb0_2() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        ParseException exception = parser.generateParseException();
        assertEquals("Error parsing XPath expression", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName_Without_CoreFunctions_AND_RvAm0() throws Exception {
        XPathParserTokenManager tokenManager = Mockito.mock(XPathParserTokenManager.class);
        XPathParser xpathparser = new XPathParser(tokenManager);
        Mockito.when(tokenManager.getNextToken()).thenReturn(token);
        Mockito.when(token.kind).thenReturn(XPathParser.AND);
        Mockito.when(token.image).thenReturn("AND");
        Object result = xpathparser.QName_Without_CoreFunctions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName_Without_CoreFunctions_DIV_OISO0() throws Exception {
        tokenManager = Mockito.mock(XPathParserTokenManager.class);
        token = Mockito.mock(Token.class);
        jj_nt = Mockito.mock(Token.class);
        xpathparser = new XPathParser(tokenManager);
        Mockito.when(tokenManager.getNextToken()).thenReturn(jj_nt);
        Mockito.when(jj_nt.kind).thenReturn(XPathParser.DIV);
        Mockito.when(jj_nt.image).thenReturn("DIV");
        String result = (String) xpathparser.NCName_Without_CoreFunctions();
        assertEquals("DIV", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName_Without_CoreFunctions_MOD_sWCY0() throws Exception {
        XPathParserTokenManager tokenManager = Mockito.mock(XPathParserTokenManager.class);
        XPathParser xpathparser = new XPathParser(tokenManager);
        Mockito.when(tokenManager.getNextToken()).thenReturn(token);
        Mockito.when(token.kind).thenReturn(XPathParser.MOD);
        Mockito.when(token.image).thenReturn("MOD");
        Object result = xpathparser.QName_Without_CoreFunctions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_NCName_Without_CoreFunctions_NCName_EyUb0_kWgN0() throws ParseException {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        String result = (String) parser.QName_Without_CoreFunctions();
        assertEquals("NCName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_EBWl9_oPEi0_2() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        ParseException exception = parser.generateParseException();
        assertEquals("Exception in XPathParser", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_UtRo1_UBgb0_2() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Expected exception message", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_UYxd5_avrW0_2() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Exception in XPathParser: Encountered \"\" at line 1, column 1.", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_xtZQ8_HyWm0_2() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024));
        XPathParser parser = new XPathParser(tm);
        parser.token = new Token();
        parser.token.kind = 3;
        ParseException exception = parser.generateParseException();
        assertEquals("Expected exception message", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_EdMr1_Avpa0_2() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Error parsing XPath expression", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_MiBh5_ZgTu0_2() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024)));
        ParseException exception = parser.generateParseException();
        assertEquals("Error parsing XPath expression", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_DgUi9_MqED0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = null;
        try {
            parser.QName_Without_CoreFunctions();
        } catch (ParseException e) {
            exception = e;
        }
        assertNotNull(exception);
        assertEquals("Error parsing XPath expression", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_oONr5_EnAv0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        try {
            parser.QName_Without_CoreFunctions(); // calling the method under test
        } catch (ParseException e) {
            assertNotNull(e);
            assertEquals("Error", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_UTEs8_vRkV0_2() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024));
        XPathParser parser = new XPathParser(tm);
        parser.token = new Token();
        parser.token.kind = 3;
        ParseException exception = parser.generateParseException();
        assertEquals("Error", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_QlXw10_YqZD0_2() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        parser.token = new Token();
        parser.token.kind = 5;
        ParseException exception = parser.generateParseException();
        assertEquals("Error", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseExpression_OLbo0_nGOv0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        try {
            Object result = parser.QName_Without_CoreFunctions();
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseExpression_lEmU0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = mock(XPathParserTokenManager.class);
        xpathparser = new XPathParser(tokenManager);
        Object expected = new Object(); // replace with expected object
        when(xpathparser.QName_Without_CoreFunctions()).thenReturn(expected);
        Object result = xpathparser.QName_Without_CoreFunctions();
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionName_XDlv0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream, 0);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(jj_nt.kind).thenReturn(XPathParser.FUNCTION_NAME);
        xpathparser.jj_nt = jj_nt;
        Object result = xpathparser.QName_Without_CoreFunctions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbbreviatedAxisSpecifier_iari0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream, 1);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(jj_nt.kind).thenReturn(87);
        xpathparser.jj_nt = jj_nt;
        Object result = xpathparser.QName_Without_CoreFunctions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_AXIS_SELF_PHsZ0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(tokenManager.getNextToken()).thenReturn(jj_nt);
        when(jj_nt.kind).thenReturn(XPathParser.AXIS_SELF);
        Object result = xpathparser.AxisSpecifier();
        assertEquals(XPathParser.AXIS_SELF, ((Integer) result).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_AXIS_PARENT_FWKK0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(tokenManager.getNextToken()).thenReturn(jj_nt);
        when(jj_nt.kind).thenReturn(XPathParser.AXIS_PARENT);
        Object result = xpathparser.AxisSpecifier();
        assertEquals(XPathParser.AXIS_PARENT, ((Integer) result).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_AXIS_ATTRIBUTE_oIBU0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(tokenManager.getNextToken()).thenReturn(jj_nt);
        when(jj_nt.kind).thenReturn(XPathParser.AXIS_ATTRIBUTE);
        Object result = xpathparser.AxisSpecifier();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_AXIS_ANCESTOR_XglJ0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(tokenManager.getNextToken()).thenReturn(jj_nt);
        when(jj_nt.kind).thenReturn(XPathParser.AXIS_ANCESTOR);
        Object result = xpathparser.AxisSpecifier();
        assertEquals(XPathParser.AXIS_ANCESTOR, ((Integer) result).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_AXIS_NAMESPACE_DoPC0_1() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(tokenManager.getNextToken()).thenReturn(jj_nt);
        when(jj_nt.kind).thenReturn(XPathParser.AXIS_NAMESPACE);
        Object result = xpathparser.AxisSpecifier();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_AXIS_NAMESPACE_DoPC0_2() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(tokenManager.getNextToken()).thenReturn(jj_nt);
        when(jj_nt.kind).thenReturn(XPathParser.AXIS_NAMESPACE);
        Object result = xpathparser.AxisSpecifier();
        assertEquals(XPathParser.AXIS_NAMESPACE, ((String) result).hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_AXIS_PRECEDING_ReYC0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(tokenManager.getNextToken()).thenReturn(jj_nt);
        when(jj_nt.kind).thenReturn(XPathParser.AXIS_PRECEDING);
        int result = xpathparser.AxisSpecifier();
        assertEquals(xpathparser.AXIS_PRECEDING, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_AXIS_FOLLOWING_UlYQ0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tokenManager);
        jj_nt = mock(Token.class);
        when(tokenManager.getNextToken()).thenReturn(jj_nt);
        when(jj_nt.kind).thenReturn(XPathParser.AXIS_FOLLOWING);
        Object result = xpathparser.AxisSpecifier();
        assertEquals(XPathParser.AXIS_FOLLOWING, ((Integer) result).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_OR_oJGo0() throws Exception {
        when(stream.getColumn()).thenReturn(1);
        when(stream.getLine()).thenReturn(1);
        tokenManager = new XPathParserTokenManager(stream, 1);
        xpathparser = new XPathParser(tokenManager);
        xpathparser.jj_nt.kind = XPathParser.OR;
        Object result = xpathparser.QName_Without_CoreFunctions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExpr2_ifju1_iRVb0() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("a | b"))));
        try {
            Object result = parser.QName_Without_CoreFunctions(); // Changed method call to QName_Without_CoreFunctions
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionName_IUnl0_xQJG0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        try {
            Object result = parser.QName_Without_CoreFunctions();
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExpr3_fssK2_iXee0() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("a | b | c"))));
        try {
            Object result = parser.QName_Without_CoreFunctions(); // Changed method call to QName_Without_CoreFunctions
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnaryExpr_goSg0_SnsJ0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser xp = new XPathParser(tm);
        try {
            Object result = xp.QName_Without_CoreFunctions();
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAndExpr2_RqdJ1_Yqzl0() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("a and b"), 1, 1)));
        try {
            Object result = parser.QName_Without_CoreFunctions(); // Changed AndExpr() to QName_Without_CoreFunctions()
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAndExpr3_YQYF2_pOgJ0() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("a and b and c"), 1, 1)));
        try {
            Object result = parser.QName_Without_CoreFunctions(); // Changed method call to QName_Without_CoreFunctions
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicate_ZVnt0_ripL0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser xp = new XPathParser(tm);
        try {
            Object result = xp.QName_Without_CoreFunctions(); // Changed method call to QName_Without_CoreFunctions
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_xTsm1_BfKS0() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1)));
        try {
            Object result = parser.QName_Without_CoreFunctions();
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardName2_PGkB1_hnom0() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""))));
        try {
            Object result = parser.QName_Without_CoreFunctions();
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionName_UVbb0_JRlL0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        try {
            Object obj = parser.QName_Without_CoreFunctions();
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType_TEXT_JKAp0_jufN0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser xp = new XPathParser(tm);
        try {
            Object result = xp.QName_Without_CoreFunctions();
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpression_zHyS0_UAzM0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
        XPathParser parser = new XPathParser(tm);
        try {
            Object result = parser.QName_Without_CoreFunctions();
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_eSxA0_xkKu0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        try {
            Object result = parser.QName_Without_CoreFunctions(); // Changed method call
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisName_AXIS_SELF_NOzZ0_RtDn0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tm);
        try {
            int result = parser.AxisName();
            assertEquals(Compiler.AXIS_SELF, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_NCName_SWWx0_fid2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("abc"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        try {
            Object result = parser.QName_Without_CoreFunctions();
            assertNotNull(result);
        } catch (ParseException e) {
            // Expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_AfGj2_jOZE0_fid2() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 0, 1), 1));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
}