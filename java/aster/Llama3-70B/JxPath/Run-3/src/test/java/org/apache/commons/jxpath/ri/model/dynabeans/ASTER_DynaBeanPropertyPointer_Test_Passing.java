/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPropertyPointer_Test_Passing {
    DynaBeanPropertyPointer dynabeanpropertypointer;
    @Mock
    DOMNodePointer parent;
    @Mock
    DynaBean dynaBean;
    private String name = "testProperty";
    private DynaClass dynaClass;
    private int propertyIndex = -1;
    private DynaProperty[] dynaProperties;
    private static final String CLASS = "class";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() throws Exception {
        parent = mock(DOMNodePointer.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        boolean result = dynabeanpropertypointer.isContainer();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_1() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynaClass = mock(DynaClass.class);
        dynaProperties = new DynaProperty[]{mock(DynaProperty.class), mock(DynaProperty.class)};
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        when(dynaClass.getDynaProperties()).thenReturn(dynaProperties);
        when(dynaProperties[0].getName()).thenReturn("property1");
        when(dynaProperties[1].getName()).thenReturn("class"); // this one should be ignored
        dynabeanpropertypointer = new DynaBeanPropertyPointer(mock(DOMNodePointer.class), dynaBean);
        String[] propertyNames = dynabeanpropertypointer.getPropertyNames();
        assertEquals(1, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_2() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynaClass = mock(DynaClass.class);
        dynaProperties = new DynaProperty[]{mock(DynaProperty.class), mock(DynaProperty.class)};
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        when(dynaClass.getDynaProperties()).thenReturn(dynaProperties);
        when(dynaProperties[0].getName()).thenReturn("property1");
        when(dynaProperties[1].getName()).thenReturn("class"); // this one should be ignored
        dynabeanpropertypointer = new DynaBeanPropertyPointer(mock(DOMNodePointer.class), dynaBean);
        String[] propertyNames = dynabeanpropertypointer.getPropertyNames();
        assertEquals("property1", propertyNames[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynaClass = mock(DynaClass.class);
        dynaProperties = new DynaProperty[]{mock(DynaProperty.class), mock(DynaProperty.class)};
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        when(dynaClass.getDynaProperties()).thenReturn(dynaProperties);
        when(dynaProperties[0].getName()).thenReturn("property1");
        when(dynaProperties[1].getName()).thenReturn("class"); // this one should be ignored
        dynabeanpropertypointer = new DynaBeanPropertyPointer(mock(DOMNodePointer.class), dynaBean);
        String[] propertyNames = dynabeanpropertypointer.getPropertyNames();
        assertEquals(1, propertyNames.length);
        assertEquals("property1", propertyNames[0]);
    }
}