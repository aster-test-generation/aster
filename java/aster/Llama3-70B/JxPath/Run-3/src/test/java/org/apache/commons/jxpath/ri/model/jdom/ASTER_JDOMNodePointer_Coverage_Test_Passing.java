/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JDOMNodePointer_Coverage_Test_Passing {
private Object node;
private JDOMNodePointer jdomnodepointer;
    private Text textNode;
    private Element elementNode;
    private Document document;
    private CDATA cdata;
    private ProcessingInstruction pi;
    private Comment comment;
    private JXPathContext context;
    private JDOMNodePointer nodePointer;
    private QName name;
    private int index;
    private Object value;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_KoAb0() {
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.US);
    QName qName = new QName("prefix", "localName");
    NodeIterator iterator = jdomNodePointer.attributeIterator(qName);
    assertNotNull(iterator);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_HpEU0() {
        Object node = new Object();
        Locale locale = new Locale("en", "US");
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
        int expectedHashCode = node.hashCode();
        assertEquals(expectedHashCode, jDOMNodePointer.hashCode());
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction_YCNO1() {
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.US);
        QName name = pointer.getName();
        assertEquals("target", name.getName());
        assertNull(name.getPrefix());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_pmJg2() {
        NodePointer ptr = nodePointer.createChild(context, name, index, value);
        assertEquals(value, ptr.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReturnPtr_gSPE3() {
        NodePointer ptr1 = nodePointer.createChild(context, name, index, value);
        NodePointer ptr2 = nodePointer.createChild(context, name, index, value);
        assertSame(ptr1, ptr2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_CurrentIsNull_LAOW0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        boolean result = nodePointer.isLanguage("ENGLISH");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_SameNode_TdKz0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NodePointer pointer1 = nodePointer;
        NodePointer pointer2 = nodePointer;
        assertEquals(0, nodePointer.compareChildNodePointers(pointer1, pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withId_Cwar0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"), "id");
        String path = pointer.asPath();
        assertEquals("id('id')", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withParentInstance_QVVz3() {
        JDOMNodePointer parent = new JDOMNodePointer(new Object(), new Locale("en"));
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Object());
        String path = pointer.asPath();
        assertEquals(parent.asPath() + "/", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withProcessingInstruction_nulh16() {
        JDOMNodePointer pointer = new JDOMNodePointer(new ProcessingInstruction("target", "data"), new Locale("en"));
        String path = pointer.asPath();
        assertEquals("/processing-instruction('target')[1]", path);
    }
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction_YCNO1_1() {
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.US);
        QName name = pointer.getName();
        assertEquals("target", name.getName());}
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction_YCNO1_2() {
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.US);
        QName name = pointer.getName();
        assertNull(name.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withParentInstance_QVVz3_fid1() {
        JDOMNodePointer parent = new JDOMNodePointer(new Object(), new Locale("en"));
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Object());
        String path = pointer.asPath();
        assertEquals(parent.asPath() + "", path);
    }
@Test
    public void testGetNamespaceResolver_ViBA1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, Locale.US);
        NamespaceResolver namespaceResolver = jdomNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttribute_AttributeFound_JrPe6_jgKj0() {
    Document document = new Document();
    JXPathContext context = JXPathContext.newContext(document);
    QName name = new QName("test");
    Element element = new Element("test");
    element.setAttribute(name.getName(), "value");
    JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
    NodePointer result = pointer.createAttribute(context, name);
    assertNotNull(result);
}
}