/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Passing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Attr attr;
    @Mock
    private NodePointer pointer1;
    @Mock
    private NodePointer pointer2;
    private DOMAttributePointer domattributepointer;
    private DOMAttributePointer anotherDOMAttributePointer;
    NodeTest nodeTest;
    NodeTypeTest nodeTypeTest;
    DOMAttributePointer domAttributePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        domattributepointer = new DOMAttributePointer(parent, attr);
        int result = domattributepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NodeTestIsNull_ReturnsTrue() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        Attr attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        nodeTest = mock(NodeTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        assertTrue(domattributepointer.testNode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NodeTestIsNodeTypeTest_ReturnsTrue() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        Attr attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        nodeTest = mock(NodeTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        assertTrue(domattributepointer.testNode(nodeTypeTest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NodeTestIsNotInstanceOfNodeTypeTest_ReturnsFalse() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        Attr attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        nodeTest = mock(NodeTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        assertFalse(domattributepointer.testNode(nodeTest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsNull_WhenAttrValueIsNull() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getValue()).thenReturn(null);
        assertNull(domAttributePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsNull_WhenAttrValueIsEmptyAndNotSpecified() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(false);
        assertNull(domAttributePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsAttrValue_WhenAttrValueIsNotEmptyAndSpecified() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getValue()).thenReturn("some value");
        when(attr.getSpecified()).thenReturn(true);
        assertEquals("some value", domAttributePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        when(parent.asPath()).thenReturn("/parent/path");
        when(attr.getNodeName()).thenReturn("attributeName");
        String result = domattributepointer.asPath();
        assertEquals("/parent/path/@attributeName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        boolean result = domattributepointer.isActual();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        attr = Mockito.mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        boolean result = domattributepointer.isLeaf();
        assertTrue(result);
    }
}