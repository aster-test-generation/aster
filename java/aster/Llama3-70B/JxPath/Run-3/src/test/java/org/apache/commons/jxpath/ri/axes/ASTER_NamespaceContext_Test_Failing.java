/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceContext_Test_Failing {
    @Mock
    private SelfContext selfContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private NamespaceContext namespaceContext;
    @Mock
    private NodeIterator iterator;
    private NodePointer currentNodePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private SelfContext parentContext;
    @Mock
    private NodePointer parentCurrentNodePointer;
    private boolean setStarted = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        selfContext = new SelfContext(null, nodeTypeTest);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        // Mock the getCurrentPosition method to return 5
        when(namespaceContext.getCurrentPosition()).thenReturn(5);
        // Mock the nextNode method to return true
        when(namespaceContext.nextNode()).thenReturn(true);
        // Call the setPosition method with position 10
        boolean result = namespaceContext.setPosition(10);
        // Assert that the method returns true
        assertTrue(result);
        // Verify that the nextNode method was called 5 times
        verify(namespaceContext, times(5)).nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_withPositionLessThanCurrentPosition() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        selfContext = new SelfContext(null, nodeTypeTest);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        // Mock the getCurrentPosition method to return 10
        when(namespaceContext.getCurrentPosition()).thenReturn(10);
        // Call the setPosition method with position 5
        boolean result = namespaceContext.setPosition(5);
        // Assert that the method returns true
        assertTrue(result);
        // Verify that the reset method was called
        verify(namespaceContext).reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_withNextNodeReturningFalse() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        selfContext = new SelfContext(null, nodeTypeTest);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        // Mock the getCurrentPosition method to return 5
        when(namespaceContext.getCurrentPosition()).thenReturn(5);
        // Mock the nextNode method to return false
        when(namespaceContext.nextNode()).thenReturn(false);
        // Call the setPosition method with position 10
        boolean result = namespaceContext.setPosition(10);
        // Assert that the method returns false
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_1() throws Exception {
        namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        iterator = iterator;
        setStarted = true;
        namespaceContext.reset();
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_FirstCall_ReturnsFalse() throws Exception {
        namespaceContext = new NamespaceContext(parentContext, nodeTest);
        // Arrange
        when(nodeTest instanceof NodeNameTest).thenReturn(false);
        // Act
        boolean result = namespaceContext.nextNode();
        // Assert
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode2_ZnCd1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NodeNameTest nodeNameTest = new NodeNameTest(new QName("name"));
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), nodeNameTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assertFalse(result);
    }

    @Test
    public void testNextNode_OhBx1() {
        boolean result = namespaceContext.nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws Exception {
        namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        iterator = iterator;
        setStarted = true;
        namespaceContext.reset();
        assertNull(iterator);
        assertFalse(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IteratorHasNext_ReturnsTrue_fid1() throws Exception {
        namespaceContext = new NamespaceContext(parentContext, nodeTest);
        // Arrange
        namespaceContext.nextNode(); // setStarted = true
        when(iterator.setPosition(1)).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        // Act
        boolean result = namespaceContext.nextNode();
        // Assert
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_NAka0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        NodePointer nodePointer = namespaceContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test1_zcHM0_fid1() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        assertTrue(namespaceContext.setPosition(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test3_qwKq2_fid1() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        namespaceContext.getCurrentPosition(); // assume this returns 5
        assertTrue(namespaceContext.setPosition(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test4_mnfA3_fid1() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        namespaceContext.getCurrentPosition(); // assume this returns 5
        assertFalse(namespaceContext.setPosition(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode2_ZnCd1_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NodeNameTest nodeNameTest = new NodeNameTest(new QName("name"));
        SelfContext selfContext = new SelfContext(null, nodeNameTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_2_fid3() throws Exception {
        namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        iterator = iterator;
        setStarted = true;
        namespaceContext.reset();
        assertFalse(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeNameTest_ReturnsTrue_Rvhb0() throws Exception {
        namespaceContext = new NamespaceContext(parentContext, nodeTest);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeTest instanceof NodeNameTest).thenReturn(true);
        nodeTest = nodeNameTest;
        when(nodeNameTest.getNodeName()).thenReturn(new QName("test"));
        when(parentContext.getCurrentNodePointer().namespacePointer("test")).thenReturn(currentNodePointer);
        boolean result = namespaceContext.nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeNameTest_Wildcard_ReturnsTrue_Gqln0() throws Exception {
        namespaceContext = new NamespaceContext(parentContext, nodeTest);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeTest instanceof NodeNameTest).thenReturn(true);
        when(((NodeTypeTest) nodeTest).getNodeType()).thenReturn(123); // dummy value
        when(nodeNameTest.getNodeName()).thenReturn(new QName("test"));
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(parentContext.getCurrentNodePointer().namespaceIterator()).thenReturn(iterator);
        when(iterator.setPosition(1)).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        when((NodeNameTest) nodeTest).thenReturn(nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assertTrue(result);
    }
}