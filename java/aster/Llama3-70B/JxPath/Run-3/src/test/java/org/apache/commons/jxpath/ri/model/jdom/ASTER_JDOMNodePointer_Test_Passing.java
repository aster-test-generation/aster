/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.jdom.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Passing {
    private Object node;
    private JDOMNodePointer jdomnodepointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    private Element element;
    private Text textNode;
    private Element elementNode;
    private Locale locale;
    private NodeTest nodeTest;
    private JXPathContext context;
    private QName name;
    private AbstractFactory factory;
    private NodeIterator iterator;
    private NodePointer nodePointer;
    QName qName;
    JDOMAttributeIterator jdomAttributeIterator;
    private ProcessingInstruction processingInstruction;
    NodePointer startWith;
    boolean reverse;
    private Attribute attribute;
    private Document document;
    private NamespaceResolver namespaceResolver;
    private JDOMNodePointer other;
    private NodePointer pointer;
    private NodeTest test;
    private NodeIterator nodeIterator;
    private Comment comment;
    private Text text;
    private Element parent;
    private List content;
    private String id;
    private CDATA cdata;
    private ProcessingInstruction pi;
    private Namespace namespace;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_TextNode() throws Exception {
        locale = Locale.US;
        textNode = mock(Text.class);
        elementNode = mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(textNode, locale);
        String value = "test value";
        jdomnodepointer.setValue(value);
        verify(textNode).setText(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        Object node = Mockito.mock(Object.class);
        Locale locale = Mockito.mock(Locale.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        assertFalse(jdomnodepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element() throws Exception {
        element = mock(Element.class);
        processingInstruction = mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("localName");
        QName qName = jdomnodepointer.getName();
        assertEquals("ns", qName.getPrefix());
        assertEquals("localName", qName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction() throws Exception {
        element = mock(Element.class);
        processingInstruction = mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        jdomnodepointer = new JDOMNodePointer(processingInstruction, Locale.US);
        when(processingInstruction.getTarget()).thenReturn("target");
        QName qName = jdomnodepointer.getName();
        assertNull(qName.getPrefix());
        assertEquals("target", qName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNamespacePrefix() throws Exception {
        element = mock(Element.class);
        processingInstruction = mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(element.getNamespacePrefix()).thenReturn("");
        when(element.getName()).thenReturn("localName");
        QName qName = jdomnodepointer.getName();
        assertNull(qName.getPrefix());
        assertEquals("localName", qName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() throws Exception {
        Object node = Mockito.mock(Object.class);
        Locale locale = Mockito.mock(Locale.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        nodeTest = Mockito.mock(NodeTest.class);
        startWith = Mockito.mock(NodePointer.class);
        reverse = false;
        NodeIterator iterator = jdomnodepointer.childIterator(nodeTest, reverse, startWith);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_Element() throws Exception {
        element = mock(Element.class);
        attribute = mock(Attribute.class);
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(element.getNamespacePrefix()).thenReturn("prefix");
        String result = JDOMNodePointer.getPrefix(element);
        assertEquals("prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_Element_NoPrefix() throws Exception {
        element = mock(Element.class);
        attribute = mock(Attribute.class);
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(element.getNamespacePrefix()).thenReturn(null);
        String result = JDOMNodePointer.getPrefix(element);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_Attribute() throws Exception {
        element = mock(Element.class);
        attribute = mock(Attribute.class);
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        node = attribute;
        when(attribute.getNamespacePrefix()).thenReturn("prefix");
        String result = JDOMNodePointer.getPrefix(attribute);
        assertEquals("prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_Attribute_NoPrefix() throws Exception {
        element = mock(Element.class);
        attribute = mock(Attribute.class);
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        node = attribute;
        when(attribute.getNamespacePrefix()).thenReturn(null);
        String result = JDOMNodePointer.getPrefix(attribute);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_UnknownNodeType() throws Exception {
        element = mock(Element.class);
        attribute = mock(Attribute.class);
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        node = new Object();
        String result = JDOMNodePointer.getPrefix(node);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        Object node = Mockito.mock(Object.class);
        Locale locale = Mockito.mock(Locale.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        int length = jdomnodepointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_ElementWithContent() throws Exception {
        element = mock(Element.class);
        document = mock(Document.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(element.getContent()).thenReturn(Collections.singletonList("content"));
        assertFalse(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_ElementWithoutContent() throws Exception {
        element = mock(Element.class);
        document = mock(Document.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(element.getContent()).thenReturn(Collections.emptyList());
        assertTrue(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_DocumentWithContent() throws Exception {
        element = mock(Element.class);
        document = mock(Document.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        jdomnodepointer = new JDOMNodePointer(document, Locale.US);
        when(document.getContent()).thenReturn(Collections.singletonList("content"));
        assertFalse(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_DocumentWithoutContent() throws Exception {
        element = mock(Element.class);
        document = mock(Document.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        jdomnodepointer = new JDOMNodePointer(document, Locale.US);
        when(document.getContent()).thenReturn(Collections.emptyList());
        assertTrue(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_OtherNodeType() throws Exception {
        element = mock(Element.class);
        document = mock(Document.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        jdomnodepointer = new JDOMNodePointer(new Object(), Locale.US);
        assertTrue(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() throws Exception {
        node = new Object();
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(node, Locale.US);
        assertTrue(jdomnodepointer.equals(jdomnodepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() throws Exception {
        node = new Object();
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(node, Locale.US);
        assertFalse(jdomnodepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_ReturnsTrue() throws Exception {
        node = new Object();
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(node, Locale.US);
        assertTrue(jdomnodepointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_ReturnsFalse() throws Exception {
        node = new Object();
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(new Object(), Locale.US);
        assertFalse(jdomnodepointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer() throws Exception {
        node = Mockito.mock(Object.class);
        locale = Mockito.mock(Locale.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        String prefix = "prefix";
        NodePointer result = jdomnodepointer.namespacePointer(prefix);
        assertNotNull(result);
        assertTrue(result instanceof JDOMNamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Element() throws Exception {
        element = Mockito.mock(Element.class);
        attribute = Mockito.mock(Attribute.class);
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        Mockito.when(element.getName()).thenReturn("elementName");
        String localName = JDOMNodePointer.getLocalName(element);
        assertEquals("elementName", localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Attribute() throws Exception {
        element = Mockito.mock(Element.class);
        attribute = Mockito.mock(Attribute.class);
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        Mockito.when(attribute.getName()).thenReturn("attributeName");
        String localName = JDOMNodePointer.getLocalName(attribute);
        assertEquals("attributeName", localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_UnknownType() throws Exception {
        element = Mockito.mock(Element.class);
        attribute = Mockito.mock(Attribute.class);
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        String localName = JDOMNodePointer.getLocalName(node);
        assertNull(localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguageNull_GSvg0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        boolean result = nodePointer.isLanguage("en");
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_MzgD0() {
        JDOMNodePointer jdp = new JDOMNodePointer(new Object(), Locale.US);
        assertTrue(jdp.equals(jdp));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_KhSo1() {
        Object obj = new Object();
        JDOMNodePointer jdp = new JDOMNodePointer(new Object(), Locale.US);
        assertFalse(jdp.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_pKCO2() {
        Object node = new Object();
        JDOMNodePointer jdp1 = new JDOMNodePointer(node, Locale.US);
        JDOMNodePointer jdp2 = new JDOMNodePointer(node, Locale.US);
        assertTrue(jdp1.equals(jdp2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_XceF3() {
        JDOMNodePointer jdp1 = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer jdp2 = new JDOMNodePointer(new Object(), Locale.US);
        assertFalse(jdp1.equals(jdp2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NotElementNorAttribute_BnGW4() {
        Object node = new Object();
        String prefix = JDOMNodePointer.getPrefix(node);
        assert prefix == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullNode_aRUc5() {
        String prefix = JDOMNodePointer.getPrefix(null);
        assert prefix == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Element_sNXI2() {
        Element element = new Element("root");
        Element valueElement = new Element("child");
        valueElement.addContent(new Text("text"));
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
        pointer.setValue(valueElement);
        assertEquals(1, element.getContent().size());
        assertEquals("text", ((Text) element.getContent().get(0)).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalName_Element_Opmo0() {
        Element element = new Element("test");
        String localName = JDOMNodePointer.getLocalName(element);
        assertEquals("test", localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalName_Null_tFvJ2() {
        String localName = JDOMNodePointer.getLocalName(null);
        assertNull(localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindEnclosingAttribute_noParent() throws Exception {
        jdomnodepointer = new JDOMNodePointer(new Object(), Locale.US);
        // when
        String result = JDOMNodePointer.findEnclosingAttribute(new Object(), "attrName", namespace);
        // then
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_UtCz0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NamespaceResolver resolver = nodePointer.getNamespaceResolver();
        assertNotNull(resolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverNotNull_fAcB1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        nodePointer.getNamespaceResolver(); // Initialize localNamespaceResolver
        NamespaceResolver resolver = nodePointer.getNamespaceResolver();
        assertSame(nodePointer.getNamespaceResolver(), resolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Element_LlfK0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        assertEquals("", pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Comment_QJNE2() {
        Comment comment = new Comment("   Hello World   ");
        JDOMNodePointer pointer = new JDOMNodePointer(comment, Locale.US);
        assertEquals("Hello World", pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Text_refY3() {
        Text text = new Text("   Hello World   ");
        JDOMNodePointer pointer = new JDOMNodePointer(text, Locale.US);
        assertEquals("Hello World", pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ProcessingInstruction_UjuE4() {
        ProcessingInstruction pi = new ProcessingInstruction("target", "data   ");
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.US);
        assertEquals("data", pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Locale_Mbyr10() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.FRANCE);
        assertEquals("", pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Id_StzN11() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US, "id");
        assertEquals("", pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_xmlPrefix_QGrz0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        String result = pointer.getNamespaceURI("xml");
        assertEquals(Namespace.XML_NAMESPACE.getURI(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_noPrefix_bBLD1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        String result = pointer.getNamespaceURI("");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_unknownPrefix_AkXH2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        String result = pointer.getNamespaceURI("unknown");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_elementWithoutNamespace_GdKL5() {
        Element element = new Element("test");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
        String result = pointer.getNamespaceURI("prefix");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_nodeIsNotElementOrDocument_kMaE8() {
        Object node = new Object();
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.US);
        String result = pointer.getNamespaceURI("prefix");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_localeIsNull_dXBD9() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), null);
        String result = pointer.getNamespaceURI("prefix");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_with_id_uyQe0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"), "id1");
        assertEquals("id('id1')", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_with_text_zhom5() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("text"), new Locale("en"));
        assertEquals("/text()[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_with_pi_aWln6() {
        JDOMNodePointer pointer = new JDOMNodePointer(new ProcessingInstruction("target", "data"), new Locale("en"));
        assertEquals("/processing-instruction('target')[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode1_Gdux0() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Object();
        NodeTest test = null;
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode2_swRq1() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("test"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode3_zbnx2() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("other"));
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode4_IeSX3() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Text("test");
        NodeTest test = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode5_OVJf4() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Comment("test");
        NodeTest test = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode6_hblh5() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new ProcessingInstruction("test", "data");
        NodeTest test = new ProcessingInstructionTest("test");
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode7_DIBg6() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new ProcessingInstruction("other", "data");
        NodeTest test = new ProcessingInstructionTest("test");
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode9_PhOs8() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("test", "other"));
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode13_MCfj12() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("*", "other"));
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode14_lpOc13() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("*"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode15_VcPF14() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_1() throws Exception {
        element = mock(Element.class);
        processingInstruction = mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("localName");
        QName qName = jdomnodepointer.getName();
        assertEquals("ns", qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_2() throws Exception {
        element = mock(Element.class);
        processingInstruction = mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("localName");
        QName qName = jdomnodepointer.getName();
        assertEquals("localName", qName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction_1() throws Exception {
        element = mock(Element.class);
        processingInstruction = mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        jdomnodepointer = new JDOMNodePointer(processingInstruction, Locale.US);
        when(processingInstruction.getTarget()).thenReturn("target");
        QName qName = jdomnodepointer.getName();
        assertNull(qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction_2() throws Exception {
        element = mock(Element.class);
        processingInstruction = mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        jdomnodepointer = new JDOMNodePointer(processingInstruction, Locale.US);
        when(processingInstruction.getTarget()).thenReturn("target");
        QName qName = jdomnodepointer.getName();
        assertEquals("target", qName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNamespacePrefix_1() throws Exception {
        element = mock(Element.class);
        processingInstruction = mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(element.getNamespacePrefix()).thenReturn("");
        when(element.getName()).thenReturn("localName");
        QName qName = jdomnodepointer.getName();
        assertNull(qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNamespacePrefix_2() throws Exception {
        element = mock(Element.class);
        processingInstruction = mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(element.getNamespacePrefix()).thenReturn("");
        when(element.getName()).thenReturn("localName");
        QName qName = jdomnodepointer.getName();
        assertEquals("localName", qName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_1() throws Exception {
        node = Mockito.mock(Object.class);
        locale = Mockito.mock(Locale.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        String prefix = "prefix";
        NodePointer result = jdomnodepointer.namespacePointer(prefix);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_2() throws Exception {
        node = Mockito.mock(Object.class);
        locale = Mockito.mock(Locale.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        String prefix = "prefix";
        NodePointer result = jdomnodepointer.namespacePointer(prefix);
        assertTrue(result instanceof JDOMNamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Element_sNXI2_1() {
        Element element = new Element("root");
        Element valueElement = new Element("child");
        valueElement.addContent(new Text("text"));
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
        pointer.setValue(valueElement);
        assertEquals(1, element.getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Element_sNXI2_2() {
        Element element = new Element("root");
        Element valueElement = new Element("child");
        valueElement.addContent(new Text("text"));
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
        pointer.setValue(valueElement);
        assertEquals("text", ((Text) element.getContent().get(0)).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_gHAh0() throws Exception {
        Locale locale = Locale.US;
        org.w3c.dom.Node node = Mockito.mock(org.w3c.dom.Node.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, locale);
        Object result = jdomnodepointer.getImmediateNode();
        assertEquals(node, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_ntGS0() throws Exception {
        NodePointer pointer = Mockito.mock(NodePointer.class);
        org.w3c.dom.Node node = Mockito.mock(org.w3c.dom.Node.class);
        NodeTest test = Mockito.mock(NodeTest.class);
        boolean result = JDOMNodePointer.testNode(pointer, node, test);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_Byxh0_1() throws Exception {
        org.w3c.dom.Node node = Mockito.mock(org.w3c.dom.Node.class);
        java.util.Locale locale = Mockito.mock(java.util.Locale.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, locale);
        NodeIterator iterator = jdomnodepointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_Byxh0_2() throws Exception {
        org.w3c.dom.Node node = Mockito.mock(org.w3c.dom.Node.class);
        java.util.Locale locale = Mockito.mock(java.util.Locale.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, locale);
        NodeIterator iterator = jdomnodepointer.namespaceIterator();
        assertTrue(iterator instanceof NodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_String_uHVc8_PuTA0() {
        Element element = new Element("element");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
        pointer.setValue("string");
        assertEquals("string", element.getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_NodeNotNull_ParentNotNull_POnj0_uCLQ0() {
        Element node = new Element("node");
        Locale locale = new Locale("en", "US");
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        Element parent = new Element("parent");
        parent.addContent(node);
        pointer.remove();
        assertTrue(parent.getContent().size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_sGCb0_migi0() {
        Locale locale = new Locale("en", "US");
        Object node = new Object();
        JDOMNodePointer jdp = new JDOMNodePointer(node, locale);
        NodeNameTest nt = new NodeNameTest(new QName("test"));
        boolean reverse = false;
        NodePointer startWith = JDOMNodePointer.newChildNodePointer(jdp, new QName("startWith"), new Object());
        NodeIterator ni = jdp.childIterator(nt, reverse, startWith);
        assertNotNull(ni);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Document_mzqD3_xtff0() {
        Document document = new Document();
        document.addContent(new Element("root"));
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("parent"), Locale.US);
        pointer.setValue(document);
        assertEquals(1, ((Element) pointer.getImmediateNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_String_rFjA10_cfCY0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("parent"), Locale.US);
        pointer.setValue("text");
        assertEquals("text", pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_vLUl0() throws Exception {
        NodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        NodeTest test = null;
        boolean result = JDOMNodePointer.testNode(pointer, new Object(), test);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_pgrN0() throws Exception {
        org.w3c.dom.Node node = Mockito.mock(org.w3c.dom.Node.class);
        Locale locale = Locale.US;
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, locale);
        Object result = jdomnodepointer.getBaseValue();
        assertEquals(node, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_Ftzp0_1() throws Exception {
        Object node = Mockito.mock(Object.class);
        Locale locale = Mockito.mock(Locale.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, locale);
        NamespaceResolver namespaceResolver = Mockito.mock(NamespaceResolver.class);
        jdomnodepointer.setNamespaceResolver(namespaceResolver);
        NamespaceResolver result = jdomnodepointer.getNamespaceResolver();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Null_pslS6_BWQC0() {
        NodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        assertNull(pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode10_iHhP9_RRiW0() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("ns", "test"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute5_fdqD4_PTdL0() {
        Object n = new JDOMNodePointer(new VariablePointer(new QName("keyword")), new Object()).getNode();
        String attrName = "attr";
        org.jdom.Namespace ns = org.jdom.Namespace.getNamespace("ns", "uri");
        String result = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_IIuJ0_1_fid2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("ns", "ln"), Locale.US);
        QName name = pointer.getName();
    }
}