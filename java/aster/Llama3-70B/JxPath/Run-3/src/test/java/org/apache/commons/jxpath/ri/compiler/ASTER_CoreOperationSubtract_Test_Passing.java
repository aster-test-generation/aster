/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationSubtract_Test_Passing {
    @Mock
    private Constant arg1;
    @Mock
    private Constant arg2;
    @Mock
    private EvalContext context;
    private CoreOperationSubtract coreOperationSubtract;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() throws Exception {
        arg1 = mock(Constant.class);
        arg2 = mock(Constant.class);
        context = mock(EvalContext.class);
        coreOperationSubtract = new CoreOperationSubtract(arg1, arg2);
        // given
        when(arg1.computeValue(context)).thenReturn(10.0);
        when(arg2.computeValue(context)).thenReturn(5.0);
        // when
        Object result = coreOperationSubtract.computeValue(context);
        // then
        assertEquals(5.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_yiGJ0() {
        Constant arg1 = new Constant("10");
        Constant arg2 = new Constant(5);
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(arg1, arg2);
        assertEquals("-", coreOperationSubtract.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_ObuH0() {
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(new Constant("string"), new Constant(1));
        assertFalse(coreOperationSubtract.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_Pztm0_izJx0() {
        Constant arg1 = new Constant("string");
        Constant arg2 = new Constant(1);
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(arg1, arg2);
    }
}