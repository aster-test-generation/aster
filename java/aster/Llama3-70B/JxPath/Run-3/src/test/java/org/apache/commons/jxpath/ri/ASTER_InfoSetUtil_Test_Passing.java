/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InfoSetUtil_Test_Passing {
    private NodePointer nodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Number_Ykbp0() {
        Number number = 10;
        assertEquals(10.0, InfoSetUtil.doubleValue(number), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_BooleanTrue_wvGp1() {
        Boolean bool = true;
        assertEquals(0.0, InfoSetUtil.doubleValue(bool), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_BooleanFalse_Egjm2() {
        Boolean bool = false;
        assertEquals(1.0, InfoSetUtil.doubleValue(bool), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_StringEmpty_QwqS3() {
        String str = "";
        assertEquals(0.0, InfoSetUtil.doubleValue(str), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_StringValidNumber_mkPS4() {
        String str = "10.5";
        assertEquals(10.5, InfoSetUtil.doubleValue(str), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_StringInvalidNumber_ddnQ5() {
        String str = "abc";
        assertTrue(Double.isNaN(InfoSetUtil.doubleValue(str)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Object_uJAg8() {
        Object obj = "10.5";
        assertEquals(10.5, InfoSetUtil.doubleValue(obj), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfTypeNumber_mCuk0() {
        Number num = 10;
        assertEquals(10, InfoSetUtil.number(num));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfTypeString_ValidNumber_TnHz3() {
        String str = "10.5";
        assertEquals(10.5, InfoSetUtil.number(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_String_oKln0() {
        String result = InfoSetUtil.stringValue("Hello");
        assert "Hello".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Integer_amyW1() {
        Integer num = 10;
        String result = InfoSetUtil.stringValue(num);
        assert "10".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Double_ENlE2() {
        Double num = 10.5;
        String result = InfoSetUtil.stringValue(num);
        assert "10.5".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_BooleanTrue_hTwU3() {
        Boolean bool = true;
        String result = InfoSetUtil.stringValue(bool);
        assert "true".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_BooleanFalse_wLEN4() {
        Boolean bool = false;
        String result = InfoSetUtil.stringValue(bool);
        assert "false".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Null_VFMm5() {
        String result = InfoSetUtil.stringValue(null);
        assert "".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Object_bRMC8() {
        Object obj = new Object();
        String result = InfoSetUtil.stringValue(obj);
        assert obj.toString().equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_Dbwm0() {
        Number number = 1;
        assertTrue(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NegativeZero_DnZR1() {
        Number number = -0;
        assertFalse(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NaN_uSYT2() {
        Number number = Double.NaN;
        assertFalse(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Zero_mXRQ3() {
        Number number = 0;
        assertFalse(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_TrueBoolean_zHVS4() {
        Boolean bool = true;
        assertTrue(InfoSetUtil.booleanValue(bool));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_FalseBoolean_ujvX5() {
        Boolean bool = false;
        assertFalse(InfoSetUtil.booleanValue(bool));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_EmptyString_yTga7() {
        String str = "";
        assertFalse(InfoSetUtil.booleanValue(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NonEmptyString_gaux8() {
        String str = "Hello";
        assertTrue(InfoSetUtil.booleanValue(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NullNodePointer_vGRy9() {
        NodePointer pointer = null;
        assertFalse(InfoSetUtil.booleanValue(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NullObject_XWzY12() {
        Object obj = null;
        assertFalse(InfoSetUtil.booleanValue(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NonNullObject_LokL13() {
        Object obj = new Object();
        assertTrue(InfoSetUtil.booleanValue(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfTypeBoolean_True_jtQF1_fid1() {
        Boolean bool = true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfTypeBoolean_False_svWK2_fid1() {
        Boolean bool = false;
        assertEquals(0.0, InfoSetUtil.number(bool));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfTypeObject_DMyX7_fid1() {
        Object obj = "10.0";
        assertEquals(10.0, InfoSetUtil.number(obj));
    }
}