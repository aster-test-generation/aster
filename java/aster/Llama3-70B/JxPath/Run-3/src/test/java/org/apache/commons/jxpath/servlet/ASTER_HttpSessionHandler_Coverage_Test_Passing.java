/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.Enumeration;
import java.util.HashSet;
import javax.servlet.http.HttpSession;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Enumeration;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HttpSessionHandler_Coverage_Test_Passing {
private HttpSessionHandler handler;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_SessionNull_BEmC2() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        HttpSessionAndServletContext handle = mock(HttpSessionAndServletContext.class);
        when(handle.getSession()).thenReturn(null);
        handler.collectPropertyNames(set, handle);
        verify(handle).getSession();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_Enumeration_hjtt3() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        HttpSessionAndServletContext handle = mock(HttpSessionAndServletContext.class);
        HttpSession session = mock(HttpSession.class);
        Enumeration enumeration = mock(Enumeration.class);
        when(handle.getSession()).thenReturn(session);
        when(session.getAttributeNames()).thenReturn(enumeration);
        handler.collectPropertyNames(set, handle);
        verify(session).getAttributeNames();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_EnumerationHasMoreElements_CimE4() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        HttpSessionAndServletContext handle = mock(HttpSessionAndServletContext.class);
        HttpSession session = mock(HttpSession.class);
        Enumeration enumeration = mock(Enumeration.class);
        when(handle.getSession()).thenReturn(session);
        when(session.getAttributeNames()).thenReturn(enumeration);
        when(enumeration.hasMoreElements()).thenReturn(true);
        handler.collectPropertyNames(set, handle);
        verify(enumeration).hasMoreElements();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_EnumerationAddElement_fcci5() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        HttpSessionAndServletContext handle = mock(HttpSessionAndServletContext.class);
        HttpSession session = mock(HttpSession.class);
        Enumeration enumeration = mock(Enumeration.class);
        Object element = new Object();
        when(handle.getSession()).thenReturn(session);
        when(session.getAttributeNames()).thenReturn(enumeration);
        when(enumeration.hasMoreElements()).thenReturn(true).thenReturn(false);
        when(enumeration.nextElement()).thenReturn(element);
        handler.collectPropertyNames(set, handle);
        assertTrue(set.contains(element));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_EnumerationNoElements_Szpl6() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        HttpSessionAndServletContext handle = mock(HttpSessionAndServletContext.class);
        HttpSession session = mock(HttpSession.class);
        Enumeration enumeration = mock(Enumeration.class);
        when(handle.getSession()).thenReturn(session);
        when(session.getAttributeNames()).thenReturn(enumeration);
        when(enumeration.hasMoreElements()).thenReturn(false);
        handler.collectPropertyNames(set, handle);
        verify(enumeration).hasMoreElements();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_BmKZ0() {
        handler = new HttpSessionHandler();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void setAttribute(String name, Object value) {
            }
}