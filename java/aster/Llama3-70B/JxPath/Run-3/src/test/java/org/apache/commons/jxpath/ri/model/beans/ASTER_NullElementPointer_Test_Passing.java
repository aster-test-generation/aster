/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_qUaG0_LcRr0() {
        org.w3c.dom.Node node = null;
        java.util.Locale locale = null;
        DOMNodePointer parent = new DOMNodePointer(node, locale, "id");
        NullElementPointer nullElementPointer = new NullElementPointer(parent, 1);
        boolean result = nullElementPointer.isCollection();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_PWan0_TIuB0() {
        org.w3c.dom.Node node = null;
        java.util.Locale locale = null;
        DOMNodePointer parent = new DOMNodePointer(node, locale, "id");
        NullElementPointer nullElementPointer = new NullElementPointer(parent, 1);
        assertTrue(nullElementPointer.asPath() != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_CuFc4_RiPE0() {
        org.w3c.dom.Node node = null; // Import the correct Node class
        DOMNodePointer parent = new DOMNodePointer(node, new Locale("en"), "id");
        NullElementPointer nullElementPointer = new NullElementPointer(parent, 0);
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertFalse(nullElementPointer.equals(variablePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_xHkn0_voFy0() {
        org.w3c.dom.Node node = null;
        java.util.Locale locale = null;
        DOMNodePointer parent = new DOMNodePointer(node, locale, "id");
        NullElementPointer nullElementPointer = new NullElementPointer(parent, 1);
        String path = nullElementPointer.asPath();
        assertNotNull(path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_zCDT1_FPGF0() {
        org.w3c.dom.Node node = null; // Initialize node as null
        DOMNodePointer parent = new DOMNodePointer(node, new Locale("en"));
        NullElementPointer nullElementPointer = new NullElementPointer(parent, 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue_oRJU0() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.asPath()).thenReturn("path");
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer nullelementpointer2 = new NullElementPointer(parentPointer, 1);
        assertTrue(nullelementpointer.equals(nullelementpointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentIndex_ReturnsFalse_bJrx0_1() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointerWithDifferentIndex = new NullElementPointer(parentPointer, 2);
        assertNotEquals(nullelementpointer, otherPointerWithDifferentIndex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentIndex_ReturnsFalse_bJrx0_2() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointerWithDifferentIndex = new NullElementPointer(parentPointer, 2);
        assertFalse(nullelementpointer.equals(otherPointerWithDifferentIndex));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_JIDo0() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        when(parent.asPath()).thenReturn("parentPath");
        NullElementPointer nullelementpointer = new NullElementPointer(parent, 1);
        String result = nullelementpointer.asPath();
        assertEquals("parentPath/.[2]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_YUQn0() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        when(parent.asPath()).thenReturn("parentPath");
        NullElementPointer nullelementpointer = new NullElementPointer(parent, 0);
        String path = nullelementpointer.asPath();
        assertEquals("parentPath/.[1]", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentAndIndex_ReturnsTrue_cQtj0_1() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.getImmediateParentPointer()).thenReturn(null);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointer = new NullElementPointer(parentPointer, 1);
        assertEquals(nullelementpointer, nullelementpointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentAndIndex_ReturnsTrue_cQtj0_2() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.getImmediateParentPointer()).thenReturn(null);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointer = new NullElementPointer(parentPointer, 1);
        assertEquals(nullelementpointer, otherPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentAndIndex_ReturnsTrue_cQtj0_3() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.getImmediateParentPointer()).thenReturn(null);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointer = new NullElementPointer(parentPointer, 1);
        assertEquals(otherPointer, nullelementpointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentAndIndex_ReturnsTrue_cQtj0_4() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.getImmediateParentPointer()).thenReturn(null);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointer = new NullElementPointer(parentPointer, 1);
        assertTrue(nullelementpointer.equals(nullelementpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentAndIndex_ReturnsTrue_cQtj0_5() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.getImmediateParentPointer()).thenReturn(null);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointer = new NullElementPointer(parentPointer, 1);
        assertTrue(nullelementpointer.equals(otherPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentAndIndex_ReturnsTrue_cQtj0_6() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.getImmediateParentPointer()).thenReturn(null);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointer = new NullElementPointer(parentPointer, 1);
        assertTrue(otherPointer.equals(nullelementpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_huQa0_1() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        when(parent.asPath()).thenReturn("parentPath");
        NullElementPointer nullelementpointer = new NullElementPointer(parent, 0);
        String path = nullelementpointer.asPath();
        assertNotNull(path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent_ReturnsFalse_nlYi0_1() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointer = new NullElementPointer(parentPointer, 1);
        DOMNodePointer differentParent = mock(DOMNodePointer.class);
        NullElementPointer spyOtherPointer = spy(otherPointer);
        when(spyOtherPointer.getImmediateParentPointer()).thenReturn(differentParent);
        assertTrue(nullelementpointer.equals(otherPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent_ReturnsFalse_nlYi0_2() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        NullElementPointer otherPointer = new NullElementPointer(parentPointer, 1);
        DOMNodePointer differentParent = mock(DOMNodePointer.class);
        NullElementPointer spyOtherPointer = spy(otherPointer);
        when(spyOtherPointer.getImmediateParentPointer()).thenReturn(differentParent);
        assertFalse(nullelementpointer.equals(spyOtherPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_FpaQ0() throws Exception {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        DOMNodePointer parentPointer2 = mock(DOMNodePointer.class);
        when(parentPointer.asPath()).thenReturn("parentPath");
        when(parentPointer.getIndex()).thenReturn(1);
        when(parentPointer.getImmediateParentPointer()).thenReturn(parentPointer2);
        when(parentPointer2.getIndex()).thenReturn(2);
        NullElementPointer nullelementpointer = new NullElementPointer(parentPointer, 1);
        String result = nullelementpointer.asPath();
        assertEquals("parentPath/.[2]", result);
    }
}