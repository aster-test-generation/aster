/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPropertyPointer_Test_Passing {
    private static final Object UNINITIALIZED = "UNINITIALIZED";
    private Object value = UNINITIALIZED;
    private BeanPropertyPointer beanpropertypointer;
    private DOMNodePointer parent;
    private JXPathBasicBeanInfo beanInfo;
    private PropertyDescriptor pd;
    private Object bean;
    private String propertyName;
    private IndexedPropertyDescriptor indexedPd;
    @Mock
    private ValueUtils valueUtils;
    @Mock
    private PropertyDescriptor propertyDescriptor;
    @Mock
    private Object collection;
    private transient PropertyDescriptor[] propertyDescriptors;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        propertyDescriptors = new PropertyDescriptor[2];
        propertyDescriptors[0] = mock(PropertyDescriptor.class);
        propertyDescriptors[1] = mock(PropertyDescriptor.class);
        when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        when(propertyDescriptors[0].getName()).thenReturn("property1");
        when(propertyDescriptors[1].getName()).thenReturn("property2");
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        String[] propertyNames = beanpropertypointer.getPropertyNames();
        assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        propertyDescriptors = new PropertyDescriptor[2];
        propertyDescriptors[0] = mock(PropertyDescriptor.class);
        propertyDescriptors[1] = mock(PropertyDescriptor.class);
        when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        when(propertyDescriptors[0].getName()).thenReturn("property1");
        when(propertyDescriptors[1].getName()).thenReturn("property2");
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        String[] propertyNames = beanpropertypointer.getPropertyNames();
        assertEquals(2, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_3() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        propertyDescriptors = new PropertyDescriptor[2];
        propertyDescriptors[0] = mock(PropertyDescriptor.class);
        propertyDescriptors[1] = mock(PropertyDescriptor.class);
        when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        when(propertyDescriptors[0].getName()).thenReturn("property1");
        when(propertyDescriptors[1].getName()).thenReturn("property2");
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        String[] propertyNames = beanpropertypointer.getPropertyNames();
        assertEquals("property1", propertyNames[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_4() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        propertyDescriptors = new PropertyDescriptor[2];
        propertyDescriptors[0] = mock(PropertyDescriptor.class);
        propertyDescriptors[1] = mock(PropertyDescriptor.class);
        when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        when(propertyDescriptors[0].getName()).thenReturn("property1");
        when(propertyDescriptors[1].getName()).thenReturn("property2");
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        String[] propertyNames = beanpropertypointer.getPropertyNames();
        assertEquals("property2", propertyNames[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength2_EvAE1_asXj0() {
        org.w3c.dom.Node node = mock(org.w3c.dom.Node.class);
        Locale locale = new Locale("en", "US");
        DOMNodePointer parent = new DOMNodePointer(node, locale);
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPropertyPointer bpp = new BeanPropertyPointer(parent, beanInfo);
        assertEquals(false, bpp.isActualProperty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActualProperty_opIH0_1() throws Exception {
        DOMNodePointer domNodePointer = org.mockito.Mockito.mock(DOMNodePointer.class);
        JXPathBasicBeanInfo jXPathBasicBeanInfo = org.mockito.Mockito.mock(JXPathBasicBeanInfo.class);
        PropertyDescriptor propertyDescriptor = org.mockito.Mockito.mock(PropertyDescriptor.class);
        BeanPropertyPointer beanpropertypointer;
        beanpropertypointer = new BeanPropertyPointer(domNodePointer, jXPathBasicBeanInfo);
        Field propertyDescriptorField = BeanPropertyPointer.class.getDeclaredField("propertyDescriptor");
        propertyDescriptorField.setAccessible(true);
        propertyDescriptorField.set(beanpropertypointer, propertyDescriptor);
        propertyDescriptorField.set(beanpropertypointer, null);
        assertFalse(beanpropertypointer.isActualProperty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        propertyDescriptors = new PropertyDescriptor[2];
        propertyDescriptors[0] = mock(PropertyDescriptor.class);
        propertyDescriptors[1] = mock(PropertyDescriptor.class);
        when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        when(propertyDescriptors[0].getName()).thenReturn("property1");
        when(propertyDescriptors[1].getName()).thenReturn("property2");
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        String[] propertyNames = beanpropertypointer.getPropertyNames();
        assertNotNull(propertyNames);
        assertEquals(2, propertyNames.length);
        assertEquals("property1", propertyNames[0]);
        assertEquals("property2", propertyNames[1]);
    }
}