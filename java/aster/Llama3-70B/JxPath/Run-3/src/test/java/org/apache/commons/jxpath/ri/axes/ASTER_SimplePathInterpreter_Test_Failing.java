/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SimplePathInterpreter_Test_Failing {
    SimplePathInterpreter simplepathinterpreter;
    EvalContext evalContext;
    NodePointer nodePointer;
    Step[] steps;
    Step step;
    NodeNameTest nodeNameTest;
    QName qName;
    Expression[] predicates;
    SimplePathInterpreter simplePathInterpreter;
    EvalContext context;
    NodePointer root;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNullPointer_1() throws Exception {
        simplepathinterpreter = new SimplePathInterpreter();
        evalContext = Mockito.mock(EvalContext.class);
        nodePointer = Mockito.mock(NodePointer.class);
        steps = new Step[1];
        step = Mockito.mock(Step.class);
        steps[0] = step;
        nodeNameTest = Mockito.mock(NodeNameTest.class);
        qName = new QName("test");
        predicates = new Expression[0];
        Mockito.when(step.getAxis()).thenReturn(Compiler.AXIS_CHILD);
        Mockito.when(step.getNodeTest()).thenReturn(nodeNameTest);
        Mockito.when(nodeNameTest.getNodeName()).thenReturn(qName);
        NodePointer result = SimplePathInterpreter.createNullPointer(evalContext, nodePointer, steps, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNullPointer_2() throws Exception {
        simplepathinterpreter = new SimplePathInterpreter();
        evalContext = Mockito.mock(EvalContext.class);
        nodePointer = Mockito.mock(NodePointer.class);
        steps = new Step[1];
        step = Mockito.mock(Step.class);
        steps[0] = step;
        nodeNameTest = Mockito.mock(NodeNameTest.class);
        qName = new QName("test");
        predicates = new Expression[0];
        Mockito.when(step.getAxis()).thenReturn(Compiler.AXIS_CHILD);
        Mockito.when(step.getNodeTest()).thenReturn(nodeNameTest);
        Mockito.when(nodeNameTest.getNodeName()).thenReturn(qName);
        NodePointer result = SimplePathInterpreter.createNullPointer(evalContext, nodePointer, steps, 0);
        assertTrue(result instanceof NullPropertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNullPointer_3() throws Exception {
        simplepathinterpreter = new SimplePathInterpreter();
        evalContext = Mockito.mock(EvalContext.class);
        nodePointer = Mockito.mock(NodePointer.class);
        steps = new Step[1];
        step = Mockito.mock(Step.class);
        steps[0] = step;
        nodeNameTest = Mockito.mock(NodeNameTest.class);
        qName = new QName("test");
        predicates = new Expression[0];
        Mockito.when(step.getAxis()).thenReturn(Compiler.AXIS_CHILD);
        Mockito.when(step.getNodeTest()).thenReturn(nodeNameTest);
        Mockito.when(nodeNameTest.getNodeName()).thenReturn(qName);
        NodePointer result = SimplePathInterpreter.createNullPointer(evalContext, nodePointer, steps, 0);
        assertEquals(qName.toString(), ((NullPropertyPointer) result).getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNullPointer_4() throws Exception {
        simplepathinterpreter = new SimplePathInterpreter();
        evalContext = Mockito.mock(EvalContext.class);
        nodePointer = Mockito.mock(NodePointer.class);
        steps = new Step[1];
        step = Mockito.mock(Step.class);
        steps[0] = step;
        nodeNameTest = Mockito.mock(NodeNameTest.class);
        qName = new QName("test");
        predicates = new Expression[0];
        Mockito.when(step.getAxis()).thenReturn(Compiler.AXIS_CHILD);
        Mockito.when(step.getNodeTest()).thenReturn(nodeNameTest);
        Mockito.when(nodeNameTest.getNodeName()).thenReturn(qName);
        NodePointer result = SimplePathInterpreter.createNullPointer(evalContext, nodePointer, steps, 0);
        assertFalse(((NullPropertyPointer) result).isAttribute());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinterpretSimpleExpressionPath() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        // Given
        when(evalContext.setPosition(anyInt())).thenReturn(true);
        when(evalContext.getJXPathContext()).thenReturn(mock(JXPathContext.class));
        when(root.getValuePointer()).thenReturn(mock(NodePointer.class));
        // When
        NodePointer result = simplePathInterpreter.interpretSimpleExpressionPath(evalContext, root, predicates, steps);
        // Then
        assertNotNull(result);
        verify(evalContext, times(1)).setPosition(anyInt());
        verify(evalContext, times(1)).getJXPathContext();
        verify(root, times(1)).getValuePointer();
    }
}