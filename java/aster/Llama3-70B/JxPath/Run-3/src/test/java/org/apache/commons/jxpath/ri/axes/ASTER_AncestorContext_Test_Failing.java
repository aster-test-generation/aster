/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AncestorContext_Test_Failing {
    AncestorContext ancestorContext;
    NamespaceContext namespaceContext;
    NodeTypeTest nodeTypeTest;
    SelfContext selfContext;
    private boolean setStarted = false;
    @Mock
    private NamespaceContext parentContext;
    private NodePointer currentNodePointerMock;
    @Mock
    private NodePointer currentNodePointer;
    @Mock
    private NodeTest nodeTest;
    private boolean includeSelf = true;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_1() throws Exception {
        selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        nodeTypeTest = new NodeTypeTest(1);
        ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        // mock the getCurrentPosition method to return 5
        Mockito.when(ancestorContext.getCurrentPosition()).thenReturn(5);
        // test setPosition with a position less than the current position
        Mockito.verify(ancestorContext).reset();
        // test setPosition with a position greater than the current position
        Mockito.when(ancestorContext.nextNode()).thenReturn(true);
        // test setPosition with a position that cannot be reached
        Mockito.when(ancestorContext.nextNode()).thenReturn(false);
        assertTrue(ancestorContext.setPosition(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_2() throws Exception {
        selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        nodeTypeTest = new NodeTypeTest(1);
        ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        // mock the getCurrentPosition method to return 5
        Mockito.when(ancestorContext.getCurrentPosition()).thenReturn(5);
        // test setPosition with a position less than the current position
        Mockito.verify(ancestorContext).reset();
        // test setPosition with a position greater than the current position
        Mockito.when(ancestorContext.nextNode()).thenReturn(true);
        // test setPosition with a position that cannot be reached
        Mockito.when(ancestorContext.nextNode()).thenReturn(false);
        assertTrue(ancestorContext.setPosition(7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_3() throws Exception {
        selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        nodeTypeTest = new NodeTypeTest(1);
        ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        // mock the getCurrentPosition method to return 5
        Mockito.when(ancestorContext.getCurrentPosition()).thenReturn(5);
        // test setPosition with a position less than the current position
        Mockito.verify(ancestorContext).reset();
        // test setPosition with a position greater than the current position
        Mockito.when(ancestorContext.nextNode()).thenReturn(true);
        // test setPosition with a position that cannot be reached
        Mockito.when(ancestorContext.nextNode()).thenReturn(false);
        assertFalse(ancestorContext.setPosition(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset() throws Exception {
        parentContext = Mockito.mock(NamespaceContext.class);
        nodeTypeTest = Mockito.mock(NodeTypeTest.class);
        ancestorContext = new AncestorContext(parentContext, true, nodeTypeTest);
        setStarted = true;
        ancestorContext.reset();
        assertFalse(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_IncludeSelfTrue_ReturnTrue_NzyP0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedTrue_IncludeSelfTrue_ReturnTrue_PAZe1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        ancestorContext.nextNode();
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_IncludeSelfFalse_ReturnTrue_UcBt2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, false, nodeTypeTest);
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedTrue_IncludeSelfFalse_ReturnTrue_sppC3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, false, nodeTypeTest);
        ancestorContext.nextNode();
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_IncludeSelfTrue_ReturnFalse_VjIh4() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        assertFalse(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_IncludeSelfFalse_ReturnFalse_fXtZ5() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, false, nodeTypeTest);
        assertFalse(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_wxIZ0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        NodePointer nodePointer = ancestorContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode_Sdem0_1() throws Exception {
        currentNodePointer = mock(NodePointer.class);
        parentContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        nodeTest = mock(NodeTest.class);
        ancestorContext = new AncestorContext(parentContext, includeSelf, nodeTypeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(currentNodePointer).thenReturn(null);
        ancestorContext = new AncestorContext(parentContext, false, nodeTypeTest);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(false).thenReturn(true);
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode_Sdem0_2() throws Exception {
        currentNodePointer = mock(NodePointer.class);
        parentContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        nodeTest = mock(NodeTest.class);
        ancestorContext = new AncestorContext(parentContext, includeSelf, nodeTypeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(currentNodePointer).thenReturn(null);
        ancestorContext = new AncestorContext(parentContext, false, nodeTypeTest);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(false).thenReturn(true);
        assertEquals(1, ((AncestorContext) ancestorContext).getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedTrue_IncludeSelfTrue_ReturnTrue_PAZe1_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        ancestorContext.reset(); // Initialize the context
        assertNotNull(ancestorContext.nextNode()); // Check if nextNode returns a non-null value
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedTrue_IncludeSelfFalse_ReturnTrue_sppC3_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, false, nodeTypeTest);
        ancestorContext.reset(); // Initialize the context
        assertNotNull(ancestorContext.nextNode()); // Check if nextNode returns a non-null value
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_IncludeSelfTrue_ReturnFalse_VjIh4_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        ancestorContext.reset(); // Initialize the context
        assertNull(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_IncludeSelfFalse_ReturnFalse_fXtZ5_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, false, nodeTypeTest);
        ancestorContext.reset(); // Initialize the context
        assertNull(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        nodeTypeTest = new NodeTypeTest(1);
        ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        // mock the getCurrentPosition method to return 5
        Mockito.when(ancestorContext.getCurrentPosition()).thenReturn(5);
        // test setPosition with a position less than the current position
        assertTrue(ancestorContext.setPosition(3));
        Mockito.verify(ancestorContext).reset();
        // test setPosition with a position greater than the current position
        Mockito.when(ancestorContext.nextNode()).thenReturn(true);
        assertTrue(ancestorContext.setPosition(7));
        // test setPosition with a position that cannot be reached
        Mockito.when(ancestorContext.nextNode()).thenReturn(false);
        assertFalse(ancestorContext.setPosition(10));
    }
}