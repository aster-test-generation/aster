/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationUnion_Test_Passing {
    CoreOperationUnion coreoperationunion;
    EvalContext context;
    Expression[] args;
    EvalContext[] argCtxs;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_1() throws Exception {
        args = new Expression[]{mock(Expression.class), mock(Expression.class)};
        context = mock(EvalContext.class);
        coreoperationunion = new CoreOperationUnion(args);
        // given
        when(args[0].compute(context)).thenReturn("value1");
        when(args[1].compute(context)).thenReturn("value2");
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getConstantContext("value1")).thenReturn(mock(EvalContext.class));
        when(context.getRootContext().getConstantContext("value2")).thenReturn(mock(EvalContext.class));
        // when
        Object result = coreoperationunion.computeValue(context);
        // then
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_2() throws Exception {
        args = new Expression[]{mock(Expression.class), mock(Expression.class)};
        context = mock(EvalContext.class);
        coreoperationunion = new CoreOperationUnion(args);
        // given
        when(args[0].compute(context)).thenReturn("value1");
        when(args[1].compute(context)).thenReturn("value2");
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getConstantContext("value1")).thenReturn(mock(EvalContext.class));
        when(context.getRootContext().getConstantContext("value2")).thenReturn(mock(EvalContext.class));
        // when
        Object result = coreoperationunion.computeValue(context);
        // then
        assertTrue(result instanceof UnionContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_KZvt0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[]{});
        assertEquals("|", coreOperationUnion.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Nequ0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[]{});
        boolean result = coreOperationUnion.isSymmetric();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_Edex0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[]{});
        assertEquals(CoreOperationUnion.UNION_PRECEDENCE, coreOperationUnion.getPrecedence());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        args = new Expression[]{mock(Expression.class), mock(Expression.class)};
        context = mock(EvalContext.class);
        coreoperationunion = new CoreOperationUnion(args);
        // given
        when(args[0].compute(context)).thenReturn("value1");
        when(args[1].compute(context)).thenReturn("value2");
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getConstantContext("value1")).thenReturn(mock(EvalContext.class));
        when(context.getRootContext().getConstantContext("value2")).thenReturn(mock(EvalContext.class));
        // when
        Object result = coreoperationunion.computeValue(context);
        // then
        assertNotNull(result);
        assertTrue(result instanceof UnionContext);
    }
}