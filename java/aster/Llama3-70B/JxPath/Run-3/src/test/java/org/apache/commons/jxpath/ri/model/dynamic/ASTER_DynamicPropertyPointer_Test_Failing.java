/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPropertyPointer_Test_Failing {
    @Mock
    private DynamicPropertyHandler handler;
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Object bean;
    @Mock
    private Object property;
    private DynamicPropertyPointer dynamicpropertypointer;
    private String[] names;
    private String name;
    @Mock
    private JXPathContext context;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private Object value;
    private AbstractFactory factory;
    private String propertyName;
    @Mock
    private Object propertyValue;
    @Mock
    private Object baseValue;
    DOMNodePointer domNodePointer;
    private int propertyIndex = -1;
    DOMNodePointer parentPointer;
    private String requiredPropertyName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        parentPointer = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parentPointer, handler);
        when(parentPointer.asPath()).thenReturn("/parent");
        when(dynamicpropertypointer.getImmediateParentPointer()).thenReturn(parentPointer);
        when(dynamicpropertypointer.getPropertyName()).thenReturn("propertyName");
        when(dynamicpropertypointer.isCollection()).thenReturn(true);
        when(dynamicpropertypointer.getIndex()).thenReturn(1);
        String result = dynamicpropertypointer.asPath();
        assertEquals("/parent[@name='propertyName'][2]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        // given
        String[] allNames = {"name1", "name2", "name3"};
        when(handler.getPropertyNames(any())).thenReturn(allNames);
        requiredPropertyName = "requiredName";
        // when
        String[] result = dynamicpropertypointer.getPropertyNames();
        // then
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        // given
        String[] allNames = {"name1", "name2", "name3"};
        when(handler.getPropertyNames(any())).thenReturn(allNames);
        requiredPropertyName = "requiredName";
        // when
        String[] result = dynamicpropertypointer.getPropertyNames();
        // then
        assertEquals(allNames.length + 1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_3() throws Exception {
        parent = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        // given
        String[] allNames = {"name1", "name2", "name3"};
        when(handler.getPropertyNames(any())).thenReturn(allNames);
        requiredPropertyName = "requiredName";
        // when
        String[] result = dynamicpropertypointer.getPropertyNames();
        // then
        assertTrue(Arrays.asList(result).contains(requiredPropertyName));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_4() throws Exception {
        parent = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        // given
        String[] allNames = {"name1", "name2", "name3"};
        when(handler.getPropertyNames(any())).thenReturn(allNames);
        requiredPropertyName = "requiredName";
        // when
        String[] result = dynamicpropertypointer.getPropertyNames();
        // then
        assertTrue(Arrays.asList(result).containsAll(Arrays.asList(allNames)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        String[] propertyNames = {"prop1", "prop2", "prop3"};
        when(dynamicpropertypointer.getPropertyNames()).thenReturn(propertyNames);
        int count = dynamicpropertypointer.getPropertyCount();
        assertEquals(3, count);
        verify(dynamicpropertypointer).getPropertyNames();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName_FjGU0() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        String[] names = new String[]{"name1", "name2", "name3"};
        Field privateField = DynamicPropertyPointer.class.getDeclaredField("names");
        privateField.setAccessible(true);
        privateField.set(dynamicpropertypointer, names);
        privateField.setAccessible(true);
        privateField.setInt(dynamicpropertypointer, 1);
        assertEquals("name2", dynamicpropertypointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName_OutOfIndex_mtLB0() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        String[] names = new String[]{"name1", "name2", "name3"};
        Field field = DynamicPropertyPointer.class.getDeclaredField("names");
        field.setAccessible(true);
        field.set(dynamicpropertypointer, names);
        field.setAccessible(true);
        field.set(dynamicpropertypointer, 3);
        assertEquals("/.[@name='*']", dynamicpropertypointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName_FjGU0_fid3() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        String[] names = new String[]{"name1", "name2", "name3"};
        Field privateField = DynamicPropertyPointer.class.getDeclaredField("names");
        privateField.setAccessible(true);
        privateField.set(dynamicpropertypointer, names);
        privateField = DynamicPropertyPointer.class.getDeclaredField("index");
        privateField.setAccessible(true);
        privateField.setInt(dynamicpropertypointer, 1);
        assertEquals("name2", dynamicpropertypointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName_OutOfIndex_mtLB0_fid3() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        String[] names = new String[]{"name1", "name2", "name3"};
        Field field = DynamicPropertyPointer.class.getDeclaredField("names");
        field.setAccessible(true);
        field.set(dynamicpropertypointer, names);
        field = DynamicPropertyPointer.class.getDeclaredField("index");
        field.setAccessible(true);
        field.set(dynamicpropertypointer, 3);
        assertEquals("/.[@name='*']", dynamicpropertypointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName_NegativeIndex_mIHB0() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        String[] names = new String[]{"name1", "name2", "name3"};
        Field namesField = DynamicPropertyPointer.class.getDeclaredField("names");
        namesField.setAccessible(true);
        namesField.set(dynamicpropertypointer, names);
        Field propertyIndexField = DynamicPropertyPointer.class.getDeclaredField("index");
        propertyIndexField.setAccessible(true);
        propertyIndexField.setInt(dynamicpropertypointer, -1);
        assertEquals("*", dynamicpropertypointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyIndex_pEQV0_1_fid3() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        Field propertyIndexField = DynamicPropertyPointer.class.getDeclaredField("index");
        propertyIndexField.setAccessible(true);
        int newIndex = 10;
        dynamicpropertypointer.setPropertyIndex(newIndex);
        assertEquals(newIndex, propertyIndexField.getInt(dynamicpropertypointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyIndex_pEQV0_2_fid3() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        Field propertyIndexField = DynamicPropertyPointer.class.getDeclaredField("index");
        propertyIndexField.setAccessible(true);
        int newIndex = 10;
        dynamicpropertypointer.setPropertyIndex(newIndex);
        assertNull(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ecuX0_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        String requiredPropertyName = "name";
        String[] allNames = {"name1", "name2", "name3"};
        when(handler.getPropertyNames(any())).thenReturn(allNames);
        String[] result = dynamicpropertypointer.getPropertyNames();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ecuX0_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        String requiredPropertyName = "name";
        String[] allNames = {"name1", "name2", "name3"};
        when(handler.getPropertyNames(any())).thenReturn(allNames);
        String[] result = dynamicpropertypointer.getPropertyNames();
        assertEquals(allNames.length + 1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ecuX0_3() throws Exception {
        parent = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        String requiredPropertyName = "name";
        String[] allNames = {"name1", "name2", "name3"};
        when(handler.getPropertyNames(any())).thenReturn(allNames);
        String[] result = dynamicpropertypointer.getPropertyNames();
        assertTrue(Arrays.asList(result).contains("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ecuX0_4() throws Exception {
        parent = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        String requiredPropertyName = "name";
        String[] allNames = {"name1", "name2", "name3"};
        when(handler.getPropertyNames(any())).thenReturn(allNames);
        String[] result = dynamicpropertypointer.getPropertyNames();
        assertTrue(Arrays.asList(result).containsAll(Arrays.asList(allNames)));
    }
}