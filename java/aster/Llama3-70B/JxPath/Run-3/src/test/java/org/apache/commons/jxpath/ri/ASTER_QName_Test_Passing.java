/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QName_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_vXhe0() {
        QName qName = new QName("prefix", "localName");
        assertTrue(qName.equals(qName));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_kocE1() {
        Object obj = new Object();
        QName qName = new QName("prefix", "localName");
        assertFalse(qName.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentQualifiedName_qwBy2() {
        QName qName1 = new QName("prefix1", "localName1");
        QName qName2 = new QName("prefix2", "localName2");
        assertFalse(qName1.equals(qName2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_qualifiedName_ZiKJ0() {
        QName qName = new QName("qualifiedName");
        assertEquals("qualifiedName", qName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_prefix_localName_jUPE1() {
        QName qName = new QName("prefix", "localName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_qualifiedName_RDsX0() {
        QName qName = new QName("qualifiedName");
        assertNull(qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_prefix_localName_gtSH1() {
        QName qName = new QName("prefix", "localName");
        assertEquals("prefix", qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_qualifiedName_gMRD0() {
        QName qName = new QName("qualifiedName");
        assertEquals("qualifiedName", qName.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_prefix_localName_rsQo1() {
        QName qName = new QName("prefix", "localName");
        assertEquals("prefix:localName", qName.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_1_iZwl0() {
        QName qName = new QName("qualifiedName");
        int result = qName.hashCode();
        assertEquals("qualifiedName".hashCode(), result);
    }
}