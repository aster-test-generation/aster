/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Comment;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Failing {
private Object value;
private JXPathContext context;
    private Node node;
    private DOMNodePointer domNodePointer;
    private Element element;
    private NodeList nodeList;
    private Comment comment;
    private QName name;
    private int index;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ElementNode_MuJj1() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, null);
        QName name = domNodePointer.getName();
        assertNotNull(name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_CommentNode_BQPZ1() throws Exception {
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(((Comment) node).getData()).thenReturn("   text   ");
        Object result = domNodePointer.getValue();
        assertEquals("text", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_AttributeNode_NotEqual_iVEZ1() {
        DOMNodePointer pointer = new DOMNodePointer(mock(Node.class), mock(Locale.class));
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        when(pointer1.getBaseValue()).thenReturn(node1);
        when(pointer2.getBaseValue()).thenReturn(node2);
        when(node1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        assertEquals(-1, pointer.compareChildNodePointers(pointer1, pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_LocalName_dNBg6_nKex0_fid1() throws Exception {
    Node nodeMock = mock(Node.class);
    when(((org.w3c.dom.Node) nodeMock).getLocalName()).thenReturn("localName");
    DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, Locale.getDefault());
    assertEquals("/localName[1]", domNodePointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_ParentInstanceOfDOMNodePointer_OJnY3_TQrb0_fid1() throws Exception {
    Node nodeMock = mock(Node.class);
    DOMNodePointer parent = mock(DOMNodePointer.class);
    when(nodeMock.getParentNode()).thenReturn(nodeMock);
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, nodeMock);
    when(parent.asPath()).thenReturn("parentPath");
    assertEquals("parentPath/", domNodePointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_NamespaceURINull_tEYo7_FPZP0_fid1() throws Exception {
    Node nodeMock = mock(Node.class);
    when(nodeMock.getNamespaceURI()).thenReturn(null);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, locale);
    NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
    assertEquals("/localName[1]", domNodePointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_ElementNode_ParentNull_ExSI15_TzSz0_fid1() throws Exception {
    Node nodeMock = mock(Node.class);
    when(nodeMock.getParentNode()).thenReturn((Node)null);
    DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, Locale.getDefault());
    assertEquals("/localName[1]", domNodePointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_PrefixNotNull_ZyyT8_lxRe0_fid1() throws Exception {
    Node nodeMock = mock(Node.class);
    NamespaceResolver namespaceResolverMock = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, Locale.getDefault());
    domNodePointer.setNamespaceResolver(namespaceResolverMock);
    when(nodeMock.getNamespaceURI()).thenReturn("nsURI");
    when(namespaceResolverMock.getPrefix((String) any())).thenReturn("prefix");
    when(namespaceResolverMock.getPrefix("nsURI")).thenReturn("prefix");
    when(nodeMock.getLocalName()).thenReturn("localName");
    assertEquals("/prefix:localName[1]", domNodePointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_PrefixNull_sGFl9_PSsc0_fid1() throws Exception {
    Node nodeMock = mock(Node.class);
    NamespaceResolver namespaceResolverMock = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, Locale.getDefault());
    when(nodeMock.getNamespaceURI()).thenReturn("nsURI");
    when(namespaceResolverMock.getPrefix((String) any())).thenReturn(null);
    domNodePointer.setNamespaceResolver(namespaceResolverMock);
    assertEquals("/node()[1]", domNodePointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_IrMF0_GBDg0() throws Exception {
    Node nodeMock = mock(Node.class);
    java.util.Locale localeMock = mock(java.util.Locale.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, localeMock);
    domNodePointer.getNamespaceResolver(); // Initialize localNamespaceResolver
    NamespaceResolver namespaceResolverMock = mock(NamespaceResolver.class);
    when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolverMock);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_rkmN1() {
        NodePointer ptr = domNodePointer.createChild(context, name, index, value);
        assertNotNull(ptr);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_uDCb2() {
        NodePointer ptr = domNodePointer.createChild(context, name, index);
        ptr.setValue(value);
        assertEquals(value, ptr.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReturnValue_Dujd3() {
        NodePointer ptr = domNodePointer.createChild(context, name, index, value);
        NodePointer returnedPtr = domNodePointer.createChild(context, name, index, value);
        assertSame(ptr, returnedPtr);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_WholeCollection_mRia1() {
        int index = DOMNodePointer.WHOLE_COLLECTION;
        NodePointer result = domNodePointer.createChild(context, name, index);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_IndexZero_GSrE2() {
        int index = 0;
        NodePointer result = domNodePointer.createChild(context, name, index);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_NameToString_TwAI5() {
        int index = 1;
        NodePointer result = domNodePointer.createChild(context, name, index);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_PrefixNull_hcUU6() {
        name = new QName("localName");
        int index = 1;
        NodePointer result = domNodePointer.createChild(context, name, index);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_NamespaceURINull_FptJ7() {
        int index = 1;
        context.getNamespaceURI("prefix");
        NodePointer result = domNodePointer.createChild(context, name, index);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_ChildIteratorNull_rIIB9() {
        int index = 1;
        domNodePointer.childIterator(null, false, null);
        NodePointer result = domNodePointer.createChild(context, name, index);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_SetPositionTrue_vvYa10() {
        int index = 1;
        NodeIterator it = domNodePointer.childIterator(null, false, null);
        it.setPosition(index + 1);
        NodePointer result = domNodePointer.createChild(context, name, index);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_SetPositionFalse_WEUm11() {
        int index = 1;
        NodeIterator it = domNodePointer.childIterator(null, false, null);
        it.setPosition(index);
        try {
            domNodePointer.createChild(context, name, index);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_ThrowJXPathAbstractFactoryException_FCTZ13() {
        int index = 1;
        try {
            domNodePointer.createChild(context, name, index);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_AsPath_FBAS14() {
        int index = 1;
        try {
            domNodePointer.createChild(context, name, index);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
            assertEquals("Factory could not create a child node for path: " + domNodePointer.asPath() + "/" + name + "[" + (index + 1) + "]", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_PrefixNotNull_dDXS4() {
        QName name = new QName("prefix", "localName");
        domNodePointer.createAttribute(context, name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_PrefixNull_dept5() {
        QName name = new QName(null, "localName");
        domNodePointer.createAttribute(context, name);
}
}