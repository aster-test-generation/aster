/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Passing {
    private static JXPathContextFactory factory;
    JXPathServletContexts jxpathservletcontexts;
    ServletContext servletcontext;
    JXPathContext jxpathcontext;
    HttpSession httpsession;
    JXPathContext parentContext;
    HttpSessionAndServletContext handle;
    PageContext pagecontext;
    JXPathContext jxpathContext;
    ServletRequest servletrequest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPageContext_pgFx0() throws Exception {
        httpsession = mock(HttpSession.class);
        pagecontext = mock(PageContext.class);
        servletcontext = mock(ServletContext.class);
        factory = mock(JXPathContextFactory.class);
        parentContext = mock(JXPathContext.class);
        jxpathContext = mock(JXPathContext.class);
        jxpathservletcontexts = new JXPathServletContexts();
        when(pagecontext.getServletContext()).thenReturn(servletcontext);
        when(pagecontext.getRequest()).thenReturn(mock(HttpServletRequest.class));
        when(servletcontext.getAttribute("jxpath.factory")).thenReturn(factory);
        when(JXPathServletContexts.getRequestContext(mock(HttpServletRequest.class), servletcontext)).thenReturn(parentContext);
        when(factory.newContext(parentContext, pagecontext)).thenReturn(jxpathContext);
        JXPathContext result = JXPathServletContexts.getPageContext(pagecontext);
        assertEquals(jxpathContext, result);
        verify(pagecontext).setAttribute(Constants.JXPATH_CONTEXT, jxpathContext);
    }
}