/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathBasicBeanInfo_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_with_atomic_true_NZCo0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        assertTrue(jXPathBasicBeanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_with_atomic_default_FAQu1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        assertFalse(jXPathBasicBeanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_with_dynamicPropertyHandlerClass_VBgv2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        assertFalse(jXPathBasicBeanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass1_BSFw0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        assertNull(jXPathBasicBeanInfo.getDynamicPropertyHandlerClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass2_DwGz1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        assertNull(jXPathBasicBeanInfo.getDynamicPropertyHandlerClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass3_QIrx2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        assertEquals(String.class, jXPathBasicBeanInfo.getDynamicPropertyHandlerClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamic_true_hDjT0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        assertTrue(jXPathBasicBeanInfo.isDynamic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamic_false_xSXg1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        assertFalse(jXPathBasicBeanInfo.isDynamic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringAtomic_KVLd0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        String result = beanInfo.toString();
        assert result.contains("atomic");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringDefault_KznH2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        String result = beanInfo.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringDynamicPropertyHandler_KfAn3() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, Object.class);
        String result = beanInfo.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors1_iilF0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors2_HXLM1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors3_EGTC2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors4_IObE3() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors5_XbhR4() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor2_CghN1_fid1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        PropertyDescriptor propertyDescriptor = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        assertNull(propertyDescriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_Lrks2_fid1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        PropertyDescriptor propertyDescriptor = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        assertNull(propertyDescriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringDynamic_OBFc1_fid1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, false);
        String result = beanInfo.toString();
        assert !result.contains("dynamic");
    }
}