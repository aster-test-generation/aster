/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationDivide_Test_Failing {
    CoreOperationDivide coreoperationdivide;
    EvalContext context;
    Constant arg1;
    Constant arg2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        arg1 = new Constant(10);
        arg2 = new Constant(2);
        coreoperationdivide = new CoreOperationDivide(arg1, arg2);
        context = Mockito.mock(EvalContext.class);
        Mockito.when(arg1.computeValue(context)).thenReturn(10.0);
        Mockito.when(arg2.computeValue(context)).thenReturn(2.0);
        Object result = coreoperationdivide.computeValue(context);
        assertEquals(5.0, ((Double) result).doubleValue(), 0.0);
    }
}