/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Failing {
    private QName name;
    private NullPointer nullpointer;
    private NullPointer otherNullPointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private JXPathContext context;
    @Mock
    private Object value;
    private Pointer pointer;
    PropertyPointer propertyPointer;
    private String id = "testId";
    Locale locale;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_fxdo0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NodePointer result = nullPointer.createChild(context, name, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_1_APKv0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer parent = new VariablePointer(variables, new QName("prefix", "localName"));
        NullPointer nullPointer = new NullPointer(parent, new QName("qualifiedName"));
        assertEquals(0, nullPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_npFq0() {
        Locale locale = new Locale("en", "US");
        String id = "testId";
        NullPointer nullPointer = new NullPointer(locale, id);
        QName name = new QName("qualifiedName");
        assertEquals(name, nullPointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withoutId() throws Exception {
        parent = mock(DOMNodePointer.class);
        nullpointer = new NullPointer(mock(Locale.class), id);
        nullpointer = new NullPointer(parent, mock(QName.class));
        when(parent.asPath()).thenReturn("parentPath");
        assertEquals("parentPath", nullpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_Znqq0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        int index = 0;
        Object value = new Object();
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NodePointer result = nullPointer.createChild(context, name, index, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_fxdo0_fid1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NodePointer result = nullPointer.createChild(context, name, 0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withoutId_fid1() throws Exception {
        parent = mock(DOMNodePointer.class);
        nullpointer = new NullPointer(mock(Locale.class), id);
        nullpointer = new NullPointer(parent, mock(QName.class));
        when(parent.asPath()).thenReturn("parentPath/Mock for QName, hashCode: 1266550938");
        assertEquals("parentPath/Mock for QName, hashCode: 1266550938", nullpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_Znqq0_fid1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        int index = 0;
        Object value = new Object();
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NodePointer result = nullPointer.createChild(context, name, index, value);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_cbiS0() throws Exception {
        QName name = mock(QName.class);
        NullPointer nullpointer = new NullPointer(Locale.US, "id");
        when(name.toString()).thenReturn("id(id)");
        String result = nullpointer.toString();
        assertEquals("id(id)", result);
        verify(name, times(0)).toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild_P_gqpi0() throws Exception {
        name = new QName("prefix", "localName");
        context = Mockito.mock(JXPathContext.class);
        pointer = Mockito.mock(DOMNodePointer.class);
        nullpointer = new NullPointer(name, Locale.US);
        Mockito.when(context.createPath(Mockito.anyString())).thenReturn(pointer);
        NodePointer result = nullpointer.createChild(context, name, 0, "value");
        Mockito.verify(context).createPath(Mockito.anyString());
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withParent_HCRp1_hDXH0() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NullPointer nullPointer = new NullPointer(domNodePointer, new QName("name"));
        assertNull(nullPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_cbiS0_fid3() throws Exception {
        QName name = mock(QName.class);
        NullPointer nullpointer = new NullPointer(Locale.US, "id");
        when(name.toString()).thenReturn("mockedName");
        String result = nullpointer.toString();
        assertEquals("mockedName", result);
        verify(name, times(0)).toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild_P_gqpi0_fid3() throws Exception {
        name = new QName("prefix", "localName");
        context = Mockito.mock(JXPathContext.class);
        pointer = Mockito.mock(DOMNodePointer.class);
        nullpointer = new NullPointer(name, Locale.US);
        Mockito.when(context.createPath(Mockito.anyString())).thenReturn(pointer);
        NodePointer result = nullpointer.createChild(context, name, 0, "value");
        Mockito.verify(context).createPath(Mockito.anyString());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withParent_HCRp1_hDXH0_fid3() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NullPointer nullPointer = new NullPointer(domNodePointer, new QName("name"));
        assertEquals("null()", nullPointer.asPath());
    }
}