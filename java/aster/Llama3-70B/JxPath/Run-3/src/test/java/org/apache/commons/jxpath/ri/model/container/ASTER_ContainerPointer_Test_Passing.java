/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.xml.DocumentContainer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointer_Test_Passing {
    @Mock
    private NodePointer pointer1;
    @Mock
    private NodePointer pointer2;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private DocumentContainer container;
    private ContainerPointer containerpointer;
    private ContainerPointer otherContainerPointer;
    @Mock
    private NodeTest nodeTest;
    private ContainerPointer containerPointer;
    @Mock
    private Object immediateNode;
    @Mock
    private QName name;
    @Mock
    private Object baseValue;
    @Mock
    private ValueUtils valueUtils;
    private DocumentContainer documentContainer;
    private Locale locale;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodePointer namespacePointerResult;
    @Mock
    private NodeTest test;
    private DOMNodePointer domNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        containerpointer = new ContainerPointer(parent, container);
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(2);
        int result = containerpointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DocumentContainer container = mock(DocumentContainer.class);
        containerpointer = new ContainerPointer(parent, container);
        assertTrue(containerpointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        parent = mock(DOMNodePointer.class);
        containerpointer = new ContainerPointer(parent, mock(DocumentContainer.class));
        when(parent.asPath()).thenReturn("/some/path");
        assertEquals("/some/path", containerpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withNullParent() throws Exception {
        parent = mock(DOMNodePointer.class);
        containerpointer = new ContainerPointer(parent, mock(DocumentContainer.class));
        containerpointer = new ContainerPointer(null, mock(DocumentContainer.class));
        assertEquals("/", containerpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_OHhN0() throws Exception {
        ContainerPointer containerPointer = Mockito.mock(ContainerPointer.class);
        NodeIterator nodeIterator = Mockito.mock(NodeIterator.class);
        when(containerPointer.namespaceIterator()).thenReturn(nodeIterator);
        NodeIterator result = containerPointer.namespaceIterator();
        assertEquals(nodeIterator, result);
        verify(containerPointer, times(1)).namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_hupu0_1() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        ContainerPointer containerPointer;
        DocumentContainer container = mock(DocumentContainer.class);
        DOMNodePointer valuePointer = mock(DOMNodePointer.class);
        when(parent.getValuePointer()).thenReturn(valuePointer);
        containerPointer = new ContainerPointer(parent, container);
        when(valuePointer.namespaceIterator()).thenReturn(mock(NodeIterator.class));
        when(containerPointer.getValuePointer()).thenReturn(valuePointer);
        when(valuePointer.isLeaf()).thenReturn(true);
        when(valuePointer.isLeaf()).thenReturn(false);
        assertTrue(containerPointer.isLeaf());
    }
}