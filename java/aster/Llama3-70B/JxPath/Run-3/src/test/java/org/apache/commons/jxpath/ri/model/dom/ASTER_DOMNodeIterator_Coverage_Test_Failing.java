/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Node;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodeIterator_Coverage_Test_Failing {
    private int position = 0;
    DOMNodeIterator domNodeIterator;
    Node node;
    NodePointer nodePointer;
    NodeTypeTest nodeTypeTest;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNodePointer_PositionZero_ReturnsTrue_VQFn0() throws Exception {
    DOMNodeIterator domNodeIterator = new DOMNodeIterator(new DOMNodePointer(null, null, null), new NodeTypeTest(0), false, null);
    domNodeIterator.setPosition(0);
    NodePointer result = domNodeIterator.getNodePointer();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPosition_EqualPosition_ReturnsTrue_IWct5_gGDJ0_2() throws Exception {
    DOMNodeIterator domNodeIterator = new DOMNodeIterator(new DOMNodePointer(null, null, null), new NodeTypeTest(0), false, null);
    domNodeIterator.setPosition(5);
    NodePointer nodePointer = domNodeIterator.getNodePointer();
    assertTrue(domNodeIterator.setPosition(5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPosition_GreaterThanPosition_PreviousCalled_HKzd3_JHKa0_1() throws Exception {
    when(node.getPreviousSibling()).thenReturn(node);
    when(nodePointer.getNode()).thenReturn(node);
    domNodeIterator.setPosition(5);
    boolean result = domNodeIterator.setPosition(0);
    assertEquals(0, domNodeIterator.getPosition());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPosition_GreaterThanPosition_PreviousCalled_HKzd3_JHKa0_2() throws Exception {
    when(node.getPreviousSibling()).thenReturn(node);
    when(nodePointer.getNode()).thenReturn(node);
    domNodeIterator.setPosition(5);
    boolean result = domNodeIterator.setPosition(0);
    assertTrue(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPosition_GreaterThanPosition_PreviousCalled_HKzd3_JHKa0_3() throws Exception {
    when(node.getPreviousSibling()).thenReturn(node);
    when(nodePointer.getNode()).thenReturn(node);
    domNodeIterator.setPosition(5);
    boolean result = domNodeIterator.setPosition(0);
    assertEquals(5, domNodeIterator.getPosition() - 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPosition_GreaterThanPosition_PreviousReturnsFalse_kHrX4_PUgX0_2() throws Exception {
    when(node.getPreviousSibling()).thenReturn(node);
    when(nodePointer.getNode()).thenReturn(node);
    domNodeIterator.setPosition(5);
    boolean result = domNodeIterator.setPosition(0);
    assertFalse(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPosition_GreaterThanPosition_PreviousReturnsFalse_kHrX4_PUgX0_3() throws Exception {
    when(node.getPreviousSibling()).thenReturn(node);
    when(nodePointer.getNode()).thenReturn(node);
    domNodeIterator.setPosition(5);
    boolean result = domNodeIterator.setPosition(0);
    assertEquals(1, domNodeIterator.getPosition());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNodePointer_PositionZero_ReturnsTrue_VQFn0_fid2() throws Exception {
    DOMNodeIterator domNodeIterator = new DOMNodeIterator(new DOMNodePointer(null, null, null), new NodeTypeTest(0), false, null);
    domNodeIterator.setPosition(0);
    NodePointer result = domNodeIterator.getNodePointer();
    assertNotNull(result);
}
}