/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.util.ArrayList;
import java.util.Collection;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicTypeConverter_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicIntegerWithNull_KdNF6() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicInteger.class;
        double value = 0;
        Number result = converter.allocateNumber(type, value);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLongWithNull_xKDZ7() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = java.util.concurrent.atomic.AtomicLong.class;
        double value = 0;
        Number result = converter.allocateNumber(type, value);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_Collection_allocateCollection_xwLK9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("1");
        collection.add("2");
        Collection<?> allocatedCollection = converter.allocateCollection(String.class);
        Object result = converter.convert(collection, allocatedCollection.getClass());
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert_Collection_addAll_thnL10_QmpY0_fid2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<String> collection = new ArrayList<>();
    collection.add("1");
    collection.add("2");
    Collection<String> allocatedCollection = new ArrayList<String>();
    allocatedCollection.addAll(collection);
    Object result = converter.convertStringToPrimitive(collection.iterator().next(), String.class);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertPointer_wOiD20_AiYK0_fid2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object pointer = "hello";
    assertTrue(converter.convertStringToPrimitive(pointer, String.class) != null);
}
}