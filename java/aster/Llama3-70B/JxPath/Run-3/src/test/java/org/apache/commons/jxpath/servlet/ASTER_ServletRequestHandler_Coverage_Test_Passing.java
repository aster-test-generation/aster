/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.HashSet;
import javax.servlet.ServletRequest;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServletRequestHandler_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_WhenRequestIsNull_ThenNullPointerExceptionIsThrown_fgtM1() {
        ServletRequestHandler servletRequestHandler = new ServletRequestHandler();
        try {
            servletRequestHandler.setProperty(null, "property", "value");
            assert false; // This line should not be reached
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenBeanIsNull_ThrowsNullPointerException_mIec0() {
        ServletRequestHandler handler = new ServletRequestHandler();
        try {
            handler.getProperty(null, "property");
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenPropertyIsNull_ThrowsNullPointerException_xnOK1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        try {
            handler.getProperty(handle, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenBeanIsNotServletRequestAndContext_ClassCastException_nspm2() {
        ServletRequestHandler handler = new ServletRequestHandler();
        Object bean = new Object();
        try {
            handler.getProperty(bean, "property");
            fail("Expected ClassCastException");
        } catch (ClassCastException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenParameterValuesIsNull_ReturnsNull_pvyS4() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(handle.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("property")).thenReturn(null);
        assertNull(handler.getProperty(handle, "property"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenParameterValuesIsEmpty_ReturnsNull_ZllM5() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(handle.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("property")).thenReturn(new String[0]);
        assertNull(handler.getProperty(handle, "property"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenParameterValuesHasOneElement_ReturnsSingleElement_hKnV6() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(handle.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("property")).thenReturn(new String[]{"value"});
        assertEquals("value", handler.getProperty(handle, "property"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenParameterValuesHasMultipleElements_ReturnsArray_glch7() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(handle.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("property")).thenReturn(new String[]{"value1", "value2"});
        assertArrayEquals(new String[]{"value1", "value2"}, (String[]) handler.getProperty(handle, "property"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenAttributeIsNull_ReturnsNull_Pvng8() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(handle.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("property")).thenReturn(null);
        when(servletRequest.getAttribute("property")).thenReturn(null);
        assertNull(handler.getProperty(handle, "property"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenAttributeIsNotNull_ReturnsAttribute_tylK9() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(handle.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("property")).thenReturn(null);
        when(servletRequest.getAttribute("property")).thenReturn("attribute");
        assertEquals("attribute", handler.getProperty(handle, "property"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_WhenSuperGetPropertyIsCalled_ReturnsSuperGetProperty_UVHS10() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(handle.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("property")).thenReturn(null);
        when(servletRequest.getAttribute("property")).thenReturn(null);
        Object superProperty = new Object();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_EmptyParameterNames_BHoE8() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet set = new HashSet();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
}
}