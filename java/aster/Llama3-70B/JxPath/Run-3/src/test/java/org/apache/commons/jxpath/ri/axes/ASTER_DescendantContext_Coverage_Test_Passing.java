/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import java.util.Stack;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Stack;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DescendantContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testnextNode_whileStackIsEmpty_PHna6_TBQY0() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    DescendantContext descendantcontext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
    descendantcontext.isChildOrderingRequired(); 
    assertFalse(descendantcontext.nextNode()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testnextNode_ifCurrentNodePointerIsNull_uANR1_MgXk0() throws Exception {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTypeTest);
    when(parentContext.getCurrentNodePointer()).thenReturn(null);
    assertFalse(descendantContext.isChildOrderingRequired()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_gFff0_nzOX0() throws Exception {
    int compilerNodeTypeNode = 0; 
    NodeTypeTest nodeTypeTest = new NodeTypeTest(compilerNodeTypeNode);
    NodeTypeTest parentNodeTypeTest = new NodeTypeTest(compilerNodeTypeNode);
    SelfContext selfContext = new SelfContext(null, parentNodeTypeTest);
    NamespaceContext parentContext = new NamespaceContext(selfContext, parentNodeTypeTest);
    DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTypeTest);
    boolean result = descendantContext.isChildOrderingRequired();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_PositionZero_SetPositionReturnsFalse_gQsY0_xvYE0() {
    NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
    DescendantContext descendantContext = new DescendantContext(parentContext, true, new NodeTypeTest(1));
    DescendantContext mockDescendantContext = org.mockito.Mockito.mock(DescendantContext.class);
    org.mockito.Mockito.when(mockDescendantContext.isChildOrderingRequired()).thenReturn(true);
    org.mockito.Mockito.when(mockDescendantContext.setPosition(0)).thenReturn(false);
    NodePointer result = descendantContext.getCurrentNodePointer();
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testnextNode_whileStackIsNotEmpty_Ckph7_SAvx0_1() throws Exception {
    Stack<NodeIterator> stack = new Stack<>();
    stack.push(mock(NodeIterator.class));
    DescendantContext descendantcontext = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), true, new NodeTypeTest(0));
    descendantcontext = spy(descendantcontext);
    when(descendantcontext.isChildOrderingRequired()).thenReturn(true);
    when(descendantcontext.nextNode()).thenReturn(true);
    assertTrue(descendantcontext.isChildOrderingRequired());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testnextNode_whileStackIsNotEmpty_Ckph7_SAvx0_2() throws Exception {
    Stack<NodeIterator> stack = new Stack<>();
    stack.push(mock(NodeIterator.class));
    DescendantContext descendantcontext = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), true, new NodeTypeTest(0));
    descendantcontext = spy(descendantcontext);
    when(descendantcontext.isChildOrderingRequired()).thenReturn(true);
    when(descendantcontext.nextNode()).thenReturn(true);
    assertTrue(descendantcontext.nextNode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testnextNode_ifIncludeSelfAndCurrentNodePointerTestNode_hzid4_HKRG0() throws Exception {
    NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
    NodePointer currentNodePointer = mock(NodePointer.class);
    when(currentNodePointer.testNode(nodeTypeTest)).thenReturn(true);
    SelfContext selfContext = mock(SelfContext.class);
    when(selfContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
    NamespaceContext parentContext = new NamespaceContext(selfContext, nodeTypeTest);
    DescendantContext descendantcontext = new DescendantContext(parentContext, true, nodeTypeTest);
    descendantcontext = spy(descendantcontext);
    when(descendantcontext.isChildOrderingRequired()).thenReturn(true);
    assertTrue(descendantcontext.isChildOrderingRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testnextNode_ifIncludeSelfAndCurrentNodePointerDoesNotTestNode_jVnL5_Sdee0() throws Exception {
    NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
    NodePointer currentNodePointer = mock(NodePointer.class);
    when(currentNodePointer.testNode(nodeTypeTest)).thenReturn(false);
    SelfContext selfContext = mock(SelfContext.class);
    when(selfContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
    NamespaceContext parentContext = new NamespaceContext(selfContext, nodeTypeTest);
    DescendantContext descendantcontext = new DescendantContext(parentContext, true, nodeTypeTest);
    descendantcontext = spy(descendantcontext);
    when(descendantcontext.isChildOrderingRequired()).thenReturn(true);
    when(descendantcontext.nextNode()).thenReturn(false);
    boolean result = descendantcontext.nextNode();
    assertFalse(result);
}
}