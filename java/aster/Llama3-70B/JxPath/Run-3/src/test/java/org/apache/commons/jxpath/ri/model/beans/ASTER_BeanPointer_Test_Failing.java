/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Failing {
    private Object bean;
    private QName name;
    private DOMNodePointer parent;
    private JXPathBasicBeanInfo beanInfo;
    private Locale locale;
    BeanPointer beanpointer;
    BeanPointer otherBeanPointer;
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
    @Mock
    private JXPathIntrospector jXPathIntrospector;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = mock(QName.class);
        bean = mock(Object.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        locale = mock(Locale.class);
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        when(name.getName()).thenReturn("Mock for QName, hashCode: 325537956");
        assertEquals("Mock for QName, hashCode: 325537956", beanpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode_1() throws Exception {
        name = mock(QName.class);
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        bean = new Object();
        locale = Locale.US;
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        when(name.hashCode()).thenReturn(123);
        when(name.hashCode()).thenReturn(0);
        name = null;
        beanpointer = new BeanPointer(null, bean, beanInfo, locale);
        assertEquals(123, beanpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode_2() throws Exception {
        name = mock(QName.class);
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        bean = new Object();
        locale = Locale.US;
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        when(name.hashCode()).thenReturn(123);
        when(name.hashCode()).thenReturn(0);
        name = null;
        beanpointer = new BeanPointer(null, bean, beanInfo, locale);
        assertEquals(0, beanpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_fid2() throws Exception {
        name = mock(QName.class);
        bean = mock(Object.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        locale = mock(Locale.class);
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        when(name.getName()).thenReturn("testName");
        assertEquals("testName", beanpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_eomQ1_fid2() {
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass(), true);
        BeanPointer beanPointer = new BeanPointer(new QName("name"), bean, beanInfo, Locale.US);
        assertTrue(beanPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameName_cOhI6_fid2() {
        QName name = new QName("name");
        BeanPointer beanPointer1 = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertTrue(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameIndex_VoxX9_fid2() {
        BeanPointer beanPointer1 = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertTrue(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        name = mock(QName.class);
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        bean = new Object();
        locale = Locale.US;
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        when(name.hashCode()).thenReturn(123);
        assertEquals(123, beanpointer.hashCode());
        when(name.hashCode()).thenReturn(0);
        assertEquals(0, beanpointer.hashCode());
        name = null;
        beanpointer = new BeanPointer(null, bean, beanInfo, locale);
        assertEquals(0, beanpointer.hashCode());
    }
}