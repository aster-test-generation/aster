/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationMultiply_Test_Passing {
    CoreOperationMultiply coreoperationmultiply;
    EvalContext evalContext;
    Constant arg1;
    Constant arg2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        arg1 = mock(Constant.class);
        arg2 = mock(Constant.class);
        evalContext = mock(EvalContext.class);
        coreoperationmultiply = new CoreOperationMultiply(arg1, arg2);
        when(arg1.computeValue(evalContext)).thenReturn(2.0);
        when(arg2.computeValue(evalContext)).thenReturn(3.0);
        Object result = coreoperationmultiply.computeValue(evalContext);
        assertEquals(6.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_HeXE0() {
        Constant arg1 = new Constant("10");
        Constant arg2 = new Constant(5);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        assertEquals("*", coreOperationMultiply.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_SRZL0() {
        Constant arg1 = new Constant("string");
        Constant arg2 = new Constant(1);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        assertTrue(coreOperationMultiply.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_lUGT0_fid1() {
        Constant arg1 = new Constant(5);
        Constant arg5 = new Constant("string");
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg5);
        assertEquals(5, coreOperationMultiply.getPrecedence());
    }
}