/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Failing {
    DynamicPointer dynamicpointer;
    private Object bean;
    private QName name;
    private DynamicPointer otherDynamicPointer;
    private DynamicPointer differentBeanDynamicPointer;
    private DynamicPointer differentNameDynamicPointer;
    @Mock
    QName qname;
    @Mock
    PageContextHandler handler;
    @Mock
    Locale locale;
    DynamicPointer dynamicPointer;
    PageContextHandler pageContextHandler;
    QName qName;
    NodePointer startWith;
    DOMNodePointer parent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        bean = new Object();
        name = mock(QName.class);
        handler = new PageContextHandler();
        dynamicpointer = new DynamicPointer(new QName("test"), bean, handler, Locale.US);
        when(name.hashCode()).thenReturn(123);
        int expectedHashCode = System.identityHashCode(bean) + 123;
        assertEquals(expectedHashCode, dynamicpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodeIterator_1() throws Exception {
        pageContextHandler = mock(PageContextHandler.class);
        qName = new QName("prefix", "localName");
        bean = new Object();
        locale = Locale.US;
        startWith = mock(NodePointer.class);
        dynamicPointer = new DynamicPointer(qName, bean, pageContextHandler, locale);
        String property = "someProperty";
        boolean reverse = true;
        NodeIterator iterator = dynamicPointer.createNodeIterator(property, reverse, startWith);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodeIterator_2() throws Exception {
        pageContextHandler = mock(PageContextHandler.class);
        qName = new QName("prefix", "localName");
        bean = new Object();
        locale = Locale.US;
        startWith = mock(NodePointer.class);
        dynamicPointer = new DynamicPointer(qName, bean, pageContextHandler, locale);
        String property = "someProperty";
        boolean reverse = true;
        NodeIterator iterator = dynamicPointer.createNodeIterator(property, reverse, startWith);
        assertEquals(PropertyIterator.class, iterator.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNameNull_Lebv1() {
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("qualifiedName"), bean, handler, Locale.US);
        int hashCode = dynamicPointer.hashCode();
        assertEquals(System.identityHashCode(bean), hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodeIterator_mdXx0() {
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        NodePointer startWith = NodePointer.newNodePointer(name, bean, locale);
        NodeIterator iterator = dynamicPointer.createNodeIterator("property", true, startWith);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNameAndBean_rxfT2() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        assertTrue(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullName_QToT6() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(null, new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(null, new Object(), new PageContextHandler(), Locale.US);
        assertTrue(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNullValue_LoAi0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        assertTrue(dynamicPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_Glbz1_1() {
        Object value = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), value, new PageContextHandler(), Locale.US);
        assertTrue(JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_Glbz1_2() {
        Object value = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), value, new PageContextHandler(), Locale.US);
        assertTrue(dynamicPointer.isLeaf());
    }

    @Test
    public void testIsLeaf_zxvN0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dynamicPointer.isLeaf();
        assertTrue(result);
    }

    @Test
    public void testIsLeaf_XXPn0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        boolean result = dynamicPointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodeIterator_mdXx0_fid1() {
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        NodePointer startWith = dynamicPointer;
        NodeIterator iterator = dynamicPointer.createNodeIterator("property", true, startWith);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodeIterator() throws Exception {
        pageContextHandler = mock(PageContextHandler.class);
        qName = new QName("prefix", "localName");
        bean = new Object();
        locale = Locale.US;
        startWith = mock(NodePointer.class);
        dynamicPointer = new DynamicPointer(qName, bean, pageContextHandler, locale);
        String property = "someProperty";
        boolean reverse = true;
        NodeIterator iterator = dynamicPointer.createNodeIterator(property, reverse, startWith);
        assertNotNull(iterator);
        assertEquals(PropertyIterator.class, iterator.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_Glbz1() {
        Object value = new Object();
        assertTrue(JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic());
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), value, new PageContextHandler(), Locale.US);
        assertTrue(dynamicPointer.isLeaf());
    }
}