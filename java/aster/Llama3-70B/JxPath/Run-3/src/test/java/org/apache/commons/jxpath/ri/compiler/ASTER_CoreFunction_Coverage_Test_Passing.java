/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreFunction_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_LAST_Rohg0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[]{});
        assertEquals("last", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_POSITION_Wlnh1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, new Expression[]{});
        assertEquals("position", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_COUNT_IEJJ2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, new Expression[]{});
        assertEquals("count", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_ID_dWhY3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, new Expression[]{});
        assertEquals("id", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_LOCAL_NAME_axNo4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, new Expression[]{});
        assertEquals("local-name", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_NAMESPACE_URI_rHud5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, new Expression[]{});
        assertEquals("namespace-uri", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_NAME_DUXt6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, new Expression[]{});
        assertEquals("name", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_STRING_driR7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, new Expression[]{});
        assertEquals("string", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_CONCAT_sgCU8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, new Expression[]{});
        assertEquals("concat", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_STARTS_WITH_XJoR9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, new Expression[]{});
        assertEquals("starts-with", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_FunctionLast_TLBA1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[0]);
        assertTrue(coreFunction.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ArgsNull_HcWO2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        assertTrue(coreFunction.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ArgsLengthZero_aSsG3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, new Expression[0]);
        assertTrue(coreFunction.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1_jUwN1() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[2]);
        EvalContext context = mock(EvalContext.class);
        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello");
        assertEquals("Hello", coreFunction.functionSubstringAfter(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg2_uUgW2() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[2]);
        EvalContext context = mock(EvalContext.class);
        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello");
        when(coreFunction.getArg2().computeValue(context)).thenReturn("World");
        assertEquals("World", coreFunction.functionSubstringAfter(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NoArguments_vLlJ0_fid1() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        assertEquals("last()", coreFunction.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NullArguments_BqhV3_fid1() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        assertEquals("last()", coreFunction.toString());
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubstring_Gfih5_sHPZ0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[3]);
        EvalContext context = mock(EvalContext.class);
        when(coreFunction.getArg1().computeValue(context)).thenReturn("HelloWorld");
        when(coreFunction.getArg2().computeValue(context)).thenReturn(7.0);
        assertEquals("World", coreFunction.functionSubstring(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void remove_dabz1(){ }
}