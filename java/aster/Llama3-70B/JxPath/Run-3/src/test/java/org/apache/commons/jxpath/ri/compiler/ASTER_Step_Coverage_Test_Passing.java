/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Step_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AXIS_DESCENDANT_OR_SELF_MPjq0() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, nodeTest, new Expression[0]);
        assertEquals("", step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentNullPredicates_lDbr0() {
        Step step = new Step(0, new NodeTypeTest(0), null);
        assertFalse(step.isContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentEmptyPredicates_RQnj1() {
        Step step = new Step(0, new NodeTypeTest(0), new Expression[0]);
        assertFalse(step.isContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_SELF_tSRC0() {
        assertEquals("self", Step.axisToString(Compiler.AXIS_SELF));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_CHILD_LafO1() {
        assertEquals("child", Step.axisToString(Compiler.AXIS_CHILD));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_PARENT_pLyT2() {
        assertEquals("parent", Step.axisToString(Compiler.AXIS_PARENT));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_ANCESTOR_Ieqd3() {
        assertEquals("ancestor", Step.axisToString(Compiler.AXIS_ANCESTOR));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_ATTRIBUTE_KYuL4() {
        assertEquals("attribute", Step.axisToString(Compiler.AXIS_ATTRIBUTE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_NAMESPACE_gbSm5() {
        assertEquals("namespace", Step.axisToString(Compiler.AXIS_NAMESPACE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_PRECEDING_XkCd6() {
        assertEquals("preceding", Step.axisToString(Compiler.AXIS_PRECEDING));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_FOLLOWING_CBmj7() {
        assertEquals("following", Step.axisToString(Compiler.AXIS_FOLLOWING));
    }
}