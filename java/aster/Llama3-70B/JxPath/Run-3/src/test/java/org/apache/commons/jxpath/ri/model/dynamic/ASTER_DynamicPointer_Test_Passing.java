/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
    DynamicPointer dynamicpointer;
    private Object bean;
    private QName name;
    private DynamicPointer otherDynamicPointer;
    private DynamicPointer differentBeanDynamicPointer;
    private DynamicPointer differentNameDynamicPointer;
    @Mock
    QName qname;
    @Mock
    PageContextHandler handler;
    @Mock
    Locale locale;
    DynamicPointer dynamicPointer;
    PageContextHandler pageContextHandler;
    QName qName;
    NodePointer startWith;
    DOMNodePointer parent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDynamicPropertyDeclarationSupported() throws Exception {
        QName name = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        boolean result = dynamicpointer.isDynamicPropertyDeclarationSupported();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_1() throws Exception {
        bean = new Object();
        name = new QName("qualifiedName");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        otherDynamicPointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        differentBeanDynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.US);
        differentNameDynamicPointer = new DynamicPointer(new QName("differentQualifiedName"), bean, new PageContextHandler(), Locale.US);
        // Test same object
        // Test equal objects
        // Test different bean
        // Test different name
        // Test null
        // Test different class
        assertTrue(dynamicpointer.equals(dynamicpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_2() throws Exception {
        bean = new Object();
        name = new QName("qualifiedName");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        otherDynamicPointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        differentBeanDynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.US);
        differentNameDynamicPointer = new DynamicPointer(new QName("differentQualifiedName"), bean, new PageContextHandler(), Locale.US);
        // Test same object
        // Test equal objects
        // Test different bean
        // Test different name
        // Test null
        // Test different class
        assertTrue(dynamicpointer.equals(otherDynamicPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_3() throws Exception {
        bean = new Object();
        name = new QName("qualifiedName");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        otherDynamicPointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        differentBeanDynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.US);
        differentNameDynamicPointer = new DynamicPointer(new QName("differentQualifiedName"), bean, new PageContextHandler(), Locale.US);
        // Test same object
        // Test equal objects
        // Test different bean
        // Test different name
        // Test null
        // Test different class
        assertFalse(dynamicpointer.equals(differentBeanDynamicPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_4() throws Exception {
        bean = new Object();
        name = new QName("qualifiedName");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        otherDynamicPointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        differentBeanDynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.US);
        differentNameDynamicPointer = new DynamicPointer(new QName("differentQualifiedName"), bean, new PageContextHandler(), Locale.US);
        // Test same object
        // Test equal objects
        // Test different bean
        // Test different name
        // Test null
        // Test different class
        assertFalse(dynamicpointer.equals(differentNameDynamicPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_5() throws Exception {
        bean = new Object();
        name = new QName("qualifiedName");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        otherDynamicPointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        differentBeanDynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.US);
        differentNameDynamicPointer = new DynamicPointer(new QName("differentQualifiedName"), bean, new PageContextHandler(), Locale.US);
        // Test same object
        // Test equal objects
        // Test different bean
        // Test different name
        // Test null
        // Test different class
        assertFalse(dynamicpointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_6() throws Exception {
        bean = new Object();
        name = new QName("qualifiedName");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        otherDynamicPointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        differentBeanDynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.US);
        differentNameDynamicPointer = new DynamicPointer(new QName("differentQualifiedName"), bean, new PageContextHandler(), Locale.US);
        // Test same object
        // Test equal objects
        // Test different bean
        // Test different name
        // Test null
        // Test different class
        assertFalse(dynamicpointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        qname = new QName("qualifiedName");
        bean = new Object();
        handler = new PageContextHandler();
        locale = Locale.US;
        dynamicpointer = new DynamicPointer(qname, bean, handler, locale);
        assertFalse(dynamicpointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator_1() throws Exception {
        name = new QName("test");
        handler = new PageContextHandler();
        bean = new Object();
        locale = Locale.US;
        dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        NodeIterator iterator = dynamicpointer.attributeIterator(name);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator_2() throws Exception {
        name = new QName("test");
        handler = new PageContextHandler();
        bean = new Object();
        locale = Locale.US;
        dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        NodeIterator iterator = dynamicpointer.attributeIterator(name);
        assertTrue(iterator instanceof DynamicAttributeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = mock(QName.class);
        dynamicpointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.US);
        when(name.getName()).thenReturn("mockedName");
        String result = dynamicpointer.getName().getName();
        assertEquals("mockedName", result);
        verify(name, times(1)).getName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_JIDO0() {
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        Object bean = new Object();
        QName name = new QName("prefix", "localName");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        NodeIterator iterator = dynamicPointer.attributeIterator(name);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_YXGD0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        assertTrue(dynamicPointer.equals(dynamicPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_pFOy1() {
        Object object = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer.equals(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_tWOL3() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(new QName("name1"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(new QName("name2"), new Object(), new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_dgkL4() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(new QName("name"), new Object() {
        }, new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullBean_ilYB5() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(new QName("name"), null, new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(new QName("name"), null, new PageContextHandler(), Locale.US);
        assertTrue(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_IPdW0_1() {
        Locale locale = new Locale("en", "US");
        PageContextHandler handler = new PageContextHandler();
        Object bean = new Object();
        QName name = new QName("qualifiedName");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName result = dynamicPointer.getName();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_IPdW0_2() {
        Locale locale = new Locale("en", "US");
        PageContextHandler handler = new PageContextHandler();
        Object bean = new Object();
        QName name = new QName("qualifiedName");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName result = dynamicPointer.getName();
        assertEquals("qualifiedName", result.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        handler = mock(PageContextHandler.class);
        name = new QName("qualifiedName");
        bean = new Object();
        locale = Locale.US;
        dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        int length = dynamicpointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_kJiz0() {
        PageContextHandler handler = new PageContextHandler();
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        PropertyPointer propertyPointer = dynamicPointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        name = new QName("test");
        handler = new PageContextHandler();
        locale = Locale.US;
        dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        Object result = dynamicpointer.getBaseValue();
        assertEquals(bean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withoutParent_Jnnu1() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        assertEquals("/", dynamicPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNonAtomicValue_djBJ2_1() {
        Object value = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), value, new PageContextHandler(), Locale.US);
        assertFalse(JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNonAtomicValue_djBJ2_2() {
        Object value = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), value, new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNameNull_Lebv1_fid1() {
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("qualifiedName"), bean, handler, Locale.US);
        int hashCode = dynamicPointer.hashCode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNameAndBean_rxfT2_fid1() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullName_QToT6_fid1() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(null, new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(null, new Object(), new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNullValue_LoAi0_fid1() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_Glbz1_1_fid1() {
        Object value = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), value, new PageContextHandler(), Locale.US);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        bean = new Object();
        name = new QName("qualifiedName");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        otherDynamicPointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        differentBeanDynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.US);
        differentNameDynamicPointer = new DynamicPointer(new QName("differentQualifiedName"), bean, new PageContextHandler(), Locale.US);
        // Test same object
        assertTrue(dynamicpointer.equals(dynamicpointer));
        // Test equal objects
        assertTrue(dynamicpointer.equals(otherDynamicPointer));
        // Test different bean
        assertFalse(dynamicpointer.equals(differentBeanDynamicPointer));
        // Test different name
        assertFalse(dynamicpointer.equals(differentNameDynamicPointer));
        // Test null
        assertFalse(dynamicpointer.equals(null));
        // Test different class
        assertFalse(dynamicpointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator() throws Exception {
        name = new QName("test");
        handler = new PageContextHandler();
        bean = new Object();
        locale = Locale.US;
        dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        NodeIterator iterator = dynamicpointer.attributeIterator(name);
        assertNotNull(iterator);
        assertTrue(iterator instanceof DynamicAttributeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_IPdW0() {
        Locale locale = new Locale("en", "US");
        PageContextHandler handler = new PageContextHandler();
        Object bean = new Object();
        QName name = new QName("qualifiedName");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName result = dynamicPointer.getName();
        assertNotNull(result);
        assertEquals("qualifiedName", result.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNonAtomicValue_djBJ2() {
        Object value = new Object();
        assertFalse(JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic());
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), value, new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer.isLeaf());
    }
}