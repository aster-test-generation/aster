/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.lang.reflect.Method;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MethodLookupUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NullParameters_jFIf0() {
        Class targetClass = MethodLookupUtils.class;
        String name = "someMethod";
        Object[] parameters = null;
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertNull(method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ParameterNotNull_SvIn1() {
        Class targetClass = MethodLookupUtils.class;
        String name = "someMethod";
        Object[] parameters = new Object[] { new Object() };
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertNull(method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ParameterNull_nvMY2() {
        Class targetClass = MethodLookupUtils.class;
        String name = "someMethod";
        Object[] parameters = new Object[] { null };
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertNull(method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NullParameters_tkKK0() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "methodName", null);
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NoMatch_WBOm4() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "nonExistingMethod", new Object[]{});
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public static void staticMethod_GHVX5() {
}
}