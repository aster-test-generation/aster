/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.lang.reflect.Field;
import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DescendantContext_Test_Failing {
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private DescendantContext descendantContext;
    private NodePointer currentNodePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeIterator nodeIterator;
    private boolean includeSelf = true;
    private boolean setStarted = false;
    private Stack stack = new Stack();

    private int getPrivateField(Object obj, String fieldName) throws Exception {
        Field field = obj.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        return field.getInt(obj);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_ReturnsFalse_WhenNextNodeReturnsFalse() throws Exception {
        namespaceContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        // given
        when(descendantContext.nextNode()).thenReturn(false);
        // when
        boolean result = descendantContext.setPosition(5);
        // then
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_zprR0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        assertTrue(descendantContext.setPosition(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_loeS1() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        assertFalse(descendantContext.setPosition(-1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode1_eBQF0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(parentContext, true, new NodeTypeTest(1));
        assertTrue(descendantContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode7_Gvww6() {
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(parentContext, true, new NodeTypeTest(1));
        assertTrue(descendantContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_GUVC0_1() throws Exception {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        when(parentContext.getCurrentNodePointer()).thenReturn(null);
        assertTrue(descendantContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_NextNodeCalled_WhenPositionIsGreaterThanCurrent_iwsi0() throws Exception {
        namespaceContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        when(descendantContext.nextNode()).thenReturn(true);
        Field positionField = DescendantContext.class.getDeclaredField("position");
        positionField.setAccessible(true);
        positionField.setInt(descendantContext, 3); // set current position
        boolean result = descendantContext.setPosition(5);
        verify(descendantContext, times(2)).nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_NextNodeCalled_WhenPositionIsGreaterThanCurrent_iwsi0_fid1() throws Exception {
        namespaceContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        NodePointer nodePointer = mock(NodePointer.class);
        when(descendantContext.getCurrentNodePointer()).thenReturn(nodePointer);
        Field positionField = DescendantContext.class.getDeclaredField("position");
        positionField.setAccessible(true);
        positionField.setInt(descendantContext, 3); // set current position
        boolean result = descendantContext.setPosition(5);
        verify(descendantContext, times(2)).nextNode();
        assertTrue(result);
    }
}