/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeContext_Test_Failing {
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private AttributeContext attributeContext;
    @Mock
    private NodeIterator iterator;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodePointer currentNodePointer;
    private boolean setStarted = false;
    private static QName WILDCARD = new QName(null, "*");
    private NodeTest nodeTest;
    private SelfContext selfContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        namespaceContext = new NamespaceContext(new SelfContext(namespaceContext, nodeTypeTest), nodeTypeTest);
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Mocking the getCurrentPosition method to return 5
        when(attributeContext.getCurrentPosition()).thenReturn(5);
        // Mocking the nextNode method to return true
        when(attributeContext.nextNode()).thenReturn(true);
        // Calling the setPosition method with position 10
        boolean result = attributeContext.setPosition(10);
        // Asserting that the setPosition method returns true
        assertTrue(result);
        // Verifying that the nextNode method was called 5 times
        verify(attributeContext, times(5)).nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_withPositionLessThanCurrentPosition() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        namespaceContext = new NamespaceContext(new SelfContext(namespaceContext, nodeTypeTest), nodeTypeTest);
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Mocking the getCurrentPosition method to return 10
        when(attributeContext.getCurrentPosition()).thenReturn(10);
        // Mocking the reset method
        attributeContext.reset();
        // Calling the setPosition method with position 5
        boolean result = attributeContext.setPosition(5);
        // Asserting that the setPosition method returns true
        assertTrue(result);
        // Verifying that the reset method was called
        verify(attributeContext).reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_withNextNodeReturningFalse() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        namespaceContext = new NamespaceContext(new SelfContext(namespaceContext, nodeTypeTest), nodeTypeTest);
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Mocking the getCurrentPosition method to return 5
        when(attributeContext.getCurrentPosition()).thenReturn(5);
        // Mocking the nextNode method to return false
        when(attributeContext.nextNode()).thenReturn(false);
        // Calling the setPosition method with position 10
        boolean result = attributeContext.setPosition(10);
        // Asserting that the setPosition method returns false
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_2() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        // Given
        setStarted = true;
        iterator = iterator;
        // When
        attributeContext.reset();
        // Then
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception {
        nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        selfContext = new SelfContext(null, nodeTypeTest);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Mocking NodeIterator and NodePointer
        iterator = mock(NodeIterator.class);
        currentNodePointer = mock(NodePointer.class);
        // Setting up expectations
        when(namespaceContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.attributeIterator(WILDCARD)).thenReturn(iterator);
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        // Calling the method under test
        boolean result = attributeContext.nextNode();
        // Assertions
        assertTrue(result);
        verify(namespaceContext, times(1)).getCurrentNodePointer();
        verify(currentNodePointer, times(1)).attributeIterator(WILDCARD);
        verify(iterator, times(1)).setPosition(anyInt());
        verify(iterator, times(1)).getNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_dmqK0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        attributeContext.nextNode(); // Call nextNode to set currentNodePointer
        NodePointer nodePointer = attributeContext.getCurrentNodePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_setStarted_false_PHqe5_exOk0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTest), nodeTest), nodeTest);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        assertTrue(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_1_fid1() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        // Given
        setStarted = true;
        iterator = iterator;
        // When
        attributeContext.reset();
        // Then
        assertFalse(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_dmqK0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        NodePointer nodePointer = attributeContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test1_oxkU0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        attributeContext.setPosition(5);
        assertTrue(attributeContext.setPosition(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_test4_HdAE3_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(4);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        attributeContext.setPosition(20);
        assertTrue(attributeContext.setPosition(20));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeTypeTest_NODE_TYPE_NODE_rjiC1() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTest), nodeTest), nodeTest);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        assertTrue(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_gRtF0_fid1() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        attributeContext.nextNode();
        NodePointer result = attributeContext.getCurrentNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_setStarted_false_PHqe5_exOk0_fid1() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTest), nodeTest), nodeTest);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        attributeContext.nextNode(); // call nextNode to set setStarted to true
        assertTrue(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode_WrXk0_fid1() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        NodeIterator iterator = mock(NodeIterator.class);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(namespaceContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.attributeIterator(WILDCARD)).thenReturn(iterator);
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        boolean result = attributeContext.nextNode();
        assertTrue(result);
        verify(namespaceContext, times(1)).getCurrentNodePointer();
        verify(currentNodePointer, times(1)).attributeIterator(WILDCARD);
        verify(iterator, times(1)).setPosition(anyInt());
        verify(iterator, times(1)).getNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        // Given
        setStarted = true;
        iterator = iterator;
        // When
        attributeContext.reset();
        // Then
        assertFalse(setStarted);
        assertNull(iterator);
    }
}