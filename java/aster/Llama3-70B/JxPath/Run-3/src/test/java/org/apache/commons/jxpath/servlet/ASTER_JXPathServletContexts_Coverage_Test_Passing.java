/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathServletContexts_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_BZkZ0() {
        PageContext pageContext = mock(PageContext.class);
        JXPathContext jXPathContext = mock(JXPathContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(jXPathContext);
        JXPathContext result = JXPathServletContexts.getPageContext(pageContext);
        assertEquals(jXPathContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_PageScopeContext_PpAz8() {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext jXPathContext = mock(JXPathContext.class);
        JXPathServletContexts.getPageContext(pageContext);
        verify(jXPathContext, times(1)).setVariables(any(KeywordVariables.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_SessionAttributeNotNull_GTBT0() throws Exception {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = mock(JXPathContext.class);
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(context);
        JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
        assertEquals(context, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_SessionAttributeNull_IbSO1() throws Exception {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_HandleNotNull_OReb1() throws Exception {
        ServletRequest request = mock(ServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = mock(JXPathContext.class);
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(context);
        when(context.getContextBean()).thenReturn(handle);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(context, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_HandleGetServletRequest_yNtk2() throws Exception {
        ServletRequest request = mock(ServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = mock(JXPathContext.class);
        ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(context);
        when(context.getContextBean()).thenReturn(handle);
        when(handle.getServletRequest()).thenReturn(request);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(context, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_InstanceOfTypeHttpServletRequest_MTaq4() throws Exception {
        HttpServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_SessionNotNull_pckf5() throws Exception {
        HttpServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpSession session = mock(HttpSession.class);
        when(request.getSession(false)).thenReturn(session);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(result);
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_LWwd0() {
        ServletRequest request = mock(ServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext jXPathContext = JXPathServletContexts.getRequestContext(request, servletContext);
        verify(jXPathContext, times(1)).setVariables(any(KeywordVariables.class));
    }
}