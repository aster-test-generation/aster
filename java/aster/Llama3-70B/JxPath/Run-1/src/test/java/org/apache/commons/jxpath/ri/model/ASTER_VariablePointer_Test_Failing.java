/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Failing {
    VariablePointer variablepointer;
    NodePointer pointer1;
    NodePointer pointer2;
    @Mock
    private JXPathContext context;
    @Mock
    private AbstractFactory factory;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName name;
    @Mock
    private Object collection;
    @Mock
    private Variables variables;
    @Mock
    private JXPathContext parentContext;
    private VariablePointer variablePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NodeIterator nodeIterator;
    private boolean actual;
    Object value;
    private NodePointer valuePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild() throws Exception {
        variablepointer = new VariablePointer(name);
        when(variablepointer.getAbstractFactory(context)).thenReturn(factory);
        when(factory.createObject(context, variablepointer, collection, name.toString(), 1)).thenReturn(true);
        when(variablepointer.clone()).thenReturn(nodePointer);
        NodePointer result = variablepointer.createChild(context, name, 1);
        assertEquals(nodePointer, result);
        verify(variablepointer).setIndex(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindVariables_1() throws Exception {
        name = new QName("prefix", "localName");
        variablePointer = new VariablePointer(name);
        // given
        when(context.getVariables()).thenReturn(variables);
        when(context.getParentContext()).thenReturn(parentContext);
        when(parentContext.getVariables()).thenReturn(null);
        // when
        variablePointer.findVariables(context);
        // then
        verify(context).getVariables();
        verify(context).getParentContext();
        verify(parentContext).getVariables();
        // test with declared variable
        when(variables.isDeclaredVariable(name.toString())).thenReturn(true);
        variablePointer.findVariables(context);
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindVariables_2() throws Exception {
        name = new QName("prefix", "localName");
        variablePointer = new VariablePointer(name);
        // given
        when(context.getVariables()).thenReturn(variables);
        when(context.getParentContext()).thenReturn(parentContext);
        when(parentContext.getVariables()).thenReturn(null);
        // when
        variablePointer.findVariables(context);
        // then
        verify(context).getVariables();
        verify(context).getParentContext();
        verify(parentContext).getVariables();
        // test with declared variable
        when(variables.isDeclaredVariable(name.toString())).thenReturn(true);
        variablePointer.findVariables(context);
        assertNull(valuePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindVariables_3() throws Exception {
        name = new QName("prefix", "localName");
        variablePointer = new VariablePointer(name);
        // given
        when(context.getVariables()).thenReturn(variables);
        when(context.getParentContext()).thenReturn(parentContext);
        when(parentContext.getVariables()).thenReturn(null);
        // when
        variablePointer.findVariables(context);
        // then
        verify(context).getVariables();
        verify(context).getParentContext();
        verify(parentContext).getVariables();
        // test with declared variable
        when(variables.isDeclaredVariable(name.toString())).thenReturn(true);
        variablePointer.findVariables(context);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        when(variablePointer.getValuePointer()).thenReturn(nodePointer);
        when(nodePointer.childIterator(nodeTest, false, null)).thenReturn(nodeIterator);
        NodeIterator result = variablePointer.childIterator(nodeTest, false, null);
        assertEquals(nodeIterator, result);
        verify(nodePointer).childIterator(nodeTest, false, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        actual = true;
        variablepointer = new VariablePointer(new QName("name"));
        context = Mockito.mock(JXPathContext.class);
        nodePointer = Mockito.mock(NodePointer.class);
        value = "testValue";
        Mockito.when(variablepointer.createPath(context)).thenReturn(nodePointer);
        NodePointer result = variablepointer.createPath(context, value);
        Mockito.verify(nodePointer).setValue(value);
        Assertions.assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild_L_kUMX0() throws Exception {
        variablepointer = new VariablePointer(name);
        when(variablepointer.clone()).thenReturn(nodePointer);
        when(nodePointer.isActual()).thenReturn(true);
        NodePointer result = variablepointer.createChild(context, name, 1, value);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_isActual_true_index_0_iHqk0_WraV0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NodePointer nodePointer = variablePointer.createChild(context, new QName("child"), 0);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_isActual_true_index_WHOLE_COLLECTION_tcOv2_ZdVc0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NodePointer nodePointer = variablePointer.createChild(context, new QName("child"), VariablePointer.WHOLE_COLLECTION);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_2_wJvd1_bRaF0() {
        VariablePointer vp = new VariablePointer(new QName("qualifiedName"));
        assertEquals(vp.getName().hashCode(), vp.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_vOJ1_FnBA0() {
        VariablePointer vp = new VariablePointer(new QName("prefix", "localName"));
        vp.isActual(); // Removed the erroneous line
        assertTrue(vp.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_H_1_ZGVw0() throws Exception {
        variablepointer = new VariablePointer(variables, name);
        actual = false;
        when(variablepointer.getAbstractFactory(context)).thenReturn(factory);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        NodePointer result = variablepointer.createPath(context);
        assertEquals(variablepointer, result);
        verify(factory, times(1)).declareVariable(context, name.toString());
        verify(variablepointer, times(1)).findVariables(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_actualTrue_uaie0_ANGZ0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NodePointer nodePointer = variablePointer.createPath(context, new Object());
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath3_COAo2_REkE0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        NodePointer nodePointer = variablePointer.createPath(context);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindVariables_WSfH0_1() throws Exception {
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(name);
        boolean actual = false;
        when(context.getVariables()).thenReturn(variables);
        when(context.getParentContext()).thenReturn(parentContext);
        when(parentContext.getVariables()).thenReturn(null);
        variablePointer.findVariables(context);
        verify(context).getVariables();
        verify(context).getParentContext();
        verify(parentContext).getVariables();
        when(variables.isDeclaredVariable(name.toString())).thenReturn(true);
        variablePointer.findVariables(context);
        assertFalse(variablePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindVariables_WSfH0_2() throws Exception {
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(name);
        boolean actual = false;
        when(context.getVariables()).thenReturn(variables);
        when(context.getParentContext()).thenReturn(parentContext);
        when(parentContext.getVariables()).thenReturn(null);
        variablePointer.findVariables(context);
        verify(context).getVariables();
        verify(context).getParentContext();
        verify(parentContext).getVariables();
        when(variables.isDeclaredVariable(name.toString())).thenReturn(true);
        variablePointer.findVariables(context);
        assertTrue(variablePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_JfRU0_Rxbx0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        int index = 1;
        Object value = new Object();
        VariablePointer vp = new VariablePointer(name);
        NodePointer np = vp.createChild(context, name, index, value);
        assertNotNull(np);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_H_1_ZGVw0_fid1() throws Exception {
        variablepointer = new VariablePointer(variables, name);
        actual = false;
        JXPathContext context = JXPathContext.newContext(new HashMap());
        context.setFactory(factory);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        NodePointer result = variablepointer.createPath(context);
        assertNotNull(result);
        verify(factory, times(1)).declareVariable(context, name.toString());
        verify(variablepointer, times(1)).findVariables(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindVariables_WSfH0_1_fid1() throws Exception {
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(name);
        when(context.getVariables()).thenReturn(variables);
        when(context.getParentContext()).thenReturn(parentContext);
        when(parentContext.getVariables()).thenReturn(null);
        variablePointer.findVariables(context);
        verify(context).getVariables();
        verify(context).getParentContext();
        verify(parentContext).getVariables();
        when(variables.isDeclaredVariable(name.toString())).thenReturn(true);
        variablePointer.findVariables(context);
        assertTrue(variablePointer.isActual());
    }
}