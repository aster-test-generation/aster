/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AXIS_DESCENDANT_OR_SELF_AAeT0() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, nodeTest, new Expression[0]);
        assertEquals("", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentNullPredicates_rAyk0() {
        Step step = new Step(0, new NodeTypeTest(0), null);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentEmptyPredicates_UUGA1() {
        Step step = new Step(0, new NodeTypeTest(0), new Expression[0]);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_DESCENDANT_YKHC0() {
        assertEquals("descendant", Step.axisToString(Compiler.AXIS_DESCENDANT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_ANCESTOR_OR_SELF_xEPC1() {
        assertEquals("ancestor-or-self", Step.axisToString(Compiler.AXIS_ANCESTOR_OR_SELF));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_FOLLOWING_SIBLING_NMVT2() {
        assertEquals("following-sibling", Step.axisToString(Compiler.AXIS_FOLLOWING_SIBLING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_PRECEDING_SIBLING_yeAF3() {
        assertEquals("preceding-sibling", Step.axisToString(Compiler.AXIS_PRECEDING_SIBLING));
    }
}