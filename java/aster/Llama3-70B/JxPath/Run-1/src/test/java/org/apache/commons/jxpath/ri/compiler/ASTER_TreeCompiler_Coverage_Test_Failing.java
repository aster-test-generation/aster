/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOr_withNullArray_PiBz0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.or(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_ongT0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.and(arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_xRDp1_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.and(arguments);
        assertEquals(CoreOperationAnd.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_XWYx0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.union(arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_cojN1_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.union(arguments);
        assertTrue(result instanceof CoreOperationUnion);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_uiau0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] args = new Object[]{1, 2, 3};
        Object result = treeCompiler.function(1, args);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_Wdsh0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3};
        Object result = treeCompiler.sum(arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqual_NotLocationPath_Sgqe0() {
        TreeCompiler compiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        assertEquals(new CoreOperationEqual(null, null), compiler.equal(left, right));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqual_CoreOperationEqual_BothNull_nzvx8() {
        TreeCompiler compiler = new TreeCompiler();
        assertEquals(new CoreOperationEqual(null, null), compiler.equal(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_zYpN0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName name = new QName("namespace", "localPart");
        Object[] args = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.function(name, args);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_xRDp1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.and(arguments);
        assertNotNull(result);
        assertEquals(CoreOperationAnd.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_cojN1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.union(arguments);
        assertNotNull(result);
        assertTrue(result instanceof CoreOperationUnion);
    }
}