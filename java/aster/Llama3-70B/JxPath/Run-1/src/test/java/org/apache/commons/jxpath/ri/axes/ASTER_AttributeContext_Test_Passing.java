/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeContext_Test_Passing {
    AttributeContext attributeContext;
    NamespaceContext namespaceContext;
    NodeTypeTest nodeTypeTest;
    @Mock
    private NodeIterator iterator;
    @Mock
    private NamespaceContext parentContext;
    private NodePointer currentNodePointer;
    private boolean setStarted = false;
    private static QName WILDCARD = new QName(null, "*");
    private NodeTest nodeTest;
    private SelfContext selfContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode5_joWa4() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        assertFalse(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode6_dDTY5() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        assertFalse(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_2_fid2() throws Exception {
        parentContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        iterator = iterator;
        setStarted = true;
        attributeContext.reset();
        assertTrue(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode7_ecXJ6_EUzF0_fid2() {
        int nodeType = 1;
        NodeTypeTest nodeTypeTest = new NodeTypeTest(nodeType);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        try {
            attributeContext.nextNode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException e) {
            // expected
        }
    }
}