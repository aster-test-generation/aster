/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_FcKv0_npby0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("instruction");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_CfOB1_cbmL0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("instruction");
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMod_GWqO0_Znbw0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String left = "left";
        Object result = treeCompiler.processingInstructionTest(left);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMod_GWqO0_xlIU1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "instruction";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_withNonNullSteps_rsjE0_LzmN0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String expression = "some expression";
        Object result = treeCompiler.processingInstructionTest(expression);
        assertNotNull(result);
    }
}