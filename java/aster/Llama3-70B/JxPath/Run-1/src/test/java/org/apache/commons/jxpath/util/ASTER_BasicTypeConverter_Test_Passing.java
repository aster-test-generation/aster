/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNullObject_owPA0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToString_Jtvw1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("hello", String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertBooleanToBoolean_AOaa2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Boolean.TRUE, Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertBooleanToNumber_jpMh3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Boolean.TRUE, Number.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNumberToNumber_TuoT4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(1, Number.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNumberToBoolean_vhhw5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(1, Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToBoolean_Mdhg6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("true", Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToCharacter_YlRS7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("a", Character.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToByte_foZe8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1", Byte.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToShort_ZLFj9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1", Short.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToInteger_reKP10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1", Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToLong_udOI11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1", Long.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToFloat_sCIn12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1.0", Float.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToDouble_miXZ13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("1.0", Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArrayToArray_ASoq14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new String[]{"a", "b"}, String[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArrayToCollection_SKUD15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new String[]{"a", "b"}, Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertCollectionToArray_dveU16() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Arrays.asList("a", "b"), String[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertCollectionToCollection_XmXv17() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Arrays.asList("a", "b"), Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertObjectToObject_lrdz23() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Object(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_ConcreteClass_lYet0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_AbstractClass_CaFk1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(AbstractList.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_CollectionClass_hvsV3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_SetClass_oLOG4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Set.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_ConcreteClass_MqIE0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_ConcreteClass_MqIE0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Interface_RDPh1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Interface_RDPh1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_AbstractClass_zkRG2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.allocateCollection(AbstractList.class);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Set_xpry3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Set_xpry3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertTrue(collection instanceof HashSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Collection_qKqI4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Collection.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Collection_qKqI4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Collection.class);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_UnknownType_tbbz5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.allocateCollection(String.class);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_NwjA0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(null, int.class);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToObject_UCYl1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(null, Object.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToArray_GDJg4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] array = new String[]{"value"};
        Object result = converter.convert(array, String[].class);
        assertArrayEquals(array, (String[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToCollection_yACu5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] array = new String[]{"value"};
        Object result = converter.convert(array, Collection.class);
        assertEquals(1, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToArray_ArGF6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add("value");
        Object result = converter.convert(collection, String[].class);
        assertArrayEquals(new String[]{"value"}, (String[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToCollection_ieWB7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add("value");
        Object result = converter.convert(collection, Collection.class);
        assertEquals(1, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToString_VneR8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert("value", String.class);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToBoolean_Hzrb11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(1, Boolean.class);
        assertTrue((Boolean) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToNumber_jcOV12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(1, Number.class);
        assertEquals(1, ((Number) result).doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_aSvd13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert("1", int.class);
        assertEquals(1, ((Number) result).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToBoolean_tcvx14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert("true", Boolean.class);
        assertTrue((Boolean) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Byte_Nofz0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.0);
        assertEquals(Byte.valueOf((byte) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Short_csaF1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.0);
        assertEquals(Short.valueOf((short) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Integer_eTFO2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.0);
        assertEquals(Integer.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Long_RwgC3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.0);
        assertEquals(Long.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Float_XUUy4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.0);
        assertEquals(Float.valueOf(10.0f), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Double_OQDm5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.0);
        assertEquals(Double.valueOf(10.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_BigInteger_YXlL6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.0);
        assertEquals(BigInteger.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_BigDecimal_OVSG7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.0);
        assertEquals(new BigDecimal(10.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Unknown_qqBI10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(String.class, 10.0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveBoolean_NZnH0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(boolean.class);
        assertTrue((Boolean) result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveChar_ELbX1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(char.class);
        assertEquals('\0', (Character) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveInt_mczB4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(int.class);
        assertEquals(0, (Integer) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveLong_Dffa5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(long.class);
        assertEquals(0L, (Long) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveFloat_ZPOl6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(float.class);
        assertEquals(0.0f, (Float) result, 0.0f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveDouble_ctJu7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(double.class);
        assertEquals(0.0, (Double) result, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveUnknown_RJJQ8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(String.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableList_tqVy0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("element1");
        list.add("element2");
        Collection<String> unmodifiableList = converter.unmodifiableCollection(list);
        assertThrows(UnsupportedOperationException.class, () -> unmodifiableList.add("element3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableSortedSet_DyUa1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("element1");
        sortedSet.add("element2");
        Collection<String> unmodifiableSortedSet = converter.unmodifiableCollection(sortedSet);
        assertThrows(UnsupportedOperationException.class, () -> unmodifiableSortedSet.add("element3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableSet_qJfd2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("element1");
        set.add("element2");
        Collection<String> unmodifiableSet = converter.unmodifiableCollection(set);
        assertThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add("element3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollection_jlEn3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new LinkedList<>();
        collection.add("element1");
        collection.add("element2");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertThrows(UnsupportedOperationException.class, () -> unmodifiableCollection.add("element3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveBoolean_BTwf0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Boolean result = (Boolean) converter.convertStringToPrimitive("true", Boolean.class);
        assert result.booleanValue() == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveCharacter_gAPS1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Character result = (Character) converter.convertStringToPrimitive("a", Character.class);
        assert result.charValue() == 'a';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveByte_XXQe2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Byte result = (Byte) converter.convertStringToPrimitive("1", Byte.class);
        assert result.byteValue() == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveShort_oKHH3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Short result = (Short) converter.convertStringToPrimitive("1", Short.class);
        assert result.shortValue() == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveInteger_KbYV4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer result = (Integer) converter.convertStringToPrimitive("1", Integer.class);
        assert result.intValue() == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveLong_yPXY5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Long result = (Long) converter.convertStringToPrimitive("1", Long.class);
        assert result.longValue() == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveFloat_etRB6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Float result = (Float) converter.convertStringToPrimitive("1.0", Float.class);
        assert result.floatValue() == 1.0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveDouble_VvtE7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Double result = (Double) converter.convertStringToPrimitive("1.0", Double.class);
        assert result.doubleValue() == 1.0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveNull_kbGG8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", String.class);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_nCas0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Boolean.TRUE, converter.convertStringToPrimitive("true", Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_nCas0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Character.valueOf('a'), converter.convertStringToPrimitive("a", Character.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_nCas0_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Byte.valueOf((byte) 1), converter.convertStringToPrimitive("1", Byte.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_nCas0_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Short.valueOf((short) 1), converter.convertStringToPrimitive("1", Short.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_nCas0_5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Integer.valueOf(1), converter.convertStringToPrimitive("1", Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_nCas0_6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Long.valueOf(1), converter.convertStringToPrimitive("1", Long.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_nCas0_7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Float.valueOf(1.0f), converter.convertStringToPrimitive("1.0", Float.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_nCas0_8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Double.valueOf(1.0), converter.convertStringToPrimitive("1.0", Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNodeSetToCollection_RCXP19_cTaM0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object nodeList = new String[]{"a", "b"};
        assertTrue(converter.canConvert(nodeList, Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToAtomicBoolean_JieD10_Mhfa0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertTrue((Boolean) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_AtomicInteger_fdYZ8_YsDR0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer result = (Integer) converter.convertStringToPrimitive("10", Integer.class);
        assertEquals(10, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_AtomicLong_glxv9_nMxP0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("10", Long.class);
        assertEquals(10L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertUnknownType_VTxi21_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_Interface_YQwq2_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToNumber_xxdu9_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToNumber_LZNQ15_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Long.class);
        assertEquals(1L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToPrimitive_fvxs18_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] array = new String[]{"123"};
        Object result = converter.convertStringToPrimitive(array[0], int.class);
        assertEquals(123, ((Number) result).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertPointerToObject_kAoD20_swWv0_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object pointer = "a";
        assertFalse(converter.convertStringToPrimitive(pointer, String.class) != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertPointerToObject_DUNX3_MWPB0_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object pointer = "value";
        Object result = converter.convertStringToPrimitive(pointer, String.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_ConcreteClass_MqIE0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        assertNotNull(collection);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Interface_RDPh1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertNotNull(collection);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Set_xpry3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertNotNull(collection);
        assertTrue(collection instanceof HashSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Collection_qKqI4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Collection.class);
        assertNotNull(collection);
        assertTrue(collection instanceof ArrayList);
    }
}