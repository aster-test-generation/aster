/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.lang.reflect.Field;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Failing {
    private String defaultNamespace;
    private Node node;
    private DOMNodePointer domNodePointer;
    private NodePointer nodePointer1;
    private NodePointer nodePointer2;
    private NamedNodeMap namedNodeMap;
    private NodeTest nodeTest;
    private NodeList nodeList;
    private Document document;
    private JXPathContext context;
    private QName name;
    private AbstractFactory factory;
    DOMNodePointer domnodepointer;
    Locale locale;
    VariablePointer parent;
    Element element;
    QName qName;
    DOMAttributeIterator domAttributeIterator;
    private Attr attr;
    NodePointer startWith;
    boolean reverse;
    private NamespaceResolver namespaceResolver;
    private DOMNodePointer sameNodePointer;
    private DOMNodePointer differentNodePointer;
    Node nodeMock;
    private Node parentNode;
    private String id;
    private Attr langAttr;
    private NodeNameTest nodeNameTest;
    private NodeTypeTest nodeTypeTest;
    private ProcessingInstructionTest processingInstructionTest;
    private ProcessingInstruction processingInstruction;
    VariablePointer variablePointer;
    private Attr attrMock;
    private VariablePointer parentMock;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ElementNode_ReturnsAttribute() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getParentNode()).thenReturn(null);
        when(((Element) node).getAttribute("attrName")).thenReturn("attrValue");
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        assertEquals("attrValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ParentNodeHasAttribute_ReturnsAttribute() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        Node parentNode = mock(Node.class);
        when(node.getParentNode()).thenReturn(parentNode);
        when(parentNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) parentNode).getAttribute("attrName")).thenReturn("attrValue");
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        assertEquals("attrValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domNodePointer = new DOMNodePointer(new VariablePointer(new QName("prefix", "localName")), node);
        when(node.getNamespaceURI()).thenReturn("http://example.com");
        String namespaceURI = domNodePointer.getNamespaceURI();
        assertEquals("http://example.com", namespaceURI);
        verify(node).getNamespaceURI();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_1() throws Exception {
        element = mock(Element.class);
        node = element;
        context = mock(JXPathContext.class);
        name = new QName("prefix", "localName");
        namespaceResolver = mock(NamespaceResolver.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        // Test with prefix
        when(namespaceResolver.getNamespaceURI("prefix")).thenReturn("namespaceURI");
        NodePointer result = domNodePointer.createAttribute(context, name);
        verify(element).setAttributeNS("namespaceURI", "prefix:localName", "");
        // Test without prefix
        name = new QName("localName");
        when(element.hasAttribute("localName")).thenReturn(false);
        result = domNodePointer.createAttribute(context, name);
        verify(element).setAttribute("localName", "");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://defaultNamespace");
        String defaultNamespace = domNodePointer.getDefaultNamespaceURI();
        assertEquals("http://defaultNamespace", defaultNamespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_NoDefaultNamespace() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(null);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(null);
        String defaultNamespace = domNodePointer.getDefaultNamespaceURI();
        assertNull(defaultNamespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointerByID_1() throws Exception {
        node = mock(Node.class);
        document = mock(Document.class);
        element = mock(Element.class);
        context = mock(JXPathContext.class);
        locale = mock(Locale.class);
        domNodePointer = new DOMNodePointer(node, locale, id);
        when(document.getElementById(any(String.class))).thenReturn(element);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(domNodePointer.getLocale()).thenReturn(locale);
        Pointer pointer = domNodePointer.getPointerByID(context, id);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointerByID_2() throws Exception {
        node = mock(Node.class);
        document = mock(Document.class);
        element = mock(Element.class);
        context = mock(JXPathContext.class);
        locale = mock(Locale.class);
        domNodePointer = new DOMNodePointer(node, locale, id);
        when(document.getElementById(any(String.class))).thenReturn(element);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(domNodePointer.getLocale()).thenReturn(locale);
        Pointer pointer = domNodePointer.getPointerByID(context, id);
        assertTrue(pointer instanceof DOMNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointerByID_ElementIsNull_1() throws Exception {
        node = mock(Node.class);
        document = mock(Document.class);
        element = mock(Element.class);
        context = mock(JXPathContext.class);
        locale = mock(Locale.class);
        domNodePointer = new DOMNodePointer(node, locale, id);
        when(document.getElementById(any(String.class))).thenReturn(null);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(domNodePointer.getLocale()).thenReturn(locale);
        Pointer pointer = domNodePointer.getPointerByID(context, id);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointerByID_ElementIsNull_2() throws Exception {
        node = mock(Node.class);
        document = mock(Document.class);
        element = mock(Element.class);
        context = mock(JXPathContext.class);
        locale = mock(Locale.class);
        domNodePointer = new DOMNodePointer(node, locale, id);
        when(document.getElementById(any(String.class))).thenReturn(null);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(domNodePointer.getLocale()).thenReturn(locale);
        Pointer pointer = domNodePointer.getPointerByID(context, id);
        assertTrue(pointer instanceof NullPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NodeNameTest_ElementNode() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        nodeTest = mock(NodeTest.class);
        nodeNameTest = mock(NodeNameTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        processingInstructionTest = mock(ProcessingInstructionTest.class);
        processingInstruction = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodeNameTest.getNodeName()).thenReturn(new QName("prefix", "localName"));
        when(nodeNameTest.getNamespaceURI()).thenReturn("namespaceURI");
        when(nodeNameTest.isWildcard()).thenReturn(false);
        when(DOMNodePointer.getLocalName(node)).thenReturn("localName");
        when(DOMNodePointer.getNamespaceURI(node)).thenReturn("namespaceURI");
        assertTrue(DOMNodePointer.testNode(node, nodeNameTest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefix() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(new VariablePointer(new QName("prefix", "localName")), node);
        when(node instanceof Element).thenReturn(true);
        when(((Element) node).getAttributeNode("xmlns:custom")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://custom/namespace");
        String result = domNodePointer.getNamespaceURI("custom");
        assertEquals("http://custom/namespace", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_UnknownNamespace() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(new VariablePointer(new QName("prefix", "localName")), node);
        when(node instanceof Element).thenReturn(true);
        when(((Element) node).getAttributeNode("xmlns:custom")).thenReturn(null);
        String result = domNodePointer.getNamespaceURI("custom");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_EmptyStringValue_NPtL0() throws Exception {
        node = mock(Node.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        Field field = DOMNodePointer.class.getDeclaredField("node");
        field.setAccessible(true);
        field.set(domNodePointer, node);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(node.getParentNode()).thenReturn(node);
        domNodePointer.setValue("");
        verify(node, never()).removeChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NodeValue_dbHR0() throws Exception {
        node = mock(Node.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        when(node.getOwnerDocument()).thenReturn(document);
        domNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        Field nodeField = DOMNodePointer.class.getDeclaredField("node");
        nodeField.setAccessible(true);
        nodeField.set(domNodePointer, node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node valueNode = mock(Node.class);
        when(valueNode.cloneNode(true)).thenReturn(valueNode);
        domNodePointer.setValue(valueNode);
        verify(node).appendChild(valueNode);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_hrVy0() throws Exception {
        Element element = mock(Element.class);
        Node nodeMock = mock(Node.class);
        Attr attr = mock(Attr.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, Locale.getDefault(), "id");
        when(nodeMock.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Node) nodeMock).getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Node) nodeMock).getNamespaceURI()).thenReturn(null);
        when(nodeMock instanceof Element).thenReturn(true);
        when(((Element) nodeMock).getAttributeNode("xmlns:prefix")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        when(domNodePointer.getNamespaceResolver()).thenReturn(mock(NamespaceResolver.class));
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        when(namespaceResolver.getNamespaceURI("prefix")).thenReturn("http://example.com");
        String namespaceURI = namespaceResolver.getNamespaceURI("prefix");
        assertEquals("http://example.com", namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_MUes0_1() throws Exception {
        Element elementMock = org.mockito.Mockito.mock(Element.class);
        org.mockito.Mockito.when(elementMock.getNamespaceURI()).thenReturn("http://example.com");
        DOMNodePointer domNodePointer = new DOMNodePointer(elementMock, Locale.getDefault(), "id");
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        String prefix = namespaceResolver.getPrefix("http://example.com");
        assertNotNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_MUes0_2() throws Exception {
        Node nodeMock = org.mockito.Mockito.mock(Node.class);
        org.mockito.Mockito.when(nodeMock.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        org.mockito.Mockito.when(nodeMock.getNamespaceURI()).thenReturn("http://example.com");
        DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, Locale.getDefault(), "id");
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        String prefix = namespaceResolver.getPrefix("http://example.com");
        assertEquals("http://example.com", namespaceResolver.getNamespaceURI(prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NonCommentNode_jTWe0() throws Exception {
        Node node = mock(Node.class);
        NodeList nodeList = mock(NodeList.class);
        Element element = mock(Element.class);
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getFirstChild()).thenReturn(element);
        when(element.getTextContent()).thenReturn("some text");
        assertEquals("some text", domNodePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_NoDefaultNamespace_QfzV0() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(null);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Element element = (Element) node;
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        String defaultNamespace = namespaceResolver.getNamespaceURI("");
        assertNull(defaultNamespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointerByID_Nuln0_2() throws Exception {
        Node node = mock(Node.class);
        Document document = mock(Document.class);
        Element element = mock(Element.class);
        JXPathContext context = mock(JXPathContext.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, "id");
        when(document.getElementById(any(String.class))).thenReturn(element);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Pointer pointer = domNodePointer.getPointerByID(context, "id");
        assertEquals(domNodePointer, pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointerByID_ElementIsNull_FYyo0_1() throws Exception {
        Node node = mock(Node.class);
        Document document = mock(Document.class);
        Element element = mock(Element.class);
        JXPathContext context = mock(JXPathContext.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, "id");
        when(document.getElementById(any(String.class))).thenReturn(null);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Pointer pointer = domNodePointer.getPointerByID(context, "id");
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_P1_ZYUf0_1() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        context = mock(JXPathContext.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(variablePointer, node);
        when(node.cloneNode(true)).thenReturn(node);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(nodeList.item(any())).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        NodePointer result = domNodePointer.createChild(context, qName, 0, "value");
        assertEquals(domNodePointer, result.getParent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_P1_ZYUf0_2() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        context = mock(JXPathContext.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(variablePointer, node);
        when(node.cloneNode(true)).thenReturn(node);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(nodeList.item(any())).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        NodePointer result = domNodePointer.createChild(context, qName, 0, "value");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_P1_ZYUf0_3() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        context = mock(JXPathContext.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(variablePointer, node);
        when(node.cloneNode(true)).thenReturn(node);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(nodeList.item(any())).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        NodePointer result = domNodePointer.createChild(context, qName, 0, "value");
        assertEquals(qName, result.getName());
        assertNotNull(result.getNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withElementNode_xRTf0() throws Exception {
        nodeMock = mock(Node.class);
        attrMock = mock(Attr.class);
        parentMock = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(parentMock, nodeMock);
        when(nodeMock.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodeMock.getLocalName()).thenReturn("localName");
        when(domNodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        when(namespaceResolver.getPrefix("namespaceURI")).thenReturn("prefix");
        assertEquals("/prefix:localName", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withPINode_jdzY0() throws Exception {
        nodeMock = mock(Node.class);
        attrMock = mock(Attr.class);
        parentMock = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(parentMock, nodeMock);
        when(nodeMock.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        ProcessingInstruction piMock = mock(ProcessingInstruction.class);
        when(nodeMock).thenReturn(piMock);
        when(piMock.getTarget()).thenReturn("target");
        Field relativePositionField = DOMNodePointer.class.getDeclaredField("relativePosition");
        relativePositionField.setAccessible(true);
        relativePositionField.setInt(domNodePointer, 1);
        assertEquals("/processing-instruction('target')[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_1_fid1() throws Exception {
        node = mock(Node.class);
        nodePointer1 = mock(NodePointer.class);
        nodePointer2 = mock(NodePointer.class);
        namedNodeMap = mock(NamedNodeMap.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        Node node2 = mock(Node.class);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(nodePointer1.getBaseValue()).thenReturn(node2);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodePointer1.getBaseValue()).thenReturn(node2);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        assertEquals(0, domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_ProcessingInstructionTest_fid1() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        nodeTest = mock(NodeTest.class);
        nodeNameTest = mock(NodeNameTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        processingInstructionTest = mock(ProcessingInstructionTest.class);
        processingInstruction = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(processingInstruction.getTarget()).thenReturn("target");
        when(processingInstructionTest.getTarget()).thenReturn("target");
        assertTrue(DOMNodePointer.testNode(processingInstruction, processingInstructionTest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_EmptyStringValue_NPtL0_fid1() throws Exception {
        node = mock(Node.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        Field field = DOMNodePointer.class.getDeclaredField("node");
        field.setAccessible(true);
        field.set(domNodePointer, node);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        domNodePointer.setValue("");
        verify(node.getParentNode()).removeChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NodeValue_dbHR0_fid1() throws Exception {
        node = mock(Node.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        domNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        Field nodeField = DOMNodePointer.class.getDeclaredField("node");
        nodeField.setAccessible(true);
        nodeField.set(domNodePointer, node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node valueNode = mock(Node.class);
        domNodePointer.setValue(valueNode);
        verify(node).appendChild(valueNode.cloneNode(true));
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_hrVy0_fid1() throws Exception {
        Element element = mock(Element.class);
        Node nodeMock = mock(Node.class);
        Attr attr = mock(Attr.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, Locale.getDefault(), "id");
        when(nodeMock.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Node) nodeMock).getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Node) nodeMock).getNamespaceURI()).thenReturn(null);
        when(((NamespaceResolver) domNodePointer.getNamespaceResolver()).getPrefix("http://example.com")).thenReturn("prefix");
        when(nodeMock instanceof Element).thenReturn(true);
        when(((Element) nodeMock).getAttributeNode("xmlns:prefix")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        String namespaceURI = namespaceResolver.getNamespaceURI("prefix");
        assert "http://example.com".equals(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_MUes0_1_fid1() throws Exception {
        Node nodeMock = org.mockito.Mockito.mock(Node.class);
        org.mockito.Mockito.when(nodeMock.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Element elementMock = (Element) nodeMock;
        org.mockito.Mockito.when(elementMock.getNamespaceURI()).thenReturn("http://example.com");
        DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, Locale.getDefault(), "id");
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        String prefix = namespaceResolver.getPrefix("http://example.com");
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_MUes0_2_fid1() throws Exception {
        Node nodeMock = org.mockito.Mockito.mock(Node.class);
        org.mockito.Mockito.when(nodeMock.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Element elementMock = (Element) nodeMock;
        org.mockito.Mockito.when(elementMock.getNamespaceURI()).thenReturn("http://example.com");
        DOMNodePointer domNodePointer = new DOMNodePointer(nodeMock, Locale.getDefault(), "id");
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        String prefix = namespaceResolver.getPrefix("http://example.com");
        assertEquals("http://example.com", namespaceResolver.getNamespaceURI(prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NonCommentNode_jTWe0_fid1() throws Exception {
        Node node = mock(Node.class);
        NodeList nodeList = mock(NodeList.class);
        Element element = mock(Element.class);
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getTextContent()).thenReturn("some text");
        assertEquals("some text", domNodePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_acjq0() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://defaultNamespace");
        String defaultNamespace = domNodePointer.getNamespaceResolver().getNamespaceURI("");
        assertEquals("http://defaultNamespace", defaultNamespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_NoDefaultNamespace_QfzV0_fid1() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(null);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        String defaultNamespace = namespaceResolver.getNamespaceURI("");
        assertNull(defaultNamespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointerByID_Nuln0_1() throws Exception {
        Node node = mock(Node.class);
        Document document = mock(Document.class);
        Element element = mock(Element.class);
        JXPathContext context = mock(JXPathContext.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, "id");
        when(document.getElementById(any(String.class))).thenReturn(element);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(domNodePointer.getLocale()).thenReturn(locale);
        Pointer pointer = domNodePointer.getPointerByID(context, "id");
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointerByID_Nuln0_2_fid1() throws Exception {
        Node node = mock(Node.class);
        Document document = mock(Document.class);
        Element element = mock(Element.class);
        JXPathContext context = mock(JXPathContext.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, "id");
        when(document.getElementById(any(String.class))).thenReturn(element);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(domNodePointer.getLocale()).thenReturn(locale);
        Pointer pointer = domNodePointer.getPointerByID(context, "id");
        assertTrue(pointer instanceof DOMNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointerByID_ElementIsNull_FYyo0_1_fid1() throws Exception {
        Node node = mock(Node.class);
        Document document = mock(Document.class);
        Element element = mock(Element.class);
        JXPathContext context = mock(JXPathContext.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, "id");
        when(document.getElementById(any(String.class))).thenReturn(null);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(domNodePointer.getLocale()).thenReturn(locale);
        Pointer pointer = domNodePointer.getPointerByID(context, "id");
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointerByID_ElementIsNull_FYyo0_2() throws Exception {
        Node node = mock(Node.class);
        Document document = mock(Document.class);
        Element element = mock(Element.class);
        JXPathContext context = mock(JXPathContext.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, "id");
        when(document.getElementById(any(String.class))).thenReturn(null);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(domNodePointer.getLocale()).thenReturn(locale);
        Pointer pointer = domNodePointer.getPointerByID(context, "id");
        assertTrue(pointer instanceof NullPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_P1_ZYUf0_1_fid1() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        context = mock(JXPathContext.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(variablePointer, node);
        when(node.cloneNode(any())).thenReturn(node);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(nodeList.item(any())).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        NodePointer result = domNodePointer.createChild(context, qName, 0, "value");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_P1_ZYUf0_2_fid1() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        context = mock(JXPathContext.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(variablePointer, node);
        when(node.cloneNode(any())).thenReturn(node);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(nodeList.item(any())).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        NodePointer result = domNodePointer.createChild(context, qName, 0, "value");
        assertEquals("value", result.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_P1_ZYUf0_3_fid1() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        context = mock(JXPathContext.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(variablePointer, node);
        when(node.cloneNode(any())).thenReturn(node);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(nodeList.item(any())).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        NodePointer result = domNodePointer.createChild(context, qName, 0, "value");
        assertEquals(qName, result.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode_pdUe0_fid1() throws Exception {
        node = mock(Node.class);
        Locale locale = mock(Locale.class);
        domNodePointer = new DOMNodePointer(node, locale, null);
        when(node.hashCode()).thenReturn(123);
        assertEquals(123, domNodePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_BZMn0_1_fid1() throws Exception {
        node = mock(Node.class);
        Locale locale = Locale.US; // or any other locale
        domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.hasChildNodes()).thenReturn(true);
        when(node.hasChildNodes()).thenReturn(false);
        assertFalse(domNodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode15_hwNW14_UuZh0_fid1() {
        String s1 = "";
        String s2 = null;
        assertTrue(s1 == null ? s2 == null : s1.equals(s2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withElementNode_xRTf0_fid1() throws Exception {
        nodeMock = mock(Node.class);
        attrMock = mock(Attr.class);
        parentMock = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(parentMock, nodeMock);
        when(nodeMock.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(DOMNodePointer.getLocalName(nodeMock)).thenReturn("localName");
        when(domNodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        when(namespaceResolver.getPrefix("namespaceURI")).thenReturn("prefix");
        assertEquals("/prefix:localName", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withTextNode_ygbz0_fid1() throws Exception {
        nodeMock = mock(Node.class);
        attrMock = mock(Attr.class);
        parentMock = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(parentMock, nodeMock);
        when(nodeMock.getNodeType()).thenReturn(Node.TEXT_NODE);
        assertEquals("/text()[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withPINode_jdzY0_fid1() throws Exception {
        nodeMock = mock(Node.class);
        attrMock = mock(Attr.class);
        parentMock = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(parentMock, nodeMock);
        when(nodeMock.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) nodeMock).getTarget()).thenReturn("target");
        Field relativePositionField = DOMNodePointer.class.getDeclaredField("relativePosition");
        relativePositionField.setAccessible(true);
        relativePositionField.setInt(domNodePointer, 1);
        assertEquals("/processing-instruction('target')[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_CDATASectionNode_PIOD3_pEId0_fid1() {
        Document document = new org.apache.xerces.dom.DocumentImpl();
        Node node = document.createCDATASection("some data");
        DOMNodePointer parent = new DOMNodePointer(node, Locale.US);
        DOMNodePointer pointer = new DOMNodePointer(parent, node);
        assertEquals("/text()[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        node = mock(Node.class);
        nodePointer1 = mock(NodePointer.class);
        nodePointer2 = mock(NodePointer.class);
        namedNodeMap = mock(NamedNodeMap.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        assertEquals(0, domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2));
        when(nodePointer1.getBaseValue()).thenReturn(node);
        Node node2 = mock(Node.class);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        assertEquals(-1, domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2));
        when(nodePointer1.getBaseValue()).thenReturn(node2);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        assertEquals(1, domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2));
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        assertEquals(0, domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2));
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        assertEquals(-1, domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2));
        when(nodePointer1.getBaseValue()).thenReturn(node2);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        assertEquals(1, domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute() throws Exception {
        element = mock(Element.class);
        node = element;
        context = mock(JXPathContext.class);
        name = new QName("prefix", "localName");
        namespaceResolver = mock(NamespaceResolver.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        // Test with prefix
        when(namespaceResolver.getNamespaceURI("prefix")).thenReturn("namespaceURI");
        NodePointer result = domNodePointer.createAttribute(context, name);
        verify(element).setAttributeNS("namespaceURI", "prefix:localName", "");
        assertNotNull(result);
        // Test without prefix
        name = new QName("localName");
        when(element.hasAttribute("localName")).thenReturn(false);
        result = domNodePointer.createAttribute(context, name);
        verify(element).setAttribute("localName", "");
        assertNotNull(result);
    }
}