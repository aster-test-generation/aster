/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathBasicBeanInfo_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_withAtomicTrue_pgBu0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        assertTrue(jXPathBasicBeanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_withAtomicFalse_Yhsk1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, false);
        assertFalse(jXPathBasicBeanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_withoutAtomic_Pdoq2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        assertFalse(jXPathBasicBeanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_withDynamicPropertyHandlerClass_oZHW3() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        assertFalse(jXPathBasicBeanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass1_JUgW0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        assertNull(jXPathBasicBeanInfo.getDynamicPropertyHandlerClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass2_wNGz1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        assertNull(jXPathBasicBeanInfo.getDynamicPropertyHandlerClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass3_AuWa2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, Object.class);
        assertEquals(Object.class, jXPathBasicBeanInfo.getDynamicPropertyHandlerClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors1_iceE0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors2_dFOg1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors3_TKbA2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors4_Nehu3() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors5_ecVW4() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringAtomic_zHgC0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        String result = beanInfo.toString();
        assert result.contains("atomic");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringDynamic_MARp1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, false);
        String result = beanInfo.toString();
        assertFalse(result.contains("dynamic"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringAtomicDynamic_fVSz2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        String result = beanInfo.toString();
        assert result.contains("atomic");
        assertFalse(beanInfo.isDynamic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNoFlags_RJGI3() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        String result = beanInfo.toString();
        assert !result.contains("atomic");
        assert !result.contains("dynamic");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor1_BxZm0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor propertyDescriptor = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        assertNull(propertyDescriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor2_hWvm1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        PropertyDescriptor propertyDescriptor = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        assertNull(propertyDescriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_IYPk2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        PropertyDescriptor propertyDescriptor = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        assertNull(propertyDescriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamic_true_udPf0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        assertTrue(beanInfo.isDynamic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamic_false_PDFz1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        assertFalse(beanInfo.isDynamic());
    }
}