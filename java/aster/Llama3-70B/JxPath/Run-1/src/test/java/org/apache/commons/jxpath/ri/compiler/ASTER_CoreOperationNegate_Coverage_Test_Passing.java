/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationNegate_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_VMSP0() {
        Constant constant = new Constant("10");
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        String symbol = coreOperationNegate.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_EnAV0() {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant("string"));
        boolean result = coreOperationNegate.isSymmetric();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetPrecedence_tFJQ0() {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant("string"));
        int precedence = coreOperationNegate.getPrecedence();
        assertEquals(CoreOperationNegate.NEGATE_PRECEDENCE, precedence);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetPrecedence_GkPa1() {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant("string"));
        int expectedPrecedence = CoreOperationNegate.NEGATE_PRECEDENCE; // assuming NEGATE_PRECEDENCE is a constant in CoreOperationNegate class
        int actualPrecedence = coreOperationNegate.getPrecedence();
        assertEquals(expectedPrecedence, actualPrecedence);
    }
}