/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointerFactory_Test_Failing {
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName qName;
    private VariablePointerFactory variablePointerFactory;
    VariablePointerFactory variablepointerfactory;
    JXPathContext jXPathContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_NullName_ThrowsNullPointerException_cCWK3() {
        VariablePointerFactory factory = new VariablePointerFactory();
        Object object = new Object();
        try {
            factory.createNodePointer(null, object, Locale.US);
            fail();
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_MQvP0() {
        VariablePointerFactory variablePointerFactory = new VariablePointerFactory();
        int result = variablePointerFactory.getOrder();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_aado0() throws Exception {
        VariablePointerFactory variablePointerFactory = new VariablePointerFactory();
        NodePointer nodePointer = mock(NodePointer.class);
        QName qName = new QName("qualifiedName");
        Object object = new Object();
        when(nodePointer.newChildNodePointer(any(NodePointer.class), eq(qName), eq(object))).thenReturn(nodePointer);
        NodePointer result = nodePointer.newChildNodePointer(nodePointer, qName, object);
        assertSame(nodePointer, result);
        verify(nodePointer, times(1)).newChildNodePointer(nodePointer, qName, object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_aado0_fid2() throws Exception {
        VariablePointerFactory variablePointerFactory = new VariablePointerFactory();
        NodePointer nodePointer = mock(NodePointer.class);
        QName qName = new QName("qualifiedName");
        Object object = new Object();
        when(nodePointer.newChildNodePointer(nodePointer, qName, object)).thenReturn(nodePointer);
        NodePointer result = nodePointer.newChildNodePointer(nodePointer, qName, object);
        assertEquals(nodePointer, result);
        verify(nodePointer, times(1)).newChildNodePointer(nodePointer, qName, object);
    }
}