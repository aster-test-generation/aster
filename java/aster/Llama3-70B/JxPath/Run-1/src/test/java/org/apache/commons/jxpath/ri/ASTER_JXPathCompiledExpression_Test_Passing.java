/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Passing {
    private Expression expression;
    private String xpath;
    JXPathCompiledExpression jxpathcompiledexpression;
    JXPathContext context;
    JXPathContextReferenceImpl contextReferenceImpl;
    JXPathContextReferenceImpl contextReference;
    private Object value;
    Object result;
    Object returnValue;
    Pointer pointer;
    Iterator iterator;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPath_RjdA0() {
        Constant constant = new Constant("string");
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        assertEquals("xpath", jXPathCompiledExpression.getXPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_StringConstant_NlXJ0() {
        Constant constant = new Constant("string");
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        assertEquals("xpath", jXPathCompiledExpression.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionWithStringConstant_OekL0() {
        Constant constant = new Constant("string");
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        Expression expression = jXPathCompiledExpression.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_BnCC0() {
        JXPathCompiledExpression jxpathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("string"));
        JXPathContext jxpathContext = JXPathContext.newContext(new Object());
        JXPathContextReferenceImpl jxpathContextReferenceImpl = (JXPathContextReferenceImpl) jxpathContext;
        Pointer pointer = jxpathCompiledExpression.getPointer(jxpathContext, "xpath");
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_Kktu0_qaaZ0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JXPathCompiledExpression expr = new JXPathCompiledExpression("xpath", new Constant("string"));
        Iterator iterator = expr.iterate(context);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_kiAN0_OsvC0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("xpath", new Constant("string"));
        Object result = compiledExpression.getValue(context);
        assertNotNull(result);
    }
}