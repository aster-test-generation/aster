/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationOr_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetSymbol_CBLq0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[0]);
        String symbol = coreOperationOr.getSymbol();
        assertEquals("or", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetSymbol_QXzr1() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[0]);
        String result = coreOperationOr.getSymbol();
        assertEquals("or", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void isSymmetric_ReturnsTrue_ZGKF0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[]{});
        boolean result = coreOperationOr.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetPrecedence_YETZ0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[]{});
        int precedence = coreOperationOr.getPrecedence();
        assertEquals(CoreOperationOr.OR_PRECEDENCE, precedence);
    }
}