/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Collections;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Failing {
    private Expression expression;
    private String xpath;
    JXPathCompiledExpression jxpathcompiledexpression;
    JXPathContext context;
    JXPathContextReferenceImpl contextReferenceImpl;
    JXPathContextReferenceImpl contextReference;
    private Object value;
    Object result;
    Object returnValue;
    Pointer pointer;
    Iterator iterator;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremovePath() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        contextReferenceImpl = mock(JXPathContextReferenceImpl.class);
        when(context).thenReturn(contextReferenceImpl);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_constant"));
        jxpathcompiledexpression.removePath(context);
        verify(contextReferenceImpl).removePath(xpath, expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        expression = mock(Expression.class);
        xpath = "some/xpath";
        context = mock(JXPathContext.class);
        contextReference = mock(JXPathContextReferenceImpl.class);
        when(context).thenReturn(contextReference);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some constant"));
        Object value = "some value";
        jxpathcompiledexpression.setValue(context, value);
        verify(contextReference).setValue(xpath, expression, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        contextReference = mock(JXPathContextReferenceImpl.class);
        when(context).thenReturn(contextReference);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_string"));
        Pointer pointer = mock(Pointer.class);
        when(contextReference.createPath(xpath, expression)).thenReturn(pointer);
        Pointer result = jxpathcompiledexpression.createPath(context);
        assertEquals(pointer, result);
        verify(contextReference).createPath(xpath, expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePathAndSetValue() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        context = mock(JXPathContext.class);
        contextReference = mock(JXPathContextReferenceImpl.class);
        value = new Object();
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        when(contextReference.createPathAndSetValue(xpath, expression, value)).thenReturn(mock(Pointer.class));
        when(((JXPathContextReferenceImpl) context)).thenReturn(contextReference);
        Pointer result = jxpathcompiledexpression.createPathAndSetValue(context, value);
        assertNotNull(result);
        verify(contextReference).createPathAndSetValue(xpath, expression, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointer() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        contextReference = mock(JXPathContextReferenceImpl.class);
        pointer = mock(Pointer.class);
        when(contextReference.getPointer(xpath, expression)).thenReturn(pointer);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_string"));
        Pointer result = jxpathcompiledexpression.getPointer(context, xpath);
        assertEquals(pointer, result);
        verify(contextReference).getPointer(xpath, expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiteratePointers() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        contextReferenceImpl = mock(JXPathContextReferenceImpl.class);
        iterator = mock(Iterator.class);
        when(contextReferenceImpl.iteratePointers(xpath, expression)).thenReturn(iterator);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_constant"));
        Iterator result = jxpathcompiledexpression.iteratePointers(context);
        verify(contextReferenceImpl).iteratePointers(xpath, expression);
        assertEquals(iterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiterate() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        contextReference = mock(JXPathContextReferenceImpl.class);
        when(contextReference.iterate(xpath, expression)).thenReturn(Collections.emptyIterator());
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_constant"));
        Iterator iterator = jxpathcompiledexpression.iterate(context);
        assertNotNull(iterator);
        verify(contextReference).iterate(xpath, expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ozYD0_1() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_constant"));
        when(context.iterate(xpath)).thenReturn(Collections.singleton("result").iterator());
        Iterator<?> iterator = jxpathcompiledexpression.iterate((JXPathContextReferenceImpl) context);
        verify(context).iterate(xpath);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ozYD0_2() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_constant"));
        when(context.iterate(xpath)).thenReturn(Collections.singleton("result").iterator());
        Iterator<?> iterator = jxpathcompiledexpression.iterate((JXPathContextReferenceImpl) context);
        verify(context).iterate(xpath);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ozYD0_3() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_constant"));
        when(context.iterate(xpath)).thenReturn(Collections.singleton("result").iterator());
        Iterator iterator = ((JXPathContextReferenceImpl) context).iterate(xpath);
        verify(context).iterate(xpath);
        assertEquals("result", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NdVy0_IxAm0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("xpath", new Constant("string"));
        compiledExpression.iterate(context);
        assertNull(context.getValue("xpath"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_PFlA0_EWbC0() {
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("child::*", new Constant("string"));
        JXPathContext context = JXPathContext.newContext(new Object());
        Pointer pointer = jXPathCompiledExpression.createPath(context);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate_Rflh0() throws Exception {
        jxpathcompiledexpression = new JXPathCompiledExpression("xpath", new Constant("string"));
        JXPathContextReferenceImpl contextReference = mock(JXPathContextReferenceImpl.class);
        when(contextReference.iterate(anyString(), any())).thenReturn(Collections.emptyIterator());
        Iterator iterator = jxpathcompiledexpression.iterate(contextReference);
        verify(contextReference, times(1)).iterate("xpath", new Constant("string"));
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ozYD0_1_fid1() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_constant"));
        when(context.iterate(xpath)).thenReturn(Collections.singleton("result").iterator());
        Iterator iterator = jxpathcompiledexpression.iterate(context);
        verify(context).iterate(xpath);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ozYD0_2_fid1() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_constant"));
        when(context.iterate(xpath)).thenReturn(Collections.singleton("result").iterator());
        Iterator iterator = jxpathcompiledexpression.iterate(context);
        verify(context).iterate(xpath);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ozYD0_3_fid1() throws Exception {
        expression = mock(Expression.class);
        xpath = "some_xpath";
        context = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("some_constant"));
        when(context.iterate(xpath)).thenReturn(Collections.singleton("result").iterator());
        Iterator iterator = jxpathcompiledexpression.iterate(context);
        verify(context).iterate(xpath);
        assertEquals("result", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NdVy0_IxAm0_fid1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("xpath", new Constant("string"));
        compiledExpression.iterate(context);
        assertEquals(new Object(), context.getValue("xpath"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_PFlA0_EWbC0_fid1() {
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("string"));
        JXPathContext context = JXPathContext.newContext(new Object());
        Pointer pointer = jXPathCompiledExpression.createPath(context);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate_Rflh0_fid1() throws Exception {
        jxpathcompiledexpression = new JXPathCompiledExpression("xpath", new Constant("string"));
        JXPathContextReferenceImpl contextReference = mock(JXPathContextReferenceImpl.class);
        JXPathContext context = mock(JXPathContext.class);
        when(contextReference.iterate(anyString(), any())).thenReturn(Collections.emptyIterator());
        when(context).thenReturn(contextReference);
        Iterator iterator = jxpathcompiledexpression.iterate(context);
        verify(contextReference, times(1)).iterate("xpath", new Constant("string"));
        assertNotNull(iterator);
    }
}