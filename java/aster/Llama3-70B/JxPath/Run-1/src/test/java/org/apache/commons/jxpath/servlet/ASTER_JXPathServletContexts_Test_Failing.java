/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Failing {
    private static JXPathContextFactory factory;
    JXPathServletContexts jxpathservletcontexts;
    ServletContext servletcontext;
    JXPathContext jxpathcontext;
    HttpSession httpsession;
    JXPathContext parentContext;
    HttpSessionAndServletContext handle;
    JXPathContext context;
    PageContext pagecontext;
    ServletRequest request;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_GyGK0_1() {
        ServletContext servletContext = new org.springframework.mock.web.MockServletContext();
        JXPathContext context = JXPathServletContexts.getApplicationContext(servletContext);
        assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_GyGK0() {
        ServletContext servletContext = new MockServletContext();
        JXPathContext context = JXPathServletContexts.getApplicationContext(servletContext);
        assertNotNull(context);
        assertEquals(servletContext, context.getContextBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_GyGK0_1_fid2() {
        ServletContext servletContext = new MockServletContext();
        JXPathContext context = JXPathServletContexts.getApplicationContext(servletContext);
        assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_GyGK0_2_fid2() {
        ServletContext servletContext = new MockServletContext();
        JXPathContext context = JXPathServletContexts.getApplicationContext(servletContext);
        assertEquals(servletContext, context.getContextBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRequestContext_UWsl0() throws Exception {
        servletcontext = mock(ServletContext.class);
        httpsession = mock(HttpSession.class);
        request = mock(ServletRequest.class);
        parentContext = mock(JXPathContext.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        when(((HttpServletRequest) request).getSession(false)).thenReturn(httpsession);
        when(httpsession != null).thenReturn(true);
        when(factory.newContext(parentContext, new ServletRequestAndContext(request, servletcontext))).thenReturn(parentContext);
        JXPathContext result = jxpathservletcontexts.getRequestContext(request, servletcontext);
        verify(request).setAttribute(Constants.JXPATH_CONTEXT, result);
        assertEquals(parentContext, result);
    }
}