/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Failing {
    ExpressionPath expressionPath;
    EvalContext evalContext;
    Constant constant;
    Expression[] predicates;
    Step[] steps;
    Constant expression;
    EvalContext context;
    private InitialContext initialContext;
    private NodePointer nodePointer;
    private UnionContext unionContext;
    private PredicateContext predicateContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_CoreOperation_mukb0() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath ep = new ExpressionPath(expression, predicates, steps);
        assertEquals("string", ep.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ExpressionPath_EXPh1() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath ep = new ExpressionPath(expression, predicates, steps);
        assertEquals("(string)", ep.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withPredicates_NZoK3() {
        Constant expression = new Constant("string");
        Expression predicate1 = new Constant("predicate1");
        Expression predicate2 = new Constant("predicate2");
        Expression[] predicates = new Expression[]{predicate1, predicate2};
        Step[] steps = new Step[0];
        ExpressionPath ep = new ExpressionPath(expression, predicates, steps);
        assertEquals("string[predicate1][predicate2]", ep.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withNullPredicates_zJvY7() {
        Constant expression = new Constant("string");
        Expression[] predicates = null;
        Step[] steps = new Step[0];
        ExpressionPath ep = new ExpressionPath(expression, predicates, steps);
        assertEquals("string", ep.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() throws Exception {
        constant = new Constant("someString");
        predicates = new Expression[0];
        steps = new Step[0];
        expressionPath = new ExpressionPath(constant, predicates, steps);
        evalContext = mock(EvalContext.class);
        // given
        when(evalContext.getJXPathContext()).thenReturn(mock(JXPathContext.class));
        // when
        Object result = expressionPath.computeValue(evalContext);
        // then
        verify(evalContext).getJXPathContext();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ExpressionIsContextDependent_rHrC0() {
        Constant expression = new Constant("string");
        ExpressionPath ep = new ExpressionPath(expression, null, null);
        assertTrue(ep.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute() throws Exception {
        expression = mock(Constant.class);
        predicates = new Expression[0];
        steps = new Step[0];
        expressionPath = new ExpressionPath(expression, predicates, steps);
        context = mock(EvalContext.class);
        // given
        when(expressionPath.expressionPath(context, false)).thenReturn("result");
        // when
        Object result = expressionPath.compute(context);
        // then
        assertEquals("result", result);
        verify(expressionPath).expressionPath(context, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpressionPath_Ycoj0_1() throws Exception {
        Constant constant = new Constant("string");
        Expression expression = mock(Expression.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(constant);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        EvalContext evalContext = mock(EvalContext.class);
        InitialContext initialContext = mock(InitialContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        UnionContext unionContext = mock(UnionContext.class);
        PredicateContext predicateContext = mock(PredicateContext.class);
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        when(expression.compute(any(EvalContext.class))).thenReturn(initialContext);
        Object result = expressionPath.expressionPath(evalContext, true);
        EvalContext evalContextInstance = mock(EvalContext.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(evalContextInstance);
        result = expressionPath.expressionPath(evalContext, true);
        Object obj = new Object();
        when(expression.compute(any(EvalContext.class))).thenReturn(obj);
        when(evalContext.getRootContext().getConstantContext(obj)).thenReturn(mock(EvalContext.class));
        result = expressionPath.expressionPath(evalContext, true);
        when(expressionPath.isSimpleExpressionPath()).thenReturn(true);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        result = expressionPath.expressionPath(evalContext, true);
        predicates = new Expression[]{mock(Expression.class)};
        expressionPath = new ExpressionPath(constant, predicates, steps);
        result = expressionPath.expressionPath(evalContext, true);
        assertEquals(initialContext, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpressionPath_Ycoj0_2() throws Exception {
        Constant constant = new Constant("string");
        Expression expression = mock(Expression.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(constant);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        EvalContext evalContext = mock(EvalContext.class);
        InitialContext initialContext = mock(InitialContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        UnionContext unionContext = mock(UnionContext.class);
        PredicateContext predicateContext = mock(PredicateContext.class);
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        when(expression.compute(any(EvalContext.class))).thenReturn(initialContext);
        Object result = expressionPath.expressionPath(evalContext, true);
        EvalContext evalContextInstance = mock(EvalContext.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(evalContextInstance);
        result = expressionPath.expressionPath(evalContext, true);
        Object obj = new Object();
        when(expression.compute(any(EvalContext.class))).thenReturn(obj);
        when(evalContext.getRootContext().getConstantContext(obj)).thenReturn(mock(EvalContext.class));
        result = expressionPath.expressionPath(evalContext, true);
        when(expressionPath.isSimpleExpressionPath()).thenReturn(true);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        result = expressionPath.expressionPath(evalContext, true);
        predicates = new Expression[]{mock(Expression.class)};
        expressionPath = new ExpressionPath(constant, predicates, steps);
        result = expressionPath.expressionPath(evalContext, true);
        assertEquals(evalContextInstance, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpressionPath_Ycoj0_3() throws Exception {
        Constant constant = new Constant("string");
        Expression expression = mock(Expression.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(constant);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        EvalContext evalContext = mock(EvalContext.class);
        InitialContext initialContext = mock(InitialContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        UnionContext unionContext = mock(UnionContext.class);
        PredicateContext predicateContext = mock(PredicateContext.class);
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        when(expression.compute(any(EvalContext.class))).thenReturn(initialContext);
        Object result = expressionPath.expressionPath(evalContext, true);
        EvalContext evalContextInstance = mock(EvalContext.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(evalContextInstance);
        result = expressionPath.expressionPath(evalContext, true);
        Object obj = new Object();
        when(expression.compute(any(EvalContext.class))).thenReturn(obj);
        when(evalContext.getRootContext().getConstantContext(obj)).thenReturn(mock(EvalContext.class));
        result = expressionPath.expressionPath(evalContext, true);
        when(expressionPath.isSimpleExpressionPath()).thenReturn(true);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        result = expressionPath.expressionPath(evalContext, true);
        predicates = new Expression[]{mock(Expression.class)};
        expressionPath = new ExpressionPath(constant, predicates, steps);
        result = expressionPath.expressionPath(evalContext, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpressionPath_Ycoj0_1_fid1() throws Exception {
        Constant constant = new Constant("string");
        Expression expression = mock(Expression.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(constant);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        EvalContext evalContext = mock(EvalContext.class);
        InitialContext initialContext = mock(InitialContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        UnionContext unionContext = mock(UnionContext.class);
        PredicateContext predicateContext = mock(PredicateContext.class);
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        when(expression.compute(any(EvalContext.class))).thenReturn(initialContext);
        Object result = expressionPath.expressionPath(evalContext, true);
        assertNotNull(result);
        EvalContext evalContextInstance = mock(EvalContext.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(evalContextInstance);
        result = expressionPath.expressionPath(evalContext, true);
        assertNotNull(result);
        Object obj = new Object();
        when(expression.compute(any(EvalContext.class))).thenReturn(obj);
        when(evalContext.getRootContext().getConstantContext(obj)).thenReturn(mock(EvalContext.class));
        result = expressionPath.expressionPath(evalContext, true);
        assertNotNull(result);
        when(expressionPath.isSimpleExpressionPath()).thenReturn(true);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        result = expressionPath.expressionPath(evalContext, true);
        assertNotNull(result);
        predicates = new Expression[]{mock(Expression.class)};
        expressionPath = new ExpressionPath(constant, predicates, steps);
        result = expressionPath.expressionPath(evalContext, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpressionPath_Ycoj0_3_fid1() throws Exception {
        Constant constant = new Constant("string");
        Expression expression = mock(Expression.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(constant);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        EvalContext evalContext = mock(EvalContext.class);
        InitialContext initialContext = mock(InitialContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        UnionContext unionContext = mock(UnionContext.class);
        PredicateContext predicateContext = mock(PredicateContext.class);
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        when(expression.compute(any(EvalContext.class))).thenReturn(initialContext);
        EvalContext result = (EvalContext) expressionPath.expressionPath(evalContext, true);
        EvalContext evalContextInstance = mock(EvalContext.class);
        when(expression.compute(any(EvalContext.class))).thenReturn(evalContextInstance);
        result = (EvalContext) expressionPath.expressionPath(evalContext, true);
        Object obj = new Object();
        when(expression.compute(any(EvalContext.class))).thenReturn(obj);
        when(evalContext.getRootContext().getConstantContext(obj)).thenReturn(mock(EvalContext.class));
        result = (EvalContext) expressionPath.expressionPath(evalContext, true);
        when(expressionPath.isSimpleExpressionPath()).thenReturn(true);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        result = (EvalContext) expressionPath.expressionPath(evalContext, true);
        predicates = new Expression[]{mock(Expression.class)};
        expressionPath = new ExpressionPath(constant, predicates, steps);
        result = (EvalContext) expressionPath.expressionPath(evalContext, true);
        assertNotNull(result);
    }
}