/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PredicateContext_Test_Failing {
    @Mock
    private Expression nameTestExpression;
    @Mock
    private PropertyPointer dynamicPropertyPointer;
    private PredicateContext predicateContext;
    private NamespaceContext namespaceContext;
    private Constant expression;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private Constant expressionConstant;
    @Mock
    private Iterator iterator;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private Object pred;
    private boolean done = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_imOU0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant constant = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        assertTrue(predicateContext.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode1_ZErF0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        assertTrue(predicateContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode2_FHIl1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant(1);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        assertTrue(predicateContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode7_sebZ6() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        predicateContext.getPosition();
        assertTrue(predicateContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode8_yiMY7() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant(1);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        predicateContext.getPosition();
        assertTrue(predicateContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet() throws Exception {
        parentContext = mock(NamespaceContext.class);
        expression = mock(Constant.class);
        predicateContext = new PredicateContext(parentContext, expression);
        when(parentContext.nextSet()).thenReturn(true);
        assertTrue(predicateContext.nextSet());
        verify(parentContext).nextSet();
        verify(predicateContext).reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_pyww0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant constant = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        assertTrue(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_dynamicPropertyPointer_HnSi0() throws Exception {
        predicateContext = new PredicateContext(parentContext, new Constant("expression"));
        NodePointer nodePointer = null; // Initialize nodePointer
        when(predicateContext.setPosition(1)).thenReturn(true);
        NodePointer result = predicateContext.getCurrentNodePointer();
        assertNotNull(result); // Assert that result is not null
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_HIjt1_spQm0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant constant = new Constant(1);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        assertTrue(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition5_ZZSa4_IHrJ0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant constant = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        assertFalse(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_NameTestExpressionIsNull_ReturnsTrue_pCmA0_WkoV0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, new Constant("string"));
        assertTrue(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_fegn0_gykg0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant constant = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        predicateContext.nextSet();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode5_ROke4_lMpk0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        namespaceContext.setPosition(1);
        assertTrue(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode6_rCDC5_roqu0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant(1);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        namespaceContext.setPosition(1);
        assertTrue(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode9_yZpg8_xreI0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        assertTrue(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode10_DzrA9_GbKv0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant(1);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        assertTrue(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_NameTestExpressionIsNull_ReturnsFalse_pCmA0_WkoV0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, new Constant("string"));
        assertFalse(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode5_ROke4_lMpk0_fid2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        namespaceContext.setPosition(1);
        assertNotNull(predicateContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode6_rCDC5_roqu0_fid2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        Constant expression = new Constant(1);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        namespaceContext.setPosition(1);
        assertNotNull(predicateContext.nextSet());
    }
}