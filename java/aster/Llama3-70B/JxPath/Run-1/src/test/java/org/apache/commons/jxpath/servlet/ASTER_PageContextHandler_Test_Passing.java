/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Arrays;
import java.util.Enumeration;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.servlet.jsp.PageContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PageContextHandler_Test_Passing {
    @Mock
    private PageContext pageContext;
    private PageContextHandler pagecontexthandler;
    PageContext pageContextMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty() throws Exception {
        pagecontexthandler = new PageContextHandler();
        pageContextMock = Mockito.mock(PageContext.class);
        // given
        String property = "someProperty";
        Object expectedValue = "someValue";
        Mockito.when(pageContextMock.findAttribute(property)).thenReturn(expectedValue);
        // when
        Object result = pagecontexthandler.getProperty(pageContextMock, property);
        // then
        Assertions.assertEquals(expectedValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetProperty() throws Exception {
        pagecontexthandler = new PageContextHandler();
        pageContextMock = Mockito.mock(PageContext.class);
        String property = "testProperty";
        Object value = "testValue";
        pagecontexthandler.setProperty(pageContextMock, property, value);
        Mockito.verify(pageContextMock).setAttribute(property, value, PageContext.PAGE_SCOPE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ncbj0_1() throws Exception {
        PageContextHandler pagecontexthandler = new PageContextHandler();
        Vector<String> pageScopeVector = new Vector<String>(Arrays.asList("pageAttr1", "pageAttr2"));
        Vector<String> requestScopeVector = new Vector<String>(Arrays.asList("requestAttr1", "requestAttr2"));
        Vector<String> sessionScopeVector = new Vector<String>(Arrays.asList("sessionAttr1", "sessionAttr2"));
        Vector<String> applicationScopeVector = new Vector<String>(Arrays.asList("applicationAttr1", "applicationAttr2"));
        Enumeration<String> pageScopeEnum = pageScopeVector.elements();
        Enumeration<String> requestScopeEnum = requestScopeVector.elements();
        Enumeration<String> sessionScopeEnum = sessionScopeVector.elements();
        Enumeration<String> applicationScopeEnum = applicationScopeVector.elements();
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationScopeEnum);
        String[] propertyNames = pagecontexthandler.getPropertyNames(pageContext);
        assertEquals(8, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ncbj0_2() throws Exception {
        PageContextHandler pagecontexthandler = new PageContextHandler();
        Vector<String> pageScopeVector = new Vector<String>(Arrays.asList("pageAttr1", "pageAttr2"));
        Vector<String> requestScopeVector = new Vector<String>(Arrays.asList("requestAttr1", "requestAttr2"));
        Vector<String> sessionScopeVector = new Vector<String>(Arrays.asList("sessionAttr1", "sessionAttr2"));
        Vector<String> applicationScopeVector = new Vector<String>(Arrays.asList("applicationAttr1", "applicationAttr2"));
        Enumeration<String> pageScopeEnum = pageScopeVector.elements();
        Enumeration<String> requestScopeEnum = requestScopeVector.elements();
        Enumeration<String> sessionScopeEnum = sessionScopeVector.elements();
        Enumeration<String> applicationScopeEnum = applicationScopeVector.elements();
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationScopeEnum);
        String[] propertyNames = pagecontexthandler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(propertyNames).contains("pageAttr1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ncbj0_3() throws Exception {
        PageContextHandler pagecontexthandler = new PageContextHandler();
        Vector<String> pageScopeVector = new Vector<String>(Arrays.asList("pageAttr1", "pageAttr2"));
        Vector<String> requestScopeVector = new Vector<String>(Arrays.asList("requestAttr1", "requestAttr2"));
        Vector<String> sessionScopeVector = new Vector<String>(Arrays.asList("sessionAttr1", "sessionAttr2"));
        Vector<String> applicationScopeVector = new Vector<String>(Arrays.asList("applicationAttr1", "applicationAttr2"));
        Enumeration<String> pageScopeEnum = pageScopeVector.elements();
        Enumeration<String> requestScopeEnum = requestScopeVector.elements();
        Enumeration<String> sessionScopeEnum = sessionScopeVector.elements();
        Enumeration<String> applicationScopeEnum = applicationScopeVector.elements();
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationScopeEnum);
        String[] propertyNames = pagecontexthandler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(propertyNames).contains("pageAttr2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ncbj0_4() throws Exception {
        PageContextHandler pagecontexthandler = new PageContextHandler();
        Vector<String> pageScopeVector = new Vector<String>(Arrays.asList("pageAttr1", "pageAttr2"));
        Vector<String> requestScopeVector = new Vector<String>(Arrays.asList("requestAttr1", "requestAttr2"));
        Vector<String> sessionScopeVector = new Vector<String>(Arrays.asList("sessionAttr1", "sessionAttr2"));
        Vector<String> applicationScopeVector = new Vector<String>(Arrays.asList("applicationAttr1", "applicationAttr2"));
        Enumeration<String> pageScopeEnum = pageScopeVector.elements();
        Enumeration<String> requestScopeEnum = requestScopeVector.elements();
        Enumeration<String> sessionScopeEnum = sessionScopeVector.elements();
        Enumeration<String> applicationScopeEnum = applicationScopeVector.elements();
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationScopeEnum);
        String[] propertyNames = pagecontexthandler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(propertyNames).contains("requestAttr1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ncbj0_5() throws Exception {
        PageContextHandler pagecontexthandler = new PageContextHandler();
        Vector<String> pageScopeVector = new Vector<String>(Arrays.asList("pageAttr1", "pageAttr2"));
        Vector<String> requestScopeVector = new Vector<String>(Arrays.asList("requestAttr1", "requestAttr2"));
        Vector<String> sessionScopeVector = new Vector<String>(Arrays.asList("sessionAttr1", "sessionAttr2"));
        Vector<String> applicationScopeVector = new Vector<String>(Arrays.asList("applicationAttr1", "applicationAttr2"));
        Enumeration<String> pageScopeEnum = pageScopeVector.elements();
        Enumeration<String> requestScopeEnum = requestScopeVector.elements();
        Enumeration<String> sessionScopeEnum = sessionScopeVector.elements();
        Enumeration<String> applicationScopeEnum = applicationScopeVector.elements();
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationScopeEnum);
        String[] propertyNames = pagecontexthandler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(propertyNames).contains("requestAttr2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ncbj0_6() throws Exception {
        PageContextHandler pagecontexthandler = new PageContextHandler();
        Vector<String> pageScopeVector = new Vector<String>(Arrays.asList("pageAttr1", "pageAttr2"));
        Vector<String> requestScopeVector = new Vector<String>(Arrays.asList("requestAttr1", "requestAttr2"));
        Vector<String> sessionScopeVector = new Vector<String>(Arrays.asList("sessionAttr1", "sessionAttr2"));
        Vector<String> applicationScopeVector = new Vector<String>(Arrays.asList("applicationAttr1", "applicationAttr2"));
        Enumeration<String> pageScopeEnum = pageScopeVector.elements();
        Enumeration<String> requestScopeEnum = requestScopeVector.elements();
        Enumeration<String> sessionScopeEnum = sessionScopeVector.elements();
        Enumeration<String> applicationScopeEnum = applicationScopeVector.elements();
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationScopeEnum);
        String[] propertyNames = pagecontexthandler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(propertyNames).contains("sessionAttr1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ncbj0_7() throws Exception {
        PageContextHandler pagecontexthandler = new PageContextHandler();
        Vector<String> pageScopeVector = new Vector<String>(Arrays.asList("pageAttr1", "pageAttr2"));
        Vector<String> requestScopeVector = new Vector<String>(Arrays.asList("requestAttr1", "requestAttr2"));
        Vector<String> sessionScopeVector = new Vector<String>(Arrays.asList("sessionAttr1", "sessionAttr2"));
        Vector<String> applicationScopeVector = new Vector<String>(Arrays.asList("applicationAttr1", "applicationAttr2"));
        Enumeration<String> pageScopeEnum = pageScopeVector.elements();
        Enumeration<String> requestScopeEnum = requestScopeVector.elements();
        Enumeration<String> sessionScopeEnum = sessionScopeVector.elements();
        Enumeration<String> applicationScopeEnum = applicationScopeVector.elements();
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationScopeEnum);
        String[] propertyNames = pagecontexthandler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(propertyNames).contains("sessionAttr2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ncbj0_8() throws Exception {
        PageContextHandler pagecontexthandler = new PageContextHandler();
        Vector<String> pageScopeVector = new Vector<String>(Arrays.asList("pageAttr1", "pageAttr2"));
        Vector<String> requestScopeVector = new Vector<String>(Arrays.asList("requestAttr1", "requestAttr2"));
        Vector<String> sessionScopeVector = new Vector<String>(Arrays.asList("sessionAttr1", "sessionAttr2"));
        Vector<String> applicationScopeVector = new Vector<String>(Arrays.asList("applicationAttr1", "applicationAttr2"));
        Enumeration<String> pageScopeEnum = pageScopeVector.elements();
        Enumeration<String> requestScopeEnum = requestScopeVector.elements();
        Enumeration<String> sessionScopeEnum = sessionScopeVector.elements();
        Enumeration<String> applicationScopeEnum = applicationScopeVector.elements();
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationScopeEnum);
        String[] propertyNames = pagecontexthandler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(propertyNames).contains("applicationAttr1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_ncbj0_9() throws Exception {
        PageContextHandler pagecontexthandler = new PageContextHandler();
        Vector<String> pageScopeVector = new Vector<String>(Arrays.asList("pageAttr1", "pageAttr2"));
        Vector<String> requestScopeVector = new Vector<String>(Arrays.asList("requestAttr1", "requestAttr2"));
        Vector<String> sessionScopeVector = new Vector<String>(Arrays.asList("sessionAttr1", "sessionAttr2"));
        Vector<String> applicationScopeVector = new Vector<String>(Arrays.asList("applicationAttr1", "applicationAttr2"));
        Enumeration<String> pageScopeEnum = pageScopeVector.elements();
        Enumeration<String> requestScopeEnum = requestScopeVector.elements();
        Enumeration<String> sessionScopeEnum = sessionScopeVector.elements();
        Enumeration<String> applicationScopeEnum = applicationScopeVector.elements();
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionScopeEnum);
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationScopeEnum);
        String[] propertyNames = pagecontexthandler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(propertyNames).contains("applicationAttr2"));
    }
}