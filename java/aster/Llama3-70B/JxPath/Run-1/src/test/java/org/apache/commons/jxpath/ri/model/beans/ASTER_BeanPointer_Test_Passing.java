/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
    private Object bean;
    private QName name;
    private DOMNodePointer parent;
    private JXPathBasicBeanInfo beanInfo;
    private Locale locale;
    BeanPointer beanpointer;
    BeanPointer otherBeanPointer;
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
    @Mock
    private JXPathIntrospector jxpathIntrospector;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_hTRx0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertTrue(beanPointer.equals(beanPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_IQEZ1() {
        Object obj = new Object();
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertFalse(beanPointer.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_sEfG5() {
        QName name1 = new QName("name1");
        QName name2 = new QName("name2");
        BeanPointer beanPointer1 = new BeanPointer(name1, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(name2, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertFalse(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameBean_OxeU7() {
        Object bean = new Object();
        BeanPointer beanPointer1 = new BeanPointer(new QName("name"), bean, new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(new QName("name"), bean, new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertTrue(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_slXz8() {
        Object bean1 = new Object();
        Object bean2 = new Object();
        BeanPointer beanPointer1 = new BeanPointer(new QName("name"), bean1, new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(new QName("name"), bean2, new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertFalse(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNumberBean_BXec9() {
        Number bean = 1;
        BeanPointer beanPointer1 = new BeanPointer(new QName("name"), bean, new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(new QName("name"), bean, new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertTrue(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNumberBean_NwCc10() {
        Number bean1 = 1;
        Number bean2 = 2;
        BeanPointer beanPointer1 = new BeanPointer(new QName("name"), bean1, new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(new QName("name"), bean2, new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertFalse(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_tBRL0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Object bean = new Object();
        QName name = new QName("prefix", "localName");
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, Locale.US);
        QName result = beanPointer.getName();
        assertEquals(name, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_vpjG0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withNullBean() throws Exception {
        name = new QName("test");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.US;
        parent = Mockito.mock(DOMNodePointer.class);
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        beanpointer = new BeanPointer(name, null, beanInfo, locale);
        assertEquals("null()", beanpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withNumberBean() throws Exception {
        name = new QName("test");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.US;
        parent = Mockito.mock(DOMNodePointer.class);
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        Number number = 10.0;
        beanpointer = new BeanPointer(name, number, beanInfo, locale);
        assertEquals("10", beanpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withBooleanBean() throws Exception {
        name = new QName("test");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.US;
        parent = Mockito.mock(DOMNodePointer.class);
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        Boolean bool = true;
        beanpointer = new BeanPointer(name, bool, beanInfo, locale);
        assertEquals("true()", beanpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withStringBean() throws Exception {
        name = new QName("test");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.US;
        parent = Mockito.mock(DOMNodePointer.class);
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        String str = "test";
        beanpointer = new BeanPointer(name, str, beanInfo, locale);
        assertEquals("'test'", beanpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withOtherBean() throws Exception {
        name = new QName("test");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.US;
        parent = Mockito.mock(DOMNodePointer.class);
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        Object obj = new Object();
        beanpointer = new BeanPointer(name, obj, beanInfo, locale);
        assertEquals("/", beanpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withNullBean_nRye1() {
        QName name = new QName("prefix", "localName");
        Object bean = null;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals("null()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withNumberBean_bZbx2() {
        QName name = new QName("prefix", "localName");
        Object bean = new Integer(10);
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals("10", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withBooleanBean_true_pnYF3() {
        QName name = new QName("prefix", "localName");
        Object bean = Boolean.TRUE;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals("true()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withBooleanBean_false_iUKj4() {
        QName name = new QName("prefix", "localName");
        Object bean = Boolean.FALSE;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals("false()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withStringBean_uqhy5() {
        QName name = new QName("prefix", "localName");
        Object bean = "test string";
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals("'test string'", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withObjectBean_OJCi6() {
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals("/", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withDecimalNumberBean_lQNy7() {
        QName name = new QName("prefix", "localName");
        Object bean = new Double(10.0);
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals("10", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        name = new QName("test");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.US;
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        int length = beanpointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        bean = Mockito.mock(Object.class);
        beanInfo = Mockito.mock(JXPathBasicBeanInfo.class);
        name = Mockito.mock(QName.class);
        locale = Mockito.mock(Locale.class);
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals(bean, beanpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_ofdU0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Object bean = new Object();
        QName name = new QName("qualifiedName");
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, Locale.getDefault());
        Object result = beanPointer.getBaseValue();
        assertEquals(bean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        name = new QName("test");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.US;
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        assertFalse(beanpointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_glci0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertFalse(beanPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNullValue_YQNi0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        BeanPointer beanPointer = new BeanPointer(new QName("name"), null, beanInfo, Locale.US);
        assertTrue(beanPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_Kmby1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Integer.class);
        BeanPointer beanPointer = new BeanPointer(new QName("name"), 10, beanInfo, Locale.US);
        assertTrue(beanPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNonAtomicValue_Tynn2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), beanInfo, Locale.US);
        assertFalse(beanPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_NameNotNull_ZDMZ0() {
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals(name.hashCode(), beanPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_NameNull_cQLr1() {
        QName name = null;
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals(0, beanPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_ReturnsFalse_UqPy0() throws Exception {
        Object bean = new Object();
        QName name = new QName("prefix", "localName");
        Locale locale = Locale.US;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        BeanPointer otherBeanPointer = new BeanPointer(name, bean, beanInfo, locale);
        Object differentBean = new Object();
        otherBeanPointer = new BeanPointer(name, differentBean, beanInfo, locale);
        assertFalse(beanpointer.equals(otherBeanPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullParent_wQKW2_fid2() {
        BeanPointer beanPointer1 = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullName_xlSM4_fid2() {
        BeanPointer beanPointer1 = new BeanPointer(null, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(null, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentIndex_Xfzd6_fid2() {
        BeanPointer beanPointer1 = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        BeanPointer beanPointer2 = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertFalse(beanPointer1.equals(beanPointer2));
    }
}