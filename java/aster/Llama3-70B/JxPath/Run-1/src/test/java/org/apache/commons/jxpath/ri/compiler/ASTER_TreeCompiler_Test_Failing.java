/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_tEsR0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{new Object(), new Object()};
        CoreOperationAnd result = (CoreOperationAnd) treeCompiler.and(arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_pEwx0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] args = new Object[]{1, 2, 3};
        Object result = treeCompiler.function(1, args);
        assertNotNull(result);
        assertTrue(result instanceof CoreFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_wdDI0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3};
        CoreOperationAdd result = (CoreOperationAdd) treeCompiler.sum(arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_lmbe0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object[] args = new Object[]{new Object()};
        Object result = treeCompiler.function(qName, args);
        assertNotNull(result);
        assertTrue(result instanceof ExtensionFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_pEwx0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] args = new Object[]{1, 2, 3};
        Object result = treeCompiler.function(1, args);
        assertTrue(result instanceof org.apache.commons.jxpath.ri.compiler.Expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_pEwx0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] args = new Object[]{1, 2, 3};
        Object result = treeCompiler.function(1, args);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_pEwx0_2_fid2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] args = new Object[]{1, 2, 3};
        Object result = treeCompiler.function(1, args);
        assertTrue(result instanceof CoreFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_lmbe0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object[] args = new Object[]{new Object()};
        Object result = treeCompiler.function(qName, args);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_lmbe0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("namespace", "localPart");
        Object[] args = new Object[]{new Object()};
        Object result = treeCompiler.function(qName, args);
        assertTrue(result instanceof ExtensionFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQname_bEqX0_ufpC0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object obj = treeCompiler.processingInstructionTest("prefix:name");
        String[] parts = ((String) obj).split(":");
        assertEquals("prefix", parts[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQname_bEqX0_ufpC0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object obj = treeCompiler.processingInstructionTest("prefix:name");
        String[] parts = ((String) obj).split(":");
        assertEquals("name", parts[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQname_bEqX0_azre1_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object obj = treeCompiler.processingInstructionTest("prefix:name");
        String instruction = (String) obj;
        String[] parts = instruction.split(":");
        assertEquals("prefix", parts[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQname_bEqX0_azre1_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object obj = treeCompiler.processingInstructionTest("prefix:name");
        String instruction = (String) obj;
        String[] parts = instruction.split(":");
        assertEquals("name", parts[1]);
    }
}