/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
    private QName name;
    private DynaBean dynaBean;
    private DynaBeanPointer parent;
    DynaBeanPointer dynabeanpointer;
    DynaBeanPointer otherDynabeanpointer;
    @Mock
    QName qname;
    @Mock
    Locale locale;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() throws Exception {
        name = new QName("test");
        dynaBean = mock(DynaBean.class);
        parent = new DynaBeanPointer(name, dynaBean, Locale.US);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        otherDynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        assertTrue(dynabeanpointer.equals(dynabeanpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() throws Exception {
        name = new QName("test");
        dynaBean = mock(DynaBean.class);
        parent = new DynaBeanPointer(name, dynaBean, Locale.US);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        otherDynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        assertFalse(dynabeanpointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameProperties_ReturnsTrue() throws Exception {
        name = new QName("test");
        dynaBean = mock(DynaBean.class);
        parent = new DynaBeanPointer(name, dynaBean, Locale.US);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        otherDynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        assertTrue(dynabeanpointer.equals(otherDynabeanpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_ReturnsFalse() throws Exception {
        name = new QName("test");
        dynaBean = mock(DynaBean.class);
        parent = new DynaBeanPointer(name, dynaBean, Locale.US);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        otherDynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        DynaBeanPointer differentNameDynabeanpointer = new DynaBeanPointer(parent, new QName("different"), dynaBean);
        assertFalse(dynabeanpointer.equals(differentNameDynabeanpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentDynaBean_ReturnsFalse() throws Exception {
        name = new QName("test");
        dynaBean = mock(DynaBean.class);
        parent = new DynaBeanPointer(name, dynaBean, Locale.US);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        otherDynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        DynaBeanPointer differentDynaBeanDynabeanpointer = new DynaBeanPointer(parent, name, mock(DynaBean.class));
        assertFalse(dynabeanpointer.equals(differentDynaBeanDynabeanpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullDynaBean_fJqd8() {
        DynaBeanPointer pointer1 = new DynaBeanPointer(new QName("name"), null, Locale.US);
        DynaBeanPointer pointer2 = new DynaBeanPointer(new QName("name"), null, Locale.US);
        assertTrue(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        qname = new QName("prefix", "localName");
        dynaBean = Mockito.mock(DynaBean.class);
        locale = Mockito.mock(Locale.class);
        dynabeanpointer = new DynaBeanPointer(qname, dynaBean, locale);
        boolean result = dynabeanpointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_1() throws Exception {
        QName name = new QName("test");
        DynaBean dynaBeanMock = Mockito.mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBeanMock, Locale.US);
        Object result = dynabeanpointer.getImmediateNode();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode_nameIsNull() throws Exception {
        name = mock(QName.class);
        dynabeanpointer = new DynaBeanPointer(name, mock(DynaBean.class), mock(Locale.class));
        // given
        dynabeanpointer = new DynaBeanPointer(null, mock(DynaBean.class), mock(Locale.class));
        // when
        int hashCode = dynabeanpointer.hashCode();
        // then
        assertEquals(0, hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = mock(QName.class);
        dynabeanpointer = new DynaBeanPointer(name, mock(DynaBean.class), mock(Locale.class));
        when(name.getName()).thenReturn("mockedName");
        String result = dynabeanpointer.getName().getName();
        assertEquals("mockedName", result);
        verify(name, times(1)).getName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_1() throws Exception {
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        // When
        PropertyPointer propertyPointer = dynabeanpointer.getPropertyPointer();
        // Then
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_2() throws Exception {
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        // When
        PropertyPointer propertyPointer = dynabeanpointer.getPropertyPointer();
        // Then
        assertTrue(propertyPointer instanceof DynaBeanPropertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        qname = new QName("prefix", "localName");
        dynaBean = Mockito.mock(DynaBean.class);
        parent = Mockito.mock(DynaBeanPointer.class);
        dynabeanpointer = new DynaBeanPointer(parent, qname, dynaBean);
        int length = dynabeanpointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_1() throws Exception {
        QName name = new QName("test");
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.US);
        Object baseValue = dynabeanpointer.getBaseValue();
        assertNotNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_2() throws Exception {
        QName name = new QName("test");
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.US);
        Object baseValue = dynabeanpointer.getBaseValue();
        assertEquals(dynaBean, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPathNullParent_yVpA0() throws Exception {
        QName name = new QName("test");
        DynaBean dynaBean = mock(DynaBean.class);
        Locale locale = Locale.US;
        DOMNodePointer parent = mock(DOMNodePointer.class, Mockito.RETURNS_DEEP_STUBS);
        DynaBeanPointer dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        assertEquals("/", dynabeanpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        // When
        PropertyPointer propertyPointer = dynabeanpointer.getPropertyPointer();
        // Then
        assertNotNull(propertyPointer);
        assertTrue(propertyPointer instanceof DynaBeanPropertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        QName name = new QName("test");
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.US);
        Object baseValue = dynabeanpointer.getBaseValue();
        assertNotNull(baseValue);
        assertEquals(dynaBean, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent_ReturnsFalse_fid2() throws Exception {
        name = new QName("test");
        dynaBean = mock(DynaBean.class);
        parent = new DynaBeanPointer(name, dynaBean, Locale.US);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        otherDynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        DynaBeanPointer differentParentDynabeanpointer = new DynaBeanPointer(new DynaBeanPointer(name, dynaBean, Locale.US), name, dynaBean);
        assertTrue(dynabeanpointer.equals(differentParentDynabeanpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_2_fid2() throws Exception {
        QName name = new QName("test");
        DynaBean dynaBeanMock = Mockito.mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBeanMock, Locale.US);
        Object result = dynabeanpointer.getImmediateNode();
        assertNull(dynaBean);
    }
}