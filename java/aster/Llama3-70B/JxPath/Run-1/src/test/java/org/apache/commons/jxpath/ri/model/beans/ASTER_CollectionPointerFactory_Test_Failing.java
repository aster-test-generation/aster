/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointerFactory_Test_Failing {
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName qName;
    @Mock
    private Object bean;
    private CollectionPointerFactory collectionPointerFactory;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_axZP0() {
        CollectionPointerFactory collectionPointerFactory = new CollectionPointerFactory();
        int result = collectionPointerFactory.getOrder();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_1() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        // Given
        when(ValueUtils.isCollection(bean)).thenReturn(true);
        // When
        NodePointer result = collectionPointerFactory.createNodePointer(nodePointer, qName, bean);
        // Then
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_2() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        // Given
        when(ValueUtils.isCollection(bean)).thenReturn(true);
        // When
        NodePointer result = collectionPointerFactory.createNodePointer(nodePointer, qName, bean);
        // Then
        assertTrue(result instanceof CollectionPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_NotCollection() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        // Given
        when(ValueUtils.isCollection(bean)).thenReturn(false);
        // When
        NodePointer result = collectionPointerFactory.createNodePointer(nodePointer, qName, bean);
        // Then
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        // Given
        when(ValueUtils.isCollection(bean)).thenReturn(true);
        // When
        NodePointer result = collectionPointerFactory.createNodePointer(nodePointer, qName, bean);
        // Then
        assertNotNull(result);
        assertTrue(result instanceof CollectionPointer);
    }
}