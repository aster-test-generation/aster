/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_Empty_Zgsc8() {
        Object[] array = new Object[]{};
        Object result = ValueUtils.remove(array, 0);
        assertArrayEquals(new Object[]{}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Empty_ybhj9() {
        List list = new ArrayList();
        Object result = ValueUtils.remove(list, 0);
        assertEquals(list, result);
        assertEquals(0, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_Empty_vgWB10() {
        Collection collection = new HashSet();
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(collection, result);
        assertEquals(0, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_OsHA0() {
        Iterator iterator = ValueUtils.iterate(null);
        assertTrue(iterator.hasNext());
        assertNull(iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_dwhx1() {
        Object[] array = new Object[0];
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
        assertNull(iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyCollection_ouOw3() {
        Collection collection = new ArrayList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
        assertNull(iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Interface_Uiuz3() {
        assertEquals(0, ValueUtils.getCollectionHint(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandler_pWJc0() {
        DynamicPropertyHandler handler = ValueUtils.getDynamicPropertyHandler(DynamicPropertyHandler.class);
        assertNotNull(handler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Empty_ybhj9_1() {
        List list = new ArrayList();
        Object result = ValueUtils.remove(list, 0);
        assertEquals(list, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Empty_ybhj9_2() {
        List list = new ArrayList();
        Object result = ValueUtils.remove(list, 0);
        assertEquals(0, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_Empty_vgWB10_1() {
        Collection collection = new HashSet();
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(collection, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_Empty_vgWB10_2() {
        Collection collection = new HashSet();
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(0, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_OsHA0_1() {
        Iterator iterator = ValueUtils.iterate(null);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_OsHA0_2() {
        Iterator iterator = ValueUtils.iterate(null);
        assertNull(iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_dwhx1_1() {
        Object[] array = new Object[0];
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_dwhx1_2() {
        Object[] array = new Object[0];
        Iterator iterator = ValueUtils.iterate(array);
        assertNull(iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_VejN2_4() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals("b", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_VejN2_6() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals("c", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyCollection_ouOw3_1() {
        Collection collection = new ArrayList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyCollection_ouOw3_2() {
        Collection collection = new ArrayList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertNull(iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_tKch4_4() {
        Collection collection = new ArrayList(Arrays.asList("a", "b", "c"));
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals("b", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_tKch4_6() {
        Collection collection = new ArrayList(Arrays.asList("a", "b", "c"));
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals("c", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Container_CSDQ0_NkPQ0() {
        Object container = new Object[]{new Object[]{"value"}};
        Object result = ValueUtils.expandCollection(container, 1);
        assertEquals(new Object[]{new Object[]{"value"}}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Container_CSDQ0_YoKI1() {
        Object container = new Object[]{new Object[]{"value"}};
        Object result = ValueUtils.expandCollection(container, 2);
        assertEquals(new Object[]{new Object[]{"value"}, null}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_Empty_ybhj9_1_fid2() {
        List list = new ArrayList();
        assertNull(ValueUtils.remove(list, 0));
        assertEquals(0, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_Empty_vgWB10_2_fid2() {
        Collection collection = new HashSet();
        assertNull(ValueUtils.remove(collection, 0));
        assertEquals(0, collection.size());
    }
}