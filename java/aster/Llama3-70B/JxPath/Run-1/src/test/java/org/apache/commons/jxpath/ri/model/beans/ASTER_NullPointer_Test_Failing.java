/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Failing {
    private QName name;
    private NullPointer nullpointer;
    private NullPointer otherNullPointer;
    JXPathContext context;
    DOMNodePointer parent;
    Object value;
    QName qname;
    DOMNodePointer parentNode;
    NullPropertyPointer nullPropertyPointer;
    private NodePointer nodePointer;
    private String id = "testId";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode_1() throws Exception {
        name = mock(QName.class);
        nullpointer = new NullPointer(name, Locale.US);
        // when
        when(name.hashCode()).thenReturn(123);
        // then
        // test with null name
        nullpointer = new NullPointer(null, Locale.US);
        assertEquals(123, nullpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode_2() throws Exception {
        name = mock(QName.class);
        nullpointer = new NullPointer(name, Locale.US);
        // when
        when(name.hashCode()).thenReturn(123);
        // then
        // test with null name
        nullpointer = new NullPointer(null, Locale.US);
        assertEquals(0, nullpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_1() throws Exception {
        nullpointer = new NullPointer(new QName("test"), Locale.US);
        nullPropertyPointer = mock(NullPropertyPointer.class);
        when(new NullPropertyPointer(nullpointer)).thenReturn(nullPropertyPointer);
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_2() throws Exception {
        nullpointer = new NullPointer(new QName("test"), Locale.US);
        nullPropertyPointer = mock(NullPropertyPointer.class);
        when(new NullPropertyPointer(nullpointer)).thenReturn(nullPropertyPointer);
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertEquals(nullPropertyPointer, propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild_s_1_loVo0() throws Exception {
        QName name = new QName("prefix", "localName");
        JXPathContext context = Mockito.mock(JXPathContext.class);
        NullPointer nullpointer = new NullPointer(name, Locale.US);
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        Mockito.when(context.createPath(Mockito.anyString())).thenReturn(nodePointer);
        Mockito.when(nodePointer.createChild(context, name, 0, "value")).thenReturn(nodePointer);
        NodePointer result = nullpointer.createChild(context, name, 0, "value");
        Mockito.verify(nodePointer).createChild(context, name, 0, "value");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_XDNa0_MTUn0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NodePointer result = nullPointer.createChild(context, name, 0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_pJyN0_ithJ0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NodePointer result = nullPointer.createChild(context, name, 0, "value");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild_s_1_loVo0_fid1() throws Exception {
        QName name = new QName("prefix", "localName");
        JXPathContext context = Mockito.mock(JXPathContext.class);
        NullPointer nullpointer = new NullPointer(name, Locale.US);
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        Mockito.when(context.createPath(Mockito.anyString())).thenReturn(nodePointer);
        NodePointer result = nullpointer.createChild(context, name, 0, "value");
        Mockito.verify(nodePointer).createChild(context, name, 0, "value");
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_XDNa0_MTUn0_fid1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NodePointer result = nullPointer.createChild(context, name, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_pJyN0_ithJ0_fid1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NodePointer result = nullPointer.createChild(context, name, 0, "value");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        name = mock(QName.class);
        nullpointer = new NullPointer(name, Locale.US);
        // when
        when(name.hashCode()).thenReturn(123);
        // then
        assertEquals(123, nullpointer.hashCode());
        // test with null name
        nullpointer = new NullPointer(null, Locale.US);
        assertEquals(0, nullpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        nullpointer = new NullPointer(new QName("test"), Locale.US);
        nullPropertyPointer = mock(NullPropertyPointer.class);
        when(new NullPropertyPointer(nullpointer)).thenReturn(nullPropertyPointer);
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNotNull(propertyPointer);
        assertEquals(nullPropertyPointer, propertyPointer);
    }
}