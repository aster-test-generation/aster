/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeContext_Test_Failing {
    AttributeContext attributeContext;
    NamespaceContext namespaceContext;
    NodeTypeTest nodeTypeTest;
    @Mock
    private NodeIterator iterator;
    @Mock
    private NamespaceContext parentContext;
    private NodePointer currentNodePointer;
    private boolean setStarted = false;
    private static QName WILDCARD = new QName(null, "*");
    private NodeTest nodeTest;
    private SelfContext selfContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = mock(NamespaceContext.class);
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // given
        when(attributeContext.getCurrentPosition()).thenReturn(5, 10);
        when(attributeContext.nextNode()).thenReturn(true, false);
        // when
        boolean result = attributeContext.setPosition(15);
        // then
        verify(attributeContext, times(2)).nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_reset() throws Exception {
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = mock(NamespaceContext.class);
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // given
        when(attributeContext.getCurrentPosition()).thenReturn(15);
        doNothing().when(attributeContext).reset();
        // when
        boolean result = attributeContext.setPosition(10);
        // then
        verify(attributeContext).reset();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_noMoreNodes() throws Exception {
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = mock(NamespaceContext.class);
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // given
        when(attributeContext.getCurrentPosition()).thenReturn(5);
        when(attributeContext.nextNode()).thenReturn(false);
        // when
        boolean result = attributeContext.setPosition(10);
        // then
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_1() throws Exception {
        parentContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        iterator = iterator;
        setStarted = true;
        attributeContext.reset();
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_2() throws Exception {
        parentContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        iterator = iterator;
        setStarted = true;
        attributeContext.reset();
        assertFalse(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_XGjE0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        NodePointer nodePointer = attributeContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode1_GhCv0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        assertTrue(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode2_AZEb1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        attributeContext.setPosition(10);
        assertTrue(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode3_VTkV2_jAPv0() {
        int nodeType = 1;
        NodeTypeTest nodeTypeTest = new NodeTypeTest(nodeType);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        assertFalse(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode4_qPAq3_yxSu0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        assertFalse(attributeContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset() throws Exception {
        parentContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        iterator = iterator;
        setStarted = true;
        attributeContext.reset();
        assertNull(iterator);
        assertFalse(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_XGjE0_fid2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        attributeContext.nextNode(); // Call nextNode to set currentNodePointer
        NodePointer nodePointer = attributeContext.getCurrentNodePointer();
        assertNull(nodePointer); // currentNodePointer is null initially
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode4_qPAq3_yxSu0_fid2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        assertTrue(attributeContext.nextNode());
    }
}