/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
    DynamicPointer dynamicPointer;
    private Object bean;
    private QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDynamicPropertyDeclarationSupported() throws Exception {
        QName name = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        boolean result = dynamicPointer.isDynamicPropertyDeclarationSupported();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported_VPhQ0() {
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertTrue(dynamicPointer.isDynamicPropertyDeclarationSupported());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ZVJY0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        assertTrue(dynamicPointer.equals(dynamicPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_NyGJ1() {
        Object object = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer.equals(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNameAndBean_KYzn2() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_Qtcn3() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(new QName("name1"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(new QName("name2"), new Object(), new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullName_mQme5() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(null, new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(null, new Object(), new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullBean_SAys6() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(new QName("name"), null, new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(new QName("name"), null, new PageContextHandler(), Locale.US);
        assertTrue(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_uaEp0() {
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        boolean result = dynamicPointer.isCollection();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_withNonNullName_yIQp0() {
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int hashCode = dynamicPointer.hashCode();
        assertEquals(System.identityHashCode(bean) + name.hashCode(), hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_withNullName_UCVb1() {
        QName name = null;
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int hashCode = dynamicPointer.hashCode();
        assertEquals(System.identityHashCode(bean), hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_gLWe0() {
        PageContextHandler handler = new PageContextHandler();
        Object bean = new Object();
        Locale locale = new Locale("en", "US");
        QName name = new QName("qualifiedName");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        NodeIterator iterator = dynamicPointer.attributeIterator(name);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_BnoA0() {
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        QName name = new QName("qualifiedName");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName result = dynamicPointer.getName();
        assertEquals(name, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_Plem0() {
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        PropertyPointer propertyPointer = dynamicPointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_rrTT0() {
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertEquals(1, dynamicPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_AfCb0() {
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        Object baseValue = dynamicPointer.getBaseValue();
        assertEquals(bean, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNullValue_BwNf0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_bwXj4_ckyC0() {
        DynamicPointer dynamicPointer1 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        Object bean1 = new Object();
        Object bean2 = new Object();
        dynamicPointer1 = new DynamicPointer(new QName("name"), bean1, new PageContextHandler(), Locale.US);
        DynamicPointer dynamicPointer2 = new DynamicPointer(new QName("name"), bean2, new PageContextHandler(), Locale.US);
        assertFalse(dynamicPointer1.equals(dynamicPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue_XBpB0() throws Exception {
        Object bean = new Object();
        QName name = new QName("test");
        PageContextHandler handler = new PageContextHandler();
        DynamicPointer dynamicpointer = new DynamicPointer(name, bean, handler, Locale.US);
        assertSame(dynamicpointer, dynamicpointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameValues_ReturnsTrue_OJrV0_1() throws Exception {
        Object bean = new Object();
        QName name = new QName("test");
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        DynamicPointer otherDynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertEquals(dynamicpointer, dynamicpointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameValues_ReturnsTrue_OJrV0_2() throws Exception {
        Object bean = new Object();
        QName name = new QName("test");
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        DynamicPointer otherDynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertEquals(dynamicpointer.hashCode(), otherDynamicPointer.hashCode());
    }
}