/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanAttributeIterator_Test_Failing {
    private int position = 0;
    BeanAttributeIterator beanattributeiterator;
    BeanPointer beanPointer;
    QName qName;
    private boolean includeXmlLang;
    BeanPointer parent;
    QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_BOun0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        BeanPointer parent = new BeanPointer(name, bean, beanInfo, Locale.US);
        BeanAttributeIterator iterator = new BeanAttributeIterator(parent, name);
        assertTrue(iterator.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_yVJF1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        BeanPointer parent = new BeanPointer(name, bean, beanInfo, Locale.US);
        BeanAttributeIterator iterator = new BeanAttributeIterator(parent, name);
        assertTrue(iterator.setPosition(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer1_nWXe0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Object bean = new Object();
        QName name = new QName("prefix", "localName");
        BeanPointer parent = new BeanPointer(name, bean, beanInfo, Locale.US);
        BeanAttributeIterator iterator = new BeanAttributeIterator(parent, name);
        NodePointer pointer = iterator.getNodePointer();
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_rBKU2_YZPC0_1_fid2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        BeanPointer parent = new BeanPointer(name, bean, beanInfo, Locale.US);
        BeanAttributeIterator iterator = new BeanAttributeIterator(parent, name);
        boolean includeXmlLang = true;
        iterator.setPosition(1);
        NodePointer nodePointer = iterator.getNodePointer();
        assertTrue(iterator.setPosition(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointer_fAxP0() throws Exception {
        BeanPointer parent = Mockito.mock(BeanPointer.class);
        BeanAttributeIterator beanattributeiterator = new BeanAttributeIterator(parent, new QName("name"));
        boolean includeXmlLang = true;
        int position = 1;
        LangAttributePointer langAttributePointer = Mockito.mock(LangAttributePointer.class);
        when(new LangAttributePointer(parent)).thenReturn(langAttributePointer);
        NodePointer nodePointer = beanattributeiterator.getNodePointer();
        assertEquals(langAttributePointer, nodePointer);
    }
}