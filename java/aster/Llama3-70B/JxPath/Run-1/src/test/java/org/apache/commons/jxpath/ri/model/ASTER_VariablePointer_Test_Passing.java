/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
    VariablePointer variablepointer;
    NodePointer pointer1;
    NodePointer pointer2;
    @Mock
    private JXPathContext context;
    @Mock
    private AbstractFactory factory;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName name;
    @Mock
    private Object collection;
    @Mock
    private Variables variables;
    @Mock
    private JXPathContext parentContext;
    private VariablePointer variablePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NodeIterator nodeIterator;
    private boolean actual;
    Object value;
    private NodePointer valuePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        variablepointer = new VariablePointer(new QName("prefix", "localName"));
        pointer1 = Mockito.mock(NodePointer.class);
        pointer2 = Mockito.mock(NodePointer.class);
        Mockito.when(pointer1.getIndex()).thenReturn(1);
        Mockito.when(pointer2.getIndex()).thenReturn(2);
        int result = variablepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_KmSj0() {
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(name);
        QName result = variablePointer.getName();
        assertEquals(name, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_XhfD0() {
        VariablePointer vp = new VariablePointer(new QName("prefix", "localName"));
        assertTrue(vp.equals(vp));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_nfTA1() {
        Object obj = new Object();
        VariablePointer vp = new VariablePointer(new QName("prefix", "localName"));
        assertFalse(vp.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_cYcz0() {
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(name);
        assertTrue(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild_L_kUMX0_fid1() throws Exception {
        VariablePointer variablepointer = Mockito.mock(VariablePointer.class);
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        when(variablepointer.clone()).thenReturn(nodePointer);
        when(nodePointer.isActual()).thenReturn(true);
        when(variablepointer.createChild(context, name, 1, value)).thenReturn(nodePointer);
        NodePointer result = variablepointer.createChild(context, name, 1, value);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_2_wJvd1_bRaF0_fid1() {
        VariablePointer vp = new VariablePointer(new QName("qualifiedName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_vOJ1_FnBA0_fid1() {
        VariablePointer vp = new VariablePointer(new QName("prefix", "localName"));
        vp.isActual(); // Removed the erroneous line
        assertFalse(vp.isActual());
    }
}