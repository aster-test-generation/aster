/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.lang.reflect.Field;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodeIterator_Test_Failing {
    private int position = 0;
    JDOMNodeIterator jdomnodeiterator;
    DOMNodePointer parent;
    NodeTypeTest nodeTest;
    DOMNodePointer startWith;
    private Object child;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
        assertTrue(jdomnodeiterator.setPosition(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
        assertEquals(5, positionField.getInt(jdomnodeiterator));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_3() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
        assertTrue(jdomnodeiterator.setPosition(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_4() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
        assertEquals(3, positionField.getInt(jdomnodeiterator));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_5() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
        assertTrue(jdomnodeiterator.setPosition(7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_6() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
        assertEquals(7, positionField.getInt(jdomnodeiterator));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_9() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer3_dgoW2_KmWV0() {
        org.w3c.dom.Document document = new org.apache.xerces.dom.DocumentImpl();
        org.w3c.dom.Node node = document.createElement("node");
        Locale locale = Locale.US;
        DOMNodePointer parent = new DOMNodePointer(node, locale);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        JDOMNodeIterator iterator = new JDOMNodeIterator(parent, nodeTest, false, null);
        NodePointer pointer = iterator.getNodePointer();
        assertNotNull(pointer);
    }
}