/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.Attribute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributePointer_Test_Passing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Attribute attr;
    private JDOMAttributePointer jdomattributepointer;
    private Attribute mockAttr;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        attr = new Attribute("test", "value");
        parent = mock(DOMNodePointer.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        int result = jdomattributepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        attr = Mockito.mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        boolean result = jdomattributepointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        attr = mock(Attribute.class);
        parent = mock(DOMNodePointer.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        Object result = jdomattributepointer.getImmediateNode();
        assertEquals(attr, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        when(parent.asPath()).thenReturn("/parent/path");
        when(attr.getName()).thenReturn("attributeName");
        String result = jdomattributepointer.asPath();
        assertEquals("/parent/path/@attributeName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        attr = Mockito.mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        int length = jdomattributepointer.getLength();
        assertEquals(1, length);
    }
}