/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InfoSetUtil_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfNumber_XNQY0() {
        Number num = 10;
        assertEquals(10, InfoSetUtil.number(num));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfBoolean_True_EbCJ1() {
        Boolean bool = true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfBoolean_False_dXpY2() {
        Boolean bool = false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfString_ValidNumber_uDkg3() {
        String str = "10.5";
        assertEquals(10.5, InfoSetUtil.number(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InstanceOfObject_xlZn7() {
        Object obj = "10.0";
        assertEquals(10.0, InfoSetUtil.number(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Number_onvz0() {
        Number number = 10;
        assertEquals(10.0, InfoSetUtil.doubleValue(number), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_BooleanTrue_wAao1() {
        Boolean bool = true;
        assertEquals(0.0, InfoSetUtil.doubleValue(bool), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_BooleanFalse_LWtl2() {
        Boolean bool = false;
        assertEquals(1.0, InfoSetUtil.doubleValue(bool), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_StringEmpty_FPcA3() {
        String str = "";
        assertEquals(0.0, InfoSetUtil.doubleValue(str), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_StringValidNumber_Ybia4() {
        String str = "10.5";
        assertEquals(10.5, InfoSetUtil.doubleValue(str), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_StringInvalidNumber_yFaP5() {
        String str = "abc";
        assertTrue(Double.isNaN(InfoSetUtil.doubleValue(str)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Object_uZTP8() {
        Object obj = "10.5";
        assertEquals(10.5, InfoSetUtil.doubleValue(obj), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_dYmo0() {
        Number number = 1;
        assertTrue(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NegativeZero_pyGG1() {
        Number number = -0;
        assertFalse(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NaN_daMH2() {
        Number number = Double.NaN;
        assertFalse(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Zero_qScW3() {
        Number number = 0;
        assertFalse(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_TrueBoolean_DzII4() {
        Boolean bool = true;
        assertTrue(InfoSetUtil.booleanValue(bool));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_FalseBoolean_rvCz5() {
        Boolean bool = false;
        assertFalse(InfoSetUtil.booleanValue(bool));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_EmptyString_tGQV7() {
        String str = "";
        assertFalse(InfoSetUtil.booleanValue(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NonEmptyString_UJgC8() {
        String str = "Hello";
        assertTrue(InfoSetUtil.booleanValue(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NullNodePointer_jIuY9() {
        NodePointer pointer = null;
        assertFalse(InfoSetUtil.booleanValue(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NullObject_PzXH12() {
        Object obj = null;
        assertFalse(InfoSetUtil.booleanValue(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NonNullObject_EmlY13() {
        Object obj = new Object();
        assertTrue(InfoSetUtil.booleanValue(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_String_MtEj0() {
        String str = "Hello";
        assertEquals("Hello", InfoSetUtil.stringValue(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Integer_HSiy1() {
        Integer num = 10;
        assertEquals("10", InfoSetUtil.stringValue(num));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Double_xYbs2() {
        Double d = 10.5;
        assertEquals("10.5", InfoSetUtil.stringValue(d));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_BooleanTrue_RSdV3() {
        Boolean bool = true;
        assertEquals("true", InfoSetUtil.stringValue(bool));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_BooleanFalse_IuYi4() {
        Boolean bool = false;
        assertEquals("false", InfoSetUtil.stringValue(bool));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Null_vuLy5() {
        assertEquals("", InfoSetUtil.stringValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Object_TBEX8() {
        Object obj = new Object();
        assertEquals(obj.toString(), InfoSetUtil.stringValue(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Long_wduk9() {
        Long l = 10L;
        assertEquals("10", InfoSetUtil.stringValue(l));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_ObjectInstanceOfString_ReturnsString_YOrf0() {
        String str = "abc";
        assertEquals("abc", InfoSetUtil.stringValue(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setSingleNodePointer(NodePointer node) {
    }
}