/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_UnionContext_Test_Passing {
    private EvalContext[] contexts;
    private boolean prepared;
    @Mock
    private EvalContext evalContext1;
    @Mock
    private EvalContext evalContext2;
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    @Mock
    private BasicNodeSet nodeSet;
    @Mock
    private Pointer pointer1;
    @Mock
    private Pointer pointer2;
    UnionContext unionContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition7_Ywwj6() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        EvalContext[] contexts = new EvalContext[0];
        UnionContext unionContext = new UnionContext(namespaceContext, contexts);
        assertFalse(unionContext.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        evalContext1 = mock(EvalContext.class);
        evalContext2 = mock(EvalContext.class);
        contexts = new EvalContext[]{evalContext1, evalContext2};
        unionContext = new UnionContext(mock(NamespaceContext.class), contexts);
        assertEquals(1, unionContext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_MultipleContexts_EoQX0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        EvalContext[] contexts = new EvalContext[]{new UnionContext(namespaceContext, new EvalContext[0]), new UnionContext(namespaceContext, new EvalContext[0])};
        UnionContext unionContext = new UnionContext(namespaceContext, contexts);
        assertEquals(1, unionContext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder_singleContext_OAxV0() throws Exception {
        evalContext1 = mock(EvalContext.class);
        evalContext2 = mock(EvalContext.class);
        contexts = new EvalContext[]{evalContext1, evalContext2};
        unionContext = new UnionContext(mock(NamespaceContext.class), contexts);
        contexts = new EvalContext[]{evalContext1};
        unionContext = new UnionContext(mock(NamespaceContext.class), contexts);
        assertEquals(0, unionContext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_SingleContext_TEGu1_hZQF0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        EvalContext[] contexts = new EvalContext[]{new UnionContext(namespaceContext, new EvalContext[0])};
        UnionContext unionContext = new UnionContext(namespaceContext, contexts);
        assertEquals(0, unionContext.getDocumentOrder());
    }
}