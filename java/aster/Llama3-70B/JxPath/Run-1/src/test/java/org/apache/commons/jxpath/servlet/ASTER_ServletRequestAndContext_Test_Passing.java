/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletRequestAndContext_Test_Passing {
    private ServletRequest request;
    private HttpServletRequest httpRequest;
    private HttpSession session;
    ServletRequestAndContext servletrequestandcontext;
    private ServletContext context;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_1() throws Exception {
        httpRequest = Mockito.mock(HttpServletRequest.class);
        session = Mockito.mock(HttpSession.class);
        request = httpRequest;
        servletrequestandcontext = new ServletRequestAndContext(request, Mockito.mock(ServletContext.class));
        Mockito.when(httpRequest.getSession(false)).thenReturn(session);
        HttpSession result = servletrequestandcontext.getSession();
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_2() throws Exception {
        httpRequest = Mockito.mock(HttpServletRequest.class);
        session = Mockito.mock(HttpSession.class);
        request = httpRequest;
        servletrequestandcontext = new ServletRequestAndContext(request, Mockito.mock(ServletContext.class));
        Mockito.when(httpRequest.getSession(false)).thenReturn(session);
        HttpSession result = servletrequestandcontext.getSession();
        Assertions.assertEquals(session, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionNull() throws Exception {
        httpRequest = Mockito.mock(HttpServletRequest.class);
        session = Mockito.mock(HttpSession.class);
        request = httpRequest;
        servletrequestandcontext = new ServletRequestAndContext(request, Mockito.mock(ServletContext.class));
        Mockito.when(httpRequest.getSession(false)).thenReturn(session);
        request = Mockito.mock(ServletRequest.class);
        servletrequestandcontext = new ServletRequestAndContext(request, Mockito.mock(ServletContext.class));
        HttpSession result = servletrequestandcontext.getSession();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletRequest() throws Exception {
        request = mock(ServletRequest.class);
        context = mock(ServletContext.class);
        servletrequestandcontext = new ServletRequestAndContext(request, context);
        ServletRequest result = servletrequestandcontext.getServletRequest();
        assertEquals(request, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession() throws Exception {
        httpRequest = Mockito.mock(HttpServletRequest.class);
        session = Mockito.mock(HttpSession.class);
        request = httpRequest;
        servletrequestandcontext = new ServletRequestAndContext(request, Mockito.mock(ServletContext.class));
        Mockito.when(httpRequest.getSession(false)).thenReturn(session);
        HttpSession result = servletrequestandcontext.getSession();
        Assertions.assertNotNull(result);
        Assertions.assertEquals(session, result);
    }
}