/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.lang.reflect.Field;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Passing {
    private String defaultNamespace;
    private Node node;
    private DOMNodePointer domNodePointer;
    private NodePointer nodePointer1;
    private NodePointer nodePointer2;
    private NamedNodeMap namedNodeMap;
    private NodeTest nodeTest;
    private NodeList nodeList;
    private Document document;
    private JXPathContext context;
    private QName name;
    private AbstractFactory factory;
    DOMNodePointer domnodepointer;
    Locale locale;
    VariablePointer parent;
    Element element;
    QName qName;
    DOMAttributeIterator domAttributeIterator;
    private Attr attr;
    NodePointer startWith;
    boolean reverse;
    private NamespaceResolver namespaceResolver;
    private DOMNodePointer sameNodePointer;
    private DOMNodePointer differentNodePointer;
    Node nodeMock;
    private Node parentNode;
    private String id;
    private Attr langAttr;
    private NodeNameTest nodeNameTest;
    private NodeTypeTest nodeTypeTest;
    private ProcessingInstructionTest processingInstructionTest;
    private ProcessingInstruction processingInstruction;
    VariablePointer variablePointer;
    private Attr attrMock;
    private VariablePointer parentMock;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_1() throws Exception {
        node = mock(Node.class);
        nodePointer1 = mock(NodePointer.class);
        nodePointer2 = mock(NodePointer.class);
        namedNodeMap = mock(NamedNodeMap.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        Node node2 = mock(Node.class);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(nodePointer1.getBaseValue()).thenReturn(node2);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodePointer1.getBaseValue()).thenReturn(node2);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        assertEquals(-1, domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = -1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_3() throws Exception {
        node = mock(Node.class);
        nodePointer1 = mock(NodePointer.class);
        nodePointer2 = mock(NodePointer.class);
        namedNodeMap = mock(NamedNodeMap.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        Node node2 = mock(Node.class);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(nodePointer1.getBaseValue()).thenReturn(node2);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodePointer1.getBaseValue()).thenReturn(node2);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        assertEquals(1, domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        parent = mock(VariablePointer.class);
        domnodepointer = new DOMNodePointer(parent, node);
        assertFalse(domnodepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        Node result = (Node) domNodePointer.getImmediateNode();
        assertEquals(node, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NonElementNode_ReturnsNull() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(node.getParentNode()).thenReturn(node);
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NoAttributeFound_ReturnsNull() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getParentNode()).thenReturn(null);
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ReturnsNull_WhenNodeIsNull_BUql4() {
        String result = DOMNodePointer.findEnclosingAttribute(null, "attrName");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_1() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        qName = new QName("prefix", "localName");
        domNodePointer = new DOMNodePointer(node, locale, "id");
        NodeIterator result = domNodePointer.attributeIterator(qName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_2() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        qName = new QName("prefix", "localName");
        domNodePointer = new DOMNodePointer(node, locale, "id");
        NodeIterator result = domNodePointer.attributeIterator(qName);
        assertTrue(result instanceof DOMAttributeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() throws Exception {
        Node node = Mockito.mock(Node.class);
        Locale locale = Mockito.mock(Locale.class);
        domnodepointer = new DOMNodePointer(node, locale);
        nodeTest = Mockito.mock(NodeTest.class);
        startWith = Mockito.mock(NodePointer.class);
        reverse = false;
        NodeIterator iterator = domnodepointer.childIterator(nodeTest, reverse, startWith);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        Node node = mock(Node.class);
        Locale locale = mock(Locale.class);
        domNodePointer = new DOMNodePointer(node, locale, "id");
        int length = domNodePointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_1() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        parent = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(parent, node);
        NodeIterator iterator = domNodePointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_2() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        parent = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(parent, node);
        NodeIterator iterator = domNodePointer.namespaceIterator();
        assertTrue(iterator instanceof DOMNamespaceIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        sameNodePointer = new DOMNodePointer(node, Locale.US, "id");
        differentNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        // Test reflexive property
        // Test symmetric property
        // Test transitive property
        // Test null and different class
        // Test different node
        assertTrue(domNodePointer.equals(domNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        sameNodePointer = new DOMNodePointer(node, Locale.US, "id");
        differentNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        // Test reflexive property
        // Test symmetric property
        // Test transitive property
        // Test null and different class
        // Test different node
        assertTrue(domNodePointer.equals(sameNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        sameNodePointer = new DOMNodePointer(node, Locale.US, "id");
        differentNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        // Test reflexive property
        // Test symmetric property
        // Test transitive property
        // Test null and different class
        // Test different node
        assertTrue(sameNodePointer.equals(domNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_7() throws Exception {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        sameNodePointer = new DOMNodePointer(node, Locale.US, "id");
        differentNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        // Test reflexive property
        // Test symmetric property
        // Test transitive property
        // Test null and different class
        // Test different node
        assertFalse(domNodePointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_8() throws Exception {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        sameNodePointer = new DOMNodePointer(node, Locale.US, "id");
        differentNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        // Test reflexive property
        // Test symmetric property
        // Test transitive property
        // Test null and different class
        // Test different node
        assertFalse(domNodePointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_9() throws Exception {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        sameNodePointer = new DOMNodePointer(node, Locale.US, "id");
        differentNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        // Test reflexive property
        // Test symmetric property
        // Test transitive property
        // Test null and different class
        // Test different node
        assertFalse(domNodePointer.equals(differentNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove() throws Exception {
        node = mock(Node.class);
        parentNode = mock(Node.class);
        domNodePointer = new DOMNodePointer(new VariablePointer(new QName("name")), node);
        when(node.getParentNode()).thenReturn(parentNode);
        domNodePointer.remove();
        verify(parentNode).removeChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_1() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        locale = Locale.ENGLISH;
        domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.getParentNode()).thenReturn(node);
        when(domNodePointer.getLanguage()).thenReturn("en-US");
        boolean result = domNodePointer.isLanguage("en");
        result = domNodePointer.isLanguage("fr");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_2() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        locale = Locale.ENGLISH;
        domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.getParentNode()).thenReturn(node);
        when(domNodePointer.getLanguage()).thenReturn("en-US");
        boolean result = domNodePointer.isLanguage("en");
        result = domNodePointer.isLanguage("fr");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NullTest() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        nodeTest = mock(NodeTest.class);
        nodeNameTest = mock(NodeNameTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        processingInstructionTest = mock(ProcessingInstructionTest.class);
        processingInstruction = mock(ProcessingInstruction.class);
        assertTrue(DOMNodePointer.testNode(node, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NodeNameTest_NonElementNode() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        nodeTest = mock(NodeTest.class);
        nodeNameTest = mock(NodeNameTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        processingInstructionTest = mock(ProcessingInstructionTest.class);
        processingInstruction = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodeNameTest.getNodeName()).thenReturn(new QName("prefix", "localName"));
        when(nodeNameTest.getNamespaceURI()).thenReturn("namespaceURI");
        when(nodeNameTest.isWildcard()).thenReturn(false);
        assertFalse(DOMNodePointer.testNode(node, nodeNameTest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NodeTypeTest() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        nodeTest = mock(NodeTest.class);
        nodeNameTest = mock(NodeNameTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        processingInstructionTest = mock(ProcessingInstructionTest.class);
        processingInstruction = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_TEXT);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_ProcessingInstructionTest() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        nodeTest = mock(NodeTest.class);
        nodeNameTest = mock(NodeNameTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        processingInstructionTest = mock(ProcessingInstructionTest.class);
        processingInstruction = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(processingInstruction.getTarget()).thenReturn("target");
        when(processingInstructionTest.getTarget()).thenReturn("target");
        assertFalse(DOMNodePointer.testNode(processingInstruction, processingInstructionTest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_EmptyPrefix() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(new VariablePointer(new QName("prefix", "localName")), node);
        String result = domNodePointer.getNamespaceURI("");
        assertEquals(domNodePointer.getDefaultNamespaceURI(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLPrefix() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(new VariablePointer(new QName("prefix", "localName")), node);
        String result = domNodePointer.getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLNSPrefix() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(new VariablePointer(new QName("prefix", "localName")), node);
        String result = domNodePointer.getNamespaceURI("xmlns");
        assertEquals("http://www.w3.org/2000/xmlns/", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        // When
        Object baseValue = domNodePointer.getBaseValue();
        // Then
        assertEquals(node, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() throws Exception {
        Node node = mock(Node.class);
        Locale locale = mock(Locale.class);
        domNodePointer = new DOMNodePointer(node, locale, "id");
        assertTrue(domNodePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_TextNode_HCEa0() throws Exception {
        node = mock(Node.class);
        nodeList = mock(NodeList.class);
        document = mock(Document.class);
        domNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        Field field = DOMNodePointer.class.getDeclaredField("node");
        field.setAccessible(true);
        field.set(domNodePointer, node);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        domNodePointer.setValue("new value");
        verify(node).setNodeValue("new value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_SJxb0() throws Exception {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_BZYJ0_1() throws Exception {
        Node node = mock(Node.class);
        Element element = mock(Element.class);
        Locale locale = Locale.ENGLISH;
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.getParentNode()).thenReturn(node);
        when(domNodePointer.getLanguage()).thenReturn("en-US");
        boolean result = domNodePointer.isLanguage("en");
        result = domNodePointer.isLanguage("fr");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_BZYJ0_2() throws Exception {
        Node node = mock(Node.class);
        Element element = mock(Element.class);
        Locale locale = Locale.ENGLISH;
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.getParentNode()).thenReturn(node);
        when(domNodePointer.getLanguage()).thenReturn("en-US");
        boolean result = domNodePointer.isLanguage("en");
        result = domNodePointer.isLanguage("fr");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode_pdUe0() throws Exception {
        node = mock(Node.class);
        Locale locale = mock(Locale.class);
        domNodePointer = new DOMNodePointer(node, locale, null);
        assertEquals(System.identityHashCode(node), domNodePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_BZMn0_1() throws Exception {
        node = mock(Node.class);
        Locale locale = Locale.US; // or any other locale
        domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.hasChildNodes()).thenReturn(true);
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domNodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_kLjK0() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        domNodePointer = new DOMNodePointer(node, locale);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode12_MdcY11_zHyU0() {
        String s1 = "  test  ";
        String s2 = "test";
        assertTrue(s1.trim().equals(s2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode13_hhIt12_PFJZ0() {
        String s1 = "  test  ";
        String s2 = "differentTest";
        assertNotEquals(s1.trim(), s2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode14_SsgK13_MdZt0() {
        String s1 = null;
        String s2 = "";
        assertTrue(s1 == null && s2.equals("") || s1 != null && s1.equals(s2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode15_hwNW14_UuZh0() {
        String s1 = "";
        String s2 = null;
        assertFalse(s1 == null ? s2 == null : s1.equals(s2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode17_EphT16_vKxL0() {
        String s1 = null;
        String s2 = "test";
        assertNotEquals(s2, s1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withTextNode_ygbz0() throws Exception {
        nodeMock = mock(Node.class);
        attrMock = mock(Attr.class);
        parentMock = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(parentMock, nodeMock);
        when(nodeMock.getNodeType()).thenReturn(Node.TEXT_NODE);
        assertEquals("null/text()[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_CDATASectionNode_PIOD3_pEId0() {
        Document document = new org.apache.xerces.dom.DocumentImpl();
        Node node = document.createCDATASection("some data");
        DOMNodePointer parent = new DOMNodePointer(node, Locale.US);
        DOMNodePointer pointer = new DOMNodePointer(parent, node);
        assertEquals("/text()[1]/text()[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_ZesE7_oAaj0() {
        Document document = new org.apache.xerces.dom.DocumentImpl();
        Node node = document.createProcessingInstruction("target", "");
        DOMNodePointer pointer = new DOMNodePointer(node, Locale.US);
        NamespaceResolver namespaceResolver = pointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        qName = new QName("prefix", "localName");
        domNodePointer = new DOMNodePointer(node, locale, "id");
        NodeIterator result = domNodePointer.attributeIterator(qName);
        assertNotNull(result);
        assertTrue(result instanceof DOMAttributeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        parent = mock(VariablePointer.class);
        domNodePointer = new DOMNodePointer(parent, node);
        NodeIterator iterator = domNodePointer.namespaceIterator();
        assertNotNull(iterator);
        assertTrue(iterator instanceof DOMNamespaceIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        sameNodePointer = new DOMNodePointer(node, Locale.US, "id");
        differentNodePointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        // Test reflexive property
        assertTrue(domNodePointer.equals(domNodePointer));
        // Test symmetric property
        assertTrue(domNodePointer.equals(sameNodePointer));
        assertTrue(sameNodePointer.equals(domNodePointer));
        // Test transitive property
        assertTrue(domNodePointer.equals(sameNodePointer));
        assertTrue(sameNodePointer.equals(domNodePointer));
        assertTrue(domNodePointer.equals(domNodePointer));
        // Test null and different class
        assertFalse(domNodePointer.equals(null));
        assertFalse(domNodePointer.equals(new Object()));
        // Test different node
        assertFalse(domNodePointer.equals(differentNodePointer));
    }
}