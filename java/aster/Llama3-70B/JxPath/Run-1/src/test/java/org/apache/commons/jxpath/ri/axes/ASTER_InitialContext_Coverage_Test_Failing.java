/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InitialContext_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_qvhm0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        InitialContext initialContext = new InitialContext(namespaceContext);
        boolean result = initialContext.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_PositionLessThanOne_ReturnsFalse_CCrl0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.setPosition(0);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_PositionEqualToOneAndCollectionIsFalse_ReturnsTrue_KDSR2() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.setPosition(1);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_StartedFalse_ReturnsTrue_lIXC0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.nextSet();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_StartedTrue_ReturnsFalse_RsYf1() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)));
        initialContext.nextSet(); // set started to true
        boolean result = initialContext.nextSet();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_PositionGreaterThanNodePointerLength_ReturnsFalse_mxKx1_cgwD0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.nextSet();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_FirstCall_StartedSetToTrue_XmyF2_wZXM0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)));
        initialContext.nextSet(); // started should be set to true
        assertFalse(initialContext.nextSet()); // changed to assertFalse
    }
}