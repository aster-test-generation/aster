/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Failing {
    CollectionPointer collectionpointer;
    NodePointer pointer1;
    NodePointer pointer2;
    private Object collection;
    private DOMNodePointer parent;
    private int index = 1;
    @Mock
    private ValueUtils valueUtils;
    @Mock
    private Locale locale;
    @Mock
    private NodeTest test;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NodeIterator iterator;
    @Mock
    private CollectionAttributeNodeIterator collectionAttributeNodeIterator;
    @Mock
    private QName qName;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private QName qname;
    @Mock
    private JXPathIntrospector jXPathIntrospector;
    @Mock
    private Object value;
    @Mock
    private Object baseValue;
    private NodePointer valuePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        collection = Mockito.mock(Object.class);
        index = 10;
        collectionpointer = new CollectionPointer(collection, Locale.US);
        int expectedHashCode = System.identityHashCode(collection) + index;
        int actualHashCode = collectionpointer.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        qName = mock(QName.class);
        when(qName.getName()).thenReturn("mockedName");
        collectionpointer = new CollectionPointer(mock(DOMNodePointer.class), mock(Object.class));
        when(collectionpointer.getName()).thenReturn(qName);
        QName result = collectionpointer.getName();
        assertEquals("mockedName", result.getName());
        verify(collectionpointer, times(1)).getName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() throws Exception {
        collectionpointer = new CollectionPointer(parent, collection);
        when(parent.getValuePointer()).thenReturn(valuePointer);
        when(valuePointer.namespaceIterator()).thenReturn(nodeIterator);
        NodeIterator result = collectionpointer.namespaceIterator();
        assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_SpecificIndex_o_WwgE0() throws Exception {
        collection = new ArrayList<>();
        parent = mock(DOMNodePointer.class);
        Object value = "new value";
        CollectionPointer collectionPointer = new CollectionPointer(parent, collection);
        collectionPointer.setValue(value);
        verify(valueUtils).setValue(collection, index, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Index_MXXH1_UJiu0() {
        Object collection = new Object();
        Locale locale = new Locale("en", "US");
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        Object setValue = new Object();
        collectionPointer.setValue(setValue);
        assertEquals(setValue, collectionPointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_WzpH0_HDJc0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), context.getLocale());
        NodePointer ptr = collectionPointer.createPath(context, new Object());
        assertNotNull(ptr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_JfYc0_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        collection = new ArrayList<>();
        locale = Locale.US;
        valuePointer = mock(NodePointer.class);
        collectionpointer = new CollectionPointer(parent, collection);
        when(parent.getValuePointer()).thenReturn(valuePointer);
        Field indexField = CollectionPointer.class.getDeclaredField("index");
        indexField.setAccessible(true);
        indexField.set(collectionpointer, 1);
        NodePointer result = collectionpointer.namespacePointer("namespace");
        verify(valuePointer).namespacePointer("namespace");
        indexField.set(collectionpointer, CollectionPointer.WHOLE_COLLECTION);
        result = collectionpointer.namespacePointer("namespace");
        assertEquals(result, valuePointer.namespacePointer("namespace"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_JfYc0_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        collection = new ArrayList<>();
        locale = Locale.US;
        valuePointer = mock(NodePointer.class);
        collectionpointer = new CollectionPointer(parent, collection);
        when(parent.getValuePointer()).thenReturn(valuePointer);
        Field indexField = CollectionPointer.class.getDeclaredField("index");
        indexField.setAccessible(true);
        indexField.set(collectionpointer, 1);
        NodePointer result = collectionpointer.namespacePointer("namespace");
        verify(valuePointer).namespacePointer("namespace");
        indexField.set(collectionpointer, CollectionPointer.WHOLE_COLLECTION);
        result = collectionpointer.namespacePointer("namespace");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_PUbM0_uiAz0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        int index = 1;
        Object value = new Object();
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodePointer result = collectionPointer.createChild(context, name, index, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_WzpH0_HDJc0_fid2() {
        JXPathContext context = JXPathContext.newContext(new Object());
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), context.getLocale());
        NodePointer ptr = collectionPointer.createPath(context, new Object());
        assertNull(ptr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_JfYc0_1_fid2() throws Exception {
        parent = mock(DOMNodePointer.class);
        collection = new ArrayList<>();
        locale = Locale.US;
        valuePointer = mock(NodePointer.class);
        collectionpointer = new CollectionPointer(parent, collection);
        when(parent.getValuePointer()).thenReturn(valuePointer);
        when(valuePointer.namespacePointer("namespace")).thenReturn(valuePointer);
        NodePointer result = collectionpointer.namespacePointer("namespace");
        verify(valuePointer).namespacePointer("namespace");
        collectionpointer.setIndex(CollectionPointer.WHOLE_COLLECTION);
        result = collectionpointer.namespacePointer("namespace");
        assertEquals(result, valuePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_JfYc0_2_fid2() throws Exception {
        parent = mock(DOMNodePointer.class);
        collection = new ArrayList<>();
        locale = Locale.US;
        valuePointer = mock(NodePointer.class);
        collectionpointer = new CollectionPointer(parent, collection);
        when(parent.getValuePointer()).thenReturn(valuePointer);
        collectionpointer.setIndex(1);
        NodePointer result = collectionpointer.namespacePointer("namespace");
        verify(valuePointer).namespacePointer("namespace");
        collectionpointer.setIndex(CollectionPointer.WHOLE_COLLECTION);
        result = collectionpointer.namespacePointer("namespace");
        assertEquals(valuePointer, result);
    }
}