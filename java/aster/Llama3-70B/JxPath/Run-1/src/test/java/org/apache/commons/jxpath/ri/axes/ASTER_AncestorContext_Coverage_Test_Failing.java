/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_AncestorContext_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_PositionLessThanCurrentPosition_ResetCalled_WPkM0() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        when(ancestorContext.getCurrentPosition()).thenReturn(5);
        ancestorContext.setPosition(3);
        verify(ancestorContext).reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_PositionEqualToCurrentPosition_ReturnTrue_fMTO1() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        when(ancestorContext.getCurrentPosition()).thenReturn(5);
        boolean result = ancestorContext.setPosition(5);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_PositionGreaterThanCurrentPosition_NextNodeCalled_fbNo2() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        when(ancestorContext.getCurrentPosition()).thenReturn(3);
        when(ancestorContext.nextNode()).thenReturn(true);
        ancestorContext.setPosition(5);
        verify(ancestorContext, times(2)).nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_PositionEqualToZero_ResetCalled_xbaf4() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        when(ancestorContext.getCurrentPosition()).thenReturn(5);
        ancestorContext.setPosition(0);
        verify(ancestorContext).reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_PositionGreaterThanZero_ReturnTrue_rono5() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        when(ancestorContext.getCurrentPosition()).thenReturn(3);
        when(ancestorContext.nextNode()).thenReturn(true);
        boolean result = ancestorContext.setPosition(5);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_BQZK0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTypeTest);
        ancestorContext.nextNode();
    }
}