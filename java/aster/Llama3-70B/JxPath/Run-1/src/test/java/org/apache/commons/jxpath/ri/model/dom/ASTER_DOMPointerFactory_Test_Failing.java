/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMPointerFactory_Test_Failing {
    @Mock
    private NodePointer parent;
    @Mock
    private QName name;
    @Mock
    private Node bean;
    private DOMPointerFactory dompointerfactory;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_ZruW0_gELJ0_fid1() {
        DOMPointerFactory domPointerFactory = new DOMPointerFactory();
        int result = domPointerFactory.getOrder();
        assertEquals(10, result); // Assuming DOM_POINTER_FACTORY_ORDER is 10
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_Weuo0_fid1() throws Exception {
        DOMPointerFactory dompointerfactory = new DOMPointerFactory();
        NodePointer parent = mock(NodePointer.class);
        QName name = new QName("name");
        Object bean = mock(Node.class);
        when(parent instanceof DOMNodePointer).thenReturn(true);
        NodePointer result = dompointerfactory.createNodePointer(parent, name, bean);
        assertNotNull(result);
    }
}