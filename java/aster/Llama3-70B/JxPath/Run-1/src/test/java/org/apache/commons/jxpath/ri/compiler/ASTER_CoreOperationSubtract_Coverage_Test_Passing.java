/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationSubtract_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetSymbol_rluQ0() {
        Constant arg1 = new Constant("10");
        Constant arg2 = new Constant("5");
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(arg1, arg2);
        String symbol = coreOperationSubtract.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_fwGk0() {
        Constant arg1 = new Constant("string");
        Constant arg2 = new Constant(10);
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(arg1, arg2);
        int precedence = coreOperationSubtract.getPrecedence();
        assertEquals(CoreOperationSubtract.ADD_PRECEDENCE, precedence);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_JZyH0() {
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(new Constant("string"), new Constant(1));
        boolean result = coreOperationSubtract.isSymmetric();
        assert (!result);
    }
}