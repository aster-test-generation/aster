/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SimpleCharStream_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSuffix1_AtUE0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        char[] suffix = scs.GetSuffix(5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSuffix2_ZuFQ1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream("Hello World".getBytes()), 1, 1, 10);
        scs.bufpos = 5;
        char[] suffix = scs.GetSuffix(5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn5_RSfI4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""));
        scs.bufpos = 0;
        scs.UpdateLineColumn(' ');
        assertEquals(1, scs.bufcolumn[scs.bufpos]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginLine_pYkT0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        int result = simpleCharStream.getBeginLine();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImage1_BgPk0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        String result = scs.GetImage();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImage2_Ztsb1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream("".getBytes()), 1, 1, 10);
        String result = scs.GetImage();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit_kkaj0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""));
        java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(new byte[0]);
        scs.ReInit(bais);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit_AhGc0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.ReInit(new java.io.ByteArrayInputStream("".getBytes()), 1, 1);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginColumn1_kcap0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 0, 0);
        assertEquals(1, scs.getBeginColumn());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginColumn2_ktpk1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream("".getBytes()), 0, 0, 0024);
        assertEquals(1, scs.getBeginColumn());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginColumn3_VfLN2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream("".getBytes()), 0, 0);
        assertEquals(1, scs.getBeginColumn());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginColumn4_pLlc3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream("".getBytes()));
        assertEquals(0, scs.getBeginColumn());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginColumn5_zwwH4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""));
        assertEquals(0, scs.getBeginColumn());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginColumn6_hbqQ5() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 0, 0, 0024);
        assertEquals(1, scs.getBeginColumn());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit_jgPc0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.ReInit(new java.io.StringReader(""), 2, 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLine6_WXsu5() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
        scs.bufline = new int[1024];
        scs.bufcolumn = new int[1024];
        scs.bufpos = 0;
        scs.UpdateLineColumn(' ');
        assertEquals(1, scs.bufline[scs.bufpos]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit_ePKW0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""));
        scs.ReInit(new java.io.StringReader(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn3_mpaK2_HDzn0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFillBuff4_WJyq3_iYFV0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 0, 0);
        scs.bufpos = 0; // Initialize bufpos
        scs.UpdateLineColumn(' '); // Call UpdateLineColumn to set line and column
        assertEquals(1, scs.bufpos); // Update the assertion
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffNoWrapAround_iXYr1_NeZe0_2() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
        simpleCharStream.ExpandBuff(false);
        assertEquals(1, simpleCharStream.line);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffNoWrapAround_iXYr1_NeZe0_3() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("test"), 0, 0);
        simpleCharStream.ExpandBuff(false);
        assertEquals(1, simpleCharStream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackup2_eZCJ1_UFIW0_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 10);
        scs.backup(3);
        assertEquals(0, scs.getBeginColumn());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackup2_eZCJ1_UFIW4092_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[4092]), 1, 1, 14092);
        scs.backup(3);
        assertEquals(4092, scs.bufpos);
    }
}