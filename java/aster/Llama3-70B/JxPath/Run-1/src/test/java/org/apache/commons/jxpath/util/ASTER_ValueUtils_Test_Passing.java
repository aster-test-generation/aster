/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_iBHR0() {
        Object[] array = new Object[]{"a", "b", "c"};
        Object result = ValueUtils.getValue(array, 1);
        assert "b".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_OutOfBounds_MmOi1() {
        Object[] array = new Object[]{"a", "b", "c"};
        Object result = ValueUtils.getValue(array, 5);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_ZKJv2() {
        List<String> list = new ArrayList<String>();
        list.add("a");
        list.add("b");
        list.add("c");
        Object result = ValueUtils.getValue(list, 1);
        assert "b".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_OutOfBounds_YSUQ3() {
        List<String> list = new ArrayList<String>();
        list.add("a");
        list.add("b");
        list.add("c");
        Object result = ValueUtils.getValue(list, 5);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Collection_JEjU4() {
        Collection<String> collection = new HashSet<String>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Object result = ValueUtils.getValue(collection, 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Collection_OutOfBounds_lwOs5() {
        Collection<String> collection = new HashSet<String>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Object result = ValueUtils.getValue(collection, 5);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Null_IdOa6() {
        Object result = ValueUtils.getValue(null, 1);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyList_htFQ7() {
        List<String> list = new ArrayList<String>();
        Object result = ValueUtils.getValue(list, 1);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyCollection_OMfF8() {
        Collection<String> collection = new HashSet<String>();
        Object result = ValueUtils.getValue(collection, 1);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ArrayList_GZgQ9() {
        ArrayList<String> arrayList = new ArrayList<String>();
        arrayList.add("a");
        arrayList.add("b");
        arrayList.add("c");
        Object result = ValueUtils.getValue(arrayList, 1);
        assert "b".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_LinkedList_NSaJ10() {
        LinkedList<String> linkedList = new LinkedList<String>();
        linkedList.add("a");
        linkedList.add("b");
        linkedList.add("c");
        Object result = ValueUtils.getValue(linkedList, 1);
        assert "b".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Vector_ajNh11() {
        Vector<String> vector = new Vector<String>();
        vector.add("a");
        vector.add("b");
        vector.add("c");
        Object result = ValueUtils.getValue(vector, 1);
        assert "b".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Stack_kHTU12() {
        Stack<String> stack = new Stack<String>();
        stack.add("a");
        stack.add("b");
        stack.add("c");
        Object result = ValueUtils.getValue(stack, 1);
        assert "b".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Array_BjiD0() {
        Object value = new int[5];
        assertTrue(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Collection_lcuR1() {
        Object value = new ArrayList<>();
        assertTrue(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_NotCollection_ECdQ2() {
        Object value = "Hello";
        assertFalse(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_TApO0() {
        Object[] array = new Object[]{"a", "b", "c"};
        Object result = ValueUtils.remove(array, 1);
        assertArrayEquals(new Object[]{"a", "c"}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_OutOfBounds_FJkJ1() {
        Object[] array = new Object[]{"a", "b", "c"};
        try {
            ValueUtils.remove(array, 5);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_dMos2() {
        List list = new ArrayList(Arrays.asList("a", "b", "c"));
        Object result = ValueUtils.remove(list, 1);
        assertEquals(list, result);
        assertEquals(2, list.size());
        assertEquals("a", list.get(0));
        assertEquals("c", list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_OutOfBounds_Zksk3() {
        List list = new ArrayList(Arrays.asList("a", "b", "c"));
        try {
            ValueUtils.remove(list, 5);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_nlVL4() {
        Collection collection = new HashSet(Arrays.asList("a", "b", "c"));
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(collection, result);
        assertEquals(2, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_OutOfBounds_YyMG5() {
        Collection collection = new HashSet(Arrays.asList("a", "b", "c"));
        try {
            ValueUtils.remove(collection, 5);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Null_iZOI6() {
        Object result = ValueUtils.remove(null, 0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_NotSupported_tnTV7() {
        Object obj = new Object();
        try {
            ValueUtils.remove(obj, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_SingleElement_RzsL11() {
        Object[] array = new Object[]{"a"};
        Object result = ValueUtils.remove(array, 0);
        assertArrayEquals(new Object[]{}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NotContainer_fIBo1() {
        Object result = ValueUtils.getValue("value");
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_VejN2() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals("b", iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals("c", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_tKch4() {
        Collection collection = new ArrayList(Arrays.asList("a", "b", "c"));
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals("b", iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals("c", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingleObject_DNyh5() {
        Iterator iterator = ValueUtils.iterate("a");
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Array_iPvE0() {
        assertEquals(1, ValueUtils.getCollectionHint(int[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Collection_lxgT1() {
        assertEquals(1, ValueUtils.getCollectionHint(Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Primitive_iQvL2() {
        assertEquals(-1, ValueUtils.getCollectionHint(int.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Final_aMew4() {
        assertEquals(-1, ValueUtils.getCollectionHint(String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Default_YfLD5() {
        assertEquals(0, ValueUtils.getCollectionHint(Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Array_FCfJ0() {
        Object[] array = new Object[5];
        ValueUtils.setValue(array, 0, "value");
        assertEquals("value", array[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_List_GanN1() {
        List<Object> list = new ArrayList<>();
        list.add(null);
        ValueUtils.setValue(list, 0, "value");
        assertEquals("value", list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Collection_iOdu2() {
        Collection<Object> collection = new HashSet<>();
        try {
            ValueUtils.setValue(collection, 0, "value");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullCollection_GWfS3() {
        ValueUtils.setValue(null, 0, "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_IndexOutOfBounds_NdHI4() {
        Object[] array = new Object[5];
        try {
            ValueUtils.setValue(array, 5, "value");
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthNull_UPuL0() {
        assertEquals(0, ValueUtils.getLength(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthArray_BtNy1() {
        Object[] array = new Object[]{1, 2, 3};
        assertEquals(3, ValueUtils.getLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthCollection_hecE2() {
        Collection collection = new ArrayList();
        collection.add(1);
        collection.add(2);
        assertEquals(2, ValueUtils.getLength(collection));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthSingleObject_LEsb3() {
        assertEquals(1, ValueUtils.getLength("Hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionNull_RXBr0() {
        Object result = ValueUtils.expandCollection(null, 10);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_uEDZ1() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(5, Array.getLength(result));
        assertEquals(1, Array.get(result, 0));
        assertEquals(2, Array.get(result, 1));
        assertEquals(3, Array.get(result, 2));
        assertNull(Array.get(result, 3));
        assertNull(Array.get(result, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_qJwN2() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(5, ((Collection) result).size());
        assertEquals(1, ((Collection) result).iterator().next());
        assertTrue(((Collection) result).contains(2));
        assertTrue(((Collection) result).contains(3));
        assertTrue(((Collection) result).contains(null));
        assertTrue(((Collection) result).contains(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArrayTooSmall_TqDE3() {
        Object[] array = new Object[]{1, 2, 3};
        try {
            ValueUtils.expandCollection(array, 2);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollectionTooSmall_uvNa4() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        try {
            ValueUtils.expandCollection(list, 2);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionUnknownType_Sbpt5() {
        Object obj = new Object();
        try {
            ValueUtils.expandCollection(obj, 5);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_dMos2_1() {
        List list = new ArrayList(Arrays.asList("a", "b", "c"));
        Object result = ValueUtils.remove(list, 1);
        assertEquals(list, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_dMos2_2() {
        List list = new ArrayList(Arrays.asList("a", "b", "c"));
        Object result = ValueUtils.remove(list, 1);
        assertEquals(2, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_dMos2_3() {
        List list = new ArrayList(Arrays.asList("a", "b", "c"));
        Object result = ValueUtils.remove(list, 1);
        assertEquals("a", list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_dMos2_4() {
        List list = new ArrayList(Arrays.asList("a", "b", "c"));
        Object result = ValueUtils.remove(list, 1);
        assertEquals("c", list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_nlVL4_1() {
        Collection collection = new HashSet(Arrays.asList("a", "b", "c"));
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(collection, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_nlVL4_2() {
        Collection collection = new HashSet(Arrays.asList("a", "b", "c"));
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(2, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_VejN2_1() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_VejN2_2() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_tKch4_1() {
        Collection collection = new ArrayList(Arrays.asList("a", "b", "c"));
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_tKch4_2() {
        Collection collection = new ArrayList(Arrays.asList("a", "b", "c"));
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingleObject_DNyh5_1() {
        Iterator iterator = ValueUtils.iterate("a");
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingleObject_DNyh5_2() {
        Iterator iterator = ValueUtils.iterate("a");
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_uEDZ1_1() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(5, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_uEDZ1_2() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(1, Array.get(result, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_uEDZ1_3() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(2, Array.get(result, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_uEDZ1_4() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(3, Array.get(result, 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_uEDZ1_5() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertNull(Array.get(result, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_uEDZ1_6() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertNull(Array.get(result, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_qJwN2_1() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(5, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_qJwN2_2() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(1, ((Collection) result).iterator().next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_qJwN2_3() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertTrue(((Collection) result).contains(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_qJwN2_4() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertTrue(((Collection) result).contains(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_qJwN2_5() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertTrue(((Collection) result).contains(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_withArray_YVXE1() {
        Object array = new int[5];
        Object expandedArray = ValueUtils.expandCollection(array, 10);
        assert expandedArray.getClass().isArray();
        assert Array.getLength(expandedArray) == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_withCollection_Vpsr2() {
        Object collection = new java.util.ArrayList();
        Object expandedCollection = ValueUtils.expandCollection(collection, 10);
        assert expandedCollection instanceof java.util.Collection;
        assert ((java.util.Collection) expandedCollection).size() == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_withNullCollection_huCd2_txDj0() {
        assertNull(ValueUtils.expandCollection(null, 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_PublicMethod_PublicClass_Kdpf0_wzxt0() {
        try {
            Method method = String.class.getMethod("toString");
            Method accessibleMethod = ValueUtils.getAccessibleMethod(method);
            assertSame(method, accessibleMethod);
        } catch (NoSuchMethodException e) {
            fail("NoSuchMethodException occurred");
        } catch (SecurityException e) {
            fail("SecurityException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Yowj0() {
        Object collection = new int[5];
        Object expandedCollection = ValueUtils.expandCollection(collection, 10);
        assertEquals(10, Array.getLength(expandedCollection));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_Empty_Zgsc8_fid2() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_OsHA0_1_fid2() {
        Iterator iterator = ValueUtils.iterate(null);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_dwhx1_1_fid2() {
        Object[] array = new Object[0];
        Iterator iterator = ValueUtils.iterate(array);
    }
}