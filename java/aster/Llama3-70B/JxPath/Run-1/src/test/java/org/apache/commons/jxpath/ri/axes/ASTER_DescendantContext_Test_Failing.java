/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DescendantContext_Test_Failing {
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private DescendantContext descendantContext;
    private NodePointer currentNodePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeIterator nodeIterator;
    private boolean setStarted = false;
    private Stack stack = null;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        // given
        when(descendantContext.nextNode()).thenReturn(true);
        // when
        boolean result = descendantContext.setPosition(5);
        // then
        verify(descendantContext, times(5)).nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_reset() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        // given
        when(descendantContext.nextNode()).thenReturn(false);
        // when
        boolean result = descendantContext.setPosition(5);
        // then
        verify(descendantContext).reset();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IncludeSelf_ReturnsTrue() throws Exception {
        nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        parentContext = new NamespaceContext(new SelfContext(null, nodeTest), nodeTest);
        descendantContext = new DescendantContext(parentContext, true, nodeTest);
        // Arrange
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        // Act
        boolean result = descendantContext.nextNode();
        // Assert
        assertTrue(result);
        verify(parentContext, times(1)).getCurrentNodePointer();
        verify(currentNodePointer, times(1)).testNode(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IncludeSelf_ReturnsFalse() throws Exception {
        nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        parentContext = new NamespaceContext(new SelfContext(null, nodeTest), nodeTest);
        descendantContext = new DescendantContext(parentContext, true, nodeTest);
        // Arrange
        when(parentContext.getCurrentNodePointer()).thenReturn(null);
        // Act
        boolean result = descendantContext.nextNode();
        // Assert
        assertFalse(result);
        verify(parentContext, times(1)).getCurrentNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_mbhO0_1() throws Exception {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTest);
        NodePointer currentNodePointer = mock(NodePointer.class);
        descendantContext.setPosition(1);
        when(descendantContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer result = descendantContext.getCurrentNodePointer();
        descendantContext.setPosition(1);
        when(descendantContext.getCurrentNodePointer()).thenReturn(null);
        NodePointer result2 = descendantContext.getCurrentNodePointer();
        assertNotNull(result);
        assertNull(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_mbhO0_2() throws Exception {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTest);
        NodePointer currentNodePointer = mock(NodePointer.class);
        descendantContext.setPosition(1);
        when(descendantContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer result = descendantContext.getCurrentNodePointer();
        assertEquals(currentNodePointer, result);
        descendantContext.setPosition(1);
        when(descendantContext.getCurrentNodePointer()).thenReturn(null);
        result = descendantContext.getCurrentNodePointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_Recursive_ReturnsTrue_PbKt0() throws Exception {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext parentContext = Mockito.mock(NamespaceContext.class);
        DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTest);
        NodePointer currentNodePointer = Mockito.mock(NodePointer.class);
        NodeIterator nodeIterator = Mockito.mock(NodeIterator.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.childIterator(nodeTest, false, null)).thenReturn(nodeIterator);
        when(nodeIterator.setPosition(1)).thenReturn(true);
        when(nodeIterator.getNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        boolean result = descendantContext.nextNode();
        assertTrue(result);
        verify(parentContext, times(1)).getCurrentNodePointer();
        verify(currentNodePointer, times(1)).childIterator(nodeTest, false, null);
        verify(nodeIterator, times(1)).setPosition(1);
        verify(nodeIterator, times(1)).getNodePointer();
        verify(currentNodePointer, times(1)).testNode(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode1_iFju0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        assertTrue(descendantContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_mbhO0_1_fid3() throws Exception {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTest);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(descendantContext.setPosition(1)).thenReturn(true);
        when(descendantContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer result = descendantContext.getCurrentNodePointer();
        when(descendantContext.setPosition(1)).thenReturn(false);
        when(descendantContext.getCurrentNodePointer()).thenReturn(null);
        result = descendantContext.getCurrentNodePointer();
        assertEquals(currentNodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_mbhO0_2_fid3() throws Exception {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTest);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(descendantContext.setPosition(1)).thenReturn(true);
        when(descendantContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer result = descendantContext.getCurrentNodePointer();
        when(descendantContext.setPosition(1)).thenReturn(false);
        when(descendantContext.getCurrentNodePointer()).thenReturn(null);
        result = descendantContext.getCurrentNodePointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_dIZN0_tFHI0_fid3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        descendantContext.reset();
        assertFalse(descendantContext.isChildOrderingRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_Recursive_ReturnsTrue_PbKt0_fid3() throws Exception {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(null, nodeTest), nodeTest);
        DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTest);
        NodePointer currentNodePointer = Mockito.mock(NodePointer.class);
        NodeIterator nodeIterator = Mockito.mock(NodeIterator.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.childIterator(nodeTest, false, null)).thenReturn(nodeIterator);
        when(nodeIterator.setPosition(1)).thenReturn(true);
        when(nodeIterator.getNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        boolean result = descendantContext.nextNode();
        assertTrue(result);
        verify(parentContext, times(1)).getCurrentNodePointer();
        verify(currentNodePointer, times(1)).childIterator(nodeTest, false, null);
        verify(nodeIterator, times(1)).setPosition(1);
        verify(nodeIterator, times(1)).getNodePointer();
        verify(currentNodePointer, times(1)).testNode(nodeTest);
    }
}