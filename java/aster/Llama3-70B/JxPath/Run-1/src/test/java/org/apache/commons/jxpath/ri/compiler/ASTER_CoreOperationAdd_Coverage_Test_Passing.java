/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationAdd_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetSymbol_CyrU0() {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[]{});
        String symbol = coreOperationAdd.getSymbol();
        assertEquals("+", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetPrecedence_pEle0() {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[]{});
        int expectedPrecedence = CoreOperationAdd.ADD_PRECEDENCE;
        int actualPrecedence = coreOperationAdd.getPrecedence();
        assertEquals(expectedPrecedence, actualPrecedence);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_NKDD0() {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[]{});
        boolean result = coreOperationAdd.isSymmetric();
        assertTrue(result);
    }
}