/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_xkCh0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        Expression[] predicates = new Expression[0];
        Step step = new Step(2, nodeTypeTest, predicates);
        assertEquals(2, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_withNullPredicates_Yrab0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        Step step = new Step(1, nodeTypeTest, null);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ChildAxis_NodeTypeTest_pKKu0() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_CHILD, nodeTest, new Expression[0]);
        assertEquals(nodeTest.toString(), step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AttributeAxis_NodeTypeTest_Mhen1() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_ATTRIBUTE, nodeTest, new Expression[0]);
        assertEquals("@" + nodeTest.toString(), step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SelfAxis_NodeTypeTest_Node_dJQB2() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_SELF, nodeTest, new Expression[0]);
        assertEquals(".", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ParentAxis_NodeTypeTest_Node_FcHo4() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_PARENT, nodeTest, new Expression[0]);
        assertEquals("..", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_ADKz0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        Expression[] predicates = new Expression[1];
        Step step = new Step(1, nodeTypeTest, predicates);
        assertArrayEquals(predicates, step.getPredicates());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_SELF_YWNv0() {
        assertEquals("self", Step.axisToString(Compiler.AXIS_SELF));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_CHILD_CJHl1() {
        assertEquals("child", Step.axisToString(Compiler.AXIS_CHILD));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_PARENT_yjJk2() {
        assertEquals("parent", Step.axisToString(Compiler.AXIS_PARENT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_ANCESTOR_ggph3() {
        assertEquals("ancestor", Step.axisToString(Compiler.AXIS_ANCESTOR));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_ATTRIBUTE_vNLU4() {
        assertEquals("attribute", Step.axisToString(Compiler.AXIS_ATTRIBUTE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_NAMESPACE_yhxb5() {
        assertEquals("namespace", Step.axisToString(Compiler.AXIS_NAMESPACE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_PRECEDING_Qqnl6() {
        assertEquals("preceding", Step.axisToString(Compiler.AXIS_PRECEDING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringCompiler_AXIS_FOLLOWING_BItr7() {
        assertEquals("following", Step.axisToString(Compiler.AXIS_FOLLOWING));
    }
}