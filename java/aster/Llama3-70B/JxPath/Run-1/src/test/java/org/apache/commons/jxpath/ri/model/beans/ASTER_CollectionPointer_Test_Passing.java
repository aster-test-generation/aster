/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Passing {
    CollectionPointer collectionpointer;
    NodePointer pointer1;
    NodePointer pointer2;
    private Object collection;
    private DOMNodePointer parent;
    private int index = 1;
    @Mock
    private ValueUtils valueUtils;
    @Mock
    private Locale locale;
    @Mock
    private NodeTest test;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NodeIterator iterator;
    @Mock
    private CollectionAttributeNodeIterator collectionAttributeNodeIterator;
    @Mock
    private QName qName;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private QName qname;
    @Mock
    private JXPathIntrospector jXPathIntrospector;
    @Mock
    private Object value;
    @Mock
    private Object baseValue;
    private NodePointer valuePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), Locale.US);
        pointer1 = mock(NodePointer.class);
        pointer2 = mock(NodePointer.class);
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(2);
        int result = collectionpointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WholeCollectionNullTest_Dyif0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodeTest nodeTest = null;
        assertTrue(collectionPointer.testNode(nodeTest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        Object collection = Mockito.mock(Object.class);
        Locale locale = Mockito.mock(Locale.class);
        collectionpointer = new CollectionPointer(collection, locale);
        boolean result = collectionpointer.isCollection();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_Vryi0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        assertTrue(collectionPointer.equals(collectionPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_RKGL1() {
        Object object = new Object();
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        assertFalse(collectionPointer.equals(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameCollection_PVcv2() {
        Object collection = new Object();
        CollectionPointer collectionPointer1 = new CollectionPointer(collection, Locale.US);
        CollectionPointer collectionPointer2 = new CollectionPointer(collection, Locale.US);
        assertTrue(collectionPointer1.equals(collectionPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentCollection_abzP3() {
        Object collection1 = new Object();
        Object collection2 = new Object();
        CollectionPointer collectionPointer1 = new CollectionPointer(collection1, Locale.US);
        CollectionPointer collectionPointer2 = new CollectionPointer(collection2, Locale.US);
        assertFalse(collectionPointer1.equals(collectionPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_mNEB4() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        assertFalse(collectionPointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_false_HAaB1() {
        Locale locale = new Locale("en", "US");
        Object collection = new Object();
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        collectionPointer.setIndex(CollectionPointer.WHOLE_COLLECTION);
        assertFalse(collectionPointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath5_nlNp4() {
        Object collection = new Object();
        Locale locale = new Locale("en", "US");
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        assertEquals("/", collectionPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        collection = Mockito.mock(Object.class);
        collectionpointer = new CollectionPointer(collection, Locale.US);
        Object result = collectionpointer.getBaseValue();
        assertEquals(collection, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_WholeCollection_b_gMFc0() throws Exception {
        collection = new ArrayList<>();
        parent = mock(DOMNodePointer.class);
        int wholeCollectionIndex = CollectionPointer.WHOLE_COLLECTION;
        Object value = "new value";
        CollectionPointer pointer = new CollectionPointer(parent, collection);
        pointer.setValue(value);
        verify(parent).setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_ErEv0_HRRM0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodePointer nodePointer = collectionPointer.createChild(context, name, 0);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_qJbP0() throws Exception {
        java.util.Collection<String> collection = new java.util.ArrayList<String>();
        collection.add("element");
        java.util.Locale locale = new java.util.Locale("en", "US");
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        Object baseValue = collectionPointer.getBaseValue();
        assertSame(collection, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_gleI0() throws Exception {
        Object collection = new Object();
        CollectionPointer collectionPointer = new CollectionPointer(collection, Locale.US);
        assertEquals(collection, collectionPointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength_OhIx0_1() throws Exception {
        Object collection = new ArrayList<>();
        Locale locale = new Locale("en", "US");
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        Object baseValue = collectionPointer.getBaseValue();
        int length = ((Collection) baseValue).size();
        assertNotNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength_OhIx0_2() throws Exception {
        Object collection = new ArrayList<>();
        Locale locale = new Locale("en", "US");
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        Object baseValue = collectionPointer.getBaseValue();
        int length = ((Collection) baseValue).size();
        assertTrue(length >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_WholeCollection_GOQN0() throws Exception {
        Object collection = new Object();
        Locale locale = new Locale("en", "US");
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        Object result = collectionPointer.getBaseValue();
        assertEquals(collection, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath2_ivsv1_wPVA0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        Object collection = new Object();
        Locale locale = Locale.US;
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        NodePointer result = collectionPointer.createPath(context);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_SpecificIndex_o_WwgE0_fid2() throws Exception {
        collection = new ArrayList<>();
        parent = mock(DOMNodePointer.class);
        Object value = "new value";
        CollectionPointer collectionPointer = new CollectionPointer(parent, collection);
        collectionPointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_PUbM0_uiAz0_fid2() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "localName");
        int index = 1;
        Object value = new Object();
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<>(), Locale.US);
        NodePointer result = collectionPointer.createChild(context, name, index, value);
        assertNotNull(result);
    }
}