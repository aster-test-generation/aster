/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_DOMAttributePointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withNullValueAndNotSpecified_UZtf0() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn(null);
        when(attr.getSpecified()).thenReturn(false);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        Object result = domAttributePointer.getValue();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withEmptyValueAndNotSpecified_VIVd1() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(false);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        Object result = domAttributePointer.getValue();
        assertNull(result);
    }
}