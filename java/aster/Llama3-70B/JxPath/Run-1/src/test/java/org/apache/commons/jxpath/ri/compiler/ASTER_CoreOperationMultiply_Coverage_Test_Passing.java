/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationMultiply_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetSymbol_TKBV0() {
        Constant arg1 = new Constant("10");
        Constant arg2 = new Constant("20");
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        String symbol = coreOperationMultiply.getSymbol();
        assertEquals("*", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetPrecedence_cGlD0() {
        Constant arg1 = new Constant("string");
        Constant arg2 = new Constant(10);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        int expectedPrecedence = CoreOperationMultiply.MULTIPLY_PRECEDENCE;
        int actualPrecedence = coreOperationMultiply.getPrecedence();
        assertEquals(expectedPrecedence, actualPrecedence);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_SLWW0() {
        Constant arg1 = new Constant("string");
        Constant arg2 = new Constant(1);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        boolean result = coreOperationMultiply.isSymmetric();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Uaey1() {
        Constant arg1 = new Constant("string");
        Constant arg2 = new Constant(1);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        boolean result = coreOperationMultiply.isSymmetric();
        assertTrue(result);
    }
}