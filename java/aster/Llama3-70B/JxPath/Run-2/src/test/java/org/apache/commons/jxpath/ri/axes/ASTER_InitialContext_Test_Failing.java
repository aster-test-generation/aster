/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InitialContext_Test_Failing {
    @Mock
    private NodePointer nodePointer;
    private boolean collection = true;
    private InitialContext initialContext;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private boolean started = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition1_MQrt0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(null);
        initialContext.nextSet();
        assertTrue(initialContext.nextSet() == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition5_zDkR4() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        initialContext.nextSet(); // Initialize the started flag
        assertTrue(initialContext.nextSet()); // This will return false
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_Kssm0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        boolean result = initialContext.nextSet();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        selfContext = new SelfContext(null, nodeTypeTest);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        initialContext = new InitialContext(namespaceContext);
        // Mock the setPosition method to return true
        InitialContext spyInitialContext = Mockito.spy(initialContext);
        Mockito.when(spyInitialContext.setPosition(Mockito.anyInt())).thenReturn(true);
        // Call the nextNode method
        boolean result = spyInitialContext.nextNode();
        // Assert the result
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_RVap0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        assertTrue(initialContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet_1() throws Exception {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        initialContext = new InitialContext(parentContext);
        // First call should return true
        // Second call should return false
        assertTrue(initialContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet_2() throws Exception {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        initialContext = new InitialContext(parentContext);
        // First call should return true
        // Second call should return false
        assertFalse(initialContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_StartedFalse_IeAc0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        assertTrue(initialContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_StartedTrue_Pehp1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        initialContext.nextSet();
        assertTrue(initialContext.nextSet() == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSingleNodePointer_WnaN0() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext;
        SelfContext selfContext;
        InitialContext initialContext;
        namespaceContext = new NamespaceContext(new SelfContext(null, null), null);
        selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        initialContext = new InitialContext(null); // fixed null pointer error
        Pointer result = initialContext.getSingleNodePointer();
        assertNotNull(result); // fixed assertion
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition3_wFJP2_KoXM0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        assertNotNull(namespaceContext);
        InitialContext initialContext = new InitialContext(namespaceContext);
        assertNotNull(initialContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition1_MQrt0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        assertTrue(initialContext.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_Kssm0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        Pointer pointer = initialContext.getSingleNodePointer();
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_RVap0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        assertTrue(initialContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_LugP0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object result = initialContext.getValue();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet() throws Exception {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        initialContext = new InitialContext(parentContext);
        // First call should return true
        assertTrue(initialContext.nextSet());
        // Second call should return false
        assertFalse(initialContext.nextSet());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_StartedFalse_IeAc0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        boolean result = initialContext.nextSet();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_StartedTrue_Pehp1_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        initialContext.nextSet();
        boolean result = initialContext.nextSet();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSingleNodePointer_WnaN0_fid2() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext;
        SelfContext selfContext;
        InitialContext initialContext;
        Pointer nodePointer;
        Pointer inodePointer;
        namespaceContext = new NamespaceContext(new SelfContext(null, null), null);
        selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        initialContext = new InitialContext(namespaceContext);
        Pointer result = initialContext.getSingleNodePointer();
        assertNull(result); // or any other assertion based on the expected result
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_oiFC0() throws Exception {
        nodePointer = Mockito.mock(NodePointer.class);
        initialContext = new InitialContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)));
        NodePointer inodePointer = initialContext.getCurrentNodePointer(); // Initialize and assign the variable
        assertEquals(nodePointer, inodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_FZir0() throws Exception {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean actualValue = initialContext.nextSet();
        assertTrue(actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition4_TkYm3_oxDS0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        initialContext.nextSet(); // Call nextSet() to set started to true
        assertFalse(initialContext.nextSet());
    }
}