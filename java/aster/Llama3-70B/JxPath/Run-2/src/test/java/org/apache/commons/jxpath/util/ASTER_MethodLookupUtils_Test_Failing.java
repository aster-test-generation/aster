/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_sMdw1_1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_sMdw1_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertEquals("int", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoMatch_gHRD2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{1});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameter_Seug3_1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameter_Seug3_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
        assertEquals("java.lang.String", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoConstructors_iyGD6() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_WrapperParameter_HqzZ8_1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{Integer.valueOf(1)});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_WrapperParameter_HqzZ8_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{Integer.valueOf(1)});
        assertEquals("java.lang.Integer", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_taNI10() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, null);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod3_kkOw2() {
        Method method = MethodLookupUtils.lookupStaticMethod(Math.class, "max", new Object[]{1, 2});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod5_AQww4() {
        Method method = MethodLookupUtils.lookupStaticMethod(Character.class, "toUpperCase", new Object[]{'a'});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod9_OZmQ8() {
        Method method = MethodLookupUtils.lookupStaticMethod(Void.class, "toString", new Object[]{});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod11_nhwB10() {
        Method method = MethodLookupUtils.lookupStaticMethod(null, "toString", new Object[]{});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod12_dqOA11() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, null, new Object[]{});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod13_Rvra12() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "toString", null);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod14_GgMu13() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "toString", new Object[]{null});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod1_cGry0() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{"hello"});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod4_voqF3() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{"hello", "world"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod10_WXAE9() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{"hello", null});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod13_mnrm12() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{"hello", 1, null});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod15_wnoo14() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{"hello", null, 2});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod17_NxHl16() {
        try {
            MethodLookupUtils.lookupMethod(String.class, "ambiguousMethod", new Object[]{"hello", "world"});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_sMdw1_1_fid1() {
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoMatch_gHRD2_fid1() {
        try {
            MethodLookupUtils.lookupMethod(String.class, "init", new Object[]{1});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: init", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_PrimitiveParameter_aqhv7_1_fid1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_PrimitiveParameter_aqhv7_2_fid1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertEquals("java.lang.Integer", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_WrapperParameter_HqzZ8_1_fid1() {
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{Integer.valueOf(1)});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_WrapperParameter_HqzZ8_2_fid1() {
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{Integer.valueOf(1)});
        assertEquals("int", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod3_kkOw2_fid1() {
        try {
            MethodLookupUtils.lookupMethod(Math.class, "max", new Object[]{1, 2});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: max", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod5_AQww4_fid1() {
        try {
            MethodLookupUtils.lookupMethod(Character.class, "toUpperCase", new Object[]{'a'});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: toUpperCase", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod17_NxHl16_fid1() {
        try {
            MethodLookupUtils.lookupMethod(String.class, "ambiguousMethod", new Object[]{"hello", "world"});
            assert false;
        } catch (JXPathException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_sMdw1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{1});
        assertNotNull(constructor);
        assertEquals("int", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameter_Seug3() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
        assertNotNull(constructor);
        assertEquals("java.lang.String", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_WrapperParameter_HqzZ8() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{Integer.valueOf(1)});
        assertNotNull(constructor);
        assertEquals("java.lang.Integer", constructor.getParameterTypes()[0].getName());
    }
}