/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPropertyPointer_Test_Failing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private DynaBean dynaBean;
    private DynaBeanPropertyPointer dynabeanpropertypointer;
    private String[] names;
    private String name;
    private DynaProperty dynaProperty;
    private int index = 0;
    private static final String CLASS = "class";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyIndex() throws Exception {
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        // setup mock behavior
        when(dynabeanpropertypointer.getPropertyNames()).thenReturn(names);
        // call the method under test
        int result = dynabeanpropertypointer.getPropertyIndex();
        // assert the result
        assertEquals(1, result); // since "name2" is at index 1 in the names array
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        String propertyName = "someProperty";
        Object baseValue = "someValue";
        when(dynabeanpropertypointer.getPropertyName()).thenReturn(propertyName);
        when(dynaBean.get(propertyName)).thenReturn(baseValue);
        Object result = dynabeanpropertypointer.getBaseValue();
        assertEquals(baseValue, result);
        verify(dynaBean).get(propertyName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount() throws Exception {
        parent = mock(DOMNodePointer.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        String[] propertyNames = {"prop1", "prop2", "prop3"};
        when(dynabeanpropertypointer.getPropertyNames()).thenReturn(propertyNames);
        int count = dynabeanpropertypointer.getPropertyCount();
        assertEquals(3, count);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_illegalArgumentException_Zzwa0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        QName qName = new QName("someProperty");
        VariablePointer variablePointer = new VariablePointer(qName);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynaBean.get("someProperty")).thenThrow(new IllegalArgumentException());
        try {
            dynabeanpropertypointer.getImmediateNode();
            fail("Expected IllegalArgumentException");
        } catch (JXPathException e) {
            assertEquals("Error getting property 'someProperty'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_vMzl0() throws Exception {
        parent = mock(DOMNodePointer.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        int propertyCount = dynabeanpropertypointer.getPropertyCount();
        assertNotNull(propertyCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_WuOZ0() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        dynaBean = Mockito.mock(DynaBean.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        int propertyCount = dynabeanpropertypointer.getPropertyCount();
        assertEquals(0, propertyCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_illegalArgumentException_Zzwa0_fid1() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        QName qName = new QName("someProperty");
        VariablePointer variablePointer = new VariablePointer(qName);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        Field indexField = DynaBeanPropertyPointer.class.getDeclaredField("index");
        indexField.setAccessible(true);
        indexField.setInt(dynabeanpropertypointer, 1);
        Field variablePointerField = DynaBeanPropertyPointer.class.getDeclaredField("variablePointer");
        variablePointerField.setAccessible(true);
        variablePointerField.set(dynabeanpropertypointer, variablePointer);
        when(dynaBean.get("someProperty", 1)).thenThrow(new IllegalArgumentException());
        try {
            dynabeanpropertypointer.getImmediateNode();
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WHOLE_COLLECTION_Jjjb0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        Field indexField = DynaBeanPropertyPointer.class.getDeclaredField("index");
        indexField.setAccessible(true);
        indexField.set(dynabeanpropertypointer, DynaBeanPropertyPointer.WHOLE_COLLECTION);
        String propertyName = "someProperty";
        when(dynabeanpropertypointer.getPropertyName()).thenReturn(propertyName);
        dynabeanpropertypointer.remove();
        verify(dynaBean).set(propertyName, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexedProperty_wNxt0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        Field indexField = DynaBeanPropertyPointer.class.getDeclaredField("index");
        indexField.setAccessible(true);
        indexField.set(dynabeanpropertypointer, 1);
        when(dynabeanpropertypointer.isIndexedProperty()).thenReturn(true);
        String propertyName = "someProperty";
        when(dynabeanpropertypointer.getPropertyName()).thenReturn(propertyName);
        dynabeanpropertypointer.remove();
        verify(dynaBean).set(propertyName, 1, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_hCTD0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        Field indexField = DynaBeanPropertyPointer.class.getDeclaredField("index");
        indexField.setAccessible(true);
        indexField.set(dynabeanpropertypointer, 1);
        when(dynabeanpropertypointer.isCollection()).thenReturn(true);
        String propertyName = "someProperty";
        when(dynabeanpropertypointer.getPropertyName()).thenReturn(propertyName);
        Object baseValue = new ArrayList<>();
        when(dynabeanpropertypointer.getBaseValue()).thenReturn(baseValue);
        Object removedCollection = new ArrayList<>();
        when(ValueUtils.remove(baseValue, 1)).thenReturn(removedCollection);
        dynabeanpropertypointer.remove();
        verify(dynaBean).set(propertyName, removedCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Index0_JsQA0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        Field indexField = DynaBeanPropertyPointer.class.getDeclaredField("index");
        indexField.setAccessible(true);
        indexField.set(dynabeanpropertypointer, 0);
        String propertyName = "someProperty";
        when(dynabeanpropertypointer.getPropertyName()).thenReturn(propertyName);
        dynabeanpropertypointer.remove();
        verify(dynaBean).set(propertyName, null);
    }
}