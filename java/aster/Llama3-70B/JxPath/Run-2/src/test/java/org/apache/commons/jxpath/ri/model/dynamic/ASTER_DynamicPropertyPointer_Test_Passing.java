/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPropertyPointer_Test_Passing {
    @Mock
    private DynamicPropertyHandler handler;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private Object bean;
    @Mock
    private Object property;
    private DynamicPropertyPointer dynamicpropertypointer;
    private String[] names;
    private String name;
    @Mock
    private JXPathContext context;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private Object value;
    @Mock
    private AbstractFactory factory;
    @Mock
    private Object collection;
    @Mock
    private ValueUtils valueUtils;
    @Mock
    private Object baseValue;
    DOMNodePointer domNodePointer;
    private DOMNodePointer parentPointer;
    @Mock
    private Locale locale;
    private String requiredPropertyName;
    @Mock
    private String propertyName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        boolean result = dynamicpropertypointer.isContainer();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames() throws Exception {
        parent = mock(DOMNodePointer.class);
        pageContextHandler = mock(PageContextHandler.class);
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        // given
        String[] allNames = {"name1", "name2", "name3"};
        when(handler.getPropertyNames(any())).thenReturn(allNames);
        // when
        String[] result = dynamicpropertypointer.getPropertyNames();
        // then
        assertArrayEquals(allNames, result);
        verify(handler, times(1)).getPropertyNames(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyIndex() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        int newIndex = 10;
        dynamicpropertypointer.setPropertyIndex(newIndex);
        assertEquals(newIndex, dynamicpropertypointer.getPropertyIndex()); // assuming getPropertyIndex() method exists
        assertNull(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActualProperty() throws Exception {
        pageContextHandler = mock(PageContextHandler.class);
        domNodePointer = mock(DOMNodePointer.class);
        dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        assertTrue(dynamicpropertypointer.isActualProperty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        // given
        String[] propertyNames = {"prop1", "prop2", "prop3"};
        when(dynamicpropertypointer.getPropertyNames()).thenReturn(propertyNames);
        // when
        int count = dynamicpropertypointer.getPropertyCount();
        // then
        assertEquals(3, count);
        verify(dynamicpropertypointer).getPropertyNames();
    }
}