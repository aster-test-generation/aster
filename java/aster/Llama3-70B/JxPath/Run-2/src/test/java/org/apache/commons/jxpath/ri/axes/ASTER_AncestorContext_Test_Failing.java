/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AncestorContext_Test_Failing {
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private AncestorContext ancestorContext;
    SelfContext selfContext;
    private boolean setStarted = false;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private NodePointer currentNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        namespaceContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        // given
        when(ancestorContext.getCurrentPosition()).thenReturn(5);
        when(ancestorContext.nextNode()).thenReturn(true);
        // when
        boolean result = ancestorContext.setPosition(10);
        // then
        verify(ancestorContext, times(5)).nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_reset() throws Exception {
        namespaceContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        // given
        when(ancestorContext.getCurrentPosition()).thenReturn(10);
        when(ancestorContext.nextNode()).thenReturn(false);
        // when
        boolean result = ancestorContext.setPosition(5);
        // then
        verify(ancestorContext).reset();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_iPEX0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        NodePointer nodePointer = ancestorContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IncludeSelf_ReturnsTrue() throws Exception {
        ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        assertTrue(ancestorContext.nextNode());
        verify(currentNodePointer).testNode(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IncludeSelf_ReturnsFalse() throws Exception {
        ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(false);
        assertFalse(ancestorContext.nextNode());
        verify(currentNodePointer).testNode(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NotIncludeSelf_ReturnsTrue() throws Exception {
        ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        assertTrue(ancestorContext.nextNode());
        verify(currentNodePointer).getImmediateParentPointer();
        verify(currentNodePointer).testNode(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NotIncludeSelf_ReturnsFalse() throws Exception {
        ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(null);
        assertFalse(ancestorContext.nextNode());
        verify(currentNodePointer).getImmediateParentPointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_IncludeSelfTrue_ReturnTrue_WejY0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedTrue_IncludeSelfTrue_ReturnTrue_BRGR1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        ancestorContext.nextNode();
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_IncludeSelfFalse_ReturnTrue_lvVa2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, false, nodeTypeTest);
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedTrue_IncludeSelfFalse_ReturnTrue_DnYW3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, false, nodeTypeTest);
        ancestorContext.nextNode();
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NoMatchingNodeType_ReturnFalse_tTRR5() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        assertFalse(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_iPEX0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        ancestorContext.nextNode(); // Call nextNode to set currentNodePointer
        NodePointer nodePointer = ancestorContext.getCurrentNodePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedTrue_IncludeSelfTrue_ReturnTrue_BRGR1_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        boolean result = ancestorContext.nextNode();
        assertTrue(result);
        result = ancestorContext.nextNode();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_cUAm0() throws Exception {
        parentContext = mock(NamespaceContext.class);
        nodeTest = mock(NodeTypeTest.class);
        currentNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        NodePointer result = ancestorContext.getCurrentNodePointer();
        assertNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_cUAm0_fid2() throws Exception {
        parentContext = mock(NamespaceContext.class);
        nodeTest = mock(NodeTypeTest.class);
        currentNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        NodePointer result = ancestorContext.getCurrentNodePointer();
        assertEquals(currentNodePointer, result);
    }
}