/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SimplePathInterpreter_Test_Passing {
    SimplePathInterpreter simplePathInterpreter;
    @Mock
    EvalContext evalContext;
    @Mock
    NodePointer parent;
    @Mock
    Step step;
    @Mock
    NodeNameTest nodeNameTest;
    @Mock
    QName qName;
    @Mock
    NodePointer root;
    @Mock
    Step[] steps;
    @Mock
    Expression[] predicates;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinterpretSimpleExpressionPath() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        // given
        when(evalContext.setPosition(anyInt())).thenReturn(true);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.nextNode()).thenReturn(true);
        // when
        NodePointer result = simplePathInterpreter.interpretSimpleExpressionPath(evalContext, root, predicates, steps);
        // then
        assertNotNull(result);
        verify(evalContext, times(1)).setPosition(anyInt());
        verify(evalContext, times(1)).hasNext();
        verify(evalContext, times(1)).nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinterpretSimpleLocationPath_PZSK0() throws Exception {
        SimplePathInterpreter simplePathInterpreter = new SimplePathInterpreter();
        EvalContext evalContext = mock(EvalContext.class);
        NodePointer root = mock(NodePointer.class);
        Step[] steps = new Step[0];
        Expression[] predicates = new Expression[0];
        NodePointer result = simplePathInterpreter.interpretSimpleExpressionPath(evalContext, root, predicates, steps);
        assertNotNull(result);
    }
}