/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Passing {
    NamespacePointer namespacepointer;
    NodePointer pointer1;
    NodePointer pointer2;
    DOMNodePointer parent;
    private String prefix = "testPrefix";
    NamespacePointer otherNamespacePointer;
    DOMNodePointer domNodePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private NamespacePointer namespacePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, "prefix");
        pointer1 = mock(NodePointer.class);
        pointer2 = mock(NodePointer.class);
        int result = namespacepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, prefix);
        otherNamespacePointer = new NamespacePointer(parent, prefix);
        // Test equality with itself
        // Test equality with another object with same prefix
        // Test inequality with another object with different prefix
        NamespacePointer differentPrefixNamespacePointer = new NamespacePointer(parent, "differentPrefix");
        // Test inequality with null
        // Test inequality with object of different class
        assertTrue(namespacepointer.equals(namespacepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, prefix);
        otherNamespacePointer = new NamespacePointer(parent, prefix);
        // Test equality with itself
        // Test equality with another object with same prefix
        // Test inequality with another object with different prefix
        NamespacePointer differentPrefixNamespacePointer = new NamespacePointer(parent, "differentPrefix");
        // Test inequality with null
        // Test inequality with object of different class
        assertTrue(namespacepointer.equals(otherNamespacePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_3() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, prefix);
        otherNamespacePointer = new NamespacePointer(parent, prefix);
        // Test equality with itself
        // Test equality with another object with same prefix
        // Test inequality with another object with different prefix
        NamespacePointer differentPrefixNamespacePointer = new NamespacePointer(parent, "differentPrefix");
        // Test inequality with null
        // Test inequality with object of different class
        assertFalse(namespacepointer.equals(differentPrefixNamespacePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_4() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, prefix);
        otherNamespacePointer = new NamespacePointer(parent, prefix);
        // Test equality with itself
        // Test equality with another object with same prefix
        // Test inequality with another object with different prefix
        NamespacePointer differentPrefixNamespacePointer = new NamespacePointer(parent, "differentPrefix");
        // Test inequality with null
        // Test inequality with object of different class
        assertFalse(namespacepointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_5() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, prefix);
        otherNamespacePointer = new NamespacePointer(parent, prefix);
        // Test equality with itself
        // Test equality with another object with same prefix
        // Test inequality with another object with different prefix
        NamespacePointer differentPrefixNamespacePointer = new NamespacePointer(parent, "differentPrefix");
        // Test inequality with null
        // Test inequality with object of different class
        assertFalse(namespacepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(domNodePointer, "prefix");
        Object value = new Object();
        try {
            namespacepointer.setValue(value);
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException e) {
            assertEquals("Cannot modify DOM trees", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NodeTestIsNull_ReturnsTrue() throws Exception {
        namespacepointer = new NamespacePointer(parent, "prefix");
        boolean result = namespacepointer.testNode(null);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, "prefix");
        assertFalse(namespacepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacePointer = new NamespacePointer(parent, prefix);
        QName expectedQName = new QName(prefix);
        QName actualQName = namespacePointer.getName();
        assertEquals(expectedQName, actualQName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        parent = mock(DOMNodePointer.class);
        when(parent.asPath()).thenReturn("/parent/path");
        NamespacePointer namespacepointer = new NamespacePointer(parent, prefix);
        String result = namespacepointer.asPath();
        assertEquals("/parent/path/namespace::testPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, "prefix");
        assertEquals(1, namespacepointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, "prefix");
        boolean result = namespacepointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, prefix);
        otherNamespacePointer = new NamespacePointer(parent, prefix);
        // Test equality with itself
        assertTrue(namespacepointer.equals(namespacepointer));
        // Test equality with another object with same prefix
        assertTrue(namespacepointer.equals(otherNamespacePointer));
        // Test inequality with another object with different prefix
        NamespacePointer differentPrefixNamespacePointer = new NamespacePointer(parent, "differentPrefix");
        assertFalse(namespacepointer.equals(differentPrefixNamespacePointer));
        // Test inequality with null
        assertFalse(namespacepointer.equals(null));
        // Test inequality with object of different class
        assertFalse(namespacepointer.equals(new Object()));
    }
}