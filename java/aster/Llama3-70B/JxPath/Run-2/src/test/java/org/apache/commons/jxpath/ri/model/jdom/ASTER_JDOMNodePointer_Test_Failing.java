/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Failing {
    private Object node;
    private JDOMNodePointer jdomnodepointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    @Mock
    private Text textNode;
    @Mock
    private Element elementNode;
    @Mock
    private Document document;
    @Mock
    private Element valueElement;
    @Mock
    private ProcessingInstruction processingInstruction;
    @Mock
    private Comment comment;
    @Mock
    private Locale locale;
    private NodeTest nodeTest;
    private JXPathContext context;
    private QName name;
    private DOMNodePointer parent;
    private NodeIterator iterator;
    private AbstractFactory factory;
    QName qname;
    private Element element;
    NodePointer startWith;
    private Attribute attribute;
    private NamespaceResolver namespaceResolver;
    private JDOMNodePointer other;
    private NodePointer pointer;
    private NodeTest test;
    private NodeIterator nodeIterator;
    private NodePointer nodePointer;
    private Text text;
    private List content;
    NodePointer jdomNamespacePointer;
    private String id;
    private Namespace namespace;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        node = Mockito.mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        pointer1 = Mockito.mock(NodePointer.class);
        pointer2 = Mockito.mock(NodePointer.class);
        // Test case 1: node1 == node2
        Mockito.when(pointer1.getBaseValue()).thenReturn(node);
        Mockito.when(pointer2.getBaseValue()).thenReturn(node);
        assertEquals(0, jdomnodepointer.compareChildNodePointers(pointer1, pointer2));
        // Test case 2: node1 is Attribute, node2 is not
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Element.class));
        assertEquals(-1, jdomnodepointer.compareChildNodePointers(pointer1, pointer2));
        // Test case 3: node1 is not Attribute, node2 is
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Element.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        assertEquals(1, jdomnodepointer.compareChildNodePointers(pointer1, pointer2));
        // Test case 4: both node1 and node2 are Attributes
        Mockito.when(pointer1.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        Mockito.when(pointer2.getBaseValue()).thenReturn(Mockito.mock(Attribute.class));
        List attributes = new ArrayList();
        attributes.add(pointer1.getBaseValue());
        attributes.add(pointer2.getBaseValue());
        Mockito.when(((Element) node).getAttributes()).thenReturn(attributes);
        assertEquals(-1, jdomnodepointer.compareChildNodePointers(pointer1, pointer2));
        // Test case 5: node is not Element
        node = Mockito.mock(Document.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        try {
            jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
            // expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // given
        Mockito.when(node.hashCode()).thenReturn(123);
        // when
        int hashCode = jdomnodepointer.hashCode();
        // then
        assertEquals(123, hashCode);
        Mockito.verify(node).hashCode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_UnknownNodeType() throws Exception {
        element = Mockito.mock(Element.class);
        processingInstruction = Mockito.mock(ProcessingInstruction.class);
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        Object unknownNode = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(unknownNode, Locale.US);
        assertNull(jdomnodepointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_ElementWithContent() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(node instanceof Element).thenReturn(true);
        when(((Element) node).getContent()).thenReturn(Collections.singletonList("some content"));
        assertFalse(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_ElementWithoutContent() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(node instanceof Element).thenReturn(true);
        when(((Element) node).getContent()).thenReturn(Collections.emptyList());
        assertTrue(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_DocumentWithContent() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(node instanceof Document).thenReturn(true);
        when(((Document) node).getContent()).thenReturn(Collections.singletonList("some content"));
        assertFalse(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_DocumentWithoutContent() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(node instanceof Document).thenReturn(true);
        when(((Document) node).getContent()).thenReturn(Collections.emptyList());
        assertTrue(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_OtherNodeType() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(node instanceof Element).thenReturn(false);
        when(node instanceof Document).thenReturn(false);
        assertTrue(jdomnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLanguage_1() throws Exception {
        node = Mockito.mock(Object.class);
        locale = Mockito.mock(Locale.class);
        parent = Mockito.mock(DOMNodePointer.class);
        jdomnodepointer = new JDOMNodePointer(parent, node);
        // Test case 1: current language is null
        when(jdomnodepointer.getLanguage()).thenReturn(null);
        // Test case 2: current language matches the input language
        when(jdomnodepointer.getLanguage()).thenReturn("en-US");
        // Test case 3: current language does not match the input language
        when(jdomnodepointer.getLanguage()).thenReturn("fr-FR");
        assertTrue(jdomnodepointer.isLanguage("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLanguage_3() throws Exception {
        node = Mockito.mock(Object.class);
        locale = Mockito.mock(Locale.class);
        parent = Mockito.mock(DOMNodePointer.class);
        jdomnodepointer = new JDOMNodePointer(parent, node);
        // Test case 1: current language is null
        when(jdomnodepointer.getLanguage()).thenReturn(null);
        // Test case 2: current language matches the input language
        when(jdomnodepointer.getLanguage()).thenReturn("en-US");
        // Test case 3: current language does not match the input language
        when(jdomnodepointer.getLanguage()).thenReturn("fr-FR");
        assertFalse(jdomnodepointer.isLanguage("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver() throws Exception {
        jdomnodepointer = new JDOMNodePointer(parent, node);
        // Given
        when(parent.getNamespaceResolver()).thenReturn(namespaceResolver);
        // When
        NamespaceResolver result = jdomnodepointer.getNamespaceResolver();
        // Then
        assertEquals(namespaceResolver, result);
        verify(parent, times(1)).getNamespaceResolver();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_TextNull_JjVs1_fid1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("old"), Locale.US);
        pointer.setValue(null);
        assertEquals(0, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode8_elAF7_fid1() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("test", "ns"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode12_NqBS11_fid1() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("*", "ns"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withElement_wkBe2_RpEo0_fid1() {
        Element element = new Element("element", "nsURI", "prefix");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
        NamespaceResolver resolver = pointer.getNamespaceResolver();
        assertEquals("element[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withElementAndNamespace_VUmI3_rHmE0_fid1() {
        Element element = new Element("element", "nsURI", "prefix");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
        assertEquals("prefix:element[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Element_EHqg0_fid1() throws Exception {
        Element element = Mockito.mock(Element.class);
        Mockito.when(element.getNamespaceURI()).thenReturn("namespaceURI");
        Mockito.when(element.getNamespacePrefix()).thenReturn("prefix");
        NamespaceResolver namespaceResolver = new JDOMNodePointer(element, Locale.US).getNamespaceResolver();
        assertEquals("prefix", namespaceResolver.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NotElementNorAttribute_XzsI4_XVaS1_fid1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale(""));
        NamespaceResolver resolver = pointer.getNamespaceResolver();
        String prefix = resolver.getPrefix("namespaceURI");
        assertNotNull(prefix);
    }
}