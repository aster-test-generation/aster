/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Failing {
    NamespacePointer namespacepointer;
    NodePointer pointer1;
    NodePointer pointer2;
    DOMNodePointer parent;
    private String prefix = "testPrefix";
    NamespacePointer otherNamespacePointer;
    DOMNodePointer domNodePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private NamespacePointer namespacePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NodeTestIsNodeTypeTest_ReturnsTrue() throws Exception {
        namespacepointer = new NamespacePointer(parent, "prefix");
        when(nodeTest instanceof NodeTypeTest).thenReturn(true);
        when(((NodeTypeTest) nodeTest).getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        boolean result = namespacepointer.testNode(nodeTest);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_NodeTestIsNotNodeTypeTest_ReturnsFalse() throws Exception {
        namespacepointer = new NamespacePointer(parent, "prefix");
        when(nodeTest instanceof NodeTypeTest).thenReturn(false);
        boolean result = namespacepointer.testNode(nodeTest);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, prefix);
        when(prefix.hashCode()).thenReturn(123);
        assertEquals(123, namespacepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, "prefix");
        // Given
        when(parent.getBaseValue()).thenReturn("mockedBaseValue");
        // When
        Object result = namespacepointer.getBaseValue();
        // Then
    assertNull(result);
        verify(parent, times(1)).getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_fid1() throws Exception {
        parent = mock(DOMNodePointer.class);
        when(parent.asPath()).thenReturn("/parent/path");
        NamespacePointer namespacepointer = new NamespacePointer(parent, prefix);
        String result = namespacepointer.asPath();
        assertEquals("/parent/path/namespace::myPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid1() throws Exception {
        parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, "prefix");
        // Given
        when(parent.getBaseValue()).thenReturn("mockedBaseValue");
        // When
        Object result = namespacepointer.getBaseValue();
        // Then
        assertEquals("mockedBaseValue", result);
        verify(parent, times(1)).getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_vFRI0() throws Exception {
        String prefix = "somePrefix";
        String namespaceURI = "someNamespaceURI";
        DOMNodePointer parent = mock(DOMNodePointer.class);
        NamespacePointer namespacepointer = new NamespacePointer(parent, prefix, namespaceURI);
        when(parent.getNamespaceURI(prefix)).thenReturn(namespaceURI);
        String result = namespacepointer.getNamespaceURI(prefix);
        org.junit.Assert.assertEquals(namespaceURI, result);
        verify(parent, times(1)).getNamespaceURI(prefix);
    }
}