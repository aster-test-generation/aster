/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodeIterator_Test_Passing {
    private int position = 0;
    JDOMNodeIterator jdomnodeiterator;
    DOMNodePointer parent;
    NodeTypeTest nodeTest;
    DOMNodePointer startWith;
    private Object child;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_7() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
        assertFalse(jdomnodeiterator.setPosition(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_8() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
        assertFalse(jdomnodeiterator.setPosition(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_jRxB0_1_fid2() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        Field positionField = JDOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        NodePointer nodePointer = jdomnodeiterator.getNodePointer();
    }
}