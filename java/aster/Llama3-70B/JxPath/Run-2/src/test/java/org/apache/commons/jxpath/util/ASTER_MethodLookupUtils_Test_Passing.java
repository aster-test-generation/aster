/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ExactMatch_WLEb0_1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"test"});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ExactMatch_WLEb0_2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"test"});
        assertEquals("java.lang.String", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod1_pPzD0() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "valueOf", new Object[]{"test"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod2_MVUJ1() {
        Method method = MethodLookupUtils.lookupStaticMethod(Integer.class, "parseInt", new Object[]{"10"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod4_rRXg3() {
        Method method = MethodLookupUtils.lookupStaticMethod(Boolean.class, "parseBoolean", new Object[]{"true"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod6_MERK5() {
        Method method = MethodLookupUtils.lookupStaticMethod(Long.class, "parseLong", new Object[]{"10"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod7_qEnW6() {
        Method method = MethodLookupUtils.lookupStaticMethod(Float.class, "parseFloat", new Object[]{"10.5"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod8_tLyG7() {
        Method method = MethodLookupUtils.lookupStaticMethod(Double.class, "parseDouble", new Object[]{"10.5"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod10_wRsi9() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "nonExistingMethod", new Object[]{});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod2_Jhrk1() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{null});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod3_gVGl2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod5_LCPh4() {
        Method method = MethodLookupUtils.lookupMethod(Integer.class, "intValue", new Object[]{1});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod6_BgQc5() {
        Method method = MethodLookupUtils.lookupMethod(Object.class, "toString", new Object[]{new Object()});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod7_EWWh6() {
        Method method = MethodLookupUtils.lookupMethod(List.class, "add", new Object[]{new ArrayList(), "element"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod8_hAcM7() {
        Method method = MethodLookupUtils.lookupMethod(Map.class, "put", new Object[]{new HashMap(), "key", "value"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod9_VPmT8() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{"hello", 1});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod11_SlMS10() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{null, 1});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod12_fSMR11() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{"hello", 1, 2});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod14_jSEW13() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{null, 1, 2});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod16_aIrt15() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{"hello", 1, 2, 3});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_ParameterTypesMismatch_rFAJ9_UINN0() {
        Class targetClass = String.class;
        Object[] parameters = new Object[]{"arg1", 123};
        Method method = MethodLookupUtils.lookupMethod(targetClass, "someMethod", parameters);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ApproximateMatch_sMdw1_2_fid1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Integer.class, new Object[]{"1"});
        assertEquals("java.lang.String", constructor.getParameterTypes()[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameter_Seug3_1_fid1() {
        try {
            MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous constructor [null]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoConstructors_iyGD6_fid1() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_taNI10_fid1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod1_cGry0_fid1() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{"hello"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod4_voqF3_fid1() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "toString", new Object[]{"hello", "world"});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod10_WXAE9_fid1() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{"hello", null});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod13_mnrm12_fid1() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{"hello", 1, null});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod15_wnoo14_fid1() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{"hello", null, 2});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_ExactMatch_WLEb0() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"test"});
        assertNotNull(constructor);
        assertEquals("java.lang.String", constructor.getParameterTypes()[0].getName());
    }
}