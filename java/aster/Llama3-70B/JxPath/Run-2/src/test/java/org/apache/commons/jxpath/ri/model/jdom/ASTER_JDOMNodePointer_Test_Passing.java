/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Passing {
    private Object node;
    private JDOMNodePointer jdomnodepointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    @Mock
    private Text textNode;
    @Mock
    private Element elementNode;
    @Mock
    private Document document;
    @Mock
    private Element valueElement;
    @Mock
    private ProcessingInstruction processingInstruction;
    @Mock
    private Comment comment;
    @Mock
    private Locale locale;
    private NodeTest nodeTest;
    private JXPathContext context;
    private QName name;
    private DOMNodePointer parent;
    private NodeIterator iterator;
    private AbstractFactory factory;
    QName qname;
    private Element element;
    NodePointer startWith;
    private Attribute attribute;
    private NamespaceResolver namespaceResolver;
    private JDOMNodePointer other;
    private NodePointer pointer;
    private NodeTest test;
    private NodeIterator nodeIterator;
    private NodePointer nodePointer;
    private Text text;
    private List content;
    NodePointer jdomNamespacePointer;
    private String id;
    private Namespace namespace;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Text_JcrR0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("old"), Locale.US);
        pointer.setValue("new");
        assertEquals("new", ((Text) pointer.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_TextNull_JjVs1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("old"), Locale.US);
        try {
            pointer.setValue(null);
        } catch (NullPointerException e) {
            // expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Element_PUUC2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        Element value = new Element("child");
        value.addContent(new Text("text"));
        pointer.setValue(value);
        assertEquals(1, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_CDATA_lvhI4() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        CDATA value = new CDATA("text");
        pointer.setValue(value);
        assertEquals(1, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ProcessingInstruction_UMiJ5() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        ProcessingInstruction value = new ProcessingInstruction("target", "data");
        pointer.setValue(value);
        assertEquals(1, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Comment_SIwl6() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        Comment value = new Comment("text");
        pointer.setValue(value);
        assertEquals(1, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_String_YLkb7() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        pointer.setValue("text");
        assertEquals(1, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_StringNull_rQgX8() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        pointer.setValue(null);
        assertEquals(0, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_StringEmpty_IhOU9() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        pointer.setValue("");
        assertEquals(0, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementWithContent_hjMp10() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        Element value = new Element("child");
        value.addContent(new Text("text1"));
        value.addContent(new Text("text2"));
        pointer.setValue(value);
        assertEquals(2, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        node = Mockito.mock(Object.class);
        locale = Mockito.mock(Locale.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        assertFalse(jdomnodepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_DLmE0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        QName qName = new QName("prefix", "localName");
        NodeIterator nodeIterator = jdomNodePointer.attributeIterator(qName);
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NotElement_MScI1() {
        Object node = new Object();
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, Locale.US);
        assertNull(jDOMNodePointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NotElementNorAttribute_XzsI4() {
        Object node = new Object();
        String prefix = JDOMNodePointer.getPrefix(node);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullNode_obAV5() {
        String prefix = JDOMNodePointer.getPrefix(null);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_1() throws Exception {
        node = Mockito.mock(Object.class);
        locale = Mockito.mock(Locale.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        NodeIterator iterator = jdomnodepointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_2() throws Exception {
        node = Mockito.mock(Object.class);
        locale = Mockito.mock(Locale.class);
        jdomnodepointer = new JDOMNodePointer(node, locale);
        NodeIterator iterator = jdomnodepointer.namespaceIterator();
        assertTrue(iterator instanceof JDOMNamespaceIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(node, Locale.US);
        assertTrue(jdomnodepointer.equals(jdomnodepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_ReturnsTrue() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(node, Locale.US);
        assertTrue(jdomnodepointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_ReturnsFalse() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(node, Locale.US);
        Object differentNode = Mockito.mock(Object.class);
        JDOMNodePointer differentJDOMNodePointer = new JDOMNodePointer(differentNode, Locale.US);
        assertFalse(jdomnodepointer.equals(differentJDOMNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(node, Locale.US);
        assertFalse(jdomnodepointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        other = new JDOMNodePointer(node, Locale.US);
        assertFalse(jdomnodepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode1_aqFf0() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Object();
        NodeTest test = null;
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode2_SXWy1() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("test"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode3_gfxN2() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("other"));
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode6_nEaa5() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new ProcessingInstruction("test", "data");
        NodeTest test = new ProcessingInstructionTest("test");
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode7_vWlT6() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new ProcessingInstruction("other", "data");
        NodeTest test = new ProcessingInstructionTest("test");
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode8_elAF7() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("test", "ns"));
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode9_kIUL8() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("test", "other"));
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode12_NqBS11() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("*", "ns"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode13_LDHe12() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("*", "other"));
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode14_CnFl13() {
        NodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("*"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalName_Null_SkJy2() {
        String localName = JDOMNodePointer.getLocalName(null);
        assertNull(localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_wUSK0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        NamespaceResolver resolver = pointer.getNamespaceResolver();
        assertNotNull(resolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverNotNull_JIaQ1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        pointer.getNamespaceResolver(); // initialize localNamespaceResolver
        NamespaceResolver resolver = pointer.getNamespaceResolver();
        assertSame(resolver, pointer.getNamespaceResolver());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withElement_wkBe2_RpEo0() {
        Element element = new Element("element", "nsURI", "prefix");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
        NamespaceResolver resolver = pointer.getNamespaceResolver();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withElementAndNamespace_VUmI3_rHmE0() {
        Element element = new Element("element", "nsURI", "prefix");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withTextNode_kXTI4_MQqD0() {
        Text text = new Text("text");
        JDOMNodePointer pointer = new JDOMNodePointer(text, Locale.US);
        NamespaceResolver resolver = pointer.getNamespaceResolver();
        assertEquals("/text()[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withPI_Mpcj5_CPFD0() {
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.US);
        assertEquals("/processing-instruction('target')[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_CXSm0() throws Exception {
        node = Mockito.mock(Element.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        NamespaceResolver namespaceResolver = jdomnodepointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_UNyG3_FboR0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.US);
        NamespaceResolver namespaceResolver = nodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_StringNull_rQgX8_WjHk0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        pointer.getNamespaceResolver();
        pointer.setValue(null);
        assertEquals(0, ((Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementWithContent_hjMp10_lpIC0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new org.jdom.Element("root"), Locale.US);
        org.jdom.Element value = new org.jdom.Element("child");
        value.addContent(new org.jdom.Text("text1"));
        value.addContent(new org.jdom.Text("text2"));
        pointer.setValue(value);
        assertEquals(2, ((org.jdom.Element) pointer.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection_fVIq0() throws Exception {
        Object node = Mockito.mock(Object.class);
        Locale locale = Mockito.mock(Locale.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, locale);
        assertFalse(jdomnodepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_VOQV0() throws Exception {
        Object node = Mockito.mock(Object.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        NamespaceResolver namespaceResolver = jdomnodepointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_UnknownNodeType_tUwK0() throws Exception {
        Element element = Mockito.mock(Element.class);
        ProcessingInstruction processingInstruction = Mockito.mock(ProcessingInstruction.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        Object unknownNode = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(unknownNode, Locale.US);
        NamespaceResolver namespaceResolver = jdomnodepointer.getNamespaceResolver();
        assertNotNull(namespaceResolver); // Changed assertNull to assertNotNull
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NotElement_MScI1_Iosp0() {
        Object node = new Object();
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, Locale.US);
        NamespaceResolver namespaceResolver = jDOMNodePointer.getNamespaceResolver();
        String namespaceURI = namespaceResolver.getNamespaceURI("prefix");
        assertNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Element_EHqg0() throws Exception {
        Element element = Mockito.mock(Element.class);
        Mockito.when(element.getNamespaceURI()).thenReturn("namespaceURI");
        Mockito.when(element.getNamespacePrefix()).thenReturn("prefix");
        NamespaceResolver namespaceResolver = new JDOMNodePointer(element, Locale.US).getNamespaceResolver();
        assertNull(namespaceResolver.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Element_NullPrefix_SFxa0() throws Exception {
        Element element = Mockito.mock(Element.class);
        Mockito.when(element.getNamespaceURI()).thenReturn("namespaceURI");
        Mockito.when(element.getNamespacePrefix()).thenReturn(null);
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.US);
        NamespaceResolver namespaceResolver = pointer.getNamespaceResolver();
        assertNull(namespaceResolver.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Element_EmptyPrefix_MuND0() throws Exception {
        Element element = Mockito.mock(Element.class);
        Mockito.when(element.getNamespaceURI()).thenReturn("namespaceURI");
        Mockito.when(element.getNamespacePrefix()).thenReturn("");
        NamespaceResolver namespaceResolver = new JDOMNodePointer(element, Locale.US).getNamespaceResolver();
        assertNull(namespaceResolver.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_TtcR0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale(""));
        NamespaceResolver resolver = pointer.getNamespaceResolver();
        assertNotNull(resolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NotElementNorAttribute_XzsI4_XVaS1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale(""));
        NamespaceResolver resolver = pointer.getNamespaceResolver();
        String prefix = resolver.getPrefix("namespaceURI");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_ReturnsFalse_INre0() throws Exception {
        Object node = Mockito.mock(Object.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        JDOMNodePointer other = new JDOMNodePointer(node, Locale.US);
        Object differentNode = Mockito.mock(Object.class);
        JDOMNodePointer differentJDOMNodePointer = new JDOMNodePointer(differentNode, Locale.US);
        assertFalse(jdomnodepointer.equals(differentJDOMNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode2_SXWy1_ZkMC0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("test"));
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode3_gfxN2_uyUe0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("other"));
        NamespaceResolver resolver = pointer.getNamespaceResolver();
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode6_nEaa5_BmQP0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new ProcessingInstruction("test", "data");
        NodeTest test = new ProcessingInstructionTest("test");
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode7_vWlT6_rnuz0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new ProcessingInstruction("other", "data");
        NodeTest test = new ProcessingInstructionTest("test");
        NamespaceResolver resolver = pointer.getNamespaceResolver();
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode13_LDHe12_SjgB0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("*", "other"));
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_oVqy0() throws Exception {
        node = Mockito.mock(Object.class);
        locale = Mockito.mock(Locale.class);
        parent = Mockito.mock(DOMNodePointer.class);
        jdomnodepointer = new JDOMNodePointer(parent, node);
        NamespaceResolver namespaceResolver = jdomnodepointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }
}