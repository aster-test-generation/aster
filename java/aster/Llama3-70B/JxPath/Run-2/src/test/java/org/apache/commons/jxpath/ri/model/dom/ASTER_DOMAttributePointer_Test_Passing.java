/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Passing {
    DOMAttributePointer domAttributePointer;
    DOMNodePointer parent;
    Attr attr;
    NodePointer pointer1;
    NodePointer pointer2;
    private DOMAttributePointer domattributepointer;
    NodeTest nodeTest;
    NodeTypeTest nodeTypeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        pointer1 = mock(NodePointer.class);
        pointer2 = mock(NodePointer.class);
        int result = domAttributePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsNull_WhenAttrValueIsNullAndNotSpecified() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getValue()).thenReturn(null);
        when(attr.getSpecified()).thenReturn(false);
        Object result = domAttributePointer.getValue();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsNull_WhenAttrValueIsEmptyAndNotSpecified() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(false);
        Object result = domAttributePointer.getValue();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsAttrValue_WhenAttrValueIsNotNullAndSpecified() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getValue()).thenReturn("some value");
        when(attr.getSpecified()).thenReturn(true);
        Object result = domAttributePointer.getValue();
        assertEquals("some value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        attr = Mockito.mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        int length = domattributepointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        attr = Mockito.mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        boolean result = domattributepointer.isActual();
        assertTrue(result);
    }
}