/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespacePointer_Test_Failing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private NodePointer pointer1;
    @Mock
    private NodePointer pointer2;
    private JDOMNamespacePointer jdomnamespacepointer;
    private String prefix = "testPrefix";
    private JDOMNamespacePointer sameObject;
    private JDOMNamespacePointer differentObject;
    DOMNodePointer domNodePointer;
    private DOMNodePointer mockParent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(domNodePointer, "prefix");
        when(domNodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        Object result = jdomnamespacepointer.getImmediateNode();
        assertEquals("namespaceURI", result);
        verify(domNodePointer, times(1)).getNamespaceURI();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Given
        Object expectedBaseValue = new Object();
        when(parent.getBaseValue()).thenReturn(expectedBaseValue);
        // When
        Object actualBaseValue = jdomnamespacepointer.getBaseValue();
        // Then
        assertEquals(expectedBaseValue, actualBaseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_fid1() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(domNodePointer, "prefix");
        when(domNodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        Object result = jdomnamespacepointer.getImmediateNode();
        assertNull(result);
        verify(domNodePointer, times(1)).getNamespaceURI();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid1() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Given
        Object expectedBaseValue = new Object();
        when(parent.getBaseValue()).thenReturn(expectedBaseValue);
        // When
        Object actualBaseValue = jdomnamespacepointer.getBaseValue();
        // Then
    assertNull(expectedBaseValue);
    }
}