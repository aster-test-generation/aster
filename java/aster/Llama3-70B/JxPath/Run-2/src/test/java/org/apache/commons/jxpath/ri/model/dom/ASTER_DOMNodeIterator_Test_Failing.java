/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodeIterator_Test_Failing {
    private int position = 0;
    DOMNodeIterator domNodeIterator;
    Node node;
    DOMNodePointer nodePointer;
    NodeTypeTest nodeTypeTest;
    private Node child = null;
    private NodePointer parent;
    DOMNodePointer startWith;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_QuFg0_1() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, null);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        Field positionField = DOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        positionField.setInt(domNodeIterator, 0);
        domNodeIterator.setPosition(5);
        domNodeIterator.setPosition(10);
        domNodeIterator.setPosition(0);
        NodePointer nodePointerResult = domNodeIterator.getNodePointer();
        assertEquals(nodePointer, nodePointerResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_QuFg0_2() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, null);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        Field positionField = DOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = 0;
        domNodeIterator.setPosition(5);
        positionField.setInt(domNodeIterator, 5);
        domNodeIterator.setPosition(10);
        positionField.setInt(domNodeIterator, 10);
        domNodeIterator.setPosition(0);
        positionField.setInt(domNodeIterator, 0);
        domNodeIterator.setPosition(10);
        NodePointer nodePointerResult = domNodeIterator.getNodePointer();
        assertEquals(0, positionField.getInt(domNodeIterator));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_QuFg0_3() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, null);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        Field positionField = DOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = 0;
        domNodeIterator.setPosition(5);
        positionField.setInt(domNodeIterator, 5);
        domNodeIterator.setPosition(10);
        positionField.setInt(domNodeIterator, 10);
        domNodeIterator.setPosition(0);
        positionField.setInt(domNodeIterator, 0);
        NodePointer nodePointerResult = domNodeIterator.getNodePointer();
        assertEquals(nodePointer, nodePointerResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_QuFg0_4() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, null);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        Field positionField = DOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = 0;
        domNodeIterator.setPosition(5);
        positionField.setInt(domNodeIterator, 5);
        assertEquals(5, positionField.getInt(domNodeIterator));
        domNodeIterator.setPosition(10);
        positionField.setInt(domNodeIterator, 10);
        assertEquals(10, positionField.getInt(domNodeIterator));
        domNodeIterator.setPosition(0);
        positionField.setInt(domNodeIterator, 0);
        assertEquals(0, positionField.getInt(domNodeIterator));
        NodePointer nodePointerResult = domNodeIterator.getNodePointer();
        assertNotNull(nodePointerResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_QuFg0_5() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, null);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        Field positionField = DOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = 0;
        domNodeIterator.setPosition(5);
        positionField.setInt(domNodeIterator, 5);
        domNodeIterator.setPosition(10);
        positionField.setInt(domNodeIterator, 10);
        domNodeIterator.setPosition(0);
        positionField.setInt(domNodeIterator, 0);
        NodePointer nodePointerResult = domNodeIterator.getNodePointer();
        assertEquals(0, positionField.getInt(domNodeIterator));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_XiHB0_1() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        startWith = mock(DOMNodePointer.class);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, startWith);
        when(nodePointer.getNode()).thenReturn(node);
        when(domNodeIterator.getNodePointer()).thenReturn(nodePointer);
        NodePointer result = domNodeIterator.getNodePointer();
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_QuFg0_1_fid3() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, null);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        Field positionField = DOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = 0;
        domNodeIterator.setPosition(5);
        positionField.setInt(domNodeIterator, 5);
        domNodeIterator.setPosition(10);
        positionField.setInt(domNodeIterator, 10);
        domNodeIterator.setPosition(0);
        positionField.setInt(domNodeIterator, 0);
        NodePointer nodePointerResult = domNodeIterator.getNodePointer();
        assertEquals(5, positionField.getInt(domNodeIterator));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_QuFg0_2_fid3() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, null);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        Field positionField = DOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = 0;
        domNodeIterator.setPosition(5);
        positionField.setInt(domNodeIterator, 5);
        domNodeIterator.setPosition(10);
        positionField.setInt(domNodeIterator, 10);
        domNodeIterator.setPosition(0);
        positionField.setInt(domNodeIterator, 0);
        NodePointer nodePointerResult = domNodeIterator.getNodePointer();
        assertEquals(10, positionField.getInt(domNodeIterator));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_QuFg0_4_fid3() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, null);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        Field positionField = DOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = 0;
        domNodeIterator.setPosition(5);
        positionField.setInt(domNodeIterator, 5);
        domNodeIterator.setPosition(10);
        positionField.setInt(domNodeIterator, 10);
        domNodeIterator.setPosition(0);
        positionField.setInt(domNodeIterator, 0);
        NodePointer nodePointerResult = domNodeIterator.getNodePointer();
        assertNotNull(nodePointerResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_QuFg0_5_fid3() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, null);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        Field positionField = DOMNodeIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = 0;
        domNodeIterator.setPosition(5);
        positionField.setInt(domNodeIterator, 5);
        domNodeIterator.setPosition(10);
        positionField.setInt(domNodeIterator, 10);
        domNodeIterator.setPosition(0);
        positionField.setInt(domNodeIterator, 0);
        NodePointer nodePointerResult = domNodeIterator.getNodePointer();
        assertEquals(1, positionField.getInt(domNodeIterator));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_XiHB0_1_fid3() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        startWith = mock(DOMNodePointer.class);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, startWith);
        when(nodePointer.getNode()).thenReturn(node);
        NodePointer result = domNodeIterator.getNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_XiHB0_2_fid3() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = new NodeTypeTest(1);
        startWith = mock(DOMNodePointer.class);
        domNodeIterator = new DOMNodeIterator(nodePointer, nodeTypeTest, false, startWith);
        when(nodePointer.getNode()).thenReturn(node);
        NodePointer result = domNodeIterator.getNodePointer();
        assertEquals(new DOMNodePointer(nodePointer, node), result);
    }
}