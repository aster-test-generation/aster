/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Failing {
    private int[] jj_la1 = new int[39];
    private Compiler compiler;
    private int jj_gen;
    XPathParser xpathparser;
    SimpleCharStream simpleCharStream;
    XPathParserTokenManager xpathParserTokenManager;
    XPathParserTokenManager tokenManager;
    private int jj_endpos;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    private int jj_kind = -1;
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    static private int[] jj_la1_0;
    Token token;
    SimpleCharStream stream;
    XPathParserTokenManager tm;
    Compiler compilerMock;
    SimpleCharStream simpleCharStreamMock;
    private ArrayList stepsMock;
    SimpleCharStream charStream;
    Object expressionResult;
    ArrayList steps;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionName() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(tokenManager);
        // given
        Object expectedQName = "mockedQName";
        when(xpathparser.QName_Without_CoreFunctions()).thenReturn(expectedQName);
        // when
        Object actualQName = xpathparser.FunctionName();
        // then
        assertEquals(expectedQName, actualQName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        ParseException parseException = xpathparser.generateParseException();
        assertNotNull(parseException);
        String message = parseException.getMessage();
        assertNotNull(message);
        assertTrue(message.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_ulum1() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1), 1));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_aBLk8() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
        parser.token = new Token();
        ParseException exception = parser.generateParseException();
        assert exception != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_mKMQ7() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 4096), 1));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_WYDT9() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 1));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_zVCD9() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
        parser.token = new Token();
        ParseException e = parser.generateParseException();
        assert e.getMessage() != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testenable_tracing() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        xpathparser.enable_tracing();
        // Verify that enable_tracing method was called
        verifyNoMoreInteractions(simpleCharStream, xpathParserTokenManager);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPathExpr_LocationPath() throws Exception {
        simpleCharStream = Mockito.mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(tokenManager);
        // mock FilterExpr to return null
        Mockito.when(xpathparser.FilterExpr()).thenReturn(null);
        // call PathExpr method
        Object result = xpathparser.PathExpr();
        // assert result is not null
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPathExpr_FilterExpr() throws Exception {
        simpleCharStream = Mockito.mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(tokenManager);
        // mock LocationPath to return null
        Mockito.when(xpathparser.LocationPath()).thenReturn(null);
        // mock FilterExpr to return a non-null value
        Mockito.when(xpathparser.FilterExpr()).thenReturn("mockFilterExpr");
        // call PathExpr method
        Object result = xpathparser.PathExpr();
        // assert result is not null and equals to "mockFilterExpr"
        assertNotNull(result);
        assertEquals("mockFilterExpr", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_nc2IsNull() throws Exception {
        compiler = Mockito.mock(Compiler.class);
        stream = Mockito.mock(SimpleCharStream.class);
        tm = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tm);
        // given
        Mockito.when(xpathparser.NCName()).thenReturn("nc1");
        Mockito.when(compiler.qname(null, "nc1")).thenReturn("qname_result");
        // when
        Object result = xpathparser.QName();
        // then
        assertEquals("qname_result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_nc2IsNotNull() throws Exception {
        compiler = Mockito.mock(Compiler.class);
        stream = Mockito.mock(SimpleCharStream.class);
        tm = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tm);
        // given
        Mockito.when(xpathparser.NCName()).thenReturn("nc1", "nc2");
        Mockito.when(xpathparser.jj_nt.kind).thenReturn(80);
        Mockito.when(compiler.qname("nc1", "nc2")).thenReturn("qname_result");
        // when
        Object result = xpathparser.QName();
        // then
        assertEquals("qname_result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgument() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        expressionResult = mock(Object.class);
        // given
        when(xpathparser.Expression()).thenReturn(expressionResult);
        // when
        Object result = xpathparser.Argument();
        // then
        assertEquals(expressionResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_NCName_lean0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        try {
            String result = parser.NCName();
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdisable_tracing() throws Exception {
        charStream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(charStream);
        xpathparser = new XPathParser(tokenManager);
        xpathparser.disable_tracing();
        // Since disable_tracing is an empty method, we can't assert anything specific
        // But we can verify that it doesn't throw any exceptions
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpression() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(tokenManager);
        // given
        when(xpathparser.OrExpr()).thenReturn("mocked expression");
        // when
        Object result = xpathparser.Expression();
        // then
        assertEquals("mocked expression", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisName_AIQR0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 4096));
        XPathParser parser = new XPathParser(tm);
        try {
            int result = parser.AxisName();
            assertEquals(Compiler.AXIS_SELF, result);
        } catch (ParseException e) {
            fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException_1() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        ParseException parseException = xpathparser.generateParseException();
        String message = parseException.getMessage();
        assertNotNull(parseException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException_2() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        ParseException parseException = xpathparser.generateParseException();
        String message = parseException.getMessage();
        assertNotNull(message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException_3() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        ParseException parseException = xpathparser.generateParseException();
        String message = parseException.getMessage();
        assertTrue(message.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPathExpr_FilterExpr_1() throws Exception {
        simpleCharStream = Mockito.mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(tokenManager);
        // mock LocationPath to return null
        Mockito.when(xpathparser.LocationPath()).thenReturn(null);
        // mock FilterExpr to return a non-null value
        Mockito.when(xpathparser.FilterExpr()).thenReturn("mockFilterExpr");
        // call PathExpr method
        Object result = xpathparser.PathExpr();
        // assert result is not null and equals to "mockFilterExpr"
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPathExpr_FilterExpr_2() throws Exception {
        simpleCharStream = Mockito.mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(tokenManager);
        // mock LocationPath to return null
        Mockito.when(xpathparser.LocationPath()).thenReturn(null);
        // mock FilterExpr to return a non-null value
        Mockito.when(xpathparser.FilterExpr()).thenReturn("mockFilterExpr");
        // call PathExpr method
        Object result = xpathparser.PathExpr();
        // assert result is not null and equals to "mockFilterExpr"
        assertEquals("mockFilterExpr", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Without_CoreFunctions_NctS0() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        compiler = mock(Compiler.class);
        Object result = xpathparser.QName_Without_CoreFunctions();
        assertNotNull(result);
        verify(compiler).qname(anyString(), anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Without_CoreFunctions_vRpM0() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        compiler = mock(Compiler.class);
        Object result = xpathparser.QName_Without_CoreFunctions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Without_CoreFunctions_cDxD0() throws Exception {
        stream = mock(SimpleCharStream.class);
        tm = new XPathParserTokenManager(stream);
        xpathparser = new XPathParser(tm);
        compiler = mock(Compiler.class);
        when(xpathparser.NCName()).thenReturn("nc1", "nc2");
        when(compiler.qname(anyString(), anyString())).thenReturn("result");
        Object result = xpathparser.QName_Without_CoreFunctions();
        assertEquals("result", result);
        verify(xpathparser, times(2)).NCName();
        verify(compiler).qname(anyString(), anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionCall_noArgs_hWiB0() throws Exception {
        compiler = mock(Compiler.class);
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        Object functionName = "myFunction";
        when(xpathparser.NCName()).thenReturn("namespace").thenReturn("localName");
        Object result = xpathparser.QName_Without_CoreFunctions();
        verify(compiler).qname("namespace", "localName");
        assertEquals(result, "namespace:localName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionCall_withArgs_hXcT0() throws Exception {
        compiler = mock(Compiler.class);
        simpleCharStream = mock(SimpleCharStream.class);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        Object functionName = "myFunction";
        ArrayList args = new ArrayList();
        args.add("arg1");
        args.add("arg2");
        when(xpathparser.FunctionName()).thenReturn(functionName);
        when(xpathparser.ArgumentList()).thenReturn(args);
        Object result = xpathparser.FunctionCall();
        verify(compiler).function(functionName, args.toArray());
        assertEquals(result, compiler.function(functionName, args.toArray()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_Xjyv0_pCED0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1), 1);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_FcZy1_upIN0() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1), 1);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_aBLk8_fid2() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        parser.token = new Token();
        ParseException exception = parser.generateParseException();
        assertTrue(exception.getMessage().startsWith("Error at line 1, column 1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Without_CoreFunctions_vRpM0_fid2() throws Exception {
        simpleCharStream = mock(SimpleCharStream.class);
        when(simpleCharStream.getEndLine()).thenReturn(1);
        when(simpleCharStream.getEndColumn()).thenReturn(1);
        when(simpleCharStream.getBeginLine()).thenReturn(1);
        when(simpleCharStream.getBeginColumn()).thenReturn(1);
        xpathParserTokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(xpathParserTokenManager);
        compiler = mock(Compiler.class);
        try {
            xpathparser.QName_Without_CoreFunctions();
            fail("Expected TokenMgrError");
        } catch (TokenMgrError e) {
            assertNotNull(e);
        }
    }
}