/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SelfContext_Test_Passing {
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private SelfContext selfContext;
    private boolean startedSet = false;
    NamespaceContext namespaceContext;
    Pointer pointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_2_zDCj1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
        assertFalse(selfContext.setPosition(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_4_Fyod3() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(2));
        assertFalse(selfContext.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_Position0_SetPositionReturnsFalse_eNHj0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
        selfContext.setPosition(0);
        Assertions.assertNull(selfContext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_aGtW0() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NodePointer nodePointer = mock(NodePointer.class);
        NamespaceContext parentContext = mock(NamespaceContext.class);
        SelfContext selfContext = new SelfContext(parentContext, nodeTypeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(any(NodeTest.class))).thenReturn(true);
        boolean result = selfContext.setPosition(1);
        assertTrue(result);
        verify(parentContext, times(1)).getCurrentNodePointer();
        verify(nodePointer, times(1)).testNode(any(NodeTest.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_withInvalidPosition_RZcd0() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(parentContext, nodeTypeTest);
        boolean result = selfContext.nextNode();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_5_ilWF4_WJWG0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
        assertFalse(selfContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_rMTR0_pLNX1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        selfContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSingleNodePointer_Ysid0() throws Exception {
        nodeTypeTest = new NodeTypeTest(1);
        namespaceContext = mock(NamespaceContext.class);
        selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        pointer = mock(Pointer.class);
        when(namespaceContext.getSingleNodePointer()).thenReturn(pointer);
        Pointer result = selfContext.getSingleNodePointer();
        assertEquals(pointer, result);
        verify(namespaceContext).getSingleNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_1_JJGv0_fid1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPosition_3_DqBT2_fid1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, null);
        assertFalse(selfContext.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_fid1() throws Exception {
        parentContext = Mockito.mock(NamespaceContext.class);
        nodeTest = Mockito.mock(NodeTypeTest.class);
        selfContext = new SelfContext(parentContext, nodeTest);
        // Set startedSet to true before calling reset
        startedSet = true;
        selfContext.reset();
        // Assert that startedSet is false after calling reset
        assertTrue(startedSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_GbTn0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_withNullNodeTest_SwiM0_fid1() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = Mockito.mock(NamespaceContext.class);
        SelfContext selfContext = new SelfContext(parentContext, nodeTypeTest);
        NodePointer nodePointer = null;
        Mockito.when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        boolean result = selfContext.nextNode();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_rMTR0_mxAA0_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        selfContext.reset();
        assertFalse(selfContext.nextNode());
    }
}