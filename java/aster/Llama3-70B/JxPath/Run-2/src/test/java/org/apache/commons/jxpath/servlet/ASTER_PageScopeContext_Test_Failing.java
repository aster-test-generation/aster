/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Enumeration;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.servlet.jsp.PageContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockPageContext;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PageScopeContext_Test_Failing {
    @Mock
    private PageContext pageContext;
    PageScopeContext pageScopeContext;
    PageScopeContext pagescopecontext;
    PageContext pagecontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttribute_OuTS0_JXQq0() {
        javax.servlet.jsp.PageContext pageContext = mock(javax.servlet.jsp.PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        pageScopeContext.setAttribute("attribute", "value");
        Object attribute = pageScopeContext.getAttribute("attribute");
        assertEquals("value", attribute);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNames_AmKU0_dBdW0_2() {
        javax.servlet.jsp.PageContext pageContext = mock(javax.servlet.jsp.PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        pageScopeContext.setAttribute("attribute1", "value1");
        pageScopeContext.setAttribute("attribute2", "value2");
        Enumeration enumeration = pageScopeContext.getAttributeNames();
        Vector<String> attributes = new Vector<String>();
        while (enumeration.hasMoreElements()) {
            attributes.add((String) enumeration.nextElement());
        }
        assertEquals(2, attributes.size());
        assertTrue(attributes.contains("attribute1"));
        assertTrue(attributes.contains("attribute2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttribute_OuTS0_JXQq0_fid2() {
        MockPageContext pageContext = new MockPageContext();
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        pageScopeContext.setAttribute("attribute", "value");
        Object attribute = pageContext.getAttribute("attribute", PageContext.PAGE_SCOPE);
        assertNotNull(attribute);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNames_AmKU0_dBdW0_1() {
        MockPageContext pageContext = new MockPageContext();
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        pageScopeContext.setAttribute("attribute1", "value1");
        pageScopeContext.setAttribute("attribute2", "value2");
        Enumeration enumeration = pageScopeContext.getAttributeNames();
        Vector<String> attributes = new Vector<String>();
        while (enumeration.hasMoreElements()) {
            attributes.add((String) enumeration.nextElement());
        }
        assertNotNull(enumeration);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNames_AmKU0_dBdW0_2_fid2() {
        MockPageContext pageContext = new MockPageContext();
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        pageScopeContext.setAttribute("attribute1", "value1");
        pageScopeContext.setAttribute("attribute2", "value2");
        Enumeration enumeration = pageScopeContext.getAttributeNames();
        Vector<String> attributes = new Vector<String>();
        while (enumeration.hasMoreElements()) {
            attributes.add((String) enumeration.nextElement());
        }
        assertTrue(attributes.contains("attribute1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNames_AmKU0_dBdW0_3() {
        MockPageContext pageContext = new MockPageContext();
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        pageScopeContext.setAttribute("attribute1", "value1");
        pageScopeContext.setAttribute("attribute2", "value2");
        Enumeration enumeration = pageScopeContext.getAttributeNames();
        Vector<String> attributes = new Vector<String>();
        while (enumeration.hasMoreElements()) {
            attributes.add((String) enumeration.nextElement());
        }
        assertTrue(attributes.contains("attribute2"));
    }
}