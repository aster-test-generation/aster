/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPropertyPointer_Test_Failing {
    private String propertyName = "*";
    NullPropertyPointer nullpropertypointer;
    DOMNodePointer parent;
    PropertyOwnerPointer propertyOwnerPointer;
    PropertyPointer propertyPointer;
    QName qName;
    @Mock
    private JXPathContext context;
    @Mock
    private NodePointer newParent;
    @Mock
    private PropertyOwnerPointer pop;
    @Mock
    private AbstractFactory factory;
    @Mock
    private QName name;
    @Mock
    private NodePointer nodePointer;
    DOMNodePointer domNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValuePointer_3() throws Exception {
        parent = mock(DOMNodePointer.class);
        qName = new QName("test");
        nullpropertypointer = new NullPropertyPointer(parent);
        NodePointer result = nullpropertypointer.getValuePointer();
        assertSame(nullpropertypointer, result.getParent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        nullpropertypointer = new NullPropertyPointer(parent);
        // given
        when(parent.createPath(context)).thenReturn(newParent);
        when(newParent.createAttribute(context, any(QName.class))).thenReturn(newParent);
        when(newParent.createChild(context, any(QName.class), anyInt(), any())).thenReturn(newParent);
        when(context.getFactory()).thenReturn(factory);
        // when
        NodePointer result = nullpropertypointer.createPath(context, "someValue");
        // then
        verify(parent).createPath(context);
        verify(newParent).createAttribute(context, any(QName.class));
        assertEquals(newParent, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild() throws Exception {
        nullpropertypointer = new NullPropertyPointer(parent);
        when(context.createPath(anyString())).thenReturn(nodePointer);
        when(nodePointer.createChild(context, name, 0)).thenReturn(nodePointer);
        NodePointer result = nullpropertypointer.createChild(context, name, 0);
        verify(context, times(1)).createPath(anyString());
        verify(nodePointer, times(1)).createChild(context, name, 0);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValuePointer_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        qName = new QName("test");
        nullpropertypointer = new NullPropertyPointer(parent);
        NodePointer result = nullpropertypointer.getValuePointer();
        assertEquals(qName, result.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection_2_fid2() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        nullpropertypointer = new NullPropertyPointer(parent);
        // when getIndex returns WHOLE_COLLECTION
        when(parent.getIndex()).thenReturn(NullPropertyPointer.WHOLE_COLLECTION);
        // when getIndex returns something other than WHOLE_COLLECTION
        when(parent.getIndex()).thenReturn(1);
        assertTrue(nullpropertypointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild_H_1_glxc0() throws Exception {
        nullpropertypointer = new NullPropertyPointer(parent);
        when(parent.createPath(any(JXPathContext.class))).thenReturn(nodePointer);
        int index = 1;
        Object value = new Object();
        NodePointer result = nullpropertypointer.createChild(context, name, index, value);
        verify(parent).createPath(context);
        verify(nodePointer).createChild(context, name, index, value);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValuePointer() throws Exception {
        parent = mock(DOMNodePointer.class);
        qName = new QName("test");
        nullpropertypointer = new NullPropertyPointer(parent);
        NodePointer result = nullpropertypointer.getValuePointer();
        assertNotNull(result);
        assertEquals(qName, result.getName());
        assertSame(nullpropertypointer, result.getParent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        nullpropertypointer = new NullPropertyPointer(parent);
        // when getIndex returns WHOLE_COLLECTION
        when(parent.getIndex()).thenReturn(NullPropertyPointer.WHOLE_COLLECTION);
        assertFalse(nullpropertypointer.isCollection());
        // when getIndex returns something other than WHOLE_COLLECTION
        when(parent.getIndex()).thenReturn(1);
        assertTrue(nullpropertypointer.isCollection());
    }
}