/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Failing {
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private ParentContext parentContext;
    SelfContext selfContext;
    private boolean setStarted = false;
    @Mock
    private NodePointer currentNodePointer;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeTest nodeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_cKyz0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ParentContext parentContext = new ParentContext(namespaceContext, nodeTypeTest);
        NodePointer nodePointer = parentContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NoParentNode_ReturnsFalse_AQqA1() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTest);
        ParentContext parentContext = new ParentContext(namespaceContext, nodeTest);
        assertFalse(parentContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_KLIB0() throws Exception {
        NodePointer currentNodePointer = Mockito.mock(NodePointer.class);
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        Mockito.when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer result = parentContext.getCurrentNodePointer();
        assertEquals(currentNodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode_yzLI0() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        parentContext = new ParentContext(namespaceContext, nodeTypeTest);
        when(namespaceContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getImmediateParentPointer()).thenReturn(nodePointer);
        when(nodePointer.isContainer()).thenReturn(true);
        when(nodePointer.testNode(nodeTypeTest)).thenReturn(true);
        boolean result = parentContext.nextNode();
        assertTrue(result);
        verify(namespaceContext, times(1)).getCurrentNodePointer();
        verify(nodePointer, times(2)).getImmediateParentPointer();
        verify(nodePointer, times(1)).isContainer();
        verify(nodePointer, times(1)).testNode(nodeTypeTest);
    }
}