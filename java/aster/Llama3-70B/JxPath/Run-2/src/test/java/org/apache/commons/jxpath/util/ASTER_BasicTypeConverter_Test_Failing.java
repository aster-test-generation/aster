/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertUnknownType_VTxi21() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert("a", Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNullToPrimitive_EStr22() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(null, int.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArrayToObject_rgdC24() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new String[]{"a", "b"}, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertCollectionToObject_aMWE25() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(Arrays.asList("a", "b"), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_Interface_YQwq2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToNumber_xxdu9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(Boolean.TRUE, Number.class);
        assertEquals(1, ((Number) result).doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToNumber_LZNQ15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert("1", Number.class);
        assertEquals(1, ((Number) result).doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToPrimitive_fvxs18() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] array = new String[]{"value"};
        Object result = converter.convert(array, int.class);
        assertEquals(0, ((Number) result).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Null_lOgr11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(null, 10.0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertPointerToObject_kAoD20_swWv0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object pointer = "a";
        assertTrue(converter.convertStringToPrimitive(pointer, String.class) != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNodeSetToObject_FPiT2_GQrt0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "value";
        Object result = converter.convertStringToPrimitive(object, String.class);
        assertEquals(object, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertPointerToObject_DUNX3_MWPB0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object pointer = "value";
        Object result = converter.convertStringToPrimitive(pointer, String.class);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Null_lOgr11_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(null, Double.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNodeSetToObject_FPiT2_GQrt0_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "value";
        Object result = converter.convertStringToPrimitive(object, String.class);
        assertNull(object);
    }
}