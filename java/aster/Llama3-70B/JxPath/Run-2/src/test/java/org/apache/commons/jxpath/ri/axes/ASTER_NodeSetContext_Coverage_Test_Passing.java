/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.BasicNodeSet;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NodeSetContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_PositionZero_vfzc0_BLyI0_1() {
    NamespaceContext parentContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
    BasicNodeSet nodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(parentContext, nodeSet);
    assertTrue(nodeSetContext.nextSet());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_PositionZero_vfzc0_BLyI0_2() {
    NamespaceContext parentContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
    BasicNodeSet nodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(parentContext, nodeSet);
    assertNull(nodeSetContext.getCurrentNodePointer());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_Icte0_XfMj0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
    int[] pointers = new int[] {1, 2, 3, 4, 5};
    boolean result = nodeSetContext.nextSet();
    assertTrue(result);
}
}