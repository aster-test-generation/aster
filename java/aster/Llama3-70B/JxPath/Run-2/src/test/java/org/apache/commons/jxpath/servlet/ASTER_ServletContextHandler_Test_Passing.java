/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Enumeration;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletContextHandler_Test_Passing {
    private static int DEFAULT_PROPERTY_COUNT = 16;
    ServletContextHandler servletcontexthandler;
    ServletContext servletContextMock;
    HashSet<String> set;
    ServletContext servletContext;
    HttpSessionAndServletContext httpSessionAndServletContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_lpBc0() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        ServletContext context = mock(ServletContext.class);
        when(context.getAttributeNames()).thenReturn(new Enumeration<String>() {
            @Override
            public boolean hasMoreElements() {
                return false;
            }

            @Override
            public String nextElement() {
                return null;
            }
        });
        HashSet<String> propertyNames = new HashSet<>();
        servletContextHandler.collectPropertyNames(propertyNames, context);
        assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        servletContextMock = Mockito.mock(ServletContext.class);
        // Arrange
        String property = "someProperty";
        Object expectedValue = "someValue";
        Mockito.when(servletContextMock.getAttribute(property)).thenReturn(expectedValue);
        // Act
        Object actualValue = servletcontexthandler.getProperty(servletContextMock, property);
        // Assert
        Assertions.assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetProperty() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        servletContextMock = Mockito.mock(ServletContext.class);
        String property = "testProperty";
        Object value = "testValue";
        servletcontexthandler.setProperty(servletContextMock, property, value);
        Mockito.verify(servletContextMock).setAttribute(property, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames_1() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        set = new HashSet<>();
        servletContext = mock(ServletContext.class);
        httpSessionAndServletContext = mock(HttpSessionAndServletContext.class);
        // given
        when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        Enumeration<String> enumeration = mock(Enumeration.class);
        when(servletContext.getAttributeNames()).thenReturn(enumeration);
        when(enumeration.hasMoreElements()).thenReturn(true, true, false);
        when(enumeration.nextElement()).thenReturn("attribute1", "attribute2");
        // when
        servletcontexthandler.collectPropertyNames(set, httpSessionAndServletContext);
        // then
        assertEquals(2, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames_2() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        set = new HashSet<>();
        servletContext = mock(ServletContext.class);
        httpSessionAndServletContext = mock(HttpSessionAndServletContext.class);
        // given
        when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        Enumeration<String> enumeration = mock(Enumeration.class);
        when(servletContext.getAttributeNames()).thenReturn(enumeration);
        when(enumeration.hasMoreElements()).thenReturn(true, true, false);
        when(enumeration.nextElement()).thenReturn("attribute1", "attribute2");
        // when
        servletcontexthandler.collectPropertyNames(set, httpSessionAndServletContext);
        // then
        assertTrue(set.contains("attribute1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames_3() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        set = new HashSet<>();
        servletContext = mock(ServletContext.class);
        httpSessionAndServletContext = mock(HttpSessionAndServletContext.class);
        // given
        when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        Enumeration<String> enumeration = mock(Enumeration.class);
        when(servletContext.getAttributeNames()).thenReturn(enumeration);
        when(enumeration.hasMoreElements()).thenReturn(true, true, false);
        when(enumeration.nextElement()).thenReturn("attribute1", "attribute2");
        // when
        servletcontexthandler.collectPropertyNames(set, httpSessionAndServletContext);
        // then
        assertTrue(set.contains("attribute2"));
    }
}