/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreOperationMultiply_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetSymbol_EIps0() {
        Constant arg1 = new Constant("10");
        Constant arg2 = new Constant("20");
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        String symbol = coreOperationMultiply.getSymbol();
        assertEquals("*", symbol);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrecedence_aIlj0() {
    Constant arg1 = new Constant("string");
    Constant arg2 = new Constant(1);
    CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
    int precedence = coreOperationMultiply.getPrecedence();
    assertEquals(CoreOperationMultiply.MULTIPLY_PRECEDENCE, precedence);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_iCkg0() {
        Constant arg1 = new Constant("string");
        Constant arg2 = new Constant(1);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        boolean result = coreOperationMultiply.isSymmetric();
        assert(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_RfUp1() {
        Constant arg1 = new Constant("string");
        Constant arg2 = new Constant(1);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        boolean result = coreOperationMultiply.isSymmetric();
        assert(result == true);
    }
}