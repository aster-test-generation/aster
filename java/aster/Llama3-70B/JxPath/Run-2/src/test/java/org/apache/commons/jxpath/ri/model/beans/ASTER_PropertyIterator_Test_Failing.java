/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PropertyIterator_Test_Failing {
    private int position = 0;
    PropertyIterator propertyiterator;
    private String name;
    @Mock
    private BeanPointer pointer;
    @Mock
    private DOMNodePointer startWith;
    @Mock
    private PropertyPointer propertyNodePointer;
    @Mock
    private BeanPointer beanPointer;
    private PropertyIterator propertyIterator;
    private boolean empty = false;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private PropertyPointer mockPropertyNodePointer;
    private int startPropertyIndex;
    private int startIndex = 0;
    private boolean includeStart = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer() throws Exception {
        propertyNodePointer = mockPropertyNodePointer;
        propertyIterator = new PropertyIterator(beanPointer, name, false, startWith);
        when(propertyNodePointer.getValuePointer()).thenReturn(nodePointer);
        NodePointer result = propertyIterator.getNodePointer();
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_Throwable() throws Exception {
        propertyNodePointer = mockPropertyNodePointer;
        propertyIterator = new PropertyIterator(beanPointer, name, false, startWith);
        when(propertyNodePointer.getValuePointer()).thenThrow(new Throwable());
        NullPropertyPointer nullPropertyPointer = mock(NullPropertyPointer.class);
        when(propertyNodePointer.getImmediateParentPointer()).thenReturn(nodePointer);
        when(new NullPropertyPointer(nodePointer)).thenReturn(nullPropertyPointer);
        NodePointer result = propertyIterator.getNodePointer();
        assertEquals(nullPropertyPointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_EQyT0() throws Exception {
        NodePointer propertyNodePointer = Mockito.mock(NodePointer.class);
        BeanPointer beanPointer = Mockito.mock(BeanPointer.class);
        DOMNodePointer startWith = Mockito.mock(DOMNodePointer.class);
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "name", false, startWith);
        Mockito.when(propertyIterator.getNodePointer()).thenReturn(propertyNodePointer);
        assertNotNull(propertyIterator.getNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_EQyT0_fid3() throws Exception {
        NodePointer propertyNodePointer = Mockito.mock(NodePointer.class);
        BeanPointer beanPointer = Mockito.mock(BeanPointer.class);
        DOMNodePointer startWith = Mockito.mock(DOMNodePointer.class);
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "name", false, startWith);
        Mockito.when(propertyIterator.getNodePointer()).thenReturn(propertyNodePointer);
        NodePointer result = propertyIterator.getNodePointer();
        assertEquals(propertyNodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPosition_Yhfk0() throws Exception {
        QName name = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer pointer = new BeanPointer(name, bean, beanInfo, locale);
        org.w3c.dom.Document document = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
        org.w3c.dom.Node node = document.createElement("test");
        DOMNodePointer startWith = new DOMNodePointer(node, locale);
        PropertyIterator propertyiterator = new PropertyIterator(pointer, "test", false, startWith);
        assertEquals(0, propertyiterator.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_hKrD1_hayA0() {
        QName name = new QName("prefix", "localName");
        BeanPointer pointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        DOMNodePointer startWith = new DOMNodePointer(null, Locale.US);
        PropertyIterator propertyIterator = new PropertyIterator(pointer, "propertyName", true, startWith);
        assertFalse(propertyIterator.setPosition(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_positionNot0_abyq3_IWtL0_fid3() {
        QName name = new QName("qualifiedName");
        BeanPointer pointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        PropertyIterator propertyIterator = new PropertyIterator(pointer, "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNotNull(nodePointer);
    }
}