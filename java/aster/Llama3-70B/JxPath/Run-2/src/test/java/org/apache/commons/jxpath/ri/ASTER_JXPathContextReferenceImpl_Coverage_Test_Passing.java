/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ClassLoaderUtil;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathContextReferenceImpl_Coverage_Test_Passing {
private NamespaceResolver namespaceResolver;
    JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    JXPathContext parentContext;
    Object contextBean;
    NodePointer contextPointer;
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_lTjK0() throws Exception {
        parentContext = mock(JXPathContext.class);
        contextBean = new Object();
        contextPointer = mock(NodePointer.class);
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_oQEt00() throws Exception {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_vawM01() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNamespaceContextPointer_NullPointer_YNqa2_JhBg0() throws Exception {
    JXPathContextReferenceImpl impl = new JXPathContextReferenceImpl(new JXPathContextReferenceImpl(null, new Object()), new Object(), null);
    NamespaceResolver resolver = mock(NamespaceResolver.class);
    impl.namespaceResolver = resolver;
    try {
        impl.setNamespaceContextPointer(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_mgMb0() throws Exception {
    JXPathContextReferenceImpl jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
    NamespaceResolver namespaceResolver = jxpathcontextreferenceimpl.getNamespaceResolver();
    assertNotNull(namespaceResolver);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateConditionally_ClassNotFoundException_cpnQ0_oSis0() {
    ClassLoaderUtil classLoaderUtil = mock(ClassLoaderUtil.class);
    try {
        when(classLoaderUtil.getClass("existenceCheckClassName", true)).thenThrow(new ClassNotFoundException("existenceCheckClassName"));
    } catch (ClassNotFoundException e) {
    }
    Object result = JXPathContextReferenceImpl.allocateConditionally("className", "existenceCheckClassName");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunction_GetFunctionNotNull_DfLq7_WuGq0() {
    JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
    NamespaceResolver namespaceResolver = context.getNamespaceResolver();
    assertNotNull(namespaceResolver);
}
}