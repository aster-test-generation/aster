/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespacePointer_Test_Passing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private NodePointer pointer1;
    @Mock
    private NodePointer pointer2;
    private JDOMNamespacePointer jdomnamespacepointer;
    private String prefix = "testPrefix";
    private JDOMNamespacePointer sameObject;
    private JDOMNamespacePointer differentObject;
    DOMNodePointer domNodePointer;
    private DOMNodePointer mockParent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        int result = jdomnamespacepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(domNodePointer, "prefix");
        Object value = new Object();
        try {
            jdomnamespacepointer.setValue(value);
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException e) {
            assertEquals("Cannot modify a namespace", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(domNodePointer, "prefix");
        assertFalse(jdomnamespacepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        // given
        String expectedPrefix = prefix;
        int expectedHashCode = expectedPrefix.hashCode();
        // when
        int actualHashCode = jdomnamespacepointer.hashCode();
        // then
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(domNodePointer, prefix);
        QName expectedQName = new QName(prefix);
        QName actualQName = jdomnamespacepointer.getName();
        assertEquals(expectedQName, actualQName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(domNodePointer, "prefix");
        int length = jdomnamespacepointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        parent = Mockito.mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        boolean result = jdomnamespacepointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_vgwW0() throws Exception {
        DOMNodePointer parent = org.mockito.Mockito.mock(DOMNodePointer.class);
        JDOMNamespacePointer jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        String namespaceURI = "namespaceURI";
        org.mockito.Mockito.when(parent.getNamespaceURI("prefix")).thenReturn(namespaceURI);
        String result = jdomnamespacepointer.getNamespaceURI();
        org.junit.Assert.assertEquals(namespaceURI, result);
        org.mockito.Mockito.verify(parent, org.mockito.Mockito.times(1)).getNamespaceURI("prefix");
    }
}