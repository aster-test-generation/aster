/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_MNLT0() throws Exception {
        PercentCodec codec = new PercentCodec();
        Object result = codec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_KPoK1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        Object result = codec.encode(bytes);
        assertEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_gXkv0() throws Exception {
        PercentCodec codec = new PercentCodec();
        Object result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_cHwi1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "Hello%20World".getBytes();
        Object result = codec.decode(bytes);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_AIUj0() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncodingNeeded_tQmh1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "HelloWorld".getBytes();
        byte[] result = codec.encode(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncodingNeeded_hCns2_1() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b', 'c'}, true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncodingNeeded_hCns2_2() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b', 'c'}, true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithWillEncode_lVEN4_1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "Hello%World".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithWillEncode_lVEN4_2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "Hello%World".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_mdfF2() throws Exception {
        byte[] alwaysEncodeChars = new byte[256];
        alwaysEncodeChars['a'] = 1;
        PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
        byte[] bytes = "a".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_alEt3() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[256], true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAsciiChar_SIGP4() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "a".getBytes();
        byte[] result = codec.encode(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_ZUxG0() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncodingNeeded_yktv1() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = "HelloWorld".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpace_Bxqr2_1() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpace_Bxqr2_2() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_QttU3_1() throws Exception {
        PercentCodec percentCodec = new PercentCodec("abc".getBytes(), false);
        byte[] bytes = "HelloWorld".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_QttU3_2() throws Exception {
        PercentCodec percentCodec = new PercentCodec("abc".getBytes(), false);
        byte[] bytes = "HelloWorld".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_SkRQ2() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = codec.encode(bytes);
        assertArrayEquals("Hello+World".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithWillEncode_AAoD3() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x80};
        byte[] result = codec.encode(bytes);
        assertArrayEquals("%80".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithWillEncodeAndPlusForSpace_oDle4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 0x80, ' '};
        byte[] result = codec.encode(bytes);
        assertArrayEquals("%80+".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_vPjN0() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmpty_sFfA1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.decode(new byte[0]);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNoEscape_yKTg2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] input = "HelloWorld".getBytes();
        byte[] result = codec.decode(input);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEscape_hsYo3() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] input = "Hello%20World".getBytes();
        byte[] expected = "Hello World".getBytes();
        byte[] result = codec.decode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithPlusForSpace_FNOk4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] input = "Hello+World".getBytes();
        byte[] expected = "Hello World".getBytes();
        byte[] result = codec.decode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_wwqg2_1() throws Exception {
        byte[] alwaysEncodeChars = new byte[256];
        alwaysEncodeChars['a'] = 1;
        PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
        byte[] bytes = "aHelloWorld".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_wwqg2_2() throws Exception {
        byte[] alwaysEncodeChars = new byte[256];
        alwaysEncodeChars['a'] = 1;
        PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
        byte[] bytes = "aHelloWorld".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_BNNz3_1() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[256], true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeCharsAndPlusForSpace_rzBe4_1() throws Exception {
        byte[] alwaysEncodeChars = new byte[256];
        alwaysEncodeChars['a'] = 1;
        PercentCodec codec = new PercentCodec(alwaysEncodeChars, true);
        byte[] bytes = "aHello World".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeCharsAndPlusForSpace_rzBe4_2() throws Exception {
        byte[] alwaysEncodeChars = new byte[256];
        alwaysEncodeChars['a'] = 1;
        PercentCodec codec = new PercentCodec(alwaysEncodeChars, true);
        byte[] bytes = "aHello World".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotEquals(bytes, result);
    }
}