/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_withCharset_SWYK0() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_withoutCharset_qEOi1() throws Exception {
        URLCodec urlCodec = new URLCodec();
        assertNull(urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_MkQM1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String str = "%20";
        String result = urlCodec.decode(str);
        assertEquals(" ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_withCharset_vGAX0() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_withoutCharset_uAQW1() throws Exception {
        URLCodec urlCodec = new URLCodec();
        assertNull(urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_cWqN0() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello%20World";
        String charsetName = "UTF-8";
        String result = urlCodec.decode(str, charsetName);
        assert "Hello World".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_mXCg1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String str = null;
        String charsetName = "UTF-8";
        String result = urlCodec.decode(str, charsetName);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_tZtc0() throws DecoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] bytes = "Hello%20World".getBytes();
        byte[] result = urlCodec.decode(bytes);
        assertArrayEquals("Hello World".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Dxhq0() throws Exception {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode("https://www.example.com");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_DSIR1() throws Exception {
        URLCodec codec = new URLCodec("UTF-8");
        byte[] bytes = "Hello%20World".getBytes();
        Object result = codec.decode(bytes);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_ciZY2() throws Exception {
        URLCodec codec = new URLCodec();
        Object result = codec.decode("Hello%20World");
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlNull_xUZU0() throws Exception {
        byte[] result = URLCodec.decodeUrl(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEmpty_pfEq1_1() throws Exception {
        byte[] result = URLCodec.decodeUrl(new byte[0]);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEmpty_pfEq1_2() throws Exception {
        byte[] result = URLCodec.decodeUrl(new byte[0]);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlPlus_eEso2() throws Exception {
        byte[] input = "+".getBytes();
        byte[] result = URLCodec.decodeUrl(input);
        assertEquals(" ", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEscape_vYhC3() throws Exception {
        byte[] input = "%20".getBytes();
        byte[] result = URLCodec.decodeUrl(input);
        assertEquals(" ", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_QoAx1() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] bytes = "Hello, World!".getBytes();
        assertEquals(new String(urlCodec.encode(bytes)), "Hello%2C+World%21");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jkzY0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello World";
        String charsetName = "UTF-8";
        String result = urlCodec.encode(str, charsetName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_tDix1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String str = null;
        String charsetName = "UTF-8";
        String result = urlCodec.encode(str, charsetName);
        assertNull(result);
    }
}