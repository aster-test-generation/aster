/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_RZiQ0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String result = codec.decode(sourceStr, sourceCharset);
        assert result.equals("Hello, World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_ELLH1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        String sourceCharset = "UTF-8";
        String result = codec.decode(sourceStr, sourceCharset);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_jkOP0() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_zMef0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World";
        Charset sourceCharset = Charset.forName("UTF-8");
        String result = codec.encode(sourceStr, sourceCharset);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_cvba1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        Charset sourceCharset = Charset.forName("UTF-8");
        String result = codec.encode(sourceStr, sourceCharset);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_WwHU0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "test";
        String decodedStr = codec.decode(sourceStr);
        assertNotNull(decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_withCharset_dZoe1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "test";
        String decodedStr = codec.decode(sourceStr);
        assertNotNull(decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_withStrict_OgGw2() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "test";
        String decodedStr = codec.decode(sourceStr);
        assertNotNull(decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_withCharsetAndStrict_SKCF3() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "test";
        String decodedStr = codec.decode(sourceStr);
        assertNotNull(decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_nWRH0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World";
        Charset sourceCharset = Charset.forName("UTF-8");
        String result = codec.decode(sourceStr, sourceCharset);
        assertNotEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_VGMb1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        Charset sourceCharset = Charset.forName("UTF-8");
        String result = codec.decode(sourceStr, sourceCharset);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_KNbq1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = "Hello, World!".getBytes();
        Object result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_JaUo2() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String str = "Hello, World!";
        Object result = codec.encode(str);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset1_GdWH0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset2_OubN1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-16"));
        assertEquals("UTF-16", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset3_nmFh2() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-32");
        assertEquals("UTF-32", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset4_jVYT3() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_vcvW1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = "Hello, World!".getBytes();
        Object result = codec.decode(bytes);
        assertEquals(new String(bytes), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_WHOy2() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String str = "Hello, World!";
        Object result = codec.decode(str);
        assertEquals(str, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_OYul0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World";
        String sourceCharset = "UTF-8";
        String result = codec.encode(sourceStr, sourceCharset);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_BHyt1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        String sourceCharset = "UTF-8";
        String result = codec.encode(sourceStr, sourceCharset);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset1_OuPg0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Charset charset = codec.getCharset();
        assertNotNull(charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset2_gJkR1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        Charset charset = codec.getCharset();
        assertNotNull(charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset3_CGmj2() throws Exception {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charset);
        assertSame(charset, codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset4_nISe3() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        Charset charset = codec.getCharset();
        assertEquals(Charset.forName("UTF-8"), charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset5_fUjG4() throws Exception {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charset, true);
        assertSame(charset, codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_BRCY0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World";
        String encodedStr = codec.encode(sourceStr);
        assertNotNull(encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStrict_OyTR1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "Hello World";
        String encodedStr = codec.encode(sourceStr);
        assertNotNull(encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeCharset_zamb2() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-16"));
        String sourceStr = "Hello World";
        String encodedStr = codec.encode(sourceStr);
        assertNotNull(encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeCharsetString_JMaf3() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "Hello World";
        String encodedStr = codec.encode(sourceStr);
        assertNotNull(encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_gLzP0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = "Hello, World!".getBytes();
        byte[] decodedBytes = codec.decode(bytes);
        assertArrayEquals("Hello, World!".getBytes(), decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStrict_elAV1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] decodedBytes = codec.decode(bytes);
        assertArrayEquals("Hello, World!".getBytes(), decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharset_CBui2() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        byte[] bytes = "Hello, World!".getBytes();
        byte[] decodedBytes = codec.decode(bytes);
        assertArrayEquals("Hello, World!".getBytes(), decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharsetString_BtYI3() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        byte[] bytes = "Hello, World!".getBytes();
        byte[] decodedBytes = codec.decode(bytes);
        assertArrayEquals("Hello, World!".getBytes(), decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharsetStrict_ASWx4() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] decodedBytes = codec.decode(bytes);
        assertArrayEquals("Hello, World!".getBytes(), decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArray_hhNt0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArray_Strict_CCgQ1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArray_Charset_tXAk2() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArray_Charset_Strict_AtUN3() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArray_CharsetName_jNMn4() throws IllegalCharsetNameException, IllegalArgumentException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableNull_LDUy0() throws Exception {
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableEmpty_PtJA1() throws Exception {
        byte[] bytes = new byte[0];
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableSimple_GYvl2() throws Exception {
        byte[] bytes = "Hello World!".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals("Hello World!".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableEscaped_XBMY3() throws Exception {
        byte[] bytes = "Hello=20World!".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals("Hello World!".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableCR_KKVD4() throws Exception {
        byte[] bytes = "Hello\rWorld!".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals("HelloWorld!".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableLF_oydX5() throws Exception {
        byte[] bytes = "Hello\nWorld!".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals("HelloWorld!".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable1_ZeOy0() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{65, 66, 67};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable2_Cslc1() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{65, 66, 67};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable3_CQgJ2() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable4_GVee3() throws Exception {
        BitSet printable = null;
        byte[] bytes = new byte[]{65, 66, 67};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable5_rjzy4() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{61, 31, 61, 32, 61, 33}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable6_pZzZ5() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{9, 10, 13};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{61, 61, 61, 10, 61, 13}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable7_BvNW6() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{32, 33, 34};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{32, 33, 34}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable8_edFV7() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{127, 126, 125};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{127, 126, 125}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable9_acRa8() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable1_mDNC0() throws Exception {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{1, 2, 3, 10, 13}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable2_VEsn1() throws Exception {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable3_zHLi2() throws Exception {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable4_KpWv3() throws Exception {
        BitSet printable = null;
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{1, 2, 3, 10, 13}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable5_VrSd4() throws Exception {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 13}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable6_jIlB5() throws Exception {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 10, 13}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable7_dWBa6() throws Exception {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 10, 13}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable8_hypr7() throws Exception {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 10, 13}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable7_wNHi6() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable1_oWtd0() throws Exception {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[0];
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable2_Mugb1() throws Exception {
        BitSet printable = null;
        byte[] bytes = new byte[0];
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable3_bBjL2() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{32}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable4_NqOd3() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 33};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{32, 33}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable5_TgfU4() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 33, 34};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{32, 33, 34}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable6_ieiN5() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 33, 34, 35};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{32, 33, 34, 35}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable7_zRLi6() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 33, 34, 35, 36};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{32, 33, 34, 35, 36}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable8_tOKr7() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 33, 34, 35, 36, 37};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{32, 33, 34, 35, 36, 37}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable9_gItv8() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 33, 34, 35, 36, 37, 38};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{32, 33, 34, 35, 36, 37, 38}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable10_Obfv9() throws Exception {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 33, 34, 35, 36, 37, 38, 39};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{32, 33, 34, 35, 36, 37, 38, 39}, result);
    }
}