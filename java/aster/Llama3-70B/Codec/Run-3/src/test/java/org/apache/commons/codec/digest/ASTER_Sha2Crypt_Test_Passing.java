/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Sha2Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_gxPC0() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "key".getBytes();
        String result = Sha2Crypt.sha256Crypt(keyBytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_withNullSalt_SspE0() throws Exception {
        byte[] keyBytes = "key".getBytes();
        String salt = null;
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_withSalt_pFur1() throws Exception {
        byte[] keyBytes = "key".getBytes();
        String salt = "salt";
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_aRSS0() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha512Crypt(keyBytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_withNullSalt_IgvP0() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "key".getBytes();
        String salt = null;
        Random random = new Random();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_withSalt_WuxR1() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "key".getBytes();
        String salt = "salt";
        Random random = new Random();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_LDys0_1() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=1000$usesomesillystringforsalt$";
        String result = sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_LDys0_2() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=1000$usesomesillystringforsalt$";
        String result = sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(116, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptNullSalt_RZSC1_1() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String result = sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptNullSalt_RZSC1_2() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String result = sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(116, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_withNullSalt_UCph0() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "key".getBytes();
        String salt = null;
        Random random = new Random();
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_withSalt_aFxZ1() throws Exception {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        byte[] keyBytes = "key".getBytes();
        String salt = "salt";
        Random random = new Random();
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt, random);
        assertNotNull(result);
    }
}