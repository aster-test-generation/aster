/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeiderMorseEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_ffNy0() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        assertTrue(encoder.isConcat());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_UpeP0() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "Hello";
        Object result = encoder.encode(source);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_bfVF0() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType ruleType = encoder.getRuleType();
        assertNotNull(ruleType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_Ombu0() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String result = encoder.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_SBuc1() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "Hello World";
        String result = encoder.encode(source);
        assertNotNull(result);
    }
}