/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_HmacUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_ThrowsNoSuchAlgorithmException_Cqnt0() {
        HmacAlgorithms mockAlgorithm = mock(HmacAlgorithms.class);
        when(mockAlgorithm.getName()).thenReturn("InvalidAlgorithm");
        boolean result = HmacUtils.isAvailable(mockAlgorithm);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_CatchesNoSuchAlgorithmException_AnTG1() {
        HmacAlgorithms mockAlgorithm = mock(HmacAlgorithms.class);
        when(mockAlgorithm.getName()).thenReturn("InvalidAlgorithm");
        try {
            HmacUtils.isAvailable(mockAlgorithm);
            fail("Expected NoSuchAlgorithmException to be thrown");
        } catch (RuntimeException e) {
            assertTrue(e.getCause() instanceof NoSuchAlgorithmException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_LEMv0_CDdX0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_LEMv0_CDdX0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_SONz0_ScPA0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_SONz0_ScPA0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_ILNy0_qaSu0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_ILNy0_qaSu0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotEquals(0, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_sogH0_cUhJ0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        ByteBuffer byteBuffer = ByteBuffer.wrap(valueToDigest);
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String hmacHex = hmacUtils.hmacHex(byteBuffer);
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_sogH0_cUhJ0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        ByteBuffer byteBuffer = ByteBuffer.wrap(valueToDigest);
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String hmacHex = hmacUtils.hmacHex(byteBuffer);
        assertTrue(hmacHex.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_rAXE0_aNVb0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        ByteBuffer byteBuffer = ByteBuffer.wrap(valueToDigest);
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String hmacHex = hmacUtils.hmacHex(byteBuffer);
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_rAXE0_aNVb0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        ByteBuffer byteBuffer = ByteBuffer.wrap(valueToDigest);
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String hmacHex = hmacUtils.hmacHex(byteBuffer);
        assertTrue(hmacHex.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_trEt0_Yuty0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_trEt0_Yuty0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_BufferCreation_nmXN0_SFpl0() throws IOException, NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] input = "input".getBytes();
        ByteBuffer byteBuffer = ByteBuffer.wrap(input);
        String result = hmacUtils.hmacHex(byteBuffer);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_zOTz0_sgTB0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_zOTz0_sgTB0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_uSDN0_rGQF0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String hmacHex = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_uSDN0_rGQF0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String hmacHex = hmacUtils.hmacHex(valueToDigest);
        assertTrue(hmacHex.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_KBCY0_qDQq0_fid1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        String expectedHex = "expectedHexValue"; // Replace with actual expected value
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String actualHex = hmacUtils.hmacHex(valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_CWrJ0_eiMc0_fid1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        String expectedHmac = "f2de0290cf94055c08ca9ccb951c19d037cb2b16f48b6b232b8540496474a934"; // Replace with actual expected value
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String hmac = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHmac, hmac);
    }
}