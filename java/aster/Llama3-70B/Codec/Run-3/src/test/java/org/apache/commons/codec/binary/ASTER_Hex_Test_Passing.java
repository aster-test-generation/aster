/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_xJRZ0() throws Exception {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        char[] result = Hex.encodeHex(data, 0, data.length, true);
        char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Cfwv0() throws Exception {
        Hex hex = new Hex();
        ByteBuffer array = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] result = hex.encode(array);
        assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_WyfZ0() throws Exception {
        Hex hex = new Hex();
        byte[] data = "Hello, World!".getBytes();
        char[] result = hex.encodeHex(data);
        char[] expected = "48656c6c6f2c20576f726c6421".toCharArray();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_rdgP0() throws Exception {
        Hex hex = new Hex();
        byte[] data = "Hello, World!".getBytes();
        char[] result = Hex.encodeHex(data, true);
        char[] expected = "48656c6c6f2c20576f726c6421".toCharArray();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_ZqxT0() throws Exception {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        int dataOffset = 0;
        int dataLen = 5;
        boolean toLowerCase = true;
        char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
        char[] actual = Hex.encodeHex(data, dataOffset, dataLen, toLowerCase);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_YHqK0() throws Exception {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        char[] toDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        char[] result = Hex.encodeHex(data, toDigits);
        char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_validCharacter_jNdl0() throws Exception {
        int result = Hex.toDigit('A', 0);
        assert result == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_Ljph0() throws Exception {
        Hex hex = new Hex();
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        char[] result = Hex.encodeHex(data, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_keeG0() throws Exception {
        Hex hex = new Hex();
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        String result = hex.encodeHexString(data, true);
        assertEquals("48656c6c6f2c20576f726c6421", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_fZFi0() throws Exception {
        Hex hex = new Hex();
        char[] data = "48656c6c6f".toCharArray();
        byte[] expected = "Hello".getBytes();
        byte[] actual = hex.decodeHex(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_goOc0() throws Exception {
        Hex hex = new Hex("UTF-8");
        String str = "Hello World";
        byte[] expected = str.getBytes(hex.getCharset());
        Object result = hex.encode(str);
        assertArrayEquals(expected, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_byteArray_lIwX2() throws Exception {
        Hex hex = new Hex();
        byte[] byteArray = "Hello World".getBytes();
        Object result = hex.encode(byteArray);
        assertArrayEquals(byteArray, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName1_USvk0() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName2_nbWN1() throws Exception {
        Hex hex = new Hex("UTF-8");
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName3_yVso2() throws Exception {
        Hex hex = new Hex();
        assertNotNull(hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_SMoo0() throws Exception {
        Hex hex = new Hex();
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        String result = Hex.encodeHexString(data);
        assertEquals("48656c6c6f2c20576f726c6421", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_JGUJ0() throws Exception {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        String result = hex.encodeHexString(data);
        assertEquals("0102030405", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CqXQ0() throws Exception {
        Hex hex = new Hex();
        byte[] array = "Hello, World!".getBytes();
        byte[] result = hex.encode(array);
        assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withCharset_uUVh1() throws Exception {
        Hex hex = new Hex("UTF-8");
        byte[] array = "Hello, World!".getBytes();
        byte[] result = hex.encode(array);
        assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withCharsetObject_UgBS2() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        byte[] array = "Hello, World!".getBytes();
        byte[] result = hex.encode(array);
        assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_OGUS0() throws Exception {
        Hex hex = new Hex();
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        char[] result = Hex.encodeHex(data);
        assertArrayEquals("3132302C20576F726C6421".toCharArray(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withCharset_cEnc0() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        assertEquals("Hex[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withCharsetName_joME1() throws Exception {
        Hex hex = new Hex("UTF-8");
        assertEquals("Hex[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withoutCharset_RiNP2() throws Exception {
        Hex hex = new Hex();
        assertEquals("Hex[charsetName=null]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_BezB0() throws DecoderException {
        Hex hex = new Hex();
        byte[] array = "48656c6c6f".getBytes();
        byte[] result = hex.decode(array);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_withCharset_ISdW0() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        Charset charset = hex.getCharset();
        assertEquals(StandardCharsets.UTF_8, charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_withCharsetName_wxtc1() throws Exception {
        Hex hex = new Hex("UTF-8");
        Charset charset = hex.getCharset();
        assertEquals(StandardCharsets.UTF_8, charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_default_kNgl2() throws Exception {
        Hex hex = new Hex();
        Charset charset = hex.getCharset();
        assertNotNull(charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_eWWT0() throws Exception {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        char[] out = new char[10];
        hex.encodeHex(data, 0, data.length, true, out, 0);
        assertArrayEquals("0123456789abcdef".toCharArray(), out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_aMZe0() throws Exception {
        Hex hex = new Hex();
        byte[] result = hex.decodeHex("48656c6c6f");
        byte[] expected = {72, 101, 108, 108, 111};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_uALv0() throws Exception {
        Hex hex = new Hex();
        String str = "Hello";
        char[] chars = str.toCharArray();
        Object result = hex.decode(str);
        assertArrayEquals(chars, (char[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_pWbo1() throws Exception {
        Hex hex = new Hex();
        byte[] bytes = "Hello".getBytes();
        Object result = hex.decode(bytes);
        assertArrayEquals(bytes, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteBuffer_FosG2() throws Exception {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap("Hello".getBytes());
        Object result = hex.decode(buffer);
        assertArrayEquals(buffer.array(), (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_hyLu0() throws Exception {
        Hex hex = new Hex();
        ByteBuffer byteBuffer = ByteBuffer.wrap("Hello, World!".getBytes());
        char[] toDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        char[] result = Hex.encodeHex(byteBuffer, toDigits);
        assertArrayEquals("3132332c20576f726c6421".toCharArray(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_EvenLengthInput_LQtw0_1() throws Exception {
        Hex hex = new Hex();
        char[] data = "48656c6c6f".toCharArray();
        byte[] out = new byte[data.length / 2];
        int result = Hex.decodeHex(data, out, 0);
        assertArrayEquals("Hello".getBytes(), out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_EvenLengthInput_LQtw0_2() throws Exception {
        Hex hex = new Hex();
        char[] data = "48656c6c6f".toCharArray();
        byte[] out = new byte[data.length / 2];
        int result = Hex.decodeHex(data, out, 0);
        assertEquals(data.length / 2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_OddLengthInput_CZGj1() throws Exception {
        Hex hex = new Hex();
        char[] data = "48656c6c6".toCharArray();
        byte[] out = new byte[(data.length + 1) / 2];
        try {
            Hex.decodeHex(data, out, 0);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_InsufficientOutputArray_pfhA2() throws Exception {
        Hex hex = new Hex();
        char[] data = "48656c6c6f".toCharArray();
        byte[] out = new byte[data.length / 2 - 1];
        try {
            Hex.decodeHex(data, out, 0);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_Offset_BZuo3_1() throws Exception {
        Hex hex = new Hex();
        char[] data = "48656c6c6f".toCharArray();
        byte[] out = new byte[data.length / 2 + 2];
        int result = Hex.decodeHex(data, out, 1);
        assertArrayEquals("Hello".getBytes(), Arrays.copyOfRange(out, 1, out.length - 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_Offset_BZuo3_2() throws Exception {
        Hex hex = new Hex();
        char[] data = "48656c6c6f".toCharArray();
        byte[] out = new byte[data.length / 2 + 2];
        int result = Hex.decodeHex(data, out, 1);
        assertEquals(data.length / 2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_ViyK1() throws Exception {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        String result = Hex.encodeHexString(data, true);
        assertEquals("0102030405", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_withUpperCase_hpyt3() throws Exception {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        String result = Hex.encodeHexString(data, false);
        assertEquals("0102030405", result);
    }
}