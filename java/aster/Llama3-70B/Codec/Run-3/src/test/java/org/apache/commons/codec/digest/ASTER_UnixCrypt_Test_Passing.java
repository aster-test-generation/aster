/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnixCrypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_wsdq0() throws Exception {
        String original = "password";
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_Ohdo0() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_iyot0() throws Exception {
        String original = "password";
        String expected = UnixCrypt.crypt(original);
        assertNotNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_ThCt0() throws Exception {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_HAgU1() throws Exception {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_ZFDk2() throws Exception {
        byte[] original = "password".getBytes();
        String salt = "abc";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_qiDo3() throws Exception {
        byte[] original = new byte[0];
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullOriginal_gJHS4() throws Exception {
        byte[] original = null;
        String salt = "ab";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_XEna5() throws Exception {
        byte[] original = "p".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_MHmV6() throws Exception {
        byte[] original = "passwordpasswordpassword".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_AwTM0() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_oTqS1() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        try {
            UnixCrypt.crypt(original, "invalid");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_DDxo2() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[0];
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSingleCharOriginal_wsjQ3() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "a".getBytes();
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptMultiCharOriginal_pvjd4() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "abcdefg".getBytes();
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptySalt_eYDG6() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        try {
            UnixCrypt.crypt(original, "");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSingleCharSalt_gHqR7() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        try {
            UnixCrypt.crypt(original, "A");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidInput_ksNz8() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_EwLL6() throws Exception {
        byte[] original = "password1234567890".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithSpaces_nPMc7() throws Exception {
        byte[] original = "password with spaces".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithSpecialChars_NSRM8() throws Exception {
        byte[] original = "password!@#$".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_eJHf0() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_jukE1() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        try {
            UnixCrypt.crypt(original, "invalid");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_gpBC2() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{};
        String result = UnixCrypt.crypt(original, "AB");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_UmJO4() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3};
        String result = UnixCrypt.crypt(original, "AB");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_AOsU5() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[16];
        for (int i = 0; i < 16; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "AB");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithZeroBytes_aQjY6() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{0, 0, 0, 0, 0, 0, 0, 0};
        String result = UnixCrypt.crypt(original, "AB");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithMaxBytes_jLhk7() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[8];
        for (int i = 0; i < 8; i++) {
            original[i] = Byte.MAX_VALUE;
        }
        String result = UnixCrypt.crypt(original, "AB");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithMinBytes_vuIt8() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[8];
        for (int i = 0; i < 8; i++) {
            original[i] = Byte.MIN_VALUE;
        }
        String result = UnixCrypt.crypt(original, "AB");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_VhWR1() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        try {
            UnixCrypt.crypt(original, "invalid");
            fail();
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_LRYa2() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[0];
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValid_MNLg4() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLargeOriginal_nGHP5() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[1024];
        for (int i = 0; i < 1024; i++) {
            original[i] = (byte) i;
        }
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSmallOriginal_ZvPR6() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[1];
        original[0] = (byte) 1;
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_XvEU0() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        String result = unixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_EHBX1() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        try {
            unixCrypt.crypt(original, "invalid");
            fail();
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_ZZnW2() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[0];
        String salt = "salt";
        String result = unixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValid_JtwB4() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        String salt = "salt";
        String result = unixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_NlhR5() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[1024];
        for (int i = 0; i < 1024; i++) {
            original[i] = (byte) i;
        }
        String salt = "salt";
        String result = unixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_qRnU6() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[1];
        original[0] = (byte) 1;
        String salt = "salt";
        String result = unixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithZeroBytes_nwTl7() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[8];
        for (int i = 0; i < 8; i++) {
            original[i] = (byte) 0;
        }
        String salt = "salt";
        String result = unixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithNonZeroBytes_eLCG8() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[8];
        for (int i = 0; i < 8; i++) {
            original[i] = (byte) (i + 1);
        }
        String salt = "salt";
        String result = unixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_ixaZ1() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_tzVF2() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String salt = "abc";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_SspF3() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{};
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullOriginal_Kgks4() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = null;
        String salt = "ab";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLargeOriginal_uGse5() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[1024];
        for (int i = 0; i < 1024; i++) {
            original[i] = (byte) i;
        }
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_JWxK0() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String result = unixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_yfky1() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String salt = "ab";
        String result = unixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_yBQK2() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String salt = "abc";
        try {
            unixCrypt.crypt(original, salt);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_XvGc3() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{};
        String salt = "ab";
        String result = unixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullOriginal_etpR4() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = null;
        String salt = "ab";
        try {
            unixCrypt.crypt(original, salt);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLargeOriginal_BNqy5() throws Exception {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[1024];
        for (int i = 0; i < 1024; i++) {
            original[i] = (byte) i;
        }
        String salt = "ab";
        String result = unixCrypt.crypt(original, salt);
        assertNotNull(result);
    }
}