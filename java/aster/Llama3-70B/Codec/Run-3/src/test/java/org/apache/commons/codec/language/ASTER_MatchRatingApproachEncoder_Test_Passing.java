/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MatchRatingApproachEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_oDHQ0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeVowels("Hello World");
        assert "Hll Wrld".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowelsWithVowelAsFirstLetter_vfSq1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeVowels("Aloha");
        assert "Aloh".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFirst3Last3_LongName_znZj0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.getFirst3Last3("abcdefghi");
        assert "abcghi".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFirst3Last3_ShortName_KxtI1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.getFirst3Last3("abc");
        assert "abc".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_RLXL0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "testString";
        Object result = encoder.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants1_gdvs0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("hello");
        assert "HELLO".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants2_uxdY1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("butter");
        assert "BUTOR".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants3_QnlV2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("cattle");
        assert "CATLE".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_withSpecialCharacters_OTlq0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.cleanName("John-Doe&Smith Jr.");
        assertEquals("JOHNSMITHJR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_withAccents_PZZs1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.cleanName("Rene-Dupont");
        assertEquals("RENEEDUPONT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccentsNullInput_PHNl0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertNull(encoder.removeAccents(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccentsNoAccents_OeQm1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("hello", encoder.removeAccents("hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccentsWithAccents_osok2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("hello", encoder.removeAccents("hllo"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccentsMixedCase_kShU3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("Hello", encoder.removeAccents("Hllo"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating1_xPgn0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.getMinRating(3);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating2_FodD1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.getMinRating(6);
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating3_kNXL2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.getMinRating(10);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating4_NQuk3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.getMinRating(12);
        assertEquals(2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating5_etXv4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.getMinRating(15);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_E_NPzD0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("E");
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_A_Bmgt1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("A");
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_O_nzAg2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("O");
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_I_kGvh3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("I");
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_U_HGcn4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("U");
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_NotVowel_CTax5() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("B");
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing1_RxXt0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("abc", "cba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing2_AcJT1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(1, encoder.leftToRightThenRightToLeftProcessing("abcd", "dcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing3_fgcM2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(2, encoder.leftToRightThenRightToLeftProcessing("abcde", "edcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing4_QEHi3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(3, encoder.leftToRightThenRightToLeftProcessing("abcdef", "fedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing5_IOeb4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(4, encoder.leftToRightThenRightToLeftProcessing("abcdefg", "gfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing6_aGoc5() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(5, encoder.leftToRightThenRightToLeftProcessing("abcdefgh", "hgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_TcDd0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("", encoder.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_qvWy1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("", encoder.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleCharacter_Mvnv2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("", encoder.encode("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultipleCharacters_InVI3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("bcdxyz", encoder.encode("abcd efgh ijkl mnop qrst uvwx yz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDoubleConsonants_sjFT5() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("bcdxyz", encoder.encode("abbc cdde efgh ijkl mnop qrst uvwx yz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_JQSE7() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("", encoder.encode("abcd!@#$ efgh ijkl mnop qrst uvwx yz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNumbers_nOMk8() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("", encoder.encode("abcd123 efgh ijkl mnop qrst uvwx yz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsNullName1_UblC0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals(null, "John"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsNullName2_WaKw1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("John", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsEmptyName1_baww2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("", "John"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsEmptyName2_CxGO3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("John", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsSingleCharName1_ELFg4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("J", "John"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsSingleCharName2_vFDs5() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("John", "J"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsSameName_MfmW6() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("John", "John"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsDifferentName_Fxdo7() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("John", "Jane"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsNameWithVowels_pIdw8() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("John", "Jhn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsNameWithDoubleConsonants_wwCs9() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("Jenny", "Jny"));
    }
}