/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PhoneticEngine_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dApostrophe_Remainder_lLYG1() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "d' test";
        String expected = "(test)-(dtest)";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Prefix_BZZb3() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "de test";
        String expected = "(test)-(dete)";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Sephardic_WpyP6() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
        String input = "test' test";
        String expected = "test-test";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Ashkenazi_LhLA8() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 10);
        String input = "test test";
        String expected = "test-test";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Generic_sBaV10() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "test test";
        String expected = "test-test";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Concat_wEpb11() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "test test";
        String expected = "test test";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SingleWord_bphk12() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "test";
        String expected = "test";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }
}