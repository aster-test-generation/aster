/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Rule_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_ReturnsRulesMap_WhenRulesExist_uiZb0() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        String lang = "en";
        Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_imxY0() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        String lang = "English";
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList(lang)));
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Generic_Ashkenazi_EmptyLanguageSet_UBqq0() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Rules_SingletonLanguageSet_Djqn1() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Exact_MultipleLanguageSet_hnTt2() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Rules_EmptyLanguageSet_BKyM4() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Exact_EmptyLanguageSet_EEat5() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Generic_Rules_SingletonLanguageSet_Pcst6() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Approx_MultipleLanguageSet_XaBZ7() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Rules_MultipleLanguageSet_eowU8() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Generic_Exact_SingletonLanguageSet_swsN9() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Singleton_kAYl0() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_htUP2() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertEquals(1, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Generic_Exact_SIDr3() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertEquals(1, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Sephardic_Rules_rJVK4() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertEquals(1, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_EmptyLanguageSet_XvUw5() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.emptySet());
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NullNameType_glWq6() throws Exception {
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        try {
            Rule.getInstanceMap(null, rt, langs);
            fail();
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NullRuleType_atqN7() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        try {
            Rule.getInstanceMap(nameType, null, langs);
            fail();
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_ANY_LanguageSet_tTYO9() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("ANY"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }
}