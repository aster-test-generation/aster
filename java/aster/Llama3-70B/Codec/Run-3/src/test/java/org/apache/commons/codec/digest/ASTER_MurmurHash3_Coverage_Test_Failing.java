/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Seed_JpWU0() {
        int seed = -78938053;
        int result = MurmurHash3.hash32(0L, seed);
        assertEquals(seed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_ReverseBytes_DQDN1() {
        long data = 0x1234567890abcdefL;
        long reversed = Long.reverseBytes(data);
        int result = MurmurHash3.hash32(data, 0);
        assertEquals(reversed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_XorBytes_uMGa4() {
        int seed = 123;
        long data = 0L;
        int result = MurmurHash3.hash32(data, seed);
        int expected = seed ^ Long.BYTES;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_DefaultSeed_NSTD0() {
        assertEquals(MurmurHash3.DEFAULT_SEED, MurmurHash3.hash64((short) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Seed_BKAc0() {
        int seed = 2061630799;
        int result = MurmurHash3.hash32(0, 0, seed);
        assertEquals(seed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_ReverseBytesData1_XLIQ1() {
        long data1 = 0x1234567890abcdefL;
        long reversedData1 = Long.reverseBytes(data1);
        int seed = 0;
        MurmurHash3.hash32(data1, 0, seed);
        assertEquals(reversedData1, data1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_ReverseBytesData2_itjF2() {
        long data2 = 0xfedcba9876543210L;
        long reversedData2 = Long.reverseBytes(data2);
        int seed = 0;
        MurmurHash3.hash32(0, data2, seed);
        assertEquals(reversedData2, data2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_k1MultiplyC2_dhxX6_kHSl0() {
        assertEquals(-962287725, MurmurHash3.hash32(new byte[]{1}, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_SwitchCase7_Puzm0_fid1() {
        byte[] data = new byte[10];
        for (int i = 0; i < 10; i++) {
            data[i] = (byte) i;
        }
        long result = MurmurHash3.hash64(data, 0, 9, 1);
        assertEquals(1234567890L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_K1Shift48_XYIb1_fid1() {
        byte[] data = new byte[8];
        data[6] = (byte) 0x12;
        long result = MurmurHash3.hash64(data, 0, 7, 1);
        assertEquals(2345678901L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_K1Shift40_InAQ2_fid1() {
        byte[] data = new byte[7];
        data[5] = (byte) 0x34;
        long result = MurmurHash3.hash64(data, 0, 6, 1);
        assertEquals(3456789012L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Seed_JpWU0_fid1() {
        int seed = 123;
        int result = MurmurHash3.hash32(0L, seed);
        assertEquals(seed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_k1Initialization_iOCh1() {
        assertEquals(0, MurmurHash3.hash64((short) 0) & 0xFFFFFFFFL);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_k1XorLowByte_zcWm2() {
        assertEquals(256, MurmurHash3.hash64((short) 1) & 0xFFFFFFFFL);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_k1XorHighByte_IIqA3() {
        assertEquals(65280, MurmurHash3.hash64((short) 256) & 0xFFFFFFFFL);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Seed_BKAc0_fid1() {
        int seed = 123;
        int result = MurmurHash3.hash32(0, 0, seed);
        assertEquals(seed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_withNullByteArray_EFkl1_wOLr0_fid1() {
        byte[] data = null;
        try {
            MurmurHash3.hash32(data, 0);
            assert false; // Should throw NullPointerException
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_k1RotateLeftR1_ZRvY5_PZgD0_fid1() {
        assertEquals(Long.rotateLeft(0xCC9E2D51, 15), MurmurHash3.hash32(new byte[]{1}, 1) & 0xFFFFFFFFL);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_ouPu0_fid1() {
        assertEquals(2147483647, MurmurHash3.hash32(new byte[]{1}, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_k1MultiplyC2_dhxX6_kHSl0_fid1() {
        assertEquals(0xc6a4a793, MurmurHash3.hash32(new byte[]{1}, 1) & 0xFFFFFFFFL);
    }
}