/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_SupI0() throws Exception {
        byte[] raw = {65, 66, 67};
        String result = BinaryCodec.toAsciiString(raw);
        assertEquals("ABC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyNullArray_PxYb0() throws Exception {
        byte[] array = null;
        assertTrue(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyEmptyArray_JuSg1() throws Exception {
        byte[] array = new byte[0];
        assertTrue(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyNonEmptyArray_jcPJ2() throws Exception {
        byte[] array = new byte[1];
        assertFalse(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toByteArray_nullInput_uBFH0() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] result = binaryCodec.toByteArray(null);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toByteArray_validInput_KluX1() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] result = binaryCodec.toByteArray("Hello World");
        byte[] expected = new byte[]{72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_UjIk0() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        byte[] result = binaryCodec.encode(raw);
        assertArrayEquals(new byte[]{49, 50, 51}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_ruFB0() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = "Hello, World!".getBytes();
        byte[] result = binaryCodec.decode(ascii);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArray_LBsv0() throws Exception {
        BinaryCodec codec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        Object result = codec.encode(raw);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_ccfE0() throws Exception {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = (byte[]) codec.decode(null);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_avIS1() throws Exception {
        BinaryCodec codec = new BinaryCodec();
        byte[] ascii = new byte[]{1, 2, 3};
        byte[] result = (byte[]) codec.decode(ascii);
        assertArrayEquals(ascii, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharArray_NgYF2() throws Exception {
        BinaryCodec codec = new BinaryCodec();
        char[] ascii = new char[]{'1', '2', '3'};
        byte[] result = (byte[]) codec.decode(ascii);
        assertArrayEquals(new byte[]{49, 50, 51}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_jgcH3() throws Exception {
        BinaryCodec codec = new BinaryCodec();
        String ascii = "123";
        byte[] result = (byte[]) codec.decode(ascii);
        assertArrayEquals(new byte[]{49, 50, 51}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_EmptyArray_RHKj0() throws Exception {
        byte[] ascii = new byte[0];
        byte[] result = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_SingleByte_Klqq1() throws Exception {
        byte[] ascii = "00000001".getBytes();
        byte[] result = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(new byte[]{1}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_MultipleBytes_wmAq2() throws Exception {
        byte[] ascii = "0000000100000001".getBytes();
        byte[] result = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(new byte[]{1, 1}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_AllOnes_JwXP3() throws Exception {
        byte[] ascii = "11111111".getBytes();
        byte[] result = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(new byte[]{-1}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_AllZeros_SfXr4() throws Exception {
        byte[] ascii = "00000000".getBytes();
        byte[] result = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(new byte[]{0}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_EmptyArray_TpFc0() throws Exception {
        byte[] raw = new byte[0];
        char[] expected = new char[0];
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_SingleByte_kUKJ1() throws Exception {
        byte[] raw = new byte[]{0x01};
        char[] expected = new char[]{'0', '0', '0', '0', '0', '0', '0', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_MultipleBytes_BneT2() throws Exception {
        byte[] raw = new byte[]{0x01, 0x02, 0x04, 0x08};
        char[] expected = new char[]{'0', '0', '0', '0', '0', '0', '0', '1',
        '0', '0', '0', '0', '0', '0', '1', '0',
        '0', '0', '0', '0', '1', '0', '0', '0',
        '0', '0', '0', '1', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_MinByte_WSeD4() throws Exception {
        byte[] raw = new byte[]{0x00};
        char[] expected = new char[]{'0', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiEmptyInput_xmCV1() throws Exception {
        byte[] result = BinaryCodec.fromAscii(new char[0]);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiSingleByte_KTGV2() throws Exception {
        byte[] result = BinaryCodec.fromAscii(new char[]{'0', '0', '0', '0', '0', '0', '0', '0'});
        assertArrayEquals(new byte[]{0}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleBytes_tWkW3() throws Exception {
        byte[] result = BinaryCodec.fromAscii(new char[]{'1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0'});
        assertArrayEquals(new byte[]{0x55, 0x55}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiAllOnes_pXRA5() throws Exception {
        byte[] result = BinaryCodec.fromAscii(new char[]{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'});
        assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_EmptyArray_xuGi0() throws Exception {
        byte[] raw = new byte[0];
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_SingleByte_gBYB1() throws Exception {
        byte[] raw = new byte[]{0x01};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '1'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_MultipleBytes_bUZr2() throws Exception {
        byte[] raw = new byte[]{0x01, 0x02, 0x04, 0x08};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_MaxValue_rVvR3() throws Exception {
        byte[] raw = new byte[]{(byte) 0xFF};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(new byte[]{'1', '1', '1', '1', '1', '1', '1', '1'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_MinValue_bExt4() throws Exception {
        byte[] raw = new byte[]{(byte) 0x00};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '0'}, result);
    }
}