/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_LPbV2() throws DecoderException {
        URLCodec codec = new URLCodec();
        assertEquals("Hello World", codec.decode("Hello+World"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_BytesIsNull_irQO0() {
        byte[] result = URLCodec.encodeUrl(null, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_UrlSafeIsNull_pTbR1() {
        URLCodec codec = new URLCodec();
        BitSet urlsafe = null;
        byte[] bytes = "Hello World".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_BitLessThanZero_ZGLZ2() {
        URLCodec codec = new URLCodec();
        BitSet urlsafe = new BitSet();
        byte[] bytes = new byte[]{-1};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_SpaceCharacter_ZwjW3() {
        URLCodec codec = new URLCodec();
        BitSet urlsafe = new BitSet();
        byte[] bytes = " ".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_UrlSafeCharacter_DiQV4() {
        URLCodec codec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        byte[] bytes = "a".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_NonUrlSafeCharacter_wfMW5() {
        URLCodec codec = new URLCodec();
        BitSet urlsafe = new BitSet();
        byte[] bytes = "a".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_DoesNotThrowException_WhenInputIsValid_GWEg2() throws Exception {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("someValidString");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonNullString_Pysi1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode("Hello World");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrl_ArrayIndexOutOfBoundsException_wswm0() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[]{(byte) '%', 0x61}; // '%a' is an incomplete escape sequence
        DecoderException exception = assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(bytes));
        String expectedMessage = "Invalid URL encoding: ";
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.startsWith(expectedMessage));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrl_ArrayIndexOutOfBoundsException_EndOfArray_ZOSf1() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[]{(byte) '%'}; // '%' is an incomplete escape sequence at the end of the array
        DecoderException exception = assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(bytes));
        String expectedMessage = "Invalid URL encoding: ";
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.startsWith(expectedMessage));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_lXRm2() throws EncoderException {
        URLCodec codec = new URLCodec();
        assertEquals("Hello+World", codec.encode("Hello World"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_VMGZ3_aNdu0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        codec.encode("123", "UTF-8"); // No exception is expected here
    }
}