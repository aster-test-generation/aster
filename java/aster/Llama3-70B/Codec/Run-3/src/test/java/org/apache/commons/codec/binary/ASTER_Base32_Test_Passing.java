/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_true_wviD0() throws Exception {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_false_octetLessThan0_FfnT1() throws Exception {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_false_octetGreaterThanOrEqualToDecodeTableLength_VWsE2() throws Exception {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) 123));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_false_decodeTableValueIsMinus1_OKhm3() throws Exception {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) 95));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_Okwu0() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3});
        assertArrayEquals(new byte[]{1, 2, 3}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_Yrua1() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true);
        assertArrayEquals(new byte[]{1, 2, 3}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_CpeY2() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true, (byte) 4, CodecPolicy.STRICT);
        assertArrayEquals(new byte[]{1, 2, 3}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_FJmd3() throws Exception {
        Base32 base32 = new Base32(true);
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator5_UHlh4() throws Exception {
        Base32 base32 = new Base32(10);
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator6_tXAU5() throws Exception {
        Base32 base32 = new Base32((byte) 5);
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_gNOC6() throws Exception {
        Base32 base32 = new Base32(true, (byte) 6);
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator8_NiWX7() throws Exception {
        Base32 base32 = new Base32();
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator9_tVGc8() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true, (byte) 4);
        assertArrayEquals(new byte[]{1, 2, 3}, base32.getLineSeparator());
    }
}