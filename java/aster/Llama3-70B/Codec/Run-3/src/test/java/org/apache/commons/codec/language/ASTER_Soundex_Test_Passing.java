/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Soundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_oksf0() throws Exception {
        Soundex soundex = new Soundex();
        Object result = soundex.encode("Hello");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength1_iAwI0() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength2_EBUQ1() throws Exception {
        Soundex soundex = new Soundex("mapping");
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength3_UfCF2() throws Exception {
        Soundex soundex = new Soundex("mapping", true);
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength4_jeRM3() throws Exception {
        char[] mapping = {'a', 'b', 'c'};
        Soundex soundex = new Soundex(mapping);
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_hGwQ0() throws Exception {
        Soundex soundex = new Soundex();
        soundex.setMaxLength(5);
        assertEquals(5, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_withMapping_yCjI1() throws Exception {
        Soundex soundex = new Soundex("mapping");
        soundex.setMaxLength(10);
        assertEquals(10, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_withSpecialCaseHW_Shiz2() throws Exception {
        Soundex soundex = new Soundex("mapping", true);
        soundex.setMaxLength(15);
        assertEquals(15, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_withCharArray_SHSd3() throws Exception {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        soundex.setMaxLength(20);
        assertEquals(20, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Cthk0() throws Exception {
        Soundex soundex = new Soundex("01230120022455012623010202");
        assertEquals("B452", soundex.encode("Baker"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyString_VQEH1() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_IYay2() throws Exception {
        Soundex soundex = new Soundex(new char[]{'0', '1', '2', '3', '0', '1', '2', '0', '0', '2', '2', '4', '5', '5', '0', '1', '2', '6', '2', '3', '0', '1', '0', '2'});
        assertEquals("0000", soundex.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpecialCaseHW_Fesw3() throws Exception {
        Soundex soundex = new Soundex("01230120022455012623010202", true);
        assertEquals("H400", soundex.encode("Hewitt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_gGOO0() throws Exception {
        Soundex soundex = new Soundex("01230120022455012623010202");
        try {
            int result = soundex.difference("Hello", "Halo");
            assert result == 2;
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_SpecialCaseHW_tyOn1() throws Exception {
        Soundex soundex = new Soundex("01230120022455012623010202", true);
        try {
            int result = soundex.difference("Hello", "Halo");
            assert result == 2;
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_DefaultMapping_eEfy2() throws Exception {
        Soundex soundex = new Soundex();
        try {
            int result = soundex.difference("Hello", "Halo");
            assert result == 2;
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_CharArrayMapping_ztYn3() throws Exception {
        char[] mapping = "01230120022455012623010202".toCharArray();
        Soundex soundex = new Soundex(mapping);
        try {
            int result = soundex.difference("Hello", "Halo");
            assert result == 2;
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNullInput_KmMS0() throws Exception {
        Soundex soundex = new Soundex();
        assertNull(soundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmptyInput_xsnd1() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("", soundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSingleCharacter_MgsA2() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("A000", soundex.soundex("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMultipleCharacters_RcJd3() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("B200", soundex.soundex("Bob"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSpecialCaseHW_OAFo4() throws Exception {
        Soundex soundex = new Soundex("mapping", true);
        assertEquals("B200", soundex.soundex("BHWob"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSilentMarker_AcdV5() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("B000", soundex.soundex("Bxyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexConsecutiveSameDigits_zuAz6() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("B200", soundex.soundex("Bbbob"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNonAlphaInput_SJIt8() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("A000", soundex.soundex("A1!@#"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexLowerCaseInput_YsPs9() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("B200", soundex.soundex("bob"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexUpperCaseInput_mKVq10() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("B200", soundex.soundex("BOB"));
    }
}