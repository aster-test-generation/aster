/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_RDVz0() throws Exception {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
        assertNull(daitchMokotoffSoundex.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SHVg1() throws Exception {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex(true);
        assertEquals("M620", daitchMokotoffSoundex.encode("Mackovitch"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_obeE0() throws Exception {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
        String result = (String) daitchMokotoffSoundex.encode("Hello");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNullInput_npgt0() throws Exception {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
        assertNull(daitchMokotoffSoundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmptyInput_FImZ1() throws Exception {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex(true);
        assertEquals("", daitchMokotoffSoundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexValidInput_mFiw2() throws Exception {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
        assertEquals("D500|D500", daitchMokotoffSoundex.soundex("Daitch"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_esLF0() throws Exception {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
        String result = daitchMokotoffSoundex.soundex("Katz");
        assert "kts|kts|kts".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFolding_jeag1() throws Exception {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex(true);
        String result = daitchMokotoffSoundex.soundex("Kotz");
        assert "kts|kts|kts".equals(result);
    }
}