/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_qFhO0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha384(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_qFhO0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha384(data);
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_ALQx0_1() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha384Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_ALQx0_2() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha384Digest();
        assertEquals("SHA-384", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_NIpA0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.md5("Hello, World!");
        byte[] expected = {-48, 72, 74, -38, -85, -124, 91, 65, 104, 54, 122, 103, 122, 95, 122, 54};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_wQgT0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha1("Hello, World!");
        byte[] expected = {-90, -101, 56, -12, -83, -122, -12, -115, -122, -115, -122, -115, -122, -115, -122, -115, -122, -115, -122, -115};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_RZfC0() throws Exception {
        String data = "Hello, World!";
        byte[] result = DigestUtils.sha(data);
        byte[] expected = DigestUtils.sha1(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_FXHM0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha256Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_FXHM0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha256Hex(data);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_ioof0() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        String data = "Hello, World!";
        String expected = "65a8e27d8879283831b664bd8b7f0ad4";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_LriE0_1() throws Exception {
        MessageDigest messageDigest = DigestUtils.getMd2Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_LriE0_2() throws Exception {
        MessageDigest messageDigest = DigestUtils.getMd2Digest();
        assertEquals("MD2", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_XPWP0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_512Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_XPWP0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_512Hex(data);
        assertNotEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_KvHD0_1() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha3_512Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_KvHD0_2() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha3_512Digest();
        assertEquals("SHA3-512", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_sUUZ0() throws Exception {
        String data = "Hello, World!";
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_Wqhk0() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] result = digestUtils.digest(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_cXZh0() throws Exception {
        String data = "Hello, World!";
        String expected = "41384663363564386364363564386364";
        String actual = DigestUtils.sha512_224Hex(data);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_riax0() throws Exception {
        MessageDigest messageDigest = DigestUtils.getDigest("MD5");
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_SZvS0() throws IOException {
        DigestUtils digestUtils = new DigestUtils("MD5");
        File file = new File("testFile.txt");
        byte[] result = digestUtils.digest(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_xise0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{-90, -67, -44, -12, 55, -5, -122, -103, -12, -115, -122, -103, -12, -115, -122, -103, -12, -115, -122, -103, -12, -115, -122, -103, -12, -115, -122, -103, -12, -115, -122, -103, -12, -115};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_NYjo0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_224Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_NYjo0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_224Hex(data);
        assertEquals(56, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_withDefaultConstructor_BRMr0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_withMessageDigestConstructor_aFuz1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        assertSame(messageDigest, digestUtils.getMessageDigest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_withStringConstructor_bTXi2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        MessageDigest md = digestUtils.getMessageDigest();
        assertNotNull(md);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_USCK0() throws Exception {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_hYrI0_1() throws Exception {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_hYrI0_2() throws Exception {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertEquals("SHA3-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_afuC0_1() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha1Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_afuC0_2() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha1Digest();
        assertEquals("SHA-1", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_jfEp0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha3_224("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_jfEp0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha3_224("Hello, World!");
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_jUIy0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.shaHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_jUIy0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.shaHex(data);
        assertEquals(40, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_niDe0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(messageDigest.digest(data), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_tUWj0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_224("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_tUWj0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_224("Hello, World!");
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_CEvx0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha3_256("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_CEvx0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha3_256("Hello, World!");
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_AwxR0_1() throws Exception {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_AwxR0_2() throws Exception {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertEquals("SHA3-224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_GPqg0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(new byte[]{-48, -73, 74, 48, -22, -10, 113, -119, -65, -67, -124, -15, -126, 95, -113, 54}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_eSnq0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha3_512("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_eSnq0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha3_512("Hello, World!");
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_oaFg0() throws Exception {
        String data = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_jKAD0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha3_384("testData");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_jKAD0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha3_384("testData");
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_kboL0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha(data);
        byte[] expected = DigestUtils.sha1(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_tuaO0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_512(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_tuaO0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_512(data);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_NOMl0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_384Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_NOMl0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_384Hex(data);
        assertEquals(96, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_AGyX0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        String expected = "b94a903056d446a1a7a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_UHOX0() throws Exception {
        String data = "Hello, World!";
        String expected = DigestUtils.sha1Hex(data);
        String actual = DigestUtils.shaHex(data);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_iMTM0() throws Exception {
        String data = "Hello, World!";
        String expected = "626637646438646638646438646638646438646438646438";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_bYRC0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md2Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_bYRC0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md2Hex(data);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_QWgS0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertArrayEquals(messageDigest.digest(), updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_UbqT0_1() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha512Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_UbqT0_2() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha512Digest();
        assertEquals("SHA-512", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_NMgR0() throws Exception {
        String data = "Hello, World!";
        String expected = "b07e5bfb6e0f4e41f545655a0341839f1e6f07a9a814f122f5a7663f2a";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_iPIU0() throws Exception {
        String data = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
        String result = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_LqKm0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_LqKm0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512Hex(data);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_tNVR0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-512/224");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_224(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_tNVR0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-512/224");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_224(data);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_ELSe0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_384(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_ELSe0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_384(data);
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_withValidAlgorithm_jGhm0() throws Exception {
        assertTrue(DigestUtils.isAvailable("MD5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_withInvalidAlgorithm_fDQO1() throws Exception {
        assertFalse(DigestUtils.isAvailable("InvalidAlgorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_fJGF0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_256(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_fJGF0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_256(data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_yhGK0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_256Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_yhGK0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_256Hex(data);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_rJYY0() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA3-224");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_224(data);
        assertArrayEquals(new byte[]{-106, -45, -122, -90, 93, -64, -126, -124, -126, -113, -122, -115, -114, -126, -114, -114, -126, -114, -114, -126, -114, -114, -126, -114, -114, -126, -114, -114}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNullMessageDigest_wvyt1() throws Exception {
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        try {
            DigestUtils.digest(null, data);
            fail();
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_oHLZ0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.md2(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_oHLZ0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.md2(data);
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_JFOx0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha1Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_JFOx0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha1Hex(data);
        assertEquals(40, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_qtqu0() throws Exception {
        String data = "Hello, World!";
        String expected = "65a8e27d8879283831b664bd8b7f0ad4";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest1_JcVV0() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        RandomAccessFile data = new RandomAccessFile("test.txt", "rw");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest2_drxF1() throws Exception {
        MessageDigest digest = new DigestUtils("SHA-256").getMessageDigest();
        RandomAccessFile data = new RandomAccessFile("test.txt", "rw");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest3_QYUh2() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        RandomAccessFile data = new RandomAccessFile("test.txt", "rw");
        data.setLength(0);
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest5_HDOB4() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        RandomAccessFile data = new RandomAccessFile("test.txt", "rw");
        data.seek(10);
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest6_QKqF5() throws Exception {
        MessageDigest digest = new DigestUtils("SHA-256").getMessageDigest();
        RandomAccessFile data = new RandomAccessFile("test.txt", "rw");
        data.setLength(100);
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest9_unqq8() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        RandomAccessFile data = new RandomAccessFile("test.txt", "rw");
        data.setLength(50);
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest10_rcAc9() throws Exception {
        MessageDigest digest = new DigestUtils("SHA-256").getMessageDigest();
        RandomAccessFile data = new RandomAccessFile("test.txt", "rw");
        data.seek(0);
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_Fhnc0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_256(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_Fhnc0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_256(data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_raaD0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_256("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_raaD0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_256("Hello, World!");
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_WcJB0() throws Exception {
        String data = "Hello, World!";
        String expected = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_FgrH0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md5Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_FgrH0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md5Hex(data);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_ieDO0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        String result = digestUtils.digestAsHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_ieDO0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        String result = digestUtils.digestAsHex(data);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_rNph0() throws Exception {
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("MD5");
        MessageDigest result = DigestUtils.getDigest("MD5", defaultMessageDigest);
        assertEquals(defaultMessageDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_tFyA0_1() throws Exception {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_tFyA0_2() throws Exception {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertEquals("SHA-512/224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_DvwV0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha256("Hello, World!");
        byte[] expected = new byte[]{-90, -67, -44, 74, -26, 65, -66, -115, -107, -25, -122, -80, -90, 50, -10, -44, -12, -122, -82, -80, -13, -126, -12, -122, -82, -80, -13, -126, -12, -122, -82, -80};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_WHCX0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertArrayEquals(messageDigest.digest(), updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_BwQF0() throws Exception {
        String data = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3c07f164bc6c0e8bd943299d03885829ee50e31dfc74494e04c682fb08e9546a";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_VNWv0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{-48, 2, -6, 72, -39, -113, 43, 89, -67, 111, -17, 65, -67, 114, 56, 101};
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_OWsU0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha384Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_OWsU0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha384Hex(data);
        assertEquals(96, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_lSRr0_1() throws Exception {
        byte[] result = DigestUtils.sha384("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_lSRr0_2() throws Exception {
        byte[] result = DigestUtils.sha384("Hello, World!");
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_amyU0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.md2("testData");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_Qusf0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] data = "Hello, World!".getBytes();
        String result = digestUtils.digestAsHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_Qusf0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] data = "Hello, World!".getBytes();
        String result = digestUtils.digestAsHex(data);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_AaBi0_1() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha3_256Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_AaBi0_2() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha3_256Digest();
        assertEquals("SHA3-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_uAAu0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_256Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_uAAu0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_256Hex(data);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_sFJz0_1() throws Exception {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_sFJz0_2() throws Exception {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertEquals("SHA-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_SZDD0() throws Exception {
        String data = "Hello, World!";
        String expected = "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_Ixxr0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{-90, -113, -25, -121, -106, 74, -122, -45, 103, 54, -53, 45, -75, 122, 114, 54, -122, -45, 103, 54};
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_mnSW0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] result = digestUtils.digest("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_mnSW0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] result = digestUtils.digest("Hello, World!");
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_sKBU0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        String result = DigestUtils.sha3_224Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_sKBU0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        String result = DigestUtils.sha3_224Hex(data);
        assertEquals(56, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_roXv0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = digestUtils.digest(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_roXv0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = digestUtils.digest(data);
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_iECQ0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_224Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_iECQ0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_224Hex(data);
        assertEquals(56, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_QhoM0_1() throws Exception {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_QhoM0_2() throws Exception {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertEquals("MD5", md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_GzZc0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_GzZc0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512("Hello, World!");
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_rkQb0_1() throws Exception {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_rkQb0_2() throws Exception {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertEquals("SHA-512/256", digest.getAlgorithm());
    }
}