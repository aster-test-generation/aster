/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ToAsciiChars_gAXj2() throws EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        Object result = codec.encode(raw);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_HNDN2() throws DecoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] ascii = new byte[]{1, 2, 3};
        Object result = codec.decode(ascii);
        assert(result != null);
        assert(result instanceof byte[]);
        assert(((byte[]) result).length == 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_UrXZ3() throws DecoderException {
        BinaryCodec codec = new BinaryCodec();
        String ascii = "Hello";
        Object result = codec.decode(ascii);
        assert(result != null);
        assert(result instanceof byte[]);
        assert(((byte[]) result).length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharArray_iOnY5() throws DecoderException {
        BinaryCodec codec = new BinaryCodec();
        char[] ascii = new char[]{'H', 'e', 'l', 'l', 'o'};
        Object result = codec.decode(ascii);
        assert(result != null);
        assert(result instanceof byte[]);
        assert(((byte[]) result).length > 0);
    }
}