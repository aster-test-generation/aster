/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_eheZ0() throws Exception {
        Base64 base64 = new Base64();
        byte[] pArray = "SGVsbG8=".getBytes();
        BigInteger result = Base64.decodeInteger(pArray);
        assertEquals(BigInteger.valueOf(169958), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_znFT0() throws Exception {
        Base64 base64 = new Base64(true);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_False_hKTn1() throws Exception {
        Base64 base64 = new Base64();
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_ypnB0() throws Exception {
        String base64String = "SGVsbG8gd29ybGQ=";
        byte[] expected = "Hello world".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_AJmT0_1() throws Exception {
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertNotNull(encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_AJmT0_2() throws Exception {
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_GUZG0_1() throws Exception {
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64String(binaryData);
        assertNotNull(encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_GUZG0_2() throws Exception {
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64String(binaryData);
        assertNotEquals("", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_RFGW0_1() throws Exception {
        Base64 base64 = new Base64();
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] result = Base64.encodeBase64Chunked(binaryData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_RFGW0_2() throws Exception {
        Base64 base64 = new Base64();
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] result = Base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(Base64.encodeBase64(binaryData, true), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_HkdL0_1() throws Exception {
        Base64 base64 = new Base64();
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] encodedData = Base64.encodeBase64(binaryData);
        assertNotNull(encodedData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_HkdL0_2() throws Exception {
        Base64 base64 = new Base64();
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] encodedData = Base64.encodeBase64(binaryData);
        assertNotEquals(0, encodedData.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_hmJY0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        byte[] result = Base64.encodeBase64(binaryData, isChunked);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_tgXS0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        boolean urlSafe = false;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_IubJ0() throws Exception {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[]{1, 2, 3, 4};
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_mWoG0() throws Exception {
        byte[] base64Data = "SGVsbG8gd29ybGQh".getBytes();
        byte[] decodedData = Base64.decodeBase64(base64Data);
        assertArrayEquals(new byte[]{-17, -65, -67, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33}, decodedData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ixRk0() throws Exception {
        Base64 base64 = new Base64();
        assertTrue(base64.isBase64("SGVsbG8gd29ybGQh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_False_qnoI1() throws Exception {
        Base64 base64 = new Base64();
        assertFalse(base64.isBase64("Hello World!"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_aRyn0() throws Exception {
        BigInteger bigInteger = BigInteger.valueOf(123);
        byte[] result = Base64.encodeInteger(bigInteger);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_FZHv0() throws Exception {
        Base64 base64 = new Base64(true);
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] encodedData = base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(new byte[]{-17, -65, -67, 104, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, encodedData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_true_DMiO0() throws Exception {
        Base64 base64 = new Base64();
        byte octet = 65;
        assertTrue(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_false_octetLessThan0_FVbk1() throws Exception {
        Base64 base64 = new Base64();
        byte octet = -1;
        assertFalse(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_false_decodeTableOctetEqualsMinus1_aJsE3() throws Exception {
        Base64 base64 = new Base64();
        byte octet = 64; // assuming decodeTable[64] is -1
        assertFalse(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_PadDefault_bUwZ0() throws Exception {
        assertTrue(Base64.isBase64((byte) '='));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Decodable_ydOD1() throws Exception {
        assertTrue(Base64.isBase64((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Negative_JyTr3() throws Exception {
        assertFalse(Base64.isBase64((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_EmptyArray_IgbG0() throws Exception {
        boolean result = Base64.isBase64(new byte[]{});
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_OnlyBase64Characters_azPF1() throws Exception {
        byte[] arrayOctet = "SGVsbG8gd29ybGQh".getBytes();
        boolean result = Base64.isBase64(arrayOctet);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_WithWhitespace_evbw2() throws Exception {
        byte[] arrayOctet = "SGVsbG8gd29ybGQh \t\n".getBytes();
        boolean result = Base64.isBase64(arrayOctet);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_NonBase64Characters_JSlR3() throws Exception {
        byte[] arrayOctet = "Hello world!@#".getBytes();
        boolean result = Base64.isBase64(arrayOctet);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_EmptyArray_AJiy0() throws Exception {
        byte[] binaryData = new byte[0];
        boolean isChunked = false;
        boolean urlSafe = false;
        int maxResultSize = 100;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(binaryData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_Chunked_foOb1() throws Exception {
        byte[] binaryData = "Hello, World!".getBytes();
        boolean isChunked = true;
        boolean urlSafe = false;
        int maxResultSize = 100;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_URLSafe_ECsG2() throws Exception {
        byte[] binaryData = "Hello, World!".getBytes();
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes4_vkfu3() throws Exception {
        BigInteger bigInt = new BigInteger("1");
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(new byte[]{0x01}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_TNcI0() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3});
        assertArrayEquals(new byte[]{1, 2, 3}, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_nZZR1() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, true);
        assertArrayEquals(new byte[]{1, 2, 3}, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_RSFq2() throws Exception {
        Base64 base64 = new Base64(true);
        assertNull(base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_HTSS3() throws Exception {
        Base64 base64 = new Base64(10);
        assertNull(base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator5_dirS4() throws Exception {
        Base64 base64 = new Base64();
        assertNull(base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator6_YFFr5() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, true, CodecPolicy.STRICT);
        assertArrayEquals(new byte[]{1, 2, 3}, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_GnHa6() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, false, CodecPolicy.LENIENT);
        assertArrayEquals(new byte[]{1, 2, 3}, base64.getLineSeparator());
    }
}