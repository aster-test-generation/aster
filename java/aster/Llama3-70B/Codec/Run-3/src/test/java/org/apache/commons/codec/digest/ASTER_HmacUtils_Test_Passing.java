/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_DZqz0_1() throws Exception {
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_DZqz0_2() throws Exception {
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getHmacSha256(key);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_jPlT0_1() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_jPlT0_2() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(new byte[]{-114, -51, 122, -13, -83, 122, -114, -51, 122, -13, -83, 122, -114, -51, 122, -13, -83, 122, -114, -51}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_cIRl0_1() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_cIRl0_2() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sTiE0_1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        File file = new File("testFile.txt");
        String result = hmacUtils.hmacHex(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sTiE0_2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        File file = new File("testFile.txt");
        String result = hmacUtils.hmacHex(file);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_CtLd0_1() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_CtLd0_2() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(new byte[64], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_MD5_qwOh0() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacMD5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_1_UlmB1() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_224_vyBQ2() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA224"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_256_bFhe3() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_384_tWoM4() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA384"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_512_Cigh5() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA512"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_UnknownAlgorithm_OPBr6() throws Exception {
        assertFalse(HmacUtils.isAvailable("UnknownAlgorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_gVYD0_1() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_gVYD0_2() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384_FzHw0_1() throws Exception {
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getHmacSha384(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384_FzHw0_2() throws Exception {
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getHmacSha384(key);
        assertEquals("HmacSHA384", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_vlwc0_1() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_vlwc0_2() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_PuCP0_1() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_PuCP0_2() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512_shOu0() throws Exception {
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        Mac mac = HmacUtils.getHmacSha512(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_nZVL0() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "586f4c2c8f161d4e5c1f71a415846530";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_doMw0() throws Exception {
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_hQko0() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "382624c8f5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_YqGf0_1() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_YqGf0_2() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(40, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_VWvW0_1() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_VWvW0_2() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_MD5_ieeb0() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_1_LYQD1() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_224_suOI2() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_224));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_256_erLO3() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_384_UcJW4() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_384));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_512_dPdk5() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_kAgE0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_XQrr1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_sAaa2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_Ezyy3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_ppSC4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_pOMf5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_ZJsl0() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_MD5_PAqX0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_1_sEdn1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_224_vYtX2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_256_nDXu3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_384_Pvrs4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_512_Sjch5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_unmR0() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_MD5_qORh0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_1_shCl1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_224_QPdl2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_256_sUDG3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_384_WGsa4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_512_JzmZ5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_VPsq0_1() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_VPsq0_2() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(96, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_LxYb0() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_kzMl0_1() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_kzMl0_2() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_pDBO0_1() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_pDBO0_2() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_xXRy0() throws Exception {
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_GlxH0_1() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_GlxH0_2() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(new byte[]{-12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_ZRhu0_1() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_ZRhu0_2() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_oawf0() throws Exception {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_HAXS0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_NNQv1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_yVkt2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_wtLC3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_Sqju4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_goPl5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_IfFy0() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_aATZ0_1() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_aATZ0_2() throws Exception {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_WIIw0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        File file = new File("testFile.txt");
        byte[] result = hmacUtils.hmac(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_cuGh1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        File file = new File("testFile.txt");
        byte[] result = hmacUtils.hmac(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_xHrB2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        File file = new File("testFile.txt");
        byte[] result = hmacUtils.hmac(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_SNPb3() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        File file = new File("testFile.txt");
        byte[] result = hmacUtils.hmac(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_CawV4() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        File file = new File("testFile.txt");
        byte[] result = hmacUtils.hmac(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_sIRX5() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        File file = new File("testFile.txt");
        byte[] result = hmacUtils.hmac(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_lRzJ0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_Vjlk1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_lSQf2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_WTzW3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_uUnA4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_PVHa5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_kCKE0_1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_kCKE0_2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_ZKMk0_1() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_ZKMk0_2() throws Exception {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertEquals(16, result.length);
    }
}