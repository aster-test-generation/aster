/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SoundexUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsEmptyNull_nlHo0() {
        assertTrue(SoundexUtils.isEmpty(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsEmptyEmptyString_SWop1() {
        assertTrue(SoundexUtils.isEmpty(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsEmptyNonEmptyString_IOMF2() {
        assertFalse(SoundexUtils.isEmpty("Hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedNullEs1_qjjG0() {
        SoundexUtils soundexUtils = new SoundexUtils();
        assertEquals(0, SoundexUtils.differenceEncoded(null, "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedNullEs2_pUap1() {
        SoundexUtils soundexUtils = new SoundexUtils();
        assertEquals(0, SoundexUtils.differenceEncoded("test", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedEqualChars_tVyG2() {
        SoundexUtils soundexUtils = new SoundexUtils();
        assertEquals(2, SoundexUtils.differenceEncoded("abc", "abd"));
    }
}