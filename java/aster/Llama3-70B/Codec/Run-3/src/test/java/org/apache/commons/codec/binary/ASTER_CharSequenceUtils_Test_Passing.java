/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CharSequenceUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches1_vEgp0() throws Exception {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "World";
        boolean result = CharSequenceUtils.regionMatches(cs, false, 6, substring, 0, 5);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches2_eINS1() throws Exception {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "WORLD";
        boolean result = CharSequenceUtils.regionMatches(cs, true, 6, substring, 0, 5);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches3_RQcq2() throws Exception {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "Universe";
        boolean result = CharSequenceUtils.regionMatches(cs, false, 6, substring, 0, 5);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches4_mgoB3() throws Exception {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "hello";
        boolean result = CharSequenceUtils.regionMatches(cs, true, 0, substring, 0, 5);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches5_LTcZ4() throws Exception {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "World";
        boolean result = CharSequenceUtils.regionMatches(cs, false, 0, substring, 0, 5);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches6_XiFx5() throws Exception {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "";
        boolean result = CharSequenceUtils.regionMatches(cs, false, 0, substring, 0, 0);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches7_FYlw6() throws Exception {
        CharSequence cs = "";
        CharSequence substring = "Hello";
        boolean result = CharSequenceUtils.regionMatches(cs, false, 0, substring, 0, 5);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches8_fIPH7() throws Exception {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "World";
        boolean result = CharSequenceUtils.regionMatches(cs, false, 10, substring, 0, 5);
        assert !result;
    }
}