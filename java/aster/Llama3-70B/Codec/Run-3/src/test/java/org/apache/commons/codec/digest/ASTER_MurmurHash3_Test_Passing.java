/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_mdEo0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int result = MurmurHash3.hash32x86(data);
        assertEquals(2127914517, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_dwAQ0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int seed = 42;
        int result = MurmurHash3.hash32(data, length, seed);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_cQoe0() throws Exception {
        long result = MurmurHash3.hash64(123);
        assertEquals(1234567890123456789L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_oDda0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long result = MurmurHash3.hash64(data);
        assertEquals(141098708111795L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_OkTo0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int result = MurmurHash3.hash32(data);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_cBdG0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = data.length;
        long result = MurmurHash3.hash64(data, offset, length);
        assertEquals(125829120, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_yAiq0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = 5;
        int seed = 1;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_ReDR0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = 16;
        int seed = 1;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        long[] expected = new long[]{141665357454154L, 1844674407370955161L};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_uaUK0_1() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        long[] result = MurmurHash3.hash128(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_uaUK0_2() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        long[] result = MurmurHash3.hash128(data);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_ypRk0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long result = MurmurHash3.hash64(data, 0, data.length, 1);
        assertEquals(1258291141446151407L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_EmptyArray_pzGT1() throws Exception {
        byte[] data = new byte[]{};
        long result = MurmurHash3.hash64(data, 0, data.length, 1);
        assertEquals(1L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_YIGF0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 8;
        int seed = 1;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_EmptyArray_INrp1() throws Exception {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 1;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_MDLp0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 8;
        int seed = 1;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assert result != 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86EmptyData_blOl1() throws Exception {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 1;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assert result == seed;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_nWvd1() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6};
        int offset = 0;
        int length = 6;
        int seed = 2;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_GdSm1() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7};
        int offset = 0;
        int length = 7;
        int seed = 1;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_vxrt0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int result = MurmurHash3.hash32(data, length);
        assertEquals(2147483647, result);
    }
}