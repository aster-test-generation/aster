/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_rrIM0() {
        Base64 base64 = new Base64();
        byte octet = 10; // octet is within the range of decodeTable and decodeTable[octet] is not -1
        boolean result = base64.isInAlphabet(octet);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidOctet_ReturnsTrue_aYZH1() {
        byte octet = 10; // assuming 10 is a valid octet
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_ThrowsIllegalArgumentException_WhenInputArrayTooBig_Udsr0() {
        byte[] binaryData = new byte[1024 * 1024]; // large array
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 1024; // small max result size
        try {
            Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input array too big, the output array would be bigger (" + binaryData.length + ") than the specified maximum size of " + maxResultSize, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_B_GreaterThanOrEqual0_And_B_LessThanDecodeTableLength_qTBv0_KJIh0_1_fid3() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
        assertTrue(Base64.isBase64((byte) 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_B_GreaterThanOrEqual0_And_B_LessThanDecodeTableLength_qTBv0_KJIh0_2() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
        assertTrue(Base64.isBase64((byte) 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_B_GreaterThanOrEqual0_And_B_LessThanDecodeTableLength_qTBv0_KJIh0_3() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
        assertTrue(Base64.isBase64((byte) 3));
    }
}