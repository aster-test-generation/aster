/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Sha2Crypt_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptBlocksizeLoop_wyFO2() {
        byte[] keyBytes = new byte[64]; // key length is multiple of block size
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptUpdateAltResult_wMtM3() {
        byte[] keyBytes = new byte[32]; // key length is equal to block size
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSBytesLoop_QVjq5() {
        byte[] keyBytes = new byte[16]; // key length is less than block size
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptDefaultSalt_cbVw6() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptRandomSalt_xjno7() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptLongKey_Issk8() {
        byte[] keyBytes = new byte[128]; // key length is multiple of block size
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptEmptyKey_UkfR10() {
        byte[] keyBytes = new byte[0]; // empty key
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    public void testSha256CryptNullSalt_uicp0_Dtqm1() {
        Random random = new Random();
        assertNotNull(Sha2Crypt.sha512Crypt("password".getBytes(), null, random));
    }

    @Test
    public void testSha256CryptEmptySalt_TSOA1_krow0() {
        Sha2Crypt sha2Crypt = new Sha2Crypt();
        assertThrows(IllegalArgumentException.class, () -> sha2Crypt.sha512Crypt("password".getBytes(), "", new Random()));
    }
}