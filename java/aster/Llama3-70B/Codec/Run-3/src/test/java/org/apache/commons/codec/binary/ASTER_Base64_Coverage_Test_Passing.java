/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_PadDefault_ReturnsTrue_EJHK0() {
        byte octet = Base64.PAD_DEFAULT;
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidOctet_ReturnsFalse_wasU2() {
        byte octet = -1; // assuming -1 is an invalid octet
        boolean result = Base64.isBase64(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_ThrowsIllegalArgumentException_WhenOutputArrayTooBig_aXno1() {
        byte[] binaryData = new byte[1024 * 1024]; // large array
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 1024; // small max result size
        Base64 b64 = new Base64(urlSafe);
        long len = b64.getEncodedLength(binaryData); // calculate the encoded length
        try {
            Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input array too big, the output array would be bigger (" + len + ") than the specified maximum size of " + maxResultSize, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_bitLengthNotMultipleOf8_and_bitLengthPlusOneEqualsBitlenDiv8_CHgx0() {
        BigInteger bigInt = new BigInteger("12345678901234567890", 16);
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_bitLengthMultipleOf8_startSrcInitializedTo1_vlQY3() {
        BigInteger bigInt = new BigInteger("123456789012345678", 16);
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_bitLengthNotMultipleOf8_and_bitLengthPlusOneNotEqualsBitlenDiv8_aniO9() {
        BigInteger bigInt = new BigInteger("1234567890123456789", 16);
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidOctet_ReturnsTrue_aYZH1_fid1() {
        byte octet = 10; // assuming 10 is a valid octet
        boolean result = Base64.isBase64(octet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_ThrowsIllegalArgumentException_WhenInputArrayTooBig_Udsr0_fid1() {
        byte[] binaryData = new byte[1024 * 1024]; // large array
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 1024; // small max result size
        try {
            Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().startsWith("Input array too big, the output array would be bigger ("));
            assertTrue(e.getMessage().endsWith(") than the specified maximum size of " + maxResultSize));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_switch2_SSiX5_vLgO0() {
        Base64 base64 = new Base64();
        org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context();
        context.modulus = 2;
        byte[] in = new byte[2];
        base64.encode(in, 0, 2, context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_eof_Bkwi0_NSOL0() {
        Base64 base64 = new Base64();
        org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context();
        context.eof = true;
        byte[] in = new byte[0];
        base64.encode(in, 0, 0, context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_switch1_NLUq4_xZVe0() {
        Base64 base64 = new Base64();
        org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context();
        context.modulus = 1;
        byte[] in = new byte[1];
        base64.encode(in, 0, 1, context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_b_lt_0_SbVc8_MpCM0() {
        Base64 base64 = new Base64();
        byte[] in = new byte[]{-1};
        org.apache.commons.codec.binary.BaseNCodec.Context context = new org.apache.commons.codec.binary.BaseNCodec.Context();
        base64.encode(in, 0, 1, context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_B_GreaterThanOrEqual0_And_B_LessThanDecodeTableLength_qTBv0_KJIh0_1() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
    }
}