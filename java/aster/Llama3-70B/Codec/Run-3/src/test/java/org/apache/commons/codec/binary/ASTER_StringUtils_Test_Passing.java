/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_PPEj0() throws Exception {
        String string = "Hello, World!";
        byte[] expectedBytes = string.getBytes(StandardCharsets.ISO_8859_1);
        byte[] actualBytes = StringUtils.getBytesIso8859_1(string);
        assertArrayEquals(expectedBytes, actualBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_QxCf0() throws Exception {
        byte[] bytes = "Hello, World!".getBytes();
        String result = StringUtils.newStringUtf8(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8Null_EDzk1() throws Exception {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf8(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_cyOM0_1() throws Exception {
        String string = "Hello World";
        byte[] result = StringUtils.getBytesUtf16(string);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_cyOM0_2() throws Exception {
        String string = "Hello World";
        byte[] result = StringUtils.getBytesUtf16(string);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_16), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Null_OXMx1() throws Exception {
        byte[] result = StringUtils.getBytesUtf16(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_hwvB0() throws Exception {
        String string = "Hello, World!";
        byte[] expected = string.getBytes(StandardCharsets.UTF_16LE);
        byte[] actual = StringUtils.getBytesUtf16Le(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_CydJ0() throws Exception {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_16LE);
        String result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_yfrS0() throws Exception {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_16);
        String result = StringUtils.newStringUtf16(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_withNullBytes_returnsNull_buVC0() throws Exception {
        byte[] bytes = null;
        String charsetName = "UTF-8";
        assertNull(StringUtils.newString(bytes, charsetName));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_withValidBytesAndCharset_returnsNewString_vnbr1() throws Exception {
        byte[] bytes = "Hello, World!".getBytes();
        String charsetName = "UTF-8";
        String result = StringUtils.newString(bytes, charsetName);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_raRp0() throws Exception {
        String string = "Hello, World!";
        byte[] expected = string.getBytes(StandardCharsets.UTF_16BE);
        byte[] actual = StringUtils.getBytesUtf16Be(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_uLNi0() throws Exception {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.ISO_8859_1);
        String result = StringUtils.newStringIso8859_1(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_rWic0_1() throws Exception {
        String string = "Hello World";
        ByteBuffer byteBuffer = StringUtils.getByteBufferUtf8(string);
        assertNotNull(byteBuffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_rWic0_2() throws Exception {
        String string = "Hello World";
        ByteBuffer byteBuffer = StringUtils.getByteBufferUtf8(string);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_8), byteBuffer.array());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8Null_RFUz1() throws Exception {
        ByteBuffer byteBuffer = StringUtils.getByteBufferUtf8(null);
        assertNull(byteBuffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_withNullString_mPdO0() throws Exception {
        byte[] result = StringUtils.getBytesUnchecked(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_withValidString_PGCY1_1() throws Exception {
        byte[] result = StringUtils.getBytesUnchecked("Hello, World!", "UTF-8");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_withValidString_PGCY1_2() throws Exception {
        byte[] result = StringUtils.getBytesUnchecked("Hello, World!", "UTF-8");
        assertArrayEquals("Hello, World!".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_clKG0() throws Exception {
        String string = "Hello, World!";
        byte[] expectedBytes = string.getBytes(StandardCharsets.US_ASCII);
        byte[] actualBytes = StringUtils.getBytesUsAscii(string);
        assertArrayEquals(expectedBytes, actualBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_rPzr0() throws Exception {
        String string = "Hello, World!";
        byte[] expected = string.getBytes(StandardCharsets.UTF_8);
        byte[] actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Be_MLeD0() throws Exception {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_16BE);
        String result = StringUtils.newStringUtf16Be(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_HJDi0() throws Exception {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.US_ASCII);
        String result = StringUtils.newStringUsAscii(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_qBWa0() throws Exception {
        CharSequence cs1 = "Hello";
        assertTrue(StringUtils.equals(cs1, cs1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObjects_SameValue_IPBh1() throws Exception {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = new StringBuilder("Hello");
        assertTrue(StringUtils.equals(cs1, cs2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullFirstArgument_KOEe2() throws Exception {
        CharSequence cs2 = "Hello";
        assertFalse(StringUtils.equals(null, cs2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullSecondArgument_FWjr3() throws Exception {
        CharSequence cs1 = "Hello";
        assertFalse(StringUtils.equals(cs1, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_BothNull_eygI4() throws Exception {
        assertTrue(StringUtils.equals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLength_viaK5() throws Exception {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = "HelloWorld";
        assertFalse(StringUtils.equals(cs1, cs2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentValues_IGTk6() throws Exception {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = "Goodbye";
        assertFalse(StringUtils.equals(cs1, cs2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_EmptyStrings_teni7() throws Exception {
        CharSequence cs1 = "";
        CharSequence cs2 = "";
        assertTrue(StringUtils.equals(cs1, cs2));
    }
}