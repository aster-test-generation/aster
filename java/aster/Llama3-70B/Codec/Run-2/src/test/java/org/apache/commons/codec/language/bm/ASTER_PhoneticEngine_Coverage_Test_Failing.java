/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import java.util.Collections;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PhoneticEngine_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_d_apostrophe_ijlF0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "d'John";
        String expected = "(john)-(djohhn)";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_prefix_ziSy1() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "de John";
        String expected = "(john)-(dejohn)";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_sephardic_kTNC2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
        String input = "John'O Neil";
        String expected = "oneil";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ashkenazi_tZQp3() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 10);
        String input = "John O Neil";
        String expected = "john-oneil";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_generic_gmjo4() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "John O Neil";
        String expected = "john-o-neil";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_single_word_VTvv6() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "John";
        String expected = "john";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_multiple_words_Kjdw7() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "John O Neil";
        String expected = "john-oneil";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_empty_input_avbV8() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "";
        String expected = "";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_d_apostrophe_sephardic_HKPg10() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
        String input = "d'John";
        String expected = "john";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_prefix_sephardic_otaR11() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
        String input = "de John";
        String expected = "john";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_d_apostrophe_ashkenazi_yABD12() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 10);
        String input = "d'John";
        String expected = "john";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }
@Test
public void testEncode_null_input_iZKn9_QqKw1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
    String input = null;
    try {
        engine.encode(input, LanguageSet.from(Collections.singleton("en")));
        assert false;
    } catch (NullPointerException e) {
    }
}
}