/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XXHash32_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_bCte0_PuuK0() {
    XXHash32 xxHash32 = new XXHash32(1);
    byte[] buffer = new byte[1];
    buffer[0] = 10;
    xxHash32.update(buffer, 0, 1);
    assertEquals(10, (int) xxHash32.getValue() & 0xff);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_withZeroLength_goOT0_knDg0() {
    XXHash32 xxHash32 = new XXHash32(1);
    xxHash32.update(new byte[0], 0, 0);
    assertEquals(0, xxHash32.getValue() & 0xffffffff);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_withPartialBuffer_JSUD4_lCfD0_1() {
    XXHash32 xxHash32 = new XXHash32();
    int BUF_SIZE = 1024; 
    byte[] b = new byte[BUF_SIZE - 1];
    xxHash32.update(b, 0, b.length); 
    assertEquals(0, xxHash32.getValue()); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_withBufferFull_egJS2_kmtf0() {
    XXHash32 xxHash32 = new XXHash32();
    int BUF_SIZE = 16; 
    byte[] b = new byte[BUF_SIZE * 2];
    xxHash32.update(b, 0, BUF_SIZE * 2); // update xxHash32 with the buffer
    long value = xxHash32.getValue(); 
    assertEquals(0, value); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_withBufferFull_egJS2_kmtf0_fid2() {
    XXHash32 xxHash32 = new XXHash32();
    int BUF_SIZE = 16; 
    byte[] b = new byte[BUF_SIZE * 2];
    xxHash32.update(b,749276114, BUF_SIZE * 2); // update xxHash32 with the buffer
    long value = xxHash32.getValue(); 
    assertEquals(0, value); 
}
}