/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_StringUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIso8859_1_PDoT0_1() {
    String string = "Hello World";
    byte[] result = StringUtils.getBytesIso8859_1(string);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIso8859_1_PDoT0_2() {
    String string = "Hello World";
    byte[] result = StringUtils.getBytesIso8859_1(string);
    assertArrayEquals(string.getBytes(StandardCharsets.ISO_8859_1), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIso8859_1Null_sBmG1() {
    byte[] result = StringUtils.getBytesIso8859_1(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf8_sEUn0() {
    byte[] bytes = "Hello, World!".getBytes();
    String result = StringUtils.newStringUtf8(bytes);
    assertEquals("Hello, World!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf8Null_GgWi1() {
    byte[] bytes = null;
    String result = StringUtils.newStringUtf8(bytes);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16Le_COZs0_1() {
    String string = "Hello World";
    byte[] result = StringUtils.getBytesUtf16Le(string);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16Le_COZs0_2() {
    String string = "Hello World";
    byte[] result = StringUtils.getBytesUtf16Le(string);
    assertArrayEquals(string.getBytes(StandardCharsets.UTF_16LE), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteBufferUtf8_FOWP0_1() {
    ByteBuffer result = StringUtils.getByteBufferUtf8("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteBufferUtf8_FOWP0_2() {
    ByteBuffer result = StringUtils.getByteBufferUtf8("Hello, World!");
    assertEquals("Hello, World!", new String(result.array(), StandardCharsets.UTF_8));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteBufferUtf8Null_pDOC1() {
    ByteBuffer result = StringUtils.getByteBufferUtf8(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16_rgwc0_1() {
    String string = "Hello, World!";
    byte[] result = StringUtils.getBytesUtf16(string);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16_rgwc0_2() {
    String string = "Hello, World!";
    byte[] result = StringUtils.getBytesUtf16(string);
    assertArrayEquals(string.getBytes(StandardCharsets.UTF_16), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringIso8859_1_GtWB0_1() {
    byte[] bytes = "Hello, World!".getBytes();
    String result = StringUtils.newStringIso8859_1(bytes);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringIso8859_1_GtWB0_2() {
    byte[] bytes = "Hello, World!".getBytes();
    String result = StringUtils.newStringIso8859_1(bytes);
    assertEquals("Hello, World!", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringIso8859_1Null_GUbK1() {
    byte[] bytes = null;
    String result = StringUtils.newStringIso8859_1(bytes);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf16_oGsH0_1() {
    byte[] bytes = new byte[] { 0, 1, 2, 3 };
    String result = StringUtils.newStringUtf16(bytes);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf8_RRvf0() {
    String string = "Hello, World!";
    byte[] expected = string.getBytes(StandardCharsets.UTF_8);
    byte[] actual = StringUtils.getBytesUtf8(string);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf8Null_hamN1() {
    byte[] actual = StringUtils.getBytesUtf8(null);
    assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16Be_kbyf0_1() {
    String string = "Hello";
    byte[] result = StringUtils.getBytesUtf16Be(string);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUsAscii_aWFW0() {
    byte[] bytes = new byte[] { 65, 66, 67 };
    String result = StringUtils.newStringUsAscii(bytes);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUsAsciiNull_PgWW1() {
    byte[] bytes = null;
    String result = StringUtils.newStringUsAscii(bytes);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf16Be_yoxz0_1() {
    byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_16BE);
    String result = StringUtils.newStringUtf16Be(bytes);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf16Be_yoxz0_2() {
    byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_16BE);
    String result = StringUtils.newStringUtf16Be(bytes);
    assertEquals("Hello World", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUnchecked_rgHs0() {
    String string = "Hello";
    String charsetName = "UTF-8";
    byte[] result = StringUtils.getBytesUnchecked(string, charsetName);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUsAscii_ZMCX0() {
    String string = "Hello";
    byte[] result = StringUtils.getBytesUsAscii(string);
    byte[] expected = string.getBytes(StandardCharsets.US_ASCII);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUsAsciiNull_tpyJ1() {
    String string = null;
    byte[] result = StringUtils.getBytesUsAscii(string);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewString_withNullBytes_CwUF0() {
    byte[] bytes = null;
    String charsetName = "UTF-8";
    assertNull(StringUtils.newString(bytes, charsetName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewString_withValidBytes_OeIP1() {
    byte[] bytes = "Hello World".getBytes();
    String charsetName = "UTF-8";
    assertEquals("Hello World", StringUtils.newString(bytes, charsetName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_TRbO0() {
    CharSequence cs1 = "Hello";
    assertTrue(StringUtils.equals(cs1, cs1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_SameValue_MIIu1() {
    CharSequence cs1 = "Hello";
    CharSequence cs2 = new StringBuilder("Hello");
    assertTrue(StringUtils.equals(cs1, cs2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullFirstArgument_GsTJ2() {
    CharSequence cs2 = "Hello";
    assertFalse(StringUtils.equals(null, cs2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullSecondArgument_uZid3() {
    CharSequence cs1 = "Hello";
    assertFalse(StringUtils.equals(cs1, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_BothNull_rZbf4() {
    assertTrue(StringUtils.equals(null, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLength_Licr5() {
    CharSequence cs1 = "Hello";
    CharSequence cs2 = "HelloWorld";
    assertFalse(StringUtils.equals(cs1, cs2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentValue_RXqR6() {
    CharSequence cs1 = "Hello";
    CharSequence cs2 = "Goodbye";
    assertFalse(StringUtils.equals(cs1, cs2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_EmptyStrings_KKWQ7() {
    CharSequence cs1 = "";
    CharSequence cs2 = "";
    assertTrue(StringUtils.equals(cs1, cs2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf16Le_ppUT0_fid1() {
    byte[] bytes = new byte[] {0x00, 0x68, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x6f};
    String result = StringUtils.newStringUtf16Le(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIso8859_1_PDoT0() {
    String string = "Hello World";
    byte[] result = StringUtils.getBytesIso8859_1(string);
    assertNotNull(result);
    assertArrayEquals(string.getBytes(StandardCharsets.ISO_8859_1), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16Le_COZs0() {
    String string = "Hello World";
    byte[] result = StringUtils.getBytesUtf16Le(string);
    assertNotNull(result);
    assertArrayEquals(string.getBytes(StandardCharsets.UTF_16LE), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteBufferUtf8_FOWP0() {
    ByteBuffer result = StringUtils.getByteBufferUtf8("Hello, World!");
    assertNotNull(result);
    assertEquals("Hello, World!", new String(result.array(), StandardCharsets.UTF_8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16_rgwc0() {
    String string = "Hello, World!";
    byte[] result = StringUtils.getBytesUtf16(string);
    assertNotNull(result);
    assertArrayEquals(string.getBytes(StandardCharsets.UTF_16), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringIso8859_1_GtWB0() {
    byte[] bytes = "Hello, World!".getBytes();
    String result = StringUtils.newStringIso8859_1(bytes);
    assertNotNull(result);
    assertEquals("Hello, World!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf16Be_yoxz0() {
    byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_16BE);
    String result = StringUtils.newStringUtf16Be(bytes);
    assertNotNull(result);
    assertEquals("Hello World", result);
}
}