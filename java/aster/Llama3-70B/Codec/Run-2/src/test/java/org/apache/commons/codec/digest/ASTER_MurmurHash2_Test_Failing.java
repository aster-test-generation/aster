/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash2_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_bHTW0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    int length = data.length;
    long result = MurmurHash2.hash64(data, length);
    assertEquals(141934874357655L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_ZEQg0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    int length = data.length;
    int result = MurmurHash2.hash32(data, length);
    assertEquals(2147483647, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_Xici0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    long result = MurmurHash2.hash64(data, data.length, 1);
    assertEquals(1229782938247303441L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_EmptyArray_xRxl1_fid1() {
    byte[] data = new byte[0];
    long result = MurmurHash2.hash64(data, data.length, 1);
    assertEquals(8L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_1_uULE0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    int length = 8;
    int seed = 123;
    int result = MurmurHash2.hash32(data, length, seed);
    assertEquals(2147483647, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_2_QUNJ1_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7};
    int length = 7;
    int seed = 456;
    int result = MurmurHash2.hash32(data, length, seed);
    assertEquals(-2147483648, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_qaay0_fid1() {
    String text = "Hello, World!";
    byte[] data = text.getBytes();
    int length = data.length;
    int result = MurmurHash2.hash32(data, length, 0);
    assertEquals(1257447041, result);
}
}