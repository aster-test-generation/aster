/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base32_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet4_ckuE3() {
    Base32 base32 = new Base32(10, new byte[] {45, 46}, true, (byte) 10, CodecPolicy.STRICT);
    assertFalse(base32.isInAlphabet((byte) 100));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet1_geCL0_fid2() {
    Base32 base32 = new Base32();
    assertTrue(base32.isInAlphabet((byte) 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet3_fSaP2_fid2() {
    Base32 base32 = new Base32(10, new byte[] {10, 20});
    assertTrue(base32.isInAlphabet((byte) 20));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet4_ckuE3_fid2() {
    Base32 base32 = new Base32(10, new byte[] {10, 20}, true, (byte) 10, CodecPolicy.STRICT);
    assertFalse(base32.isInAlphabet((byte) 100));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator5_ERDl4_fid2() {
    Base32 base32 = new Base32(10);
    assertNull(base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode9_vxXP8_dbIj0_fid2() {
    Base32 base32 = new Base32(10, new byte[] {10, 20}, true, (byte) 10);
    org.apache.commons.codec.binary.Base32.Context context = new org.apache.commons.codec.binary.Base32.Context(); 
    byte[] input = new byte[10];
    base32.encode(input, 0, 10, context); 
    assertEquals(true, context.eof);
}
}