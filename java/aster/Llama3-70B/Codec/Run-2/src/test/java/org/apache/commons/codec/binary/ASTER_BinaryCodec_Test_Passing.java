/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BinaryCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_ndBP0() {
    byte[] raw = {65, 66, 67};
    String result = BinaryCodec.toAsciiString(raw);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmptyNullArray_gTjL0() {
    byte[] array = null;
    assertTrue(BinaryCodec.isEmpty(array));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmptyEmptyArray_PyRc1() {
    byte[] array = new byte[0];
    assertTrue(BinaryCodec.isEmpty(array));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmptyNonEmptyArray_ghNK2() {
    byte[] array = new byte[5];
    assertFalse(BinaryCodec.isEmpty(array));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_toByteArray_nullInput_wjQr0() {
    BinaryCodec binaryCodec = new BinaryCodec();
    byte[] result = binaryCodec.toByteArray(null);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_toByteArray_nonNullInput_YVam3() {
    BinaryCodec binaryCodec = new BinaryCodec();
    byte[] result = binaryCodec.toByteArray("Hello World");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAscii_EmptyArray_weFV0() {
    byte[] ascii = new byte[0];
    byte[] result = BinaryCodec.fromAscii(ascii);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAscii_SingleByte_hiLB1() {
    byte[] ascii = "00000001".getBytes();
    byte[] result = BinaryCodec.fromAscii(ascii);
    assertArrayEquals(new byte[]{1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAscii_MultipleBytes_VVLp2() {
    byte[] ascii = "0000000100000001".getBytes();
    byte[] result = BinaryCodec.fromAscii(ascii);
    assertArrayEquals(new byte[]{1, 1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAscii_AllOnes_nsmF3() {
    byte[] ascii = "11111111".getBytes();
    byte[] result = BinaryCodec.fromAscii(ascii);
    assertArrayEquals(new byte[]{-1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAscii_AllZeros_jvbx4() {
    byte[] ascii = "00000000".getBytes();
    byte[] result = BinaryCodec.fromAscii(ascii);
    assertArrayEquals(new byte[]{0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_NGXW0() {
    BinaryCodec codec = new BinaryCodec();
    byte[] result = (byte[]) codec.decode(null);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeByteArray_ibwV1() {
    BinaryCodec codec = new BinaryCodec();
    byte[] ascii = new byte[] {1, 2, 3};
    byte[] result = BinaryCodec.toAsciiBytes(ascii);
    assertEquals(ascii.length * 8, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAsciiEmpty_OptR1() {
    byte[] result = BinaryCodec.fromAscii(new char[0]);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAsciiSingleByte_AsOj2() {
    byte[] result = BinaryCodec.fromAscii(new char[] {'0', '0', '0', '0', '0', '0', '0', '0'});
    assertArrayEquals(new byte[] {0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAsciiMultipleBytes_jJev3() {
    byte[] result = BinaryCodec.fromAscii(new char[] {'1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0'});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAsciiAllOnes_neLc5() {
    byte[] result = BinaryCodec.fromAscii(new char[] {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'});
    assertArrayEquals(new byte[] {(byte) 0xFF, (byte) 0xFF}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiChars_EmptyArray_OfGu0() {
    byte[] raw = new byte[0];
    char[] expected = new char[0];
    assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiChars_SingleByte_AeWe1() {
    byte[] raw = new byte[] { 0x01 };
    char[] expected = new char[] { '0', '0', '0', '0', '0', '0', '0', '1' };
    assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiChars_MinByte_hhYh4() {
    byte[] raw = new byte[] { 0x00 };
    char[] expected = new char[] { '0', '0', '0', '0', '0', '0', '0', '0' };
    assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_EmptyArray_BVDW0() {
    byte[] raw = new byte[0];
    byte[] result = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_SingleByte_KzOZ1() {
    byte[] raw = new byte[] { 0x01 };
    byte[] result = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(new byte[] { '0', '0', '0', '0', '0', '0', '0', '1' }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_MultipleBytes_kYEH2() {
    byte[] raw = new byte[] { 0x01, 0x02, 0x04, 0x08 };
    byte[] result = BinaryCodec.toAsciiBytes(raw);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_MaxByte_JAxN3() {
    byte[] raw = new byte[] { (byte) 0xFF };
    byte[] result = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(new byte[] { '1', '1', '1', '1', '1', '1', '1', '1' }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_MinByte_juoq4() {
    byte[] raw = new byte[] { (byte) 0x00 };
    byte[] result = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(new byte[] { '0', '0', '0', '0', '0', '0', '0', '0' }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiChars_MaxByte_kOAW3_DJEE0() {
    byte[] raw = new byte[] { (byte) 0xFF };
    char[] expected = new char[] { '1', '1', '1', '1', '1', '1', '1', '1' };
    assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiNull_MvTK0_IqLH0() {
    byte[] result = BinaryCodec.toAsciiBytes(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeString_JnPL3_rzkV0() {
    BinaryCodec codec = new BinaryCodec();
    String ascii = "123";
    byte[] result = null;
    try {
        result = codec.toAsciiBytes(ascii.getBytes());
    } catch (Exception e) {
    }
    assertArrayEquals(new byte[] {49, 50, 51}, ascii.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ByteArray_PvMy0_KoQz0() {
    BinaryCodec codec = new BinaryCodec();
    byte[] raw = new byte[] {1, 2, 3};
    byte[] result = codec.toAsciiBytes(raw);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeCharArray_XmJB2_DrWm0() {
    BinaryCodec codec = new BinaryCodec();
    byte[] asciiBytes = new byte[] {'1', '0', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'};
    byte[] result = BinaryCodec.toAsciiBytes(new byte[] {(byte) 0x92, (byte) 0x91});
}
}