/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnixCrypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_jDzv0() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "password".getBytes();
    String result = UnixCrypt.crypt(original);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_uRTi0() {
    String original = "password";
    String salt = "salt";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_iJLk0() {
    String original = "password";
    String expected = UnixCrypt.crypt(original);
    assertNotNull(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptNullSalt_tooG0() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "original".getBytes();
    String result = UnixCrypt.crypt(original, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptInvalidSalt_BMBQ1() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "original".getBytes();
    try {
        UnixCrypt.crypt(original, "invalid");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptEmptyOriginal_bhhC2() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[0];
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptSingleByteOriginal_bmvz3() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "a".getBytes();
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptMultiByteOriginal_nFxC4() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "abcdefg".getBytes();
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptEmptySalt_TLlW6() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "original".getBytes();
    try {
        UnixCrypt.crypt(original, "");
        fail();
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptSingleCharSalt_iqGx7() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "original".getBytes();
    try {
        UnixCrypt.crypt(original, "A");
        fail();
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptValid_WGKK8() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "original".getBytes();
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertEquals(13, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptEmptyOriginal_Pafs2() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[0];
    String salt = "ab";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptSingleByteOriginal_narH3() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "a".getBytes();
    String salt = "ab";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptMultiByteOriginal_IsbQ4() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "abcdefg".getBytes();
    String salt = "ab";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptSingleCharSalt_qCXX7() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "original".getBytes();
    try {
        UnixCrypt.crypt(original, "a");
        fail();
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptValid_vsbg8() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "original".getBytes();
    String salt = "ab";
    String result = UnixCrypt.crypt(original, salt);
    assertEquals(13, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptNullSalt_BnCd0() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    String result = UnixCrypt.crypt(original, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptShortOriginal_FJGJ2() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] { 1, 2, 3 };
    String result = UnixCrypt.crypt(original, "ab");
    assertEquals(13, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptLongOriginal_EHtS3() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
    String result = UnixCrypt.crypt(original, "ab");
    assertEquals(13, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptEmptyOriginal_ebBP4() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] {};
    String result = UnixCrypt.crypt(original, "ab");
    assertEquals(13, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptEmptyOriginal_jqxp2() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[0];
    String salt = "salt";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptSingleByteOriginal_AzVL3() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "a".getBytes();
    String salt = "salt";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptMultiByteOriginal_aSeJ4() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "abcdefg".getBytes();
    String salt = "salt";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptTooLongOriginal_Jpdw7() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[9];
    Arrays.fill(original, (byte) 1);
    String salt = "salt";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptTooShortOriginal_ASrZ8() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[7];
    Arrays.fill(original, (byte) 1);
    String salt = "salt";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptEmptyOriginal_bGTJ2() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[0];
    String result = UnixCrypt.crypt(original, "AB");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptSingleCharOriginal_Thda3() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "a".getBytes();
    String result = UnixCrypt.crypt(original, "AB");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptMultiCharOriginal_IRBB4() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "abcdefg".getBytes();
    String result = UnixCrypt.crypt(original, "AB");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_wmDy8() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "original".getBytes();
    String result = UnixCrypt.crypt(original, "AB");
    assertEquals(13, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptValidSalt_zUSi2() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "original".getBytes();
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptShortOriginal_wuJK5() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "short".getBytes();
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptLongOriginal_YNHH6() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = "very long original string".getBytes();
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptNullSalt_QGIJ0() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    String result = UnixCrypt.crypt(original, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptInvalidSalt_NkLO1() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    try {
        UnixCrypt.crypt(original, "invalid");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptValidSalt_Xadn2() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptEmptyOriginal_YkxZ3() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] {};
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptNullOriginal_gyIR4() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = null;
    String salt = "AB";
    try {
        UnixCrypt.crypt(original, salt);
        fail();
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptLargeOriginal_zBeE5() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[1024];
    for (int i = 0; i < 1024; i++) {
        original[i] = (byte) i;
    }
    String salt = "AB";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptValidSalt_gIvu1() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    String salt = "ab";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptInvalidSalt_pxcl2() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    String salt = "abc";
    try {
        UnixCrypt.crypt(original, salt);
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptEmptyOriginal_JfFu3() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] {};
    String salt = "ab";
    String result = UnixCrypt.crypt(original, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptNullOriginal_GzZk4() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = null;
    String salt = "ab";
    try {
        UnixCrypt.crypt(original, salt);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_gWcj6_nyJR0() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] key = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    String salt = "AB";
    String result = unixCrypt.crypt(key, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptNullOriginal_HTdG5_lmzQ0() {
    try {
        UnixCrypt.crypt((byte[]) null, "salt");
        fail();
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptBodySchedule_hvWz5_zXmJ0() {
    UnixCrypt unixCrypt = new UnixCrypt();
    byte[] original = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    String salt = "ab";
    String result = unixCrypt.crypt(original, salt);
    assertNotNull(result);
}
}