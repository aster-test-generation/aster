/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sha2Crypt_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptDefaultSalt_VGhu2() {
        String result = Sha2Crypt.sha256Crypt("password".getBytes(), null);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSmallKey_PjXg3() {
        byte[] keyBytes = new byte[16];
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptLargeKey_cjNn4() {
        byte[] keyBytes = new byte[1024];
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSmallSalt_UpRT5() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(4);
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptLargeSalt_kaFm6() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(16);
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptBlocksize32_XpDy7() {
        byte[] keyBytes = new byte[32];
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptBlocksize64_BYYa8() {
        byte[] keyBytes = new byte[64];
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptKeyLenGreaterThanBlocksize_NOTV10() {
        byte[] keyBytes = new byte[128];
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }
@Test
public void testSha256CryptInvalidSalt_srlr1_RfDB0() {
    assertThrows(IllegalArgumentException.class, () -> Sha2Crypt.sha512Crypt("password".getBytes(), "invalidsalt"));
}
}