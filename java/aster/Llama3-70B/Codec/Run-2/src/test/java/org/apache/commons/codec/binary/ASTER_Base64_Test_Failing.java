/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.math.BigInteger;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base64_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_xskL0() {
    byte[] binaryData = {1, 2, 3};
    boolean isChunked = true;
    byte[] result = Base64.encodeBase64(binaryData, isChunked);
    assertArrayEquals(new byte[]{1, 2, 3, 61, 61, 61}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_GBXq0() {
    byte[] binaryData = "Hello, World!".getBytes();
    byte[] encodedData = Base64.encodeBase64(binaryData);
    assertArrayEquals(new byte[]{-17, -65, -67, 104, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33, 61, 61, 61, 61}, encodedData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeBase64_StYq0() {
    byte[] base64Data = "SGVsbG8gd29ybGQh".getBytes();
    byte[] decodedData = Base64.decodeBase64(base64Data);
    assertArrayEquals(new byte[]{-17, -65, -67, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100}, decodedData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToIntegerBytes1_VSpL0() {
    BigInteger bigInt = new BigInteger("1234567890");
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertArrayEquals(new byte[] {49, 46, 53, 50}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToIntegerBytes2_rBoq1() {
    BigInteger bigInt = new BigInteger("12345678901234567890");
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertArrayEquals(new byte[] {21, 64, 35, 18, 0, 0, 0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToIntegerBytes4_zPvE3() {
    BigInteger bigInt = new BigInteger("123456789012345678901234567890");
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertArrayEquals(new byte[] {-16, -113, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode9_FSRy8_OqUe0() {
    Base64 base64 = new Base64(76, new byte[] {13, 10});
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[3];
    base64.decode(in, 0,0, context); 
    assertEquals(3, context.modulus);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeInteger_tqzL0() {
    byte[] pArray = "SGVsbG8=".getBytes();
    BigInteger result = Base64.decodeInteger(pArray);
    assertEquals(BigInteger.valueOf(169958), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafeString_Pxny0_fid2() {
    byte[] binaryData = "Hello, World!".getBytes();
    Base64 base64 = new Base64(true);
    String result = Base64.encodeBase64URLSafeString(binaryData);
    String expected = "SGVsbG8sIFdvcmxkIQ==";
    assertArrayEquals(expected.getBytes(), result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_xskL0_fid2() {
    byte[] binaryData = {1, 2, 3};
    boolean isChunked = true;
    byte[] result = Base64.encodeBase64(binaryData, isChunked);
    assertArrayEquals(new byte[]{}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_GBXq0_fid2() {
    byte[] binaryData = "Hello, World!".getBytes();
    byte[] encodedData = Base64.encodeBase64(binaryData);
    assertArrayEquals(new byte[]{-17, -65, -67, 104, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, encodedData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeBase64_StYq0_fid2() {
    byte[] base64Data = "SGVsbG8gd29ybGQh".getBytes();
    byte[] decodedData = Base64.decodeBase64(base64Data);
    assertArrayEquals(new byte[]{-17, -65, -67, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33}, decodedData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_QGkB0_fid2() {
    byte[] arrayOctet = new byte[] {1, 2, 3, 4};
    boolean result = Base64.isArrayByteBase64(arrayOctet);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet1_TarU0_fid2() {
    Base64 base64 = new Base64();
    assertTrue(base64.isInAlphabet((byte) 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet3_Hgnz2_fid2() {
    Base64 base64 = new Base64(10, new byte[] {13, 10});
    assertTrue(base64.isInAlphabet((byte) 20));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToIntegerBytes1_VSpL0_fid2() {
    BigInteger bigInt = new BigInteger("1234567890");
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertArrayEquals(new byte[] {0, 0, 0, 0, 0, 0, 21, 64, 35, 18}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToIntegerBytes2_rBoq1_fid2() {
    BigInteger bigInt = new BigInteger("12345678901234567890");
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertArrayEquals(new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 64, 35, 18, 0, 0, 0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToIntegerBytes3_inHX2_fid2() {
    BigInteger bigInt = new BigInteger("1");
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertArrayEquals(new byte[] {0, 0, 0, 0, 0, 0, 0, 1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToIntegerBytes4_zPvE3_fid2() {
    BigInteger bigInt = new BigInteger("123456789012345678901234567890");
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertArrayEquals(new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 64, 35, 18, 0, 0, 0, 0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator3_mHcq2_fid2() {
    Base64 base64 = new Base64(true);
    assertNull(base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator4_nZqR3_fid2() {
    Base64 base64 = new Base64(10);
    assertNull(base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode9_FSRy8_OqUe0_fid2() {
    Base64 base64 = new Base64(76, new byte[] {13, 10});
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[3];
    base64.decode(in, 0, 3, context); 
    assertEquals(3, context.modulus);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_xXeZ2_inKw0_fid2() {
    Base64 base64 = new Base64(76, new byte[] {13, 10});
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[0];
    base64.decode(in, 0, 0, context); 
    assertTrue(context.eof);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode12_RvcL11_ldYi0() {
    Base64 base64 = new Base64(76, new byte[] {13, 10}, true, CodecPolicy.LENIENT);
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[6];
    base64.decode(in, 0, 6, context); 
    assertEquals(2, context.modulus);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode11_PFSI10_jpsI0_fid2() {
    Base64 base64 = new Base64(76, new byte[] {13, 10}, true);
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[5];
    base64.decode(in, 0, 5, context); 
    assertEquals(1, context.modulus);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode8_HgoO7_CaUR0_fid2() {
    Base64 base64 = new Base64();
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context();
    byte[] input = new byte[2];
    input[0] = (byte) 0x40; // a valid base64 character
    input[1] = (byte) 0x00; // invalid base64 character
    base64.decode(input, 0, 2, context);
    assertTrue(context.eof);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode10_bsnn9_neJC0_fid2() {
    Base64 base64 = new Base64();
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context();
    byte[] input = new byte[4];
    input[0] = (byte) 0x40; // a valid base64 character
    input[1] = (byte) 0x40; // a valid base64 character
    input[2] = (byte) 0x40; // a valid base64 character
    input[3] = (byte) 0x00; // invalid base64 character
    base64.decode(input, 0, 4, context);
    assertTrue(context.eof);
}
}