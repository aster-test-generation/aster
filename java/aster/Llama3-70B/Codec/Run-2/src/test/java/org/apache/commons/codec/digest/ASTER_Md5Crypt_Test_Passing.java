/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Md5Crypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testApr1Crypt_xatp0() {
    Md5Crypt md5Crypt = new Md5Crypt();
    byte[] keyBytes = "password".getBytes();
    String result = Md5Crypt.apr1Crypt(keyBytes);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testApr1Crypt_fggR0() {
    String result = Md5Crypt.apr1Crypt("password");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt_cPMD0() {
    Md5Crypt md5Crypt = new Md5Crypt();
    byte[] keyBytes = "key".getBytes();
    String salt = "$1$12345678";
    String prefix = "$1$";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt_iiZl0() {
    Md5Crypt md5Crypt = new Md5Crypt();
    byte[] keyBytes = "key".getBytes();
    String result = Md5Crypt.md5Crypt(keyBytes);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt_NVtp0() {
    Md5Crypt md5Crypt = new Md5Crypt();
    byte[] keyBytes = "key".getBytes();
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, random);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testApr1Crypt_wJfR0() {
    Md5Crypt md5Crypt = new Md5Crypt();
    byte[] keyBytes = "password".getBytes();
    Random random = new Random();
    String result = Md5Crypt.apr1Crypt(keyBytes, random);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testApr1Crypt_NaiR0() {
    Md5Crypt md5Crypt = new Md5Crypt();
    String result = Md5Crypt.apr1Crypt("keyBytes", "salt");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testApr1CryptNullSalt_wpDU0() {
    byte[] keyBytes = "password".getBytes();
    String salt = null;
    String result = Md5Crypt.apr1Crypt(keyBytes, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testApr1CryptValidSalt_fulP1() {
    byte[] keyBytes = "password".getBytes();
    String salt = "salt";
    String result = Md5Crypt.apr1Crypt(keyBytes, salt);
    assertEquals("$apr1$salt", result.substring(0, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testApr1CryptInvalidSalt_PqSX2() {
    byte[] keyBytes = "password".getBytes();
    String salt = "invalid$salt";
    String result = Md5Crypt.apr1Crypt(keyBytes, salt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt1_oBPQ0() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = null;
    String prefix = "$1$";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt2_aseW1() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "$1$12345678";
    String prefix = "$1$";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt3_ErZe2() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = null;
    String prefix = "$1$salt";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt5_kgQi4() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = null;
    String prefix = "$1$";
    Random random = null;
    try {
        Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt6_jdJH5() {
    byte[] keyBytes = null;
    String salt = "salt";
    String prefix = "$1$";
    Random random = new Random();
    try {
        Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt7_KvSg6() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "";
    String prefix = "$1$";
    Random random = new Random();
    try {
        Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt10_lKIb9() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = null;
    String prefix = "$1$";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertTrue(result.startsWith(prefix));
}
}