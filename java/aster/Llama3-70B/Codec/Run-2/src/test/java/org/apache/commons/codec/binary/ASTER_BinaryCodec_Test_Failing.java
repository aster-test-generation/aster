/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BinaryCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_AXpS0() {
    BinaryCodec binaryCodec = new BinaryCodec();
    byte[] raw = new byte[] {1, 2, 3};
    byte[] expected = new byte[] {49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 49, 50, 51, 51, 50, 50, 51, 51, 51, 51, 50, 50};
    byte[] actual = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_YCzA0() {
    BinaryCodec binaryCodec = new BinaryCodec();
    byte[] ascii = "0100100001100101011011000110110001101111".getBytes();
    byte[] result = binaryCodec.toAsciiBytes("Hello, World!".getBytes());
    assertEquals("0100100001100101011011000110110001101111", new String(result));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiChars_MultipleBytes_MWOI2() {
    byte[] raw = new byte[] { 0x01, 0x02, 0x04, 0x08 };
    char[] expected = new char[] { '1', '1', '1', '1', '1', '1', '1', '1', 
                                   '1', '1', '1', '1', '1', '1', '1', '1', 
                                   '1', '1', '1', '1', '1', '1', '1', '1', 
                                   '1', '1', '1', '1', '1', '1', '1', '1' };
    assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAsciiMixedBytes_FZGd4_egaY0() {
    byte[] result = BinaryCodec.fromAscii(new char[] {'1', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1'});
    assertArrayEquals(new byte[] {(byte)0x0F, (byte)0xF0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_ndBP0_fid1() {
    byte[] raw = {65, 66, 67};
    String result = BinaryCodec.toAsciiString(raw);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_AXpS0_fid1() {
    BinaryCodec binaryCodec = new BinaryCodec();
    byte[] raw = new byte[] {1, 2, 3};
    byte[] expected = new byte[] {49, 50, 51};
    byte[] actual = binaryCodec.encode(raw);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_YCzA0_fid1() {
    BinaryCodec binaryCodec = new BinaryCodec();
    byte[] ascii = "Hello, World!".getBytes();
    byte[] result = binaryCodec.decode(ascii);
    assertArrayEquals(new byte[] { 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeByteArray_ibwV1_fid1() {
    BinaryCodec codec = new BinaryCodec();
    byte[] ascii = new byte[] {1, 2, 3};
    byte[] result = (byte[]) codec.decode(ascii);
    assertArrayEquals(ascii, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAsciiMultipleBytes_jJev3_fid1() {
    byte[] result = BinaryCodec.fromAscii(new char[] {'1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0'});
    assertArrayEquals(new byte[] {0x55, 0x55}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiChars_MultipleBytes_MWOI2_fid1() {
    byte[] raw = new byte[] { 0x01, 0x02, 0x04, 0x08 };
    char[] expected = new char[] { '0', '0', '0', '0', '0', '0', '0', '1', 
                                   '0', '0', '0', '0', '0', '0', '1', '0', 
                                   '0', '0', '0', '0', '1', '0', '0', '0', 
                                   '0', '0', '0', '1', '0', '0', '0', '0' };
    assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_MultipleBytes_kYEH2_fid1() {
    byte[] raw = new byte[] { 0x01, 0x02, 0x04, 0x08 };
    byte[] result = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(new byte[] { '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0' }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiNull_MvTK0_IqLH0_fid3() {
    byte[] result = BinaryCodec.toAsciiBytes(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAsciiMixedBytes_FZGd4_egaY0_fid3() {
    byte[] result = BinaryCodec.fromAscii(new char[] {'1', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1'});
    assertArrayEquals(new byte[] {(byte)0xCC, (byte)0x0F}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ByteArray_PvMy0_KoQz0_fid3() {
    BinaryCodec codec = new BinaryCodec();
    byte[] raw = new byte[] {1, 2, 3};
    byte[] result = codec.toAsciiBytes(raw);
    assertArrayEquals(new byte[] {'0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1'}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeCharArray_XmJB2_DrWm0_fid3() {
    BinaryCodec codec = new BinaryCodec();
    byte[] asciiBytes = new byte[] {'1', '0', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'};
    byte[] result = BinaryCodec.toAsciiBytes(new byte[] {(byte) 0x92, (byte) 0x91});
    assertArrayEquals(new byte[] {(byte) 0x92, (byte) 0x91}, result);
}
}