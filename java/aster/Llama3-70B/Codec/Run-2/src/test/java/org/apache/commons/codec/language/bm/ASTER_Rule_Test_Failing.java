/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Rule_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_dlqs0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.EXACT;
    String lang = "en";
    LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList(lang)));
    List<Rule> expected =Rule.getInstance(nameType, rt, languageSet);
    List<Rule> actual = Rule.getInstance(nameType, rt, lang);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_BnjF0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.EXACT;
    String lang = "en";
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, lang);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Approx_GenericLanguageSet_xwJP0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = LanguageSet.from(Collections.singleton("Generic"));
    List<Rule> result = Rule.getInstance(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Generic_Exact_EmptyLanguageSet_wusr1() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    LanguageSet langs = LanguageSet.from(Collections.emptySet());
    List<Rule> result = Rule.getInstance(nameType, rt, langs);
    assertTrue(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Sephardic_Rules_SingletonLanguageSet_Nzqg2() {
    NameType nameType = NameType.SEPHARDIC;
    RuleType rt = RuleType.RULES;
    LanguageSet langs = LanguageSet.from(Collections.singleton("Hebrew"));
    List<Rule> result = Rule.getInstance(nameType, rt, langs);
    assertFalse(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Sephardic_Rules_EmptyLanguageSet_miQD5() {
    NameType nameType = NameType.SEPHARDIC;
    RuleType rt = RuleType.RULES;
    LanguageSet langs = LanguageSet.from(Collections.emptySet());
    List<Rule> result = Rule.getInstance(nameType, rt, langs);
    assertTrue(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Approx_LanguageSetWithOneLanguage_cmMZ6() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = LanguageSet.from(Collections.singleton("Yiddish"));
    List<Rule> result = Rule.getInstance(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Approx_LanguageSetWithNull_SFSB9() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = null;
    List<Rule> result = Rule.getInstance(nameType, rt, langs);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Singleton_yiru0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Ashkenazi_Approx_mqOd3() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertEquals(1, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Generic_Exact_CSto4() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertEquals(1, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Sephardic_Rules_CRyZ5() {
    NameType nameType = NameType.SEPHARDIC;
    RuleType rt = RuleType.RULES;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertEquals(1, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Null_OpEq1_uOPJ0() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.RULES;
    String lang = "fr";
    LanguageSet langs = LanguageSet.from(Collections.singleton(lang));
    Rule.getInstanceMap(nameType, rt, langs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NotSingleton_hhsQ1_QiIk0() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1")); // singleton can only hold one element
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_dlqs0_fid2() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.EXACT;
    String lang = "en";
    LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList(lang)));
    Map<String, List<Rule>> expected = Rule.getInstanceMap(nameType, rt, languageSet);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(nameType, rt, languageSet);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_BnjF0_fid2() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.EXACT;
    LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Approx_GenericLanguageSet_xwJP0_fid2() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = LanguageSet.from(Collections.singleton("Generic"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Sephardic_Rules_SingletonLanguageSet_Nzqg2_fid2() {
    NameType nameType = NameType.SEPHARDIC;
    RuleType rt = RuleType.RULES;
    LanguageSet langs = LanguageSet.from(Collections.singleton("Hebrew"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertFalse(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Approx_LanguageSetWithOneLanguage_cmMZ6_fid2() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = LanguageSet.from(Collections.singleton("Yiddish"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Approx_LanguageSetWithNull_SFSB9_fid2() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = null;
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Singleton_yiru0_fid2() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertTrue(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Generic_Exact_CSto4_fid2() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Sephardic_Rules_CRyZ5_fid2() {
    NameType nameType = NameType.SEPHARDIC;
    RuleType rt = RuleType.RULES;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NotSingleton_hhsQ1_QiIk0_fid2() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1")); 
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNull(result);
}
}