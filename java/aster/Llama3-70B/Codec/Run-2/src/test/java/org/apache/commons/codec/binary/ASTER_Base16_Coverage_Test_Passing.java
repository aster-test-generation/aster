/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base16_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_BufferAllocation_nisd4_baps0() {
    Base16 base16 = new Base16();
    org.apache.commons.codec.binary.BaseNCodec.Context context = new org.apache.commons.codec.binary.BaseNCodec.Context();
    byte[] data = new byte[10];
    base16.encode(data, 0, 10, context);
    assertNotNull(context.buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ContextPosIncrement_Bxhl14_sptS0() {
    Base16 base16 = new Base16();
    org.apache.commons.codec.binary.BaseNCodec.Context context = new org.apache.commons.codec.binary.BaseNCodec.Context();
    byte[] data = new byte[] {1, 2};
    base16.encode(data, 0, 2, context);
    assertEquals(4, context.pos);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_LengthEqualsDataLength_xDwM7_cumL0() {
    Base16 base16 = new Base16();
    byte[] data = new byte[10];
    byte[] encodedData = base16.encode(data);
    assertNotNull(encodedData);
}
}