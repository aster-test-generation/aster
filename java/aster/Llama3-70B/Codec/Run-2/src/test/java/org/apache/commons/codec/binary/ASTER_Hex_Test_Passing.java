/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.DecoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Hex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_sqbh0() {
    Hex hex = new Hex();
    byte[] data = {1, 2, 3, 4, 5};
    int dataOffset = 0;
    int dataLen = 5;
    boolean toLowerCase = true;
    char[] result = Hex.encodeHex(data, dataOffset, dataLen, toLowerCase);
    char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_xwYT0() {
    Hex hex = new Hex();
    byte[] data = {1, 2, 3, 4, 5};
    char[] toDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
    char[] actual = Hex.encodeHex(data, toDigits);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_aCxS0() {
    ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
    String result = Hex.encodeHexString(data, true);
    assertEquals("48656c6c6f2c20576f726c6421", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_LdDc0() {
    Hex hex = new Hex();
    byte[] data = {1, 2, 3};
    char[] result = Hex.encodeHex(data, true);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_rDKL0() {
    ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
    char[] result = Hex.encodeHex(data, true);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_tIOX0() {
    Hex hex = new Hex();
    byte[] data = "Hello, World!".getBytes();
    char[] result = Hex.encodeHex(data);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_qtcg0_1() {
    Hex hex = new Hex();
    byte[] data = {1, 2, 3, 4, 5};
    String result = Hex.encodeHexString(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_qtcg0_2() {
    Hex hex = new Hex();
    byte[] data = {1, 2, 3, 4, 5};
    String result = Hex.encodeHexString(data);
    assertEquals("0102030405", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ByteBuffer_tYPk1() {
    Hex hex = new Hex();
    ByteBuffer byteBuffer = ByteBuffer.wrap("Hello World".getBytes());
    Object result = hex.encode(byteBuffer);
    assertArrayEquals("48656c6c6f20576f726c64".getBytes(), (byte[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_byteArray_kXKZ2() {
    Hex hex = new Hex(Charset.forName("UTF-8"));
    byte[] byteArray = "Hello World".getBytes();
    Object result = hex.encode(byteArray);
    assertArrayEquals("48656c6c6f20576f726c64".getBytes(), (byte[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withCharset_dKcJ0() {
    Hex hex = new Hex(StandardCharsets.UTF_8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_withCharsetName_nzdL1() {
    Hex hex = new Hex("UTF-8");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_EMNF0() {
    ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
    String result = Hex.encodeHexString(data);
    assertEquals("48656c6c6f2c20576f726c6421", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_DjBr0() {
    Hex hex = new Hex();
    ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
    char[] result = Hex.encodeHex(data);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset1_EGWs0() {
    Hex hex = new Hex(StandardCharsets.UTF_8);
    assertEquals(StandardCharsets.UTF_8, hex.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset2_eKHb1() {
    Hex hex = new Hex("UTF-8");
    assertEquals(Charset.forName("UTF-8"), hex.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset3_JzWO2() {
    Hex hex = new Hex();
    assertEquals("UTF-8", hex.getCharset().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_OYwA0() {
    Hex hex = new Hex();
    ByteBuffer array = ByteBuffer.wrap("Hello, World!".getBytes());
    byte[] result = hex.encode(array);
    assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_Ygau0() {
    Hex hex = new Hex();
    byte[] data = {1, 2, 3, 4, 5};
    int dataOffset = 0;
    int dataLen = 5;
    boolean toLowerCase = true;
    char[] out = new char[dataLen * 2];
    int outOffset = 0;
    hex.encodeHex(data, dataOffset, dataLen, toLowerCase, out, outOffset);
    char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
    assertArrayEquals(expected, out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_QUjB0() {
    Hex hex = new Hex();
    byte[] data = new byte[] {1, 2, 3};
    char[] out = new char[6];
    hex.encodeHex(data, 0, 3, true, out, 0);
    assertArrayEquals(new char[] {'0', '1', '0', '2', '0', '3'}, out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_NcDO0() {
    Hex hex = new Hex();
    byte[] data = {1, 2, 3, 4, 5};
    int dataOffset = 0;
    int dataLen = 5;
    boolean toLowerCase = true;
    char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
    char[] actual = Hex.encodeHex(data, dataOffset, dataLen, toLowerCase);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetName1_YPkz0() {
    Hex hex = new Hex(StandardCharsets.UTF_8);
    assertEquals("UTF-8", hex.getCharsetName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetName2_EnVk1() {
    Hex hex = new Hex("UTF-8");
    assertEquals("UTF-8", hex.getCharsetName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetName3_THwA2() {
    Hex hex = new Hex();
    assertNotNull(hex.getCharsetName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_WXyz0() {
    byte[] data = {1, 2, 3, 4, 5};
    String result = Hex.encodeHexString(data, true);
    assertEquals("0102030405", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_OddLength_yKBi1() {
    Hex hex = new Hex();
    char[] data = {'1', '2', '3'};
    byte[] out = new byte[2];
    try {
        Hex.decodeHex(data, out, 0);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_OutputArrayTooSmall_tPEi2() {
    Hex hex = new Hex();
    char[] data = {'1', '2', '3', '4'};
    byte[] out = new byte[1];
    try {
        Hex.decodeHex(data, out, 0);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_LdtQ1() {
    Hex hex = new Hex("UTF-8");
    byte[] array = "Hello, World!".getBytes();
    byte[] result = hex.encode(array);
    assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithCharset_ZvyU2() {
    Hex hex = new Hex(Charset.forName("UTF-8"));
    byte[] array = "Hello, World!".getBytes();
    byte[] result = hex.encode(array);
    assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithoutCharset_dyuv3() {
    Hex hex = new Hex();
    byte[] array = "Hello, World!".getBytes();
    byte[] result = hex.encode(array);
    assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_rMvZ0_DVXF0() {
    Hex hex = new Hex();
    try {
        byte[] result = hex.decodeHex("48656c6c6f");
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111}, result);
    } catch (DecoderException e) {
        fail("DecoderException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_NullData_Fcoj3_pDRH0() throws DecoderException {
    Hex hex = new Hex();
    byte[] out = new byte[2];
    try {
        hex.decodeHex((char[]) null, out, 0); // Corrected the method call
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDigitValidCharacter_DEbt0_ijxE0() {
    try {
        assertEquals(1, Hex.toDigit('1', 0));
    } catch (DecoderException e) {
        fail("DecoderException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDigitValidCharacter_DEbt0_lGRp1() throws DecoderException {
    assertEquals(1, Hex.toDigit('1', 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_Xtfl0_UJWm0() {
    Hex hex = new Hex("UTF-8");
    ByteBuffer buffer = ByteBuffer.wrap("48656c6c6f2c20576f726c6421".getBytes());
    byte[] result = new byte[0];
    try {
        result = hex.decode(buffer.array());
    } catch (DecoderException e) {
        fail("DecoderException was thrown");
    }
    assertArrayEquals(new byte[] {72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_qtcg0() {
    Hex hex = new Hex();
    byte[] data = {1, 2, 3, 4, 5};
    String result = Hex.encodeHexString(data);
    assertNotNull(result);
    assertEquals("0102030405", result);
}
}