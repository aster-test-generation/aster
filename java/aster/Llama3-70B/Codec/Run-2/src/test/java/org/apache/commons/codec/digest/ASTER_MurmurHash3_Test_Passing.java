/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash3_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_msBv0_1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    int offset = 0;
    int length = 15;
    int seed = 1;
    long[] result = MurmurHash3.hash128(data, offset, length, seed);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_msBv0_2() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    int offset = 0;
    int length = 15;
    int seed = 1;
    long[] result = MurmurHash3.hash128(data, offset, length, seed);
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_yeVl0_1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    long[] result = MurmurHash3.hash128(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_yeVl0_2() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    long[] result = MurmurHash3.hash128(data);
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_Pxjb0_1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    int offset = 0;
    int length = 16;
    int seed = 1;
    long[] result = MurmurHash3.hash128(data, offset, length, seed);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_Pxjb0_2() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    int offset = 0;
    int length = 16;
    int seed = 1;
    long[] result = MurmurHash3.hash128(data, offset, length, seed);
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86_1_doEe0() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    int offset = 0;
    int length = 8;
    int seed = 123;
    int result = MurmurHash3.hash32x86(data, offset, length, seed);
    assertNotEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86_2_wiLW1() {
    byte[] data = new byte[] {1, 2, 3};
    int offset = 0;
    int length = 3;
    int seed = 456;
    int result = MurmurHash3.hash32x86(data, offset, length, seed);
    assertNotEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86_bjWS0() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    int offset = 0;
    int length = 8;
    int seed = 1;
    int result = MurmurHash3.hash32x86(data, offset, length, seed);
    assertNotEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86_Fmix32_GsTt1_BtjA0() {
    byte[] data = new byte[] {1, 2, 3, 4};
    int offset = 0;
    int length = 4;
    int seed = 1;
    int result = MurmurHash3.hash32x86(data, offset, length, seed);
    int fmixResult = result;
    fmixResult ^= fmixResult >>> 16;
    fmixResult *= 0x85ebca6b;
    fmixResult ^= fmixResult >>> 13;
    fmixResult *= 0xc2b2ae35;
    fmixResult ^= fmixResult >>> 16;
    assertNotEquals(result, fmixResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86_QKOp0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    int result = MurmurHash3.hash32x86(data);
    assertEquals(-1567508024, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_GUTG0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    long result = MurmurHash3.hash64(data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_qvOA0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    int length = data.length;
    int seed = 42;
    int result = MurmurHash3.hash32(data, length, seed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128x64_sXsJ0_fid1() {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
    int offset = 0;
    int length = 16;
    int seed = 1;
    long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_1_iLIs0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    long result = MurmurHash3.hash64(data, 0, 8, 1);
    assertEquals(3181400346070213731L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_2_EILr1_fid1() {
    byte[] data = new byte[] {9, 10, 11, 12, 13, 14, 15, 16};
    long result = MurmurHash3.hash64(data, 0, 8, 2);
    assertEquals(-345986612833563346L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_BbIj0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    int length = data.length;
    int result = MurmurHash3.hash32(data, length);
    assertEquals(616850763, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_zIqz0_fid1() {
    long data = 1234567890L;
    int seed = 42;
    int result = MurmurHash3.hash32(data, seed);
    assertEquals(-1477327144, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_gsOB0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    int result = MurmurHash3.hash32(data);
    assertEquals(616850763, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_cXiE0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    long result = MurmurHash3.hash64(data, 0, data.length);
    assertEquals(4922444149315819138L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_1_ztrW0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int offset = 0;
    int length = 10;
    int seed = 1;
    int result = MurmurHash3.hash32(data, offset, length, seed);
    assertEquals(419366449, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_2_HMFw1_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4};
    int offset = 0;
    int length = 4;
    int seed = 2;
    int result = MurmurHash3.hash32(data, offset, length, seed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_1_ejsx0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    long result = MurmurHash3.hash64(data, 0, data.length, 1);
    assertEquals(3181400346070213731L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_2_TRYQ1_fid1() {
    byte[] data = new byte[] {9, 10, 11, 12, 13, 14, 15, 16};
    long result = MurmurHash3.hash64(data, 0, data.length, 2);
    assertEquals(-345986612833563346L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_1_GqUy0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    int offset = 0;
    int length = 8;
    int seed = 1;
    int result = MurmurHash3.hash32(data, offset, length, seed);
    assertEquals(2123270367, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_2_yZfO1_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7};
    int offset = 0;
    int length = 7;
    int seed = 1;
    int result = MurmurHash3.hash32(data, offset, length, seed);
    assertEquals(-1789967182, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_2_rkXK1_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7};
    int offset = 0;
    int length = 7;
    int seed = 1;
    int result = MurmurHash3.hash32(data, offset, length, seed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86_EFNn0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    int result = MurmurHash3.hash32x86(data, 0, data.length, 1);
    assertEquals(-817294991, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_GrvQ0_fILl0_fid1() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    int offset = 0;
    int length = 16;
    int seed = 1;
    int expected = 123456789;
    int actual = MurmurHash3.hash32x86(data, offset, length, seed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_hLIY0_CRow0_fid1() {
    long data1 = 123456789L;
    long data2 = 987654321L;
    byte[] data = new byte[16];
    for (int i = 0; i < 8; i++) {
        data[i] = (byte) ((data1 >> (56 - i * 8)) & 0xff);
        data[i + 8] = (byte) ((data2 >> (56 - i * 8)) & 0xff);
    }
    int result = MurmurHash3.hash32x86(data, 0, 16, 0);
    assertEquals(1745099027, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86_lvsd0_oUcp0_fid1() {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
    int offset = 0;
    int length = 16;
    int seed = 1;
    int expected =-973956372;
    int result = MurmurHash3.hash32x86(data, offset, length, seed);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_msBv0() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    int offset = 0;
    int length = 15;
    int seed = 1;
    long[] result = MurmurHash3.hash128(data, offset, length, seed);
    assertNotNull(result);
    assertEquals(2, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_yeVl0() {
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    long[] result = MurmurHash3.hash128(data);
    assertNotNull(result);
    assertEquals(2, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_Pxjb0() {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    int offset = 0;
    int length = 16;
    int seed = 1;
    long[] result = MurmurHash3.hash128(data, offset, length, seed);
    assertNotNull(result);
    assertEquals(2, result.length);
}
}