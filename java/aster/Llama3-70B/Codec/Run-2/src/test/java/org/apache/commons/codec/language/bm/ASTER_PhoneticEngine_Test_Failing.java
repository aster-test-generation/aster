/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import java.util.Collections;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PhoneticEngine_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_EXACT_Concatenate_QUBT0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("en"));
    try {
        engine.encode("John Doe", languageSet);
    } catch (IllegalArgumentException e) {
        assertEquals("No rules found for gen, rules, en", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_APPROX_NoConcatenate_NWqw1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("he"));
    try {
        engine.encode(" ", languageSet);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("No rules found for ash, rules, he", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_EXACT_Concatenate_tcAk2() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("es"));
    try {
        engine.encode("Juan Prez", languageSet);
    } catch (IllegalArgumentException e) {
        assertEquals("No rules found for sep, rules, es", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_RULES_NoConcatenate_OvGm3() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("fr"));
    String result = engine.encode("Jean-Pierre", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_APPROX_Concatenate_QByT4() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("ru"));
    String result = engine.encode("test", languageSet);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_RULES_NoConcatenate_ZLbN5() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, false, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("pt"));
    String result = engine.encode("Joo Silva", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_RULES_Concatenate_jiQy7() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("it"));
    String result = engine.encode("Giovanni Bianchi", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_APPROX_Concatenate_llNW8() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.APPROX, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("ar"));
    String result = engine.encode("some valid input", languageSet);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_RULES_Concatenate_HwIq9() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("zh"));
    String result = engine.encode("", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_EXACT_Concatenate_QUBT0_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("en"));
    String result = engine.encode("John Doe", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_APPROX_NoConcatenate_NWqw1_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("he"));
    String result = engine.encode(" ", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_EXACT_Concatenate_tcAk2_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("es"));
    String result = engine.encode("Juan Prez", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_RULES_NoConcatenate_OvGm3_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, false, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("fr"));
    String result = engine.encode("Jean-Pierre", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_APPROX_Concatenate_QByT4_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("ru"));
    String result = engine.encode(" ", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_RULES_NoConcatenate_ZLbN5_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, false, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("pt"));
    String result = engine.encode("Joo Silva", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_EXACT_NoConcatenate_siQM6_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("de"));
    String result = engine.encode("Hans Mller", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_RULES_Concatenate_jiQy7_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("it"));
    String result = engine.encode("Giovanni Bianchi", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_APPROX_Concatenate_llNW8_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.APPROX, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("ar"));
    String result = engine.encode(" ", languageSet);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_RULES_Concatenate_HwIq9_fid1() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, true, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("zh"));
    String result = engine.encode("", languageSet);
    assertNotNull(result);
}
}