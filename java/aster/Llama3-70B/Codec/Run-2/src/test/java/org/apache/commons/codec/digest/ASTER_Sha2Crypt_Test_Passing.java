/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.util.Random;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sha2Crypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptNullSalt_gFuT0_1() {
    byte[] keyBytes = "password".getBytes();
    String result = Sha2Crypt.sha256Crypt(keyBytes, null);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptNullSalt_gFuT0_2() {
    byte[] keyBytes = "password".getBytes();
    String result = Sha2Crypt.sha256Crypt(keyBytes, null);
    assertTrue(result.startsWith(Sha2Crypt.SHA256_PREFIX));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptCustomSalt_tYtM1_1() {
    byte[] keyBytes = "password".getBytes();
    String salt = Sha2Crypt.SHA256_PREFIX + "customsalt";
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptCustomSalt_tYtM1_2() {
    byte[] keyBytes = "password".getBytes();
    String salt = Sha2Crypt.SHA256_PREFIX + "customsalt";
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
    assertEquals(salt, result.substring(0, salt.length()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512Crypt_dPiU0() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "key".getBytes();
    String result = Sha2Crypt.sha512Crypt(keyBytes);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt_xynL0() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "key".getBytes();
    String result = Sha2Crypt.sha256Crypt(keyBytes);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512CryptNullSalt_ofXR0_1() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    Random random = new Random();
    String result = sha2Crypt.sha512Crypt(keyBytes, null, random);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512CryptNullSalt_ofXR0_2() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    Random random = new Random();
    String result = sha2Crypt.sha512Crypt(keyBytes, null, random);
    assertTrue(result.startsWith(Sha2Crypt.SHA512_PREFIX));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512Crypt_hcTc0_1() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String salt = "$6$rounds=10000$";
    String result = sha2Crypt.sha512Crypt(keyBytes, salt);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512Crypt_hcTc0_2() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String salt = "$6$rounds=10000$";
    String result = sha2Crypt.sha512Crypt(keyBytes, salt);
    assertTrue(result.startsWith("$6$"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512CryptNullSalt_JkYm1_1() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String result = sha2Crypt.sha512Crypt(keyBytes, null);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512CryptNullSalt_JkYm1_2() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String result = sha2Crypt.sha512Crypt(keyBytes, null);
    assertTrue(result.startsWith("$6$"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptNullSalt_nlzn0_1() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    Random random = new Random();
    String result = Sha2Crypt.sha256Crypt(keyBytes, null, random);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptNullSalt_nlzn0_2() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    Random random = new Random();
    String result = Sha2Crypt.sha256Crypt(keyBytes, null, random);
    assertTrue(result.startsWith(Sha2Crypt.SHA256_PREFIX));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptCustomSalt_iKWo1_1() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String salt = Sha2Crypt.SHA256_PREFIX + "customsalt";
    Random random = new Random();
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptCustomSalt_iKWo1_2() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String salt = Sha2Crypt.SHA256_PREFIX + "customsalt";
    Random random = new Random();
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
    assertEquals(salt, result.substring(0, salt.length()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512CryptCustomSalt_tVFq1_TQle0_1() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String salt = "$6$rounds=10000$mycustomsalt";
    Random random = new Random();
    String result = sha2Crypt.sha256Crypt(keyBytes, salt, random);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptNullSalt_gFuT0() {
    byte[] keyBytes = "password".getBytes();
    String result = Sha2Crypt.sha256Crypt(keyBytes, null);
    assertNotNull(result);
    assertTrue(result.startsWith(Sha2Crypt.SHA256_PREFIX));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptCustomSalt_tYtM1() {
    byte[] keyBytes = "password".getBytes();
    String salt = Sha2Crypt.SHA256_PREFIX + "customsalt";
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
    assertNotNull(result);
    assertEquals(salt, result.substring(0, salt.length()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512CryptNullSalt_ofXR0() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    Random random = new Random();
    String result = sha2Crypt.sha512Crypt(keyBytes, null, random);
    assertNotNull(result);
    assertTrue(result.startsWith(Sha2Crypt.SHA512_PREFIX));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512Crypt_hcTc0() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String salt = "$6$rounds=10000$";
    String result = sha2Crypt.sha512Crypt(keyBytes, salt);
    assertNotNull(result);
    assertTrue(result.startsWith("$6$"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512CryptNullSalt_JkYm1() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String result = sha2Crypt.sha512Crypt(keyBytes, null);
    assertNotNull(result);
    assertTrue(result.startsWith("$6$"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptNullSalt_nlzn0() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    Random random = new Random();
    String result = Sha2Crypt.sha256Crypt(keyBytes, null, random);
    assertNotNull(result);
    assertTrue(result.startsWith(Sha2Crypt.SHA256_PREFIX));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptCustomSalt_iKWo1() {
    Sha2Crypt sha2Crypt = new Sha2Crypt();
    byte[] keyBytes = "password".getBytes();
    String salt = Sha2Crypt.SHA256_PREFIX + "customsalt";
    Random random = new Random();
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
    assertNotNull(result);
    assertEquals(salt, result.substring(0, salt.length()));
}
}