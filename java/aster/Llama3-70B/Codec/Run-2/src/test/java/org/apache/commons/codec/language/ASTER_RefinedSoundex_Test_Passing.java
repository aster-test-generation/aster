/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RefinedSoundex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexNull_MKRh0() {
    RefinedSoundex soundex = new RefinedSoundex();
    assertNull(soundex.soundex(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexEmpty_Jirb1() {
    RefinedSoundex soundex = new RefinedSoundex();
    assertEquals("", soundex.soundex(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMappingCode_nonLetter_IMso0() {
    RefinedSoundex refinedSoundex = new RefinedSoundex();
    char c = '1';
    char result = refinedSoundex.getMappingCode(c);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMappingCode_upperCaseLetter_nFFl1() {
    RefinedSoundex refinedSoundex = new RefinedSoundex("01230120022455012623010202".toCharArray());
    char c = 'A';
    char result = refinedSoundex.getMappingCode(c);
    assertEquals('0', result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMappingCode_lowerCaseLetter_YfBh2() {
    RefinedSoundex refinedSoundex = new RefinedSoundex("01230120022455012623010202".toCharArray());
    char c = 'a';
    char result = refinedSoundex.getMappingCode(c);
    assertEquals('0', result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMappingCode_invalidIndex_JGUd3() {
    RefinedSoundex refinedSoundex = new RefinedSoundex("012301200224550126230102".toCharArray());
    char c = 'Z';
    char result = refinedSoundex.getMappingCode(c);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference_1_psEL0_fid1() {
    RefinedSoundex refinedSoundex = new RefinedSoundex();
    try {
        int result = refinedSoundex.difference("Hello", "World");
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeString_FDtD0_fid1() {
    RefinedSoundex soundex = new RefinedSoundex();
    Object result = soundex.encode("Hello");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_rRBF0_fid1() {
    RefinedSoundex refinedSoundex = new RefinedSoundex();
    String result = refinedSoundex.encode("Hello");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_withMapping_dzlb1_fid1() {
    RefinedSoundex refinedSoundex = new RefinedSoundex("01230120022455012623001904");
    String result = refinedSoundex.encode("Hello");
    assertEquals("H040", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_withCharArrayMapping_zpCW2_fid1() {
    char[] mapping = "01230120022455012623001904".toCharArray();
    RefinedSoundex refinedSoundex = new RefinedSoundex(mapping);
    String result = refinedSoundex.encode("Hello");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexMultipleCharacters_mlfo3_fid1() {
    RefinedSoundex soundex = new RefinedSoundex("01230120022455012623010202");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexConsecutiveDuplicates_dVsM4_fid1() {
    RefinedSoundex soundex = new RefinedSoundex(new char[] {'0', '1', '2', '3', '0', '1', '2', '0', '2', '4', '5', '5', '0', '1', '2', '6', '2', '3', '0', '1', '0', '2', '0', '2'});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexNonAlphabeticCharacters_wuBi5_fid1() {
    RefinedSoundex soundex = new RefinedSoundex();
    assertEquals("A0", soundex.soundex("A1$2"));
}
}