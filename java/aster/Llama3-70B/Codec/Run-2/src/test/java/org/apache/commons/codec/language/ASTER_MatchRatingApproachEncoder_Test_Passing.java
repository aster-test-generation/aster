/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MatchRatingApproachEncoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveVowels_htVO0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeVowels("Hello World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveVowelsWithVowelAsFirstLetter_WxIH1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeVowels("Aloha");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanName_withHyphenAndSpace_yrno0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.cleanName("John-Doe Jr.");
    assertEquals("JOHNDOEJR", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanName_withAccents_YuFD1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.cleanName("Rmy Dupont");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFirst3Last3_LongName_emeC0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.getFirst3Last3("abcdefghi");
    assert "abcghi".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFirst3Last3_ShortName_qnpw1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.getFirst3Last3("abc");
    assert "abc".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_FJhe0() throws EncoderException {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String input = "testString";
    Object result = encoder.encode(input);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants1_hHan0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeDoubleConsonants("hello");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants2_yUHV1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeDoubleConsonants("bubble");
    assert "BUBLE".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveAccentsNull_Qimg0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertNull(encoder.removeAccents(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveAccentsNoAccents_qfQa1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("hello", encoder.removeAccents("hello"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveAccentsWithAccents_CPiA2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveAccentsOnlyAccents_DZyh3() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("", encoder.removeAccents(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMinRating1_huzc0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    int result = encoder.getMinRating(3);
    assertEquals(5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMinRating2_bHOy1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    int result = encoder.getMinRating(6);
    assertEquals(4, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMinRating3_iXvx2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    int result = encoder.getMinRating(10);
    assertEquals(3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMinRating4_jmfh3() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    int result = encoder.getMinRating(12);
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMinRating5_vbPh4() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    int result = encoder.getMinRating(15);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_E_HhRw0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    boolean result = encoder.isVowel("E");
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_A_gAQJ1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    boolean result = encoder.isVowel("A");
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_O_IUJo2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    boolean result = encoder.isVowel("O");
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_I_WVIV3() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    boolean result = encoder.isVowel("I");
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_U_nDvu4() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    boolean result = encoder.isVowel("U");
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_NotVowel_klWa5() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    boolean result = encoder.isVowel("B");
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing1_LbZi4() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(4, encoder.leftToRightThenRightToLeftProcessing("abc", "cba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing3_IvdB2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(2, encoder.leftToRightThenRightToLeftProcessing("abcde", "edcba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing4_vkqN0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("abcdef", "fedcba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing5_ufSO0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("abcdefg", "gfedcba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing6_DMOp2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(2, encoder.leftToRightThenRightToLeftProcessing("abcdefgh", "hgfedcba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_ZExj0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("", encoder.encode(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeEmpty_LmVb1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("", encoder.encode(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeSingleCharacter_jzQN2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("", encoder.encode("a"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals1_OuyC0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert !encoder.isEncodeEquals(null, "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals2_qSlJ1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert !encoder.isEncodeEquals("test", null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals3_xRxK2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert !encoder.isEncodeEquals("", "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals4_krmX3() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert !encoder.isEncodeEquals("test", "");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals5_CCXs4() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert !encoder.isEncodeEquals("a", "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals6_oteM5() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert !encoder.isEncodeEquals("test", "a");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals7_tUGA6() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert encoder.isEncodeEquals("test", "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals9_ljSr8() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert encoder.isEncodeEquals("test", "tEst");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals10_pZlt9() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert !encoder.isEncodeEquals("test", "abcd");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals11_NUYA10() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert encoder.isEncodeEquals("abcdefg", "abcdEfG");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals12_dMrl11() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertTrue(encoder.isEncodeEquals("abcdefg", "abcdEfGh"));
}
}