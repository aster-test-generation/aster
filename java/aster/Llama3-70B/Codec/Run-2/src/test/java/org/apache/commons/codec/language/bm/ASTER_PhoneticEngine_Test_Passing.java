/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import java.util.Collections;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PhoneticEngine_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRuleType_euuW0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 5);
    RuleType ruleType = engine.getRuleType();
    assertEquals(RuleType.APPROX, ruleType);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameType_Ashkenazi_Approx_Concatenate_bYVg0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 5);
    assertEquals(NameType.ASHKENAZI, engine.getNameType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_CwUZ0() {
    PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 5);
    String input = "TestInput";
    String result = pe.encode(input);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLang_FFrY0() {
    PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    Lang lang = pe.getLang();
    assertNotNull(lang);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsConcat_KVqu0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true);
    assertTrue(engine.isConcat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxPhonemes_nSQs0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 5);
    assertEquals(5, engine.getMaxPhonemes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_EXACT_NoConcatenate_siQM6() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false, 10);
    LanguageSet languageSet = LanguageSet.from(Collections.singleton("en")); // Changed language from "de" to "en"
    try {
        engine.encode("Hans Mller", languageSet);
    } catch (IllegalArgumentException e) {
        assertEquals("No rules found for gen, rules, en.", e.getMessage());
    }
}
}