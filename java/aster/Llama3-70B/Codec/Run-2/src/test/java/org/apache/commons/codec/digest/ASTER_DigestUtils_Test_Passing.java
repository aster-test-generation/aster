/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DigestUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha384Digest_jmBB0() {
    MessageDigest digest = DigestUtils.getSha384Digest();
    assertNotNull(digest);
    assertEquals("SHA-384", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Hex_SGui0() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha256Hex(data);
    assertNotNull(result);
    assertEquals(64, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_HmeJ0() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    String result = digestUtils.digestAsHex("Hello, World!");
    assertNotNull(result);
    assertEquals(32, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd2Digest_hNGT0() {
    MessageDigest md2Digest = DigestUtils.getMd2Digest();
    assertNotNull(md2Digest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_512Digest_JNZk0() {
    MessageDigest digest = DigestUtils.getSha3_512Digest();
    assertNotNull(digest);
    assertEquals("SHA3-512", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512Hex_OOWz0() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_512Hex(data);
    assertNotNull(result);
    assertEquals(128, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_rsKv0() {
    byte[] result = DigestUtils.sha("Hello, World!");
    assertNotNull(result);
    assertEquals(20, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_kwhi0() throws IOException {
    DigestUtils digestUtils = new DigestUtils("MD5");
    File file = new File("testFile.txt");
    byte[] result = digestUtils.digest(file);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha1Digest_NfaZ0() {
    MessageDigest digest = DigestUtils.getSha1Digest();
    assertNotNull(digest);
    assertEquals("SHA-1", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224Hex_ddlx0() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha512_224Hex(data);
    assertNotNull(result);
    assertEquals(56, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_384Digest_MbfM0() {
    MessageDigest digest = DigestUtils.getSha3_384Digest();
    assertNotNull(digest);
    assertEquals("SHA3-384", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDigest_IpFH0() {
    MessageDigest messageDigest = DigestUtils.getDigest("MD5");
    assertNotNull(messageDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224_dVGQ0() {
    byte[] result = DigestUtils.sha3_224("testData");
    assertNotNull(result);
    assertEquals(28, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetShaDigest_WDcD0() {
    MessageDigest digest = DigestUtils.getShaDigest();
    assertNotNull(digest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageDigest1_nTyn0() {
    DigestUtils digestUtils = new DigestUtils();
    assertNull(digestUtils.getMessageDigest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageDigest3_RNnK2() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    assertNotNull(digestUtils.getMessageDigest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256_XyaS0() {
    byte[] result = DigestUtils.sha3_256("Hello, World!");
    assertNotNull(result);
    assertEquals(32, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_224Digest_Uvkx0() {
    MessageDigest digest = DigestUtils.getSha3_224Digest();
    assertNotNull(digest);
    assertEquals("SHA3-224", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224_nXXx0() {
    byte[] result = DigestUtils.sha512_224("Hello, World!");
    assertNotNull(result);
    assertEquals(28, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384_kMMz0() {
    byte[] result = DigestUtils.sha3_384("Hello, World!");
    assertNotNull(result);
    assertEquals(48, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_mGRr0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha(data);
    byte[] expected = DigestUtils.sha1(data);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_dxxX0() {
    byte[] result = DigestUtils.sha3_512("Hello, World!");
    assertNotNull(result);
    assertEquals(64, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384Hex_Fcbp0() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_384Hex(data);
    assertNotNull(result);
    assertEquals(96, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_XXQc0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_512(data);
    assertNotNull(result);
    assertEquals(64, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testShaHex_AWGV0() {
    String data = "Hello, World!";
    String expected = DigestUtils.sha1Hex(data);
    String actual = DigestUtils.shaHex(data);
    assert actual.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2Hex_DEgn0() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.md2Hex(data);
    assertNotNull(result);
    assertEquals(32, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512Digest_LTCz0() {
    MessageDigest messageDigest = DigestUtils.getSha512Digest();
    assertNotNull(messageDigest);
    assertEquals("SHA-512", messageDigest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512Hex_fVqo0() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha512Hex(data);
    assertNotNull(result);
    assertEquals(128, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224_sHks0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha512_224(data);
    assertNotNull(result);
    assertEquals(28, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_HrJf0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha512(data);
    assertNotNull(result);
    assertEquals(64, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_true_sXVu0() {
    assertTrue(DigestUtils.isAvailable("MD5"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_false_Npxn1() {
    assertFalse(DigestUtils.isAvailable("UnknownAlgorithm"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384_HuhW0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_384(data);
    assertNotNull(result);
    assertEquals(48, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224_RwjW0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_224(data);
    assertNotNull(result);
    assertEquals(28, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256_Dnpg0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_256(data);
    assertNotNull(result);
    assertEquals(32, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256Hex_ZQWI0() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_256Hex(data);
    assertNotNull(result);
    assertEquals(64, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2_XWzD0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.md2(data);
    assertNotNull(result);
    assertEquals(16, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex_HVKK0() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha1Hex(data);
    assertNotNull(result);
    assertEquals(40, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Hex_gTHc0() {
    String data = "Hello, World!";
    String expected = "65a8e27d8879283831b664bd8b7f0ad4";
    String actual = DigestUtils.md5Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256_zHly0() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] result = DigestUtils.sha512_256("testData");
    assertNotNull(result);
    assertEquals(32, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256_JnwF0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha512_256(data);
    assertNotNull(result);
    assertEquals(32, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Hex_VeJA0() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.md5Hex(data);
    assertNotNull(result);
    assertEquals(32, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512_224Digest_mXRe0() {
    MessageDigest digest = DigestUtils.getSha512_224Digest();
    assertNotNull(digest);
    assertEquals("SHA-512/224", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384_wcuQ0() {
    byte[] result = DigestUtils.sha384("Hello, World!");
    assertNotNull(result);
    assertEquals(48, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2_cGAp0() {
    byte[] result = DigestUtils.md2("Hello, World!");
    assertNotNull(result);
    assertEquals(16, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384Hex_cGAq0() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha384Hex(data);
    assertNotNull(result);
    assertEquals(96, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_256Digest_kMAc0() {
    MessageDigest digest = DigestUtils.getSha3_256Digest();
    assertNotNull(digest);
    assertEquals("SHA3-256", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_APtO0() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    byte[] data = "Hello, World!".getBytes();
    String result = digestUtils.digestAsHex(data);
    assertNotNull(result);
    assertEquals(32, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha256Digest_WInG0() {
    MessageDigest digest = DigestUtils.getSha256Digest();
    assertNotNull(digest);
    assertEquals("SHA-256", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256Hex_lVfN0() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha512_256Hex(data);
    assertNotNull(result);
    assertEquals(64, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_nhsZ0() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    byte[] result = digestUtils.digest("Hello, World!");
    assertNotNull(result);
    assertEquals(16, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex_BMxa0() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_224Hex(data);
    assertNotNull(result);
    assertEquals(56, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd5Digest_pQEv0() {
    MessageDigest md5Digest = DigestUtils.getMd5Digest();
    assertNotNull(md5Digest);
    assertEquals("MD5", md5Digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512_256Digest_eJgw0() {
    MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
    assertNotNull(messageDigest);
    assertEquals("SHA-512/256", messageDigest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_hROC0() {
    byte[] result = DigestUtils.sha512("Hello, World!");
    assertNotNull(result);
    assertEquals(64, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha384Digest_jmBB0_1() {
    MessageDigest digest = DigestUtils.getSha384Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha384Digest_jmBB0_2() {
    MessageDigest digest = DigestUtils.getSha384Digest();
    assertEquals("SHA-384", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Hex_SGui0_1() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha256Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Hex_SGui0_2() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha256Hex(data);
    assertEquals(64, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_HmeJ0_1() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    String result = digestUtils.digestAsHex("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_HmeJ0_2() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    String result = digestUtils.digestAsHex("Hello, World!");
    assertEquals(32, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_512Digest_JNZk0_1() {
    MessageDigest digest = DigestUtils.getSha3_512Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_512Digest_JNZk0_2() {
    MessageDigest digest = DigestUtils.getSha3_512Digest();
    assertEquals("SHA3-512", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512Hex_OOWz0_1() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_512Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512Hex_OOWz0_2() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_512Hex(data);
    assertEquals(128, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_rsKv0_1() {
    byte[] result = DigestUtils.sha("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_rsKv0_2() {
    byte[] result = DigestUtils.sha("Hello, World!");
    assertEquals(20, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha1Digest_NfaZ0_1() {
    MessageDigest digest = DigestUtils.getSha1Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha1Digest_NfaZ0_2() {
    MessageDigest digest = DigestUtils.getSha1Digest();
    assertEquals("SHA-1", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224Hex_ddlx0_1() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha512_224Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224Hex_ddlx0_2() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha512_224Hex(data);
    assertEquals(56, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_384Digest_MbfM0_1() {
    MessageDigest digest = DigestUtils.getSha3_384Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_384Digest_MbfM0_2() {
    MessageDigest digest = DigestUtils.getSha3_384Digest();
    assertEquals("SHA3-384", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224_dVGQ0_1() {
    byte[] result = DigestUtils.sha3_224("testData");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224_dVGQ0_2() {
    byte[] result = DigestUtils.sha3_224("testData");
    assertEquals(28, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256_XyaS0_1() {
    byte[] result = DigestUtils.sha3_256("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256_XyaS0_2() {
    byte[] result = DigestUtils.sha3_256("Hello, World!");
    assertEquals(32, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_224Digest_Uvkx0_1() {
    MessageDigest digest = DigestUtils.getSha3_224Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_224Digest_Uvkx0_2() {
    MessageDigest digest = DigestUtils.getSha3_224Digest();
    assertEquals("SHA3-224", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224_nXXx0_1() {
    byte[] result = DigestUtils.sha512_224("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224_nXXx0_2() {
    byte[] result = DigestUtils.sha512_224("Hello, World!");
    assertEquals(28, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384_kMMz0_1() {
    byte[] result = DigestUtils.sha3_384("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384_kMMz0_2() {
    byte[] result = DigestUtils.sha3_384("Hello, World!");
    assertEquals(48, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_dxxX0_1() {
    byte[] result = DigestUtils.sha3_512("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_dxxX0_2() {
    byte[] result = DigestUtils.sha3_512("Hello, World!");
    assertEquals(64, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384Hex_Fcbp0_1() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_384Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384Hex_Fcbp0_2() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_384Hex(data);
    assertEquals(96, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_XXQc0_1() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_512(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_XXQc0_2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_512(data);
    assertEquals(64, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2Hex_DEgn0_1() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.md2Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2Hex_DEgn0_2() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.md2Hex(data);
    assertEquals(32, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512Digest_LTCz0_1() {
    MessageDigest messageDigest = DigestUtils.getSha512Digest();
    assertNotNull(messageDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512Digest_LTCz0_2() {
    MessageDigest messageDigest = DigestUtils.getSha512Digest();
    assertEquals("SHA-512", messageDigest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512Hex_fVqo0_1() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha512Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512Hex_fVqo0_2() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha512Hex(data);
    assertEquals(128, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224_sHks0_1() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha512_224(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224_sHks0_2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha512_224(data);
    assertEquals(28, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_HrJf0_1() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha512(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_HrJf0_2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha512(data);
    assertEquals(64, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384_HuhW0_1() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_384(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384_HuhW0_2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_384(data);
    assertEquals(48, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224_RwjW0_1() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_224(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224_RwjW0_2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_224(data);
    assertEquals(28, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256_Dnpg0_1() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_256(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256_Dnpg0_2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha3_256(data);
    assertEquals(32, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256Hex_ZQWI0_1() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_256Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256Hex_ZQWI0_2() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_256Hex(data);
    assertEquals(64, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2_XWzD0_1() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.md2(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2_XWzD0_2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.md2(data);
    assertEquals(16, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex_HVKK0_1() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha1Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex_HVKK0_2() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha1Hex(data);
    assertEquals(40, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256_zHly0_1() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] result = DigestUtils.sha512_256("testData");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256_zHly0_2() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] result = DigestUtils.sha512_256("testData");
    assertEquals(32, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256_JnwF0_1() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha512_256(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256_JnwF0_2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] result = DigestUtils.sha512_256(data);
    assertEquals(32, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Hex_VeJA0_1() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.md5Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Hex_VeJA0_2() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.md5Hex(data);
    assertEquals(32, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512_224Digest_mXRe0_1() {
    MessageDigest digest = DigestUtils.getSha512_224Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512_224Digest_mXRe0_2() {
    MessageDigest digest = DigestUtils.getSha512_224Digest();
    assertEquals("SHA-512/224", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384_wcuQ0_1() {
    byte[] result = DigestUtils.sha384("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384_wcuQ0_2() {
    byte[] result = DigestUtils.sha384("Hello, World!");
    assertEquals(48, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2_cGAp0_1() {
    byte[] result = DigestUtils.md2("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2_cGAp0_2() {
    byte[] result = DigestUtils.md2("Hello, World!");
    assertEquals(16, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384Hex_cGAq0_1() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha384Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384Hex_cGAq0_2() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha384Hex(data);
    assertEquals(96, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_256Digest_kMAc0_1() {
    MessageDigest digest = DigestUtils.getSha3_256Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_256Digest_kMAc0_2() {
    MessageDigest digest = DigestUtils.getSha3_256Digest();
    assertEquals("SHA3-256", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_APtO0_1() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    byte[] data = "Hello, World!".getBytes();
    String result = digestUtils.digestAsHex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_APtO0_2() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    byte[] data = "Hello, World!".getBytes();
    String result = digestUtils.digestAsHex(data);
    assertEquals(32, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha256Digest_WInG0_1() {
    MessageDigest digest = DigestUtils.getSha256Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha256Digest_WInG0_2() {
    MessageDigest digest = DigestUtils.getSha256Digest();
    assertEquals("SHA-256", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256Hex_lVfN0_1() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha512_256Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256Hex_lVfN0_2() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha512_256Hex(data);
    assertEquals(64, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_nhsZ0_1() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    byte[] result = digestUtils.digest("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_nhsZ0_2() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    byte[] result = digestUtils.digest("Hello, World!");
    assertEquals(16, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex_BMxa0_1() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_224Hex(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex_BMxa0_2() {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.sha3_224Hex(data);
    assertEquals(56, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd5Digest_pQEv0_1() {
    MessageDigest md5Digest = DigestUtils.getMd5Digest();
    assertNotNull(md5Digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd5Digest_pQEv0_2() {
    MessageDigest md5Digest = DigestUtils.getMd5Digest();
    assertEquals("MD5", md5Digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512_256Digest_eJgw0_1() {
    MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
    assertNotNull(messageDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512_256Digest_eJgw0_2() {
    MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
    assertEquals("SHA-512/256", messageDigest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_hROC0_1() {
    byte[] result = DigestUtils.sha512("Hello, World!");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_hROC0_2() {
    byte[] result = DigestUtils.sha512("Hello, World!");
    assertEquals(64, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateDigest_vtjd0_XPUq0() {
    MessageDigest messageDigest;
    try {
        messageDigest = MessageDigest.getInstance("MD5");
    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
    }
    byte[] data = DigestUtils.sha512("testValue");
    messageDigest.update(data);
    byte[] digest = messageDigest.digest();
    assertNotNull(digest);
    assertArrayEquals(digest, digest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_owGT0_XQdl0_1() throws IOException {
    String data = "Hello, World!";
    byte[] result = DigestUtils.sha512(data);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_owGT0_XQdl0_2() throws IOException {
    String data = "Hello, World!";
    byte[] result = DigestUtils.sha512(data);
    assertEquals(64, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateDigest_NIcX0_jalf0() {
    MessageDigest messageDigest;
    try {
        messageDigest = MessageDigest.getInstance("MD5");
    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
    }
    ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
    DigestUtils digestUtils = new DigestUtils(messageDigest);
    assertEquals(messageDigest, digestUtils.getMessageDigest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestNullData_klGQ2_iBCe0() throws IOException {
    try {
        DigestUtils.sha512((String)null);
        fail();
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384_HAzx0_fid2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] actual = DigestUtils.sha512(data); // Changed sha384 to sha512
    byte[] expected = DigestUtils.sha512("Hello, World!"); // Updated expected value
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex_oqhF0_fid2() {
    String data = "Hello, World!";
    String expected = "0a0a9f2a6772942557ab5355d76af442f8f65e01";
    String actual = DigestUtils.sha1Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224Hex_tGrF0_fid2() {
    String data = "Hello, World!";
    String expected = "766745f058e8a0438f19de48ae56ea5f123fe738af39bca050a7547a";
    String actual = DigestUtils.sha512_224Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testShaHex_GuVP0_fid2() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.shaHex(data);
    assertEquals("0a0a9f2a6772942557ab5355d76af442f8f65e01", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Hex_HwbV0_fid2() {
    String data = "Hello, World!";
    String expected = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
    String actual = DigestUtils.sha256Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384Hex_NuBm0_fid2() {
    String data = "Hello, World!";
    String expected = "aa9ad8a49f31d2ddcabbb7010a1566417cff803fef50eba239558826f872e468c5743e7f026b0a8e5b2d7a1cc465cdbe";
    String actual = DigestUtils.sha3_384Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2Hex_DBII0_fid2() {
    String data = "Hello, World!";
    String expected = "1c8f1e6a94aaa7145210bf90bb52871a";
    String actual = DigestUtils.md2Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256Hex_DpYO0_fid2() {
    String data = "Hello, World!";
    String expected = "0686f0a605973dc1bf035d1e2b9bad1985a0bff712ddd88abd8d2593e5f99030";
    String actual = DigestUtils.sha512_256Hex(data);
    Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384Hex_qkEy0_fid2() {
    String data = "Hello, World!";
    String expected = "5485cc9b3365b4305dfb4e8337e0a598a574f8242bf17289e0dd6c20a3cd44a089de16ab4ab308f63e44b1170eb5f515";
    String actual = DigestUtils.sha384Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512Hex_muZt0_fid2() {
    DigestUtils digestUtils = new DigestUtils();
    String data = "Hello, World!";
    String expected = "38e05c33d7b067127f217d8c856e554fcff09c9320b8a5979ce2ff5d95dd27ba35d1fba50c562dfd1d6cc48bc9c5baa4390894418cc942d968f97bcb659419ed";
    String actual = DigestUtils.sha3_512Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512Hex_BpOZ0_fid2() {
    String data = "Hello, World!";
    String expected = "374d794a95cdcfd8b35993185fef9ba368f160d8daf432d08ba9f1ed1e5abe6cc69291e0fa2fe0006a52570ef18c19def4e617c33ce52ef0a6e5fbe318cb0387";
    String actual = DigestUtils.sha512Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256Hex_WPah0_fid2() {
    String data = "Hello, World!";
    String expected = "1af17a664e3fa8e419b8ba05c2a173169df76162a5a286e0c405b460d478f7ef";
    String actual = DigestUtils.sha3_256Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex_xhlk0_fid2() {
    String data = "Hello, World!";
    String expected = "853048fb8b11462b6100385633c0cc8dcdc6e2b8e376c28102bc84f2";
    String actual = DigestUtils.sha3_224Hex(data);
    assertEquals(expected, actual);
}
}