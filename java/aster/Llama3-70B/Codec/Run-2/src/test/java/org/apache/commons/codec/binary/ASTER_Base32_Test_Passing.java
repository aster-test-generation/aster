/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base32_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet1_geCL0() {
    Base32 base32 = new Base32();
    assertFalse(base32.isInAlphabet((byte) 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet2_LuYn1() {
    Base32 base32 = new Base32(10);
    assertFalse(base32.isInAlphabet((byte) -1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet3_fSaP2() {
    Base32 base32 = new Base32(10, new byte[] {10, 20});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator1_mlzW0() {
    Base32 base32 = new Base32(10, new byte[] {1, 2, 3});
    assertArrayEquals(new byte[] {1, 2, 3}, base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator2_KRQT1() {
    Base32 base32 = new Base32(10, new byte[] {1, 2, 3}, true);
    assertArrayEquals(new byte[] {1, 2, 3}, base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator3_mTcD2() {
    Base32 base32 = new Base32(10, new byte[] {1, 2, 3}, true, (byte) 4, CodecPolicy.STRICT);
    assertArrayEquals(new byte[] {1, 2, 3}, base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator4_pgEd3() {
    Base32 base32 = new Base32(true);
    assertNull(base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator5_ERDl4() {
    Base32 base32 = new Base32(10);
    assertArrayEquals(new byte[] {13, 10}, base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator6_wkBo5() {
    Base32 base32 = new Base32((byte) 5);
    assertNull(base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator7_sLAP6() {
    Base32 base32 = new Base32(true, (byte) 6);
    assertNull(base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator8_VVse7() {
    Base32 base32 = new Base32();
    assertNull(base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator9_XiAo8() {
    Base32 base32 = new Base32(10, new byte[] {1, 2, 3}, true, (byte) 4);
    assertArrayEquals(new byte[] {1, 2, 3}, base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuilder_Kjfx0_Ysrk0() {
    Base32 base32 = new Base32();
    assertNotNull(base32);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode9_vxXP8_dbIj0() {
    Base32 base32 = new Base32(10, new byte[] {10, 20}, true, (byte) '-');
    org.apache.commons.codec.binary.Base32.Context context = new org.apache.commons.codec.binary.Base32.Context(); 
    byte[] input = new byte[10];
    base32.encode(input, 0, 10, context); 
    assertEquals(false, context.eof);
}
}