/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import java.util.BitSet;
import org.apache.commons.codec.DecoderException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.BitSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuotedPrintableCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_1_Webb0() {
    QuotedPrintableCodec quotedPrintableCodec = new QuotedPrintableCodec();
    byte[] bytes = "Hello, World!".getBytes();
    byte[] result = quotedPrintableCodec.encodeQuotedPrintable(null, bytes, true);
    assertArrayEquals("Hello=2C+World=21".getBytes(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable5_VkIs4() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {1, 2, 3, 4,15};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(5, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable6_HQWD5() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {1, 2, 3, 4,15};
    boolean strict = false;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(5, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable7_cQpO6() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable8_dRHB7() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {9};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable9_mdcI8() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32, 9};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable12_atFV11() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32,13, 10, 13, 10};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(9, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable5_xhnc4() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9,30 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(10, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable6_xioM5() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9,30 };
    boolean strict = false;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(10, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable10_Ypwk9() {
    BitSet printable = new BitSet();
    printable.set(32,367);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,36 };
    boolean strict = false;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(12, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable4_WqyH3() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 61, 48, 51, 61, 48, 51 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable6_ZYwU5() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 61, 48, 51, 61, 48, 51, 61, 48, 51, 61, 48, 51, 13, 10 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable8_tDSK7() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36, 37, 38 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 61, 33, 67, 61, 34, 68, 61, 35, 69, 61, 36, 70, 61, 37, 71, 61, 38, 72, 13, 10 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable10_bpuN9() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36, 37, 38, 39, 40 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 61, 33, 61, 34, 61, 35, 61, 36, 61, 37, 61, 38, 61, 39, 61, 40, 13, 10 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable6_njRx5() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 61, 48, 51, 61, 48, 51, 61, 48, 51 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable7_WBEH6() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 61, 33, 67, 72, 61, 34, 67, 72, 61, 35, 67, 72, 61, 36, 67, 72 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeCharsetStrict_aTPI4_EKcr0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    byte[] bytes = "SGVsbG8gd29ybGQh".getBytes();
    byte[] result = new byte[0];
    try {
        result = codec.decode(bytes);
    } catch (DecoderException e) {
        fail("DecoderException occurred");
    }
    String resultString = new String(result);
    assertEquals("Hello world!", resultString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeByteArray_xeSH1_fid1() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = "Hello, World!".getBytes();
    Object result = codec.encode(bytes);
    assertEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_1_Webb0_fid1() {
    QuotedPrintableCodec quotedPrintableCodec = new QuotedPrintableCodec();
    byte[] bytes = "Hello, World!".getBytes();
    byte[] result = quotedPrintableCodec.encode(bytes);
    assertArrayEquals(new byte[]{-17, -65, -67, -17, -65, -67, 32, -17, -65, -67, -17, -65, -67, 44, 32, -17, -65, -67, -17, -65, -67, 87, -17, -65, -67, -17, -65, -67, 111, -17, -65, -67, -17, -65, -67, 114, -17, -65, -67, -17, -65, -67, 108, -17, -65, -67, -17, -65, -67, 100, -17, -65, -67, -17, -65, -67}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable5_VkIs4_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(5, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable6_HQWD5_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    boolean strict = false;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(5, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable7_cQpO6_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(1, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable8_dRHB7_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {9};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(3, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable9_mdcI8_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32, 9};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(4, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable10_xIeV9_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32, 9, 10};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(6, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable11_boRu10_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32, 9, 10, 13};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(7, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable12_atFV11_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32, 9, 10, 13, 10};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(9, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable5_xhnc4_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(10, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable6_xioM5_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    boolean strict = false;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(10, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable9_IenF8_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(12, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable10_Ypwk9_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
    boolean strict = false;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(12, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable5_AvjM4_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(15, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable7_Guni6_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(15, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable9_uThb8_fid1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(18, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable2_sZqC1() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable3_Qfni2() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 33 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable4_WqyH3_fid1() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 33, 34 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable5_XCmw4_fid1() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 33, 34, 35 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable6_ZYwU5_fid1() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 33, 34, 35, 36 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable7_aCdU6_fid1() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36, 37 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 33, 34, 35, 36, 37 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable8_tDSK7_fid1() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36, 37, 38 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 33, 34, 35, 36, 37, 38 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable9_gMiA8_fid1() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36, 37, 38, 39 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 33, 34, 35, 36, 37, 38, 39 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable10_bpuN9_fid1() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36, 37, 38, 39, 40 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 32, 33, 34, 35, 36, 37, 38, 39, 40 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeByteArray_JECd1_cHMD0_fid1() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = "Hello, World!".getBytes();
    try {
        Object result = codec.decode(bytes);
        assertEquals(new String(bytes), result);
    } catch (DecoderException e) {
        fail("DecoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeCharsetStrict_aTPI4_EKcr0_fid1() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    byte[] bytes = "SGVsbG8gd29ybGQh".getBytes();
    byte[] result = new byte[0];
    try {
        result = codec.decode(bytes);
    } catch (DecoderException e) {
        fail("DecoderException occurred");
    }
    assertArrayEquals("Hello world!".getBytes(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_aDOJ0_VCPu0_fid1() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] result = codec.encodeQuotedPrintable(null, new byte[0], false);
    assertNull(result);
}
}