/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import javax.crypto.Mac;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HmacUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_pkBY0_1() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_pkBY0_2() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256_abBN0_1() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256_abBN0_2() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
    assertArrayEquals(result, HmacUtils.hmacSha256(key, valueToDigest));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha256_Aiqu0() {
    byte[] key = new byte[] { 1, 2, 3, 4, 5 };
    Mac mac = HmacUtils.getHmacSha256(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_MD5_VlQU0() {
    assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_kOEW0() throws IOException {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    File file = new File("test.txt");
    String result = hmacUtils.hmacHex(file);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512_xiCv0_1() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512_xiCv0_2() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
    assertEquals(64, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512_nzLt0_1() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha512_OfKG0() {
    byte[] key = new byte[] { 1, 2, 3, 4, 5 };
    Mac mac = HmacUtils.getHmacSha512(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMac_ocGZ0() {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = "secretKey".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256Hex_Jsnx0_1() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    String result = HmacUtils.hmacSha256Hex(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256Hex_Jsnx0_2() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    String result = HmacUtils.hmacSha256Hex(key, valueToDigest);
    assertEquals(64, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_MD5_tubE0() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_1_yOPD1() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_224_gRks2() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_256_Swql3() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_384_CYUO4() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_512_jhrC5() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacMd5_RYOM0() {
    byte[] key = new byte[] { 1, 2, 3, 4, 5 };
    Mac mac = HmacUtils.getHmacMd5(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256_OoAZ0_1() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_TKsi0_1() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "myValueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_TKsi0_2() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "myValueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
    assertEquals(48, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha384_Evgj0() {
    byte[] key = new byte[] { 1, 2, 3, 4, 5 };
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_MD5_xDfw0() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_1_QsVr1() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_224_SZEz2() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_256_efuJ3() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_384_jVmd4() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_512_TkkK5() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest".getBytes());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_DoKc0_1() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_DoKc0_2() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
    assertEquals(48, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_bESO0_1() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_bESO0_2() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
    assertEquals(16, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_MD5_ToQQ0() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_1_rfoA1() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_224_LoxO2() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_256_AgNZ3() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_384_UovG4() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_512_Dafg5() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
    byte[] result = hmacUtils.hmac("valueToDigest");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_hMWE0_1() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_hMWE0_2() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
    assertEquals(32, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1Hex_PeHA0_1() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1Hex_PeHA0_2() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
    assertEquals(40, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_FKpn0_1() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_FKpn0_2() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
    assertEquals(96, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha1_oING0() {
    byte[] key = new byte[] { 1, 2, 3, 4, 5 };
    Mac mac = HmacUtils.getHmacSha1(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_OkdN0_1() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_OkdN0_2() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
    assertArrayEquals(result, HmacUtils.hmacSha1(key, valueToDigest));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_ehjQ0_1() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_MD5_JVNL0() {
    assertTrue(HmacUtils.isAvailable("HmacMD5"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_1_mlMN1() {
    assertTrue(HmacUtils.isAvailable("HmacSHA1"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_224_CVzd2() {
    assertTrue(HmacUtils.isAvailable("HmacSHA224"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_256_fayl3() {
    assertTrue(HmacUtils.isAvailable("HmacSHA256"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_384_FVgE4() {
    assertTrue(HmacUtils.isAvailable("HmacSHA384"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_512_efCS5() {
    assertTrue(HmacUtils.isAvailable("HmacSHA512"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_UnknownAlgorithm_DBin6() {
    assertFalse(HmacUtils.isAvailable("UnknownAlgorithm"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMac_TpSK0() {
    byte[] key = new byte[] { 1, 2, 3, 4, 5 };
    Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512Hex_evkd0_1() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512Hex_evkd0_2() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
    assertEquals(128, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SYlo0() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
    String result = hmacUtils.hmacHex(valueToDigest);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_MD5_dMVD0() throws IOException {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
    File file = new File("testFile.txt");
    byte[] result = hmacUtils.hmac(file);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_1_soQD1() throws IOException {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
    File file = new File("testFile.txt");
    byte[] result = hmacUtils.hmac(file);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_224_MANc2() throws IOException {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
    File file = new File("testFile.txt");
    byte[] result = hmacUtils.hmac(file);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_256_ZhQs3() throws IOException {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    File file = new File("testFile.txt");
    byte[] result = hmacUtils.hmac(file);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_384_osVq4() throws IOException {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
    File file = new File("testFile.txt");
    byte[] result = hmacUtils.hmac(file);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_512_xFJX5() throws IOException {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
    File file = new File("testFile.txt");
    byte[] result = hmacUtils.hmac(file);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256_abBN0() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
    assertNotNull(result);
    assertArrayEquals(result, HmacUtils.hmacSha256(key, valueToDigest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512_xiCv0() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
    assertNotNull(result);
    assertEquals(64, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256Hex_Jsnx0() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    String result = HmacUtils.hmacSha256Hex(key, valueToDigest);
    assertNotNull(result);
    assertEquals(64, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_TKsi0() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "myValueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
    assertNotNull(result);
    assertEquals(48, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_DoKc0() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
    assertNotNull(result);
    assertEquals(48, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_bESO0() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
    assertNotNull(result);
    assertEquals(16, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_hMWE0() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
    assertNotNull(result);
    assertEquals(32, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1Hex_PeHA0() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
    assertNotNull(result);
    assertEquals(40, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_FKpn0() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
    assertNotNull(result);
    assertEquals(96, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_OkdN0() {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
    assertNotNull(result);
    assertArrayEquals(result, HmacUtils.hmacSha1(key, valueToDigest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512Hex_evkd0() {
    byte[] key = "mySecretKey".getBytes();
    byte[] valueToDigest = "Hello, World!".getBytes();
    String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
    assertNotNull(result);
    assertEquals(128, result.length());
}
}