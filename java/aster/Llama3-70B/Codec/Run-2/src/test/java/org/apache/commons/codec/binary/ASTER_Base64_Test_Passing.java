/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.math.BigInteger;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base64_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUrlSafe_nNDA0() {
    Base64 base64 = new Base64(true);
    assertTrue(base64.isUrlSafe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_ImkB0_1() {
    byte[] binaryData = "Hello, World!".getBytes();
    String encodedString = Base64.encodeBase64String(binaryData);
    assertNotNull(encodedString);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_ImkB0_2() {
    byte[] binaryData = "Hello, World!".getBytes();
    String encodedString = Base64.encodeBase64String(binaryData);
    assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedString);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_KmbS0() {
    BigInteger bigInteger = BigInteger.valueOf(123);
    byte[] result = Base64.encodeInteger(bigInteger);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_BXHa0() {
    byte[] binaryData = new byte[] {1, 2, 3};
    boolean isChunked = true;
    boolean urlSafe = false;
    byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_hLDg0() {
    assertTrue(Base64.isBase64("SGVsbG8gd29ybGQh"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafeString_Pxny0() {
    byte[] binaryData = "Hello, World!".getBytes();
    Base64 base64 = new Base64(true);
    String result = Base64.encodeBase64URLSafeString(binaryData);
    String expected = "SGVsbG8sIFdvcmxkIQ";
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafe_kytl0_1() {
    Base64 base64 = new Base64(true);
    byte[] binaryData = "Hello, World!".getBytes();
    byte[] result = Base64.encodeBase64URLSafe(binaryData);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafe_kytl0_2() {
    Base64 base64 = new Base64(true);
    byte[] binaryData = "Hello, World!".getBytes();
    byte[] result = Base64.encodeBase64URLSafe(binaryData);
    assertArrayEquals("SGVsbG8sIFdvcmxkIQ".getBytes(), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeBase64_IMuI0() {
    String base64String = "SGVsbG8gd29ybGQ=";
    byte[] expected = "Hello world".getBytes();
    byte[] actual = Base64.decodeBase64(base64String);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_PadDefault_QuXR0() {
    assertTrue(Base64.isBase64((byte) '='));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_Decodable_NjrT1() {
    assertTrue(Base64.isBase64((byte) 'A'));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_Negative_NMma3() {
    assertFalse(Base64.isBase64((byte) -1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64Chunked_wvLy0_1() {
    Base64 base64 = new Base64();
    byte[] binaryData = "Hello, World!".getBytes();
    byte[] result = Base64.encodeBase64Chunked(binaryData);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64Chunked_wvLy0_2() {
    Base64 base64 = new Base64();
    byte[] binaryData = "Hello, World!".getBytes();
    byte[] result = Base64.encodeBase64Chunked(binaryData);
    assertArrayEquals(Base64.encodeBase64(binaryData, true), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_QGkB0() {
    byte[] arrayOctet = new byte[] {1, 2, 3, 4};
    boolean result = Base64.isArrayByteBase64(arrayOctet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_1_IXYJ0() {
    byte[] arrayOctet = new byte[] { (byte) 'A', (byte) 'B', (byte) 'C' };
    assertTrue(Base64.isBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_2_CiKi1() {
    byte[] arrayOctet = new byte[] { (byte) 'A', (byte) ' ', (byte) 'C' };
    assertTrue(Base64.isBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_3_krad2() {
    byte[] arrayOctet = new byte[] { (byte) 'A', (byte) '!', (byte) 'C' };
    assertFalse(Base64.isBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_4_gmHF3() {
    byte[] arrayOctet = new byte[] {};
    assertTrue(Base64.isBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet1_TarU0() {
    Base64 base64 = new Base64();
    assertFalse(base64.isInAlphabet((byte) 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet2_apnc1() {
    Base64 base64 = new Base64(10);
    assertFalse(base64.isInAlphabet((byte) -1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet3_Hgnz2() {
    Base64 base64 = new Base64(10, new byte[] {13, 10});
    assertFalse(base64.isInAlphabet((byte) 20));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet4_BWrr3() {
    Base64 base64 = new Base64(10, new byte[] {13, 10}, true, CodecPolicy.LENIENT);
    assertFalse(base64.isInAlphabet((byte) 123));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToIntegerBytes3_inHX2() {
    BigInteger bigInt = new BigInteger("1");
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertArrayEquals(new byte[] {1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_EmptyArray_KvPH0() {
    byte[] binaryData = new byte[0];
    boolean isChunked = false;
    boolean urlSafe = false;
    int maxResultSize = 100;
    byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
    assertArrayEquals(binaryData, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_Chunked_ulVf1() {
    byte[] binaryData = "Hello, World!".getBytes();
    boolean isChunked = true;
    boolean urlSafe = false;
    int maxResultSize = 100;
    byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_NotChunked_KsZp2() {
    byte[] binaryData = "Hello, World!".getBytes();
    boolean isChunked = false;
    boolean urlSafe = false;
    int maxResultSize = 100;
    byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator1_Aars0() {
    Base64 base64 = new Base64(10, new byte[] {1, 2, 3});
    assertArrayEquals(new byte[] {1, 2, 3}, base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator2_kKdI1() {
    Base64 base64 = new Base64(10, new byte[] {4, 5, 6}, true);
    assertArrayEquals(new byte[] {4, 5, 6}, base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator3_mHcq2() {
    Base64 base64 = new Base64(true);
    assertArrayEquals(new byte[] {13, 10}, base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator4_nZqR3() {
    Base64 base64 = new Base64(10);
    assertArrayEquals(new byte[] {13, 10}, base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator5_Xpcg4() {
    Base64 base64 = new Base64();
    assertNull(base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator6_Qgji5() {
    Base64 base64 = new Base64(10, new byte[] {7, 8, 9}, true, CodecPolicy.STRICT);
    assertArrayEquals(new byte[] {7, 8, 9}, base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator7_BNDn6() {
    Base64 base64 = new Base64(10, new byte[] {10, 11, 12}, false, CodecPolicy.LENIENT);
    assertArrayEquals(new byte[] {10, 11, 12}, base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator8_HGwC7() {
    Base64 base64 = new Base64(10, new byte[] {13, 14, 15}, true, CodecPolicy.STRICT);
    assertArrayEquals(new byte[] {13, 14, 15}, base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator9_ylya8() {
    Base64 base64 = new Base64(10, new byte[] {16, 17, 18}, false, CodecPolicy.LENIENT);
    assertArrayEquals(new byte[] {16, 17, 18}, base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator10_jGGm9() {
    Base64 base64 = new Base64(10, new byte[] {19, 20, 21});
    assertArrayEquals(new byte[] {19, 20, 21}, base64.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_xXeZ2_inKw0() {
    Base64 base64 = new Base64(76, new byte[] {13, 10});
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[0];
    base64.decode(in, 0, 0, context); 
    assertFalse(context.eof);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode10_RvcL11_ldYi0() {
    Base64 base64 = new Base64(76, new byte[] {13, 10}, true, CodecPolicy.LENIENT);
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[6];
    base64.decode(in, 0, 6, context); 
    assertEquals(0, context.modulus);
}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode11_PFSI10_jpsI0() {
    Base64 base64 = new Base64(76, new byte[] {13,00}, true);
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[5];
    base64.decode(in, 0, 5, context); 
    assertEquals(1, context.modulus);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode8_HgoO7_CaUR0() {
    Base64 base64 = new Base64();
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context();
    byte[] input = new byte[2];
    input[0] = (byte) 0x40; // a valid base64 character
    input[1] = (byte) 0x00; // invalid base64 character
    base64.decode(input, 0, 2, context);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode6_wNmR5_hVjO0() {
    Base64 base64 = new Base64();
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context();
    byte[] input = new byte[4];
    input[0] = (byte) 0x40; // a valid base64 character
    input[1] = (byte) 0x40; // a valid base64 character
    input[2] = (byte) 0x40; // a valid base64 character
    input[3] = (byte) 0x3D; // '=' pad character
    base64.decode(input, 0, 4, context);
    assertTrue(context.eof);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode10_bsnn9_neJC0() {
    Base64 base64 = new Base64();
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context();
    byte[] input = new byte[4];
    input[0] = (byte) 0x40; // a valid base64 character
    input[1] = (byte) 0x40; // a valid base64 character
    input[2] = (byte) 0x40; // a valid base64 character
    input[3] = (byte) 0x00; // invalid base64 character
    base64.decode(input, 0, 4, context);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode14_AhzE13_SRdf0() {
    Base64 base64 = new Base64(76);
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[8];
    base64.decode(in, 0, 8, context); 
    assertEquals(0, context.modulus);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode13_WRCr12_PLxA0() {
    Base64 base64 = new Base64();
    org.apache.commons.codec.binary.Base64.Context context = new org.apache.commons.codec.binary.Base64.Context(); 
    byte[] in = new byte[7];
    base64.decode(in, 0, 7, context); 
    assertEquals(0, context.modulus); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_ImkB0() {
    byte[] binaryData = "Hello, World!".getBytes();
    String encodedString = Base64.encodeBase64String(binaryData);
    assertNotNull(encodedString);
    assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafe_kytl0() {
    Base64 base64 = new Base64(true);
    byte[] binaryData = "Hello, World!".getBytes();
    byte[] result = Base64.encodeBase64URLSafe(binaryData);
    assertNotNull(result);
    assertArrayEquals("SGVsbG8sIFdvcmxkIQ".getBytes(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64Chunked_wvLy0() {
    Base64 base64 = new Base64();
    byte[] binaryData = "Hello, World!".getBytes();
    byte[] result = Base64.encodeBase64Chunked(binaryData);
    assertNotNull(result);
    assertArrayEquals(Base64.encodeBase64(binaryData, true), result);
}
}