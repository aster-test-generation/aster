/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.math.BigInteger;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base64_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_toIntegerBytes_bitLengthNotMultipleOf8_JyCb0_1() {
    BigInteger bigInt = new BigInteger("12345678901234567890"); // bit length is 59, not multiple of 8
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_toIntegerBytes_bitLengthNotMultipleOf8_JyCb0() {
    BigInteger bigInt = new BigInteger("12345678901234567890"); // bit length is 59, not multiple of 8
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertNotNull(result);
    assertEquals(8, result.length); // bit length 59, so byte length is 8
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_toIntegerBytes_bitLengthMultipleOf8_GlcA1() {
    BigInteger bigInt = new BigInteger("123456789012345678901"); // bit length is 64, multiple of 8
    byte[] result = Base64.toIntegerBytes(bigInt);
    assertNotNull(result);
    assertEquals(8, result.length); // bit length 64, so byte length is 8
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_Lxvk0() {
    Base64 base64 = new Base64();
    byte octet = 10;
    assertTrue(base64.isInAlphabet(octet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStrictDecoding_StrictPolicy_czZh0() {
    Base64 base64 = new Base64(10, new byte[] {}, true, CodecPolicy.STRICT);
    assertTrue(base64.isStrictDecoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDefaultBufferSize_jtmn1() {
        Base64 base64 = new Base64();
        int expectedBufferSize = base64.getDefaultBufferSize();
        assertEquals(expectedBufferSize, base64.getDefaultBufferSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_PadDefault_vTPM0() {
    byte octet = Base64.PAD_DEFAULT;
    boolean result = Base64.isBase64(octet);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_Decodable_pksK1() {
    byte octet = 65; // A valid base64 character
    boolean result = Base64.isBase64(octet);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_Negative_QVxJ2() {
    byte octet = -1;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_RoundUpToNearestMultiple_IVCj0() {
        Base64 base64 = new Base64(76, "\r\n".getBytes());
        byte[] pArray = new byte[57]; // 57 is not a multiple of unencodedBlockSize
        long encodedLength = base64.getEncodedLength(pArray);
        assert encodedLength == 80; // or the expected value based on the implementation
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_CalculateNonChunkedSize_Fgoa1() {
        Base64 base64 = new Base64(0, null);
        byte[] pArray = new byte[64]; // exact multiple of unencodedBlockSize
        long encodedLength = base64.getEncodedLength(pArray);
        assert encodedLength == 88; // or the expected value based on the implementation
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_CastToLongAvoidsOverflow_aTVC2() {
        Base64 base64 = new Base64(76, "\r\n".getBytes());
        byte[] pArray = new byte[Integer.MAX_VALUE]; // large array to test for overflow
        long encodedLength = base64.getEncodedLength(pArray);
        assert encodedLength > 0; // or the expected value based on the implementation
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_LineLengthGreaterThanZero_XAEz3() {
        Base64 base64 = new Base64(76, "\r\n".getBytes());
        byte[] pArray = new byte[100]; // array size that requires chunking
        long encodedLength = base64.getEncodedLength(pArray);
        assert encodedLength > 100; // or the expected value based on the implementation
    }
}