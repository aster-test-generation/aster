/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import org.apache.commons.codec.binary.Hex;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HmacUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_withAvailableAlgorithm_DdNq0() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMac_NullKey_ThrowsIllegalArgumentException_crsb0() {
    try {
        HmacUtils.getInitializedMac("HMAC_MD5", null);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Null key", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMac_InvalidAlgorithm_ThrowsIllegalArgumentException_qFUw1() {
    byte[] key = new byte[] { 1, 2, 3 };
    try {
        HmacUtils.getInitializedMac("InvalidAlgorithm", key);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertNotNull(e.getCause());
        assertTrue(e.getCause() instanceof NoSuchAlgorithmException);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMac_InvalidKey_ThrowsIllegalArgumentException_aOkU2() {
    byte[] key = new byte[] { 1, 2, 3 };
    try {
        HmacUtils.getInitializedMac("HMAC_MD5", key);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertNotNull(e.getCause());
        assertFalse(e.getCause() instanceof InvalidKeyException);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256_anoP0_JmJL0_1() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
    String result = hmacUtils.hmacHex(valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256_anoP0_JmJL0_2() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
    String result = hmacUtils.hmacHex(valueToDigest);
    assertNotEquals(0, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_hMcz0_EzHv0_1() throws IOException {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "dataToDigest".getBytes();
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
    String hmacHex = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
    String result = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_hMcz0_EzHv0_2() throws IOException {
    byte[] key = "secretKey".getBytes();
    byte[] valueToDigest = "dataToDigest".getBytes();
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
    String hmacHex = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
    String result = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
    assertEquals(hmacHex, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512Hex_nftC0_NUnN0() throws IOException {
    byte[] key = "secretKey".getBytes();
    String valueToDigest = "valueToDigest";
    ByteBuffer byteBuffer = ByteBuffer.wrap(valueToDigest.getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
    String hmacHex = hmacUtils.hmacHex(byteBuffer);
    assertNotNull(hmacHex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512_QapW0_xAtJ0_1() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
    String result = hmacUtils.hmacHex(valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512_QapW0_xAtJ0_2() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
    String result = hmacUtils.hmacHex(valueToDigest);
    assertTrue(result.length() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_EPLt0_CLAB0_1() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
    String result = hmacUtils.hmacHex(valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_EPLt0_CLAB0_2() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
    String result = hmacUtils.hmacHex(valueToDigest);
    assertNotEquals(0, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_qSkM0_uAMi0_1() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
    String hmacHex = hmacUtils.hmacHex(valueToDigest);
    assertNotNull(hmacHex);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_qSkM0_uAMi0_2() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
    String hmacHex = hmacUtils.hmacHex(valueToDigest);
    assertNotEquals(0, hmacHex.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_SXpN0_KpeM0_1() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
    String result = hmacUtils.hmacHex(valueToDigest);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_SXpN0_KpeM0_2() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
    String result = hmacUtils.hmacHex(valueToDigest);
    assertNotEquals(0, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256Hex_ijwc0_KVAb0() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    String expectedHex = "f2de0290cf94055c08ca9ccb951c19d037cb2b16f48b6b232b8540496474a934"; // Replace with actual expected value
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
    String actualHex = hmacUtils.hmacHex(valueToDigest);
    assertEquals(expectedHex, actualHex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_fHjf0_zXGo0() throws IOException {
    byte[] key = "secretKey".getBytes();
    ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
    String expectedHex = "2ce95574500895012c33dab18b133d6f2ec5955ed6232e89284627e8daa1e9533abd36df2883936e9ae64e9ea131983c"; // Replace with actual expected value
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
    String actualHex = hmacUtils.hmacHex(valueToDigest);
    assertEquals(expectedHex, actualHex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateHmac_ReturnMac_PZTS5_scDt0() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = "secretKey".getBytes();
    HmacUtils hmacUtils = new HmacUtils(algorithm, key);
    ByteBuffer valueToDigest = ByteBuffer.wrap("inputStream".getBytes());
    String hmacHex = hmacUtils.hmacHex(valueToDigest);
    assertNotNull(hmacHex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateHmac_WhileLoop_QqrW3_nrXi0() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = "secretKey".getBytes();
    HmacUtils hmacUtils = new HmacUtils(algorithm, key);
    ByteBuffer valueToDigest = ByteBuffer.wrap("inputStream".getBytes());
    String hmacHex = hmacUtils.hmacHex(valueToDigest);
    assertEquals("bfa36adcd8c6547c328d5124206898e407486a0d77dc82680f34c277012b803a", hmacHex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateHmac_Reset_NmsX0_KljD0_2() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = "secretKey".getBytes();
    HmacUtils hmacUtils = new HmacUtils(algorithm, key);
    byte[] initialValueBytes = "initialValue".getBytes();
    byte[] hmacBytes = hmacUtils.hmacHex(ByteBuffer.wrap(initialValueBytes)).getBytes();
    byte[] newValueBytes = "newValue".getBytes();
    hmacBytes = hmacUtils.hmacHex(ByteBuffer.wrap(newValueBytes)).getBytes();
    assertEquals(Hex.encodeHexString(hmacBytes), Hex.encodeHexString(hmacUtils.hmacHex(ByteBuffer.wrap(newValueBytes)).getBytes()));}
}