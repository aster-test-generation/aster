/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base32_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullArray_ThrowsNullPointerException_ytNu1() {
        Base32 base32 = new Base32();
        try {
            base32.encode(null);
            assert(false); // should not reach here
        } catch (NullPointerException e) {
            assert(true); // expected
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_VLvD0() {
        Base32 base32 = new Base32();
        String input = "SGVsbG8gd29ybGQh";
        byte[] expected = new byte[]{-84, -19, 5, -126, -13, 68, -47, 104, -13, 68, -47, 104};
        byte[] actual = base32.decode(input);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NullArray_vJPt1() {
        Base32 base32 = new Base32();
        byte[] pArray = null;
        try {
            base32.decode(pArray);
            assert(false);
        } catch (NullPointerException e) {
            assert(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_inAvail_positive_WgaJ8_Dzwr0() {
    Base32 base32 = new Base32();
    byte[] arrayOctet = new byte[1];
    assertFalse(base32.containsAlphabetOrPad(arrayOctet));
    base32.encode(new byte[1], 0, 1, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testContainsAlphabetOrPad_UnVh0_fid1() {
    Base32 base32 = new Base32();
    byte[] arrayOctet = new byte[5];
    for (int i = 0; i < 5; i++) {
        arrayOctet[i] = 0;
    }
    assertTrue(base32.containsAlphabetOrPad(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_inAvail_positive_WgaJ8_Dzwr0_fid1() {
    Base32 base32 = new Base32();
    byte[] arrayOctet = new byte[1];
    assertTrue(base32.containsAlphabetOrPad(arrayOctet));
    base32.encode(new byte[1], 0, 1, null);
}
}