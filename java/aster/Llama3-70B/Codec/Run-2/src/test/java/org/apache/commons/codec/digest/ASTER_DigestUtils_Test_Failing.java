/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.nio.ByteBuffer;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DigestUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1_oUgt0() {
    String data = "Hello, World!";
    byte[] expected = {-90, -113, 103, 122, -25, -12, 123, -115, 103, 122, -25, -12, 123, -115, 103, 122, -25, -12, 123, -115};
    byte[] actual = DigestUtils.sha1(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5_nEJG0() {
    byte[] result = DigestUtils.md5("Hello, World!");
    byte[] expected = {-48, -73, -41, 4, -22, -68, 32, -117, -17, 1, -64, 126, -12, 84, 121, 90};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384_HAzx0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] expected = new byte[]{-106, -43, 115, -103, 122, 121, -114, 122, -103, -115, 122, 121, -114, 122, -103, -115, 122, 121, -114, 122, -103, -115, 122, 121, -114, 122, -103, -115, 122, 121, -114, 122, -103, -115, 122, 121, -114, 122};
    byte[] actual = DigestUtils.sha384(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex_oqhF0() {
    String data = "Hello, World!";
    String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
    String actual = DigestUtils.sha1Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256_BGyn0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] expected = new byte[]{-90, -67, -44, -12, -83, -122, -35, -114, -45, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54};
    byte[] actual = DigestUtils.sha256(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224Hex_tGrF0() {
    String data = "Hello, World!";
    String expected = "4138466333346361643166356330643865303430656434333430366334";
    String actual = DigestUtils.sha512_224Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_WvbX0() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
    byte[] result = digestUtils.digest(data);
    assertArrayEquals(new byte[]{-48, -73, 74, 48, -22, -10, 113, -119, -65, -67, -124, 89, -27, -40, 67, 45}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testShaHex_GuVP0() {
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.shaHex(data);
    assertEquals("2ef7bde608ce5404e97d5f042f95f89f1c232871", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Hex_HwbV0() {
    String data = "Hello, World!";
    String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
    String actual = DigestUtils.sha256Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_384Hex_NuBm0() {
    String data = "Hello, World!";
    String expected = "a69f73c3bd80405db415a892995b6f8a574e5b2f5d836b4c01545ce245ae014f6f7f74377f38faa11415e9e366f79e1";
    String actual = DigestUtils.sha3_384Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2Hex_DBII0() {
    String data = "Hello, World!";
    String expected = "7344387a43a8c69a";
    String actual = DigestUtils.md2Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256Hex_DpYO0() {
    String data = "Hello, World!";
    String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
    String actual = DigestUtils.sha512_256Hex(data);
    Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384Hex_qkEy0() {
    String data = "Hello, World!";
    String expected = "338352e7bd98f09c669d2c1f590577778606e434383531b6d79401f6f6a7aef2f6a7aef2";
    String actual = DigestUtils.sha384Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256_rloB0() {
    String data = "Hello, World!";
    byte[] expected = new byte[] { -90, -67, -44, -12, 55, -65, -12, -34, 45, -12, 78, 90, -12, 34, 56, 78, 90, -12, 34, 56, 78, 90, -12, 34, 56, 78, 90, -12, 34, 56, 78, 90 };
    byte[] actual = DigestUtils.sha256(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512Hex_muZt0() {
    DigestUtils digestUtils = new DigestUtils();
    String data = "Hello, World!";
    String expected = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";
    String actual = DigestUtils.sha3_512Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512Hex_BpOZ0() {
    String data = "Hello, World!";
    String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3c07f164bc6c0e8bd084a484be499f624e024874b099fd25a7bdb8579ddfd951";
    String actual = DigestUtils.sha512Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5_rvRf0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] expected = {-48, -73, -41, 4, -22, -68, 32, -117, -17, 1, -64, 126, -12, 84, -122, 115};
    byte[] actual = DigestUtils.md5(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1_uXzn0() {
    byte[] data = "Hello, World!".getBytes();
    byte[] expected = {-90, -101, 114, 53, 122, -45, 67, 119, -126, 104, 54, 65, 95, -113, 122, 52, 81, 122, 114, 53};
    byte[] actual = DigestUtils.sha1(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256Hex_WPah0() {
    String data = "Hello, World!";
    String expected = "4e8e6156a8ba8a6a6a6a6a6a6a6a6a6a6a6a6a6a";
    String actual = DigestUtils.sha3_256Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_UcvC0() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    byte[] data = "Hello, World!".getBytes();
    byte[] result = digestUtils.digest(data);
    assertArrayEquals(new byte[] { -90, 65, 25, -67, 122, -54, -82, 10, -17, 62, -45, 34, 121, 95, 122, 92 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex_xhlk0() {
    String data = "Hello, World!";
    String expected = "4137e0349f91605a06dda87781d1e4893189792939f98a75";
    String actual = DigestUtils.sha3_224Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1_oUgt0_fid2() {
    String data = "Hello, World!";
    byte[] expected = {10, -113, 103, 122, -25, -12, 123, -115, 103, 122, -25, -12, 123, -115, 103, 122, -25, -12, 123, -115};
    byte[] actual = DigestUtils.sha1(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5_nEJG0_fid2() {
    byte[] result = DigestUtils.md5("Hello, World!");
    byte[] expected = {101, -73, -41, 4, -22, -68, 32, -117, -17, 1, -64, 126, -12, 84, 121, 90};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256_BGyn0_fid2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] expected = new byte[]{-33, -67, -44, -12, -83, -122, -35, -114, -45, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54, -122, -122, -54};
    byte[] actual = DigestUtils.sha256(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_WvbX0_fid2() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
    byte[] result = digestUtils.digest(data);
    assertArrayEquals(new byte[]{101, -73, 74, 48, -22, -10, 113, -119, -65, -67, -124, 89, -27, -40, 67, 45}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256_rloB0_fid2() {
    String data = "Hello, World!";
    byte[] expected = new byte[] {-33, -67, -44, -12, 55, -65, -12, -34, 45, -12, 78, 90, -12, 34, 56, 78, 90, -12, 34, 56, 78, 90, -12, 34, 56, 78, 90, -12, 34, 56, 78, 90 };
    byte[] actual = DigestUtils.sha256(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5_rvRf0_fid2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] expected = {101, -73, -41, 4, -22, -68, 32, -117, -17, 1, -64, 126, -12, 84, -122, 115};
    byte[] actual = DigestUtils.md5(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1_uXzn0_fid2() {
    byte[] data = "Hello, World!".getBytes();
    byte[] expected = {10, -101, 114, 53, 122, -45, 67, 119, -126, 104, 54, 65, 95, -113, 122, 52, 81, 122, 114, 53};
    byte[] actual = DigestUtils.sha1(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_UcvC0_fid2() {
    DigestUtils digestUtils = new DigestUtils("MD5");
    byte[] data = "Hello, World!".getBytes();
    byte[] result = digestUtils.digest(data);
    assertArrayEquals(new byte[] {101, 65, 25, -67, 122, -54, -82, 10, -17, 62, -45, 34, 121, 95, 122, 92 }, result);
}
}