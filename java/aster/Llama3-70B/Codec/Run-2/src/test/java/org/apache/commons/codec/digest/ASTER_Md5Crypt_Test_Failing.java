/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Md5Crypt_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt4_VXGY3() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "$1$12345678";
    String prefix = "$1";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt8_uhgU7() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "salt";
    String prefix = "$1$";
    Random random = new Random();
    Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt9_CLid8() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "$1$12345678";
    String prefix = "$1";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertTrue(result.startsWith(prefix + "12345678" + "$"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt11_aQnY10() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "$1$12345678";
    String prefix = "$1$";
    Random random = new Random();
    String result1 = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    String result2 = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertEquals(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt_cPMD0_fid1() {
    Md5Crypt md5Crypt = new Md5Crypt();
    byte[] keyBytes = "key".getBytes();
    String salt = "salt";
    String prefix = "$1$";
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt_HweM0_fid1() {
    Md5Crypt md5Crypt = new Md5Crypt();
    byte[] keyBytes = "key".getBytes();
    String salt = "salt";
    String result = Md5Crypt.md5Crypt(keyBytes, salt);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testApr1CryptValidSalt_fulP1_fid1() {
    byte[] keyBytes = "password".getBytes();
    String salt = "salt";
    String result = Md5Crypt.apr1Crypt(keyBytes, salt);
    assertEquals("$apr1$salt$...", result.substring(0, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testApr1CryptInvalidSalt_PqSX2_fid1() {
    byte[] keyBytes = "password".getBytes();
    String salt = "invalid$salt";
    String result = Md5Crypt.apr1Crypt(keyBytes, salt);
    assertEquals("$apr1$invalid$salt$...", result.substring(0, 15));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt2_aseW1_fid1() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "salt";
    String prefix = "$1$";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt4_VXGY3_fid1() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "salt";
    String prefix = "$1$salt";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt8_uhgU7_fid1() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "salt";
    String prefix = "";
    Random random = new Random();
    try {
        Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt9_CLid8_fid1() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "salt";
    String prefix = "$1$salt";
    Random random = new Random();
    String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertTrue(result.startsWith(prefix + salt + "$"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Crypt11_aQnY10_fid1() {
    byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
    String salt = "salt";
    String prefix = "$1$";
    Random random = new Random();
    String result1 = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    String result2 = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    assertNotEquals(result1, result2);
}
}