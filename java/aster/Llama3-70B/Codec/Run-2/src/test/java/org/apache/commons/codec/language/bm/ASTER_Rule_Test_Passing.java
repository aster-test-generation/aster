/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Rule_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Approx_RestrictedLanguageSet_RfYK3() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs1 = LanguageSet.from(Collections.singleton("Generic"));
    LanguageSet langs2 = LanguageSet.from(Collections.singleton("Hebrew"));
    LanguageSet langs = langs1.restrictTo(langs2);
    List<Rule> result = Rule.getInstance(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_EmptyLanguageSet_KEBL2() {
    NameType nameType = NameType.SEPHARDIC;
    RuleType rt = RuleType.RULES;
    LanguageSet langs = LanguageSet.from(Collections.emptySet());
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NullNameType_Tvbs6() {
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
    try {
        Rule.getInstanceMap(null, rt, langs);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NullRuleType_vEKq7() {
    NameType nameType = NameType.ASHKENAZI;
    LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
    try {
        Rule.getInstanceMap(nameType, null, langs);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NullLanguageSet_bmXs8_CoBl0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    LanguageSet langs = null;
    try {
        Rule.getInstanceMap(nameType, rt, (Languages.LanguageSet) langs);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Generic_Exact_LanguageSetWithMultipleLanguages_ubAc4_KGuy0() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    Set<String> langsSet = new HashSet<>(Arrays.asList("English", "Spanish", "French"));
    LanguageSet langs = LanguageSet.from(langsSet);
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertFalse(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_AllNull_FxMS9_mfJh0() {
    try {
        Rule.getInstanceMap((NameType)null, (RuleType)null, (LanguageSet)null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Sephardic_Rules_LanguageSetWithMultipleLanguages_QxAf8_PGrh0() {
    NameType nameType = NameType.SEPHARDIC;
    RuleType rt = RuleType.RULES;
    Set<String> langsSet = new HashSet<>(Arrays.asList("Hebrew", "Arabic", "Persian"));
    LanguageSet langs = LanguageSet.from(langsSet);
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertFalse(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NotSingleton_hhsQ2_XFCS1() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    LanguageSet langs = LanguageSet.from(Collections.unmodifiableSet(new HashSet<>(Arrays.asList("lang1", "lang2"))));
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Generic_Exact_EmptyLanguageSet_wusr1_fid2() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    LanguageSet langs = LanguageSet.from(Collections.emptySet());
    List<Rule> result = Rule.getInstance(nameType, rt, langs);
    assertFalse(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Sephardic_Rules_EmptyLanguageSet_miQD5_fid2() {
    NameType nameType = NameType.SEPHARDIC;
    RuleType rt = RuleType.RULES;
    LanguageSet langs = LanguageSet.from(Collections.emptySet());
    List<Rule> result = Rule.getInstance(nameType, rt, langs);
}
}