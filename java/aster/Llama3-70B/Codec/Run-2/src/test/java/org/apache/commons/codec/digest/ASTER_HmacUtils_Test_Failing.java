/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HmacUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_pkBY0_2_fid1() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
    assertArrayEquals(new byte[] { -12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90 }, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512_nzLt0_2() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
    assertArrayEquals(new byte[] { -12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90 }, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1Hex_InfV0() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
    String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256_OoAZ0_2() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
    assertArrayEquals(new byte[] { -12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34 }, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256Hex_wyJe0() {
    String key = "secretKey";
    String valueToDigest = "valueToDigest";
    String expected = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";
    String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_MD5_gBNj0() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest");
    assertEquals("expectedHexValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_1_DBFz1() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest");
    assertEquals("expectedHexValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_224_XrRy2() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest");
    assertEquals("expectedHexValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_256_ahjM3() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest");
    assertEquals("expectedHexValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_384_uVTR4() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest");
    assertEquals("expectedHexValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacHex_SHA_512_yovV5() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
    String result = hmacUtils.hmacHex("valueToDigest");
    assertEquals("expectedHexValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_QahC0() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    String expected = "586f4c7449316a8589a5a5a5a5a5a5a";
    String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
    Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_AMPg0() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    String expected = "03fbd96a874303808c6f9e6f82f436a5a5a52f8f6a5a5a5a5a5a5a5a5a5a";
    String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512Hex_XMlH0() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
    String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_ehjQ0_2() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
    assertArrayEquals(new byte[] { -12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12 }, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_MD5_KLGG0() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
    ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
    byte[] result = hmacUtils.hmac(valueToDigest);
    assertArrayEquals(new byte[] {1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_1_bqQa1() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
    ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
    byte[] result = hmacUtils.hmac(valueToDigest);
    assertArrayEquals(new byte[] {1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_224_EMgW2() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
    ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
    byte[] result = hmacUtils.hmac(valueToDigest);
    assertArrayEquals(new byte[] {1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_256_ETee3() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
    byte[] result = hmacUtils.hmac(valueToDigest);
    assertArrayEquals(new byte[] {1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_384_MIKI4() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
    ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
    byte[] result = hmacUtils.hmac(valueToDigest);
    assertArrayEquals(new byte[] {1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_SHA_512_pPwU5() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
    ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
    byte[] result = hmacUtils.hmac(valueToDigest);
    assertArrayEquals(new byte[] {1, 2, 3}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateHmacNullInput_nsPP1_fxHP0() throws IOException {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    byte[] result = hmacUtils.hmac(new File("dummyFile.txt"));
    InputStream inputStream = null;
    try {
        hmacUtils.hmac(inputStream);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_pkBY0() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
    assertNotNull(result);
    assertArrayEquals(new byte[] { -12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512_nzLt0() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
    assertNotNull(result);
    assertArrayEquals(new byte[] { -12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha256_OoAZ0() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
    assertNotNull(result);
    assertArrayEquals(new byte[] { -12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_ehjQ0() {
    String key = "mySecretKey";
    String valueToDigest = "Hello, World!";
    byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
    assertNotNull(result);
    assertArrayEquals(new byte[] { -12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12 }, result);
}
}