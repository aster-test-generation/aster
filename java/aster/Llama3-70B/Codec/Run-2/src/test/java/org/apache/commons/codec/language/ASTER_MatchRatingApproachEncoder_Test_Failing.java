/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MatchRatingApproachEncoder_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants3_iGMc2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeDoubleConsonants("cuddle");
    assertEquals("cudle", result);
}
@Test
@Timeout(value =2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing2_bIXj1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(1, encoder.leftToRightThenRightToLeftProcessing("abcd", "dcba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveVowels_htVO0_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeVowels("Hello World");
    assert "Hll Wrld".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveVowelsWithVowelAsFirstLetter_WxIH1_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeVowels("Aloha");
    assert "Aloh".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanName_withAccents_YuFD1_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.cleanName("Rmy Dupont");
    assertEquals("REMYDUPONT", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants1_hHan0_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeDoubleConsonants("hello");
    assert "HELLO".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants3_iGMc2_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeDoubleConsonants("cuddle");
    assert "CUDDLE".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveAccentsWithAccents_CPiA2_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("hello", encoder.removeAccents("hllo"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing1_LbZi0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("abc", "cba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing4_vkqN3() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(3, encoder.leftToRightThenRightToLeftProcessing("abcdef", "fedcba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing5_ufSO4() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(4, encoder.leftToRightThenRightToLeftProcessing("abcdefg", "gfedcba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing6_DMOp5() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals(5, encoder.leftToRightThenRightToLeftProcessing("abcdefgh", "hgfedcba"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeMultipleCharacters_dQsU3_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("bcdxyz", encoder.encode("abcd efxyz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithVowels_HOps4_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("bcdxyz", encoder.encode("abced efxyz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithDoubleConsonants_Qgax5_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("bcdxyz", encoder.encode("abbcceed efxyz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithSpaces_lmah6_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("bcdxyz", encoder.encode("ab bc de ef xyz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithSpecialCharacters_LZXI7_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("bcdxyz", encoder.encode("ab!bc@de#ef$xyz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithUpperCase_sAmi8_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertEquals("bcdxyz", encoder.encode("ABCD EFXYZ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals8_BHye7_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert !encoder.isEncodeEquals("test", "tst");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEquals12_dMrl11_fid1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assert !encoder.isEncodeEquals("abcdefg", "abcdEfGh");
}
}