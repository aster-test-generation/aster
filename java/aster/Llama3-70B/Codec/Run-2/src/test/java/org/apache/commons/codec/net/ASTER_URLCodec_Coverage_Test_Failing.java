/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.util.BitSet;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.BitSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_URLCodec_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_JzRF1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = "Hello%20World".getBytes();
        assertEquals("[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]", codec.decode(bytes));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_OnLK1() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = "Hello World".getBytes();
        assertEquals("[72, 101, 108, 108, 111, 43, 87, 111, 114, 108, 100]", codec.encode(bytes));
    }
@Test
public void testEncode_ThrowsNullPointerException_WhenInputIsNullAndCharsetIsNull_ojiB3_ZnVs0() throws Exception {
    URLCodec urlCodec = new URLCodec((String) null);
    try {
        urlCodec.encode(null, null);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeUrl_withNegativeByte_XIlU0_RUpw0() {
    URLCodec urlCodec = new URLCodec();
    byte[] bytes = new byte[]{-1};
    BitSet urlsafe = new BitSet(256);
    for (char c : "-_.~".toCharArray()) {
        urlsafe.set(c);
    }
    byte[] expected = new byte[]{37, 50, 56};
    byte[] actual = URLCodec.encodeUrl(urlsafe, bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_JzRF1_fid2() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = "Hello%20World".getBytes();
        assertEquals("Hello World", codec.decode(bytes));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_OnLK1_fid2() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = "Hello World".getBytes();
        assertEquals("Hello+World", codec.encode(bytes));
    }
}