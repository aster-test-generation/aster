/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PercentCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_pgbT0_VWtt0() {
    PercentCodec codec = new PercentCodec();
    try {
        byte[] result = codec.encode(null);
        assertNull(result);
    } catch (EncoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeByteArray_epre1_OcDq0() {
    PercentCodec codec = new PercentCodec();
    byte[] bytes = new byte[] { 1, 2, 3 };
    try {
        byte[] result = codec.encode(bytes); // Changed decode to encode
        assertArrayEquals(bytes, result);
    } catch (EncoderException e) { // Changed DecoderException to EncoderException
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeAlwaysEncodeChars_oWqN3_gmLU0() {
    PercentCodec codec = new PercentCodec(new byte[] { 65 }, false);
    byte[] bytes = "A".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException was thrown");
    }
    assertNotNull(result);
    assertNotEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithEncoding_JrJK2_RWAP0() {
    PercentCodec codec = new PercentCodec(new byte[] { 32 }, true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
    assertNotEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeContainsSpace_OFjN4_nmOQ0() {
    PercentCodec codec = new PercentCodec(new byte[0], true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
    assertNotEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNoEscape_WlWF2_AqVC0() {
    PercentCodec codec = new PercentCodec();
    byte[] input = "hello".getBytes();
    try {
        byte[] result = codec.encode(input);
        assertArrayEquals(input, result);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeEscape_UHPu3_pFzL0() {
    PercentCodec codec = new PercentCodec();
    byte[] input = "he%20llo".getBytes();
    byte[] result = new byte[0];
    try {
        result = codec.decode(input);
    } catch (DecoderException e) {
    }
    assertArrayEquals("he llo".getBytes(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithEncodingNeeded_Uwso2_BJjx0() {
    PercentCodec codec = new PercentCodec(new byte[] {' '}, true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
    assertNotEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_WpTS0_EJDe0() {
    PercentCodec codec = new PercentCodec();
    try {
        byte[] result = codec.encode(null);
        assertNull(result);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodePlusForSpace_FKYz4_iROU0() {
    PercentCodec codec = new PercentCodec(new byte[0], true);
    byte[] input = "he+llo".getBytes();
    byte[] result = new byte[0];
    try {
        result = codec.encode(input);
    } catch (EncoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_KOWW0_dPvR0() {
    PercentCodec codec = new PercentCodec();
    try {
        byte[] result = codec.encode(null); // Changed from decode to encode
        assertNull(result);
    } catch (EncoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_ANez0_MvzT1() throws EncoderException {
    PercentCodec codec = new PercentCodec();
    byte[] result = codec.encode(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithPlusForSpace_TscZ3_aWIt0() {
    PercentCodec codec = new PercentCodec(new byte[] {' '}, true);
    byte[] bytes = "Hello+World".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNoEncoding_czYy1_hiGW0() {
    PercentCodec codec = new PercentCodec();
    byte[] bytes = "HelloWorld".getBytes();
    try {
        byte[] result = codec.encode(bytes);
        assertArrayEquals(bytes, result);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAsciiChar_VqdI4_JGKc0() {
    PercentCodec codec = new PercentCodec();
    byte[] bytes = "Hello123".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException was thrown");
    }
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithPlusForSpace_QwKI3_PyPF0() {
    PercentCodec codec = new PercentCodec(new byte[256], true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
    assertNotEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAlwaysEncodeChars_JVtm2_YaBD0() {
    byte[] alwaysEncodeChars = new byte[256];
    alwaysEncodeChars['a'] = 1;
    PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
    byte[] bytes = "aHelloWorld".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAlwaysEncodeChars_WtnE2_XyWk0() {
    byte[] alwaysEncodeChars = new byte[256];
    alwaysEncodeChars['a'] = 1;
    PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
    byte[] bytes = "HelloaWorld".getBytes();
    try {
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithWillEncode_JWKm4_XwQn0() {
    PercentCodec pc = new PercentCodec();
    byte[] bytes = new byte[] {(byte) 0x80};
    byte[] result = new byte[0];
    try {
        result = pc.encode(bytes);
        assertEquals("%80", new String(result));
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAlwaysEncodeChars_sNzt3_Exgt0() {
    PercentCodec codec = new PercentCodec("abc".getBytes(), false);
    byte[] bytes = "abc".getBytes();
    try {
        byte[] result = codec.encode(bytes); // Error was here
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    try {
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
        assertNotEquals(bytes, result);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithPlusForSpace_womo2_aPSC0() {
    PercentCodec codec = new PercentCodec(new byte[256], true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertEquals("+", new String(result, 5, 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAlwaysEncodeCharsAndPlusForSpace_OfiK5_fqWI0() {
    byte[] alwaysEncodeChars = new byte[256];
    alwaysEncodeChars['a'] = 1;
    PercentCodec codec = new PercentCodec(alwaysEncodeChars, true);
    byte[] bytes = "Hello aWorld".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
    assertNotEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNoAlwaysEncodeChars_PYZT5_jAiP0() {
    PercentCodec codec = new PercentCodec(new byte[0], false);
    byte[] bytes = "HelloWorld".getBytes();
    try {
        byte[] result = codec.encode(bytes);
        assertArrayEquals(bytes, result);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNoAlwaysEncodeChars_PYZT5_Wfqh1() {
    PercentCodec codec = new PercentCodec(new byte[0], false);
    byte[] bytes = "HelloWorld".getBytes();
    try {
        byte[] result = codec.encode(bytes); // No error, encode method throws EncoderException
        assertArrayEquals(bytes, result);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithPlusForSpaceAndAlwaysEncodeChars_mRbC4_ovKs0() {
    PercentCodec codec = new PercentCodec("abc".getBytes(), true);
    byte[] bytes = "a b c".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
    assertNotEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithWillEncode_BJhP4_CfWH0() {
    PercentCodec codec = new PercentCodec();
    byte[] bytes = new byte[] { (byte) 0x80 };
    byte[] result = null;
    try {
        result = codec.encode(bytes);
        assertEquals("%80", new String(result));
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithEncoding_wWZt2_uFwe0() {
    PercentCodec pc = new PercentCodec(new byte[] {'a', 'b', 'c'}, true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = new byte[0];
    try {
        result = pc.encode(bytes);
    } catch (EncoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAlwaysEncodeChars_pxnE4_CfNx0() {
    PercentCodec codec = new PercentCodec(new byte[] {'a'}, false);
    byte[] bytes = "HelloaWorld".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes); // Error was here
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
    assertNotEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAlwaysEncodeChars_pxnE4_chVZ1() {
    PercentCodec codec = new PercentCodec(new byte[] {'a'}, false);
    byte[] bytes = "HelloaWorld".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertNotNull(result);
    assertNotEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeEmpty_gqjO1_HnQm0() {
    PercentCodec codec = new PercentCodec();
    try {
        byte[] result = codec.decode(new byte[0]);
        assertEquals(0, result.length);
    } catch (DecoderException e) {
        fail("DecoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeEmpty_gqjO1_Tpxa1() throws DecoderException {
    PercentCodec codec = new PercentCodec();
    byte[] result = codec.decode(new byte[0]);
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithPlusForSpace_TgAc3_BLcW0() {
    PercentCodec pc = new PercentCodec(new byte[] {'a', 'b', 'c'}, true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = null;
    try {
        result = pc.encode(bytes);
        assertEquals("+", new String(result, 5, 1));
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithContainsSpace_RNxf5_tVnw0() {
    PercentCodec pc = new PercentCodec(new byte[] {'a', 'b', 'c'}, true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = null;
    try {
        result = pc.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithContainsSpace_QcPO5_UGCg0() {
    PercentCodec codec = new PercentCodec(new byte[256], true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertFalse(result.length > bytes.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAlwaysEncodeChars_IkER3_PrsE0() {
    byte[] alwaysEncodeChars = new byte[256];
    alwaysEncodeChars['a'] = 1;
    PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
    byte[] bytes = "HelloaWorld".getBytes();
    byte[] result = null;
    try {
        result = codec.encode(bytes);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
    assertEquals("aWo", new String(result, 5, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_lTah0_AGRw1() throws EncoderException {
    PercentCodec pc = new PercentCodec();
    byte[] result = pc.encode(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNoEncoding_Lhys1_Nzeu0() {
    PercentCodec pc = new PercentCodec();
    byte[] bytes = "HelloWorld".getBytes();
    try {
        byte[] result = pc.encode(bytes);
        assertArrayEquals(bytes, result);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithPlusForSpace_szAl2_RDog0() {
    PercentCodec codec = new PercentCodec(new byte[256], true);
    byte[] bytes = "Hello World".getBytes();
    try {
        byte[] result = codec.encode(bytes);
        assertArrayEquals("Hello+World".getBytes(), result);
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithPlusForSpace_szAl2_FwWz1() throws EncoderException {
    PercentCodec codec = new PercentCodec(new byte[256], true);
    byte[] bytes = "Hello World".getBytes();
    byte[] result = codec.encode(bytes);
    assertArrayEquals("Hello+World".getBytes(), result);
}
}