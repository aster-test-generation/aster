/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SoundexUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanNull_fvfs0() {
    String result = SoundexUtils.clean(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanEmpty_MjNc1() {
    String result = SoundexUtils.clean("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanOnlyLetters_qmpJ2() {
    String result = SoundexUtils.clean("hello");
    assertEquals("HELLO", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanWithNonLetters_gcey3() {
    String result = SoundexUtils.clean("hello123");
    assertEquals("HELLO", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifferenceEncodedNullAndNotNull_OrPP0() {
    SoundexUtils soundexUtils = new SoundexUtils();
    int result = SoundexUtils.differenceEncoded(null, "test");
    assert result == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifferenceEncodedNotNullAndNull_BBEe1() {
    SoundexUtils soundexUtils = new SoundexUtils();
    int result = SoundexUtils.differenceEncoded("test", null);
    assert result == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifferenceEncodedEmptyStrings_BtmS2() {
    SoundexUtils soundexUtils = new SoundexUtils();
    int result = SoundexUtils.differenceEncoded("", "");
    assert result == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifferenceEncodedIdenticalStrings_yXbC3() {
    SoundexUtils soundexUtils = new SoundexUtils();
    int result = SoundexUtils.differenceEncoded("test", "test");
    assert result == 4;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifferenceEncodedDifferentStrings_dZIN4() {
    SoundexUtils soundexUtils = new SoundexUtils();
    int result = SoundexUtils.differenceEncoded("test", "best");
    assert result == 3;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmptyNull_DyGd0() {
    assertTrue(SoundexUtils.isEmpty(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmptyEmptyString_jHTo1() {
    assertTrue(SoundexUtils.isEmpty(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmptyNonEmptyString_Xqzh2() {
    assertFalse(SoundexUtils.isEmpty("Hello"));
}
}