/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import org.apache.commons.codec.DecoderException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.BitSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuotedPrintableCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_anDm0() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = "Hello, World!".getBytes();
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultCharset1_nPLm0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    assertEquals("UTF-8", codec.getDefaultCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultCharset2_SpzK1() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-16"));
    assertEquals("UTF-16", codec.getDefaultCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultCharset3_Ekim2() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-32");
    assertEquals("UTF-32", codec.getDefaultCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultCharset4_FAVJ3() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    assertEquals("UTF-8", codec.getDefaultCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeByteArray_xeSH1() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = "Hello, World!".getBytes();
    Object result = codec.encode(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_vOhj0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String sourceStr = "Hello World";
    Charset sourceCharset = Charset.forName("UTF-8");
    String result = codec.encode(sourceStr, sourceCharset);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_QaFJ1() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String sourceStr = null;
    Charset sourceCharset = Charset.forName("UTF-8");
    String result = codec.encode(sourceStr, sourceCharset);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset1_YaPb0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    Charset charset = codec.getCharset();
    assertNotNull(charset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset2_rhjh1() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    Charset charset = codec.getCharset();
    assertNotNull(charset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset3_qNnB2() {
    Charset charset = Charset.forName("UTF-8");
    QuotedPrintableCodec codec = new QuotedPrintableCodec(charset);
    Charset result = codec.getCharset();
    assertEquals(charset, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset4_WXmd3() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
    Charset charset = codec.getCharset();
    assertNotNull(charset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset5_ksdQ4() {
    Charset charset = Charset.forName("UTF-8");
    QuotedPrintableCodec codec = new QuotedPrintableCodec(charset, true);
    Charset result = codec.getCharset();
    assertEquals(charset, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable1_HIvr0() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable2_dzqp1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable3_IbiX2() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    boolean strict = false;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable4_Emvw3() {
    BitSet printable = null;
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable10_xIeV9() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32, 9, 10};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable11_boRu10() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] {32, 9, 10, 13};
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable1_TntH0() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 65, 66, 67 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 65, 66, 67 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable2_UHbh1() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 65, 66, 67 };
    boolean strict = false;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 65, 66, 67 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable3_UbCt2() {
    BitSet printable = null;
    byte[] bytes = new byte[] { 65, 66, 67 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(new byte[] { 65, 66, 67 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable4_NZAM3() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = null;
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable7_eWCj6() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(10, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable8_pqou7() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74 };
    boolean strict = false;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(10, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable9_IenF8() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable5_AvjM4() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable9_uThb8() {
    BitSet printable = new BitSet();
    printable.set(32, 127);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertEquals(36, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable1_tIid0() {
    BitSet printable = new BitSet();
    byte[] bytes = new byte[0];
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable5_XCmw4() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable7_aCdU6() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36, 37 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable9_gMiA8() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36, 37, 38, 39 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable2_BFAz1() {
    BitSet printable = null;
    byte[] bytes = new byte[0];
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable9_RJxk8() {
    BitSet printable = new BitSet();
    printable.set(32);
    byte[] bytes = new byte[] { 32, 33, 34, 35, 36, 37, 38 };
    boolean strict = true;
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeCharsetString_Xawi4_xONG0() throws IllegalCharsetNameException, IllegalArgumentException, UnsupportedCharsetException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
    try {
        String result = codec.decode("sourceStr");
        assertNotNull(result);
    } catch (DecoderException e) {
        fail("DecoderException was thrown");
    } catch (Exception e) {
        fail("An unexpected exception was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_NeVT1_xZik0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    try {
        byte[] result = codec.encodeQuotedPrintable(null, null, true);
        assertNull(result);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeQuotedPrintableEmpty_LrmZ1_KQRS0() {
    byte[] bytes = new byte[0];
    try {
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(new byte[0], result);
    } catch (DecoderException e) {
        fail("DecoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_gQgm0_srsU0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    try {
        byte[] result = codec.encodeQuotedPrintable(null, "Hello World".getBytes(), false);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeByteArray_JECd1_cHMD0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = "Hello, World!".getBytes();
    try {
        Object result = codec.decode(bytes);
    } catch (DecoderException e) {
        fail("DecoderException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeQuotedPrintableCR_HRuW4_VZKF0() {
    byte[] bytes = "Hello\rWorld".getBytes();
    try {
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals("HelloWorld".getBytes(), result);
    } catch (DecoderException e) {
        fail("DecoderException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeStrict_gIID1_pTWz0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    try {
        String result = codec.decode("sourceStr");
        assertNotNull(result);
    } catch (DecoderException e) {
        fail("DecoderException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeStrict_gIID1_RrUe1() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    String result = codec.decode("sourceStr");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_yREQ0_HSqd0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    try {
        byte[] bytes = "Hello World".getBytes("UTF-8");
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, false);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeCharset_OOXV2_sVfx0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
    try {
        String result = codec.decode("sourceStr");
        assertNotNull(result);
    } catch (DecoderException e) {
        fail("DecoderException occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeString_gBDL2_JqYb0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String str = "Hello, World!";
    String result = null;
    try {
        result = (String) codec.decode(str);
    } catch (DecoderException e) {
        fail("DecoderException was thrown");
    }
    assertEquals(str, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_aDOJ0_VCPu0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] result = codec.encodeQuotedPrintable(null, new byte[0], false);
    assertNotNull(result);
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_AMKs1_UExe0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String sourceStr = null;
    Charset sourceCharset = Charset.forName("UTF-8");
    try {
        String decodedStr = codec.decode(sourceStr, sourceCharset);
        assertNull(decodedStr);
    } catch (DecoderException e) {
        fail("DecoderException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeStrict_fmeS1_TFzu0() {
    try {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, "Hello World".getBytes(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeCharsetStrict_EFCH3_foOy0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, "Hello World".getBytes(), true);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_tlhY0_eepL0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    try {
        String result = codec.decode("sourceStr");
        assertNotNull(result);
    } catch (DecoderException e) {
        fail("DecoderException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_tlhY0_uLXT1() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String result = codec.decode("sourceStr");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeQuotedPrintableNull_udbZ0_yGJw1() {
    byte[] result = null;
    try {
        result = QuotedPrintableCodec.decodeQuotedPrintable(null);
    } catch (DecoderException e) {
    }
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeCharsetStrict_MuBw3_SiOc0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    try {
        String result = codec.decode("sourceStr");
        assertNotNull(result);
    } catch (DecoderException e) {
        fail("DecoderException should not be thrown");
    }
}
}