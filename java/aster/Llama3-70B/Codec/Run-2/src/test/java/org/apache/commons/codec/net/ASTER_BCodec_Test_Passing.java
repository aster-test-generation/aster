/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_rwMU0() {
    BCodec bCodec = new BCodec("UTF-8");
    try {
        String result = bCodec.decode("Hello World");
        assertNotNull(result);
    } catch (DecoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStrictDecoding_Strict_tnBh0() {
    BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    assertTrue(bCodec.isStrictDecoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStrictDecoding_Lenient_eIrC1() {
    BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
    assertFalse(bCodec.isStrictDecoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_NullBytes_JajK0() {
    BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    byte[] result = bCodec.doDecoding(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_ValidBytes_kbvf1_1() {
    BCodec bCodec = new BCodec("UTF-8");
    byte[] bytes = "Hello, World!".getBytes();
    byte[] result = bCodec.doDecoding(bytes);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncodingNull_dwlD0() {
    BCodec bCodec = new BCodec("UTF-8");
    byte[] result = bCodec.doEncoding(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding1_RmKW0() {
    BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
    assertEquals("B", bCodec.getEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding2_Qzef1() {
    BCodec bCodec = new BCodec(Charset.defaultCharset());
    assertEquals("B", bCodec.getEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding3_HKmW2() {
    BCodec bCodec = new BCodec("UTF-8");
    assertEquals("B", bCodec.getEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding4_btEA3() {
    BCodec bCodec = new BCodec();
    assertEquals("B", bCodec.getEncoding());
}
@Test
public void testEncodeInvalidType_Igzw2_kVda0() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    try {
        codec.encode("strSource", "sourceCharset"); 
    } catch (EncoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_hwBw0_vmzX0() {
    BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    try {
        String result = bCodec.encode("Hello World", "UTF-8");
        assertNotNull(result);
    } catch (EncoderException e) {
        fail("EncoderException thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeString_tCvr1_dQxc0() {
    BCodec bCodec = new BCodec("UTF-8");
    try {
        String result = bCodec.decode("Hello World");
        assertEquals("Hello World", result);
    } catch (DecoderException e) {
        // No-op
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_LLar0_KIaW1() {
    BCodec bCodec = new BCodec();
    Object result = null;
    try {
        result = bCodec.decode(null);
    } catch (DecoderException e) {
    }
    assertNull(result);
}
}