/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Languages_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_NameType_GtKn0() {
    Languages languages = Languages.getInstance(NameType.ASHKENAZI);
    assertNotNull(languages);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_withValidResourceName_aYMG0_1() {
    String languagesResourceName = "valid_resource_name";
    try {
        Languages languages = Languages.getInstance(languagesResourceName);
        assertNull(languages);
    } catch (IllegalArgumentException e) {
        // Expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_withInvalidResourceName_iebR1() {
    String languagesResourceName = "invalid_resource_name";
    try {
        Languages.getInstance(languagesResourceName);
        fail("Expected exception not thrown");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_withNullResourceName_LeaI3() {
    String languagesResourceName = null;
    try {
        Languages.getInstance(languagesResourceName);
        fail("Expected exception not thrown");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_withResourceNameHavingExtendedComment_fjAk4_1() {
    String languagesResourceName = "resource_name_with_extended_comment";
    try {
        Languages languages = Languages.getInstance(languagesResourceName);
        fail("Expected getInstance to throw an exception, but it did not");
    } catch (IllegalArgumentException e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_withResourceNameHavingExtendedComment_fjAk4_2() {
    String languagesResourceName = "resource_name_with_extended_comment";
    try {
        Languages languages = Languages.getInstance(languagesResourceName);
        assertNull(languages);
    } catch (IllegalArgumentException e) {
        // Expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_withResourceNameHavingEmptyLines_eInS5_1() {
    String languagesResourceName = "resource_name_with_empty_lines";
    try {
        Languages languages = Languages.getInstance(languagesResourceName);
        fail("Expected getInstance to throw an exception, but it did not");
    } catch (IllegalArgumentException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_withResourceNameHavingEmptyLines_eInS5_2() {
    String languagesResourceName = "resource_name_with_empty_lines";
    try {
        Languages languages = Languages.getInstance(languagesResourceName);
        fail("Expected getInstance to throw an exception, but it did not");
    } catch (IllegalArgumentException e) {
        assertNotNull(e.getMessage());
    }
}
}