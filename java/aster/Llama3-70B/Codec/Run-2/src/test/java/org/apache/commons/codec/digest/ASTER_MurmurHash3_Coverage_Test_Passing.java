/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash3_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase15_rahb0() {
        byte[] data = new byte[23];
        for (int i = 0; i < 23; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 23, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase14_edWQ1() {
        byte[] data = new byte[22];
        for (int i = 0; i < 22; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 22, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase13_AeTO2() {
        byte[] data = new byte[21];
        for (int i = 0; i < 21; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 21, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase12_vMdZ3() {
        byte[] data = new byte[20];
        for (int i = 0; i < 20; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 20, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase11_uDjm4() {
        byte[] data = new byte[19];
        for (int i = 0; i < 19; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 19, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase10_jtwP5() {
        byte[] data = new byte[18];
        for (int i = 0; i < 18; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 18, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase9_UjPz6() {
        byte[] data = new byte[17];
        for (int i = 0; i < 17; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 17, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase8_VKTD7() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase7_AwYB8() {
        byte[] data = new byte[15];
        for (int i = 0; i < 15; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 15, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase6_cceP9() {
        byte[] data = new byte[14];
        for (int i = 0; i < 14; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 14, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase5_UCce10() {
        byte[] data = new byte[13];
        for (int i = 0; i < 13; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 13, 1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase4_agJO11() {
        byte[] data = new byte[12];
        for (int i = 0; i < 12; i++) {
            data[i] = (byte) i;
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase15_IYeq0() {
        byte[] data = new byte[23];
        for (int i = 0; i < 23; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 23, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase14_cmOa1() {
        byte[] data = new byte[22];
        for (int i = 0; i < 22; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 22, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase13_BwtJ2() {
        byte[] data = new byte[21];
        for (int i = 0; i < 21; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 21, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase12_jbKx3() {
        byte[] data = new byte[20];
        for (int i = 0; i < 20; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 20, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase11_pMXy4() {
        byte[] data = new byte[19];
        for (int i = 0; i < 19; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 19, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase10_ITso5() {
        byte[] data = new byte[18];
        for (int i = 0; i < 18; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 18, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase9_lEMv6() {
        byte[] data = new byte[17];
        for (int i = 0; i < 17; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 17, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase8_uLBr7() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase7_EqLN8() {
        byte[] data = new byte[15];
        for (int i = 0; i < 15; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 15, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase6_YrNt9() {
        byte[] data = new byte[14];
        for (int i = 0; i < 14; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 14, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase5_MCTY10() {
        byte[] data = new byte[13];
        for (int i = 0; i < 13; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 13, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_withNullString_TVDR1_vLSm0() {
    byte[] data = null;
    int actual = MurmurHash3.hash32(data, 0);
}
}