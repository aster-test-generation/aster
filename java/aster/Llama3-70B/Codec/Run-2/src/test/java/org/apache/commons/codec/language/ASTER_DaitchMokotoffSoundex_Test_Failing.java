/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DaitchMokotoffSoundex_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sbbf0() {
    DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
    String result = daitchMokotoffSoundex.encode("Schmidt");
    assertEquals("S535", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex2_oKOZ1() {
    DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex(true);
    String result = daitchMokotoffSoundex.soundex("MnNm");
    assert result.contains("m");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex3_QRYT2() {
    DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
    String result = daitchMokotoffSoundex.soundex(null);
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexNullInput_etsR0_fid1() {
    DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
    assertNull(daitchMokotoffSoundex.soundex(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexEmptyInput_Bzxl1() {
    DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex(true);
    assertEquals("", daitchMokotoffSoundex.soundex(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexValidInput_OIwd2_fid1() {
    DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
    assertEquals("K152|K152", daitchMokotoffSoundex.soundex("Klein"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sbbf0_fid1() {
    DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
    String result = daitchMokotoffSoundex.encode("Schmidt");
    assert "S553".equals(result);
}
}