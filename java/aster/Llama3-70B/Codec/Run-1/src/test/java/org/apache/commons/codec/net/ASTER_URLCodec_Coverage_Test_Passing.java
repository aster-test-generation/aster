/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByte_NtuC0_1() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        byte[] bytes = new byte[]{-1, 0, 1};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByte_NtuC0_2() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        byte[] bytes = new byte[]{37, 0, 1};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('%', result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByte_NtuC0_3() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        byte[] bytes = new byte[]{-1, 70, 1};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('F', result[1]);
    }

    @Test
    @Timeout(value = 70, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByte_NtuC0_4() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        byte[] bytes = new byte[]{-1, 0, 70};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('F', result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_1() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(6, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_2() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{37, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('%', result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_3() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 70, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('F', result[1]);
    }

    @Test
    @Timeout(value = 70, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_4() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 70, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('F', result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_5() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('%', result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_6() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('2', result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_7() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('0', result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_uEAy2() throws EncoderException {
        URLCodec codec = new URLCodec();
        assertEquals("Hello+World", codec.encode("Hello World"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonNullString_vwAL1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode("Hello World");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeCustomCharset_nxnM4() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String result = urlCodec.encode("Hello World");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_DoesNotThrowException_WhenInputIsNotNull_FYGQ2() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "someString";
        urlCodec.decode(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_kaHK2() throws DecoderException {
        URLCodec codec = new URLCodec();
        assertEquals("Hello World", codec.decode("Hello%20World"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QBAw6_FZTD0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        codec.encode("test", "utf-8"); // No exception expected
    }
}