/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Soundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMultipleChars_zPCR3_fid2() {
        Soundex soundex = new Soundex();
        assertEquals("A120", soundex.soundex("Able"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSpecialCaseHW_xbxc4_fid2() {
        Soundex soundex = new Soundex("01230120022455012623010202", true);
        assertEquals("A120", soundex.soundex("AbleHow"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSilentMarker_lxEz5_fid2() {
        Soundex soundex = new Soundex();
        assertEquals("A000", soundex.soundex("Axl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexConsecutiveSameDigits_ADpW6_fid2() {
        Soundex soundex = new Soundex();
        assertEquals("A120", soundex.soundex("Ablebb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNonAlphaChar_JsIU7_fid2() {
        Soundex soundex = new Soundex();
        assertEquals("A000", soundex.soundex("A1b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexUpperCase_kbUo8_fid2() {
        Soundex soundex = new Soundex();
        assertEquals("A120", soundex.soundex("ABLE"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexLowerCase_xWpM9_fid2() {
        Soundex soundex = new Soundex();
        assertEquals("A120", soundex.soundex("able"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMixedCase_ovBy10_fid2() {
        Soundex soundex = new Soundex();
        assertEquals("A120", soundex.soundex("AbLe"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength1_MiFp0() {
        Soundex soundex = new Soundex();
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength2_iDbS1_fid2() {
        Soundex soundex = new Soundex("mapping");
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength3_Uatu2_fid2() {
        Soundex soundex = new Soundex("mapping", true);
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength4_VeDS3_fid2() {
        char[] mapping = {'a', 'b', 'c'};
        Soundex soundex = new Soundex(mapping);
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_taIC0() {
        Soundex soundex = new Soundex("01230120022455012623010202");
        try {
            int result = soundex.difference("Hello", "Halo");
            assert result == 2;
        } catch (EncoderException e) {
            assert false;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jeQV0_fid2() {
        Soundex soundex = new Soundex("01230120022455012623010202");
        assertEquals("B452", soundex.encode("Baker"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_Rika1_fid2() {
        Soundex soundex = new Soundex();
        assertEquals("A163", soundex.encode("Ashcraft"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_AjJG2_fid2() {
        Soundex soundex = new Soundex("01230120022455012623010202", true);
        assertEquals("B200", soundex.encode("Babbit"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode4_tUiZ3_fid2() {
        char[] mapping = "01230120022455012623010202".toCharArray();
        Soundex soundex = new Soundex(mapping);
        assertEquals("B200", soundex.encode("Babbit"));
    }
}