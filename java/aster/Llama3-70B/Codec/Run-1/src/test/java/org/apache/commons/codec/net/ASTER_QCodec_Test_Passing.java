/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding1_lxcQ0() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding2_CaaF1() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding3_tTpR2() {
        QCodec qCodec = new QCodec();
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNull_VHiz0() {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_RLNA2() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        byte[] bytes = "Hello World".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingEncodeBlanks_ssfq3() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks_VtqM0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        assertTrue(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks_withCharset_LYvj1() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        qCodec.setEncodeBlanks(false);
        assertFalse(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks_withCharsetString_DaJE2() {
        QCodec qCodec = new QCodec("UTF-8");
        qCodec.setEncodeBlanks(true);
        assertTrue(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset1_nJlO0() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset(), qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset2_IYDw1() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_hDCD0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String result = qCodec.encodeText("Hello", "UTF-8");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset1_PzyL0() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset().name(), qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset2_WCTU1() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("UTF-8", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset3_KLIA2() {
        QCodec qCodec = new QCodec();
        assertNotNull(qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextNull_kmAT0() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec();
        String result = codec.decodeText(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_HzdL0_1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World";
        Charset charset = Charset.forName("UTF-8");
        String result = qCodec.encodeText(text, charset);
        assertNotNull(result);
    }

    @Test
    public void testDecodeTextNoPostfix_MZqN3_rqSh0() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec();
        String text = "_Q=Hello_World?";
        DecoderException exception = assertThrows(DecoderException.class, () -> codec.decodeText(text));
    }

    @Test
    public void testDecodeTextNoCharset_dFzP4_SyPt0() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec();
        String text = "_Q=?_Hello_World?=Q_";
        DecoderException exception = assertThrows(DecoderException.class, () -> codec.decodeText(text));
    }

    @Test
    public void testDecodeTextNoCharset_dFzP4_PmTF1() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec();
        String text = "_Q=?_Hello_World?=Q_";
        assertThrows(DecoderException.class, () -> codec.decodeText(text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingNull_luTh0_FiOe1() {
        QCodec qCodec = new QCodec();
        byte[] result = null;
        try {
            result = qCodec.doDecoding(null);
        } catch (DecoderException e) {
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingNoUnderscores_Ukes1_jMUL0() {
        QCodec qCodec = new QCodec("UTF-8");
        byte[] bytes = "Hello World".getBytes();
        byte[] result = new byte[0];
        try {
            result = qCodec.doDecoding(bytes);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingEmptyArray_pVdE3_ZlWX0() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        byte[] bytes = new byte[0];
        byte[] result = new byte[0];
        try {
            result = qCodec.doDecoding(bytes);
            assertEquals(0, result.length);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingSingleUnderscore_qXyU4_vRZY0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = "_".getBytes();
        byte[] expectedResult = " ".getBytes();
        byte[] result = new byte[0];
        try {
            result = qCodec.doDecoding(bytes);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
        assertArrayEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_loAb0_IpcJ1() {
        QCodec qCodec = new QCodec();
        Object result = null;
        try {
            result = qCodec.decode(null);
        } catch (DecoderException e) {
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_dDFs1_KlnK0() {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "Hello";
        try {
            String result = qCodec.encodeText(str, Charset.forName("UTF-8"));
            assertNotEquals(str, result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingEmpty_grLb1_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        byte[] bytes = new byte[0];
        byte[] result = qCodec.doEncoding(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks1_XDoh0_fid1() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        boolean result = qCodec.isEncodeBlanks();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks2_xLCJ1_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks3_XxuJ2_fid1() {
        QCodec qCodec = new QCodec();
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset3_hnOP2_fid1() {
        QCodec qCodec = new QCodec();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_HzdL0_2_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World";
        Charset charset = Charset.forName("UTF-8");
        String result = qCodec.encodeText(text, charset);
        assertEquals("=?UTF-8?Q?Hello World?=", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_EncoderException_Jhxl6_deNJ0_fid1() {
        QCodec qCodec = new QCodec();
        String text = "Hello=World";
        Charset charset = Charset.forName("UTF-8");
        try {
            qCodec.encodeText(text, charset);
        } catch (EncoderException e) {
            // No operation
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_phuy0_ZIMQ0_fid1() {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello World";
        Charset sourceCharset = Charset.forName("UTF-8");
        String result = null;
        try {
            result = qCodec.encodeText(sourceStr, sourceCharset);
        } catch (EncoderException e) {
            fail("EncoderException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_sTBT0_GIZQ0_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            String result = qCodec.encodeText("Hello World", Charset.forName("UTF-8"));
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QdNi0_NUuC0_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            String result = qCodec.encodeText("Hello, World!", Charset.forName("UTF-8"));
            assertEquals("=?UTF-8?Q?Hello, World!?=", result);
        } catch (EncoderException e) {
            fail("EncoderException occurred");
        }
    }
}