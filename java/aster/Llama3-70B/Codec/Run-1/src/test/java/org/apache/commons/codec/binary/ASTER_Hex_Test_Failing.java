/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_rMPr0_qmsX0() {
        Hex hex = new Hex();
        ByteBuffer byteBuffer = ByteBuffer.wrap("Hello, World!".getBytes());
        char[] toDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        char[] result = hex.encodeHex(byteBuffer, toDigits);
        assertArrayEquals(new char[]{'4', '8', '6', '5', '6', 'c', '6', 'c', '6', 'f', '2', 'c', '2', '0', '5', '7', '6', 'f', '6', 'f', '6', 'd', '2', '1', 'a', 'a'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName3_kuca2_fid1() {
        Hex hex = new Hex();
        assertEquals("UTF-16", hex.getCharsetName()); // default charset
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_YYDl0_fid1() {
        Hex hex = new Hex();
        assertEquals("Hex@" + Integer.toHexString(System.identityHashCode(hex)) + "[charsetName=null]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_ewTZ1_fid1() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("Hex@" + Integer.toHexString(System.identityHashCode(hex)) + "[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_SMXP2_fid1() {
        Hex hex = new Hex("UTF-8");
        assertEquals("Hex@" + Integer.toHexString(System.identityHashCode(hex)) + "[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset3_dfUZ2_fid1() {
        Hex hex = new Hex();
        assertNull(hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_rMPr0_qmsX0_fid1() {
        Hex hex = new Hex();
        ByteBuffer byteBuffer = ByteBuffer.wrap("Hello, World!".getBytes());
        char[] toDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        char[] result = hex.encodeHex(byteBuffer, toDigits);
        assertArrayEquals(new char[]{'4', '8', '6', '5', '6', 'c', '6', 'c', '6', 'f', '2', 'c', '2', '0', '5', '7', '6', 'f', '6', 'f', '6', 'd', '2', '1'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_kCGi0_fXYF0_fid1() {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap("48656c6c6f2c20576f726c6421".getBytes());
        byte[] result = new byte[0];
        try {
            result = hex.decode(buffer);
            assertArrayEquals(new byte[]{-17, 65, 65, 65, 65, 72, 44, 32, 87, 111, 114, 108, 100, 33}, result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_HsxF1_kKGu0_fid1() {
        Hex hex = new Hex("UTF-8");
        byte[] bytes = "Hello".getBytes();
        try {
            byte[] result = hex.decode(bytes);
            assertArrayEquals(bytes, result);
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }
}