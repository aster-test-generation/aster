/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_BmbG1() {
        URLCodec codec = new URLCodec("UTF-8");
        byte[] bytes = "Hello World".getBytes();
        assertEquals("[72, 101, 108, 108, 111, 43, 87, 111, 114, 108, 100]", codec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_withoutCharset_VfIg1_fid1() {
        URLCodec urlCodec = new URLCodec();
        assertNull(urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_withoutCharset_ROyH1_fid1() {
        URLCodec urlCodec = new URLCodec();
        assertNull(urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_BmbG1_fid1() {
        URLCodec codec = new URLCodec("UTF-8");
        byte[] bytes = "Hello World".getBytes();
        assertEquals("Hello+World", codec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlSpace_Lumv2_fid1() {
        BitSet urlsafe = new BitSet();
        urlsafe.set(' ');
        byte[] bytes = "Hello World".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals("+", new String(result, result.length - 1, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlMultipleBytes_gqzA5_fid1() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        byte[] bytes = "abc".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals("a%62c", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dRTe0() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] bytes = "Hello World!".getBytes();
        byte[] result = urlCodec.encode(bytes);
        assertArrayEquals(new byte[]{(byte) 'H', (byte) 'e', (byte) 'l', (byte) 'l', (byte) 'o', (byte) '%', (byte) '2', (byte) '0', (byte) 'W', (byte) 'o', (byte) 'r', (byte) 'l', (byte) 'd', (byte) '!'}, result);
    }
}