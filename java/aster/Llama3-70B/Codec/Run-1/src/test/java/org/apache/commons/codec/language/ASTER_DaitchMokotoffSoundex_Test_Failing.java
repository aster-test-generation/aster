/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DaitchMokotoffSoundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_gPqB0() {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
        String result = daitchMokotoffSoundex.soundex("Katz");
        assert "K320|K330".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNull_Uwjf1() {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex(true);
        String result = daitchMokotoffSoundex.soundex(null);
        assert null == result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmpty_GsaQ2() {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
        String result = daitchMokotoffSoundex.soundex("");
        assert "".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex2_rBXa1() {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex(true);
        String result = daitchMokotoffSoundex.soundex("mn abc");
        assert result.contains("m");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex3_GJxP2() {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
        String result = daitchMokotoffSoundex.soundex("   ");
        assert result.isEmpty();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_xpjj1_fid1() {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex(true);
        assertEquals("D500", daitchMokotoffSoundex.encode("Daitch"));
    }
}