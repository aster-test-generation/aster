/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase15_nKuP0() {
        byte[] data = new byte[23];
        for (int i = 0; i < 23; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 23, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase14_Egff1() {
        byte[] data = new byte[22];
        for (int i = 0; i < 22; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 22, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase13_WtPv2() {
        byte[] data = new byte[21];
        for (int i = 0; i < 21; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 21, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase12_Vbpd3() {
        byte[] data = new byte[20];
        for (int i = 0; i < 20; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 20, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase11_TthB4() {
        byte[] data = new byte[19];
        for (int i = 0; i < 19; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 19, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase10_YkmH5() {
        byte[] data = new byte[18];
        for (int i = 0; i < 18; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 18, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase9_qXbx6() {
        byte[] data = new byte[17];
        for (int i = 0; i < 17; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 17, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase8_sdPe7() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase7_gPra8() {
        byte[] data = new byte[15];
        for (int i = 0; i < 15; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 15, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase6_oYsi9() {
        byte[] data = new byte[14];
        for (int i = 0; i < 14; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 14, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase5_LhHU10() {
        byte[] data = new byte[13];
        for (int i = 0; i < 13; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 13, 1);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_withSwitchCase4_MoCj11() {
        byte[] data = new byte[12];
        for (int i = 0; i < 12; i++) {
            data[i] = (byte) i;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case15_QUCm0() {
        byte[] data = new byte[23];
        for (int i = 0; i < 23; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 23, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case14_wTdR1() {
        byte[] data = new byte[22];
        for (int i = 0; i < 22; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 22, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case13_jjcr2() {
        byte[] data = new byte[21];
        for (int i = 0; i < 21; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 21, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case12_ODOS3() {
        byte[] data = new byte[20];
        for (int i = 0; i < 20; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 20, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case11_XOSR4() {
        byte[] data = new byte[19];
        for (int i = 0; i < 19; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 19, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case10_xxBV5() {
        byte[] data = new byte[18];
        for (int i = 0; i < 18; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 18, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case9_UsYP6() {
        byte[] data = new byte[17];
        for (int i = 0; i < 17; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 17, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case8_VTEv7() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case7_boJl8() {
        byte[] data = new byte[15];
        for (int i = 0; i < 15; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 15, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case6_sZkb9() {
        byte[] data = new byte[14];
        for (int i = 0; i < 14; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128x64(data, 0, 14, 1);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_withNonNullByteArray_kpqX0_tDgh0() {
        byte[] data = "Hello, World!".getBytes();
        int result = MurmurHash3.hash32(data, data.length);
        assertTrue(result != 0); // Instead, assert that the result is not zero
    }
}