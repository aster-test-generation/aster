/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.StandardCharsets;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Md5Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_PZlA0() {
        Md5Crypt md5Crypt = new Md5Crypt();
        byte[] keyBytes = "password".getBytes();
        String result = Md5Crypt.apr1Crypt(keyBytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt1_iwVl0() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = null;
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt2_YpQp1() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "salt1234567890"; // salt should be at least 8 characters long
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt("password", salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt3_GtKR2() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = null;
        String prefix = "$2$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt4_dmEP3() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "rounds=1000$kr$";
        String prefix = "$2$";
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt("password", salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt5_lCiQ4() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = null;
        String prefix = "$5$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt6_JdLN5() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "rounds=1000$mySalt";
        String prefix = "$5$";
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt("password", salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt7_Rxjb6() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = null;
        String prefix = "$6$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt8_Lmep7() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "rounds=1000$mySalt";
        String prefix = "$6$";
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt("password", salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt9_jcNv8() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = null;
        String prefix = "$7$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt11_BJIc10() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = null;
        String prefix = "$8$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_iMtN0() {
        Md5Crypt md5Crypt = new Md5Crypt();
        String result = Md5Crypt.apr1Crypt("password");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_sYZN0() {
        Md5Crypt md5Crypt = new Md5Crypt();
        String keyBytes = "key";
        String salt = "rounds=1000$kr$";
        String result = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_lftK0() {
        Md5Crypt md5Crypt = new Md5Crypt();
        byte[] keyBytes = "key".getBytes();
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptNullSalt_BnKq0() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String result = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptValidSalt_NDkp1() {
        byte[] keyBytes = "password".getBytes();
        String salt = "salt";
        String result = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertTrue(result.startsWith(Md5Crypt.APR1_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_FJZv0() {
        Md5Crypt md5Crypt = new Md5Crypt();
        byte[] keyBytes = "key".getBytes();
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_bUav0() {
        Md5Crypt md5Crypt = new Md5Crypt();
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt(keyBytes, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_HcMC0() {
        Md5Crypt md5Crypt = new Md5Crypt();
        String result = Md5Crypt.apr1Crypt("keyBytes", "salt");
        assertNotNull(result);
    }
}