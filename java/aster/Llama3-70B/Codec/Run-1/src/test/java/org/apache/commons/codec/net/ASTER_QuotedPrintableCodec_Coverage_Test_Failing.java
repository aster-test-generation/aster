/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_OLlf0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "some encoded string";
        String expectedDecodedStr = "some decoded string";
        String decodedStr = codec.decode(sourceStr);
        assertEquals(expectedDecodedStr, decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_Whitespace_zHrn0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        BitSet printable = new BitSet();
        printable.set(0, 256);
        printable.clear(' ');
        printable.clear('\t');
        byte[] bytes = new byte[]{(byte) ' ', (byte) '\t'};
        byte[] expected = new byte[]{'=', '3', '0', '=', '3', '1', '\r', '\n'};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_JYdX0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String expected = "=48ello,=20World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_CR_gQit0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{(byte) '=', (byte) '\r', (byte) 'A'};
        byte[] expected = new byte[]{};
        assertArrayEquals(expected, QuotedPrintableCodec.decodeQuotedPrintable(input));
    }
}