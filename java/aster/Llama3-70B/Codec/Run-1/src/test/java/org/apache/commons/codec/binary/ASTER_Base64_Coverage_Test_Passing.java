/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_bitLengthNotMultipleOf8_QESM0_1() {
        BigInteger bigInt = new BigInteger("12345678901234567890"); // bit length is 59, not multiple of 8
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_bitLengthNotMultipleOf8_QESM0() {
        BigInteger bigInt = new BigInteger("12345678901234567890"); // bit length is 59, not multiple of 8
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertNotNull(result);
        assertEquals(8, result.length); // bitlen is 64, so result length is 8
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_bitLengthMultipleOf8_cofO1() {
        BigInteger bigInt = new BigInteger("123456789012345678901"); // bit length is 64, multiple of 8
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertNotNull(result);
        assertEquals(8, result.length); // bitlen is 64, so result length is 8
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_PadDefault_ReturnsTrue_flmU0() {
        byte octet = Base64.PAD_DEFAULT;
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidOctet_ReturnsTrue_gOaD1() {
        byte octet = 10; // assuming 10 is a valid octet
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidOctet_ReturnsFalse_Zeqi2() {
        byte octet = -1; // assuming -1 is an invalid octet
        boolean result = Base64.isBase64(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDefaultBufferSize_cSWC1() {
        Base64 base64 = new Base64();
        int expectedBufferSize = base64.getDefaultBufferSize();
        assertEquals(expectedBufferSize, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_StrictPolicy_cWrQ0() {
        Base64 base64 = new Base64(76, new byte[]{'\n'}, true, CodecPolicy.STRICT);
        assertTrue(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_XvHR0() {
        Base64 base64 = new Base64();
        byte octet = 10; // a valid octet value
        boolean result = base64.isInAlphabet(octet);
        assert result; // should return true
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_OutOfRange_CXgF1() {
        Base64 base64 = new Base64();
        byte octet = 123; // an out of range octet value
        boolean result = base64.isInAlphabet(octet);
        assert !result; // should return false
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_Negative_BPMs2() {
        Base64 base64 = new Base64();
        byte octet = -10; // a negative octet value
        boolean result = base64.isInAlphabet(octet);
        assert !result; // should return false
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_ThrowsIllegalArgumentException_WhenInputArrayTooBig_WmVb0() {
        byte[] binaryData = new byte[1024 * 1024]; // 1MB array
        boolean isChunked = false;
        boolean urlSafe = false;
        int maxResultSize = 1024; // 1KB
        try {
            Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input array too big, the output array would be bigger (" + (binaryData.length * 4 / 3) + ") than the specified maximum size of " + maxResultSize, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_ThrowsIllegalArgumentException_WhenEncodedLengthExceedsMaxResultSize_uKor1() {
        byte[] binaryData = new byte[1024 * 1024]; // 1MB array
        boolean isChunked = true;
        boolean urlSafe = false;
        int maxResultSize = 1024; // 1KB
        try {
            Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input array too big, the output array would be bigger (" + (binaryData.length * 4 / 3) + ") than the specified maximum size of " + maxResultSize, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_RoundUpToNearestMultiple_vyLH0() {
        Base64 base64 = new Base64(76, "\r\n".getBytes());
        byte[] pArray = new byte[57]; // 57 is not a multiple of unencodedBlockSize
        long encodedLength = base64.getEncodedLength(pArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_CalculateNonChunkedSize_FYGI1() {
        Base64 base64 = new Base64(0, null);
        byte[] pArray = new byte[64]; // exact multiple of unencodedBlockSize
        long encodedLength = base64.getEncodedLength(pArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_CastToLongToAvoidOverflow_EIvb2() {
        Base64 base64 = new Base64(76, "\r\n".getBytes());
        byte[] pArray = new byte[Integer.MAX_VALUE]; // large array to test overflow
        long encodedLength = base64.getEncodedLength(pArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_LineLengthGreaterThanZero_tZEB3() {
        Base64 base64 = new Base64(76, "\r\n".getBytes());
        byte[] pArray = new byte[100]; // array size that requires chunking
        long encodedLength = base64.getEncodedLength(pArray);
    }
}