/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Rule_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_nMSy0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        String lang = "en";
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList(lang)));
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_autl0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        String lang = "en";
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, lang);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Singleton_LFtM0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_yhwY3() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertEquals(1, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Generic_Exact_AtOY4() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertEquals(1, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Sephardic_Rules_AaXt5() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertEquals(1, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance4_vixF3_oWBd0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<String>());
        langs.getAny();
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance5_FdZh4_lwIW0() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance6_qiqP5_VPld0() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<String>());
        langs.getAny();
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NotSingleton_xOQL1_YRev0() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_nMSy0_fid2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        String lang = "en";
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList(lang)));
        Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, languageSet);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_autl0_fid2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Singleton_LFtM0_fid2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertEquals(Collections.emptyMap(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Sephardic_Rules_AaXt5_fid2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance5_FdZh4_lwIW0_fid2() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NotSingleton_xOQL1_YRev0_fid2() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNull(result);
    }
}