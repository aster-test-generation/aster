/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PhoneticEngine_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dPrefix_znYA0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "d'John";
        String expected = "(john)-(djohhn)";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_prefixRemainder_oPlw1() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "de John";
        String expected = "(john)-(dejohn)";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_sephardicPrefix_OaoK3() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
        String input = "d'John";
        String expected = "john";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ashkenaziPrefix_zter4() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 10);
        String input = "de John";
        String expected = "de-john";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_concatWords_bUZq7() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "John Doe";
        String expected = "-john-doe";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_singleWord_NilT8() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "John";
        String expected = "john";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_multipleWords_RfWi9() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "John Doe Jane";
        String expected = "-john-doe-jane";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_emptyWords_SFyN10() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String input = "";
        String expected = "";
        assertEquals(expected, engine.encode(input, LanguageSet.from(Collections.singleton("en"))));
    }
}