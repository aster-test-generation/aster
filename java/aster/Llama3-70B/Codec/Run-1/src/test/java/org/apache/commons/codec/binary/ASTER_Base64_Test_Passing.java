/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_TNdx0() {
        Base64 base64 = new Base64(true);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_HLDa0() {
        String base64String = "SGVsbG8gd29ybGQ=";
        byte[] expected = "Hello world".getBytes();
        assertArrayEquals(expected, Base64.decodeBase64(base64String));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_YQiw0_1() {
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64String(binaryData);
        assertNotNull(encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_YQiw0_2() {
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64String(binaryData);
        assertNotEquals("", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_1_txoY0() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_2_vhae1() {
        BigInteger bigInt = new BigInteger("123456789012345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_4_XXIB3() {
        BigInteger bigInt = new BigInteger("0");
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_sGgI0() {
        Base64 base64 = new Base64(10, new byte[]{13, 10});
        assertArrayEquals(new byte[]{13, 10}, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_KuLE1() {
        Base64 base64 = new Base64(10, new byte[]{13, 10}, true);
        assertArrayEquals(new byte[]{13, 10}, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_afGW2() {
        Base64 base64 = new Base64(10, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertArrayEquals(new byte[]{13, 10}, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_VAuK3() {
        Base64 base64 = new Base64();
        assertNull(base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_iciv0_1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        byte[] result = Base64.encodeBase64Chunked(binaryData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_iciv0_2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        byte[] result = Base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(Base64.encodeBase64(binaryData, true), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_HjZo0_1() {
        Base64 base64 = new Base64(true);
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertNotNull(encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_HjZo0_2() {
        Base64 base64 = new Base64(true);
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_kCkr0_1() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] result = Base64.encodeBase64(binaryData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_jxsB0() {
        BigInteger bigInteger = BigInteger.valueOf(123);
        byte[] result = Base64.encodeInteger(bigInteger);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_fJUD0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        boolean urlSafe = false;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_fjwv0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        byte[] result = Base64.encodeBase64(binaryData, isChunked);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_LTLJ0() {
        assertTrue(Base64.isBase64("SGVsbG8gd29ybGQh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_vTfE1() {
        Base64 base64 = new Base64(10);
        assertFalse(base64.isInAlphabet((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet3_GHxO2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20});
        assertTrue(base64.isInAlphabet((byte) 50));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet4_Ijiz3() {
        Base64 base64 = new Base64(10, new byte[]{10, 20}, true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 200));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_EmptyArray_NioJ0() {
        byte[] binaryData = new byte[0];
        boolean isChunked = false;
        boolean urlSafe = false;
        int maxResultSize = 100;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(binaryData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_Chunked_TLZm1() {
        byte[] binaryData = "Hello, World!".getBytes();
        boolean isChunked = true;
        boolean urlSafe = false;
        int maxResultSize = 100;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_URLSafe_XNut2() {
        byte[] binaryData = "Hello, World!".getBytes();
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_EmptyArray_xdhW0() {
        byte[] arrayOctet = new byte[0];
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Base64Array_ajaW1() {
        byte[] arrayOctet = "SGVsbG8gd29ybGQh".getBytes();
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_NonBase64Array_nnAv2() {
        byte[] arrayOctet = "Hello world!".getBytes();
        assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_WhitespaceArray_SqMA3() {
        byte[] arrayOctet = "   ".getBytes();
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_nklT0_1() {
        Base64 base64 = new Base64(true);
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] result = Base64.encodeBase64URLSafe(binaryData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_nklT0_2() {
        Base64 base64 = new Base64(true);
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] result = Base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals("SGVsbG8sIFdvcmxkIQ".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_PadDefault_zPjV0() {
        assertTrue(Base64.isBase64((byte) '='));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Decodable_rOUy1() {
        assertTrue(Base64.isBase64((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Negative_FhAg3() {
        assertFalse(Base64.isBase64((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_HlSO0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte[] result = base64.decode("SGVsbG8gd29ybGQ=");
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_MtAT0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{1, 2, 3, 4, 5};
        String result = base64.encodeAsString(pArray);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_KeqW0() {
        Base64 base64 = new Base64();
        String basen = "test";
        boolean result = base64.isInAlphabet(basen);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthNullArray_WGMJ0() {
        int result = Base64.toLength(null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthNonNullArray_nXdV1() {
        byte[] array = new byte[5];
        int result = Base64.toLength(array);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArr_aVxr0() throws EncoderException {
        Base64 base64 = new Base64();
        byte[] bytes = new byte[]{1, 2, 3};
        Object result = base64.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_ZYry0() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[0];
        byte[] result = base64.encode(pArray);
        assertArrayEquals(pArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_bYdI1_1() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[]{1, 2, 3};
        byte[] result = base64.encode(pArray);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_bYdI1_2() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[]{1, 2, 3};
        byte[] result = base64.encode(pArray);
        assertNotEquals(pArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_THnK0() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[]{(byte) 'A', (byte) 'B', (byte) 'C'};
        assertTrue(base64.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_lrnt1() {
        Base64 base64 = new Base64(76, new byte[]{(byte) '\n'});
        byte[] arrayOctet = new byte[]{(byte) ' ', (byte) 'A', (byte) 'B'};
        assertTrue(base64.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet3_oIwN2() {
        Base64 base64 = new Base64(true);
        byte[] arrayOctet = new byte[]{(byte) '-', (byte) '_', (byte) 'A'};
        assertTrue(base64.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet4_ioRt3() {
        Base64 base64 = new Base64(76);
        byte[] arrayOctet = new byte[]{(byte) 'A', (byte) 'B', (byte) '\t'};
        assertTrue(base64.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet5_vCrz4() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[]{(byte) 'A', (byte) 'B', (byte) 'C'};
        assertTrue(base64.isInAlphabet(arrayOctet, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_rokx0() {
        Base64 base64 = new Base64();
        byte[] pArray = "Hello, World!".getBytes();
        String result = base64.encodeToString(pArray);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_mxMu0() {
        assertTrue(Base64.isWhiteSpace((byte) ' '));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_STRICT_UhiV0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertTrue(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_LENIENT_OVBT1() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.LENIENT);
        assertFalse(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_ByteArray_YQpb0() throws DecoderException {
        Base64 base64 = new Base64();
        byte[] bytes = new byte[]{1, 2, 3};
        Object result = base64.decode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_String_oBFk1() throws DecoderException {
        Base64 base64 = new Base64();
        String str = "SGVsbG8=";
        Object result = base64.decode(str);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_ZlkQ0() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[0];
        byte[] result = base64.encode(pArray, 0, pArray.length);
        assertArrayEquals(pArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_dhzu1_1() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[]{1, 2, 3};
        byte[] result = base64.encode(pArray, 0, pArray.length);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_dhzu1_2() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[]{1, 2, 3};
        byte[] result = base64.encode(pArray, 0, pArray.length);
        assertNotEquals(pArray.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_iyeN0() {
        Base64 base64 = new Base64(10, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        CodecPolicy policy = base64.getCodecPolicy();
        assertSame(CodecPolicy.STRICT, policy);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EmptyArray_BpGl0() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[0];
        byte[] result = base64.decode(pArray);
        assertArrayEquals(pArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_Oywq1() {
        Base64 base64 = new Base64(76, new byte[]{'\n'});
        byte[] pArray = "SGVsbG8gd29ybGQh".getBytes();
        byte[] expectedResult = "Hello world!".getBytes();
        byte[] result = base64.decode(pArray);
        assertArrayEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparator_JoFI0() {
        byte[] chunkSeparator = Base64.getChunkSeparator();
        assertNotNull(chunkSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_NullArray_hpCk0() {
        Base64 base64 = new Base64();
        boolean result = base64.containsAlphabetOrPad(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_EmptyArray_ujWC1() {
        Base64 base64 = new Base64();
        boolean result = base64.containsAlphabetOrPad(new byte[0]);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_ContainsAlphabet_xnxh3() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[]{'A'}; // assuming 'A' is in the alphabet
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasData_false_Mblj1_gmRj0() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[0];
        assertFalse(base64.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_QSoa0() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[]{base64.pad};
        assertTrue(base64.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_PositiveArray_ReturnsTrue_PDVI1_gmXf0() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[]{(byte) 'A', (byte) 'B', (byte) '='};
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_YQiw0() {
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64String(binaryData);
        assertNotNull(encodedString);
        assertNotEquals("", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_iciv0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        byte[] result = Base64.encodeBase64Chunked(binaryData);
        assertNotNull(result);
        assertArrayEquals(Base64.encodeBase64(binaryData, true), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_nklT0() {
        Base64 base64 = new Base64(true);
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] result = Base64.encodeBase64URLSafe(binaryData);
        assertNotNull(result);
        assertArrayEquals("SGVsbG8sIFdvcmxkIQ".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_bYdI1() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[]{1, 2, 3};
        byte[] result = base64.encode(pArray);
        assertNotNull(result);
        assertNotEquals(pArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_dhzu1() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[]{1, 2, 3};
        byte[] result = base64.encode(pArray, 0, pArray.length);
        assertNotNull(result);
        assertNotEquals(pArray.length, result.length);
    }
}