/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_UnixCrypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_lXlg0() {
        String original = "password";
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_svzh0() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_EfCu0() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_ccKp1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        try {
            UnixCrypt.crypt(original, "invalid");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_Asbe2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_czxj3() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[0];
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_Ohmf5() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "a".getBytes();
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_RYgT6() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "abcdefghijklmnopqrstuvwxyz".getBytes();
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_yRyS0() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String result = UnixCrypt.crypt(original, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_PoHm1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_zRlj2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String salt = "abc";
        String result = UnixCrypt.crypt(new String(original));
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_EIIw3() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{};
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullOriginal_yhfy4() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = null;
        String salt = "ab";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLargeOriginal_giMp5() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[100];
        for (int i = 0; i < 100; i++) {
            original[i] = (byte) i;
        }
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("abQeX8x7ieVh2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithZeroBytes_FdsO6() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{0, 0, 0, 0, 0, 0, 0, 0};
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("abmF1QH4PEr.E", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithMaxBytes_BHQY7() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{127, 127, 127, 127, 127, 127, 127, 127};
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("ab4EDcrfIZc5E", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithMixedBytes_LPaV8() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 127, 0, 64, 32, 16, 8, 4};
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_VuDw2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{};
        String result = UnixCrypt.crypt(original, "AB");
        assertEquals("AB", result.substring(0, 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_lIYe3() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3};
        String result = UnixCrypt.crypt(original, "AB");
        assertEquals("AB", result.substring(0, 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_mESi4() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String result = UnixCrypt.crypt(original, "AB");
        assertEquals("AB", result.substring(0, 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptySalt_wAkA6() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        try {
            UnixCrypt.crypt(original, "");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSingleCharSalt_MPMJ7() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        try {
            UnixCrypt.crypt(original, "A");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValid_twzq8() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String result = UnixCrypt.crypt(original, "AB");
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_VZOI2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "a".getBytes();
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_hYiX3() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "abcdefghijklmnopqrstuvwxyz".getBytes();
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_QIxu4() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[0];
        String salt = "AB";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_DOUI1() {
        byte[] original = "password".getBytes();
        String salt = "5a";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("5amJPpbbCTnE", result.substring(0, 12));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_dEaw3() {
        byte[] original = new byte[0];
        String salt = "5a";
        String result = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullOriginal_dkrp4() {
        byte[] original = null;
        String salt = "5a";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_Rznn5() {
        byte[] original = "p".getBytes();
        String salt = "5a";
        String result = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_dlXE6() {
        byte[] original = "passwordpassword".getBytes();
        String salt = "5a";
        String result = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_HNTT0() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_IeUC1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        try {
            UnixCrypt.crypt(original, "invalid");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_jFUi2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{};
        String result = UnixCrypt.crypt(original, "AB");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSingleByteOriginal_UIdc3() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1};
        String result = UnixCrypt.crypt(original, "AB");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptMultiByteOriginal_jIKz4() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String result = UnixCrypt.crypt(original, "AB");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptySalt_gsgR6() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        try {
            UnixCrypt.crypt(original, "");
            fail();
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSingleCharSalt_WHjg7() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        try {
            UnixCrypt.crypt(original, "A");
            fail();
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_pCCu2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "ab");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSingleByteOriginal_cnCl3() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "a".getBytes();
        String result = UnixCrypt.crypt(original, "ab");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptMultiByteOriginal_SuKl4() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "abcd".getBytes();
        String result = UnixCrypt.crypt(original, "ab");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptySalt_uwyl6() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        try {
            UnixCrypt.crypt(original, "");
            fail();
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSingleCharSalt_RavA7() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        try {
            UnixCrypt.crypt(original, "a");
            fail();
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValid_uFVJ8() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = "original".getBytes();
        String result = UnixCrypt.crypt(original, "ab");
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_EIhT0() {
        String original = "password";
        String expected = UnixCrypt.crypt(original);
        assertNotNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptDesSetKey_JiJB7_FsEi0() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String cryptResult = unixCrypt.crypt("test");
        assertNotNull(cryptResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptPermOp_uDfD7_Topq0_1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        int a = 0x12345678;
        int b = 0x90123456;
        int[] results = new int[2];
        permOp(a, b, 4, 0xf0f0f0f, results);
        assertEquals(a ^ ((a >>> 4 ^ b) & 0xf0f0f0f) << 4, results[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptPermOp_uDfD7_Topq0_2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        int a = 0x12345678;
        int b = 0x90123456;
        int[] results = new int[2];
        permOp(a, b, 4, 0xf0f0f0f, results);
        assertEquals(b ^ ((a >>> 4 ^ b) & 0xf0f0f0f), results[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void permOp(int a, int b, int n, int f, int[] result) {
        result[0] = a ^ ((a >>> n ^ b) & f) << n;
        result[1] = b ^ ((a >>> n ^ b) & f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptHPermOp_pbbS8_aAnU0() {
        UnixCrypt unixCrypt = new UnixCrypt();
        int a = 0x12345678;
        int n = 2;
        int m = 0xcccc0000;
        int result = unixCrypt.crypt("dummy").hashCode(); // dummy string to call crypt method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptBodyLeftShift_Cdsi7_FDTc0() {
        byte[] original = "password".getBytes();
        String salt = "5a";
        UnixCrypt unixCrypt = new UnixCrypt();
        String encrypted = unixCrypt.crypt(new String(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptBodyLeftRight_mRPf7_PfFR0_1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String original = "test";
        String result = UnixCrypt.crypt(original);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptBodyLeftRight_mRPf7_PfFR0_2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String original = "test";
        String result = UnixCrypt.crypt(original);
        assertNotEquals("", result);
    }
}