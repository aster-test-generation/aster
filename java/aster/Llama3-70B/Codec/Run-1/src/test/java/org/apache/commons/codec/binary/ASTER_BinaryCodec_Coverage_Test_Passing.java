/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BinaryCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiEmptyInput_KJUN1() {
        byte[] expected = new byte[0];
        char[] ascii = new char[0];
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ReturnsAsciiChars_WhenRawIsByteArray_QRZC1() throws EncoderException {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] byteArray = {1, 2, 3};
        Object result = binaryCodec.encode(byteArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ReturnsAsciiChars_WhenRawIsNull_zWdz2() throws EncoderException {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] byteArray = null;
        Object result = binaryCodec.encode(byteArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_FPgS0() throws DecoderException {
        BinaryCodec codec = new BinaryCodec();
        Object result = codec.decode(null);
        assert result != null;
        assert result instanceof byte[];
        assert ((byte[]) result).length == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyByteArray_JacP1() throws DecoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] ascii = new byte[0];
        Object result = codec.decode(ascii);
        assert result != null;
        assert result instanceof byte[];
        assert ((byte[]) result).length == 0;
    }
}