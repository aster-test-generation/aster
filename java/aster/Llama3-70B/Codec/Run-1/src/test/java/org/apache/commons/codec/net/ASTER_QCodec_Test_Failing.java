/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedEncodingException_Efqv1() {
        QCodec qCodec = new QCodec("InvalidCharset");
        try {
            qCodec.decode("Hello World");
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertNotNull(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingEmpty_grLb1() {
        QCodec qCodec = new QCodec("UTF-8");
        byte[] bytes = new byte[0];
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingPrintableChars_zhHV4() {
        QCodec qCodec = new QCodec("ISO-8859-1");
        byte[] bytes = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks1_XDoh0() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks2_xLCJ1() {
        QCodec qCodec = new QCodec("UTF-8");
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks3_XxuJ2() {
        QCodec qCodec = new QCodec();
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset3_hnOP2() {
        QCodec qCodec = new QCodec();
        assertNull(qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValid_fTHS1() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "_Q=Hello_World?=Q_";
        String result = codec.decodeText(text);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_HzdL0_2() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World";
        Charset charset = Charset.forName("UTF-8");
        String result = qCodec.encodeText(text, charset);
        assertEquals("PREFIXUTF-8SEPUTF-8SEPHello WorldPOSTFIX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_EncoderException_Jhxl6_deNJ0() {
        QCodec qCodec = new QCodec();
        String text = "Hello=World";
        Charset charset = Charset.forName("UTF-8");
        try {
            qCodec.encodeText(text, charset);
            assert false;
        } catch (EncoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_nbvo1_obUv0() throws DecoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "Hello";
        Object result = qCodec.decode(str); // This line has an error
        assertEquals(str, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_nbvo1_KMAv1() throws DecoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "Hello";
        try {
            Object result = qCodec.decode(str);
            assertEquals(str, result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_phuy0_ZIMQ0() {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello World";
        Charset sourceCharset = Charset.forName("UTF-8");
        String result = null;
        try {
            result = qCodec.encodeText(sourceStr, sourceCharset);
        } catch (EncoderException e) {
            fail("EncoderException occurred");
        }
        assertEquals("Expected encoded string", result, "QCodec PREFIXUTF-8SEPQCodec.getEncoding()SEPHello+WorldPOSTFIX");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_sTBT0_GIZQ0() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            String result = qCodec.encodeText("Hello World", Charset.forName("UTF-8"));
            assertEquals("QCodecPrefixUTF-8SEPQCodecDefaultSEPHello WorldQCodecPostfix", result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QdNi0_NUuC0() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            String result = qCodec.encodeText("Hello, World!", Charset.forName("UTF-8"));
            assertEquals("PREFIXUTF-8SEP?SEP?Hello,+World%21POSTFIX", result);
        } catch (EncoderException e) {
            fail("EncoderException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingPrintableChars_zhHV4_fid1() {
        QCodec qCodec = new QCodec("ISO-8859-1");
        byte[] bytes = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        for (int i = 0; i < bytes.length; i++) {
            assertEquals(bytes[i], result[i]);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValid_fTHS1_fid1() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "_Q?=UTF-8?Q?Hello_World?=Q_";
        String result = codec.decodeText(text);
        assertEquals("Hello_World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_nbvo1_obUv0_fid1() throws DecoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "=C5=9E=C5=BE=C5=A1=C5=BE=C5=A0=C5=B9=C4=85"; // encoded string
        Object result = qCodec.decode(str);
        assertEquals("Žluťoučký kůň úpěl ďábelské ódy", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_nbvo1_KMAv1_fid1() throws DecoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "Hello";
        try {
            Object result = qCodec.decode(str);
            assertEquals(str, (String) result);
        } catch (DecoderException e) {
            throw e;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_HzdL0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World";
        Charset charset = Charset.forName("UTF-8");
        String result = qCodec.encodeText(text, charset);
        assertNotNull(result);
        assertEquals("PREFIXUTF-8SEPUTF-8SEPHello WorldPOSTFIX", result);
    }
}