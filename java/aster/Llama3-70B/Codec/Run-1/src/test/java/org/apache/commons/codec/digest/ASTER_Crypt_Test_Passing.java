/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_jkcX0_1() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String result = Crypt.crypt(keyBytes, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_jkcX0_2() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String result = Crypt.crypt(keyBytes, null);
        assertTrue(result.startsWith(Sha2Crypt.SHA512_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSha512Salt_mIzI1_1() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = Sha2Crypt.SHA512_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSha512Salt_mIzI1_2() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = Sha2Crypt.SHA512_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertTrue(result.startsWith(Sha2Crypt.SHA512_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSha256Salt_QhZo2_1() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = Sha2Crypt.SHA256_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSha256Salt_QhZo2_2() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = Sha2Crypt.SHA256_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertTrue(result.startsWith(Sha2Crypt.SHA256_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptMd5Salt_LyZh3_1() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = Md5Crypt.MD5_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptMd5Salt_LyZh3_2() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = Md5Crypt.MD5_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertTrue(result.startsWith(Md5Crypt.MD5_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_Sudo0() {
        String key = "key";
        String salt = "salt";
        String result = Crypt.crypt(key, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_Qbmv0() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String result = Crypt.crypt(keyBytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_nFzG0() {
        String result = Crypt.crypt("key");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_jkcX0() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String result = Crypt.crypt(keyBytes, null);
        assertNotNull(result);
        assertTrue(result.startsWith(Sha2Crypt.SHA512_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSha512Salt_mIzI1() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = Sha2Crypt.SHA512_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertNotNull(result);
        assertTrue(result.startsWith(Sha2Crypt.SHA512_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptSha256Salt_QhZo2() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = Sha2Crypt.SHA256_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertNotNull(result);
        assertTrue(result.startsWith(Sha2Crypt.SHA256_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptMd5Salt_LyZh3() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = Md5Crypt.MD5_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertNotNull(result);
        assertTrue(result.startsWith(Md5Crypt.MD5_PREFIX));
    }
}