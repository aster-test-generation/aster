/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_SoundexUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedNull_yBPe0() {
        int result = SoundexUtils.differenceEncoded(null, "abc");
        assert result == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedEmpty_DluY1() {
        int result = SoundexUtils.differenceEncoded("", "abc");
        assert result == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedSame_JzNd2() {
        int result = SoundexUtils.differenceEncoded("abc", "abc");
        assert result == 3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedDifferent_MWKe3() {
        int result = SoundexUtils.differenceEncoded("abc", "def");
        assert result == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedPartialMatch_kdtK4() {
        int result = SoundexUtils.differenceEncoded("abcd", "abce");
        assert result == 3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanNull_OKpD0() {
        String result = SoundexUtils.clean(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanEmpty_zsTy1() {
        String result = SoundexUtils.clean("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanOnlyLetters_lJoE2() {
        String result = SoundexUtils.clean("hello");
        assertEquals("HELLO", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanWithNonLetters_SvRa3() {
        String result = SoundexUtils.clean("hello123");
        assertEquals("HELLO", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyNull_SxsY0() {
        assertTrue(SoundexUtils.isEmpty(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyEmptyString_sEso1() {
        assertTrue(SoundexUtils.isEmpty(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyNonEmptyString_rgmI2() {
        assertFalse(SoundexUtils.isEmpty("Hello"));
    }
}