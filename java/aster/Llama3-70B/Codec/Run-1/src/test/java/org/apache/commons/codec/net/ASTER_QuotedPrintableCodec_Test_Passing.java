/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset1_OTvH0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset2_dOGo1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset3_DRKu2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset4_ursN3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-16");
        assertEquals("UTF-16", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset5_gzkW4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_pFSs0() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_RCBv1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = "Hello, World!".getBytes();
        Object result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_gMoR0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World";
        Charset sourceCharset = Charset.forName("UTF-8");
        String result = codec.encode(sourceStr, sourceCharset);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_dRZJ1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        Charset sourceCharset = Charset.forName("UTF-8");
        String result = codec.encode(sourceStr, sourceCharset);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset1_fQrK0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Charset charset = codec.getCharset();
        assertNotNull(charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset2_FztR1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        Charset charset = codec.getCharset();
        assertNotNull(charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset3_hUwz2() {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charset);
        Charset result = codec.getCharset();
        assertEquals(charset, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset4_TLDM3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        Charset charset = codec.getCharset();
        assertNotNull(charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset5_isBH4() {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charset, true);
        Charset result = codec.getCharset();
        assertEquals(charset, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable1_QtSY0() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[0];
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable4_qSvV3() {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 32, 32};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable6_nLZp5() {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 32, 32, 32, 32};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable7_xDRa6() {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 32, 32, 32, 32, 32};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable10_wHgV9() {
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] bytes = new byte[]{32, 32, 32, 32, 32, 32, 32, 32, 32};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable1_QFvt0() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable2_aVtG1() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable3_eAex2() {
        BitSet printable = null;
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable4_KLoI3() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable5_roqT4() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable6_fzul5() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable7_Pbpp6() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(1, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable8_rvtp7() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(1, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable9_GhKO8() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(5, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable10_rRdC9() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(5, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable1_ZDUg0() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{65, 66, 67};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable2_wbAc1() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{65, 66, 67};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable3_YoNo2() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable4_JYQW3() {
        BitSet printable = null;
        byte[] bytes = new byte[]{65, 66, 67};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable5_LtVZ4() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable6_kTYw5() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable7_YJtB6() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable8_PEyx7() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable3_Rhld2() {
        BitSet printable = null;
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable5_oEZl4() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable6_RAGQ5() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable7_luWO6() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable8_kpKL7() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable9_MgTO8() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable10_kpKN9() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable1_LDao0() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable2_Ctbq1() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable3_eKvH2() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable4_SLjJ3() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable5_xuom4() {
        BitSet printable = null;
        byte[] bytes = new byte[]{1, 2, 3, 4};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable7_OkQJ6() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable8_BoBl7() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(4, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable9_HbSF8() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable10_WLbm9() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable11_oOUM10() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_1_mZhU0() {
        QuotedPrintableCodec quotedPrintableCodec = new QuotedPrintableCodec();
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = quotedPrintableCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_2_ZLsY1() {
        QuotedPrintableCodec quotedPrintableCodec = new QuotedPrintableCodec("UTF-8");
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = quotedPrintableCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_3_LDDZ2() {
        QuotedPrintableCodec quotedPrintableCodec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = quotedPrintableCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_4_dmXM3() {
        QuotedPrintableCodec quotedPrintableCodec = new QuotedPrintableCodec(true);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = quotedPrintableCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_5_PRSz4() {
        QuotedPrintableCodec quotedPrintableCodec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = quotedPrintableCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableInvalidEscape_JLnx5() {
        byte[] bytes = "Hello=World".getBytes();
        try {
            QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableIncompleteEscape_doTz6() {
        byte[] bytes = "Hello=2".getBytes();
        try {
            QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_gaSn0_dYSD0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        try {
            String result = codec.encode("Test String", "UTF-8"); // Changed decode to encode
            assertNotEquals(null, result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_EmNm1_sRhA0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        try {
            String result = codec.encode(null, "UTF-8"); // changed decode to encode
            assertNull(result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_TPlQ0_DKUP0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        try {
            String result = codec.encode("sourceStr", "UTF-8"); // changed decode to encode and added charset
            assertEquals("sourceStr", result);
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStrict_NDqJ1_Pmut0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        try {
            String result = codec.encode("sourceStr", "UTF-8");
            assertEquals("sourceStr", result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharset_zEAZ2_TCkj0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        try {
            String result = codec.encode("sourceStr", "UTF-8");
            assertEquals("sourceStr", result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharsetStrict_RRCE3_OLjJ0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        try {
            String result = codec.encode("sourceStr", "UTF-8");
            assertEquals("sourceStr", result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_hXgL0_jrsp0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World";
        Charset sourceCharset = Charset.forName("UTF-8");
        try {
            String decodedStr = codec.encode(sourceStr, "UTF-8"); // Changed decode to encode
            assertEquals("Hello World", decodedStr);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_XKQO1_LdlC0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = "Hello, World!".getBytes();
        try {
            byte[] result = codec.decode(bytes);
            assertEquals(new String(bytes), new String(result));
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_mMxG2_xYsg0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String str = "Hello, World!";
        try {
            String result = (String) codec.decode(str, "UTF-8"); // specify charset
            assertEquals(str, result);
        } catch (DecoderException | UnsupportedEncodingException e) {
            fail("DecoderException or UnsupportedEncodingException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_torB2_Jbtc0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String str = "Hello, World!";
        try {
            String result = codec.encode(str, "UTF-8");
            assertNotNull(result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableNull_DHbB0_fwAf1() {
        try {
            byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(null);
            assertNull(result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableEmpty_VRlm1_SltS0() {
        byte[] bytes = new byte[0];
        byte[] result = new byte[0];
        try {
            result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            assertEquals(0, result.length);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStrict_KcKK1_NSAl0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        try {
            String result = codec.encode("Hello World", "UTF-8");
            assertNotNull(result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeCharset_HesS2_Daez0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        try {
            String result = codec.encode("Hello World", "UTF-8");
            assertNotNull(result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeCharsetStrict_YNVW3_TFBF0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        try {
            String result = codec.encode("Hello World", "UTF-8");
            assertNotNull(result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeCharsetString_redc4_vRIT0() throws IllegalCharsetNameException, IllegalArgumentException, UnsupportedCharsetException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String result = codec.encode("Hello World", "UTF-8");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeCharsetString_redc4_gijI1() throws IllegalCharsetNameException, IllegalArgumentException, UnsupportedCharsetException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        try {
            String result = codec.encode("Hello World", "UTF-8");
            assertNotNull(result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_qrOd0_UcyV0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        try {
            String result = codec.encode("Hello, World!", "UTF-8");
            assertNotNull(result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_qrOd0_NLJl1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode("Hello, World!", "UTF-8");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_smBW1_jqeo0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        try {
            String result = codec.encode(null, "UTF-8");
            assertNull(result);
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_smBW1_NALN1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode(null, "UTF-8");
        assertNull(result);
    }
}