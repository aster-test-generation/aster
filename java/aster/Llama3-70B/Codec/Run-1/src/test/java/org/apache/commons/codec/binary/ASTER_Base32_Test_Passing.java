/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_DIlc0() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3});
        assertArrayEquals(new byte[]{1, 2, 3}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_jPJI1() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true);
        assertArrayEquals(new byte[]{1, 2, 3}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_gNjF2() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true, (byte) 4, CodecPolicy.STRICT);
        assertArrayEquals(new byte[]{1, 2, 3}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_bzlB0() {
        Base32 base32 = new Base32();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_TkiJ1() {
        Base32 base32 = new Base32(10);
        assertFalse(base32.isInAlphabet((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet3_BULW2() {
        Base32 base32 = new Base32(true);
        assertFalse(base32.isInAlphabet((byte) 20));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Gcqo0() {
        Base32 base32 = new Base32();
        byte[] result = base32.decode("HelloWorld");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_withLineLength_sbsV1() {
        Base32 base32 = new Base32(10);
        byte[] result = base32.decode("HelloWorld");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_withLineLengthAndLineSeparator_hJPY2() {
        Base32 base32 = new Base32(10, new byte[]{13, 10});
        byte[] result = base32.decode("HelloWorld");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_NysO0() {
        Base32 base32 = new Base32();
        byte[] pArray = "Hello, World!".getBytes();
        String result = base32.encodeAsString(pArray);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_KVXF0() {
        Base32 base32 = new Base32();
        boolean result = base32.isInAlphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthNullArray_BiRI0() {
        assertEquals(0, Base32.toLength(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthNonNullArray_FoOB1() {
        byte[] array = new byte[5];
        assertEquals(5, Base32.toLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArr_qFyI0() throws EncoderException {
        Base32 base32 = new Base32();
        byte[] bytes = new byte[]{1, 2, 3};
        Object result = base32.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength1_fTPR0() {
        Base32 base32 = new Base32(10, new byte[]{13, 10});
        byte[] pArray = new byte[20];
        long result = base32.getEncodedLength(pArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength2_uUcZ1() {
        Base32 base32 = new Base32(true, (byte) 61);
        byte[] pArray = new byte[30];
        long result = base32.getEncodedLength(pArray);
        assertEquals(48, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_lfpd0() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[0];
        byte[] result = base32.encode(pArray);
        assertArrayEquals(pArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_ykdD1() {
        Base32 base32 = new Base32(76, new byte[]{13, 10}, true, (byte) '=');
        byte[] pArray = new byte[]{1, 2, 3, 4, 5};
        byte[] result = base32.encode(pArray);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize1_vdYU0() {
        Base32 base32 = new Base32();
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize2_wAoC1() {
        Base32 base32 = new Base32(76);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize3_tcLg2() {
        Base32 base32 = new Base32((byte) 61);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize4_oeSA3() {
        Base32 base32 = new Base32(true);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize5_RBQa4() {
        Base32 base32 = new Base32(true, (byte) 61);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize6_JVNo5() {
        Base32 base32 = new Base32(76, new byte[]{13, 10});
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize7_iGxW6() {
        Base32 base32 = new Base32(76, new byte[]{13, 10}, true);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize8_IdXX7() {
        Base32 base32 = new Base32(76, new byte[]{13, 10}, true, (byte) 61, CodecPolicy.STRICT);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_HYda0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = {(byte) 'A', (byte) 'B', (byte) 'C'};
        assertTrue(base32.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_DnXQ1() {
        Base32 base32 = new Base32((byte) '=');
        byte[] arrayOctet = {(byte) 'A', (byte) ' ', (byte) '='};
        assertTrue(base32.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet3_jHMj2() {
        Base32 base32 = new Base32(76, new byte[]{(byte) '\n'});
        byte[] arrayOctet = {(byte) 'A', (byte) 'B', (byte) '\n'};
        assertTrue(base32.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet4_XEbe3() {
        Base32 base32 = new Base32(true);
        byte[] arrayOctet = {(byte) 'A', (byte) 'B', (byte) 'C'};
        assertTrue(base32.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet5_sYZo4() {
        Base32 base32 = new Base32(76);
        byte[] arrayOctet = {(byte) 'A', (byte) 'B', (byte) 'C'};
        assertTrue(base32.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet6_KyCh5() {
        Base32 base32 = new Base32(true, (byte) '=');
        byte[] arrayOctet = {(byte) 'A', (byte) ' ', (byte) '='};
        assertTrue(base32.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_tBNp0() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{1, 2, 3};
        String result = base32.encodeToString(pArray);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_doqa0() {
        assertTrue(Base32.isWhiteSpace((byte) ' '));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_StrictPolicy_vZVY0() {
        Base32 base32 = new Base32(76, new byte[]{13, 10}, true, (byte) '=', CodecPolicy.STRICT);
        assertTrue(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_LenientPolicy_wMUO1() {
        Base32 base32 = new Base32(76, new byte[]{13, 10}, true, (byte) '=', CodecPolicy.LENIENT);
        assertFalse(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_Xucj0() throws DecoderException {
        Base32 base32 = new Base32();
        byte[] bytes = new byte[]{1, 2, 3};
        Object result = base32.decode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_qWBH1() throws DecoderException {
        Base32 base32 = new Base32();
        String str = "Hello";
        Object result = base32.decode(str);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_iFEl0() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[0];
        byte[] result = base32.encode(pArray, 0, 0);
        assertArrayEquals(pArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_ttaC1() {
        Base32 base32 = new Base32(76, new byte[]{13, 10}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{1, 2, 3, 4, 5};
        byte[] result = base32.encode(pArray, 0, pArray.length);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy1_hVwL0() {
        Base32 base32 = new Base32(10, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EmptyArray_QoLW0() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[0];
        byte[] result = base32.decode(pArray);
        assertArrayEquals(pArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparator_KcxS0() {
        byte[] chunkSeparator = Base32.getChunkSeparator();
        assertNotNull(chunkSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_NullArray_iDFQ0() {
        Base32 base32 = new Base32();
        boolean result = base32.containsAlphabetOrPad(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_EmptyArray_Qksh1() {
        Base32 base32 = new Base32();
        boolean result = base32.containsAlphabetOrPad(new byte[0]);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_ContainsPad_BfTK2() {
        Base32 base32 = new Base32((byte) '=');
        byte[] arrayOctet = new byte[]{(byte) '='};
        boolean result = base32.containsAlphabetOrPad(arrayOctet);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_ContainsAlphabet_Wbvf3() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{(byte) 'A'};
        boolean result = base32.containsAlphabetOrPad(arrayOctet);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_DoesNotContainAlphabetOrPad_qMTi4() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{(byte) '0'};
        boolean result = base32.containsAlphabetOrPad(arrayOctet);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode1_PNdX0_otYe0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[10];
        boolean result = base32.containsAlphabetOrPad(input);
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode11_vIFv10_gxCW0() {
        Base32 base32 = new Base32();
        byte[] input = null;
        try {
            base32.decode(input, 0, 10, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_oWxQ0_FqXb0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[10];
        assertEquals(false, base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_AIHZ0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[0];
        assertEquals(false, base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_XjDW0_GpvF0() {
        Base32 base32 = new Base32();
        assertNotNull(base32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResults4_PWvI3_LrJH0_2() {
        Base32 base32 = new Base32(10, new byte[]{1, 2});
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 5;
        assertFalse(base32.containsAlphabetOrPad(b));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_nvKH0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[10];
        boolean result = base32.containsAlphabetOrPad(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_owFI1_YCPn0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[1000];
        boolean result = base32.containsAlphabetOrPad(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_RWOB0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = base32.pad;
        assertTrue(base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_true_pjJt0_jwSa0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{base32.pad, (byte) 'A'};
        assertTrue(base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasData_false_roOQ1_LJBR0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[0];
        assertFalse(base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_MFHG0_aYRR0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = {1, 2, 3};
        boolean result = base32.containsAlphabetOrPad(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_WINk0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{base32.pad, 'A'};
        assertTrue(base32.containsAlphabetOrPad(arrayOctet));
    }
}