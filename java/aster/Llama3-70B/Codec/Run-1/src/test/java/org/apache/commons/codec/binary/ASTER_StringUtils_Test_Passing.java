/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_ahPd0() {
        byte[] bytes = "Hello, World!".getBytes();
        String result = StringUtils.newStringUtf8(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8Null_PFWN1() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf8(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_dCVF0_1() {
        String string = "Hello";
        byte[] result = StringUtils.getBytesUtf16(string);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_dCVF0_2() {
        String string = "Hello";
        byte[] result = StringUtils.getBytesUtf16(string);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_16), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_VtGA0_1() {
        String string = "Hello World";
        byte[] result = StringUtils.getBytesIso8859_1(string);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_VtGA0_2() {
        String string = "Hello World";
        byte[] result = StringUtils.getBytesIso8859_1(string);
        assertArrayEquals(string.getBytes(StandardCharsets.ISO_8859_1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1Null_spKy1() {
        byte[] result = StringUtils.getBytesIso8859_1(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_vtVn0_1() {
        String string = "Hello, World!";
        byte[] result = StringUtils.getBytesUtf16Le(string);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_vtVn0_2() {
        String string = "Hello, World!";
        byte[] result = StringUtils.getBytesUtf16Le(string);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_16LE), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_hJSX0_1() {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_16LE);
        String result = StringUtils.newStringUtf16Le(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_hJSX0_2() {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_16LE);
        String result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_JsON0_1() {
        byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_16);
        String result = StringUtils.newStringUtf16(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_JsON0_2() {
        byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_16);
        String result = StringUtils.newStringUtf16(bytes);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_KlmQ0() {
        CharSequence cs1 = "Hello";
        assertTrue(StringUtils.equals(cs1, cs1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObjects_SameValue_aaaJ1() {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = new StringBuilder("Hello");
        assertTrue(StringUtils.equals(cs1, cs2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullFirstArgument_GGvr2() {
        CharSequence cs2 = "Hello";
        assertFalse(StringUtils.equals(null, cs2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullSecondArgument_XjbS3() {
        CharSequence cs1 = "Hello";
        assertFalse(StringUtils.equals(cs1, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_BothNull_gtqF4() {
        assertTrue(StringUtils.equals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLength_jwFk5() {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = "HelloWorld";
        assertFalse(StringUtils.equals(cs1, cs2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentValues_yyBP6() {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = "Goodbye";
        assertFalse(StringUtils.equals(cs1, cs2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_EmptyStrings_mSCs7() {
        CharSequence cs1 = "";
        CharSequence cs2 = "";
        assertTrue(StringUtils.equals(cs1, cs2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_IxEo0_1() {
        String string = "Hello";
        ByteBuffer byteBuffer = StringUtils.getByteBufferUtf8(string);
        assertNotNull(byteBuffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_IxEo0_2() {
        String string = "Hello";
        ByteBuffer byteBuffer = StringUtils.getByteBufferUtf8(string);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_8), byteBuffer.array());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8Null_pcFf1() {
        ByteBuffer byteBuffer = StringUtils.getByteBufferUtf8(null);
        assertNull(byteBuffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_avam0_1() {
        String string = "Hello";
        byte[] result = StringUtils.getBytesUtf16Be(string);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_avam0_2() {
        String string = "Hello";
        byte[] result = StringUtils.getBytesUtf16Be(string);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_16BE), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_vAbw0_1() {
        byte[] bytes = "Hello World".getBytes();
        String result = StringUtils.newStringIso8859_1(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_vAbw0_2() {
        byte[] bytes = "Hello World".getBytes();
        String result = StringUtils.newStringIso8859_1(bytes);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1Null_qXBe1() {
        byte[] bytes = null;
        String result = StringUtils.newStringIso8859_1(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_AYzH0() {
        String string = "Hello";
        byte[] result = StringUtils.getBytesUsAscii(string);
        byte[] expected = string.getBytes(StandardCharsets.US_ASCII);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_withNullBytes_uBLM0() {
        byte[] bytes = null;
        String charsetName = "UTF-8";
        String result = StringUtils.newString(bytes, charsetName);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_withValidBytes_hqos1() {
        byte[] bytes = "Hello World".getBytes();
        String charsetName = "UTF-8";
        String result = StringUtils.newString(bytes, charsetName);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_iMZg0() {
        String string = "Hello";
        String charsetName = "UTF-8";
        byte[] result = StringUtils.getBytesUnchecked(string, charsetName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_Gkat0() {
        String string = "Hello, World!";
        byte[] expected = string.getBytes(StandardCharsets.UTF_8);
        byte[] actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8Null_mrGm1() {
        byte[] actual = StringUtils.getBytesUtf8(null);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_BnKi0() {
        byte[] bytes = new byte[]{65, 66, 67};
        String result = StringUtils.newStringUsAscii(bytes);
        assertEquals("ABC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAsciiNull_Gqvq1() {
        byte[] bytes = null;
        String result = StringUtils.newStringUsAscii(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Be_JnSf0_fid1() {
        byte[] bytes = new byte[]{0x48, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x6f, 0x00};
        String result = StringUtils.newStringUtf16Be(bytes);
        assertEquals("䠀攀氀氀漀", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_dCVF0() {
        String string = "Hello";
        byte[] result = StringUtils.getBytesUtf16(string);
        assertNotNull(result);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_16), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_VtGA0() {
        String string = "Hello World";
        byte[] result = StringUtils.getBytesIso8859_1(string);
        assertNotNull(result);
        assertArrayEquals(string.getBytes(StandardCharsets.ISO_8859_1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_vtVn0() {
        String string = "Hello, World!";
        byte[] result = StringUtils.getBytesUtf16Le(string);
        assertNotNull(result);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_16LE), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_hJSX0() {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_16LE);
        String result = StringUtils.newStringUtf16Le(bytes);
        assertNotNull(result);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_JsON0() {
        byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_16);
        String result = StringUtils.newStringUtf16(bytes);
        assertNotNull(result);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_IxEo0() {
        String string = "Hello";
        ByteBuffer byteBuffer = StringUtils.getByteBufferUtf8(string);
        assertNotNull(byteBuffer);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_8), byteBuffer.array());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_avam0() {
        String string = "Hello";
        byte[] result = StringUtils.getBytesUtf16Be(string);
        assertNotNull(result);
        assertArrayEquals(string.getBytes(StandardCharsets.UTF_16BE), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_vAbw0() {
        byte[] bytes = "Hello World".getBytes();
        String result = StringUtils.newStringIso8859_1(bytes);
        assertNotNull(result);
        assertEquals("Hello World", result);
    }
}