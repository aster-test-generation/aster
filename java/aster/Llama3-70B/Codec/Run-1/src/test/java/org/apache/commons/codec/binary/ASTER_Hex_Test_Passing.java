/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_OddLength_TeCn1() {
        Hex hex = new Hex();
        char[] data = {'1', '2', '3'};
        byte[] out = new byte[2];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_OutputArrayTooSmall_xsji2() {
        Hex hex = new Hex();
        char[] data = {'1', '2', '3', '4'};
        byte[] out = new byte[1];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_dieB0() {
        Hex hex = new Hex();
        byte[] data = "Hello, World!".getBytes();
        char[] result = Hex.encodeHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_vrTT0() {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        int dataOffset = 0;
        int dataLen = 5;
        boolean toLowerCase = true;
        char[] result = Hex.encodeHex(data, dataOffset, dataLen, toLowerCase);
        char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_hJIE0() {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        char[] toDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
        char[] actual = Hex.encodeHex(data, toDigits);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nmlW0() {
        Hex hex = new Hex();
        ByteBuffer array = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] result = hex.encode(array);
        assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteBuffer_LiaY1() {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap("Hello World".getBytes());
        Object result = hex.encode(buffer);
        assertArrayEquals("48656c6c6f20576f726c64".getBytes(), (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_byteArray_Qivz2() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        byte[] byteArray = "Hello World".getBytes();
        Object result = hex.encode(byteArray);
        assertArrayEquals("48656c6c6f20576f726c64".getBytes(), (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_kGwW0() {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3};
        char[] result = Hex.encodeHex(data, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_klDF0() {
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        String result = Hex.encodeHexString(data, true);
        assertEquals("48656c6c6f2c20576f726c6421", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_yimP0() {
        Hex hex = new Hex("UTF-8");
        byte[] input = "Hello, World!".getBytes();
        byte[] result = hex.encode(input);
        assertArrayEquals("48656c6c6f2c20576f726c6421".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_ialH0() {
        ByteBuffer data = ByteBuffer.wrap("Hello World!".getBytes());
        char[] result = Hex.encodeHex(data, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName1_Ihsx0() {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName2_bqme1() {
        Hex hex = new Hex("UTF-8");
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName3_kuca2() {
        Hex hex = new Hex();
        assertEquals("UTF-8", hex.getCharsetName()); // default charset
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_tswi0() {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        String result = Hex.encodeHexString(data);
        assertEquals("0102030405", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_FGqY0() {
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        String result = Hex.encodeHexString(data);
        assertEquals("48656c6c6f2c20576f726c6421", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_YYDl0() {
        Hex hex = new Hex();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_ewTZ1() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_SMXP2() {
        Hex hex = new Hex("UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_ScwT0() {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        String result = Hex.encodeHexString(data, true);
        assertEquals("0102030405", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_jKxQ0() {
        Hex hex = new Hex();
        byte[] data = new byte[]{1, 2, 3};
        char[] out = new char[6];
        hex.encodeHex(data, 0, 3, true, out, 0);
        assertArrayEquals(new char[]{'0', '1', '0', '2', '0', '3'}, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_upperCase_IoHs1() {
        Hex hex = new Hex();
        byte[] data = new byte[]{1, 2, 3};
        char[] out = new char[6];
        hex.encodeHex(data, 0, 3, false, out, 0);
        assertArrayEquals(new char[]{'0', '1', '0', '2', '0', '3'}, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_CFif0() {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        int dataOffset = 0;
        int dataLen = 5;
        boolean toLowerCase = true;
        char[] out = new char[dataLen * 2];
        int outOffset = 0;
        hex.encodeHex(data, dataOffset, dataLen, toLowerCase, out, outOffset);
        char[] expected = {'0', '1', '0', '2', '0', '3', '0', '4', '0', '5'};
        assertArrayEquals(expected, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset1_AoYy0() {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        assertEquals(StandardCharsets.UTF_8, hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset2_CYNT1() {
        Hex hex = new Hex("UTF-8");
        assertEquals(Charset.forName("UTF-8"), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_yRpu0() {
        Hex hex = new Hex();
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        char[] result = Hex.encodeHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_EvenLength_aTTx0_XBCf0() {
        Hex hex = new Hex();
        char[] data = {'1', '2', '3', '4'};
        byte[] out = new byte[2];
        int outOffset = 0;
        try {
            int result = hex.decodeHex(data, out, outOffset);
            assertEquals(2, result);
            assertEquals((byte) 0x12, out[0]);
            assertEquals((byte) 0x34, out[1]);
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_NullData_rBiC3_sSra0() {
        Hex hex = new Hex();
        char[] data = null;
        byte[] out = new byte[2];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("Expected NullPointerException or DecoderException");
        } catch (NullPointerException e) {
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValid_REHW0_Somy0() {
        try {
            int result = Hex.toDigit('A', 0);
            assert result == 10;
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValid_REHW0_mTlD1() {
        try {
            int result = Hex.toDigit((char) 'A', 0);
            assert result == 10;
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_kCGi0_fXYF0() {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap("48656c6c6f2c20576f726c6421".getBytes());
        byte[] result = new byte[0];
        try {
            result = hex.decode(buffer);
            assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_HsxF1_kKGu0() {
        Hex hex = new Hex("UTF-8");
        String str = "48656c6c6f";
        byte[] bytes = "Hello".getBytes();
        try {
            byte[] result = hex.decode(str.getBytes());
            assertArrayEquals(bytes, result);
        } catch (DecoderException e) {
            // Ignore
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_yaDu0_HXyC0() {
        Hex hex = new Hex();
        try {
            byte[] result = hex.decodeHex("48656c6c6f");
            assertArrayEquals(new byte[]{72, 101, 108, 108, 111}, result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_pMes0_ucQW0() {
        Hex hex = new Hex();
        byte[] array = "48656c6c6f".getBytes();
        byte[] result = new byte[0];
        try {
            result = hex.decode(array);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111}, result);
    }
}