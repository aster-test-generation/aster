/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_wKzx4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[48], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_sgHR0_2() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(new byte[]{70, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_xTud0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        byte[] expectedResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_brUd1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        byte[] expectedResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_SuMi3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        byte[] expected = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_oSpw4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[48], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_Qpix0_2() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(new byte[]{-114, -51, 123, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_SaAC0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        File file = new File("testFile.txt");
        byte[] result = hmacUtils.hmac(file);
        assertArrayEquals(new byte[16], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_FYaK0_2() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(new byte[]{-12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_Bpvp0_2() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(new byte[]{-112, 74, -34, -11, 105, -103, 114, 122, -114, 122, -34, 122, -103, 114, 122, -114}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_RFPv0_weqc0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer byteBuffer = ByteBuffer.wrap("input".getBytes());
        byte[] result = hmacUtils.hmac(byteBuffer);
        byte[] expected = hmacUtils.hmac(byteBuffer);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_bJZG0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_aZLV1_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_jIKa2_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_KGAx3_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_wKzx4_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_FUxe5_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_sgHR0_2_fid1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(new byte[]{-12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_xTud0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_brUd1_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_FIne2_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_SuMi3_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_oSpw4_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_wsUZ5_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_1_Wrka0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("expectedHexValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_SaAC0_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        File file = new File("testFile.txt");
        byte[] result = hmacUtils.hmac(file);
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_HqzC0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_tIQK1_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_IMUk2_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_UtYr3_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_LBGE4_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_DkGw5_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_nnou0_fid1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "586f4c2c6f161941b669f2a8a6a9f071";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_aKtD0_fid1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "761b4a7a8a85a5e7f7f5a5e7f7f5a5e7f7f5a5e7";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_sWRL0_fid1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals("9fb54b302637687646878705d3326c9f0e3e6a6b", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_hBmD0_fid1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_DgOZ0_fid1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals("9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_esvJ0_fid1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_Bpvp0_2_fid1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(new byte[]{-46, 74, -34, -11, 105, -103, 114, 122, -114, 122, -34, 122, -103, 114, 122, -114}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_CzvW0_fid1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_KnsE0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals("expectedHexValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_PxwZ0_bSfq0_2_fid1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals("8463b54889437a6b1d7f602b9f5dbf6f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_MzHq0_Mzhp0_2_fid1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals("2439456789abcdef2439456789abcdef", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_ByteArrayKey_lxeB0_qYJW0_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer byteBuffer = ByteBuffer.wrap("input".getBytes());
        String result = hmacUtils.hmacHex(byteBuffer);
        assertEquals("661a946870e944c07a871e2c9c551941d2f9b503fdb1598b046ecf7b7b7a1f4a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_RFPv0_weqc0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer byteBuffer = ByteBuffer.wrap("input".getBytes());
        byte[] result = hmacUtils.hmac(byteBuffer);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_Rces1_fCYQ0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer byteBuffer = ByteBuffer.wrap("input".getBytes());
        String result = hmacUtils.hmacHex(byteBuffer);
        assertEquals("046506", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_sgHR0() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertNotNull(result);
        assertArrayEquals(new byte[]{-12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_Qpix0() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertNotNull(result);
        assertArrayEquals(new byte[]{-114, -51, 123, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103, -45, -115, -122, -103}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_FYaK0() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertNotNull(result);
        assertArrayEquals(new byte[]{-12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_Bpvp0() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertNotNull(result);
        assertArrayEquals(new byte[]{-46, 74, -34, -11, 105, -103, 114, 122, -114, 122, -34, 122, -103, 114, 122, -114}, result);
    }
}