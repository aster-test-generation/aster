/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_YlWE0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_bJZG0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_aZLV1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_jIKa2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_KGAx3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_FUxe5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        assertNotNull(result);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_sgHR0_1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_MD5_BIYh0() {
        assertTrue(HmacUtils.isAvailable("HmacMD5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_1_XCaQ1() {
        assertTrue(HmacUtils.isAvailable("HmacSHA1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_224_Inmv2() {
        assertTrue(HmacUtils.isAvailable("HmacSHA224"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_256_pwOV3() {
        assertTrue(HmacUtils.isAvailable("HmacSHA256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_384_cRdM4() {
        assertTrue(HmacUtils.isAvailable("HmacSHA384"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_512_UJES5() {
        assertTrue(HmacUtils.isAvailable("HmacSHA512"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_UnknownAlgorithm_SINN6() {
        assertFalse(HmacUtils.isAvailable("UnknownAlgorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_FIne2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_wsUZ5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_qHCN0_1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_qHCN0_2() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(result, HmacUtils.hmacSha512(key, valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_Qpix0_1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_ZfKT0_1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        File file = new File("testFile.txt");
        String result = hmacUtils.hmacHex(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_ZfKT0_2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        File file = new File("testFile.txt");
        String result = hmacUtils.hmacHex(file);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_MD5_KEdb0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_1_eyHn1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_224_bpJw2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_256_KSaN3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_384_rnkp4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA_512_pDZF5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_1_Wrka0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_Odku0_1() {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_Odku0_2() {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(result, HmacUtils.hmacSha384(key, valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384_nyAN0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        Mac mac = HmacUtils.getHmacSha384(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_MD5_pZoi0() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_1_jxoQ1() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_224_PGOW2() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_224));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_256_cpXm3() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_384_dROD4() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_384));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_512_UDrM5() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_etjz0_1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_etjz0_2() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_MD5_HqzC0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("valueToDigest".getBytes()));
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_1_tIQK1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("valueToDigest".getBytes()));
        assertNotNull(result);
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_224_IMUk2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("valueToDigest".getBytes()));
        assertNotNull(result);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_256_UtYr3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("valueToDigest".getBytes()));
        assertNotNull(result);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_384_LBGE4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("valueToDigest".getBytes()));
        assertNotNull(result);
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_SHA_512_DkGw5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("valueToDigest".getBytes()));
        assertNotNull(result);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_FYaK0_1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_nnou0() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "9064848c26f4668e4155a1780bfc12f6";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_esoq0() {
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_aKtD0() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "59d2f35a91277f8f04dc40c51dd910a9b5adf7aed47c8443a94033b2b3b1285d2159ced2bc948f65322f39538017b554";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512_QCwq0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        Mac mac = HmacUtils.getHmacSha512(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_sWRL0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals("cd56b91e97d9d47a59df9d96d6d056c7b8178dce", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_gcIQ0_1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_gcIQ0_2() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertNotEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_hBmD0() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "466a3dba497afdc7ec848c7f36c25fd668ca395a";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_zchi0_1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_zchi0_2() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(96, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_DgOZ0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals("b2cf211773fd60c6774c97c08bea6adc45f3053fe046546411b1073384847b7b", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_zfLD0() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_esvJ0() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "37f0247e622ddf403aa7e712c844bb4fa0b7a9ffeea962d0009dcd89127ccaa051b1d7585e2f1471e2e2efc0695cacb862e38e649b57e69ca2532bf7e833d08e";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_hLmW0_1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_hLmW0_2() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_Wona0_1() {
        byte[] result = HmacUtils.hmacSha256("mySecretKey", "Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_Wona0_2() {
        byte[] result = HmacUtils.hmacSha256("mySecretKey", "Hello, World!");
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_Bpvp0_1() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_zrFc0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_CzvW0() {
        String key = "mySecretKey";
        String valueToDigest = "Hello, World!";
        String expected = "90a37738924dcbbc7a2ea3bf5bcc7aa6debdf67d95d783306b2550ca2da64b2d";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_eWcG0() {
        byte[] key = "myKey".getBytes();
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_MUxY0_1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_MUxY0_2() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_OfHw0_1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_OfHw0_2() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_KnsE0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals("b2cf211773fd60c6774c97c08bea6adc45f3053fe046546411b1073384847b7b", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_PxwZ0_bSfq0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_PxwZ0_bSfq0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals("2ce95574500895012c33dab18b133d6f2ec5955ed6232e89284627e8daa1e9533abd36df2883936e9ae64e9ea131983c", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_JfdT0_jVYD0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String hmacHex = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_JfdT0_jVYD0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String hmacHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(32, hmacHex.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_GzJo0_gjoK0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_GzJo0_gjoK0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_CpNf0_FWWu0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String hmacHex = hmacUtils.hmacHex(ByteBuffer.wrap("valueToDigest".getBytes()));
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_MzHq0_Mzhp0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_MzHq0_Mzhp0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals("af4316d98a34bcb52304ac3bb6678aa2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_QZEs0_siom0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_QZEs0_siom0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals(40, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_RPcH0_qyTo0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_RPcH0_qyTo0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_ByteArrayKey_lxeB0_qYJW0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer byteBuffer = ByteBuffer.wrap("input".getBytes());
        String result = hmacUtils.hmacHex(byteBuffer);
        assertEquals("9e089ec13af881a8ac227a736c3e7c490ea3b4afca0c5f83dff6393b683a72e3", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_jZJu0_Oawa0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] valueToDigest = "valueToDigest".getBytes();
        String hmacHex = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_AwIU0_wAND0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_AwIU0_wAND0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_qHCN0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertNotNull(result);
        assertArrayEquals(result, HmacUtils.hmacSha512(key, valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_ZfKT0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        File file = new File("testFile.txt");
        String result = hmacUtils.hmacHex(file);
        assertNotNull(result);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_Odku0() {
        byte[] key = "mySecretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
        assertNotNull(result);
        assertArrayEquals(result, HmacUtils.hmacSha384(key, valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_etjz0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha256(key, valueToDigest);
        assertNotNull(result);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_gcIQ0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertNotNull(result);
        assertNotEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_zchi0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertNotNull(result);
        assertEquals(96, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_hLmW0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertNotNull(result);
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_Wona0() {
        byte[] result = HmacUtils.hmacSha256("mySecretKey", "Hello, World!");
        assertNotNull(result);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_MUxY0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertNotNull(result);
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_OfHw0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertNotNull(result);
        assertEquals(128, result.length());
    }
}