/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_WithUnderscore_QUis0() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{65, 95, 66}; // 95 is the ASCII value of underscore
        byte[] expected = new byte[]{65, 32, 66}; // 32 is the ASCII value of space
        byte[] actual = qCodec.doDecoding(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_WithoutUnderscore_bkJN1() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{65, 66, 67};
        byte[] expected = bytes.clone();
        byte[] actual = qCodec.doDecoding(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_EmDE0() throws DecoderException {
        QCodec qCodec = new QCodec();
        assertNull(qCodec.decode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ZnMg0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String expected = "=?UTF-8?Q?Hello, World!?=";
        String actual = qCodec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_cDLI0() throws EncoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.encode(null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInstanceofString_letC3() throws EncoderException {
        QCodec qCodec = new QCodec();
        String str = "Hello";
        Object result = qCodec.encode(str);
        assert result instanceof String;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_WithCharset_xsLv0() {
        Charset charset = Charset.forName("UTF-8");
        QCodec qCodec = new QCodec(charset);
        Charset result = qCodec.getCharset();
        assertEquals(charset, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_WithString_TLSS1() {
        QCodec qCodec = new QCodec("UTF-8");
        Charset result = qCodec.getCharset();
        assertEquals(Charset.forName("UTF-8"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_Default_ozxk2() {
        QCodec qCodec = new QCodec();
        Charset result = qCodec.getCharset();
        assertNotNull(result); // default charset is not null
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SupportedCharset_YvGJ0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello World";
        String sourceCharset = "UTF-8";
        String encodedStr = qCodec.encode(sourceStr, sourceCharset);
        assertNotNull(encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextCharset_zSQw0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String text = "Hello World";
        String result = qCodec.encodeText(text, qCodec.getCharset());
        assertTrue(result.contains("UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextDoubleSep_PKMk2() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String text = "Hello World";
        String result = qCodec.encodeText(text, qCodec.getCharset());
        int index = result.indexOf(QCodec.SEP);
        int secondIndex = result.indexOf(QCodec.SEP, index + 1);
        assertTrue(secondIndex != -1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextDoEncoding_mPmJ3() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String text = "Hello World";
        String result = qCodec.encodeText(text, qCodec.getCharset());
        String encodedText = StringUtils.newStringUsAscii(qCodec.doEncoding(text.getBytes(qCodec.getCharset())));
        assertTrue(result.contains(encodedText));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextToString_yAuZ4_1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String text = "Hello World";
        String result = qCodec.encodeText(text, qCodec.getCharset());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextToString_yAuZ4_2() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String text = "Hello World";
        String result = qCodec.encodeText(text, qCodec.getCharset());
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonStringObject_bAMq2_KfWv0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = null;
        Charset charset = null;
        try {
            qCodec.encodeText(text, charset);
        } catch (EncoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextSep_xSkr1_gmGx0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String text = "Hello World";
        String result = qCodec.encodeText(text, qCodec.getCharset());
        assertTrue(result.contains(Character.toString(QCodec.SEP)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextToString_yAuZ4() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String text = "Hello World";
        String result = qCodec.encodeText(text, qCodec.getCharset());
        assertNotNull(result);
        assertTrue(result instanceof String);
    }
}