/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Sha2Crypt_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSaltPrefix_RULq2() {
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt("password".getBytes(), salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptBlocksizeLoop_CEij3() {
        byte[] keyBytes = new byte[64]; // key length is a multiple of blocksize
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptBlocksizeLoopRemainder_bedA4() {
        byte[] keyBytes = new byte[67]; // key length is not a multiple of blocksize
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSBytesLoop_vnQN7() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(16); // salt length is a multiple of blocksize
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSBytesLoopRemainder_HrWf8() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(17); // salt length is not a multiple of blocksize
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptRoundsCustom_lclc9() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + "rounds=1000$" + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptDefaultRounds_VVCK10() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptEmptyKey_IcFw11() {
        byte[] keyBytes = new byte[0];
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        Sha2Crypt.sha256Crypt(keyBytes, salt);
    }

    @Test
    public void testSha256CryptInvalidSalt_EHDE1_hTpC0() {
        assertThrows(IllegalArgumentException.class, () -> Sha2Crypt.sha512Crypt("password".getBytes(), "invalidsalt"));
    }
}