/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSingleCharacter_JVoq2() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals("A", soundex.soundex("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMultipleCharacters_yRIB3() {
        RefinedSoundex soundex = new RefinedSoundex("01230120022455012623010202");
        assertEquals("B530", soundex.soundex("Baxter"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexConsecutiveDuplicates_JAAQ4() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals("P236", soundex.soundex("Papper"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNonAlphabeticCharacters_cPMK5() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals("H560", soundex.soundex("Holloway"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_1_DvwC0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        try {
            int result = refinedSoundex.difference("test1", "test2");
            assertEquals(0, result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_hTJB0() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = (String) soundex.encode("Hello");
        assertEquals("H400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ncve0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.encode("Hello");
        assertEquals("H400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withMapping_dutk1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("0123012004");
        String result = refinedSoundex.encode("Hello");
        assertEquals("H400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withCharMapping_HcYG2() {
        char[] mapping = {'0', '1', '2', '3', '0', '1', '2', '0', '0', '4'};
        RefinedSoundex refinedSoundex = new RefinedSoundex(mapping);
        String result = refinedSoundex.encode("Hello");
        assertEquals("H400", result);
    }
}