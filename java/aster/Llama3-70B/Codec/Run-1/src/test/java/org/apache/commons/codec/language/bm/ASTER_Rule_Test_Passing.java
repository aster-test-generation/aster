/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Rule_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance1_AMnW0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance2_vZvl1() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance3_srzl2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance7_kbHH6() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        langs.isEmpty();
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance8_aEIX7() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        langs.isEmpty();
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance9_yVLc8() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        langs.isEmpty();
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance10_pRDK9() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        langs.isSingleton();
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_EmptyLanguageSet_HMGv2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(Collections.emptySet());
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NullNameType_aTUv6() {
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        try {
            Rule.getInstanceMap(null, rt, langs);
            fail();
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NullRuleType_FfQO7() {
        NameType nameType = NameType.ASHKENAZI;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        try {
            Rule.getInstanceMap(nameType, null, langs);
            fail();
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_EmptyNameType_rOSE9() {
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("lang1"));
        try {
            Rule.getInstanceMap(NameType.values()[0], rt, langs);
            fail();
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_ooMd0_rgdt0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<String>());
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NullLanguageSet_mhxG8_knhl0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = null;
        try {
            Rule.getInstanceMap(nameType, rt, (LanguageSet) langs);
            fail();
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance6_qiqP5_VPld0_fid2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<String>());
        assertTrue(langs.isEmpty());
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
        assertNotNull(result);
    }
}