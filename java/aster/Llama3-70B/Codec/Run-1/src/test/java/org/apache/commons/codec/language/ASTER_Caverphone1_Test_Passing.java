/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone1_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_zCks0() {
        Caverphone1 caverphone1 = new Caverphone1();
        assertEquals("111111", caverphone1.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_rtdg1() {
        Caverphone1 caverphone1 = new Caverphone1();
        assertEquals("111111", caverphone1.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValid_hfBj2() {
        Caverphone1 caverphone1 = new Caverphone1();
        assertEquals("SMT111", caverphone1.encode("Smith"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_GIwI0() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        try {
            assertTrue(caverphone1.isEncodeEqual("hello", "hello"));
        } catch (EncoderException e) {
            fail("EncoderException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_XiRx0() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        String source = "test";
        Object result = caverphone1.encode(source);
        assertNotNull(result);
    }
}