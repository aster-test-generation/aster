/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base16_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_dALP0() {
        Base16 base16 = new Base16();
        assertTrue(base16.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_qjtq0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        String basen = "HelloWorld";
        boolean result = base16.isInAlphabet(basen);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_RssK1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'};
        boolean result = base16.isInAlphabet(arrayOctet, false);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Byte_Array_yZgm0() throws DecoderException {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] bytes = new byte[]{1, 2, 3};
        Object result = base16.decode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_String_rPWn1() throws DecoderException {
        Base16 base16 = new Base16(true);
        String str = "Hello World";
        Object result = base16.decode(str);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_default_mXOB0() {
        Base16 base16 = new Base16();
        assertEquals(CodecPolicy.STRICT, base16.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_lowerCase_sqAa1() {
        Base16 base16 = new Base16(true);
        assertEquals(CodecPolicy.STRICT, base16.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonEmptyArray_Mujn1() {
        Base16 base16 = new Base16(true);
        byte[] input = "Hello, World!".getBytes();
        byte[] result = base16.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_lengthExceedsMaximumSize_glaJ3_QzYn0() {
        Base16 base16 = new Base16();
        byte[] data = new byte[Integer.MAX_VALUE / 2];
        try {
            base16.encode(data, 0, data.length, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResults_NoData_FaQt2_wXlP0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 5;
        int result = base16.readResults(b, bPos, bAvail, null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_UOhB1_uMrZ1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{'A'};
        assertTrue(base16.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_String_rPWn1_fid2() throws DecoderException {
        Base16 base16 = new Base16(true);
        String str = "SGVsbG8gV29ybGQ=";
        byte[] result = (byte[]) base16.decode(str);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonEmptyArray_Mujn1_fid2() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        byte[] input = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        byte[] result = base16.decode(input);
        assertNotNull(result);
    }
}