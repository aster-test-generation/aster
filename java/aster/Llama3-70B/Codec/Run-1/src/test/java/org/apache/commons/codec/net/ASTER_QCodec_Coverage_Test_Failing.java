/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_ThrowsDecoderExceptionWithCorrectMessage_WhenUnsupportedEncodingExceptionOccurs_XHuS1() throws DecoderException {
        QCodec qCodec = new QCodec();
        try {
            qCodec.decode("Invalid encoding");
            assert false; // This line should not be reached
        } catch (DecoderException e) {
            assert e.getMessage() != null;
            assert e.getCause() instanceof UnsupportedEncodingException;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_OvBP1() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "Hello World";
        assertEquals(str, qCodec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_oRtD1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String str = "Hello";
        Object result = qCodec.encode(str);
        assert result.equals(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ZnMg0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String expected = "Encoded Hello, World!";
        String actual = qCodec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonStringObject_bAMq2_KfWv0_fid3() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = null;
        Charset charset = null;
        try {
            qCodec.encodeText(text, charset);
            assert false; // EncoderException should be thrown
        } catch (EncoderException e) {
        }
    }
}