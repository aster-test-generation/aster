/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_wuxX0() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("Hello%20World", "UTF-8");
        assert "Hello World".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_EPfx1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String result = urlCodec.decode(null, "UTF-8");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_withCharset_tfXd0() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_withoutCharset_VfIg1() {
        URLCodec urlCodec = new URLCodec();
        assertEquals("UTF-8", urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_withCharset_aWjJ0() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_withoutCharset_ROyH1() {
        URLCodec urlCodec = new URLCodec();
        assertEquals("UTF-8", urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNullBytes_ROor0() {
        byte[] result = URLCodec.encodeUrl(null, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNullUrlSafe_VMap1() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = null;
        byte[] bytes = "Hello World".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlSpace_Lumv2() {
        BitSet urlsafe = new BitSet();
        urlsafe.set(' ');
        byte[] bytes = "Hello World".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals("4", new String(result, result.length - 1, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlUrlSafe_beqq3() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        byte[] bytes = "a".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals("a", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNotUrlSafe_auRl4() {
        BitSet urlsafe = new BitSet();
        byte[] bytes = "a".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals("%61", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlMultipleBytes_gqzA5() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        byte[] bytes = "abc".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals("a%62%63", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlEmptyBytes_xhLn6() {
        BitSet urlsafe = new BitSet();
        byte[] bytes = "".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals("", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_APqu0() throws DecoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] bytes = "Hello%20World".getBytes();
        byte[] result = urlCodec.decode(bytes);
        assertArrayEquals("Hello World".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_VBNo0_1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String result = urlCodec.encode("Hello World", "UTF-8");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_VBNo0_2() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String result = urlCodec.encode("Hello World", "UTF-8");
        assertEquals("Hello+World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_TcnR1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_ypAX0_cBtK0() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        try {
            String result = urlCodec.decode("Hello%20World");
            assertEquals("Hello World", result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlNull_nRNP0_VMxn1() {
        byte[] result = null;
        try {
            result = URLCodec.decodeUrl(null);
        } catch (DecoderException e) {
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEmpty_siJz1_heyl0() {
        byte[] bytes = new byte[0];
        byte[] result = new byte[0];
        try {
            result = URLCodec.decodeUrl(bytes);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEmpty_siJz1_XUUV1() throws DecoderException {
        byte[] bytes = new byte[0];
        byte[] result = URLCodec.decodeUrl(bytes);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlPlus_kXzk2_Jzin0() throws DecoderException {
        byte[] bytes = "+".getBytes();
        try {
            byte[] result = URLCodec.decodeUrl(bytes);
            assertEquals(" ", new String(result));
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEscape_QXMA3_Yofe0() {
        byte[] bytes = "%20".getBytes();
        byte[] result = new byte[0];
        try {
            result = URLCodec.decodeUrl(bytes);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
        assertEquals(" ", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEscape_QXMA3_ERRm1() throws DecoderException {
        byte[] bytes = "%20".getBytes();
        byte[] result = URLCodec.decodeUrl(bytes);
        assertEquals(" ", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlNormal_LlRD4_eZAw0() {
        byte[] bytes = "Hello World".getBytes();
        byte[] result = null;
        try {
            result = URLCodec.decodeUrl(bytes);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
        assertEquals("Hello World", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlNormal_LlRD4_Gyjv1() throws DecoderException {
        byte[] bytes = "Hello World".getBytes();
        byte[] result = URLCodec.decodeUrl(bytes);
        assertEquals("Hello World", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_bdPu1_nWQy0() {
        URLCodec codec = new URLCodec("UTF-8");
        byte[] bytes = "Hello%20World".getBytes();
        try {
            byte[] result = codec.decode(bytes);
            assertEquals("Hello World", new String(result));
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_hCaj2_KQUV0() {
        URLCodec codec = new URLCodec("UTF-8");
        try {
            assertEquals("Hello+World", codec.encode("Hello World", "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_hCaj2_dUMr1() {
        try {
            assertEquals("Hello+World", java.net.URLEncoder.encode("Hello World", "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_wLgI0_LZge0() {
        URLCodec urlCodec = new URLCodec();
        String result = null;
        try {
            result = urlCodec.encode("https://www.example.com", "UTF-8");
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException was thrown");
        }
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_VBNo0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String result = urlCodec.encode("Hello World", "UTF-8");
        assertNotNull(result);
        assertEquals("Hello+World", result);
    }
}