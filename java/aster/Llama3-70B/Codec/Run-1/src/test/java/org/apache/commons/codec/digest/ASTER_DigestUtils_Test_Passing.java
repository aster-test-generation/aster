/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_RZKA0() {
        MessageDigest messageDigest = DigestUtils.getSha384Digest();
        assertNotNull(messageDigest);
        assertEquals("SHA-384", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_qqKK0() {
        byte[] result = DigestUtils.sha1("Hello, World!");
        byte[] expected = DigestUtils.sha1("Hello, World!");
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_kmFB0() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha256Hex(data);
        assertNotNull(result);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNullMessageDigest_ofdt1() throws IOException {
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        try {
            DigestUtils.digest(null, data);
            fail();
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestUnsupportedAlgorithm_yqQk9() throws IOException {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("UnsupportedAlgorithm");
            fail();
        } catch (NoSuchAlgorithmException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_RgoU0() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        String result = digestUtils.digestAsHex("Hello, World!");
        assertNotNull(result);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_TgVo0() {
        MessageDigest messageDigest = DigestUtils.getMd2Digest();
        assertNotNull(messageDigest);
        assertEquals("MD2", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_wPNc0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_512Hex(data);
        assertNotNull(result);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_aRnT0() {
        byte[] result = DigestUtils.sha("Hello, World!");
        assertNotNull(result);
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_wfHd0() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNotNull(digest);
        assertEquals("SHA3-512", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_tasb0() throws IOException {
        DigestUtils digestUtils = new DigestUtils("MD5");
        File file = new File("testFile.txt");
        byte[] result = digestUtils.digest(file);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_cMCP0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_224Hex(data);
        assertNotNull(result);
        assertEquals(56, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_cTxn0() {
        MessageDigest messageDigest = DigestUtils.getSha1Digest();
        assertNotNull(messageDigest);
        assertEquals("SHA-1", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_wGbj0() {
        MessageDigest messageDigest = DigestUtils.getDigest("MD5");
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest1_zLbS0() {
        DigestUtils digestUtils = new DigestUtils();
        assertNull(digestUtils.getMessageDigest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest3_IQOe2() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        assertNotNull(digestUtils.getMessageDigest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_tIkI0() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_FEzk0() {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertNotNull(digest);
        assertEquals("SHA3-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_zglM0() {
        byte[] result = DigestUtils.sha3_224("testData");
        assertNotNull(result);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_ieOP1() {
        byte[] result = DigestUtils.sha3_256("Hello, World!");
        assertNotNull(result);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_wiZj0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_224("testData");
        assertNotNull(result);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_WwDk0() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertNotNull(digest);
        assertEquals("SHA3-224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_SKtx0() {
        byte[] result = DigestUtils.sha3_384("Hello, World!");
        assertNotNull(result);
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_NziD0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha(data);
        byte[] expected = DigestUtils.sha1(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_zfCM0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_512(data);
        assertNotNull(result);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_CyBw0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_384Hex(data);
        assertNotNull(result);
        assertEquals(96, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_sBth0() {
        byte[] result = DigestUtils.sha3_512("Hello, World!");
        assertNotNull(result);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_sJTj0() {
        String data = "Hello, World!";
        String expected = DigestUtils.sha1Hex(data);
        String actual = DigestUtils.shaHex(data);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_mzMR0() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md2Hex(data);
        assertNotNull(result);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_HFNl0() {
        MessageDigest digest = DigestUtils.getSha512Digest();
        assertNotNull(digest);
        assertEquals("SHA-512", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_NxbL0() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512Hex(data);
        assertNotNull(result);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_KNxk0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_224(data);
        assertNotNull(result);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_true_dJbn0() {
        assertTrue(DigestUtils.isAvailable("MD5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_false_DuAu1() {
        assertFalse(DigestUtils.isAvailable("UnknownAlgorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_Lznx0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_384(data);
        assertNotNull(result);
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_jZrJ0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_224(data);
        assertNotNull(result);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_NfXo0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_256(data);
        assertNotNull(result);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_PWdH0() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_256Hex(data);
        assertNotNull(result);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_JVfn0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.md2(data);
        assertNotNull(result);
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_cVka0() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha1Hex(data);
        assertNotNull(result);
        assertEquals(40, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_CIqC0() {
        String data = "Hello, World!";
        String expected = "65a8e27d8879283831b664bd8b7f0ad4";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_tqBH0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_256("testData");
        assertNotNull(result);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_qrZv0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_256(data);
        assertNotNull(result);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_YozS0() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md5Hex(data);
        assertNotNull(result);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_uXrj0() {
        MessageDigest messageDigest = DigestUtils.getSha512_224Digest();
        assertNotNull(messageDigest);
        assertEquals("SHA-512/224", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_VdGV0() {
        byte[] result = DigestUtils.sha384("Hello, World!");
        assertNotNull(result);
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_VYNF0() {
        byte[] result = DigestUtils.md2("Hello, World!");
        assertNotNull(result);
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_VOpL0() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha384Hex(data);
        assertNotNull(result);
        assertEquals(96, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_UgHw0() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
        assertEquals("SHA3-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_tHZB0() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] data = "Hello, World!".getBytes();
        String result = digestUtils.digestAsHex(data);
        assertNotNull(result);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_XQtc0() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_256Hex(data);
        assertNotNull(result);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_GhCU0() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        assertNotNull(messageDigest);
        assertEquals("SHA-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_PkUZ0() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] result = digestUtils.digest("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_HodJ0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_224Hex(data);
        assertNotNull(result);
        assertEquals(56, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_VhGs0() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);
        assertEquals("MD5", md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_PdDO0() {
        byte[] result = DigestUtils.sha512("Hello, World!");
        assertNotNull(result);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_SOdC0() {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        assertNotNull(messageDigest);
        assertEquals("SHA-512/256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_RZKA0_1() {
        MessageDigest messageDigest = DigestUtils.getSha384Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_RZKA0_2() {
        MessageDigest messageDigest = DigestUtils.getSha384Digest();
        assertEquals("SHA-384", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_kmFB0_1() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha256Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_kmFB0_2() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha256Hex(data);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_RgoU0_1() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        String result = digestUtils.digestAsHex("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_RgoU0_2() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        String result = digestUtils.digestAsHex("Hello, World!");
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_TgVo0_1() {
        MessageDigest messageDigest = DigestUtils.getMd2Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_TgVo0_2() {
        MessageDigest messageDigest = DigestUtils.getMd2Digest();
        assertEquals("MD2", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_wPNc0_1() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_512Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_wPNc0_2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_512Hex(data);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_aRnT0_1() {
        byte[] result = DigestUtils.sha("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_aRnT0_2() {
        byte[] result = DigestUtils.sha("Hello, World!");
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_wfHd0_1() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_wfHd0_2() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertEquals("SHA3-512", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_cMCP0_1() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_224Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_cMCP0_2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_224Hex(data);
        assertEquals(56, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_cTxn0_1() {
        MessageDigest messageDigest = DigestUtils.getSha1Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_cTxn0_2() {
        MessageDigest messageDigest = DigestUtils.getSha1Digest();
        assertEquals("SHA-1", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_FEzk0_1() {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_FEzk0_2() {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertEquals("SHA3-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_zglM0_1() {
        byte[] result = DigestUtils.sha3_224("testData");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_zglM0_2() {
        byte[] result = DigestUtils.sha3_224("testData");
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_ieOP1_1() {
        byte[] result = DigestUtils.sha3_256("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_ieOP1_2() {
        byte[] result = DigestUtils.sha3_256("Hello, World!");
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_wiZj0_1() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_224("testData");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_wiZj0_2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_224("testData");
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_WwDk0_1() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_WwDk0_2() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertEquals("SHA3-224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_SKtx0_1() {
        byte[] result = DigestUtils.sha3_384("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_SKtx0_2() {
        byte[] result = DigestUtils.sha3_384("Hello, World!");
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_zfCM0_1() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_512(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_zfCM0_2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_512(data);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_CyBw0_1() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_384Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_CyBw0_2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_384Hex(data);
        assertEquals(96, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_sBth0_1() {
        byte[] result = DigestUtils.sha3_512("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_sBth0_2() {
        byte[] result = DigestUtils.sha3_512("Hello, World!");
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_mzMR0_1() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md2Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_mzMR0_2() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md2Hex(data);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_HFNl0_1() {
        MessageDigest digest = DigestUtils.getSha512Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_HFNl0_2() {
        MessageDigest digest = DigestUtils.getSha512Digest();
        assertEquals("SHA-512", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_NxbL0_1() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_NxbL0_2() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512Hex(data);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_KNxk0_1() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_224(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_KNxk0_2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_224(data);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_Lznx0_1() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_384(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_Lznx0_2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_384(data);
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_jZrJ0_1() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_224(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_jZrJ0_2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_224(data);
        assertEquals(28, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_NfXo0_1() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_256(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_NfXo0_2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha3_256(data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_PWdH0_1() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_256Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_PWdH0_2() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_256Hex(data);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_JVfn0_1() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.md2(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_JVfn0_2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.md2(data);
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_cVka0_1() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha1Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_cVka0_2() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha1Hex(data);
        assertEquals(40, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_tqBH0_1() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_256("testData");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_tqBH0_2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = DigestUtils.sha512_256("testData");
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_qrZv0_1() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_256(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_qrZv0_2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.sha512_256(data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_YozS0_1() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md5Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_YozS0_2() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.md5Hex(data);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_uXrj0_1() {
        MessageDigest messageDigest = DigestUtils.getSha512_224Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_uXrj0_2() {
        MessageDigest messageDigest = DigestUtils.getSha512_224Digest();
        assertEquals("SHA-512/224", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_VdGV0_1() {
        byte[] result = DigestUtils.sha384("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_VdGV0_2() {
        byte[] result = DigestUtils.sha384("Hello, World!");
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_VYNF0_1() {
        byte[] result = DigestUtils.md2("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_VYNF0_2() {
        byte[] result = DigestUtils.md2("Hello, World!");
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_VOpL0_1() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha384Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_VOpL0_2() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha384Hex(data);
        assertEquals(96, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_UgHw0_1() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_UgHw0_2() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertEquals("SHA3-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_tHZB0_1() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] data = "Hello, World!".getBytes();
        String result = digestUtils.digestAsHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_tHZB0_2() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] data = "Hello, World!".getBytes();
        String result = digestUtils.digestAsHex(data);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_XQtc0_1() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_256Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_XQtc0_2() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha512_256Hex(data);
        assertEquals(64, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_GhCU0_1() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_GhCU0_2() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        assertEquals("SHA-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_HodJ0_1() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_224Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_HodJ0_2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_224Hex(data);
        assertEquals(56, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_VhGs0_1() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_VhGs0_2() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertEquals("MD5", md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_PdDO0_1() {
        byte[] result = DigestUtils.sha512("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_PdDO0_2() {
        byte[] result = DigestUtils.sha512("Hello, World!");
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_SOdC0_1() {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_SOdC0_2() {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        assertEquals("SHA-512/256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_Fxur0_OjVi0() throws IOException {
        String str = "Hello, World!";
        byte[] data = str.getBytes();
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        byte[] expected = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_Zhzs0_LEmO0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            DigestUtils digestUtils = new DigestUtils(messageDigest);
            MessageDigest updatedDigest = digestUtils.getSha512_256Digest();
            assertNotNull(updatedDigest);
        } catch (NoSuchAlgorithmException e) {
            fail("MD5 algorithm not found");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_flvk0_1() throws IOException {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_flvk0_2() throws IOException {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertEquals("SHA-512/256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_rgjy0_cQXe0() throws IOException {
        String input = "Hello, World!";
        MessageDigest md = DigestUtils.getSha512_256Digest();
        md.update(input.getBytes());
        byte[] result = md.digest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_rgjy0_avoJ1() throws IOException {
        String input = "Hello, World!";
        MessageDigest md = DigestUtils.getSha512_256Digest();
        byte[] result = md.digest(input.getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_AgGc0_MlTv0_1() throws IOException {
        String data = "Hello, World!";
        byte[] result = DigestUtils.sha384(data.getBytes("UTF-8"));
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_AgGc0_MlTv0_2() throws IOException {
        String data = "Hello, World!";
        byte[] result = DigestUtils.sha384(data.getBytes("UTF-8"));
        assertEquals(48, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_LXHZ0_BKrz0_1() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_512Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_LXHZ0_BKrz0_2() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.sha3_512Hex(data);
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_aMFW0_KaSc0_1() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        digest.update(data);
        byte[] result = digest.digest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_aMFW0_KaSc0_2() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        digest.update(data);
        byte[] result = digest.digest();
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_tSvn0_MeIO0_1() {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        messageDigest.update(valueToDigest.array());
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_tSvn0_MeIO0_2() {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        messageDigest.update(valueToDigest.array());
        assertEquals(messageDigest, messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_KPDS0_UxZz0_1() throws Exception {
        MessageDigest result = DigestUtils.getSha512_256Digest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_KPDS0_UxZz0_2() throws Exception {
        MessageDigest result = DigestUtils.getSha512_256Digest();
        assertEquals("SHA-512/256", result.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_kMtY0_JwKZ0_1() throws IOException {
        String data = "Hello, World!";
        String result = DigestUtils.sha1Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_kMtY0_JwKZ0_2() throws IOException {
        String data = "Hello, World!";
        String result = DigestUtils.sha1Hex(data);
        assertEquals(40, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_iAza0_ahmQ0() throws IOException {
        DigestUtils digestUtils = new DigestUtils("MD5");
        java.nio.file.Path path = java.nio.file.Paths.get("test.txt");
        java.nio.file.Files.write(path, "Hello, World!".getBytes());
        String result = digestUtils.digestAsHex(path);
        assertEquals("65a8e27d8879283831b664bd8b7f0ad4", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_dmxh0_TcwP0() {
        MessageDigest defaultMessageDigest = null;
        try {
            defaultMessageDigest = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            fail("MD5 algorithm not found");
        }
        MessageDigest result = DigestUtils.getSha512_256Digest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_gzjL0_pTyz0_1() throws IOException {
        byte[] data = "Hello, World!".getBytes("UTF-8");
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_gzjL0_pTyz0_2() throws IOException {
        byte[] data = "Hello, World!".getBytes("UTF-8");
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_cYnU0_mjtn0() throws IOException {
        DigestUtils digestUtils = new DigestUtils("MD5");
        java.nio.file.Path path = java.nio.file.Paths.get("test.txt");
        java.nio.file.Files.write(path, "Hello, World!".getBytes());
        byte[] result = digestUtils.digest(path.toFile());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_Jysq0_YoKm0() throws IOException {
        String data = "Hello, World!";
        String result = DigestUtils.sha512Hex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_pjRk0_xEBB0_1() throws IOException {
        DigestUtils digestUtils = new DigestUtils("MD5");
        File file = new File("testFile.txt");
        java.io.FileOutputStream fos = new java.io.FileOutputStream(file);
        fos.write("Hello, World!".getBytes());
        fos.close();
        String hexString = digestUtils.digestAsHex(file);
        assertNotNull(hexString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_pjRk0_xEBB0_2() throws IOException {
        DigestUtils digestUtils = new DigestUtils("MD5");
        File file = new File("testFile.txt");
        java.io.FileOutputStream fos = new java.io.FileOutputStream(file);
        fos.write("Hello, World!".getBytes());
        fos.close();
        String hexString = digestUtils.digestAsHex(file);
        assertEquals(32, hexString.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_VUQB0_OAQt0() throws IOException {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance("SHA-512/256");
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError("SHA-512/256 algorithm not found", e);
        }
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestSHA256_uOek6_hfVi0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestSHA512_SihE7_ZoTv0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_wnOG0_gdWI0() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        File data = new File("test.txt");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_GOFE0_qXTP0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-512/256");
            byte[] data = "Hello, World!".getBytes();
            MessageDigest sha512_256Digest = DigestUtils.getSha512_256Digest();
            byte[] result = sha512_256Digest.digest(data);
        } catch (NoSuchAlgorithmException e) {
            fail("NoSuchAlgorithmException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_Grcf0_fid2() {
        String data = "Hello, World!";
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.sha1Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_CyfY0_fid2() {
        String data = "Hello, World!";
        String expected = "766745f058e8a0438f19de48ae56ea5f123fe738af39bca050a7547a";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_ilyz0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.shaHex(data);
        assertEquals("0a0a9f2a6772942557ab5355d76af442f8f65e01", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_sKTF0_fid2() {
        String data = "Hello, World!";
        String expected = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_YGyu0_fid2() {
        String data = "Hello, World!";
        String expected = "a69f73c3bd8043689a6cd9d7c119344771648bfa3a6b84466252581466c0a34a3f6a6f2b6dfbdf2e1e";
        String actual = DigestUtils.sha3_384Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_Ecbv0_fid2() {
        String data = "Hello, World!";
        String expected = "1c8f1e6a94aaa7145210bf90bb52871a";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_PZxu0_fid2() {
        String data = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
        String actual = DigestUtils.sha512_256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_uqkg0_fid2() {
        String data = "Hello, World!";
        String expected = "5485cc9b3365b4305dfb4e8337e0a598a574f8242bf17289e0dd6c20a3cd44a089de16ab4ab308f63e44b1170eb5f515";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_HrJK0_fid2() {
        String data = "Hello, World!";
        byte[] expected = {103, -17, 61, -121, 32, -95, -13, 122, -45, 45, 91, 114, 82, -13, 127, -104, 126, 115, -122, 114, 111, 119, -45, 45, 91, 114, 82, -13, 127, -104, 126, 115};
        byte[] actual = DigestUtils.sha256(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_mnse0_fid2() {
        String data = "Hello, World!";
        String expected = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";
        String actual = DigestUtils.sha3_512Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_NIyW0_1_fid2() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.allocate("Hello, World!".getBytes().length);
        data.put("Hello, World!".getBytes());
        data.flip();
        String result = digestUtils.digestAsHex(data);
        assertEquals("65a8e27d8879283831b664bd8b7f0ad4", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_NeGU0_fid2() {
        String data = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3c07f164bc6c0e8bd084a484be474bac95a281722c10c3c954a31561971bd84";
        String actual = DigestUtils.sha512Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_MgDy0_fid2() {
        String data = "Hello, World!";
        String expected = "1af17a664e3fa8e419b8ba05c2a173169df76162a5a286e0c405b460d478f7ef";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_qOol0_fid2() {
        String data = "Hello, World!";
        String expected = "853048fb8b11462b6100385633c0cc8dcdc6e2b8e376c28102bc84f2";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_TQTY0_OcJF0_fid2() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.shaHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_YqCy0_zSXn0_fid2() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-512/256");
        File data = new File("test.txt");
        byte[] actual = DigestUtils.digest(messageDigest, data);
        byte[] expected = new byte[32]; // Initialize with the correct length
        assertEquals(expected.length, actual.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest2_nToK1_jZqz0_fid2() {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-512/256");
        } catch (NoSuchAlgorithmException e) {
            fail("SHA-512/256 algorithm not found");
        }
        DigestUtils digestUtils = new DigestUtils();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_CmND0_MDeJ0_fid2() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-512/256");
            ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
            byte[] result = DigestUtils.digest(messageDigest, data);
            assertNotNull(result);
            assertEquals(32, result.length);
        } catch (NoSuchAlgorithmException e) {
            fail("NoSuchAlgorithmException occurred");
        }
    }
}