/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_8() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('+', result[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_JKae1() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = "Hello World".getBytes();
        assertEquals("[72, 101, 108, 108, 111, 43, 87, 111, 114, 108, 100]", codec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_PvbT1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = "Hello%20World".getBytes();
        assertEquals("[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]", codec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByte_NtuC0_2_fid2() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        byte[] bytes = new byte[]{-1, 0, 1};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('%', result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByte_NtuC0_3_fid2() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        byte[] bytes = new byte[]{-1, 0, 1};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('F', result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByte_NtuC0_4_fid2() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        byte[] bytes = new byte[]{-1, 0, 1};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('F', result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_1_fid2() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_2_fid2() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('%', result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_3_fid2() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('F', result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1_4_fid2() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('F', result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_JKae1_fid2() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = "Hello World".getBytes();
        assertEquals("Hello+World", codec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_PvbT1_fid2() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = "Hello%20World".getBytes();
        assertEquals("Hello World", codec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByte_NtuC0() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        byte[] bytes = new byte[]{-1, 0, 1};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(3, result.length);
        assertEquals('%', result[0]);
        assertEquals('F', result[1]);
        assertEquals('F', result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByteWithSpace_jmNL1() {
        URLCodec urlCodec = new URLCodec();
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256); // set all bits to true
        urlsafe.clear(' '); // set space to false
        byte[] bytes = new byte[]{-1, 0, 1, (byte) ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(7, result.length);
        assertEquals('%', result[0]);
        assertEquals('F', result[1]);
        assertEquals('F', result[2]);
        assertEquals('%', result[3]);
        assertEquals('2', result[4]);
        assertEquals('0', result[5]);
        assertEquals('+', result[6]);
    }
}