/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.Base64;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_HvcZ0() {
        BCodec bCodec = new BCodec("UTF-8");
        try {
            String result = bCodec.decode("Hello World");
            assertNotNull(result);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_withNonNullBytes_VPrP0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        byte[] bytes = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        byte[] result = bCodec.doDecoding(bytes);
        assertArrayEquals("Hello, World!".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_withNullBytes_qsVb1() {
        BCodec bCodec = new BCodec();
        byte[] bytes = null;
        byte[] result = bCodec.doDecoding(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding1_Gcrh0() {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding2_cKnS1() {
        BCodec bCodec = new BCodec(Charset.defaultCharset());
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding3_gzXu2() {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding4_IrHS3() {
        BCodec bCodec = new BCodec();
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_Strict_iuip0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertTrue(bCodec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_Lenient_GXuT1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertFalse(bCodec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNull_ztLM0() {
        BCodec bCodec = new BCodec("UTF-8");
        byte[] result = bCodec.doEncoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_kBHy1_1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = bCodec.doEncoding(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_kBHy1_2() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = bCodec.doEncoding(bytes);
        assertArrayEquals(Base64.encodeBase64(bytes), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_withCharset_andCodecPolicy_dhWX0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertEquals(Charset.forName("UTF-8"), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_withCharset_SwGb1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        assertEquals(Charset.forName("UTF-8"), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_withCharsetName_qmnw2() {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_withNoArgs_Fvkk3() {
        BCodec bCodec = new BCodec();
        assertNotNull(bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_Mbtp0() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String result = bCodec.encodeText("Hello", "UTF-8");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset1_Qtph0() {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        assertEquals(Charset.defaultCharset().name(), bCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset2_USzC1() {
        BCodec bCodec = new BCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset().name(), bCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset3_vCBj2() {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals("UTF-8", bCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset4_QhNU3() {
        BCodec bCodec = new BCodec();
        assertNotNull(bCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextNull_mMmw0() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String result = bCodec.decodeText(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValid_PeDm1() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec("UTF-8");
        String text = "=?UTF-8?B?SGVsbG8=?=";
        String result = bCodec.decodeText(text);
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_TnGK0_1() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String text = "Hello World";
        Charset charset = Charset.forName("UTF-8");
        String result = bCodec.encodeText(text, charset);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_TnGK0_2() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String text = "Hello World";
        Charset charset = Charset.forName("UTF-8");
        String result = bCodec.encodeText(text, charset);
        assertEquals("=?UTF-8?B?SGVsbG8gV29ybGQ=?=", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_XUkU0_eqMv1() {
        BCodec bCodec = new BCodec();
        Object result = null;
        try {
            result = bCodec.decode(null);
        } catch (DecoderException e) {
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_gCwD1_kGfr0() {
        BCodec bCodec = new BCodec("UTF-8");
        try {
            String result = bCodec.decode("Hello World");
            assertEquals("Hello World", result);
        } catch (DecoderException e) {
            // No need to fail, DecoderException should not be thrown
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_acnj0_NLzA0() {
        BCodec bCodec = new BCodec();
        try {
            String result = bCodec.encodeText(null, Charset.defaultCharset());
            assertNull(result);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_teuw1_fbEl0() {
        BCodec bCodec = new BCodec("UTF-8");
        String value = "Hello";
        try {
            String result = bCodec.encodeText(value, Charset.forName("UTF-8"));
            assertNotEquals(value, result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dTuK0_jXli0() {
        BCodec bCodec = new BCodec("UTF-8");
        try {
            String result = bCodec.encodeText("Hello World", Charset.forName("UTF-8"));
            assertNotNull(result);
            assertEquals("=?UTF-8?B?SGVsbG8gV29ybGQ=?=", result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_kBHy1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] result = bCodec.doEncoding(bytes);
        assertNotNull(result);
        assertArrayEquals(Base64.encodeBase64(bytes), result);
    }
}