/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_GfxY0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{-12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122, -12, -55, 122};
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_Utiv0() {
        byte[] result = DigestUtils.md5("Hello, World!");
        byte[] expected = {-48, 45, -31, 103, 4, -101, 25, 84, -35, 1, -17, 31, 48, 27, -73, 125};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_eBHw0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{-90, -67, -44, 43, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_Grcf0() {
        String data = "Hello, World!";
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_CyfY0() {
        String data = "Hello, World!";
        String expected = "413846633356393465396439343935633561393134663739";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_WCTH0() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] result = digestUtils.digest(data);
        assertArrayEquals(new byte[]{-48, -73, 74, 96, -22, -38, -50, 45, -85, 97, -13, 65, -67, 114, -116, 57}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_ilyz0() {
        byte[] data = "Hello, World!".getBytes();
        String result = DigestUtils.shaHex(data);
        assertEquals("2ef7bde608ce5404e97d5f042f95f89f1c232871", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_sKTF0() {
        String data = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_YGyu0() {
        String data = "Hello, World!";
        String expected = "a69f73c3bd8043689a6cd9d7c119344771648bfa3a6b84466252581466c0a34a3f6a6f2b6dfbdf2e1e";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_Ecbv0() {
        String data = "Hello, World!";
        String expected = "7344387a43a8b5b1e22";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_PZxu0() {
        String data = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_uqkg0() {
        String data = "Hello, World!";
        String expected = "382711e5fb92f73f9e63d3a7a1a031d0e2a3b6f7c2429790176a9141f6a15";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_HrJK0() {
        String data = "Hello, World!";
        byte[] expected = {103, -17, 61, -121, 32, -95, -13, 122, -45, 45, 91, 114, 82, -13, 127, -104, 126, 115, -122, 114, 111, 119, -45, 45, 91, 114, 82, -13, 127, -104, 126, 115};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_mnse0() {
        String data = "Hello, World!";
        String expected = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_NIyW0() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put("Hello, World!".getBytes());
        data.flip();
        String result = digestUtils.digestAsHex(data);
        assertNotNull(result);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_NeGU0() {
        String data = "Hello, World!";
        String expected = "315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3c07f164bc6c0e8bd084a484be474bac95a281722c10c3c954a31561971bd84";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_ATgO0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.md5(data);
        byte[] expected = new byte[]{-48, -73, -41, -10, 45, -51, 89, 115, -34, 103, -122, 51, -25, 114, -122, 103};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_wOPN0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = {-90, -101, 56, -12, -83, 115, -13, 122, -45, 45, 91, 114, 103, 122, 45, 53, 95, 122, 122, 45};
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_MgDy0() {
        String data = "Hello, World!";
        String expected = "4e8da8b5d8a6a611e38391f12a93502573417f2ebedb2a0345d6a8f261e2b3f5";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_XUak0() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = digestUtils.digest(data);
        assertArrayEquals(new byte[]{-48, -73, 74, 48, 50, 48, 103, 81, 71, 101, 69, 121, 81, 103, 101, 104}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_qOol0() {
        String data = "Hello, World!";
        String expected = "4137e0349f91605a06dda87781d1e4893189792939f98a07";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_NIyW0_1() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put("Hello, World!".getBytes());
        data.flip();
        String result = digestUtils.digestAsHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_NIyW0_2() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put("Hello, World!".getBytes());
        data.flip();
        String result = digestUtils.digestAsHex(data);
        assertEquals(32, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_YqCy0_zSXn0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-512/256");
        File data = new File("test.txt");
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest2_nToK1_jZqz0() {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-512/256");
        } catch (NoSuchAlgorithmException e) {
            fail("SHA-512/256 algorithm not found");
        }
        DigestUtils digestUtils = new DigestUtils();
        assertEquals(DigestUtils.getSha512_256Digest(), digestUtils.getMessageDigest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_CmND0_MDeJ0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-512/256");
            ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
            byte[] result = DigestUtils.digest(messageDigest, data);
            assertArrayEquals(new byte[]{}, result);
        } catch (NoSuchAlgorithmException e) {
            fail("NoSuchAlgorithmException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_GfxY0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122, 84, -55, 122};
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_Utiv0_fid2() {
        byte[] result = DigestUtils.md5("Hello, World!");
        byte[] expected = {101, 45, -31, 103, 4, -101, 25, 84, -35, 1, -17, 31, 48, 27, -73, 125};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_eBHw0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{-33, -67, -44, 43, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122, -12, -122};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_WCTH0_fid2() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] result = digestUtils.digest(data);
        assertArrayEquals(new byte[]{101, -73, 74, 96, -22, -38, -50, 45, -85, 97, -13, 65, -67, 114, -116, 57}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_ATgO0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.md5(data);
        byte[] expected = new byte[]{101, -73, -41, -10, 45, -51, 89, 115, -34, 103, -122, 51, -25, 114, -122, 103};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_wOPN0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = {10, -101, 56, -12, -83, 115, -13, 122, -45, 45, 91, 114, 103, 122, 45, 53, 95, 122, 122, 45};
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_XUak0_fid2() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = digestUtils.digest(data);
        assertArrayEquals(new byte[]{101, -73, 74, 48, 50, 48, 103, 81, 71, 101, 69, 121, 81, 103, 101, 104}, result);
    }
}