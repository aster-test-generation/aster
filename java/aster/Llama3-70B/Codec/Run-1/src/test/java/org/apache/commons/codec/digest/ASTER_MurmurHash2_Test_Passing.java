/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash2_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_WfsU0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        long result = MurmurHash2.hash64(data, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_sQDN0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int length = 8;
        int seed = 123;
        int result = MurmurHash2.hash32(data, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_rQtR1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7};
        int length = 7;
        int seed = 456;
        int result = MurmurHash2.hash32(data, length, seed);
        assertEquals(-1590223822, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_PjQY0() {
        String text = "Hello, World!";
        int from = 0;
        int length = text.length();
        long result = MurmurHash2.hash64(text, from, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_qVdq0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int result = MurmurHash2.hash32(data, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_jUAQ0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long result = MurmurHash2.hash64(data, data.length, 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_EmptyArray_qOfQ1() {
        byte[] data = new byte[]{};
        long result = MurmurHash2.hash64(data, data.length, 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_NHfU0_dSgD0() {
        String text = "Hello, World!";
        byte[] data = text.getBytes();
        int length = data.length;
        int seed = 1;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(-6124663709607826265L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_xZwo0_JQFe0() {
        byte[] data = "test".getBytes();
        long result = MurmurHash2.hash64(data, data.length, 0);
        assertEquals(3407684658384555107L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nRSW0_YuRS0() {
        String text = "test";
        byte[] data = text.getBytes();
        int result = (int) (MurmurHash2.hash64(data, data.length, 0) & 0xffffffffL);
        assertEquals(1636781155, result);
    }
}