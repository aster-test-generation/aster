/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacValidKey_mFYB1() {
        Mac mac = HmacUtils.getInitializedMac("HMAC_MD5", "key".getBytes());
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_ONPd0_RBed0_fid2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        String expectedHex = "expectedHexValue"; // Replace with actual expected value
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    public void testUpdateHmac_IOException_aBOb6_gVBi0_fid2() throws Exception {
        Mac mac = Mac.getInstance("HmacSHA256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Test data".getBytes());
        try {
            HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
            hmacUtils.hmacHex(valueToDigest);
            fail("Expected IOException not thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_pAfx0_tiwN0_fid2() throws IOException {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        String expectedHmac = "expectedHmacValue"; // Replace with actual expected value
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String actualHmac = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertEquals(expectedHmac, actualHmac);
    }
}