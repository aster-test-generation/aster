/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_XXHash32_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_State0_KwEY0() {
        XXHash32 xxHash32 = new XXHash32(1);
        xxHash32.update(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, 0, 16);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_S2_Rotation_Omtc6_IFdN0() {
        XXHash32 xxHash32 = new XXHash32(1);
        byte[] b = new byte[16];
        b[8] = 1;
        xxHash32.update(b, 0, 16);
        assertNotNull(xxHash32);
        xxHash32.update(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_S3_Rotation_CyVJ7_RvOa0() {
        XXHash32 xxHash32 = new XXHash32(1);
        xxHash32.update((byte) 1);
        byte[] b = new byte[16];
        b[12] = 1;
        xxHash32.update(b, 0, 16);
        xxHash32.update((byte) 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_S0_Rotation_LXnw4_GMor0() {
        XXHash32 xxHash32 = new XXHash32(1);
        xxHash32.update(1);
        assertNotEquals(1, xxHash32.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_State0_Assignment_mPFf9_rOJV0() {
        XXHash32 xxHash32 = new XXHash32(1);
        xxHash32.update(1);
        assertTrue(true);
    }
}