/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_qwjJ0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int seed = 1;
        int result = MurmurHash3.hash32(data, length, seed);
        assertEquals(2128831089, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_SabR0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int result = MurmurHash3.hash32x86(data);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_dtPD0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long result = MurmurHash3.hash64(data);
        assertEquals(141098708111795L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lnLv0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int result = MurmurHash3.hash32(data);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_vrDN0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = 16;
        int seed = 1;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(new long[]{1441146963571446407L, 1441146963571446407L}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_Dppe0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        int offset = 0;
        int length = 15;
        int seed = 123;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(new long[]{1444444444444444444L, 2222222222222222222L}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_cusK0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = 16;
        int seed = 1;
        long[] expected = new long[]{1139667431443434368L, 1139667431443434368L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_tefL0() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128(data, 0, 16, 1);
        long[] expected = new long[]{1414549441111111040L, 1640535111111111040L};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_VUnW0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long result = MurmurHash3.hash64(data, 0, 8, 1);
        assertEquals(1229782938247305611L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_ZyYJ1() {
        byte[] data = new byte[]{9, 10, 11, 12, 13, 14, 15, 16};
        long result = MurmurHash3.hash64(data, 0, 8, 2);
        assertEquals(-8444848683846153859L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_piMV0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long result = MurmurHash3.hash64(data, 0, 8, 1);
        assertEquals(1099511627776L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_jsHY1() {
        byte[] data = new byte[]{9, 10, 11, 12, 13, 14, 15, 16};
        long result = MurmurHash3.hash64(data, 0, 8, 2);
        assertEquals(2199023255552L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_ERJr0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long result = MurmurHash3.hash64(data, 0, data.length);
        assertEquals(164053151923841913L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_rEtF0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 8;
        int seed = 1;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_uMtT1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7};
        int offset = 0;
        int length = 7;
        int seed = 1;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_QSLt0() {
        long data = 123456789L;
        int seed = 42;
        int result = MurmurHash3.hash32(data, seed);
        assertEquals(134567890, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_EmptyArray_KmRq1() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 1;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(seed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_EmptyArray_oMJD1() {
        byte[] data = new byte[]{};
        int offset = 0;
        int length = 0;
        int seed = 1;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(seed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_pfRc0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long[] result = MurmurHash3.hash128x64(data);
        assertArrayEquals(new long[]{0, 0}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_quZK0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int result = MurmurHash3.hash32(data, length);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_qLkt0_zhni0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int length = 16;
        int result = MurmurHash3.hash32(data, length);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_wcJa0_Jbxp0() {
        long result = MurmurHash3.hash32(new byte[0], 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_YBGr0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = data.length;
        int result = MurmurHash3.hash32(data, length);
        assertEquals(2147449447, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_AWxc0_kyLk0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int result = MurmurHash3.hash32(data, data.length);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_gMio0_bTDP0() {
        int result = MurmurHash3.hash32(new byte[]{(byte) 123, (byte) 456, (byte) 789}, 3);
        assertEquals(134217728, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_GHzq0_EZaE0() {
        byte[] data = new byte[]{(byte) 123, (byte) 456, (byte) 789};
        int result = MurmurHash3.hash32(data, data.length);
        assertEquals(213435678, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_zKZW0_ufYy0() {
        byte[] data = new byte[]{(byte) 123, (byte) 456, (byte) 789};
        int result = MurmurHash3.hash32(data, data.length);
        assertEquals(2147483647, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_vrDN0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = 16;
        int seed = 1;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(new long[]{1441146963571446407L, 673942944803575441L}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_tefL0_fid1() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128(data, 0, 16, 1);
        long[] expected = new long[]{-7632076535083720172L, 1640535111111111040L};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1364076727, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_EmptyArray_oMJD1_fid1() {
        byte[] data = new byte[]{};
        int offset = 0;
        int length = 0;
        int seed = 1364076727;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(seed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_wcJa0_Jbxp0_fid1() {
        long result = MurmurHash3.hash32(new byte[0], -965378730);
        assertEquals(0, result);
    }
}