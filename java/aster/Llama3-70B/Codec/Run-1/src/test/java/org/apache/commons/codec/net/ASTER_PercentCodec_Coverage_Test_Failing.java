/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withNonAsciiChar_andAlwaysEncodeChars_xoYQ0_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x80}, true);
        byte[] bytes = new byte[]{(byte) 0x80};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withNonAsciiChar_andAlwaysEncodeChars_xoYQ0_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x80}, true);
        byte[] bytes = new byte[]{(byte) 0x80};
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CanEncode_lGZv1_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_IncrementByteCount_ECSn2_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(6, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withNonAsciiChar_aOAX0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 128}, true);
        byte[] bytes = new byte[]{(byte) 128};
        byte[] encodedBytes = percentCodec.encode(bytes);
        assertArrayEquals(new byte[]{(byte) '%', (byte) '8', (byte) '0'}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithMixedBytes_sFAd2_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 0xFF, (byte) 'b'};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withNonAsciiChar_andAlwaysEncodeChars_kNaE0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127}, true);
        byte[] bytes = new byte[]{(byte) 128};
        percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EscapeCharAtEnd_Garh4_EyTs0_1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'a', 'b', '%'};
        byte[] decodedBytes = codec.decode(bytes);
        assertNotNull(decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EscapeCharAtEnd_Garh4_EyTs0_2() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'a', 'b', '%'};
        byte[] decodedBytes = codec.decode(bytes);
        assertEquals(2, decodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_SingleEscapeChar_DfDu2_ophu0_2() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'%', '1', '2', 'a', 'b'};
        byte[] decodedBytes = codec.decode(bytes);
        assertEquals(4, decodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_MultipleEscapeChars_krbR3_vcbD0_2() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'%', '1', '2', '%', '3', '4', 'a', 'b'};
        byte[] decodedBytes = codec.decode(bytes);
        assertEquals(6, decodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withNonAsciiChar_andAlwaysEncodeChars_xoYQ0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x80}, true);
        byte[] bytes = new byte[]{(byte) 0x80};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CanEncode_lGZv1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_IncrementByteCount_ECSn2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
        assertEquals(6, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithMixedBytes_sFAd2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 0xFF, (byte) 'b'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
        assertEquals(7, result.length);
    }
}