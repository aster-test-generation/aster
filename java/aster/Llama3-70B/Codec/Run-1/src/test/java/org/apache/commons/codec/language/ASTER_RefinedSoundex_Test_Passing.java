/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNull_altL0() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertNull(soundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmpty_JIKC1() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals("", soundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_nonLetter_uTZC0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char result = refinedSoundex.getMappingCode('!');
        assert result == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_upperCaseLetter_emBD1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("01230120022455012623010202".toCharArray());
        char result = refinedSoundex.getMappingCode('A');
        assert result == '0';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_lowerCaseLetter_Meuq2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("01230120022455012623010202".toCharArray());
        char result = refinedSoundex.getMappingCode('a');
        assert result == '0';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSingleCharacter_JVoq2_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMultipleCharacters_yRIB3_fid1() {
        RefinedSoundex soundex = new RefinedSoundex("01230120022455012623010202");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexConsecutiveDuplicates_JAAQ4_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals("P10109", soundex.soundex("Papper"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNonAlphabeticCharacters_cPMK5_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals("H070", soundex.soundex("Holloway"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_1_DvwC5() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        try {
            int result = refinedSoundex.difference("test1", "test2");
            assertEquals(5, result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_hTJB0_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = (String) soundex.encode("Hello");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ncve0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.encode("Hello");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withMapping_dutk1_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("0123012004");
        String result = refinedSoundex.encode("Hello");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withCharMapping_HcYG2_fid1() {
        char[] mapping = {'0', '1', '2', '3', '0', '1', '2', '0', '0', '4'};
        RefinedSoundex refinedSoundex = new RefinedSoundex(mapping);
        String result = refinedSoundex.encode("Hello");
        assertEquals("H0", result);
    }
}