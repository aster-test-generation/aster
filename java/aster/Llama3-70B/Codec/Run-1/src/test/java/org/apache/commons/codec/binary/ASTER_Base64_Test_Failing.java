/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_3_BLKX2() {
        BigInteger bigInt = new BigInteger("1234567890123456789012345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(new byte[]{-17, -65, -67, -66, -65, -67, -66, -65, -67, -66, -65, -67, -66, -65, -67, -66, -65}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_fUtc0() {
        byte[] pArray = "SGVsbG8=".getBytes();
        BigInteger result = Base64.decodeInteger(pArray);
        assertEquals(new BigInteger("1"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_1_txoY0_fid2() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(new byte[]{-17, -65, -67, -66, -65, -67, -66, -65, -67, -66, -65, -67, -66}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_2_vhae1_fid2() {
        BigInteger bigInt = new BigInteger("123456789012345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(new byte[]{-17, -65, -67, -66, -65, -67, -66, -65, -67, -66, -65, -67, -66, -65, -67, -66}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_3_BLKX2_fid2() {
        BigInteger bigInt = new BigInteger("1234567890123456789012345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(new byte[]{-17, -65, -67, -66, -65, -67, -66, -65, -67, -66, -65, -67, -66, -65, -67, -66, -65, -67, -66}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toIntegerBytes_4_XXIB3_fid2() {
        BigInteger bigInt = new BigInteger("0");
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(new byte[1], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_HjZo0_2_fid2() {
        Base64 base64 = new Base64(true);
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_kCkr0_2() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] result = Base64.encodeBase64(binaryData);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_YPxs0() {
        byte[] base64Data = "SGVsbG8gd29ybGQh".getBytes();
        byte[] decodedData = Base64.decodeBase64(base64Data);
        assertArrayEquals(new byte[]{-17, -65, -67, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33}, decodedData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_jxnk0() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_GJlb0() {
        byte[] arrayOctet = new byte[]{1, 2, 3, 4};
        Base64 base64 = new Base64();
        boolean result = Base64.isArrayByteBase64(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength1_FtJS0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        byte[] pArray = new byte[100];
        long result = base64.getEncodedLength(pArray);
        assertEquals(136, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength2_pdGA1() {
        Base64 base64 = new Base64(true);
        byte[] pArray = new byte[50];
        long result = base64.getEncodedLength(pArray);
        assertEquals(68, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize1_mXJk0() {
        Base64 base64 = new Base64();
        assertEquals(76, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize2_kfkq1() {
        Base64 base64 = new Base64(76);
        assertEquals(76, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize3_oncp2() {
        Base64 base64 = new Base64(true);
        assertEquals(76, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize4_MvVq3() {
        Base64 base64 = new Base64(76, new byte[]{});
        assertEquals(76, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize5_EyxE4() {
        Base64 base64 = new Base64(76, new byte[]{}, true);
        assertEquals(76, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize6_mEiL5() {
        Base64 base64 = new Base64(76, new byte[]{}, true, CodecPolicy.STRICT);
        assertEquals(76, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet6_lMwt5() {
        Base64 base64 = new Base64(76, new byte[]{(byte) '\n'}, true, CodecPolicy.LENIENT);
        byte[] arrayOctet = new byte[]{(byte) ' ', (byte) 'A', (byte) 'B'};
        assertTrue(base64.isInAlphabet(arrayOctet, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_DoesNotContainAlphabetOrPad_Lxhm4() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[]{'Z'}; // assuming 'Z' is not in the alphabet or pad
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasData_true_voGU0_BBjF0() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[1];
        assertTrue(base64.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_HjZo0() {
        Base64 base64 = new Base64(true);
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertNotNull(encodedString);
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_kCkr0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] result = Base64.encodeBase64(binaryData);
        assertNotNull(result);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }
}