/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_alwaysEncodeCharsRange_TAJU0() throws EncoderException {
        byte[] alwaysEncodeChars = new byte[256];
        alwaysEncodeChars['a'] = (byte) 1;
        PercentCodec percentCodec = new PercentCodec(alwaysEncodeChars, false);
        byte[] bytes = "a".getBytes();
        byte[] result = percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withNonAsciiChar_UFcN0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{-1}; // -1 is a non-ascii character
        percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithNoEncodingRequired_YEQF0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = "HelloWorld".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithEncodingRequired_zpck1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) ' '}, true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithSomeBytesEncoded_oeVu2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 'a'}, true);
        byte[] bytes = "Hello a World".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullByteArray_ruOE3() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_qOeF0() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        assertNull(codec.decode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_cSjI1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "Hello%20World".getBytes();
        Object result = codec.decode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsSpace_true_wthT0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "a b c".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withSpace_PddD2() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = "a b c".getBytes();
        byte[] result = codec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ExpectedEncodingBytes_euiP0_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[0];
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ExpectedEncodingBytes_euiP0_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[0];
        byte[] result = percentCodec.encode(bytes);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SingleByte_SMXT1_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SingleByte_SMXT1_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MultipleBytes_hnGc2_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MultipleBytes_hnGc2_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CanEncode_OnCf3_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) ' '}, true);
        byte[] bytes = new byte[]{(byte) ' '};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CanEncode_OnCf3_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) ' '}, true);
        byte[] bytes = new byte[]{(byte) ' '};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CanEncode_lGZv1_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_IncrementByteCount_ECSn2_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ReturnOriginalBytes_cbxr3() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withAlwaysEncodeChar_KWVi1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 'a'}, true);
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] encodedBytes = percentCodec.encode(bytes);
        assertArrayEquals(new byte[]{(byte) '%', (byte) '6', (byte) '1'}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withAsciiChar_dbsW2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{}, true);
        byte[] bytes = new byte[]{(byte) 'z'};
        byte[] encodedBytes = percentCodec.encode(bytes);
        assertArrayEquals(new byte[]{(byte) 'z'}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithOnlyNonEncodableBytes_YVIP1_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0xFF, (byte) 0xFE, (byte) 0xFD};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithOnlyNonEncodableBytes_YVIP1_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0xFF, (byte) 0xFE, (byte) 0xFD};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(9, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithMixedBytes_sFAd2_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 0xFF, (byte) 'b'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpectedDecodingBytes_NullArray_uuZx6() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = null;
        assertNull(codec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAllocateByteBuffer_IJKa0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[1];
        codec.encode(bytes); // covers line 1
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeForLoop_aeMY1() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[2];
        codec.encode(bytes); // covers line 2
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWillEncodeTrue_IGiT2() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[1];
        codec.encode(bytes); // covers line 3
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeCanEncodeTrue_FuLI3() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 0x7F};
        codec.encode(bytes); // covers line 4
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteLessThanZero_Hkkn4() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 0x80};
        codec.encode(bytes); // covers line 5
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexDigit1_blZW5() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 0x7F};
        codec.encode(bytes); // covers line 7
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexDigit2_GGXT6() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 0x7F};
        codec.encode(bytes); // covers line 8
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEscapeChar_mNcL7() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 0x7F};
        codec.encode(bytes); // covers line 9
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex1Byte_lVcl8() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 0x7F};
        codec.encode(bytes); // covers line 10
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex2Byte_OYFt9() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 0x7F};
        codec.encode(bytes); // covers line 11
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodePlusForSpace_GrtK10() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{' '};
        codec.encode(bytes); // covers line 12
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodePlusByte_SAai11() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{' '};
        codec.encode(bytes); // covers line 13
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBufferPut_JHHF12() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[1];
        codec.encode(bytes); // covers line 14
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeReturnBufferArray_GpZW13() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[1];
        codec.encode(bytes); // covers line 15
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withAsciiChar_andAlwaysEncodeChars_MQfL1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64}, true);
        byte[] bytes = new byte[]{32};
        percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withAsciiChar_andNotInAlwaysEncodeChars_BfLA2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64}, true);
        byte[] bytes = new byte[]{32};
        percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_PlusForSpace_HBBZ5_Qvxc0_1() throws DecoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{'+'};
        byte[] decodedBytes = codec.decode(bytes);
        assertNotNull(decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_PlusForSpace_HBBZ5_Qvxc0_2() throws DecoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{'+'};
        byte[] decodedBytes = codec.decode(bytes);
        assertEquals(1, decodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_PlusForSpace_HBBZ5_Qvxc0_3() throws DecoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{'+'};
        byte[] decodedBytes = codec.decode(bytes);
        assertEquals(' ', decodedBytes[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NoEscapeChars_eBAM1_CLeG0_1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] decodedBytes = codec.decode(bytes);
        assertNotNull(decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NoEscapeChars_eBAM1_CLeG0_2() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] decodedBytes = codec.decode(bytes);
        assertEquals(3, decodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NoEscapeChars_eBAM1_CLeG0_3() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] decodedBytes = codec.decode(bytes);
        assertArrayEquals(bytes, decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_SingleEscapeChar_DfDu2_ophu0_1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'%', '1', '2', 'a', 'b'};
        byte[] decodedBytes = codec.decode(bytes);
        assertNotNull(decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_MultipleEscapeChars_krbR3_vcbD0_1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'%', '1', '2', '%', '3', '4', 'a', 'b'};
        byte[] decodedBytes = codec.decode(bytes);
        assertNotNull(decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CanEncode_lGZv1_2_fid1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_IncrementByteCount_ECSn2_2_fid1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithMixedBytes_sFAd2_2_fid1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 0xFF, (byte) 'b'};
        byte[] result = percentCodec.encode(bytes);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EscapeCharAtEnd_Garh4_EyTs0_1_fid1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'a', 'b', '%'};
        try {
            codec.decode(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Invalid percent decoding: ", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_SingleEscapeChar_DfDu2_ophu0_2_fid1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'%', '1', '2', 'a', 'b'};
        byte[] decodedBytes = codec.decode(bytes);
        assertEquals(3, decodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_MultipleEscapeChars_krbR3_vcbD0_2_fid1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'%', '1', '2', '%', '3', '4', 'a', 'b'};
        byte[] decodedBytes = codec.decode(bytes);
        assertEquals(4, decodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ExpectedEncodingBytes_euiP0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[0];
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SingleByte_SMXT1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
        assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MultipleBytes_hnGc2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CanEncode_OnCf3() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) ' '}, true);
        byte[] bytes = new byte[]{(byte) ' '};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArrayWithOnlyNonEncodableBytes_YVIP1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0xFF, (byte) 0xFE, (byte) 0xFD};
        byte[] result = percentCodec.encode(bytes);
        assertNotNull(result);
        assertEquals(9, result.length);
    }
}