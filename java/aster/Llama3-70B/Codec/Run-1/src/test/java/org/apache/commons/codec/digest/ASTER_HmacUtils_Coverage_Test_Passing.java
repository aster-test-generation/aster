/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_withAvailableAlgorithm_Hpjy0() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_LRQD0_TEal0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_LRQD0_TEal0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotEquals(0, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_TprQ0_PYmM0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_TprQ0_PYmM0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotEquals(0, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_ONPd0_RBed0() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        String expectedHex = "expectedHexValue"; // Replace with actual expected value
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String actualHex = hmacUtils.hmacHex(valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_CXhT0_LAot0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_CXhT0_LAot0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_BvNJ0_ptRH0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String hmacHex = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_BvNJ0_ptRH0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String hmacHex = hmacUtils.hmacHex(valueToDigest);
        assertTrue(hmacHex.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_MWAj0_Toqe0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        ByteBuffer byteBuffer = ByteBuffer.wrap(valueToDigest);
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String hmacHex = hmacUtils.hmacHex(byteBuffer);
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_MWAj0_Toqe0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        ByteBuffer byteBuffer = ByteBuffer.wrap(valueToDigest);
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String hmacHex = hmacUtils.hmacHex(byteBuffer);
        assertTrue(hmacHex.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_cgsK0_nlaE0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_cgsK0_nlaE0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotEquals(0, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_UpdateMac_owuv3_YvHd0() throws Exception {
        Mac mac = Mac.getInstance("HmacSHA256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Test data".getBytes());
        byte[] hmacBytes = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes()).hmac(valueToDigest);
        assertNotNull(hmacBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_BufferCreated_spzX1_DvIK0() throws Exception {
        Mac mac = Mac.getInstance("HmacSHA256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Test data".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String hmacHex = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_dhPa0_idjI0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String hmacHex = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(hmacHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_dhPa0_idjI0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String hmacHex = hmacUtils.hmacHex(valueToDigest);
        assertTrue(hmacHex.length() > 0);
    }

    @Test
    public void testUpdateHmac_IOException_aBOb6_gVBi0() throws Exception {
        Mac mac = Mac.getInstance("HmacSHA256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Test data".getBytes());
        try {
            HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
            hmacUtils.hmacHex(valueToDigest);
        } catch (Exception e) {
            assertTrue(e instanceof IOException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_YNoP0_LHZn0_1() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_YNoP0_LHZn0_2() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("dataToDigest".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_pAfx0_tiwN0() throws IOException {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "dataToDigest".getBytes();
        String expectedHmac = "expectedHmacValue"; // Replace with actual expected value
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String actualHmac = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
    }
}