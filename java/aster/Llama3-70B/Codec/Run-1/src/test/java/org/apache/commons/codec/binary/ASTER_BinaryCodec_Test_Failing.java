/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BinaryCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleBytes_cvOK3() {
        byte[] result = BinaryCodec.fromAscii(new char[]{'1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0'});
        assertArrayEquals(new byte[]{(byte) 0xAB, (byte) 0xAB}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_MultipleBytes_pHCm2() {
        byte[] raw = new byte[]{0x01, 0x02, 0x04, 0x08};
        char[] expected = new char[]{'1', '1', '1', '1', '1', '1', '1', '1',
        '1', '1', '1', '1', '1', '1', '1', '1',
        '1', '1', '1', '1', '1', '1', '1', '1',
        '1', '1', '1', '1', '1', '1', '1', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toByteArray_nonNullInput_mCrq1() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] result = binaryCodec.toByteArray("Hello World");
        byte[] expected = new byte[]{72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_qAbM0() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(new byte[]{49, 48, 48, 48, 48, 48, 48, 48,
        50, 48, 48, 48, 48, 48, 48, 48,
        51, 48, 48, 48, 48, 48, 48, 48}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_wzjA0() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = "01001000 01100101 01101100 01101100 01101111 00101100 00100000 01010111 01101111 01110100 01101100 01101100 01100100 00100001".getBytes();
        byte[] raw = {(byte) 0x48, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x6f, (byte) 0x2c, (byte) 0x20, (byte) 0x57, (byte) 0x6f, (byte) 0x72, (byte) 0x6c, (byte) 0x64, (byte) 0x21};
        byte[] result = binaryCodec.toAsciiBytes(raw);
        assertArrayEquals(ascii, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_MultipleBytes_gIYg2() {
        byte[] raw = new byte[]{0x01, 0x02, 0x04, 0x08};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_RBMv0_fid1() {
        byte[] raw = {65, 66, 67};
        String result = BinaryCodec.toAsciiString(raw);
        assertEquals("ABC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleBytes_cvOK3_fid1() {
        byte[] result = BinaryCodec.fromAscii(new char[]{'1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0'});
        assertArrayEquals(new byte[]{0x55, 0x55}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_MultipleBytes_pHCm2_fid1() {
        byte[] raw = new byte[]{0x01, 0x02, 0x04, 0x08};
        char[] expected = new char[]{'0', '0', '0', '0', '0', '0', '0', '1',
        '0', '0', '0', '0', '0', '0', '1', '0',
        '0', '0', '0', '0', '1', '0', '0', '0',
        '0', '0', '0', '1', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_MixedBytes_EsMc4_fid1() {
        byte[] ascii = "000000010000000110000001".getBytes();
        byte[] result = BinaryCodec.fromAscii(ascii);
        byte[] expected = new byte[]{1, 3, 1};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_qAbM0_fid1() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        byte[] result = binaryCodec.encode(raw);
        assertArrayEquals(new byte[]{49, 50, 51}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_wzjA0_fid1() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = "Hello, World!".getBytes();
        byte[] result = binaryCodec.decode(ascii);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_MsQR1_fid1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] ascii = new byte[]{1, 2, 3};
        Object result = codec.decode(ascii);
        assertArrayEquals(ascii, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_MultipleBytes_gIYg2_fid1() {
        byte[] raw = new byte[]{0x01, 0x02, 0x04, 0x08};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiNull_NhTM0_Ztju0_fid3() {
        byte[] result = BinaryCodec.toAsciiBytes(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMixedBytes_EbQN4_QGdm0() {
        byte[] result = BinaryCodec.fromAscii(new char[]{'1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'});
        assertArrayEquals(new byte[]{(byte) 0xF0, (byte) 0x00}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArray_NtSI0_lzOl0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(new byte[]{'0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1'}, result);
    }
}