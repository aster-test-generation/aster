/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base16_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_eXey1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        assertFalse(base16.isInAlphabet((byte) 123));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet3_JuhT2() {
        Base16 base16 = new Base16(true);
        assertTrue(base16.isInAlphabet((byte) 55));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_jiHB0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] result = base16.decode("48656c6c6f2c20576f726c6421");
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_BJzt0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{1, 2, 3};
        String result = base16.encodeAsString(pArray);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthNullArray_zzHM0() {
        int result = Base16.toLength(null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthNonNullArray_dVEq1() {
        byte[] array = new byte[5];
        int result = Base16.toLength(array);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ByteArray_HQXg0() throws EncoderException {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] bytes = new byte[]{1, 2, 3};
        Object result = base16.encode(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength1_oeGq0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] pArray = new byte[10];
        long result = base16.getEncodedLength(pArray);
        assertEquals(20, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength2_pThW1() {
        Base16 base16 = new Base16(true);
        byte[] pArray = new byte[20];
        long result = base16.getEncodedLength(pArray);
        assertEquals(40, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyArray_doRr0() {
        Base16 base16 = new Base16();
        byte[] input = new byte[0];
        byte[] result = base16.encode(input);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_RpAJ1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] result = base16.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize1_fAON0() {
        Base16 base16 = new Base16();
        assertEquals(8192, base16.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize2_bIsZ1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        assertEquals(8192, base16.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize3_AinD2() {
        Base16 base16 = new Base16(true);
        assertEquals(8192, base16.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_lAYa0() {
        Base16 base16 = new Base16();
        byte[] arrayOctet = new byte[]{(byte) '0', (byte) '1', (byte) '2'};
        boolean result = base16.isInAlphabet(arrayOctet, true);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet3_pkMp2() {
        Base16 base16 = new Base16(true);
        byte[] arrayOctet = new byte[]{(byte) '0', (byte) '1', (byte) ' '};
        boolean result = base16.isInAlphabet(arrayOctet, true);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet4_xqQz3() {
        Base16 base16 = new Base16();
        byte[] arrayOctet = new byte[]{(byte) 'x', (byte) 'y', (byte) 'z'};
        boolean result = base16.isInAlphabet(arrayOctet, false);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet5_Lqpd4() {
        Base16 base16 = new Base16(false, CodecPolicy.LENIENT);
        byte[] arrayOctet = new byte[]{(byte) 'A', (byte) 'B', (byte) 'C'};
        boolean result = base16.isInAlphabet(arrayOctet, true);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet6_HGZm5() {
        Base16 base16 = new Base16(false);
        byte[] arrayOctet = new byte[]{(byte) '0', (byte) '1', (byte) '\t'};
        boolean result = base16.isInAlphabet(arrayOctet, true);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_GrQX0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{1, 2, 3};
        String result = base16.encodeToString(pArray);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_StrictPolicy_vXpC0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        assertTrue(base16.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_LenientPolicy_qXTi1() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertFalse(base16.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_avvU0() {
        Base16 base16 = new Base16();
        byte[] pArray = new byte[0];
        byte[] result = base16.encode(pArray, 0, pArray.length);
        assertArrayEquals(pArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_jteY1_1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{1, 2, 3};
        byte[] result = base16.encode(pArray, 0, pArray.length);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_jteY1_2() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{1, 2, 3};
        byte[] result = base16.encode(pArray, 0, pArray.length);
        assertNotEquals(pArray.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_lowerCase_decodingPolicy_bfGZ2() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, base16.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyArray_kMdy0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] input = new byte[0];
        byte[] result = base16.decode(input);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparator_Apsx0() {
        byte[] chunkSeparator = Base16.getChunkSeparator();
        assertNotNull(chunkSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_NullArray_MuUr0() {
        Base16 base16 = new Base16();
        boolean result = base16.containsAlphabetOrPad(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_EmptyArray_PwLo1() {
        Base16 base16 = new Base16();
        boolean result = base16.containsAlphabetOrPad(new byte[0]);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_ContainsAlphabet_Ioeg3() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{'a'};
        boolean result = base16.containsAlphabetOrPad(arrayOctet);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_DoesNotContainAlphabetOrPad_PtDJ4() {
        Base16 base16 = new Base16(true);
        byte[] arrayOctet = new byte[]{'z'};
        boolean result = base16.containsAlphabetOrPad(arrayOctet);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_normal_Keau2_NSUQ0() {
        Base16 base16 = new Base16();
        byte[] data = new byte[]{1, 2, 3};
        byte[] result = base16.encode(data);
        assertEquals(6, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResults_NoData_EOF_Ipmw1_PFEK0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        org.apache.commons.codec.binary.BaseNCodec.Context context = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context.eof = true;
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 5;
        int result = base16.readResults(b, bPos, bAvail, context);
        assertEquals(Base16.EOF, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResults_HasData_ContextUpdated_TISe3_doiN0_1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        org.apache.commons.codec.binary.Base16.Context context = new org.apache.commons.codec.binary.Base16.Context();
        context.buffer = new byte[10];
        context.readPos = 2;
        context.pos = 5;
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 5;
        base16.readResults(b, bPos, bAvail, context);
        assertEquals(0, context.pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResults_HasData_ContextUpdated_TISe3_doiN0_2() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        org.apache.commons.codec.binary.Base16.Context context = new org.apache.commons.codec.binary.Base16.Context();
        context.buffer = new byte[10];
        context.readPos = 2;
        context.pos = 5;
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 5;
        base16.readResults(b, bPos, bAvail, context);
        assertEquals(0, context.readPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResizeBuffer1_gOmh0_tgLI0() {
        Base16 base16 = new Base16(true);
        byte[] buffer = new byte[10];
        assertFalse(base16.containsAlphabetOrPad(buffer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableHasData_zJQq0_JmWS0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        org.apache.commons.codec.binary.BaseNCodec.Context context = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context.pos = 10;
        context.readPos = 5;
        assertEquals(5, base16.available(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableNoData_YSps1_ndmU0() {
        Base16 base16 = new Base16();
        byte[] arrayOctet = new byte[0];
        assertEquals(false, base16.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_qAlt0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{base16.pad};
        assertTrue(base16.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_UOhB1_TGxr0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{base16.pad, 'A'};
        assertTrue(base16.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_ContainsPad_CNGO2_TYgh0() {
        Base16 base16 = new Base16();
        byte pad = '='; // assuming '=' is the pad character
        byte[] arrayOctet = new byte[]{pad};
        boolean result = base16.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_jteY1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{1, 2, 3};
        byte[] result = base16.encode(pArray, 0, pArray.length);
        assertNotNull(result);
        assertNotEquals(pArray.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_dALP0_fid2() {
        Base16 base16 = new Base16();
        assertFalse(base16.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_qjtq0_fid2() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        String basen = "HelloWorld";
        byte[] bytes = basen.getBytes();
        boolean result = false;
        for (byte b : bytes) {
            result = base16.containsAlphabetOrPad(new byte[]{b});
            if (result) {
                break;
            }
        }
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_RssK1_fid2() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'};
        boolean result = base16.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_default_mXOB0_fid2() {
        Base16 base16 = new Base16();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_lowerCase_sqAa1_fid2() {
        Base16 base16 = new Base16(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_UOhB1_uMrZ1_fid2() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{'A'};
        assertFalse(base16.containsAlphabetOrPad(arrayOctet));
    }
}