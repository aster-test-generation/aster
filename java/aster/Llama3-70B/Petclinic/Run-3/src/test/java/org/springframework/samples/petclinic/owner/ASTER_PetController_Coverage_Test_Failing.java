/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetController_Coverage_Test_Failing {

	private PetController petController;

	private OwnerRepository owners;

	private ModelMap modelMap;

	private RedirectAttributes redirectAttributes;

	private WebDataBinder webDataBinder;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPet_PetIdIsNull_ReturnsNewPet_QwSt1() {
		Pet pet = petController.findPet(1, null);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPet_OwnerIdNotFound_ThrowsIllegalArgumentException_JoeN2() {
		try {
			petController.findPet(1, 1);
			fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			assertEquals("Owner ID not found: 1", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwner_ExistingOwner_iXdP0_1() {
		Owner owner = new Owner();
		when(owners.findById(1)).thenReturn(owner);
		Owner result = petController.findOwner(1);
		assertNotNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwner_ExistingOwner_iXdP0_2() {
		Owner owner = new Owner();
		when(owners.findById(1)).thenReturn(owner);
		Owner result = petController.findOwner(1);
		assertEquals(owner, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwner_NullOwnerId_MmRj2() {
		try {
			petController.findOwner(0);
			fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			assertEquals("Owner ID not found: 0", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitOwnerBinder_UfuY0() {
		petController.initOwnerBinder(webDataBinder);
		assertNotNull(webDataBinder);
	}

}