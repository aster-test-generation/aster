/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.text.ParseException;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetTypeFormatter_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_NullText_ThrowsParseException_CvxE2_1() throws java.text.ParseException {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetTypeFormatter formatter = new PetTypeFormatter(owners);
		Locale locale = Locale.US;
		ParseException exception = assertThrows(ParseException.class, () -> formatter.parse(null, locale));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_EmptyText_ThrowsParseException_eoGs3_1() throws java.text.ParseException {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetTypeFormatter formatter = new PetTypeFormatter(owners);
		Locale locale = Locale.US;
		ParseException exception = assertThrows(ParseException.class, () -> formatter.parse("", locale));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_FindPetTypesReturnsNull_ThrowsNullPointerException_IaHO4() throws java.text.ParseException {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetTypeFormatter formatter = new PetTypeFormatter(owners);
		when(owners.findPetTypes()).thenReturn(null);
		Locale locale = Locale.US;
		NullPointerException exception = assertThrows(NullPointerException.class, () -> formatter.parse("Dog", locale));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_NullText_ThrowsParseException_CvxE2() throws java.text.ParseException {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetTypeFormatter formatter = new PetTypeFormatter(owners);
		Locale locale = Locale.US;
		ParseException exception = assertThrows(ParseException.class, () -> formatter.parse(null, locale));
		assertEquals("type not found: null", exception.getMessage());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_EmptyText_ThrowsParseException_eoGs3() throws java.text.ParseException {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetTypeFormatter formatter = new PetTypeFormatter(owners);
		Locale locale = Locale.US;
		ParseException exception = assertThrows(ParseException.class, () -> formatter.parse("", locale));
		assertEquals("type not found: ", exception.getMessage());
	}

}