/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	private String lastName;

	private String firstName;

	private String address;

	private String city;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_VbWs0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCity_GZEL0() {
		Owner owner = new Owner();
		String city = owner.getCity();
		assertNull(city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_PEnC0() {
		Owner owner = new Owner();
		String telephone = owner.getTelephone();
		assertNull(telephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_gGmk0() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890");
		assertEquals("1234567890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_knBq0_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_knBq0_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertNotNull(pet.getVisits());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_knBq0_3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertNotNull(pet.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_knBq0_4() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertNotNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NonExistingPet_IgnoreNewFalse_IMZE2() {
		Owner owner = new Owner();
		Pet result = owner.getPet("NonExistingPet", false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NonExistingPet_IgnoreNewTrue_ivJv3() {
		Owner owner = new Owner();
		Pet result = owner.getPet("NonExistingPet", true);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NullName_IgnoreNewFalse_Zius4() {
		Owner owner = new Owner();
		Pet result = owner.getPet(null, false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NullName_IgnoreNewTrue_GIiW5() {
		Owner owner = new Owner();
		Pet result = owner.getPet(null, true);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_PCjD0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_CYHt0() {
		Owner owner = new Owner();
		String address = owner.getAddress();
		assertNull(address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ExistingId_ZNtL0_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.getPets().add(pet);
		Pet result = owner.getPet(1);
		assertNotNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ExistingId_ZNtL0_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.getPets().add(pet);
		Pet result = owner.getPet(1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NonExistingId_EEfX1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.getPets().add(pet);
		Pet result = owner.getPet(2);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_yiLC0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		assertEquals("123 Main St", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void addPet(Pet pet) {
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_knBq0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertNotNull(pet);
		assertNotNull(pet.getVisits());
		assertNotNull(pet.getType());
		assertNotNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ExistingId_ZNtL0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.getPets().add(pet);
		Pet result = owner.getPet(1);
		assertNotNull(result);
		assertEquals(pet, result);
	}

}