/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import javax.json.JsonObject;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryDataBean_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_LaeN0_1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal tsia = BigDecimal.valueOf(100);
        BigDecimal openTsia = BigDecimal.valueOf(50);
        marketSummaryDataBean.setTSIA(tsia);
        marketSummaryDataBean.setOpenTSIA(openTsia);
        BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
        assertNotNull(gainPercent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_LaeN0_2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal tsia = BigDecimal.valueOf(100);
        BigDecimal openTsia = BigDecimal.valueOf(50);
        marketSummaryDataBean.setTSIA(tsia);
        marketSummaryDataBean.setOpenTSIA(openTsia);
        BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(100, gainPercent.doubleValue(), 0.01);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainersAndLosersNotNull_LhQm0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(new ArrayList<>());
        marketSummaryDataBean.setTopLosers(new ArrayList<>());
        String expected = "\n\tMarket Summary at: " + marketSummaryDataBean.getSummaryDate() + "\n\t\t        TSIA:" + marketSummaryDataBean.getTSIA() + "\n\t\t    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "\n\t\t        gain:" + marketSummaryDataBean.getGainPercent() + "\n\t\t      volume:" + marketSummaryDataBean.getVolume() + "\n\t\t   Current Top Gainers:\n\t\t\t" + marketSummaryDataBean.getTopGainers().iterator().next().toString() + "\n\t\t   Current Top Losers:\n\t\t\t" + marketSummaryDataBean.getTopLosers().iterator().next().toString();
        assertEquals(expected, marketSummaryDataBean.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainersOrLosersNull_RYzX1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(null);
        marketSummaryDataBean.setTopLosers(null);
        String expected = "\n\tMarket Summary at: " + marketSummaryDataBean.getSummaryDate() + "\n\t\t        TSIA:" + marketSummaryDataBean.getTSIA() + "\n\t\t    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "\n\t\t        gain:" + marketSummaryDataBean.getGainPercent() + "\n\t\t      volume:" + marketSummaryDataBean.getVolume();
        assertEquals(expected, marketSummaryDataBean.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_pdRf0_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Market Summary at: "));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_pdRf0_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("TSIA:1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_pdRf0_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("openTSIA:1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_pdRf0_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("volume:1.0"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_pdRf0_5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Current Top Gainers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_pdRf0_6() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Current Top Losers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_NGok1_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Market Summary at: "));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_NGok1_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("openTSIA:1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_NGok1_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("volume:1.0"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_NGok1_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Current Top Gainers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_NGok1_5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Current Top Losers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_Uwrz2_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Market Summary at: "));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_Uwrz2_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("TSIA:1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_Uwrz2_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("volume:1.0"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_Uwrz2_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Current Top Gainers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_Uwrz2_5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Current Top Losers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_KXMc3_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Market Summary at: "));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_KXMc3_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("volume:1.0"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_KXMc3_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Current Top Gainers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_KXMc3_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Current Top Losers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJsonObjectBuilder_BxeV0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIntI_sxIP1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddTsia_NKae12_EnKE0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal("1.0"));
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddVolume_dVHa13_nBkZ0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setVolume(10.0);
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForLoopTopGainers_OIGg2_LZZR0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(new ArrayList<>());
    marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.getTopGainers().add(new QuoteDataBean());
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddDate_nEuz14_FpFL0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setSummaryDate(new Date());
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForLoopTopLosers_uTii7_FzoB0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(new ArrayList<>());
    marketSummaryDataBean.setTopLosers(new ArrayList<>());
    marketSummaryDataBean.setTopLosers(new ArrayList<>());
    marketSummaryDataBean.getTopLosers().add(new QuoteDataBean());
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_LaeN0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal tsia = BigDecimal.valueOf(100);
        BigDecimal openTsia = BigDecimal.valueOf(50);
        marketSummaryDataBean.setTSIA(tsia);
        marketSummaryDataBean.setOpenTSIA(openTsia);
        BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
        assertNotNull(gainPercent);
        assertEquals(100, gainPercent.doubleValue(), 0.01);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_pdRf0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Market Summary at: "));
    Assertions.assertTrue(result.contains("TSIA:1"));
    Assertions.assertTrue(result.contains("openTSIA:1"));
    Assertions.assertTrue(result.contains("volume:1.0"));
    Assertions.assertTrue(result.contains("Current Top Gainers:"));
    Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_NGok1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Market Summary at: "));
    Assertions.assertTrue(result.contains("openTSIA:1"));
    Assertions.assertTrue(result.contains("volume:1.0"));
    Assertions.assertTrue(result.contains("Current Top Gainers:"));
    Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_Uwrz2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ONE);
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Market Summary at: "));
    Assertions.assertTrue(result.contains("TSIA:1"));
    Assertions.assertTrue(result.contains("volume:1.0"));
    Assertions.assertTrue(result.contains("Current Top Gainers:"));
    Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_KXMc3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setVolume(1.0);
    List<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    List<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String result = marketSummaryDataBean.toHTML();
    Assertions.assertTrue(result.contains("Market Summary at: "));
    Assertions.assertTrue(result.contains("volume:1.0"));
    Assertions.assertTrue(result.contains("Current Top Gainers:"));
    Assertions.assertTrue(result.contains("Current Top Losers:"));
}
}