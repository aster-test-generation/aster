/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;
import java.math.BigDecimal;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DirectSLSBBean_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryWithException_xIYC1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        directSLSBBean.getMarketSummary();
        fail("Expected Exception");
    } catch (Exception e) {
    assertNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithException_Vxbz1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean("symbol");
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "buy";
        double quantity = 10.0;
        try {
            directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
            fail("Expected exception");
        } catch (Exception e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterWithException_dFJB1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.register(null, "password", "fullname", "address", "email", "creditcard", BigDecimal.valueOf(1000));
            fail("Expected exception");
        } catch (Exception e) {
    assertNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_JISv0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.setInSession(true);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            assertEquals("DirectSLSBBean::setInGlobalTxn not supported", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeException_gvNw1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(10.0), 100.0);
            fail("Expected Exception");
        } catch (Exception e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderOrderIDNull_DDAq2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.cancelOrder(null, true);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
    assertNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullUserID_cNee1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.getOrders(null);
            fail("Expected Exception");
        } catch (Exception e) {
    assertNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullSymbol_DOrM1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.createQuote(null, "Apple Inc.", BigDecimal.valueOf(100));
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
    assertNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountProfileDataNullUserID_ImGE1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        directSLSBBean.getAccountProfileData(null);
        fail("Expected Exception");
    } catch (Exception e) {
    assertNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Egaj0_1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Exception exception = assertThrows(Exception.class, () -> directSLSBBean.pingTwoPhase("symbol"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellNullUserID_LOUh2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.ASYNCH;
        try {
            directSLSBBean.sell(null, holdingID, orderProcessingMode);
        } catch (Exception e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellNullHoldingID_tmuo3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        int orderProcessingMode = TradeConfig.ASYNCH;
        try {
            directSLSBBean.sell(userID, null, orderProcessingMode);
        } catch (Exception e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellInvalidOrderProcessingMode_MpzE4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = 0;
        try {
            directSLSBBean.sell(userID, holdingID, orderProcessingMode);
        } catch (Exception e) {
        }
    }
}