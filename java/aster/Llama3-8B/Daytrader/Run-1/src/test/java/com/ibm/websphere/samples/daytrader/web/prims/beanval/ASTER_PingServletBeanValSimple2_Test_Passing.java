/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple2_Test_Passing {
    private static LocalDateTime initTime;
    @Mock
    private ServletConfig servletConfig;
    @Mock
    private HttpServlet httpServlet;
    private PingServletBeanValSimple2 pingservletbeanvalsimple2;
    HttpServletRequest httprequest;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    private static int hitCount = 0;
    @Mock
    private HttpServletRequest request;
    @Mock
    private HttpServletResponse response;
    @Mock
    private ServletOutputStream outputStream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        pingservletbeanvalsimple2 = new PingServletBeanValSimple2();
        // Act
        pingservletbeanvalsimple2.init(servletConfig);
        // Assert
        ArgumentCaptor<ServletConfig> configCaptor = ArgumentCaptor.forClass(ServletConfig.class);
        verify(servletConfig, times(1)).getServletContext();
        verify(pingservletbeanvalsimple2, times(1)).init(configCaptor.capture());
        assertEquals(LocalDateTime.now(), initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httprequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingservletbeanvalsimple2 = new PingServletBeanValSimple2();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingservletbeanvalsimple2.doPost(httprequest, httpservletresponse);
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
        verify(servletoutputstream).write("Hello, World!".getBytes());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost2_tHLv1() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServletBeanValSimple2.doPost(req, res);
        verify(res).sendRedirect("http://localhost:8080/redirect");
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost3_gouy2() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServletBeanValSimple2.doPost(req, res);
        verify(res).setStatus(404);
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost4_MjKO3() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServletBeanValSimple2.doPost(req, res);
        verify(res).sendError(500, "Internal Server Error");
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost5_oPVC4() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServletBeanValSimple2.doPost(req, res);
        verify(res).setContentType("text/html");
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost6_EWUY5() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServletBeanValSimple2.doPost(req, res);
        verify(res).setHeader("Content-Type", "text/plain");
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost7_ttJv6() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServletBeanValSimple2.doPost(req, res);
        verify(res).setHeader("Content-Length", "123");
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost8_IYaW7() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServletBeanValSimple2.doPost(req, res);
        verify(res).setHeader("ETag", "1234567890");
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost9_FpKV8() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServletBeanValSimple2.doPost(req, res);
        verify(res).setHeader("Last-Modified", "Mon, 01 Jan 2001 12:00:00 GMT");
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost10_JVEY9() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServletBeanValSimple2.doPost(req, res);
        verify(res).setHeader("Cache-Control", "no-cache");
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_nbIt0() {
        PingServletBeanValSimple2 servletBean = new PingServletBeanValSimple2();
        String result = servletBean.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_FAJk0_suYT0() throws ServletException, IOException {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getMethod()).thenReturn("GET");
        pingServletBeanValSimple2.doGet(req, res);
        verify(res).setStatus(HttpServletResponse.SC_OK);
        verifyNoMoreInteractions(res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_FuBY0() throws Exception {
        pingservletbeanvalsimple2 = new PingServletBeanValSimple2();
        initTime = LocalDateTime.now();
        when(response.getOutputStream()).thenReturn(outputStream);
        when(request.getMethod()).thenReturn("GET");
        pingservletbeanvalsimple2.doGet(request, response);
        verify(response, times(1)).setContentType("text/html");
        verify(response, times(1)).getOutputStream();
        verify(outputStream, times(1)).println(anyString());
        verify(outputStream, times(1)).close();
        verify(response, times(1)).sendError(500, anyString());
    }
}