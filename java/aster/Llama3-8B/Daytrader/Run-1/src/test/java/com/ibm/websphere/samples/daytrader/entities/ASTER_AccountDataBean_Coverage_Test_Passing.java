/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import java.math.BigDecimal;
import java.sql.Timestamp;
import javax.ejb.EJBException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AccountDataBean_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_ProfileNotNull_PasswordCorrect_zSTQ0_1() {
        AccountDataBean account = new AccountDataBean();
        account.getProfile().setPassword("password");
        account.login("password");
        assertEquals(account.getLoginCount(), 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_ProfileNotNull_PasswordCorrect_zSTQ0_2() {
        AccountDataBean account = new AccountDataBean();
        account.getProfile().setPassword("password");
        account.login("password");
        assertEquals(account.getLastLogin(), new Timestamp(System.currentTimeMillis()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_ProfileNull_UrQP1() {
        AccountDataBean account = new AccountDataBean();
        account.getProfile().setPassword(null);
        try {
            account.login("password");
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertEquals("AccountBean:Login failure for account: " + account.getAccountID() + "null AccountProfile", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_ProfileNotNull_PasswordIncorrect_SlPG2() {
        AccountDataBean account = new AccountDataBean();
        account.getProfile().setPassword("incorrect");
        try {
            account.login("password");
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertEquals("AccountBean:Login failure for account: " + account.getAccountID() + "\n\tIncorrect password-->" + account.getProfile().getUserID() + ":" + account.getProfile().getPassword(), e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_LoginCountIncremented_lmuk3() {
        AccountDataBean account = new AccountDataBean();
        account.setLoginCount(0);
        account.login("password");
        assertEquals(account.getLoginCount(), 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_LastLoginUpdated_eaPz4() {
        AccountDataBean account = new AccountDataBean();
        account.setLastLogin(new Timestamp(0));
        account.login("password");
        assertEquals(account.getLastLogin().getTime(), new Timestamp(System.currentTimeMillis()).getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsAccountIDNotNullAndEqual_clwE0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        AccountDataBean otherAccountDataBean = new AccountDataBean(1, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        assertTrue(accountDataBean.equals(otherAccountDataBean));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsAccountIDNotNullAndNotEqual_nPFE1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        AccountDataBean otherAccountDataBean = new AccountDataBean(2, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        assertFalse(accountDataBean.equals(otherAccountDataBean));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsAccountIDEqualAndOtherAccountIDNotEqual_xIAb7() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        AccountDataBean otherAccountDataBean = new AccountDataBean(3, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        assertFalse(accountDataBean.equals(otherAccountDataBean));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsAccountIDNotEqualAndOtherAccountIDEqual_nqcx8() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        AccountDataBean otherAccountDataBean = new AccountDataBean(4, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        assertFalse(accountDataBean.equals(otherAccountDataBean));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsAccountIDNullAndOtherAccountIDNotNull_NRoW2_PNRL0() {
    AccountDataBean accountDataBean = new AccountDataBean(null, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    AccountDataBean otherAccountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertFalse(accountDataBean.equals(otherAccountDataBean));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsAccountIDNullAndOtherAccountIDNull_LcRN3_ehRX0() {
    AccountDataBean accountDataBean = new AccountDataBean(null, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    AccountDataBean otherAccountDataBean = new AccountDataBean(null, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertTrue(accountDataBean.equals(otherAccountDataBean));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_ProfileNotNull_PasswordCorrect_zSTQ0() {
        AccountDataBean account = new AccountDataBean();
        account.getProfile().setPassword("password");
        account.login("password");
        assertEquals(account.getLoginCount(), 1);
        assertEquals(account.getLastLogin(), new Timestamp(System.currentTimeMillis()));
}
}