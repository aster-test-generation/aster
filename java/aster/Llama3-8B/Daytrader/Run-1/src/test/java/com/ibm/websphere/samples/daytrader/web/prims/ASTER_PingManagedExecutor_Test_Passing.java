/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedExecutor_Test_Passing {
    private static String initTime;
    private static int hitCount;
    @Mock
    private ServletConfig servletConfig;
    @Mock
    private HttpServlet httpServlet;
    private PingManagedExecutor pingManagedExecutor;
    PingManagedExecutor pingmanagedexecutor;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    private ManagedExecutorService mes;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_gtvv0() {
        PingManagedExecutor executor = new PingManagedExecutor();
        String result = executor.getServletInfo();
        assertEquals("Tests a ManagedExecutor", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_wpBA0() throws ServletException, IOException {
        PingManagedExecutor executor = new PingManagedExecutor();
        HttpServletRequest req = null;
        HttpServletResponse res = null;
        executor.doGet(req, res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_yoMI0_1() throws ServletException {
        pingManagedExecutor = new PingManagedExecutor();
        pingManagedExecutor.init(servletConfig);
        verify(servletConfig, times(1)).getServletContext();
        assertEquals(0, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_yoMI0_2() throws ServletException {
        pingManagedExecutor = new PingManagedExecutor();
        pingManagedExecutor.init(servletConfig);
        verify(servletConfig, times(1)).getServletContext();
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_VPzw0() throws ServletException, IOException {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingmanagedexecutor = new PingManagedExecutor();
        when(httpservletrequest.getMethod()).thenReturn("POST");
        pingmanagedexecutor.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setStatus(200);
        verify(servletoutputstream).write("Hello, POST request!".getBytes());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
    }
}