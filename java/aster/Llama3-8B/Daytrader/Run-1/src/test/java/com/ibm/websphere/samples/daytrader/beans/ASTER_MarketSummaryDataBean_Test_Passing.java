/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenTSIA_usyV1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setOpenTSIA(BigDecimal.valueOf(10));
        assertEquals(BigDecimal.valueOf(10), bean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIANull_rjFe1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setOpenTSIA(null);
        assertNull(marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTSIANull_yNAI1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(null);
        assertNull(bean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolumeNegative_OQOV1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setVolume(-10.0);
        assertEquals(-10.0, bean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopLosers_ZCUj0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topLosers = new ArrayList<>();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        topLosers.add(quoteDataBean);
        marketSummaryDataBean.setTopLosers(topLosers);
        assertEquals(topLosers, marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummaryDate_LXbZ0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Date summaryDate = marketSummaryDataBean.getSummaryDate();
        assertEquals(null, summaryDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSummaryDate_wzka1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        Date date = new Date();
        bean.setSummaryDate(date);
        assertEquals(date, bean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_UbuK1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setVolume(100.0);
        assertEquals(100.0, marketSummaryDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_NullTopGainers_NullTopLosers_dzyN1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, null, null);
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at:"));
        Assertions.assertTrue(result.contains("TSIA:100.0"));
        Assertions.assertTrue(result.contains("openTSIA:200.0"));
        Assertions.assertTrue(result.contains("volume:300.0"));
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_yfze0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topGainers = new ArrayList<>();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        topGainers.add(quoteDataBean);
        marketSummaryDataBean.setTopGainers(topGainers);
        assertEquals(topGainers, marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_bEIe0_4() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(5, result.getTopGainers().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_bEIe0_5() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(5, result.getTopLosers().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_NullTopGainers_NullTopLosers_dzyN1_1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, null, null);
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_NullTopGainers_NullTopLosers_dzyN1_2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, null, null);
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("TSIA:100.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_NullTopGainers_NullTopLosers_dzyN1_3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, null, null);
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("openTSIA:200.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_NullTopGainers_NullTopLosers_dzyN1_4() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, null, null);
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("volume:300.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_NullTopGainers_NullTopLosers_dzyN1_5() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, null, null);
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_NullTopGainers_NullTopLosers_dzyN1_6() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, null, null);
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_EmptyTopGainers_EmptyTopLosers_iZjI2_1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, new ArrayList<>(), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_EmptyTopGainers_EmptyTopLosers_iZjI2_2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, new ArrayList<>(), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("TSIA:100.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_EmptyTopGainers_EmptyTopLosers_iZjI2_3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, new ArrayList<>(), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("openTSIA:200.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_EmptyTopGainers_EmptyTopLosers_iZjI2_4() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, new ArrayList<>(), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("volume:300.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIA_twue1_azDQ0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(BigDecimal.valueOf(10));
        assertEquals(BigDecimal.valueOf(10), marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopLosersNotNull_lpVc1_aRVT0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(new ArrayList<>());
        marketSummaryDataBean.setTopLosers(new ArrayList<>());
        Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
        assertNotNull(topLosers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_EmptyTopGainers_EmptyTopLosers_iZjI2_5_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, new ArrayList<>(), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_EmptyTopGainers_EmptyTopLosers_iZjI2_6_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, new ArrayList<>(), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("Current Top Losers:"));
    }
}