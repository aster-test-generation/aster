/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteData_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainHTML_LYuZ0() {
        BigDecimal price = new BigDecimal("10.00");
        BigDecimal open = new BigDecimal("9.00");
        String symbol = "ABC";
        QuoteData quoteData = new QuoteData(open, price, symbol);
        String result = quoteData.getGainHTML();
        assertEquals("FinancialUtils.printGainHTML(gain)", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainHTMLWithMoreParams_UGSu1() {
        BigDecimal price = new BigDecimal("10.00");
        BigDecimal open = new BigDecimal("9.00");
        String symbol = "ABC";
        BigDecimal high = new BigDecimal("11.00");
        BigDecimal low = new BigDecimal("8.00");
        String companyName = "Company Name";
        Double volume = 100.0;
        Double change = 1.0;
        QuoteData quoteData = new QuoteData(open, price, symbol, high, low, companyName, volume, change);
        String result = quoteData.getGainHTML();
        assertEquals("FinancialUtils.printGainHTML(gain)", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_SxWx0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "symbol");
        quoteData.setGainPercent(new BigDecimal("0.10"));
        assertEquals(new BigDecimal("10.00").setScale(2), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentNegative_srzO1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "symbol");
        quoteData.setGainPercent(new BigDecimal("-0.10"));
        assertEquals(new BigDecimal("-10.00").setScale(2), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentZero_adfJ2() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "symbol");
        quoteData.setGainPercent(new BigDecimal("0.00"));
        assertEquals(new BigDecimal("10.00").setScale(2), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentLarge_iuFe3() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "symbol");
        quoteData.setGainPercent(new BigDecimal("100.00"));
        assertEquals(new BigDecimal("20.00").setScale(2), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithTwoParameters_HHGh0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "ABC");
        String range = quoteData.getRange();
        assertEquals("", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithSixParameters_yjlc1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "ABC", new BigDecimal("30.0"), new BigDecimal("25.0"), "Company ABC", new Double(100.0), new Double(5.0));
        String range = quoteData.getRange();
        assertEquals("", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain_NXRN0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL");
        BigDecimal gain = quoteData.getGain();
        assertEquals(new BigDecimal("10.0"), gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain2_zAJQ1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL", new BigDecimal("30.0"), new BigDecimal("5.0"), "Apple Inc", 100.0, 10.0);
        BigDecimal gain = quoteData.getGain();
        assertEquals(new BigDecimal("10.0"), gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenWithTwoParams_VPLD0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("20.00"), "ABC");
        BigDecimal open = quoteData.getOpen();
        assertEquals(new BigDecimal("10.00"), open);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLow_yPik0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC");
        BigDecimal low = quoteData.getLow();
        assertEquals(BigDecimal.valueOf(0), low);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange_YOoQ0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(12.0), "AAPL");
        assertEquals(2.0, quoteData.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_Fbmu0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("10.0"), "ABC");
        BigDecimal gainPercent = quoteData.getGainPercent();
        assertEquals(new BigDecimal("0.0"), gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercentHTML_ZGqg0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(11.0), "AAPL");
        String result = quoteData.getGainPercentHTML();
        assertEquals("Gain Percent: 10.0%", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercentHTMLWithHighLow_pepL1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(11.0), "AAPL", BigDecimal.valueOf(12.0), BigDecimal.valueOf(9.0), "Apple Inc.", 100.0, 5.0);
        String result = quoteData.getGainPercentHTML();
        assertEquals("Gain Percent: 10.0%", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange_YOoQ0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(1 - 2.0), "AAPL");
        assertEquals(-2.0, quoteData.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_Fbmu0_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("10.0"), "ABC");
        BigDecimal gainPercent = quoteData.getGainPercent();
        assertNull(new BigDecimal("0.0"));
    }
}