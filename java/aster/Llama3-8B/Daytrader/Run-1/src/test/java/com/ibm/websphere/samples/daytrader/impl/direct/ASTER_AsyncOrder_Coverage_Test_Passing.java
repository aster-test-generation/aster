/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AsyncOrder_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtBegin_rxLh0() {
        AsyncOrder asyncOrder = new AsyncOrder();
        try {
            asyncOrder.run();
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("ut.begin() failed", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeServiceCompleteOrder_TiFF1() {
        AsyncOrder asyncOrder = new AsyncOrder();
        try {
            asyncOrder.run();
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("tradeService.completeOrder(orderID, twoPhase) failed", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtCommit_pYcw2() {
        AsyncOrder asyncOrder = new AsyncOrder();
        try {
            asyncOrder.run();
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("ut.commit() failed", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtRollback_BnMb3() {
        AsyncOrder asyncOrder = new AsyncOrder();
        try {
            asyncOrder.run();
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("ut.rollback() failed", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExceptionHandling_fPPe4() {
        AsyncOrder asyncOrder = new AsyncOrder();
        try {
            asyncOrder.run();
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("Exception occurred during execution", e.getMessage());
        }
}
}