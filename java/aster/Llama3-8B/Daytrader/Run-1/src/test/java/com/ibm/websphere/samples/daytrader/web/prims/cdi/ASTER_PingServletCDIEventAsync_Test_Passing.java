/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletCDIEventAsync_Test_Passing {
    private static int hitCount2;
    private static String initTime;
    private static int hitCount1;
    @Mock
    private ServletConfig servletConfig;
    @Mock
    private ServletException servletException;
    @InjectMocks
    private PingServletCDIEventAsync pingservletcdieventasync;
    @Mock
    private CDIEventProducer cdiEventProducer;
    @Mock
    private HttpServletRequest request;
    @Mock
    private HttpServletResponse response;
    @Mock
    private PrintWriter printWriter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws IOException {
        hitCount2 = 0;
        initTime = "2022-01-01 00:00:00";
        hitCount1 = 0;
        pingservletcdieventasync = new PingServletCDIEventAsync();
        MockitoAnnotations.initMocks(this);
        // Set up the mock objects
        Mockito.when(request.getMethod()).thenReturn("GET");
        Mockito.when(response.getWriter()).thenReturn(printWriter);
        // Call the doGet method
        pingservletcdieventasync.doGet(request, response);
        // Verify the method was called
        Mockito.verify(cdiEventProducer).produceAsyncEvent();
        // Verify the response was written
        Mockito.verify(printWriter).write(Mockito.contains("<html><head><title>Ping Servlet CDI Event Async</title></head>"));
        Mockito.verify(printWriter).write(Mockito.contains("Init time : " + initTime));
        Mockito.verify(printWriter).write(Mockito.contains("hitCount1: " + hitCount1));
        Mockito.verify(printWriter).write(Mockito.contains("hitCount2: " + hitCount2));
        Mockito.verify(printWriter).flush();
        Mockito.verify(printWriter).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_dhjZ0_1() throws ServletException {
        int expectedHitCount2 = 0;
        int expectedHitCount1 = 0;
        initTime = null;
        hitCount1 = 0;
        PingServletCDIEventAsync pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(servletConfig);
        assertEquals(null, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_dhjZ0_2() throws ServletException {
        int expectedHitCount2 = 0;
        int expectedHitCount1 = 0;
        initTime = null;
        hitCount1 = 0;
        PingServletCDIEventAsync pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(servletConfig);
        assertEquals(expectedHitCount1, hitCount1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_dhjZ0_3() throws ServletException {
        int expectedHitCount2 = 0;
        int expectedHitCount1 = 0;
        initTime = null;
        hitCount1 = 0;
        PingServletCDIEventAsync pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(servletConfig);
        assertEquals(expectedHitCount2, hitCount2);
    }
}