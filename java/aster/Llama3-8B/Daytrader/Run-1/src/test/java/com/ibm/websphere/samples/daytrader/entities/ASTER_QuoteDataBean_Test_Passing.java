/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0_1() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_ttMe0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        quoteDataBean.setSymbol("MSFT");
        assertEquals("MSFT", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolNull_orjp1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(null);
        assertEquals(null, quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolEmpty_Fvuc2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("");
        assertEquals("", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolExistingSymbol_HYQj3() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        quoteDataBean.setSymbol("AAPL");
        assertEquals("AAPL", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHigh_dQYm0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(130.0), BigDecimal.valueOf(160.0), 10.0);
        BigDecimal high = BigDecimal.valueOf(170.0);
        quoteDataBean.setHigh(high);
        assertEquals(high, quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyName_EUOY0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000, new BigDecimal(100), new BigDecimal(90), new BigDecimal(80), new BigDecimal(110), 10);
        assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyNameWithoutConstructor_SKre1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        assertEquals(null, quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyNameWithSymbol_GvdB2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        assertEquals(null, quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithSymbol_WhDy0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        int hash = quoteDataBean.hashCode();
        assertEquals(hash, 0 + "AAPL".hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithoutSymbol_OJFz1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        int hash = quoteDataBean.hashCode();
        assertEquals(hash, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_bpzk0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        quoteDataBean.setVolume(100.0);
        assertEquals(100.0, quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_CWiE0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(120.0), BigDecimal.valueOf(160.0), 10.0);
        assertEquals(BigDecimal.valueOf(150.0), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpen_zKri1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(110.0), 10.0);
        BigDecimal open = BigDecimal.valueOf(150.0);
        quoteDataBean.setOpen(open);
        assertEquals(open, quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChange_qfsQ0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.00"), new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("110.00"), 10.0);
        quoteDataBean.setChange(20.0);
        assertEquals(20.0, quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_HSAi0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("150.00"), new BigDecimal("150.00"), new BigDecimal("140.00"), new BigDecimal("160.00"), 5.0);
        String expected = "<BR>Quote Data for: AAPL<LI> companyName: Apple Inc.</LI><LI>      volume: 1000000.0</LI><LI>       price: 150.00</LI><LI>        open1: 150.00</LI><LI>         low: 140.00</LI><LI>        high: 160.00</LI><LI>      change1: 5.0</LI>";
        assertEquals(expected, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpen_DiVh0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.00"), new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("110.00"), 5.0);
        BigDecimal open = quoteDataBean.getOpen();
        assertEquals(new BigDecimal("100.00"), open);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLow_vIBk0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.00"), new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("110.00"), 5.0);
        assertEquals(new BigDecimal("90.00"), quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange_ypqb0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(11.0), 1.0);
        assertEquals(1.0, quoteDataBean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHigh_FAdb0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(130.0), BigDecimal.valueOf(160.0), 10.0);
        assertEquals(BigDecimal.valueOf(160.0), quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_IQxm0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        BigDecimal price = new BigDecimal("100.00");
        quoteDataBean.setPrice(price);
        assertEquals(price, quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_ynye0() {
        QuoteDataBean bean = new QuoteDataBean("AAPL");
        boolean result = bean.equals(bean);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_uNBX1() {
        QuoteDataBean bean = new QuoteDataBean("AAPL");
        Object obj = new Object();
        boolean result = bean.equals(obj);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_wrBd2() {
        QuoteDataBean bean = new QuoteDataBean("AAPL");
        boolean result = bean.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentSymbol_cvXf3() {
        QuoteDataBean bean = new QuoteDataBean("AAPL");
        QuoteDataBean other = new QuoteDataBean("MSFT");
        boolean result = bean.equals(other);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameSymbol_pSBj4() {
        QuoteDataBean bean = new QuoteDataBean("AAPL");
        QuoteDataBean other = new QuoteDataBean("AAPL");
        boolean result = bean.equals(other);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_hjBw0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        assertEquals("AAPL", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithConstructor_dMBo1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 100.0, new BigDecimal("100.0"), new BigDecimal("90.0"), new BigDecimal("110.0"), new BigDecimal("120.0"), 10.0);
        assertEquals("AAPL", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithNoConstructor_KZPP2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        assertEquals(null, quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithoutParameters_Wpng1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        String result = quoteDataBean.toString();
        System.out.println(result);
        assert result.contains("Quote Data for: ");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOnlySymbol_SdTZ2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("GOOG");
        String result = quoteDataBean.toString();
        System.out.println(result);
        assert result.contains("Quote Data for: GOOG");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLow_qeTm0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("80.00"), new BigDecimal("110.00"), 10.0);
        BigDecimal low = new BigDecimal("80.00");
        quoteDataBean.setLow(low);
        assertEquals(low, quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyName_VRRf0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        quoteDataBean.setCompanyName("Apple Inc.");
        assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyNameNull_qYpf1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        quoteDataBean.setCompanyName(null);
        assertEquals(null, quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyNameEmpty_flFj2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        quoteDataBean.setCompanyName("");
        assertEquals("", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_xDKH1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.0"), new BigDecimal("90.0"), new BigDecimal("80.0"), new BigDecimal("110.0"), 10.0);
        double volume = quoteDataBean.getVolume();
        assertEquals(1000000.0, volume, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithoutParameters_mfmo1_hCGx1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
    }
}