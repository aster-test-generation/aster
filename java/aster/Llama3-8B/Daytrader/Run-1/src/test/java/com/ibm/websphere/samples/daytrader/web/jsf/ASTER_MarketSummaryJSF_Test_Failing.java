/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_MarketSummaryJSF_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_xxuy0_zYjG0() {
        TradeServices services = mock(TradeServices.class);
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertEquals(BigDecimal.ZERO, gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummaryDate_AZzz0_hAHQ0() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.get()).thenReturn(mock(TradeServices.class));
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
        Date result = marketSummaryJSF.getSummaryDate();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopGainers_mtdo0_Yjgy0_1() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.get()).thenReturn(mock(TradeServices.class));
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
        QuoteData[] expected = new QuoteData[0];
        QuoteData[] actual = marketSummaryJSF.getTopGainers();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopGainers_mtdo0_Yjgy0_2() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.get()).thenReturn(mock(TradeServices.class));
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
        QuoteData[] expected = new QuoteData[0];
        QuoteData[] actual = marketSummaryJSF.getTopGainers();
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopLosers_ZLub0_HBzi0() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.get()).thenReturn(mock(TradeServices.class));
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
        QuoteData[] expected = new QuoteData[]{ /* your expected data */ };
        QuoteData[] actual = marketSummaryJSF.getTopLosers();
        assertArrayEquals(expected, actual);
    }
}