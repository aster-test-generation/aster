/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObject_Test_Passing {
    private static String initTime;
    private static int hitCount;
    @Mock
    private ServletConfig servletConfig;
    @InjectMocks
    private PingJSONPObject pingjsonpobject;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    HttpServletRequest httprequest;
    HttpServlet httpservlet;
    @Mock
    private HttpServletResponse httpResponse;
    @Mock
    private ServletOutputStream servletOutputStream;
    @Mock
    private HttpServletRequest httpServletRequest;
    @Mock
    private PingJSONPObject pingJSONPObject;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httprequest = mock(HttpServletRequest.class);
        httpservlet = mock(HttpServlet.class);
        pingjsonpobject = new PingJSONPObject();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingjsonpobject.doPost(httprequest, httpservletresponse);
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
        verify(servletoutputstream).write("Hello, World!".getBytes());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_bRaE0() {
        PingJSONPObject pingJSONPObject = new PingJSONPObject();
        String result = pingJSONPObject.getServletInfo();
        assertEquals("Basic JSON generation and parsing in a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_jJVx0_1() throws ServletException {
        initTime = null;
        hitCount = 0;
        MockitoAnnotations.initMocks(this);
        pingjsonpobject.init(servletConfig);
        Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
        Assertions.assertNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_jJVx0_2() throws ServletException {
        initTime = null;
        hitCount = 0;
        MockitoAnnotations.initMocks(this);
        pingjsonpobject.init(servletConfig);
        Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
        Assertions.assertEquals(0, hitCount);
    }
}