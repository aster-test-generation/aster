/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServlet2MDBQueue_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitConfig_ZnxO3() throws javax.servlet.ServletException {
        ServletConfig config = mock(ServletConfig.class);
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        servlet.init(config);
        verify(config).getServletContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_IgWX0() {
        PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
        String expected = "web primitive, configured with trade runtime configs, tests Servlet to Session EJB path";
        String actual = pingServlet2MDBQueue.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInitSuperInit_FCEI0_pTjp0() throws ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    try {
        servlet.init(null);
        fail("init method should throw ServletException");
    } catch (ServletException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_aVNz0_aGwa0() throws java.io.IOException, javax.servlet.ServletException {
    PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPostDoGet_qZjQ2_aFpO0() throws IOException, ServletException {
    PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    pingServlet2MDBQueue.doGet(request, response);
    verify(request, never()).getParameter("param");
    verify(request, times(1)).getMethod(); 
    verify(response, times(1)).getWriter();
    verify(response, times(1)).setContentLength(anyInt());
    verify(response).setStatus(HttpServletResponse.SC_OK);
}
}