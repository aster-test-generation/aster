/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingJDBCRead2JSP_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_ehRT0() throws ServletException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        ServletConfig servletConfig = mock(ServletConfig.class);
        when(servletConfig.getServletContext()).thenReturn(mock(javax.servlet.ServletContext.class));
        pingJDBCRead2JSP.init(servletConfig);
        verify(servletConfig, times(1)).getServletContext();
        verify(servletConfig, times(1)).getInitParameter("param");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_rmkF0() {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        String expected = "Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class";
        String actual = pingJDBCRead2JSP.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_scPN0_MxTc0() throws javax.servlet.ServletException, java.io.IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_Wpyj1_fUSm0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    pingJDBCRead2JSP.doGet(req, res);
    verify(req).getRequestURI();
    verify(res).setStatus(200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetIterations_aJHj4_jodL0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    int iter = 5;
    when(TradeConfig.getPrimIterations()).thenReturn(iter);
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    pingJDBCRead2JSP.doGet(req, res);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetSendError_siKS9_avtH0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    Exception e = new Exception("error");
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    when(req.getAttribute("quoteData")).thenReturn(null);
    pingJDBCRead2JSP.doGet(req, res);
    verify(res, times(1)).sendError(500, "PingJDBCRead2JSP Exception caught: " + e.toString());
}
}