/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPStreaming_Test_Passing {
    private static String initTime;
    private static int hitCount;
    @Mock
    private ServletConfig servletConfig;
    @InjectMocks
    private PingJSONPStreaming pingjsonpstreaming;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    @Mock
    private HttpServletRequest httpServletRequest;
    @Mock
    private HttpServletResponse httpServletResponse;
    @Mock
    private ServletOutputStream servletOutputStream;
    @Mock
    private PingJSONPStreaming pingJSONPStreaming;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_1() throws ServletException {
        initTime = null;
        hitCount = 0;
        // Act
        pingjsonpstreaming.init(servletConfig);
        // Assert
        assertEquals(new java.util.Date().toString(), initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_2() throws ServletException {
        initTime = null;
        hitCount = 0;
        // Act
        pingjsonpstreaming.init(servletConfig);
        // Assert
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_jEJD0() {
        pingJSONPStreaming = new PingJSONPStreaming();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_TjHC0() {
        PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
        String result = pingJSONPStreaming.getServletInfo();
        assertEquals("Basic JSON generation and parsing in a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet() throws Exception {
        initTime = "2022-01-01 00:00:00";
        hitCount = 0;
        pingJSONPStreaming = new PingJSONPStreaming();
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        when(httpServletRequest.getParameter("initTime")).thenReturn(initTime);
        when(httpServletRequest.getParameter("hitCount")).thenReturn(String.valueOf(hitCount));
        pingJSONPStreaming.doGet(httpServletRequest, httpServletResponse);
        verify(servletOutputStream).println(anyString());
        verify(servletOutputStream).flush();
        verify(servletOutputStream).close();
        verify(httpServletResponse).setContentType("text/html");
        verify(httpServletResponse).setStatus(HttpServletResponse.SC_OK);
        verifyNoMoreInteractions(servletOutputStream);
        verifyNoMoreInteractions(httpServletResponse);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_iYMX0() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingjsonpstreaming = new PingJSONPStreaming();
        HttpServletRequest httprequest = mock(HttpServletRequest.class);
        when(httprequest.getMethod()).thenReturn("POST");
        pingjsonpstreaming.doGet(httprequest, httpservletresponse);
        verify(httpservletresponse).setStatus(200);
        verify(servletoutputstream).write("Hello, World!".getBytes());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        initTime = null;
        hitCount = 0;
        // Act
        pingjsonpstreaming.init(servletConfig);
        // Assert
        assertEquals(new java.util.Date().toString(), initTime);
        assertEquals(0, hitCount);
    }
}