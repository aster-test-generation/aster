/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Failing {
    private OrderData[] closedOrders;
    private ExternalContext context;
    private TradeServices tradeAction;
    AccountDataJSF accountDataJSF;
    HttpSession httpSession;
    ExternalContext externalContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHome() throws Exception {
        httpSession = mock(HttpSession.class);
        externalContext = mock(ExternalContext.class);
        tradeAction = mock(TradeServices.class);
        accountDataJSF = new AccountDataJSF(mock(Instance.class));
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("userID");
        when(tradeAction.getAccountData("userID")).thenReturn(new AccountDataBean());
        when(tradeAction.getHoldings("userID")).thenReturn(new ArrayList<>());
        when(tradeAction.getClosedOrders("userID")).thenReturn(new ArrayList<>());
        when(tradeAction.getOrders("userID")).thenReturn(new ArrayList<>());
        accountDataJSF.home();
        verify(tradeAction, times(1)).getAccountData("userID");
        verify(tradeAction, times(1)).getHoldings("userID");
        verify(tradeAction, times(1)).getClosedOrders("userID");
        verify(tradeAction, times(1)).getOrders("userID");
        verify(httpSession, times(1)).setAttribute("closedOrders", any());
        verify(httpSession, times(1)).setAttribute("orderDataBeans", any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalance_BxXX0_TUIB0() {
        Instance<TradeServices> services = Mockito.mock(Instance.class);
        when(services.get()).thenReturn(Mockito.mock(TradeServices.class));
        AccountDataJSF accountDataJSF = new AccountDataJSF((Instance<TradeServices>) services);
        BigDecimal balance = new BigDecimal("100");
        accountDataJSF.setBalance(balance);
        assertEquals(balance, accountDataJSF.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_rdiB0_yEWn0() {
        Instance<TradeServices> services = Mockito.mock(Instance.class);
        when(services.get()).thenReturn(Mockito.mock(TradeServices.class));
        AccountDataJSF accountDataJSF = new AccountDataJSF((Instance<TradeServices>) services);
        Integer accountID = accountDataJSF.getAccountID();
        assertEquals(null, accountID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBalance_qzAB0_tRbr0() {
        Instance<TradeServices> services = Mockito.mock(Instance.class);
        when(services.get()).thenReturn(Mockito.mock(TradeServices.class));
        AccountDataJSF accountDataJSF = new AccountDataJSF((Instance<TradeServices>) services);
        BigDecimal balance = accountDataJSF.getBalance();
        assertEquals(new BigDecimal("0"), balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsTotal_gGSS0_MoVM0() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.get()).thenReturn(mock(TradeServices.class));
        AccountDataJSF accountDataJSF = new AccountDataJSF((Instance<TradeServices>) services);
        BigDecimal result = accountDataJSF.getHoldingsTotal();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalance_MynX0_vYHG0() {
        Instance<TradeServices> services = Mockito.mock(Instance.class);
        when(services.get()).thenReturn(Mockito.mock(TradeServices.class));
        AccountDataJSF accountDataJSF = new AccountDataJSF((Instance<TradeServices>) services);
        BigDecimal openBalance = accountDataJSF.getOpenBalance();
        assertEquals(BigDecimal.ZERO, openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionCreationDate_ABQh0_VAZV0_fid1() {
        TradeServices services = Mockito.mock(TradeServices.class);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(services);
        AccountDataJSF accountDataJSF = new AccountDataJSF(instance);
    }
}