/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_Jiwn0() {
        String[] expected = {"Full EJB3", "mode2", "mode3"};
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_mFfq1() {
        String result = TradeConfig.rndAddress();
        assertEquals("253 Oak St.", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_IANv0_2() {
        String result = TradeConfig.rndFullName();
        String[] parts = result.split(":");
        assertEquals("3394", parts[parts.length - 1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndQuantity_rYHB0() {
        float result = TradeConfig.rndQuantity();
        assertEquals(122.0f, result, 0.1f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndNewUserID_MfHn0() {
        String hostname = "localhost";
        String expected = "newUserPrefix" + hostname + System.currentTimeMillis() + 0;
        assertEquals(expected, TradeConfig.rndNewUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndPrice_waCz1() {
        float result = TradeConfig.rndPrice();
        assertEquals(158.0f, result, 0.1f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioActionNotNewUser_Oxlx1() {
        boolean newUser = false;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('q', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPage_zApR1() {
        String result = TradeConfig.getPage(1);
        assertEquals("webUI[webInterface][1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbols_nTUP0() {
        String symbols = TradeConfig.rndSymbols();
        assertEquals("s:8205", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbolsMultipleSymbols_bkUE1() {
        String symbols = TradeConfig.rndSymbols();
        assertEquals("s:3091,s:759,s:5411,s:4396,s:4326,s:6431,s:234,s:2736", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbolsMaxSymbols_jtxN2() {
        String symbols = TradeConfig.rndSymbols();
        assertEquals("s:3195", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactorPositive_keax0() {
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(false, result.doubleValue() > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmail_jffM0() {
        String userID = "test:123";
        String expected = "test123@10.com";
        String actual = TradeConfig.rndEmail(userID);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndUserID_egPg0() {
        TradeConfig tradeConfig = new TradeConfig();
        String result = tradeConfig.rndUserID();
        String expected = "uid:" + 0;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioActionNoSellDeficit_MFnX3_pqoh0() {
        boolean newUser = false;
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.rndBalance(); // Assuming this method is supposed to set the balance
        char result = TradeConfig.rndBalance().charAt(0);
        assertEquals('1', String.valueOf(result));
    }

    @Test
    @Timeout(value = 1000000, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamMaxUsers_HVXx6_FpWf0() {
        TradeConfig.setConfigParam("maxUsers", "1");
        assertEquals("1", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1000000, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamPrimIterations_QwFR8_TEqy0() {
        TradeConfig.setConfigParam("primIterations", "1");
        assertEquals("1", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_Jiwn0_fid1() {
        String[] expected = {"mode1", "mode2", "mode3"};
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_waHD0() {
        assertEquals(0, TradeConfig.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_mFfq1_fid1() {
        String result = TradeConfig.rndAddress();
        assertEquals("0 Oak St.", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_IANv0() {
        String result = TradeConfig.rndFullName();
        String[] parts = result.split(":");
        assertEquals("first", parts[0]);
        assertEquals("last", parts[parts.length - 1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_QUOTES_yKYG0() {
        assertEquals(0, TradeConfig.getMAX_QUOTES());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndQuantity_rYHB0_fid1() {
        float result = TradeConfig.rndQuantity();
        assertEquals(1.0f, result, 0.1f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDisplayOrderAlertsFalse_Vryu1_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean result = TradeConfig.getDisplayOrderAlerts();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_WmrB0() {
        assertEquals(0, TradeConfig.getListQuotePriceChangeFrequency());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndPrice_waCz1_fid1() {
        float result = TradeConfig.rndPrice();
        assertEquals(1.0f, result, 0.1f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioActionNewUser_tWhX0_fid1() {
        boolean newUser = true;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('b', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioActionNotNewUser_Oxlx1_fid1() {
        boolean newUser = false;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('b', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbols_nTUP0_fid1() {
        String symbols = TradeConfig.rndSymbols();
        assertEquals("s:0", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbolsMultipleSymbols_bkUE1_fid1() {
        String symbols = TradeConfig.rndSymbols();
        assertEquals("s:0,s:1", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbolsMaxSymbols_jtxN2_fid1() {
        String symbols = TradeConfig.rndSymbols();
        assertEquals("s:0,s:1,s:2", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactorPositive_keax0_fid1() {
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(true, result.doubleValue() > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactorOne_NhoC2_fid1() {
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(true, result.compareTo(BigDecimal.ONE) == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserID_RND_USER_TRUE_wVQI0() {
        String userID = TradeConfig.getUserID();
        assertEquals("Expected rndUserID to be called", "expectedRNDUserID", userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserID_RND_USER_FALSE_JPFj1() {
        String userID = TradeConfig.getUserID();
        assertEquals("Expected nextUserID to be called", "expectedNextUserID", userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmail_jffM0_fid1() {
        String userID = "test:123";
        String expected = "test123@42.com";
        String actual = TradeConfig.rndEmail(userID);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeMode_oiMc0() {
        assertEquals(0, TradeConfig.getRunTimeMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_IANv0_2_fid3() {
        String result = TradeConfig.rndFullName();
        String[] parts = result.split(":");
        assertEquals("last", parts[parts.length - 1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIncrementSellDeficit_wanC0_xnMW1_fid3() {
        TradeConfig tradeConfig = new TradeConfig();
        assertEquals("1000001", tradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamWebInterface_nkVG5_Ddoy0_fid3() {
        TradeConfig.setConfigParam("WebInterface", "value");
        assertEquals("WebInterface=value", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamMaxQuotes_Mxsv7_jEwe1_fid3() {
        TradeConfig.setConfigParam("maxQuotes", "1");
        assertEquals("maxQuotes=1", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamNullValueAccessMode_NXEB16_gKzt0() {
        TradeConfig.setConfigParam("accessMode", null);
        assertEquals("", TradeConfig.rndBalance());
    }
}