/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.validation.ConstraintViolation;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_SimpleBean1_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatConstraintViolations_MBCf0_zBLD0() throws Exception {
        SimpleBean1 simpleBean1 = new SimpleBean1();
        Set<ConstraintViolation<SimpleBean1>> cvSet = new HashSet<>();
        ConstraintViolation<SimpleBean1> cv1 = mock(ConstraintViolation.class);
        when(cv1.getMessage()).thenReturn("Constraint Violation 1");
        cvSet.add(cv1);
        String result = simpleBean1.getDesc();
        assertEquals("Constraint Violation 1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatConstraintViolationsMultipleViolations_DeJD1_sOSu0() throws Exception {
        SimpleBean1 simpleBean1 = new SimpleBean1();
        Set<ConstraintViolation<SimpleBean1>> cvSet = new HashSet<>();
        ConstraintViolation<SimpleBean1> cv1 = mock(ConstraintViolation.class);
        when(cv1.getMessage()).thenReturn("Constraint Violation 1");
        cvSet.add(cv1);
        ConstraintViolation<SimpleBean1> cv2 = mock(ConstraintViolation.class);
        when(cv2.getMessage()).thenReturn("Constraint Violation 2");
        cvSet.add(cv2);
        String result = simpleBean1.getDesc();
        assertEquals("Constraint Violation 1\nConstraint Violation 2\n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckInjectionValidationValid_vJpx0_SBfx0() {
        try {
            SimpleBean1 simpleBean1 = new SimpleBean1();
            simpleBean1.getDesc();
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckInjectionValidationInvalid_lFNx1_Vrjn1() throws Exception {
        SimpleBean1 simpleBean1 = new SimpleBean1();
        simpleBean1.getDesc();
        fail("Expected validation to fail");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDesc_ysJx0_kYes0() {
        try {
            SimpleBean1 simpleBean1 = new SimpleBean1();
            String desc = simpleBean1.getDesc();
            assert desc != null;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}