/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.MDBStats;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.*;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
    private static final String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
    private static final String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
    private static final String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
    @Mock
    private MDBStats mdbStats;
    @Mock
    private java.io.PrintWriter printWriter;
    @Mock
    private DataSource dataSource;
    @Mock
    private Connection connection;
    @Mock
    private Statement statement;
    private TradeDirect tradeDirect;
    @Mock
    private MarketSummaryDataBean marketSummaryDataBean;
    @Mock
    private PreparedStatement preparedStatement;
    @Mock
    private ResultSet resultSet;
    private static String getAllQuotesSQL = "select * from quoteejb q";
    TradeDirect tradedirect;
    PreparedStatement preparedstatement;
    ResultSet resultset;
    DataSource datasource;
    private boolean inSession = false;
    OrderDataBean orderDataBean;
    private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
    AccountDataBean accountDataBean;
    private UserTransaction txn;
    @Mock
    private HoldingDataBean holdingDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private TradeConfig tradeConfig;
    @Mock
    private Log log;
    @Mock
    private FinancialUtils financialUtils;
    @Mock
    private KeySequenceDirect keySequenceDirect;
    private ManagedExecutorService mes;
    private static long nextMarketSummary = System.currentTimeMillis();
    private static final Integer marketSummaryLock = new Integer(0);
    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();

    private AccountDataBean getAccountData() {
        return null;
    }

    private QuoteDataBean getQuoteData() {
        return null;
    }
    private static final String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
    private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_pbli0() {
        TradeDirect tradeDirect = new TradeDirect();
        double rnd1 = 10.0;
        double rnd2 = 20.0;
        double expected = 0.0; // replace with your expected result
        double actual = tradeDirect.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_YaNv0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_tzvc0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        orderData.setOrderType("buy");
        orderData.setQuantity(10.0);
        orderData.setPrice(new BigDecimal("10.0"));
        orderData.setSymbol("ABC");
        orderData.setOrderID(1);
        orderData.setAccount(getAccountData());
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_WNXw1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        orderData.setOrderType("sell");
        orderData.setQuantity(10.0);
        orderData.setPrice(new BigDecimal("10.0"));
        orderData.setSymbol("ABC");
        orderData.setOrderID(1);
        orderData.setAccount(getAccountData());
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_wrlD0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), false);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderTwoPhase_gimn1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_vdQf0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        assertEquals("closed", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_xRGU1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(2), true);
        assertEquals("closed", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAlreadyCompleted_SDop2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(3), true);
        assertEquals("completed", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_gsnP0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        Assertions.assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAlreadyCompleted_HUyf1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        Assertions.assertNotNull(orderData);
        try {
            tradeDirect.completeOrder(new Integer(1), true);
            Assertions.fail("Expected exception");
        } catch (Exception e) {
            Assertions.assertEquals("TradeDirect:completeOrder -- attempt to complete Order that is already completed", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_QfDk2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        Assertions.assertNotNull(orderData);
        try {
            tradeDirect.completeOrder(new Integer(1), true);
            Assertions.fail("Expected exception");
        } catch (Exception e) {
            Assertions.assertEquals("TradeDirect:completeOrder -- user: null already sold holding: 0", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_vfcv0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(1, true);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAlreadyCompleted_rGGY1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(1, true);
        assertNotNull(orderData);
        try {
            tradeDirect.completeOrder(1, true);
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:completeOrder -- attempt to complete Order that is already completed", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderError_Xnpz2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(1, true);
        assertNotNull(orderData);
        try {
            tradeDirect.completeOrder(1, false);
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:completeOrder -- error completing order", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_DBsY0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = new OrderDataBean();
        orderData.setOrderID(1);
        orderData.setOrderType("buy");
        orderData.setSymbol("symbol");
        orderData.setQuantity(10.0);
        orderData.setPrice(new BigDecimal("10.0"));
        orderData.setAccount(getAccountData());
        orderData.setQuote(getQuoteData());
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_OnZr1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = new OrderDataBean();
        orderData.setOrderID(1);
        orderData.setOrderType("sell");
        orderData.setSymbol("symbol");
        orderData.setQuantity(10.0);
        orderData.setPrice(new BigDecimal("10.0"));
        orderData.setAccount(getAccountData());
        orderData.setQuote(getQuoteData());
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAlreadyCompleted_WQuD1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        assertNotNull(orderData);
        try {
            tradeDirect.completeOrder(new Integer(1), true);
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:completeOrder -- attempt to complete Order that is already completed", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_NYrF0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("testUser");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersNull_lpiE1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersEmpty_DRwH2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_pVEZ0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = tradeDirect.getQuote("symbol");
        assertNotNull(quoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteNull_ElWo1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = tradeDirect.getQuote(null);
        assertNull(quoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_qzBV0() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean result = tradeDirect.pingTwoPhase("symbol");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_dJDd0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.logout("testUserID");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_TRqF0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellNullUserID_ehic1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell(null, 1, TradeConfig.SYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellNullHoldingID_dTWY2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", null, TradeConfig.SYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellInvalidOrderProcessingMode_cxJw3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, -1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellQueueOrder_VLtD10() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.queueOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_UXee0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellInvalidOrderProcessingMode_iedK3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.sell("userID", 1, 5);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_BLpl0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = null;
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_ujYb0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellAsyncOrderProcessingMode_TcWJ8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellAsync2PhaseOrderProcessingMode_xnBP9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH_2PHASE);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_vaZN0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_SSut0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
        assertNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncNotInSession_ssdN1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.setInSession(false);
        Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
        assertNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_PennyStockPrice_YqTg0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        quoteData.setSymbol("symbol");
        quoteData.setPrice(BigDecimal.valueOf(1.00));
        quoteData.setOpen(BigDecimal.valueOf(1.00));
        quoteData.setLow(BigDecimal.valueOf(1.00));
        quoteData.setHigh(BigDecimal.valueOf(1.00));
        quoteData.setVolume(100.0);
        quoteData.setCompanyName("company");
        BigDecimal changeFactor = BigDecimal.valueOf(2.0);
        double sharesTraded = 50.0;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol", changeFactor, sharesTraded, true);
        assertEquals(quoteData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_MaximumStockPrice_bhjR1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        quoteData.setSymbol("symbol");
        quoteData.setPrice(BigDecimal.valueOf(100.00));
        quoteData.setOpen(BigDecimal.valueOf(100.00));
        quoteData.setLow(BigDecimal.valueOf(100.00));
        quoteData.setHigh(BigDecimal.valueOf(100.00));
        quoteData.setVolume(100.0);
        quoteData.setCompanyName("company");
        BigDecimal changeFactor = BigDecimal.valueOf(0.5);
        double sharesTraded = 50.0;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol", changeFactor, sharesTraded, true);
        assertEquals(quoteData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_PublishQuotePriceChange_kuGp2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        quoteData.setSymbol("symbol");
        quoteData.setPrice(BigDecimal.valueOf(1.00));
        quoteData.setOpen(BigDecimal.valueOf(1.00));
        quoteData.setLow(BigDecimal.valueOf(1.00));
        quoteData.setHigh(BigDecimal.valueOf(1.00));
        quoteData.setVolume(100.0);
        quoteData.setCompanyName("company");
        BigDecimal changeFactor = BigDecimal.valueOf(2.0);
        double sharesTraded = 50.0;
        tradeDirect.updateQuotePriceVolumeInt("symbol", changeFactor, sharesTraded, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_NoPublishQuotePriceChange_hVTa3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        quoteData.setSymbol("symbol");
        quoteData.setPrice(BigDecimal.valueOf(1.00));
        quoteData.setOpen(BigDecimal.valueOf(1.00));
        quoteData.setLow(BigDecimal.valueOf(1.00));
        quoteData.setHigh(BigDecimal.valueOf(1.00));
        quoteData.setVolume(100.0);
        quoteData.setCompanyName("company");
        BigDecimal changeFactor = BigDecimal.valueOf(2.0);
        double sharesTraded = 50.0;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol", changeFactor, sharesTraded, false);
        assertEquals(quoteData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_pmDG0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        Collection<HoldingDataBean> result = tradeDirect.getHoldings(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginInvalidPassword_WNur2() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("validUser", "invalidPassword");
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:Login failure for user: validUser\n\tIncorrect password-->" + "validUser:" + "invalidPassword", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_1() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradeDirect = new TradeDirect();
        when(tradeConfig.getPublishQuotePriceChange()).thenReturn(true);
        when(quoteDataBean.getPrice()).thenReturn(BigDecimal.valueOf(10.0));
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume("ABC", BigDecimal.valueOf(0.1), 100);
        verify(preparedstatement, times(1)).executeUpdate();
        verify(quoteDataBean, times(1)).setPrice(any(BigDecimal.class));
        verify(quoteDataBean, times(1)).setVolume(anyDouble());
        assertEquals("ABC", updatedQuote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_2() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradeDirect = new TradeDirect();
        when(tradeConfig.getPublishQuotePriceChange()).thenReturn(true);
        when(quoteDataBean.getPrice()).thenReturn(BigDecimal.valueOf(10.0));
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume("ABC", BigDecimal.valueOf(0.1), 100);
        verify(preparedstatement, times(1)).executeUpdate();
        verify(quoteDataBean, times(1)).setPrice(any(BigDecimal.class));
        verify(quoteDataBean, times(1)).setVolume(anyDouble());
        assertEquals(BigDecimal.valueOf(11.0), updatedQuote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_3() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradeDirect = new TradeDirect();
        when(tradeConfig.getPublishQuotePriceChange()).thenReturn(true);
        when(quoteDataBean.getPrice()).thenReturn(BigDecimal.valueOf(10.0));
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume("ABC", BigDecimal.valueOf(0.1), 100);
        verify(preparedstatement, times(1)).executeUpdate();
        verify(quoteDataBean, times(1)).setPrice(any(BigDecimal.class));
        verify(quoteDataBean, times(1)).setVolume(anyDouble());
        assertEquals(100, updatedQuote.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_RqvE0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_bYzE0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean("testUserID", "testPassword", "testFullName", "testAddress", "testEmail", "testCreditCard");
        AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesSuccess_vqQf0_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[]{"CREATE TABLE", "DROP TABLE"};
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        assertTrue(tradeDirect.recreateDBTables(sqlBuffer, out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginInvalidUser_tCUN1() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("invalidUser", "validPassword");
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("Cannot find account forinvalidUser", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNoResultSet_JYVX3() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("noResultSetUser", "validPassword");
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("Cannot find account fornoResultSetUser", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradeDirect = new TradeDirect();
        when(tradeConfig.getPublishQuotePriceChange()).thenReturn(true);
        when(quoteDataBean.getPrice()).thenReturn(BigDecimal.valueOf(10.0));
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume("ABC", BigDecimal.valueOf(0.1), 100);
        verify(preparedstatement, times(1)).executeUpdate();
        verify(quoteDataBean, times(1)).setPrice(any(BigDecimal.class));
        verify(quoteDataBean, times(1)).setVolume(anyDouble());
        assertEquals("ABC", updatedQuote.getSymbol());
        assertEquals(BigDecimal.valueOf(11.0), updatedQuote.getPrice());
        assertEquals(100, updatedQuote.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_ZbAK0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternal_Reza0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(true).thenReturn(false);
        when(rs.getBigDecimal("TSIA")).thenReturn(BigDecimal.ONE);
        when(rs.getBigDecimal("openTSIA")).thenReturn(BigDecimal.TEN);
        when(rs.getDouble("totalVolume")).thenReturn(100.0);
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        verify(conn, times(1)).prepareStatement(anyString(), anyInt(), anyInt());
        verify(stmt, times(3)).close();
        assertEquals(BigDecimal.ONE, marketSummaryData.getTSIA());
        assertEquals(BigDecimal.TEN, marketSummaryData.getOpenTSIA());
        assertEquals(100.0, marketSummaryData.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternalNoResults_LtNq1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(false);
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        verify(conn, times(1)).prepareStatement(anyString(), anyInt(), anyInt());
        verify(stmt, times(3)).close();
        assertEquals(BigDecimal.ZERO, marketSummaryData.getTSIA());
        assertEquals(BigDecimal.ZERO, marketSummaryData.getOpenTSIA());
        assertEquals(0.0, marketSummaryData.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternalError_BXcC2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenThrow(new SQLException());
        try {
            tradeDirect.getMarketSummaryInternal();
            fail("Expected SQLException");
        } catch (SQLException e) {
        }
        verify(conn, times(1)).prepareStatement(anyString(), anyInt(), anyInt());
        verify(stmt, times(1)).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternalTopGainers_ISmN3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);
        when(rs.getBigDecimal("change1")).thenReturn(BigDecimal.ONE);
        when(rs.getBigDecimal("change2")).thenReturn(BigDecimal.TEN);
        when(rs.getBigDecimal("change3")).thenReturn(BigDecimal.TEN);
        Collection<QuoteDataBean> topGainers = tradeDirect.getMarketSummaryInternal().getTopGainers();
        assertEquals(3, topGainers.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternalTopLosers_kjCY4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);
        when(rs.getBigDecimal("change1")).thenReturn(BigDecimal.ONE);
        when(rs.getBigDecimal("change2")).thenReturn(BigDecimal.TEN);
        when(rs.getBigDecimal("change3")).thenReturn(BigDecimal.TEN);
        Collection<QuoteDataBean> topLosers = tradeDirect.getMarketSummaryInternal().getTopLosers();
        assertEquals(3, topLosers.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternalNoTopGainers_BHrX5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(false);
        Collection<QuoteDataBean> topGainers = tradeDirect.getMarketSummaryInternal().getTopGainers();
        assertEquals(0, topGainers.size());
    }
}