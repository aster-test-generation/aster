/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataJSF_Test_Passing {
    private TradeServices tradeAction;
    private ExternalContext context;
    OrderDataJSF orderDataJSF;
    HttpSession httpSession;
    ExternalContext externalContext;
    private OrderData orderData;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAllOrder() throws Exception {
        httpSession = mock(HttpSession.class);
        externalContext = mock(ExternalContext.class);
        tradeAction = mock(TradeServices.class);
        orderDataJSF = new OrderDataJSF(mock(Instance.class));
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeAction.getOrders("uidBean")).thenReturn(new ArrayList<>());
        orderDataJSF.getAllOrder();
        verify(tradeAction, times(1)).getOrders("uidBean");
    }
}