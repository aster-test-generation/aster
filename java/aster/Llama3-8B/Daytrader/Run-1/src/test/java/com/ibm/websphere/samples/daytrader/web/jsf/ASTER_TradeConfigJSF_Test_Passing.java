/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Passing {
    private String result = "";
    private ExternalContext context;
    @Mock
    private TradeConfig tradeConfig;
    @Mock
    private RunStatsDataBean runStatsData;
    @Mock
    private HttpSession httpSession;
    @Mock
    private ExternalContext externalContext;
    private TradeConfigJSF tradeConfigJSF;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInterval_aGLm0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected = 30;
        int actual = tradeConfigJSF.getMarketSummaryInterval();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWebInterfaceList_FYnM0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expectedWebInterfaceList = {"interface1", "interface2", "interface3"};
        tradeConfigJSF.setWebInterfaceList(expectedWebInterfaceList);
        String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
        assertArrayEquals(expectedWebInterfaceList, actualWebInterfaceList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuntimeMode_cxtB0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.getRuntimeMode();
        assertEquals("Full EJB3", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_uIBH0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPrimIterations(10);
        assertEquals(10, tradeConfigJSF.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxUsers_Rehs0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected = 15000;
        int actual = tradeConfigJSF.getMaxUsers();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLongRun_YgVy0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        boolean result = tradeConfigJSF.isLongRun();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPublishQuotePriceChange_TtqU0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        boolean result = tradeConfigJSF.isPublishQuotePriceChange();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxQuotes_HClV10000() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int result = tradeConfigJSF.getMaxQuotes();
        assertEquals(10000, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderProcessingModeList_rHlP0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = {"mode1", "mode2", "mode3"};
        tradeConfigJSF.setOrderProcessingModeList(expected);
        assertArrayEquals(expected, tradeConfigJSF.getOrderProcessingModeList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWebInterface_qYuX0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setWebInterface("testWebInterface");
        assertEquals("testWebInterface", tradeConfigJSF.getWebInterface());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetResult_esPO0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setResult("Test Result");
        assertEquals("Test Result", tradeConfigJSF.getResult());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxUsers_nmKh0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMaxUsers(5);
        assertEquals(5, tradeConfigJSF.getMaxUsers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketSummaryInterval_SLnG1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMarketSummaryInterval(10);
        assertEquals(10, tradeConfigJSF.getMarketSummaryInterval());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPublishQuotePriceChangeTrue_mtbA1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPublishQuotePriceChange(true);
        assertEquals(true, tradeConfigJSF.isPublishQuotePriceChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPublishQuotePriceChangeFalse_Sbut2() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPublishQuotePriceChange(false);
        assertEquals(false, tradeConfigJSF.isPublishQuotePriceChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_ZNcV0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.getOrderProcessingMode();
        assertEquals("Sync", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetListQuotePriceChangeFrequency_KCml0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setListQuotePriceChangeFrequency(10);
        assertEquals(10, tradeConfigJSF.getListQuotePriceChangeFrequency());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuntimeModeList_hGwQ0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = {"mode1", "mode2", "mode3"};
        tradeConfigJSF.setRuntimeModeList(expected);
        assertArrayEquals(expected, tradeConfigJSF.getRuntimeModeList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDisplayOrderAlertsTrue_PBop0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setDisplayOrderAlerts(true);
        assertTrue(tradeConfigJSF.isDisplayOrderAlerts());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDisplayOrderAlertsFalse_kbcn1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setDisplayOrderAlerts(false);
        assertFalse(tradeConfigJSF.isDisplayOrderAlerts());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_yKIn0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected = 100;
        int actual = tradeConfigJSF.getListQuotePriceChangeFrequency();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuntimeMode_btXD0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setRuntimeMode("test");
        assertEquals("test", tradeConfigJSF.getRuntimeMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPopulateDatabase_XkZA0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.populateDatabase();
        assertEquals("database", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildDatabaseTablesDB2_AfGQ0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.buildDatabaseTables();
        assertEquals("database", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderProcessingMode_FADU0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("Manual");
        assertEquals("Manual", tradeConfigJSF.getOrderProcessingMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongRunFalse_XWom1_NOmN0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("LongRun");
        tradeConfigJSF.setOrderProcessingMode("ShortRun");
        assertFalse(tradeConfigJSF.getOrderProcessingMode().equals("LongRun"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDisplayOrderAlertsTrue_axgr0_jdUX0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("true");
        assertEquals("true", tradeConfigJSF.getOrderProcessingMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDisplayOrderAlertsFalse_Kydy1_YVSG0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("someValue");
        assertEquals("someValue", tradeConfigJSF.getOrderProcessingMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_MAX_QUOTES_hSyS4_RrkB0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("MAX_QUOTES");
        tradeConfigJSF.updateConfig();
        assertEquals("DayTrader Configuration Updated", tradeConfigJSF.getResult());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderProcessingMode_ZIZH0_fYTZ0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("some order processing mode");
        assertEquals("some order processing mode", tradeConfigJSF.getOrderProcessingMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildDatabaseTablesException_WZue4_pQdo0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("database");
        assertEquals("database", tradeConfigJSF.getOrderProcessingMode());
    }
}