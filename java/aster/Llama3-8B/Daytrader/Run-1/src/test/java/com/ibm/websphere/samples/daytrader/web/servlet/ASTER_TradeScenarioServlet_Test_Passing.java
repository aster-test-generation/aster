/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeScenarioServlet_Test_Passing {
    @Mock
    TradeConfig tradeConfig;
    @Mock
    ServletConfig servletConfig;
    @Mock
    HttpServlet httpServlet;
    TradeScenarioServlet tradeScenarioServlet;
    TradeScenarioServlet tradescenarioservlet;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    ServletConfig servletconfig;
    HttpSession httpsession;
    ServletContext servletcontext;
    HttpServlet httpservlet;
    private static String tasPathPrefix = "/app?action=";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_mTlN0() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
        verify(request).getParameter("param");
        verify(response).setStatus(HttpServletResponse.SC_OK);
        verify(response).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_VtYF0() {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        String result = servlet.getServletInfo();
        assertEquals("TradeScenarioServlet emulates a population of web users", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_MXYr0() throws Exception {
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        PrintWriter printWriter = mock(PrintWriter.class);
        ServletConfig servletconfig = mock(ServletConfig.class);
        HttpSession httpsession = mock(HttpSession.class);
        ServletContext servletcontext = mock(ServletContext.class);
        TradeScenarioServlet tradescenarioservlet = new TradeScenarioServlet();
        when(httpservletresponse.getWriter()).thenReturn(printWriter);
        tradescenarioservlet.performTask(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setStatus(200);
        verify(printWriter).println("<HTML><HEAD>TradeScenarioServlet</HEAD><BODY>Hello</BODY></HTML>");
        verify(printWriter).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_VvIi0() throws Exception {
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        PrintWriter printWriter = mock(PrintWriter.class);
        ServletConfig servletconfig = mock(ServletConfig.class);
        HttpSession httpsession = mock(HttpSession.class);
        ServletContext servletcontext = mock(ServletContext.class);
        TradeScenarioServlet tradescenarioservlet = new TradeScenarioServlet();
        when(httpservletresponse.getWriter()).thenReturn(printWriter);
        tradescenarioservlet.performTask(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setContentType(any(String.class));
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
        verify(printWriter).println(any(String.class));
        verify(printWriter).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithoutParameters_PFkU1_gXmB0() {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        when(config.getInitParameterNames()).thenReturn(null);
        try {
            servlet.init(config);
        } catch (ServletException e) {
        }
        verify(config, never()).getInitParameter(anyString());
    }
}