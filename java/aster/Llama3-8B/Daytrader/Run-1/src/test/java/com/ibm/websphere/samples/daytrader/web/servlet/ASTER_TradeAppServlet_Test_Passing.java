/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Passing {
    @Mock
    TradeConfig tradeConfig;
    @Mock
    ServletConfig servletConfig;
    @Mock
    HttpServlet httpServlet;
    @InjectMocks
    TradeAppServlet tradeAppServlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_fiGF0() throws ServletException, IOException {
        TradeAppServlet tradeAppServlet = new TradeAppServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("POST");
        when(request.getParameter("param")).thenReturn("value");
        tradeAppServlet.doPost(request, response);
        verify(request).getMethod();
        verify(request).getParameter("param");
        verify(response).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_zfOX0() {
        TradeAppServlet servlet = new TradeAppServlet();
        String result = servlet.getServletInfo();
        assertEquals("TradeAppServlet provides the standard web interface to Trade", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_Ngvi0() throws Exception {
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        ServletConfig servletconfig = mock(ServletConfig.class);
        HttpSession httpsession = mock(HttpSession.class);
        TradeAppServlet tradeappservlet = mock(TradeAppServlet.class);
        when(httpservletrequest.getMethod()).thenReturn("POST");
        when(httpservletrequest.getParameter("action")).thenReturn("login");
        when(servletconfig.getServletContext()).thenReturn(new MockServletContext());
        when(httpsession.getAttribute("uidBean")).thenReturn("uidBeanValue");
        tradeappservlet.performTask(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
        verify(httpservletresponse).setContentType("text/html");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostIOException_DKYk1_YbQE0() throws ServletException, IOException {
        TradeAppServlet tradeAppServlet = new TradeAppServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("POST");
        when(request.getParameter("param")).thenReturn("value");
        try {
            tradeAppServlet.performTask(request, response);
        } catch (IOException e) {
            try {
                verify(response).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            } catch (IOException e1) {
                throw new IOException(e1);
            }
        }
    }
}