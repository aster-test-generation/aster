/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_VkzD0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(10.0, BigDecimal.valueOf(10.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "profileID"), new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), 10.0));
        assertEquals(10.0, holdingDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_QuoteNotNull_FODl0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(new QuoteDataBean("AAPL", "Apple Inc.", 100, BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(160.0), BigDecimal.valueOf(145.0), 5.0));
        assertEquals("AAPL", holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_QuoteNull_ETsq1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuoteID("AAPL");
        assertEquals("AAPL", holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_PTWV0_1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(new QuoteDataBean("AAPL"));
        QuoteDataBean quote = holdingDataBean.getQuote();
        assertEquals("AAPL", quote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_PTWV0_2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(new QuoteDataBean("AAPL"));
        QuoteDataBean quote = holdingDataBean.getQuote();
        assertNotNull(quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_QxgP0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        BigDecimal purchasePrice = new BigDecimal("10.00");
        holdingDataBean.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_hGcN0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        boolean result = holdingDataBean.equals(holdingDataBean);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_SFKY1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Object object = new QuoteDataBean("symbol");
        boolean result = holdingDataBean.equals(object);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_ZkEk4() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        boolean result = holdingDataBean.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDate_zrnh0() {
        HoldingDataBean holding = new HoldingDataBean();
        holding.setPurchaseDate(new Date());
        Date result = holding.getPurchaseDate();
        assertEquals(holding.getPurchaseDate(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_XlJm0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        holdingDataBean.setAccount(accountDataBean);
        assertEquals(accountDataBean, holdingDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_vVvz0_1() {
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_sbzd0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Date purchaseDate = new Date();
        holdingDataBean.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithExistingDate_khbY1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Date purchaseDate = new Date();
        holdingDataBean.setPurchaseDate(purchaseDate);
        Date newPurchaseDate = new Date();
        holdingDataBean.setPurchaseDate(newPurchaseDate);
        assertEquals(newPurchaseDate, holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithoutHoldingID_ZeQP1() {
        HoldingDataBean holding = new HoldingDataBean();
        int result = holding.hashCode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_yoyi0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuoteID("testQuoteID");
        assertEquals("testQuoteID", holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_vesh0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        holdingDataBean.setQuote(quoteDataBean);
        assertEquals(holdingDataBean.getQuote(), quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteNull_iZDp1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(null);
        assertNull(holdingDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteSameInstance_FvFZ2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        holdingDataBean.setQuote(quoteDataBean);
        holdingDataBean.setQuote(quoteDataBean);
        assertEquals(holdingDataBean.getQuote(), quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_QLhA0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(10.0);
        assertEquals(10.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNonZeroValue_JqLb1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(20.0);
        assertEquals(20.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithZeroValue_ruJo2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(0.0);
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeValue_Kwcc3() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(-10.0);
        assertEquals(-10.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_qNSJ1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setHoldingID(1);
        assertEquals(1, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDWithNull_uaJs2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setHoldingID(null);
        assertEquals(null, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePrice_wtlJ0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(0.0, BigDecimal.valueOf(10.0), new java.util.Date(), new AccountDataBean(), new QuoteDataBean("AAPL"));
        assertEquals(BigDecimal.valueOf(10.0), holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePriceWithNull_MMIb1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertEquals(null, holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePriceWithSpecificValue_pZHB2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(0.0, BigDecimal.valueOf(20.0), new java.util.Date(), new AccountDataBean(), new QuoteDataBean("AAPL"));
        assertEquals(BigDecimal.valueOf(20.0), holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithDefaultConstructor_lgxn1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String result = holdingDataBean.toHTML();
        assertEquals("<BR>Holding Data for holding: null</B><LI>      quantity:0.0</LI><LI> purchasePrice:null</LI><LI>  purchaseDate:null</LI><LI>       quoteID:null</LI>", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_zTcI1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setAccount(new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("1.0"), new java.math.BigDecimal("1.0"), "profileID"));
        AccountDataBean account = holdingDataBean.getAccount();
        assertNotNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_zzes0_iuwO0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_PTWV0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(new QuoteDataBean("AAPL"));
        QuoteDataBean quote = holdingDataBean.getQuote();
        assertEquals("AAPL", quote.getSymbol());
        assertNotNull(quote);
    }
}