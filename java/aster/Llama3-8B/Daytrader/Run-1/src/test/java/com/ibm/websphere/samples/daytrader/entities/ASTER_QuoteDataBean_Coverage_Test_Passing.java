/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuoteDataBean_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNullSymbol_DnwY0() {
        QuoteDataBean bean1 = new QuoteDataBean("AAPL", "Apple Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        QuoteDataBean bean2 = new QuoteDataBean(null, "Apple Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        assertTrue(bean1.equals(bean2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentSymbols_pNml1() {
        QuoteDataBean bean1 = new QuoteDataBean("AAPL", "Apple Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        QuoteDataBean bean2 = new QuoteDataBean("GOOG", "Google Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        assertFalse(bean1.equals(bean2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameSymbols_GhEG2() {
        QuoteDataBean bean1 = new QuoteDataBean("AAPL", "Apple Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        QuoteDataBean bean2 = new QuoteDataBean("AAPL", "Apple Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        assertTrue(bean1.equals(bean2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentSymbolsAndCompanyNames_aKcI3() {
        QuoteDataBean bean1 = new QuoteDataBean("AAPL", "Apple Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        QuoteDataBean bean2 = new QuoteDataBean("AAPL", "Microsoft Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        assertFalse(bean1.equals(bean2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNullObject_RMTZ6() {
        QuoteDataBean bean1 = new QuoteDataBean("AAPL", "Apple Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        assertFalse(bean1.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_EWlS7() {
        QuoteDataBean bean1 = new QuoteDataBean("AAPL", "Apple Inc.", 1000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(110), 10);
        assertFalse(bean1.equals(new Object()));
    }
}