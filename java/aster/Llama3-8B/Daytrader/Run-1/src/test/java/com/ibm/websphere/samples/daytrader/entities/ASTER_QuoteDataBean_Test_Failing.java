/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0_2() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol(), quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0_3() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol() + " Incorporated", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0_4() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0_5() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0_6() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0_7() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0_8() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0_9() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TIpa0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(150.00), BigDecimal.valueOf(145.00), BigDecimal.valueOf(140.00), BigDecimal.valueOf(155.00), 5.00);
        String result = quoteDataBean.toString();
        System.out.println(result);
        assert result.contains("Quote Data for: AAPL");
        assert result.contains("companyName: Apple Inc.");
        assert result.contains("volume: 1000000");
        assert result.contains("price: 150.00");
        assert result.contains("open: 145.00");
        assert result.contains("low: 140.00");
        assert result.contains("high: 155.00");
        assert result.contains("change: 5.00");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_QaSX0_zKPK0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(110.0), 10.0);
        quoteDataBean.print();
        String expected = "	Quote Data for: AAPL		 companyName: Apple Inc.		      volume: 1000000.0		       price: 100.0		        open1: 90.0		         low: 80.0		        high: 110.0		      change1: 10.0";
        assertEquals(expected, quoteDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithSymbolOnly_Mfkj2_hkAu0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("GOOG");
        quoteDataBean.print();
        String expected = "	Quote Data for: GOOG		 companyName: null		      volume: 0.0		       price: null		        open1: null		         low: null		        high: null		      change1: 0.0";
        assertEquals(expected, quoteDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_HSAi0_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("150.00"), new BigDecimal("150.00"), new BigDecimal("140.00"), new BigDecimal("160.00"), 5.0);
        String expected = "<BR>Quote Data for: AAPL<LI> companyName: Apple Inc.</LI><LI>      volume: 1000000.0</LI><LI>       price: 150.00</LI><LI>        open: 150.00</LI><LI>         low: 140.00</LI><LI>        high: 160.00</LI><LI>      change: 5.0</LI>";
        assertEquals(expected, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_QaSX0_zKPK0_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(110.0), 10.0);
        quoteDataBean.print();
        String expected = "QuoteDataBean[symbol=AAPL, companyName=Apple Inc., volume=1000000.0, price=100.0, open=90.0, low=80.0, high=110.0, change=10.0]";
        assertEquals(expected, quoteDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithoutParameters_mfmo1_hCGx1_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        assertEquals("QuoteDataBean[symbol=null, companyName=null, volume=0.0, price=null, open=null, low=null, high=null, change=0.0]", quoteDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithSymbolOnly_Mfkj2_hkAu0_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("GOOG");
        quoteDataBean.print();
        String expected = "QuoteDataBean[symbol=GOOG, companyName=null, volume=0.0, price=null, open=null, low=null, high=null, change=0.0]";
        assertEquals(expected, quoteDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_mkji0() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertNotNull(quoteDataBean);
        assertEquals(TradeConfig.rndSymbol(), quoteDataBean.getSymbol());
        assertEquals(TradeConfig.rndSymbol() + " Incorporated", quoteDataBean.getCompanyName());
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getVolume(), 0.0);
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getPrice());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getOpen());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getLow());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getHigh());
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getChange(), 0.0);
    }
}