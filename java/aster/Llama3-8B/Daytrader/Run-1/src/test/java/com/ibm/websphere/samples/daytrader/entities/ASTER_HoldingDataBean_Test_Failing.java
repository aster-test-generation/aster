/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_vVvz0_2() {
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        assertEquals(Integer.valueOf(TradeConfig.rndInt(100000)), holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_vVvz0_3() {
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndQuantity(), holdingDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_vVvz0_4() {
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_vVvz0_5() {
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_vVvz0_6() {
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol(), holdingDataBean.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_vVvz0() {
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        assertNotNull(holdingDataBean);
        assertEquals(Integer.valueOf(TradeConfig.rndInt(100000)), holdingDataBean.getHoldingID());
        assertEquals(TradeConfig.rndQuantity(), holdingDataBean.getQuantity());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), holdingDataBean.getPurchasePrice());
        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), holdingDataBean.getPurchaseDate());
        assertEquals(TradeConfig.rndSymbol(), holdingDataBean.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithDefaultConstructor_lgxn1_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String result = holdingDataBean.toHTML();
        assertEquals("<BR>Holding Data for holding:</B><LI>      quantity:</LI><LI> purchasePrice:</LI><LI>  purchaseDate:</LI><LI>       quoteID:</LI>", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_zzes0_iuwO0_fid3() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.print();
        assertEquals("HoldingDataBean [toString()]", holdingDataBean.toString());
    }
}