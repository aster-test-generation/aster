/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.naming.InitialContext;
import javax.websocket.EndpointConfig;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingWebSocketJson_Test_Failing {
    private Session currentSession = null;
    private Integer sentHitCount = null;
    private Integer receivedHitCount = null;
    @Mock
    private Session session;
    @Mock
    private EndpointConfig endpointConfig;
    @Mock
    private InitialContext initialContext;
    @Mock
    private ManagedThreadFactory managedThreadFactory;
    @Spy
    private PingWebSocketJson pingwebsocketjson;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testonOpen() throws Exception {
        MockitoAnnotations.initMocks(this);
        currentSession = mock(Session.class);
        sentHitCount = 0;
        receivedHitCount = 0;
        pingwebsocketjson = new PingWebSocketJson();
        // Act
        pingwebsocketjson.onOpen(session, endpointConfig);
        // Assert
        Mockito.verify(session, Mockito.times(1)).isOpen();
        Mockito.verify(initialContext, Mockito.times(1)).lookup("java:comp/DefaultManagedThreadFactory");
        Mockito.verify(managedThreadFactory, Mockito.times(1)).newThread(Mockito.any(Runnable.class));
        Mockito.verify(session, Mockito.times(1)).getAsyncRemote();
        Mockito.verifyNoMoreInteractions(session, initialContext, managedThreadFactory);
    }
}