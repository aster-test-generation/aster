/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_KeySequenceDirect_Test_Failing {
    private static HashMap<String, Collection<?>> keyMap = new HashMap<String, Collection<?>>();
    @Mock
    private Connection connection;
    @Mock
    private PreparedStatement preparedstatement;
    @Mock
    private ResultSet resultset;
    private KeySequenceDirect keysequencedirect;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextID() throws Exception {
        keyMap.put("keyName", new ArrayList<>());
        keysequencedirect = new KeySequenceDirect();
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        Integer nextID = keysequencedirect.getNextID(connection, "keyName", true, true);
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(preparedstatement, times(1)).executeQuery();
        verify(resultset, times(2)).next();
        assertEquals(1, nextID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextID_InSession_peWb0() throws Exception {
        Connection conn = null;
        String keyName = "testKey";
        boolean inSession = true;
        boolean inGlobalTxn = false;
        Integer nextID = KeySequenceDirect.getNextID(conn, keyName, inSession, inGlobalTxn);
        assertNotNull(nextID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextID_NotInSession_Xfmr1() throws Exception {
        Connection conn = null;
        String keyName = "testKey";
        boolean inSession = false;
        boolean inGlobalTxn = false;
        Integer nextID = KeySequenceDirect.getNextID(conn, keyName, inSession, inGlobalTxn);
        assertNotNull(nextID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextID_GlobalTxn_gpxc2() throws Exception {
        Connection conn = null;
        String keyName = "testKey";
        boolean inSession = false;
        boolean inGlobalTxn = true;
        Integer nextID = KeySequenceDirect.getNextID(conn, keyName, inSession, inGlobalTxn);
        assertNotNull(nextID);
    }
}