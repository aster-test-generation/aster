/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingReentryServlet_Test_Failing {
    PingReentryServlet pingreentryservlet;
    ServletConfig servletConfig;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    HttpServletRequest httpservletrequest;
    HttpServlet httpservlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        servletConfig = mock(ServletConfig.class);
        pingreentryservlet = new PingReentryServlet();
        // Act
        pingreentryservlet.init(servletConfig);
        // Assert
        verify(servletConfig, times(1)).getServletContext();
        verify(servletConfig, times(1)).getInitParameter("param");
        verify(servletConfig, times(1)).getServletContext().getServletContextName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_VhuC0() {
        PingReentryServlet servlet = new PingReentryServlet();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_wosF0() throws Exception {
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        ServletOutputStream servletoutputstream = mock(ServletOutputStream.class);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        PingReentryServlet pingreentryservlet = new PingReentryServlet();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingreentryservlet.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).sendError(500, anyString());
        verify(servletoutputstream).write(any());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_WYgw0() throws Exception {
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        ServletOutputStream servletoutputstream = mock(ServletOutputStream.class);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        PingReentryServlet pingreentryservlet = new PingReentryServlet();
        when(httpservletrequest.getParameter("numReentries")).thenReturn("1");
        when(httpservletrequest.getParameter("sleep")).thenReturn("1000");
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingreentryservlet.doGet(httpservletrequest, httpservletresponse);
        verify(servletoutputstream, times(1)).println("0");
        verify(servletoutputstream, times(1)).flush();
        verify(httpservletresponse, times(1)).setContentType("text/html");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_LuwG0() throws Exception {
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        ServletOutputStream servletoutputstream = mock(ServletOutputStream.class);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        PingReentryServlet pingreentryservlet = new PingReentryServlet();
        when(httpservletrequest.getParameter("numReentries")).thenReturn("1");
        when(httpservletrequest.getParameter("sleep")).thenReturn("1000");
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        doThrow(new Exception("Test exception")).when(pingreentryservlet).doGet(httpservletrequest, httpservletresponse);
        pingreentryservlet.doGet(httpservletrequest, httpservletresponse);
        verify(servletoutputstream, times(1)).println("500");
        verify(servletoutputstream, times(1)).flush();
        verify(httpservletresponse, times(1)).sendError(500, "Test exception");
    }
}