/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Passing {
    private OrderData[] closedOrders;
    private ExternalContext context;
    private TradeServices tradeAction;
    AccountDataJSF accountDataJSF;
    HttpSession httpSession;
    ExternalContext externalContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionCreationDate_ABQh0_VAZV0() {
        TradeServices services = Mockito.mock(TradeServices.class);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(services);
        when(instance.select(Mockito.any())).thenReturn(instance);
        AccountDataJSF accountDataJSF = new AccountDataJSF(instance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void doSomething_vBfq1() {
    }
}