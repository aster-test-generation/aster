/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRange_pYTD0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(20.0), "AAPL");
        quoteData.setRange("1d");
        assertEquals("1d", quoteData.getRange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_iSqU0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC");
        quoteData.setSymbol("XYZ");
        assertEquals("XYZ", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol2_wniI1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC", BigDecimal.valueOf(30), BigDecimal.valueOf(40), "Company", 100.0, 5.0);
        quoteData.setSymbol("XYZ");
        assertEquals("XYZ", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHigh_HGge0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "symbol");
        quoteData.setHigh(new BigDecimal("20.00"));
        assertEquals(new BigDecimal("20.00"), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyNameWithAllFields_SFgv0() {
        BigDecimal price = new BigDecimal("10.00");
        BigDecimal open = new BigDecimal("10.00");
        String symbol = "ABC";
        BigDecimal high = new BigDecimal("15.00");
        BigDecimal low = new BigDecimal("5.00");
        String companyName = "Company Name";
        Double volume = 1000.0;
        Double change = 5.0;
        QuoteData quoteData = new QuoteData(open, price, symbol, high, low, companyName, volume, change);
        assertEquals(companyName, quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyNameWithTwoFields_qNXf1() {
        BigDecimal price = new BigDecimal("10.00");
        BigDecimal open = new BigDecimal("10.00");
        String symbol = "ABC";
        QuoteData quoteData = new QuoteData(open, price, symbol);
        assertEquals(null, quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_FEOF0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "AAPL");
        BigDecimal gain = new BigDecimal("5.00");
        quoteData.setGain(gain);
        assertEquals(gain, quoteData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_vnRN0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setVolume(10.0);
        assertEquals(10.0, quoteData.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_KOFK0() {
        BigDecimal price = new BigDecimal("10.00");
        BigDecimal open = new BigDecimal("9.00");
        String symbol = "ABC";
        QuoteData quoteData = new QuoteData(price, open, symbol);
        BigDecimal result = quoteData.getPrice();
        assertEquals(price, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithAllParams_yAaf1() {
        BigDecimal open = new BigDecimal("9.00");
        BigDecimal price = new BigDecimal("10.00");
        String symbol = "ABC";
        BigDecimal high = new BigDecimal("11.00");
        BigDecimal low = new BigDecimal("8.00");
        String companyName = "Company Name";
        Double volume = 100.0;
        Double change = 1.0;
        QuoteData quoteData = new QuoteData(open, price, symbol, high, low, companyName, volume, change);
        BigDecimal result = quoteData.getPrice();
        assertEquals(price, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpen_EweJ0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(20.0), "ABC");
        quoteData.setOpen(BigDecimal.valueOf(15.0));
        assertEquals(BigDecimal.valueOf(15.0), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChange_OAcy0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "AAPL");
        quoteData.setChange(5.0);
        assertEquals(5.0, quoteData.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenWithFiveParams_cPVt1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("20.00"), "ABC", new BigDecimal("30.00"), new BigDecimal("40.00"), "Company", new Double(100.0), new Double(10.0));
        BigDecimal open = quoteData.getOpen();
        assertEquals(new BigDecimal("10.00"), open);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLow2_ALZy1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC", BigDecimal.valueOf(30), BigDecimal.valueOf(40), "Company", 100.0, 5.0);
        BigDecimal low = quoteData.getLow();
        assertEquals(BigDecimal.valueOf(40), low);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange2_tGiH1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(12.0), "AAPL", BigDecimal.valueOf(15.0), BigDecimal.valueOf(8.0), "Apple Inc.", 100.0, 2.0);
        assertEquals(2.0, quoteData.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHigh_sSoz0() {
        BigDecimal open = new BigDecimal("10.00");
        BigDecimal price = new BigDecimal("15.00");
        String symbol = "ABC";
        BigDecimal high = new BigDecimal("20.00");
        BigDecimal low = new BigDecimal("5.00");
        String companyName = "Company Name";
        Double volume = 1000.0;
        Double change = 5.0;
        QuoteData quoteData = new QuoteData(open, price, symbol, high, low, companyName, volume, change);
        BigDecimal result = quoteData.getHigh();
        assertEquals(high, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_UNsA0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
        quoteData.setPrice(BigDecimal.valueOf(20.0));
        assertEquals(BigDecimal.valueOf(20.0), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithOtherFields_XGhG1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol", BigDecimal.valueOf(20.0), BigDecimal.valueOf(30.0), "companyName", 100.0, 10.0);
        quoteData.setPrice(BigDecimal.valueOf(25.0));
        assertEquals(BigDecimal.valueOf(25.0), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithTwoParameters_tHDW0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL");
        assertEquals("AAPL", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithFiveParameters_cDUs1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL", new BigDecimal("30.0"), new BigDecimal("40.0"), "Apple Inc.", 100.0, 5.0);
        assertEquals("AAPL", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLow_EIVD0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC");
        quoteData.setLow(BigDecimal.valueOf(5));
        assertEquals(BigDecimal.valueOf(5), quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyName_xeAq0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "ABC");
        quoteData.setCompanyName("Company Name");
        assertEquals("Company Name", quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyNameWithNull_hQjp1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "ABC");
        quoteData.setCompanyName(null);
        assertNull(quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_zYiD0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        double volume = quoteData.getVolume();
        assertEquals(0.0, volume);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolumeWithValues_QOwu1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 100.0, 0.0);
        double volume = quoteData.getVolume();
        assertEquals(100.0, volume);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_SxWx0_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("0.10"), new BigDecimal("0.10"), "symbol");
        quoteData.setGainPercent(new BigDecimal("0.10"));
        assertEquals(new BigDecimal("0.10").setScale(2), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentNegative_srzO1_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "symbol");
        quoteData.setGainPercent(new BigDecimal("-0.10"));
        assertEquals(new BigDecimal("-0.10").setScale(2), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentZero_adfJ2_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("0.00"), new BigDecimal("0.00"), "symbol");
        quoteData.setGainPercent(new BigDecimal("0.00"));
        assertEquals(new BigDecimal("0.00").setScale(2), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentLarge_iuFe3_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "symbol");
        quoteData.setGainPercent(new BigDecimal("100.00"));
        assertEquals(new BigDecimal("100.00").setScale(2), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithTwoParameters_HHGh0_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "ABC");
        String range = quoteData.getRange();
        assertNull(range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain_NXRN0_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL");
        BigDecimal gain = quoteData.getGain();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain2_zAJQ1_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL", new BigDecimal("30.0"), new BigDecimal("5.0"), "Apple Inc", 100.0, 10.0);
        BigDecimal gain = quoteData.getGain();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenWithTwoParams_VPLD0_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("20.00"), "ABC");
        BigDecimal open = quoteData.getOpen();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLow_yPik0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC");
        BigDecimal low = quoteData.getLow();
    }
}