/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.jms.JMSContext;
import javax.jms.TextMessage;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
    private EntityManager entityManager;
    @Mock
    private EntityManager mockEntityManager;
    @InjectMocks
    private TradeSLSBBean tradeslsbbean;
    private AccountProfileDataBean accountProfileDataBean;
    private AccountDataBean accountDataBean;
    private QuoteDataBean quoteDataBean;
    private HoldingDataBean holdingDataBean;
    private OrderDataBean orderDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_GzcT0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc", 1000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(130.0), BigDecimal.valueOf(160.0), 10000.0);
        BigDecimal oldPrice = BigDecimal.valueOf(140.0);
        BigDecimal changeFactor = BigDecimal.valueOf(1.0);
        double sharesTraded = 1000.0;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChangeNullQuote_QSBC1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = null;
        BigDecimal oldPrice = BigDecimal.valueOf(140.0);
        BigDecimal changeFactor = BigDecimal.valueOf(1.0);
        double sharesTraded = 1000.0;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChangeInvalidChangeFactor_rygO2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc", 1000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(130.0), BigDecimal.valueOf(160.0), 10000.0);
        BigDecimal oldPrice = BigDecimal.valueOf(140.0);
        BigDecimal changeFactor = BigDecimal.valueOf(-1.0);
        double sharesTraded = 1000.0;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_vOeO0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryDataBean_vBhX1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryDataBean_vBhX1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryDataBean_vBhX1_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryDataBean_vBhX1_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryDataBean_vBhX1_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryDataBean_vBhX1_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryDataBean_vBhX1_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_tJBR0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterExistingAccount_upnI0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("test", "password", "fullname", "address", "email", "creditcard", new BigDecimal("100"));
        assertNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNewAccount_cMkl1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("new", "password", "fullname", "address", "email", "creditcard", new BigDecimal("100"));
        assertNotNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_lKfo0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings("testUser");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithValidInput_Ghkf0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(1.21));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithValidInput_Ghkf0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getChange(), 0.11);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithValidInput_Ghkf0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getVolume(), 100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPennyStockPrice_iaXe1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(2.22));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPennyStockPrice_iaXe1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getChange(), 1.22);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNoUpdate_maOO3_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.0), 0.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(1.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNoUpdate_maOO3_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.0), 0.0);
        assertEquals(quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNoUpdate_maOO3_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.0), 0.0);
        assertEquals(quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_sDTV4_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(null, BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(1.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_sDTV4_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(null, BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_sDTV4_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(null, BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_eFxx0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        tradeSLSBBean.cancelOrder(orderDataBean.getOrderID(), true);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderTwoPhaseFalse_YuMo1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        tradeSLSBBean.cancelOrder(orderDataBean.getOrderID(), false);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderNullOrderID_WxVs2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.cancelOrder(null, true);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_yjPm0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        AccountDataBean account = new AccountDataBean();
        Collection<OrderDataBean> orders = new ArrayList<>();
        account.setOrders(orders);
        profile.setAccount(account);
        String userID = "testUser";
        Collection<OrderDataBean> result = tradeSLSBBean.getOrders(userID);
        assertEquals(orders, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals("companyName", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(1, quoteDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(new BigDecimal("price"), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(new BigDecimal("open"), quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(new BigDecimal("low"), quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(1.0, quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(new BigDecimal("high"), quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1_10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(1.0, quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertNotNull(quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertEquals("Company ABC", quote.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertEquals(new BigDecimal("10.00"), quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertEquals(new BigDecimal("10.00"), quote.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertEquals(new BigDecimal("10.00"), quote.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertEquals(new BigDecimal("10.00"), quote.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertEquals(0, quote.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertEquals("ABC", quote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0_9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertEquals(0, quote.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_Tgib0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfile.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_Tgib0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getPassword(), updatedProfile.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_Tgib0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getFullName(), updatedProfile.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_Tgib0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_Tgib0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getEmail(), updatedProfile.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_XGxC0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean expected = new AccountProfileDataBean();
        expected.setUserID("testUserID");
        expected.setAddress("testAddress");
        expected.setCreditCard("testCreditCard");
        expected.setEmail("testEmail");
        expected.setFullName("testFullName");
        expected.setPassword("testPassword");
        expected.setAccount(new AccountDataBean());
        assertEquals(expected, tradeSLSBBean.getAccountProfileData("testUserID"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseNonExistingSymbol_Xfuy2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.pingTwoPhase("NON_EXISTING_SYMBOL");
            fail("Expected Exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_Mdef0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.orderCompleted("userID", 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuySynch_hnvN0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.buy("userID", "symbol", 1.0, TradeConfig.SYNCH);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyAsynch_ZEuY1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.buy("userID", "symbol", 1.0, TradeConfig.ASYNCH);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyAsynch2Phase_KlqS2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.buy("userID", "symbol", 1.0, TradeConfig.ASYNCH_2PHASE);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_nZND0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellHoldingNotFound_yxzo1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("userID", 2, TradeConfig.SYNCH);
        assertEquals("cancelled", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeAsynch_iobK3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeAsynch2Phase_lTWz4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_eqCL0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        HoldingDataBean expected = new HoldingDataBean();
        HoldingDataBean actual = tradeSLSBBean.getHolding(expected.getHoldingID());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_fXfJ0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(1, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_XvRY0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<OrderDataBean> results = tradeSLSBBean.getClosedOrders("testUser");
        assertEquals(results.size(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithResults_YEFn1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<OrderDataBean> results = tradeSLSBBean.getClosedOrders("testUser");
        assertEquals(results.size(), 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderFalse_groR1_eGHN0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        JMSContext queueContext = null;
        TextMessage message = null; // Initialize TextMessage to null
        message = queueContext.createTextMessage();
        message.setStringProperty("command", "neworder");
        message.setIntProperty("orderID", 2);
        message.setBooleanProperty("twoPhase", false);
        message.setText("neworder: orderID=2 runtimeMode=EJB twoPhase=false");
        message.setLongProperty("publishTime", System.currentTimeMillis());
        tradeSLSBBean.queueOrder(2, false);
        assert true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseValidSymbol_JfKP0_SPMs0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("AAPL");
            assertNotNull(quoteData);
            assertEquals("AAPL", quoteData.getSymbol());
        } catch (Exception e) {
            Log.error("TradeSLSBBean.pingTwoPhase", e);
            fail("Error occurred while testing pingTwoPhase method");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderNullOrder_cSOT0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = null;
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(null, false);
            Assertions.assertNull(result);
        } catch (Exception e) {
            Assertions.fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_DPxo2_ndhg0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(OrderDataBean.getRandomInstance().getAccount());
        order.setQuote(OrderDataBean.getRandomInstance().getQuote());
        order.setPrice(BigDecimal.valueOf(10));
        order.setQuantity(5);
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), false);
            Assertions.assertNotNull(result);
        } catch (Exception e) {
            Assertions.fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderTwoPhase_FWDM5_Lzyq0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(OrderDataBean.getRandomInstance().getAccount());
        order.setQuote(OrderDataBean.getRandomInstance().getQuote());
        order.setPrice(BigDecimal.valueOf(10));
        order.setQuantity(5);
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
            Assertions.assertNotNull(result);
        } catch (Exception e) {
            Assertions.fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryDataBean_vBhX1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getGainPercent());
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertNotNull(marketSummaryDataBean.getVolume());
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithValidInput_Ghkf0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(1.21));
        assertEquals(quoteDataBean.getChange(), 0.11);
        assertEquals(quoteDataBean.getVolume(), 100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPennyStockPrice_iaXe1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(2.22));
        assertEquals(quoteDataBean.getChange(), 1.22);
        assertEquals(quoteDataBean.getVolume(), 100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNoUpdate_maOO3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.0), 0.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(1.0));
        assertEquals(quoteDataBean.getChange(), 0.0);
        assertEquals(quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_sDTV4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(null, BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(1.0));
        assertEquals(quoteDataBean.getChange(), 0.0);
        assertEquals(quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_zUlN1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertNotNull(quoteDataBean);
        assertEquals("companyName", quoteDataBean.getCompanyName());
        assertEquals(1, quoteDataBean.hashCode());
        assertEquals(new BigDecimal("price"), quoteDataBean.getPrice());
        assertEquals(new BigDecimal("open"), quoteDataBean.getOpen());
        assertEquals(new BigDecimal("low"), quoteDataBean.getLow());
        assertEquals(1.0, quoteDataBean.getChange(), 0.0);
        assertEquals(new BigDecimal("high"), quoteDataBean.getHigh());
        assertEquals("symbol", quoteDataBean.getSymbol());
        assertEquals(1.0, quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jGpY0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal("10.00"));
        assertNotNull(quote);
        assertEquals("Company ABC", quote.getCompanyName());
        assertEquals(new BigDecimal("10.00"), quote.getPrice());
        assertEquals(new BigDecimal("10.00"), quote.getOpen());
        assertEquals(new BigDecimal("10.00"), quote.getLow());
        assertEquals(new BigDecimal("10.00"), quote.getHigh());
        assertEquals(0, quote.getChange(), 0.0);
        assertEquals("ABC", quote.getSymbol());
        assertEquals(0, quote.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_Tgib0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfile.getAddress());
        assertEquals(profileData.getPassword(), updatedProfile.getPassword());
        assertEquals(profileData.getFullName(), updatedProfile.getFullName());
        assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
        assertEquals(profileData.getEmail(), updatedProfile.getEmail());
    }
}