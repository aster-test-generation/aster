/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
    private EntityManager entityManager;
    @Mock
    private EntityManager mockEntityManager;
    @InjectMocks
    private TradeSLSBBean tradeslsbbean;
    private AccountProfileDataBean accountProfileDataBean;
    private AccountDataBean accountDataBean;
    private QuoteDataBean quoteDataBean;
    private HoldingDataBean holdingDataBean;
    private OrderDataBean orderDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_IiOy0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            double result = tradeSLSBBean.investmentReturn(100, 120);
            assertEquals(0.2, result, 0.01);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderNullOrder_cSOT0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = null;
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(null, false);
            Assertions.assertNull(result);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_SAum0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int result = tradeSLSBBean.getImpl();
        assertEquals(TradeConfig.EJB3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyException_tBFP3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("userID", "symbol", 1.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithException_seEZ2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.getClosedOrders("testUser");
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertEquals(e.getMessage(), "TradeSLSBBean.getClosedOrders - error");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_DPxo2_ndhg0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(OrderDataBean.getRandomInstance().getAccount());
        order.setQuote(OrderDataBean.getRandomInstance().getQuote());
        order.setPrice(BigDecimal.valueOf(10));
        order.setQuantity(5);
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), false);
            Assertions.assertNotNull(result);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderTwoPhase_FWDM5_Lzyq0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(OrderDataBean.getRandomInstance().getAccount());
        order.setQuote(OrderDataBean.getRandomInstance().getQuote());
        order.setPrice(BigDecimal.valueOf(10));
        order.setQuantity(5);
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
            Assertions.assertNotNull(result);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_OjjR0_JWED0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        assert true;
    }
}