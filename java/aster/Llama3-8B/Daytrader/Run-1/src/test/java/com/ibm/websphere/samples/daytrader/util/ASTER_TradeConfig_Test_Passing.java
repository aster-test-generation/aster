/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_awxz0() {
        Random random = new Random();
        float result = TradeConfig.rndFloat(10);
        assert result >= 0 && result <= 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_waHD1() {
        assertEquals(1, TradeConfig.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRunTimeMode_zgbY0() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setRunTimeMode(1);
        assertEquals(1, tradeConfig.getRunTimeMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetJDBCDriverNeedsGlobalTransation_NSfA0() {
        TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
        assertEquals(true, TradeConfig.getJDBCDriverNeedsGlobalTransation());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetJDBCDriverNeedsGlobalTransationFalse_TShH1() {
        TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
        assertEquals(false, TradeConfig.getJDBCDriverNeedsGlobalTransation());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDisplayOrderAlertsTrue_QzeR0() {
        TradeConfig.setDisplayOrderAlerts(true);
        assertEquals(true, TradeConfig.getDisplayOrderAlerts());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDisplayOrderAlertsFalse_tdIl1() {
        TradeConfig.setDisplayOrderAlerts(false);
        assertEquals(false, TradeConfig.getDisplayOrderAlerts());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_IANv0_1() {
        String result = TradeConfig.rndFullName();
        String[] parts = result.split(":");
        assertEquals("first", parts[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_HOLDINGS_FVlL0() {
        TradeConfig config = new TradeConfig();
        config.setMAX_HOLDINGS(10);
        assertEquals(10, config.getMAX_HOLDINGS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_QUOTES_yKYG10000() {
        assertEquals(10000, TradeConfig.getMAX_QUOTES());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongRun_vjXe0() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean result = TradeConfig.getLongRun();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPublishQuotePriceChange_ttIo0() {
        TradeConfig.setPublishQuotePriceChange(true);
        assertEquals(true, TradeConfig.getPublishQuotePriceChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderProcessingMode_nyAb0() {
        TradeConfig config = new TradeConfig();
        config.setOrderProcessingMode(1);
        assertEquals(1, config.getOrderProcessingMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDisplayOrderAlertsTrue_pObI0() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean result = TradeConfig.getDisplayOrderAlerts();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_WmrB100() {
        assertEquals(100, TradeConfig.getListQuotePriceChangeFrequency());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUpdateQuotePricesTrue_kERE0() {
        TradeConfig.setUpdateQuotePrices(true);
        assertEquals(true, TradeConfig.getUpdateQuotePrices());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUpdateQuotePricesFalse_PLmY1() {
        TradeConfig.setUpdateQuotePrices(false);
        assertEquals(false, TradeConfig.getUpdateQuotePrices());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioActionNewUser_tWhX0() {
        boolean newUser = true;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('p', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_MHBo0() {
        TradeConfig config = new TradeConfig();
        config.setPrimIterations(5);
        assertEquals(5, config.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserID_hHCy0() {
        String userID = TradeConfig.nextUserID();
        assertEquals("uid:0", userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUpdateQuotePricesTrue_IjIW0() {
        TradeConfig tradeConfig = new TradeConfig();
        assertTrue(TradeConfig.getUpdateQuotePrices());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUpdateQuotePricesFalse_YgWS1() {
        TradeConfig tradeConfig = new TradeConfig();
        assertFalse(TradeConfig.getUpdateQuotePrices());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetScenarioCount_bZZl0() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(5);
        assertEquals(5, TradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongRunTrue_lMiy0() {
        TradeConfig.setLongRun(true);
        assertEquals(true, TradeConfig.getLongRun());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongRunFalse_Hgys1() {
        TradeConfig.setLongRun(false);
        assertEquals(false, TradeConfig.getLongRun());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_zcNF0() {
        Random random = new Random();
        int i = 10;
        int result = TradeConfig.rndInt(i);
        assert result >= 0 && result <= i;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandom_tMyh0() {
        Random randomNumberGenerator = new Random();
        double result = TradeConfig.random();
        assert result >= 0.0 && result <= 1.0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_DSga0() {
        assertEquals(0, TradeConfig.getOrderProcessingMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactorNegative_gYnI1() {
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(true, result.doubleValue() < 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactorOne_NhoC2() {
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(false, result.compareTo(BigDecimal.ONE) == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeMode_oiMc1() {
        assertEquals(1, TradeConfig.getRunTimeMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBigDecimal_KIkV0() {
        Random random = new Random();
        float f = 10.0f;
        BigDecimal result = TradeConfig.rndBigDecimal(f);
        assert result.setScale(2, BigDecimal.ROUND_HALF_UP).floatValue() >= 0.0f && result.setScale(2, BigDecimal.ROUND_HALF_UP).floatValue() <= f;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWebInterface_eIgx0() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setWebInterface(10);
        assertEquals(10, tradeConfig.getWebInterface());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBalance_gQwB0() {
        String result = TradeConfig.rndBalance();
        assertEquals("1000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBalance_zgij0_ltrq1() {
        TradeConfig tradeConfig = new TradeConfig();
        String result = tradeConfig.rndBalance();
        assertEquals("1000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIncrementSellDeficit_wanC0_xnMW1() {
        TradeConfig tradeConfig = new TradeConfig();
        assertEquals("1000000", tradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioActionRNDInt_blZm4_lGNd0() {
        boolean newUser = false;
        int r = 50;
        int i = 0;
        int sum = 0;
        while (sum <= r) {
            i++;
            sum += 1; // Assuming scenarioMixes[0][i] is always 1
        }
        String result = TradeConfig.rndBalance(); // Assuming rndBalance returns a String
        assertEquals("1000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserIDAfterMaxUsers_LBbD1_RHnU0() {
        String userID = TradeConfig.rndBalance();
        for (int i = 1; i < 1000000; i++) {
            TradeConfig.rndBalance();
        }
        String userIDAfterMaxUsers = TradeConfig.rndBalance();
        assertEquals("1000000", userIDAfterMaxUsers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTES_qDyR0_hlcu1() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setMAX_QUOTES(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamEmptyParm_YIxf1_GFUT1() {
        TradeConfig.setConfigParam("", "value");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamNullValue_Uthf2_xbmV1() {
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamOrderProcessingMode_NgtR3_gOJB0() {
        TradeConfig.setConfigParam("orderProcessingMode", "value");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamAccessMode_AFmA4_mBvL0() {
        TradeConfig.setConfigParam("accessMode", "value");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamWebInterface_nkVG5_Ddoy0() {
        TradeConfig.setConfigParam("WebInterface", "value");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamMaxQuotes_Mxsv7_jEwe1() {
        TradeConfig.setConfigParam("maxQuotes", "1");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamInvalidParm_bMBw9_OASX0() {
        TradeConfig.setConfigParam("invalidParm", "value");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamNullParmOrderProcessingMode_LWfN10_NMjO1() {
        TradeConfig.setConfigParam(null, "orderProcessingMode");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamEmptyParmOrderProcessingMode_QOGB11_eNDB1() {
        TradeConfig.setConfigParam("", "orderProcessingMode");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamNullValueOrderProcessingMode_zsCp12_sYCl1() {
        TradeConfig.setConfigParam("orderProcessingMode", null);
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamInvalidValueOrderProcessingMode_sDxh13_Iiuu0() {
        TradeConfig.setConfigParam("orderProcessingMode", "invalidValue");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamNullParmAccessMode_tASM14_uaDR0() {
        TradeConfig.setConfigParam(null, "accessMode");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamEmptyParmAccessMode_PDDL15_BaAC0() {
        TradeConfig.setConfigParam("", "accessMode");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParamInvalidValueAccessMode_wrop17_eWwC0() {
        TradeConfig.setConfigParam("accessMode", "invalidValue");
        assertEquals("1000000", TradeConfig.rndBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndCreditCard_ZXul0_dsod1() {
        String expected = "1000000";
        assertEquals(expected, TradeConfig.rndBalance());
    }
}