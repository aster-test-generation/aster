/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

public class Aster_MarketSummaryWebSocket_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnMarketSummarytUpdateNull_ATjr2_mhav0() {
        TradeServices services = mock(TradeServices.class);
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket((Instance<TradeServices>) services);
        String event = null;
        try {
            marketSummaryWebSocket.onMarketSummarytUpdate(event);
            fail("Expected exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSendMarketSummaryUpdateRecentQuotePriceChange_DHqm1_PBEK1() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket(null);
        ActionMessage actionMessage = new ActionMessage();
        actionMessage.doDecoding("updateRecentQuotePriceChange");
        marketSummaryWebSocket.sendMarketSummary(actionMessage, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSendMarketSummaryInvalidAction_FOqj3_koSL0() {
        TradeServices services = mock(TradeServices.class);
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket((Instance<TradeServices>) services);
        ActionMessage actionMessage = new ActionMessage();
        actionMessage.doDecoding("invalidAction");
        marketSummaryWebSocket.sendMarketSummary(actionMessage, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnStockChange_NoSession_mLZh2_sLPb0() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        Iterator<Session> iterator = mock(Iterator.class);
        when(iterator.hasNext()).thenReturn(false);
        marketSummaryWebSocket.onOpen(null, null);
        verifyNoMoreInteractions(marketSummaryWebSocket);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnStockChange_NoSession_mLZh2_sLPb0_fid1() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        Iterator<Session> iterator = mock(Iterator.class);
        when(iterator.hasNext()).thenReturn(false);
        marketSummaryWebSocket.onOpen(null, null);
        verifyNoInteractions(marketSummaryWebSocket);
    }
}