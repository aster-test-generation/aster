/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Failing {
    private TradeServices tAction;
    private TradeServletAction tradeservletaction;
    private HttpServletRequest httpservletrequest;
    private TradeServletAction tradeServletAction;
    private HttpServletRequest httpServletRequest;
    private HttpServletResponse httpServletResponse;
    private ServletContext servletContext;
    private String userID;
    private String symbols;
    private HttpSession httpsession;
    @Mock
    TradeServices tradeServices;
    @Mock
    HttpServletResponse httpResponse;
    @Mock
    HttpServletRequest httpRequest;
    private String symbol;
    private String quantity;
    private String password = "testPassword";
    private String cpassword = "testPassword";
    private String fullName = "testFullName";
    private String address = "testAddress";
    private String creditcard = "testCreditcard";
    private String email = "testEmail";
    private AccountProfileDataBean accountProfileData;
    private Integer holdingID;
    private OrderDataBean orderData;
    private String passwd = "testPass";
    private String cpasswd = "testPass";
    private String fullname = "Test Fullname";
    private String ccn = "1234567890123456";
    private String openBalanceString = "100.00";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogoutSessionInvalidation_UqRI3_kFRs0() throws ServletException, IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = null;
        String userID = "testUser";
        action.doLogout(ctx, req, resp, userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoMarketSummary_jOZF0_CsDo0() throws ServletException, IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        String userID = "testUser";
        action.doLogin(ctx, req, resp, userID, "testPasswd");
        assertEquals("Could not find account for + testUser", req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccount_IllegalArgumentException_naga1_OwkI0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        String userID = "test";
        String results = "test results";
        try {
            tradeServletAction.doLogin(ctx, req, resp, userID, results);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("test results\nCould not find account for + test", req.getAttribute("results"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoAccountUpdate_missingInformation_LCRE0() throws Exception {
        TradeServices tradeServices = mock(TradeServices.class);
        TradeServletAction tradeservletaction = new TradeServletAction((Instance<TradeServices>) tradeServices);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        ServletContext servletContext = mock(ServletContext.class);
        AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullName, address, email, creditcard);
        when(httpservletrequest.getParameter("password")).thenReturn(password);
        when(httpservletrequest.getParameter("cpassword")).thenReturn(password);
        tradeservletaction.doAccountUpdate(servletContext, httpservletrequest, httpservletresponse, userID, password, cpassword, "", "", "", "");
        verify(tradeServices, never()).updateAccountProfile(accountProfileData);
        verify(httpservletrequest).setAttribute("results", "Update profile error: please fill in all profile information fields");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoAccountUpdate_updateSuccessful_UZxD0() throws Exception {
        TradeServices tradeServices = mock(TradeServices.class);
        TradeServletAction tradeservletaction = new TradeServletAction((Instance<TradeServices>) tradeServices);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        ServletContext servletContext = mock(ServletContext.class);
        AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullName, address, email, creditcard);
        when(httpservletrequest.getParameter("password")).thenReturn(password);
        when(httpservletrequest.getParameter("cpassword")).thenReturn(password);
        tradeservletaction.doAccountUpdate(servletContext, httpservletrequest, httpservletresponse, userID, password, cpassword, fullName, address, creditcard, email);
        verify(tradeServices).updateAccountProfile(accountProfileData);
        verify(httpservletrequest).setAttribute("results", "Account profile update successful");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoSell_IllegalArgumentException_sbbK1_rXaz0() throws ServletException, IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        String userID = "testUser";
        Integer holdingID = null;
        try {
            action.doLogin(ctx, req, resp, userID, "testPasswd");
            action.doSell(ctx, req, resp, userID, holdingID);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        } catch (ServletException e) {
            fail("Expected IllegalArgumentException instead of ServletException");
        } catch (IOException e) {
            fail("Expected IllegalArgumentException instead of IOException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoRegisterValidInput_PsBq0_ocKH0() throws ServletException, IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        String userID = "testUser";
        String passwd = "testPass";
        String cpasswd = "testPass";
        String fullname = "Test User";
        String ccn = "1234567890123456";
        String openBalanceString = "100.00";
        String email = "testuser@example.com";
        String address = "Test Address";
        try {
            action.doLogin(ctx, req, resp, userID, passwd);
            String results = req.getAttribute("results").toString();
            assertEquals("Ready to Trade", results);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoRegisterInvalidPassword_nffN1_rAPG0() throws ServletException, IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        String userID = "testUser";
        String passwd = "testPass";
        String cpasswd = "wrongPass";
        String fullname = "Test User";
        String ccn = "1234567890123456";
        String openBalanceString = "100.00";
        String email = "testuser@example.com";
        String address = "Test Address";
        try {
            action.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
            String results = req.getAttribute("results").toString();
            assertEquals("Registration operation failed, your passwords did not match", results);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoRegisterInvalidInput_QHQX2_PArA0() throws ServletException, IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        String userID = "testUser";
        String passwd = "";
        String cpasswd = "testPass";
        String fullname = "Test User";
        String ccn = "1234567890123456";
        String openBalanceString = "100.00";
        String email = "testuser@example.com";
        String address = "Test Address";
        try {
            action.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
            String results = req.getAttribute("results").toString();
            assertEquals("Registration operation failed", results);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoLogin_validLogin_YBoN0() throws Exception {
        TradeServices tradeServices = mock(TradeServices.class);
        Instance<TradeServices> instance = mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        TradeServletAction tradeservletaction = new TradeServletAction(instance);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpSession httpsession = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        String userID = "testUser";
        String passwd = "testPass";
        String results = "";
        when(tradeServices.login(userID, passwd)).thenReturn(new AccountDataBean());
        when(httpservletrequest.getSession(any())).thenReturn(httpsession);
        when(httpsession.getAttribute("uidBean")).thenReturn(userID);
        when(httpsession.getAttribute("sessionCreationDate")).thenReturn(new java.util.Date());
        tradeservletaction.doLogin(servletContext, httpservletrequest, httpservletresponse, userID, passwd);
        verify(httpsession).setAttribute("uidBean", userID);
        verify(httpsession).setAttribute("sessionCreationDate", any());
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoLogin_invalidLogin_iiFj0() throws Exception {
        TradeServices tradeServices = mock(TradeServices.class);
        Instance<TradeServices> instance = mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        TradeServletAction tradeservletaction = new TradeServletAction(instance);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpSession httpsession = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        String userID = "testUser";
        String passwd = "testPass";
        String results = "";
        when(tradeServices.login(userID, passwd)).thenReturn(null);
        tradeservletaction.doLogin(servletContext, httpservletrequest, httpservletresponse, userID, passwd);
        verify(httpsession, never()).setAttribute("uidBean", userID);
        verify(httpsession, never()).setAttribute("sessionCreationDate", any());
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoLogin_IllegalArgumentException_EEGx0() throws Exception {
        TradeServices tAction = mock(TradeServices.class);
        Instance<TradeServices> instance = mock(Instance.class);
        when(instance.get()).thenReturn(tAction);
        TradeServletAction tradeservletaction = new TradeServletAction(instance);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpSession httpsession = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        String userID = "testUser";
        String passwd = "testPass";
        String results = "";
        when(tAction.login(userID, passwd)).thenThrow(new IllegalArgumentException("Test exception"));
        tradeservletaction.doLogin(servletContext, httpservletrequest, httpservletresponse, userID, passwd);
        verify(httpsession, never()).setAttribute("uidBean", userID);
        verify(httpsession, never()).setAttribute("sessionCreationDate", any());
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoLogin_Exception_QlWq0() throws Exception {
        TradeServices tAction = mock(TradeServices.class);
        Instance<TradeServices> instance = mock(Instance.class);
        when(instance.get()).thenReturn(tAction);
        TradeServletAction tradeservletaction = new TradeServletAction(instance);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpSession httpsession = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        String userID = "testUser";
        String passwd = "testPass";
        String results = "";
        when(tAction.login(userID, passwd)).thenThrow(new Exception("Test exception"));
        tradeservletaction.doLogin(servletContext, httpservletrequest, httpservletresponse, userID, passwd);
        verify(httpsession, never()).setAttribute("uidBean", userID);
        verify(httpsession, never()).setAttribute("sessionCreationDate", any());
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginFailure_wEJq1_bNot0() throws ServletException, IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        String userID = "invalidUser";
        String passwd = "testPass";
        action.doLogin(ctx, req, resp, userID, passwd);
        assertEquals("Could not find account for + " + userID, req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginIllegalArgument_SkaB2_IqgQ0() throws ServletException, IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        String userID = "testUser";
        String passwd = "testPass";
        try {
            action.doLogin(ctx, req, resp, userID, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalStateException e) {
            assertEquals("illegal argument: null", req.getAttribute("results"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogoutSessionInvalidation_UqRI3_kFRs0_fid1() throws ServletException, IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = null;
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        String userID = "testUser";
        HttpSession session = req.getSession();
        session.invalidate();
        action.doLogout(ctx, req, resp, userID);
    }
}