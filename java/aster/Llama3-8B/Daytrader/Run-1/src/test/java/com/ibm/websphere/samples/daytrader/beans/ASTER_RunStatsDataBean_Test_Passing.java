/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTradeUserCount_CtxI0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 0;
        int actual = runStatsDataBean.getTradeUserCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_UCxC0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(10);
        assertEquals(10, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCount_yycF1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(10);
        assertEquals(10, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCount_vGUd0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(10);
        assertEquals(10, runStatsDataBean.getTradeUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBuyOrderCount_FAra1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 0;
        int actual = runStatsDataBean.getBuyOrderCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_Stdn1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int result = runStatsDataBean.getOrderCount();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_cjOd0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 0;
        int actual = runStatsDataBean.getNewUserCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenOrderCount_enlc0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(10);
        assertEquals(10, runStatsDataBean.getOpenOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_jyrN0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(10);
        assertEquals(10, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCount_sNmY1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(10);
        assertEquals(10, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingCount_mnjo0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        assert runStatsDataBean.getHoldingCount() == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCancelledOrderCount_wMYz0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 0;
        int actual = runStatsDataBean.getCancelledOrderCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_wQpx1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(10);
        assertEquals(10, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ELcy0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        String result = runStatsDataBean.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithValues_NONa1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(10);
        runStatsDataBean.setNewUserCount(5);
        runStatsDataBean.setSumLoginCount(20);
        runStatsDataBean.setSumLogoutCount(15);
        runStatsDataBean.setHoldingCount(8);
        runStatsDataBean.setOrderCount(12);
        runStatsDataBean.setBuyOrderCount(6);
        runStatsDataBean.setSellOrderCount(4);
        runStatsDataBean.setCancelledOrderCount(2);
        runStatsDataBean.setOpenOrderCount(9);
        runStatsDataBean.setDeletedOrderCount(3);
        String result = runStatsDataBean.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTradeStockCount_pWui1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 0;
        int actual = runStatsDataBean.getTradeStockCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeletedOrderCount_nLlJ0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSumLogoutCount_osXo0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 0;
        int actual = runStatsDataBean.getSumLogoutCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewUserCount_hIXg1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(10);
        assertEquals(10, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderCount_VHJh0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(10);
        assertEquals(10, runStatsDataBean.getOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSumLoginCount_jWyk0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 0;
        int actual = runStatsDataBean.getSumLoginCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLogoutCount_yseV1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(10);
        assertEquals(10, runStatsDataBean.getSumLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCount_tBGh0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 0;
        int actual = runStatsDataBean.getHoldingCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCount_Irxh0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int result = runStatsDataBean.getSellOrderCount();
        assert result == 0;
    }
}