/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.util.Properties;
import javax.servlet.ServletContextEvent;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockServletContext;
public class Aster_TradeWebContextListener_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContextInitialized_RuntimeModeEnv_OzAr1() {
        System.setProperty("RUNTIME_MODE", "1");
        TradeWebContextListener listener = new TradeWebContextListener();
        ServletContextEvent event = new ServletContextEvent(new MockServletContext());
        listener.contextInitialized(event);
        assertEquals(1, TradeConfig.getRunTimeMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContextInitialized_RuntimeModeProperty_rYBP2() {
        Properties prop = new Properties();
        prop.setProperty("runtimeMode", "2");
        TradeWebContextListener listener = new TradeWebContextListener();
        ServletContextEvent event = new ServletContextEvent(new MockServletContext());
        event.getServletContext().setAttribute("daytrader.properties", prop);
        listener.contextInitialized(event);
        assertEquals(2, TradeConfig.getRunTimeMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContextInitialized_OrderProcessingModeEnv_kEJY4() {
        System.setProperty("ORDER_PROCESSING_MODE", "1");
        TradeWebContextListener listener = new TradeWebContextListener();
        ServletContextEvent event = new ServletContextEvent(new MockServletContext());
        listener.contextInitialized(event);
        assertEquals(1, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContextInitialized_OrderProcessingModeProperty_gndY5() {
        Properties prop = new Properties();
        prop.setProperty("orderProcessingMode", "2");
        TradeWebContextListener listener = new TradeWebContextListener();
        ServletContextEvent event = new ServletContextEvent(new MockServletContext());
        event.getServletContext().setAttribute("daytrader.properties", prop);
        listener.contextInitialized(event);
        assertEquals(2, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContextInitialized_MAX_USERSEnv_wpaN7() {
        System.setProperty("MAX_USERS", "10");
        TradeWebContextListener listener = new TradeWebContextListener();
        ServletContextEvent event = new ServletContextEvent(new MockServletContext());
        listener.contextInitialized(event);
        assertEquals(10, TradeConfig.getMAX_USERS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContextInitialized_MAX_USERSProperty_SGVL8() {
        Properties prop = new Properties();
        prop.setProperty("maxUsers", "20");
        TradeWebContextListener listener = new TradeWebContextListener();
        ServletContextEvent event = new ServletContextEvent(new MockServletContext());
        event.getServletContext().setAttribute("daytrader.properties", prop);
        listener.contextInitialized(event);
        assertEquals(20, TradeConfig.getMAX_USERS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContextInitialized_MAX_QUOTESEnv_nkfC10() {
        System.setProperty("MAX_QUOTES", "10");
        TradeWebContextListener listener = new TradeWebContextListener();
        ServletContextEvent event = new ServletContextEvent(new MockServletContext());
        listener.contextInitialized(event);
        assertEquals(10, TradeConfig.getMAX_QUOTES());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContextInitialized_MAX_QUOTESProperty_aeVz11() {
        Properties prop = new Properties();
        prop.setProperty("maxQuotes", "20");
        TradeWebContextListener listener = new TradeWebContextListener();
        ServletContextEvent event = new ServletContextEvent(new MockServletContext());
        event.getServletContext().setAttribute("daytrader.properties", prop);
        listener.contextInitialized(event);
        assertEquals(20, TradeConfig.getMAX_QUOTES());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testContextInitialized_OrderProcessingMode_etDI3_TrMD0() {
    TradeWebContextListener listener = new TradeWebContextListener();
    ServletContextEvent event = new ServletContextEvent(new MockServletContext());
    listener.contextInitialized(event);
    assertEquals(TradeConfig.getOrderProcessingModeNames()[TradeConfig.getOrderProcessingMode()], "Normal");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testContextInitialized_PublishQuotePriceChange_EMTu12_wGnN0() {
    TradeWebContextListener listener = new TradeWebContextListener();
    ServletContextEvent event = new ServletContextEvent(new MockServletContext());
    listener.contextInitialized(event);
    assertEquals(Boolean.parseBoolean(System.getProperty("PUBLISH_QUOTE_PRICE_CHANGE")), TradeConfig.getPublishQuotePriceChange());
}
}