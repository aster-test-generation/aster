/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.util.ArrayList;
import java.util.Date;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AccountDataJSF_Coverage_Test_Passing {
  private OrderData[] closedOrders;
  private ExternalContext context;
  private TradeServices tradeAction;
  AccountDataJSF accountDataJSF;
  HttpSession httpSession;
  ExternalContext externalContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_DYVT1() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    when(tradeAction.getAccountData("userID")).thenReturn(new AccountDataBean());
    accountDataJSF.home();
    verify(tradeAction).getAccountData("userID");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_dkuD2() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    when(tradeAction.getHoldings("userID")).thenReturn(new ArrayList<>());
    accountDataJSF.home();
    verify(tradeAction).getHoldings("userID");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_poKj3() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    when(tradeAction.getClosedOrders("userID")).thenReturn(new ArrayList<>());
    accountDataJSF.home();
    verify(tradeAction).getClosedOrders("userID");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetClosedOrders_YuFE4() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    OrderData[] orderData = new OrderData[1];
    accountDataJSF.setClosedOrders(orderData);
    verify(httpSession).setAttribute("closedOrders", orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_tjWh5() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    when(tradeAction.getOrders("userID")).thenReturn(new ArrayList<>());
    accountDataJSF.home();
    verify(tradeAction).getOrders("userID");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAllOrders_YtIC6() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    OrderData[] orderData = new OrderData[1];
    accountDataJSF.setAllOrders(orderData);
    verify(httpSession).setAttribute("orderDataBeans", orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberOfOrders_CxzZ7() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    accountDataJSF.setNumberOfOrders(1);
    verify(httpSession).setAttribute("numberOfOrders", 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSessionCreationDate_sjiB8() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    Date date = new Date();
    accountDataJSF.setSessionCreationDate(date);
    verify(httpSession).setAttribute("sessionCreationDate", date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCurrentTime_GAye9() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    Date date = new Date();
    accountDataJSF.setCurrentTime(date);
    verify(httpSession).setAttribute("currentTime", date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHome_yZRM11() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("userID");
    accountDataJSF.home();
    verify(accountDataJSF).home();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSession_qoYb12() throws Exception {
    when(externalContext.getSession(any())).thenReturn(httpSession);
    accountDataJSF.home();
    verify(externalContext).getSession(true);
  }
}