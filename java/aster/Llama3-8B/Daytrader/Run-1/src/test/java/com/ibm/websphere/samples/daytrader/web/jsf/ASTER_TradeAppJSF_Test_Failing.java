/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppJSF_Test_Failing {
    private TradeServices tradeAction;
    private String userID = "uid:0";
    TradeAppJSF tradeappjsf;
    HttpSession httpsession;
    ExternalContext externalcontext;
    HttpServletRequest httpservletrequest;
    private String password = "xxx";
    private String email;
    private String money;
    private String fullname;
    private String address;
    private String ccn;
    private String cpassword;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testlogin_validCredentials() throws Exception {
        tradeAction = mock(TradeServices.class);
        httpsession = mock(HttpSession.class);
        externalcontext = mock(ExternalContext.class);
        tradeappjsf = new TradeAppJSF(mock(Instance.class));
        AccountDataBean accountData = mock(AccountDataBean.class);
        AccountProfileDataBean accountProfileData = mock(AccountProfileDataBean.class);
        when(tradeAction.login(userID, password)).thenReturn(accountData);
        when(tradeAction.getAccountProfileData(userID)).thenReturn(accountProfileData);
        String result = tradeappjsf.login();
        verify(httpsession).setAttribute("uidBean", userID);
        verify(httpsession).setAttribute("sessionCreationDate", any());
        assertEquals("Ready to Trade", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testlogin_invalidCredentials() throws Exception {
        tradeAction = mock(TradeServices.class);
        httpsession = mock(HttpSession.class);
        externalcontext = mock(ExternalContext.class);
        tradeappjsf = new TradeAppJSF(mock(Instance.class));
        when(tradeAction.login(userID, password)).thenReturn(null);
        String result = tradeappjsf.login();
        verify(httpsession, never()).setAttribute("uidBean", userID);
        verify(httpsession, never()).setAttribute("sessionCreationDate", any());
        assertEquals("welcome", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testlogin_exception() throws Exception {
        tradeAction = mock(TradeServices.class);
        httpsession = mock(HttpSession.class);
        externalcontext = mock(ExternalContext.class);
        tradeappjsf = new TradeAppJSF(mock(Instance.class));
        doThrow(new Exception()).when(tradeAction).login(userID, password);
        String result = tradeappjsf.login();
        verify(httpsession, never()).setAttribute("uidBean", userID);
        verify(httpsession, never()).setAttribute("sessionCreationDate", any());
        assertEquals("welcome", result);
    }
}