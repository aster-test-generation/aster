/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeDirectDBUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckDBProductName_Bdhi0() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Connection conn = mock(Connection.class);
        DatabaseMetaData dbmd = mock(DatabaseMetaData.class);
        when(conn.getMetaData()).thenReturn(dbmd);
        when(dbmd.getDatabaseProductName()).thenReturn("TestDBProductName");
        String dbProductName = tradeDirectDBUtils.checkDBProductName();
        assertEquals("TestDBProductName", dbProductName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckDBProductNameSQLException_ifLW1() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Connection conn = mock(Connection.class);
        DatabaseMetaData dbmd = mock(DatabaseMetaData.class);
        SQLException e = mock(SQLException.class);
        when(conn.getMetaData()).thenThrow(e);
        try {
            tradeDirectDBUtils.checkDBProductName();
            fail("Expected SQLException");
        } catch (SQLException ex) {
            assertEquals(e, ex);
        }
    }
}