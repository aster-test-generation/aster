/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfigJSF_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildDatabaseTablesNullDBProductName_zJIc0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.buildDatabaseTables();
        assertEquals("database", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_BXOx0_OKyH0() {
    RunStatsDataBean runStatsData = new RunStatsDataBean();
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String result = ""; // declare the variable
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_OrderProcessingMode_ZFgs2_dELr1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables();
    tradeConfigJSF.setOrderProcessingMode("OrderProcessingMode1");
    assertEquals("OrderProcessingMode1", tradeConfigJSF.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_ListQuotePriceChangeFrequency_ndKf11_OccR0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables(); // This method is under test
    assertEquals("database", tradeConfigJSF.buildDatabaseTables());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_LongRun_xKLi12_leCR0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.updateConfig();
    assertEquals("database", tradeConfigJSF.buildDatabaseTables());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_DisplayOrderAlerts_JLQl13_Ulyo1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables();
    tradeConfigJSF.setDisplayOrderAlerts(true);
    assertEquals(true, tradeConfigJSF.isDisplayOrderAlerts());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildDatabaseTablesSuccess_neQZ11_yktY0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    assertEquals("database", tradeConfigJSF.buildDatabaseTables());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_RuntimeMode_kAts0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.updateConfig();
        assertEquals("DayTrader Configuration Updated", tradeConfigJSF.getResult());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_WebInterface_BrhD4_gqIo0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_MAX_USERS_gTGE6_GuHp0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_MAX_QUOTES_EUAY7_sbCX1_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.updateConfig();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_PrimIterations_oJtA9_TdoD0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(40);
    tradeConfigJSF.updateConfig();
    assertEquals("DayTrader Configuration Updated", tradeConfigJSF.getResult());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_MarketSummaryInterval_pNOi8_CYQK0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables();
    assertEquals("TradeBuildDB: **** Unable to check DB Product name, please check Database/AppServer configuration and retry ****<br/>", tradeConfigJSF.getResult());
}
}