/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedThread_Test_Passing {
    private static int hitCount;
    private static String initTime;
    @Mock
    private ServletConfig servletConfig;
    @Mock
    private HttpServlet httpServlet;
    private PingManagedThread pingmanagedthread;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    private ManagedThreadFactory managedThreadFactory;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingmanagedthread = new PingManagedThread();
        when(httpservletrequest.getMethod()).thenReturn("POST");
        pingmanagedthread.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
        verify(httpservletresponse).setContentType("text/plain");
        verify(servletoutputstream).write("Hello, World!".getBytes());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_GrGe0() {
        PingManagedThread pingManagedThread = new PingManagedThread();
        String result = pingManagedThread.getServletInfo();
        assertEquals("Tests a ManagedThread asynchronous servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        managedThreadFactory = mock(ManagedThreadFactory.class);
        initTime = "2022-01-01 00:00:00";
        hitCount = 0;
        pingmanagedthread = new PingManagedThread();
        when(httpservletrequest.startAsync()).thenReturn(mock(AsyncContext.class));
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        when(managedThreadFactory.newThread(any(Runnable.class))).thenReturn(mock(Thread.class));
        pingmanagedthread.doGet(httpservletrequest, httpservletresponse);
        verify(servletoutputstream).println("Init time : " + initTime);
        verify(servletoutputstream).println("<b>HitCount: 1</b><br/>");
        verify(httpservletresponse).sendError(500, anyString());
    }
}