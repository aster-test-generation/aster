/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.json.Json;
import javax.json.JsonBuilderFactory;
import javax.json.JsonReaderFactory;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObjectFactory_Test_Passing {
    private PingJSONPObjectFactory pingjsonpobjectfactory;
    private HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    private static JsonBuilderFactory jSONObjectFactory = Json.createBuilderFactory(null);
    private static JsonReaderFactory jSONReaderFactory = Json.createReaderFactory(null);
    private static int hitCount;
    private static String initTime;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_QyoZ0() {
        PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
        String result = factory.getServletInfo();
        assertEquals("Basic JSON generation and parsing in a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_BzPw0() throws Exception {
        HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        ServletOutputStream servletoutputstream = mock(ServletOutputStream.class);
        PingJSONPObjectFactory pingjsonpobjectfactory = new PingJSONPObjectFactory();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingjsonpobjectfactory.doGet(httpServletRequest, httpservletresponse);
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
        verify(servletoutputstream).println(anyString());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_oVol0() throws Exception {
        HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        ServletOutputStream servletoutputstream = mock(ServletOutputStream.class);
        PingJSONPObjectFactory pingjsonpobjectfactory = new PingJSONPObjectFactory();
        int hitCount = 0;
        String initTime = "2022-01-01 00:00:00";
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        httpservletresponse.setContentType("text/html");
        when(httpservletresponse.getContentType()).thenReturn("text/html");
        pingjsonpobjectfactory.doGet(httpServletRequest, httpservletresponse);
        verify(servletoutputstream, times(1)).println(anyString());
        verify(servletoutputstream, times(1)).flush();
        verify(servletoutputstream, times(1)).close();
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletresponse, times(1)).sendError(500, anyString());
    }
}