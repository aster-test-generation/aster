/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)

@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
    @Mock
    TradeConfig tradeConfig;
    OrderDataBean orderdatabean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;
    @Mock
    private AccountDataBean accountDataBean;
    private OrderDataBean orderDataBean;
    private Integer orderID;
    @Mock
    private Log log;
    @Mock
    private HoldingDataBean holding;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private BigDecimal price;
    private String symbol;
    @Mock
    private AccountDataBean account;
    @Mock
    private Date openDate;
    @Mock
    private Date completionDate;


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_1() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals(Integer.valueOf(TradeConfig.rndInt(100000)), order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_2() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals(TradeConfig.rndBoolean() ? "buy" : "sell", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_3() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_4() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_5() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_6() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals(TradeConfig.rndQuantity(), order.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_7() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_8() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_9() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals(TradeConfig.rndSymbol(), order.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_10() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance1_DFhp0_11() {
        OrderDataBean order = OrderDataBean.getRandomInstance();

        assertEquals("buy", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_1() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(Integer.valueOf(TradeConfig.rndInt(100000)), order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_2() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBoolean() ? "buy" : "sell", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_3() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_4() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_5() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_6() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndQuantity(), order.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_7() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_8() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_9() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol(), order.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_10() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance2_vCEo1_11() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals("sell", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol() throws Exception {
        orderDataBean = new OrderDataBean();


        String symbol = "ABC";
        orderDataBean.setSymbol(symbol);
        assertEquals(symbol, orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_WKva0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setSymbol("ABC");
        assertEquals("ABC", orderDataBean.getSymbol());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        orderID = 1;
        orderdatabean = new OrderDataBean(orderID, "BUY", "ACTIVE", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");


        int expectedHashCode = orderID != null ? orderID.hashCode() : 0;
        assertEquals(expectedHashCode, orderdatabean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_OrderIDNotNull_GuhH0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        int result = orderDataBean.hashCode();
        assertEquals(1, result);

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_OrderIDNull_KaQT1() {
        OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        int result = orderDataBean.hashCode();
        assertEquals(0, result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setHolding(holding);


        // Act
        HoldingDataBean result = orderdatabean.getHolding();

        // Assert
        assertEquals(holding, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingNull_BHTX1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holding = orderDataBean.getHolding();
        assertEquals(null, holding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancel() throws Exception {
        orderdatabean = new OrderDataBean();


        // Act
        orderdatabean.cancel();

        // Assert
        assertEquals("cancelled", orderdatabean.getOrderStatus());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderID() throws Exception {
        orderdatabean = new OrderDataBean();


        // Arrange
        Integer expectedOrderID = 1;

        // Act
        orderdatabean.setOrderID(expectedOrderID);

        // Assert
        assertEquals(expectedOrderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID_ZcAo0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(1);
        assertEquals(1, orderDataBean.getOrderID());
    }


    private double quantity; /* quantity */
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_yUhn0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "COMPLETED", new Date(), new Date(), 10.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "AAPL");
        double result = orderDataBean.getQuantity();
        assertEquals(10.0, result);
    }
    private BigDecimal orderFee; /* price */
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderFee() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderFee(BigDecimal.valueOf(10.0));


        assertEquals(BigDecimal.valueOf(10.0), orderdatabean.getOrderFee());
    }

    private String orderType; /* orderType (buy, sell, etc.) */
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderType() {
        orderdatabean = new OrderDataBean();


        String orderType = "buy";
        orderdatabean.setOrderType(orderType);
        assertEquals(orderType, orderdatabean.getOrderType());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuote(quote);


        // Act
        QuoteDataBean result = orderdatabean.getQuote();

        // Assert
        Assertions.assertEquals(quote, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_wnRG0() {
        QuoteDataBean quote = new QuoteDataBean("AAPL");
        AccountDataBean account = new AccountDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = new OrderDataBean(1, "BUY", "COMPLETED", new Date(), new Date(), 10, BigDecimal.valueOf(100), BigDecimal.valueOf(10), "AAPL");
        QuoteDataBean result = order.getQuote();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPrice() throws Exception {
        orderdatabean = new OrderDataBean();


        BigDecimal expectedPrice = BigDecimal.valueOf(10.0);
        orderdatabean.setPrice(expectedPrice);
        assertEquals(expectedPrice, orderdatabean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_Fgwx0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = new BigDecimal("10.00");
        orderDataBean.setPrice(price);
        assertEquals(price, orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        orderdatabean = new OrderDataBean();


        // Test with same orderID
        OrderDataBean sameOrder = new OrderDataBean();
        sameOrder.setOrderID(orderdatabean.getOrderID());

        // Test with different orderID
        OrderDataBean differentOrder = new OrderDataBean();
        differentOrder.setOrderID(2);

        // Test with null orderID
        OrderDataBean nullOrder = new OrderDataBean();
        nullOrder.setOrderID(null);
        assertEquals(orderdatabean, sameOrder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        orderdatabean = new OrderDataBean();


        // Test with same orderID
        OrderDataBean sameOrder = new OrderDataBean();
        sameOrder.setOrderID(orderdatabean.getOrderID());

        // Test with different orderID
        OrderDataBean differentOrder = new OrderDataBean();
        differentOrder.setOrderID(2);

        // Test with null orderID
        OrderDataBean nullOrder = new OrderDataBean();
        nullOrder.setOrderID(null);
        assertNotEquals(orderdatabean, differentOrder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        orderdatabean = new OrderDataBean();


        // Test with same orderID
        OrderDataBean sameOrder = new OrderDataBean();
        sameOrder.setOrderID(orderdatabean.getOrderID());

        // Test with different orderID
        OrderDataBean differentOrder = new OrderDataBean();
        differentOrder.setOrderID(2);

        // Test with null orderID
        OrderDataBean nullOrder = new OrderDataBean();
        nullOrder.setOrderID(null);
        assertNotEquals(orderdatabean, nullOrder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_nJPK0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        boolean result = order.equals(order);
        assert result;

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_PMrG1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        boolean result = order.equals(null);
        assert !result;

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOrder_AZga3() {
        OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        OrderDataBean order2 = new OrderDataBean(2, "SELL", "OPEN", new Date(), new Date(), 20, new BigDecimal("20.0"), new BigDecimal("2.0"), "AAPL");
        boolean result = order1.equals(order2);
        assert !result;

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameOrder_RKiM4() {
        OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        OrderDataBean order2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        boolean result = order1.equals(order2);
        assert result;
    }
    private String orderStatus;

    /*
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderStatus() {
           orderDataBean = new OrderDataBean("BUY", "ACTIVE", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
       
            // Act
           String result = orderDataBean.getOrderStatus();
            // Assert
           assertEquals("ACTIVE", result);
       }
        @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderStatus_ZtpC0() {
           OrderDataBean orderDataBean = new OrderDataBean("BUY", "ACTIVE", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
           assertEquals("ACTIVE", orderDataBean.getOrderStatus());
       }
       private String orderStatus; /*
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus() {
           orderDataBean = new OrderDataBean();
       
            String expectedOrderStatus = "NEW";
           orderDataBean.setOrderStatus(expectedOrderStatus);
            assertEquals(expectedOrderStatus, orderDataBean.getOrderStatus());
       }
    @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOrderStatus_YzrJ0() {
       OrderDataBean orderDataBean = new OrderDataBean("Buy", "New", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
       orderDataBean.setOrderStatus("Filled");
       assertEquals("Filled", orderDataBean.getOrderStatus());
    
    @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetSymbol() {
           symbol = "ABC";
           when(quote.getSymbol()).thenReturn(symbol);
           orderdatabean.setQuote(quote);
       
            assertEquals(symbol, orderdatabean.getSymbol());
       }
    @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testGetSymbol_QuoteNotNull_GPPR0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
       orderDataBean.setQuote(quoteDataBean);
       String symbol = orderDataBean.getSymbol();
       assertEquals("AAPL", symbol);
    }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testGetSymbol_QuoteNull_qgDP1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       String symbol = orderDataBean.getSymbol();
       assertEquals("symbol", symbol);
    
       private Integer orderID; /* orderID */



    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_KzwI0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "COMPLETED", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(10.0), "AAPL");
        assertEquals(1, orderDataBean.getOrderID());

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderIDWithNull_LpfE1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertEquals(null, orderDataBean.getOrderID());

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("open");


        boolean result = orderdatabean.isOpen();
        Mockito.verify(orderdatabean).getOrderStatus();
        Assertions.assertTrue(result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_bYkB0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "COMPLETED", new java.util.Date(), new java.util.Date(), 10.0, new java.math.BigDecimal("10.0"), new java.math.BigDecimal("1.0"), "AAPL");
        assertEquals("Order 1\n\t      orderType: BUY\n\t    orderStatus: COMPLETED\n\t       openDate: " + order.getOpenDate().toString() + "\n\t completionDate: " + order.getCompletionDate().toString() + "\n\t       quantity: 10.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: AAPL", order.toString());

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNull_DboC1() {
        OrderDataBean order = new OrderDataBean();
        assertEquals("Order \n\t      orderType: \n\t    orderStatus: \n\t       openDate: \n\t completionDate: \n\t       quantity: 0.0\n\t          price: 0.0\n\t       orderFee: 0.0\n\t         symbol: ", order.toString());

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount() throws Exception {
        orderdatabean = new OrderDataBean();


        // Arrange
        AccountDataBean expectedAccount = new AccountDataBean();

        // Act
        orderdatabean.setAccount(account);

        // Assert
        assertEquals(expectedAccount, orderdatabean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_oAmH0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        orderDataBean.setAccount(accountDataBean);
        assertEquals(accountDataBean, orderDataBean.getAccount());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderFee() {
        orderdatabean = new OrderDataBean();


        // Arrange
        BigDecimal orderFee = BigDecimal.valueOf(10.0);

        // Act
        orderdatabean.setOrderFee(orderFee);

        // Assert
        assertEquals(orderFee, orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_rnhQ0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("type");
        orderDataBean.setOrderStatus("status");
        orderDataBean.setOpenDate(new Date());
        orderDataBean.setCompletionDate(new Date());
        orderDataBean.setQuantity(1.0);
        orderDataBean.setPrice(new BigDecimal("1.0"));
        orderDataBean.setAccount(new AccountDataBean());
        orderDataBean.setQuote(new QuoteDataBean("symbol"));
        orderDataBean.setHolding(new HoldingDataBean(1.0, new BigDecimal("1.0"), new Date(), new AccountDataBean(), new QuoteDataBean("symbol")));
        BigDecimal orderFee = new BigDecimal("10.0");
        orderDataBean.setOrderFee(orderFee);
        assertEquals(orderFee, orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenDate() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOpenDate(openDate);


        // Arrange
        Date expectedOpenDate = new Date();

        // Act
        Date actualOpenDate = orderdatabean.getOpenDate();

        // Assert
        assertEquals(expectedOpenDate, actualOpenDate);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOpenDate() {
        orderdatabean = new OrderDataBean();


        // Arrange
        Date expectedOpenDate = new Date();

        // Act
        orderdatabean.setOpenDate(expectedOpenDate);

        // Assert
        assertEquals(expectedOpenDate, orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_ExXx0() {
        OrderDataBean order = new OrderDataBean();
        Date openDate = new Date();
        order.setOpenDate(openDate);
        assertEquals(openDate, order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetHolding() {
        orderdatabean = new OrderDataBean();


        // Arrange
        HoldingDataBean expectedHolding = new HoldingDataBean();

        // Act
        orderdatabean.setHolding(holding);

        // Assert
        assertEquals(expectedHolding, orderdatabean.getHolding());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getCompletionDate()).thenReturn(completionDate);


        // Act
        Date actualCompletionDate = orderdatabean.getCompletionDate();

        // Assert
        Mockito.verify(orderdatabean).getCompletionDate();
        assertEquals(completionDate, actualCompletionDate);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderType() throws Exception {
        orderType = "buy";
        orderdatabean = new OrderDataBean("buy", "open", new Date(), new Date(), 1.0, new BigDecimal(10.0), new BigDecimal(1.0), null, null, null);


        assertEquals("buy", orderdatabean.getOrderType());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_completed() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);


        // Set up the order status
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("completed");

        // Call the method under test
        boolean result = orderdatabean.isCompleted();

        // Assert the result
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_alertCompleted() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);


        // Set up the order status
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("alertcompleted");

        // Call the method under test
        boolean result = orderdatabean.isCompleted();

        // Assert the result
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_cancelled() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);


        // Set up the order status
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("cancelled");

        // Call the method under test
        boolean result = orderdatabean.isCompleted();

        // Assert the result
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_otherStatus() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);


        // Set up the order status
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("pending");

        // Call the method under test
        boolean result = orderdatabean.isCompleted();

        // Assert the result
        Assertions.assertFalse(result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetQuote() {
        orderdatabean = new OrderDataBean();


        // Arrange
        QuoteDataBean expectedQuote = new QuoteDataBean("AAPL");

        // Act
        orderdatabean.setQuote(quote);

        // Assert
        assertEquals(expectedQuote, orderdatabean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_mOEg0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        orderDataBean.setQuote(quoteDataBean);
        assertEquals(quoteDataBean, orderDataBean.getQuote());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity() {
        orderdatabean = new OrderDataBean();


        double expectedQuantity = 10.0;
        orderdatabean.setQuantity(expectedQuantity);
        assertEquals(expectedQuantity, orderdatabean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_aYZF0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(10.0);
        assertEquals(10.0, orderDataBean.getQuantity(), 0.0);

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeValue_xCHd1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(-10.0);
        assertEquals(-10.0, orderDataBean.getQuantity(), 0.0);

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithZeroValue_tDTB2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(0.0);
        assertEquals(0.0, orderDataBean.getQuantity(), 0.0);

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithLargeValue_qyfd3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(1000000.0);
        assertEquals(1000000.0, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisBuy() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);


        // setup
        orderdatabean.setOrderType("buy");

        // act
        boolean result = orderdatabean.isBuy();

        // assert
        Mockito.verify(orderdatabean).getOrderType();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisNotBuy() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);


        // setup
        orderdatabean.setOrderType("sell");

        // act
        boolean result = orderdatabean.isBuy();

        // assert
        Mockito.verify(orderdatabean).getOrderType();
        Assertions.assertFalse(result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("cancelled");


        boolean result = orderdatabean.isCancelled();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotCancelled() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("cancelled");


        orderdatabean.setOrderStatus("open");
        boolean result = orderdatabean.isCancelled();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelledTrue_TQVr0() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("cancelled");
        boolean result = order.isCancelled();
        assert result;

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelledFalse_YqUn1() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("open");
        boolean result = order.isCancelled();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_zBIi0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String expectedOrderStatus = "NEW";
        orderDataBean.setOrderStatus(expectedOrderStatus);
        assertEquals("NEW", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_YzrJ0_IcBP0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("cancelled");
        assertEquals("cancelled", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_rjoh0() {
        String symbol = "ABC";
        QuoteDataBean quote = new QuoteDataBean(symbol);
        when(quote.getSymbol()).thenReturn(symbol);
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuote(quote);
        assertEquals(symbol, orderDataBean.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_QuoteNotNull_GPPR0_Gkef0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        orderDataBean.setQuote(quoteDataBean);
        String symbol = orderDataBean.getQuote().getSymbol();
        assertEquals("AAPL", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_QuoteNull_qgDP1_hrLW0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String symbol = orderDataBean.getSymbol();
        assertEquals(null, symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenOrder_QZsk0_jGwc0() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderType("buy");
        order.setOrderStatus("open");
        order.setOpenDate(new Date());
        order.setCompletionDate(null);
        order.setQuantity(1.0);
        order.setPrice(new BigDecimal("10.0"));
        order.setOrderFee(new BigDecimal("1.0"));
        order.setSymbol("AAPL");
        assertFalse(order.isCancelled());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingOrder_vedg1_tpWa0() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderType("buy");
        order.setOrderStatus("processing");
        order.setOpenDate(new Date());
        order.setCompletionDate(null);
        order.setQuantity(1.0);
        order.setPrice(new BigDecimal("10.0"));
        order.setOrderFee(new BigDecimal("1.0"));
        order.setSymbol("AAPL");
        assertTrue(order.getOrderStatus().compareToIgnoreCase("cancelled") != 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClosedOrder_GtSN2_UGJj1() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("cancelled");
        assertTrue(order.isCancelled());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_bYkB0_EBEZ0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "COMPLETED", new java.util.Date(), new java.util.Date(), 10.0, new java.math.BigDecimal("10.0"), new java.math.BigDecimal("1.0"), "AAPL");
        assertEquals("Order 1\n" +
        "      orderType: BUY\n" +
        "    orderStatus: COMPLETED\n" +
        "       openDate: " + order.getOpenDate().toString() + "\n" +
        " completionDate: " + order.getCompletionDate().toString() + "\n" +
        "       quantity: 10.0\n" +
        "          price: 10.0\n" +
        "       orderFee: 1.0\n" +
        "         symbol: " + order.getSymbol() + "", order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNull_DboC1_tSiQ0() {
        OrderDataBean order = new OrderDataBean();
        assertEquals("Order\n\torderType: \n\torderStatus: \n\topenDate: \n\tcompletionDate: \n\tquantity: 0.0\n\tprice: 0.0\n\torderFee: 0.0\n\tsymbol: ", order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount_sYfp0_1() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        AccountDataBean expectedAccount = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
        orderdatabean.setAccount(expectedAccount);
        assertEquals(expectedAccount.getAccountID(), orderdatabean.getAccount().getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount_sYfp0_2() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        AccountDataBean expectedAccount = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
        orderdatabean.setAccount(expectedAccount);
        assertEquals(expectedAccount.getLoginCount(), orderdatabean.getAccount().getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount_sYfp0_3() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        AccountDataBean expectedAccount = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
        orderdatabean.setAccount(expectedAccount);
        assertEquals(expectedAccount.getLogoutCount(), orderdatabean.getAccount().getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount_sYfp0_4() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        AccountDataBean expectedAccount = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
        orderdatabean.setAccount(expectedAccount);
        assertEquals(expectedAccount.getLastLogin().getTime(), orderdatabean.getAccount().getLastLogin().getTime());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount_sYfp0_5() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        AccountDataBean expectedAccount = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
        orderdatabean.setAccount(expectedAccount);
        assertEquals(expectedAccount.getCreationDate().getTime(), orderdatabean.getAccount().getCreationDate().getTime());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount_sYfp0_6() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        AccountDataBean expectedAccount = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
        orderdatabean.setAccount(expectedAccount);
        assertEquals(expectedAccount.getBalance().doubleValue(), orderdatabean.getAccount().getBalance().doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount_sYfp0_7() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        AccountDataBean expectedAccount = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
        orderdatabean.setAccount(expectedAccount);
        assertEquals(expectedAccount.getOpenBalance().doubleValue(), orderdatabean.getAccount().getOpenBalance().doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount_sYfp0_8() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        AccountDataBean expectedAccount = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
        orderdatabean.setAccount(expectedAccount);
        assertEquals(expectedAccount.getProfileID(), orderdatabean.getAccount().getProfileID());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_oAmH0_Xgln0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        orderDataBean.setAccount(accountDataBean);
        assertEquals(orderDataBean.getAccount(), accountDataBean);

    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetQuote_hpvS0() {
        OrderDataBean orderdatabean = new OrderDataBean();
        QuoteDataBean expectedQuote = new QuoteDataBean("AAPL");
        orderdatabean.setQuote(expectedQuote);
        assertEquals(expectedQuote, orderdatabean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_mOEg0_QRrZ0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("AAPL");
        orderDataBean.setQuote(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_iueJ0() throws Exception {
        OrderDataBean orderDataBean = new OrderDataBean();
        String symbol = "ABC"; // Declare the variable type
        orderDataBean.setOrderStatus("cancelled");
        assertEquals("cancelled", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_WKva0_ehbA0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setSymbol("ABC");
        assertEquals("ABC", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_OrderIDNotNull_GuhH0_DVBP0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        int result = orderDataBean.hashCode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_OrderIDNull_KaQT1_HEBM0() {
        OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        int result = orderDataBean.hashCode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_yzvJ0_sHok0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean(1, 1.0, BigDecimal.ONE, new Date(), "symbol");
        orderDataBean.setHolding(holdingDataBean);
        assertEquals(holdingDataBean, orderDataBean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSellTrue_oPXO0_EnDv0() {
        OrderDataBean orderDataBean = new OrderDataBean("sell", "cancelled", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), null, null, null);
        boolean result = orderDataBean.isCancelled();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDate_VJKK0() throws Exception {
        Date completionDate = new Date();
        OrderDataBean orderdatabean = new OrderDataBean(Integer.valueOf(0), "Buy", "Open", new Date(), null, 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        Date expectedCompletionDate = new Date();
        orderdatabean.setCompletionDate(expectedCompletionDate);
        assertEquals(expectedCompletionDate, orderdatabean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccount_BtaZ0() throws Exception {
        account = Mockito.mock(AccountDataBean.class);
        OrderDataBean orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        AccountDataBean actual = orderdatabean.getAccount();
        Mockito.verify(orderdatabean, Mockito.times(1)).getAccount();
        assertEquals(account, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_mXPb0_bgyT0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal("0.0"), new BigDecimal("0.0"), "profileID");
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        HoldingDataBean holdingDataBean = new HoldingDataBean(1, 1.0, new BigDecimal("1.0"), new Date(), "symbol");
        OrderDataBean orderDataBean = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol");
        OrderDataBean orderDataBean2 = new OrderDataBean();
        OrderDataBean orderDataBean3 = new OrderDataBean("orderType", "orderStatus", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), accountDataBean, quoteDataBean, holdingDataBean);
        AccountDataBean result = new OrderDataBean().getAccount();
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate_VOom0() throws Exception {
        OrderDataBean orderdatabean = Mockito.mock(OrderDataBean.class);
        Date completionDate = new Date();
        Mockito.when(orderdatabean.getCompletionDate()).thenReturn(completionDate);
        Date actualCompletionDate = orderdatabean.getCompletionDate();
        Mockito.verify(orderdatabean).getCompletionDate();
        assertEquals(completionDate, actualCompletionDate);
    }
}