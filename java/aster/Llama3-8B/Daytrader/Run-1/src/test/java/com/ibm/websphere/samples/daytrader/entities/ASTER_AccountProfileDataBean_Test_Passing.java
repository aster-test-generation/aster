/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountProfileDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreditCard_suYg0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        String creditCard = accountProfileDataBean.getCreditCard();
        assertEquals("creditCard", creditCard);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_DTkO0() {
        AccountProfileDataBean bean = new AccountProfileDataBean("user1", "pass1", "full1", "addr1", "email1", "credit1");
        boolean result = bean.equals(bean);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_XHWD1() {
        AccountProfileDataBean bean = new AccountProfileDataBean("user1", "pass1", "full1", "addr1", "email1", "credit1");
        Object obj = new Object();
        boolean result = bean.equals(obj);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_dait2() {
        AccountProfileDataBean bean = new AccountProfileDataBean("user1", "pass1", "full1", "addr1", "email1", "credit1");
        boolean result = bean.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_ibsh3() {
        AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "full1", "addr1", "email1", "credit1");
        AccountProfileDataBean bean2 = new AccountProfileDataBean("user2", "pass2", "full2", "addr2", "email2", "credit2");
        boolean result = bean1.equals(bean2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEmail_cMdx0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setEmail("testEmail");
        assertEquals("testEmail", accountProfileDataBean.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_qNne0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        String result = accountProfileDataBean.toString();
        assert result.equals("\n\tAccount Profile Data for userID:userID\n\t\t   passwd:password\n\t\t   fullName:fullName\n\t\t    address:address\n\t\t      email:email\n\t\t creditCard:creditCard");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_hVCT0() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        AccountProfileDataBean profile = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        profile.setAccount(account);
        assertEquals(account, profile.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserID_BjBT1() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("testUser");
        assertEquals("testUser", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEmail_fSpz1() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "testEmail", "creditCard");
        String email = accountProfileDataBean.getEmail();
        assertEquals("testEmail", email);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserID_qGAw1() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("testID", "password", "fullName", "address", "email", "creditCard");
        String userID = accountProfileDataBean.getUserID();
        assertEquals("testID", userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithValidData_Ijlv0() {
        AccountProfileDataBean bean = new AccountProfileDataBean("12345", "password", "John Doe", "123 Main St", "john.doe@example.com", "1234-5678-9012-3456");
        int result = bean.hashCode();
        int expected = (bean.getUserID() != null ? bean.getUserID().hashCode() : 0);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithNullUserID_rQKz1() {
        AccountProfileDataBean bean = new AccountProfileDataBean(null, "password", "John Doe", "123 Main St", "john.doe@example.com", "1234-5678-9012-3456");
        int result = bean.hashCode();
        int expected = 0;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFullName_HBHi1() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setFullName("John Doe");
        assertEquals("John Doe", accountProfileDataBean.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAddress_NpvG0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        String address = accountProfileDataBean.getAddress();
        assertEquals("address", address);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPassword_Wobs0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        String password = accountProfileDataBean.getPassword();
        assertEquals("password", password);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreditCard_ayxT0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        accountProfileDataBean.setCreditCard("newCreditCard");
        assertEquals("newCreditCard", accountProfileDataBean.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_ZFHk0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        String result = accountProfileDataBean.toHTML();
        assertEquals("<BR>Account Profile Data for userID: <B>userID</B><LI>   passwd:password</LI><LI>   fullName:fullName</LI><LI>    address:address</LI><LI>      email:email</LI><LI> creditCard:creditCard</LI>", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPassword_VTBN0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setPassword("testPassword");
        assertEquals("testPassword", accountProfileDataBean.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFullName_iELo0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        String fullName = accountProfileDataBean.getFullName();
        assertEquals("fullName", fullName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAddress_PrLr0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setAddress("Test Address");
        assertEquals("Test Address", accountProfileDataBean.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_UtHc0_bTNm0() {
        AccountProfileDataBean actual = new AccountProfileDataBean(
        "userID",
        "password",
        "fullName",
        "address",
        "email",
        "creditCard");
        AccountProfileDataBean expected = new AccountProfileDataBean(
        "userID",
        "password",
        "fullName",
        "address",
        "email",
        "creditCard");
        assertEquals(expected, actual);
    }
}