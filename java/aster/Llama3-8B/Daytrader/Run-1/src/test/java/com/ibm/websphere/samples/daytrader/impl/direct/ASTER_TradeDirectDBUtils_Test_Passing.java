/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.concurrent.TimeUnit;
import javax.sql.DataSource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirectDBUtils_Test_Passing {
    @Mock
    private DataSource datasource;
    @Mock
    private Connection connection;
    @Mock
    private PreparedStatement preparedstatement;
    @Mock
    private ResultSet resultset;
    private TradeDirectDBUtils tradedirectdbutils;

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testresetTrade_1() throws Exception {
        tradedirectdbutils = new TradeDirectDBUtils();
        Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
        field_datasource.setAccessible(true);
        field_datasource.set(tradedirectdbutils, datasource);
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeUpdate()).thenReturn(1);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getInt(any(String.class))).thenReturn(1, 2, 3, 4, 5, 6, 7, 8, 9, 00);
        RunStatsDataBean runStatsData = tradedirectdbutils.resetTrade(true);
        assertEquals(1, runStatsData.getNewUserCount());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testresetTrade_2() throws Exception {
        tradedirectdbutils = new TradeDirectDBUtils();
        Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
        field_datasource.setAccessible(true);
        field_datasource.set(tradedirectdbutils, datasource);
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeUpdate()).thenReturn(1);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getInt(any(String.class))).thenReturn(1, 2, 3, 4, 5, 6, 7, 8, 9, 00);
        RunStatsDataBean runStatsData = tradedirectdbutils.resetTrade(true);
        assertEquals(1, runStatsData.getTradeUserCount());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testresetTrade_3() throws Exception {
        tradedirectdbutils = new TradeDirectDBUtils();
        Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
        field_datasource.setAccessible(true);
        field_datasource.set(tradedirectdbutils, datasource);
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeUpdate()).thenReturn(1);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getInt(any(String.class))).thenReturn(1, 2, 3, 4, 5, 6, 7, 8, 9, 00);
        RunStatsDataBean runStatsData = tradedirectdbutils.resetTrade(true);
        assertEquals(1, runStatsData.getTradeStockCount());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testresetTrade_12() throws Exception {
        tradedirectdbutils = new TradeDirectDBUtils();
        Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
        field_datasource.setAccessible(true);
        field_datasource.set(tradedirectdbutils, datasource);
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeUpdate()).thenReturn(1);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getInt(any(String.class))).thenReturn(1, 2, 3, 4, 5, 6, 7, 8, 9, 00);
        RunStatsDataBean runStatsData = tradedirectdbutils.resetTrade(true);
        assertEquals(1, runStatsData.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcheckDBProductName() throws Exception {
        connection = mock(Connection.class);
        tradedirectdbutils = new TradeDirectDBUtils();
        Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
        field_datasource.setAccessible(true);
        field_datasource.set(tradedirectdbutils, datasource);
        when(datasource.getConnection()).thenReturn(connection);
        DatabaseMetaData dbmd = mock(DatabaseMetaData.class);
        when(connection.getMetaData()).thenReturn(dbmd);
        String dbProductName = "Mock Database Product Name";
        when(dbmd.getDatabaseProductName()).thenReturn(dbProductName);
        String result = tradedirectdbutils.checkDBProductName();
        assertEquals(dbProductName, result);
    }
}