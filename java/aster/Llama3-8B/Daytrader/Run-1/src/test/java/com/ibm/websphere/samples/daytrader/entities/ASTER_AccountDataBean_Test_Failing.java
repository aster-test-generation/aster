/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_2_fid1() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertEquals(100000, result.getAccountID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_3() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertEquals(10000, result.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_4() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertEquals(10000, result.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_6() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertEquals(new java.util.Date(Integer.MAX_VALUE), result.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_7() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertEquals(new BigDecimal("1000000.0"), result.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_8() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertEquals(new BigDecimal("1000000.0"), result.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_9() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndUserID(), result.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginValidPassword_cJGA0() {
        AccountDataBean account = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        account.getProfile().setPassword("password");
        account.login("password");
        assertEquals(1, account.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginInvalidPassword_OuLS1() {
        AccountDataBean account = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        account.getProfile().setPassword("wrongPassword");
        try {
            account.login("password");
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullPassword_tFRa3() {
        AccountDataBean account = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        account.getProfile().setPassword(null);
        try {
            account.login("password");
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_ZPfG0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        String result = accountDataBean.toHTML();
        assertEquals("<BR>Account Data for account: <B>1</B><LI>   loginCount:10</LI><LI>  logoutCount:5</LI><LI>    lastLogin:</LI><LI> creationDate:</LI><LI>      balance:100.0</LI><LI>  openBalance:100.0</LI><LI>    profileID:profileID</LI>", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithoutLastLoginAndCreationDate_iack1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, null, null, new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        String result = accountDataBean.toHTML();
        assertEquals("<BR>Account Data for account: <B>1</B><LI>   loginCount:10</LI><LI>  logoutCount:5</LI><LI>    lastLogin:</LI><LI> creationDate:</LI><LI>      balance:100.0</LI><LI>  openBalance:100.0</LI><LI>    profileID:profileID</LI>", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_FsDm0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "profileID");
        Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
        assertEquals(0, holdings.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentFields_anZi4() {
        AccountDataBean bean1 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        AccountDataBean bean2 = new AccountDataBean(1, 2, 2, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        boolean result = bean1.equals(bean2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_zSOu0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        Collection<OrderDataBean> orders = accountDataBean.getOrders();
        Assertions.assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_VcEh0_BQFV0_1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        AccountProfileDataBean profile = accountDataBean.getProfile();
        assertNotNull(profile);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_VcEh0_BQFV0_2() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        AccountProfileDataBean profile = accountDataBean.getProfile();
        assertEquals("getCreditCard method should return a valid value", profile.getCreditCard(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_VcEh0_BQFV0_3() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        AccountProfileDataBean profile = accountDataBean.getProfile();
        assertEquals("getEmail method should return a valid value", profile.getEmail(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_VcEh0_BQFV0_4() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        AccountProfileDataBean profile = accountDataBean.getProfile();
        assertEquals("getUserID method should return a valid value", profile.getUserID(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_VcEh0_BQFV0_5() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        AccountProfileDataBean profile = accountDataBean.getProfile();
        assertEquals("getAddress method should return a valid value", profile.getAddress(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_VcEh0_BQFV0_6() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        AccountProfileDataBean profile = accountDataBean.getProfile();
        assertEquals("getPassword method should return a valid value", profile.getPassword(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertNotNull(result);
        assertEquals(100000, result.getAccountID().intValue());
        assertEquals(10000, result.getLoginCount());
        assertEquals(10000, result.getLogoutCount());
        assertEquals(new java.util.Date(), result.getLastLogin());
        assertEquals(new java.util.Date(Integer.MAX_VALUE), result.getCreationDate());
        assertEquals(new BigDecimal("1000000.0"), result.getBalance());
        assertEquals(new BigDecimal("1000000.0"), result.getOpenBalance());
        assertEquals(TradeConfig.rndUserID(), result.getProfileID());
    }
}