/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.Future;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeSLSBBean_Coverage_Test_Passing {
    public void logExpectations_NyeE4() {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_Luov0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.setInSession(true);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_PublishConfigFalse_ReturnsImmediately_QLid0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean("symbol", "company", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(5), BigDecimal.valueOf(3), BigDecimal.valueOf(15), 1000);
        BigDecimal oldPrice = BigDecimal.valueOf(5);
        BigDecimal changeFactor = BigDecimal.valueOf(2);
        double sharesTraded = 1000;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_PublishConfigTrue_SendsMessage_HKnu1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        TradeConfig.setPublishQuotePriceChange(true);
        QuoteDataBean quote = new QuoteDataBean("symbol", "company", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(5), BigDecimal.valueOf(3), BigDecimal.valueOf(15), 1000);
        BigDecimal oldPrice = BigDecimal.valueOf(5);
        BigDecimal changeFactor = BigDecimal.valueOf(2);
        double sharesTraded = 1000;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_PublishConfigTrue_ThrowsException_VFWy2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        TradeConfig.setPublishQuotePriceChange(true);
        QuoteDataBean quote = new QuoteDataBean("symbol", "company", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(5), BigDecimal.valueOf(3), BigDecimal.valueOf(15), 1000);
        BigDecimal oldPrice = BigDecimal.valueOf(5);
        BigDecimal changeFactor = BigDecimal.valueOf(2);
        double sharesTraded = 1000;
        try {
            tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_JvVz0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderNullAccount_yaWI1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 10.0;
    try {
        tradeSLSBBean.createOrder(null, quote, holding, orderType, quantity);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("TradeSLSBBean:createOrder -- failed to create Order. Check that the account exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderNullQuote_CckY2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 10.0;
    try {
        tradeSLSBBean.createOrder(account, null, holding, orderType, quantity);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("TradeSLSBBean:createOrder -- failed to create Order. Check that the symbol exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderNullHolding_zWrh3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    String orderType = "buy";
    double quantity = 10.0;
    try {
        tradeSLSBBean.createOrder(account, quote, null, orderType, quantity);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("TradeSLSBBean:createOrder -- failed to create Order. Check that the holding exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderInvalidOrderType_iNGZ4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "invalid";
    double quantity = 10.0;
    try {
        tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("TradeSLSBBean:createOrder -- failed to create Order. Check that the order type exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderNegativeQuantity_HLla5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = -10.0;
    try {
        tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("TradeSLSBBean:createOrder -- failed to create Order. Check that the quantity is valid.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderZeroQuantity_psTj6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 0.0;
    try {
        tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("TradeSLSBBean:createOrder -- failed to create Order. Check that the quantity is valid.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderException_KGwb7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderCreateHolding_xzbH0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderStatus("open");
        order.setCompletionDate(null);
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNewAccount_yhlR1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertNotNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullUserID_ImXv2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullPassword_TyQv3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = null;
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullFullname_ERbm4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = null;
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullAddress_Safz5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = "fullname";
        String address = null;
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullEmail_jIbV6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = null;
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullCreditcard_egqQ7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = null;
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertNull(account);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_SkRW0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("testUserID");
        assertNotNull(accountProfileDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataNull_LUrR1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(null);
        assertNull(accountProfileDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataNonExisting_hDvm2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("nonExistingUserID");
        assertNull(accountProfileDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NoUpdate_EIEC0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 1.0);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptySymbol_jlZW1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("", BigDecimal.ONE, 1.0);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NullSymbol_najF2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(null, BigDecimal.ONE, 1.0);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptyChangeFactor_ZTIB3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ZERO, 1.0);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NullChangeFactor_Tnsg4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", null, 1.0);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptySharesTraded_Kuta5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 0.0);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_PennyStockPrice_bbLK7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 1.0);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.valueOf(4.0)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_MaximumStockPrice_RsSl8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(10.0), 1.0);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.valueOf(20.0)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_UpdateQuote_QSFu9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(5.0), 1.0);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.valueOf(6.0)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_rItG0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(1, true);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncNull_Nxba1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(1, true);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_TIXI0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileNullProfileData_MBBD1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = null;
        try {
            tradeSLSBBean.updateAccountProfile(profileData);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileNullAddress_OlXv3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", null, "email", "creditCard");
        try {
            tradeSLSBBean.updateAccountProfile(profileData);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileNullPassword_uplE4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", null, "fullName", "address", "email", "creditCard");
        try {
            tradeSLSBBean.updateAccountProfile(profileData);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileNullFullName_DRjm5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", null, "address", "email", "creditCard");
        try {
            tradeSLSBBean.updateAccountProfile(profileData);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileNullCreditCard_HoPg6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", null);
        try {
            tradeSLSBBean.updateAccountProfile(profileData);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileNullEmail_mFfl7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", null, "creditCard");
        try {
            tradeSLSBBean.updateAccountProfile(profileData);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithValidInputs_vApy0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(1, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithInvalidOrderID_SBVJ4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(-1, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithInvalidTwoPhase_jbuf6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(1, false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithInvalidMessage_LeOC8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(1, true);
        tradeSLSBBean.queueOrder(null, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithInvalidPublishTime_xmLb10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(1, true);
        tradeSLSBBean.queueOrder(0, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_ContextCreation_jXCQ0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.pingTwoPhase("symbol");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_EntityManagerFind_DiKz1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("symbol");
        assertNotNull(quoteData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_ShareTraded_Obrz2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("symbol");
        assertEquals(1, quoteData.getVolume(), 0.1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_OldPrice_TyKK3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("symbol");
        BigDecimal oldPrice = quoteData.getPrice();
        assertNotNull(oldPrice);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_OpenPrice_viAK4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("symbol");
        BigDecimal openPrice = quoteData.getOpen();
        assertNotNull(openPrice);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_NewPrice_xSci6() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("symbol");
        BigDecimal newPrice = quoteData.getPrice();
        assertNotNull(newPrice);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithValidInputs_VEOw0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithNullUserID_CpXa1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy(null, "symbol", 10.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithNullSymbol_doaC2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("userID", null, 10.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithZeroQuantity_FLhw3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("userID", "symbol", 0.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithNegativeQuantity_QYwc4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("userID", "symbol", -10.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithInvalidOrderProcessingMode_GFhE5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("userID", "symbol", 10.0, 100);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithValidUserIDAndHoldingID_BEpj0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("validUserID", 1, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidUserID_pUxg1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("invalidUserID", 1, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidHoldingID_iDFO3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("validUserID", 2, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithNullUserID_ysdu4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell(null, 1, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithNullHoldingID_Styt5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("validUserID", null, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithOrderProcessingModeAsynch_dHXo7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("validUserID", 1, TradeConfig.ASYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithOrderProcessingModeAsynch2Phase_NywM8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("validUserID", 1, TradeConfig.ASYNCH_2PHASE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithOrderProcessingModeInvalid_msBY9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("validUserID", 1, 3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NoUpdate_EIEC0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 1.0);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NoUpdate_EIEC0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 1.0);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptySymbol_jlZW1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("", BigDecimal.ONE, 1.0);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptySymbol_jlZW1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("", BigDecimal.ONE, 1.0);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NullSymbol_najF2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(null, BigDecimal.ONE, 1.0);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NullSymbol_najF2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(null, BigDecimal.ONE, 1.0);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptyChangeFactor_ZTIB3_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ZERO, 1.0);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptyChangeFactor_ZTIB3_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ZERO, 1.0);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NullChangeFactor_Tnsg4_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", null, 1.0);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NullChangeFactor_Tnsg4_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", null, 1.0);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptySharesTraded_Kuta5_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 0.0);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptySharesTraded_Kuta5_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 0.0);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_PennyStockPrice_bbLK7_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 1.0);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_PennyStockPrice_bbLK7_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 1.0);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.valueOf(4.0)));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_MaximumStockPrice_RsSl8_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(10.0), 1.0);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_MaximumStockPrice_RsSl8_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(10.0), 1.0);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.valueOf(20.0)));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_UpdateQuote_QSFu9_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(5.0), 1.0);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_UpdateQuote_QSFu9_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(5.0), 1.0);
        Assertions.assertTrue(result.getPrice().equals(BigDecimal.valueOf(6.0)));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_SqEN0_Tmoe0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    EntityManager entityManager = mock(EntityManager.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHoldings_NullEntityManager_oljI9_ZXUk0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.getClosedOrders("test_user_id");
        assertTrue(false);
    } catch (Exception e) {
        assertEquals("EntityManager is null!", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrdersEmpty_FuLC4_pFnw1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> orderDataBeans = tradeSLSBBean.getClosedOrders("");
    assertNotNull(orderDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrdersEmpty_FuLC4_pFnw1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> orderDataBeans = tradeSLSBBean.getClosedOrders("");
    assertEquals(0, orderDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfileInvalidUserID_NYUu2_ngzi0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("invalidUserID", "password", "fullName", "address", "email", "creditCard");
    try {
        tradeSLSBBean.updateAccountProfile(profileData);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("TradeSLSBBean.getClosedOrders - error", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfileMergeException_iZpV8_YZeR0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    try {
        tradeSLSBBean.updateAccountProfile(profileData);
        fail("Expected MergeException");
    } catch (Exception e) {
        assertEquals(EJBException.class, e.getClass());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_ChangeFactor_kwpZ5_dhfE0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("symbol");
    BigDecimal changeFactor = new BigDecimal(Math.random() * 100);
    BigDecimal openPrice = new BigDecimal(Math.random() * 100);
    assertEquals(changeFactor.doubleValue(), quoteData.getPrice().doubleValue() - openPrice.doubleValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLogout_YNfz1_rLom0() {
    String userID = "testUser";
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean(); // Create an instance of TradeSLSBBean
    String expectedMessage = "TradeSLSBBean:logout(" + userID + ") success";
    try {
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
    } catch (Exception e) {
        fail("Test failed: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_SetVolume_hxzb9_mXCH0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("symbol");
    int sharesTraded = 10; // declare and initialize sharesTraded
    assertEquals(quoteData.getVolume() + sharesTraded, quoteData.getVolume()); // Error: quoteData is of type QuoteDataBean, not OrderDataBean
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_TextMessageCreation_pjem11_hCYb0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean message = tradeSLSBBean.pingTwoPhase("symbol");
    assertNotNull(message);
}
}