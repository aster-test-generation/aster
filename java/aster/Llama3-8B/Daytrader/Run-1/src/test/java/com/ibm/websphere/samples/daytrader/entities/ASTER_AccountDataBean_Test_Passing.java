/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLoginCount_XTRc1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, null);
        accountDataBean.setLoginCount(10);
        assertEquals(10, accountDataBean.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_1() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_2() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_xJMJ0_5() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertEquals(new java.util.Date(), result.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogoutCount_YywO0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, null);
        accountDataBean.setLogoutCount(10);
        assertEquals(10, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastLogin_xrdS0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date lastLogin = new Date();
        accountDataBean.setLastLogin(lastLogin);
        assertEquals(lastLogin, accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullProfile_UGtc2() {
        AccountDataBean account = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, null);
        try {
            account.login("password");
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_AccountIDNotNull_Hjbt0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        int hash = accountDataBean.hashCode();
        System.out.println("hash = " + hash);
        assert hash != 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_AccountIDNull_ZhCq1() {
        AccountDataBean accountDataBean = new AccountDataBean(null, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        int hash = accountDataBean.hashCode();
        System.out.println("hash = " + hash);
        assert hash == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_BDax0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        accountDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_ZurW0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        List<HoldingDataBean> holdings = new ArrayList<>();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdings.add(holdingDataBean);
        accountDataBean.setHoldings(holdings);
        assert accountDataBean.getHoldings() != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_fpOp0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "profileID");
        Date creationDate = accountDataBean.getCreationDate();
        assertEquals(new Date(), creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLogoutCount_jPgo1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        int logoutCount = accountDataBean.getLogoutCount();
        Assertions.assertEquals(5, logoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountID_bryQ1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setAccountID(1);
        assertEquals(1, accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLoginCount_GSBd0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        int result = accountDataBean.getLoginCount();
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID2_tisR1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        Integer accountID = accountDataBean.getAccountID();
        assertEquals(Integer.valueOf(1), accountID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_GqGo0() {
        AccountDataBean bean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        boolean result = bean.equals(bean);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_hzmx1() {
        AccountDataBean bean1 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        AccountDataBean bean2 = new AccountDataBean(2, 2, 2, new Date(), new Date(), new BigDecimal(2), new BigDecimal(2), "2");
        boolean result = bean1.equals(bean2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_cnta2() {
        AccountDataBean bean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        boolean result = bean.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_gFIG3() {
        AccountDataBean bean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Object obj = new Object();
        boolean result = bean.equals(obj);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_NXMr1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "profileID");
        accountDataBean.logout();
        assertEquals(1, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_reVH0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        String expected = "\n\tAccount Data for account: 1\n\t\t   loginCount:10\n\t\t  logoutCount:5\n\t\t    lastLogin:" + accountDataBean.getLastLogin() + "\n\t\t creationDate:" + accountDataBean.getCreationDate() + "\n\t\t      balance:100.0\n\t\t  openBalance:100.0\n\t\t    profileID:profileID";
        assertEquals(expected, accountDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance_zlyF1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        BigDecimal openBalance = new BigDecimal("100.00");
        accountDataBean.setOpenBalance(openBalance);
        assertEquals(openBalance, accountDataBean.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfileID_BaEz0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        String profileID = accountDataBean.getProfileID();
        assertEquals("profileID", profileID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_wDEq1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date creationDate = new Date();
        accountDataBean.setCreationDate(creationDate);
        assertEquals(creationDate, accountDataBean.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfileID_RkFM1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        accountDataBean.setProfileID("newProfileID");
        assertEquals("newProfileID", accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfile_RjeC0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        accountDataBean.setProfile(accountProfileDataBean);
        assert accountDataBean.getProfile().getUserID().equals("userID");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrders_RKtc1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Collection<OrderDataBean> orders = new ArrayList<>();
        OrderDataBean orderDataBean = new OrderDataBean();
        orders.add(orderDataBean);
        accountDataBean.setOrders(orders);
        assertEquals(orders, accountDataBean.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLogin_SybK1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal(100), new BigDecimal(0), "profileID");
        Date lastLogin = accountDataBean.getLastLogin();
        assertEquals(lastLogin, accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBalance_xaSr0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
        BigDecimal balance = accountDataBean.getBalance();
        assertEquals(new BigDecimal(100), balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalance_qNiB0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        BigDecimal openBalance = accountDataBean.getOpenBalance();
        assertEquals(BigDecimal.ZERO, openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalance_MxgV1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        BigDecimal balance = new BigDecimal("100.00");
        accountDataBean.setBalance(balance);
        assertEquals(balance, accountDataBean.getBalance());
    }
}