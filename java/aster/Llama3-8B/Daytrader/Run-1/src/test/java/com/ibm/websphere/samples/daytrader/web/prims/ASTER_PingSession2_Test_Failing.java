/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession2_Test_Failing {
    @Mock
    private ServletConfig config;
    private PingSession2 pingsession2;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    HttpServletResponse httpservletresponse;
    private static String initTime;
    private static int hitCount;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_cEmb0() {
        PingSession2 pingSession2 = new PingSession2();
        String result = pingSession2.getServletInfo();
        assertEquals("HTTP Session Key: Tests management of a read/write unique id", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_Faxv0() throws ServletException, IOException {
        HttpServlet httpservlet = mock(HttpServlet.class);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpSession httpsession = mock(HttpSession.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        PingSession2 pingsession2 = new PingSession2();
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        pingsession2.doGet(httpservletrequest, httpservletresponse);
        verify(httpsession, times(1)).setAttribute(anyString(), any(Integer.class));
        verify(httpservletresponse, times(1)).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_egTm0() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingsession2 = new PingSession2();
        initTime = "2022-01-01 00:00:00";
        hitCount = 0;
        when(httpservletrequest.getSession(any())).thenReturn(httpsession);
        when(httpsession.getAttribute("sessiontest.counter")).thenReturn(new Integer(1));
        PrintWriter printWriter = mock(PrintWriter.class);
        when(httpservletresponse.getWriter()).thenReturn(printWriter);
        pingsession2.doGet(httpservletrequest, httpservletresponse);
        verify(httpsession, times(1)).setAttribute("sessiontest.counter", any());
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletresponse, times(1)).setHeader("SessionTrackingTest-counter", "1");
        verify(printWriter, times(1)).println(anyString());
        verify(httpservletresponse, times(1)).sendError(500, "PingSession2.doGet(...): error.");
    }
}