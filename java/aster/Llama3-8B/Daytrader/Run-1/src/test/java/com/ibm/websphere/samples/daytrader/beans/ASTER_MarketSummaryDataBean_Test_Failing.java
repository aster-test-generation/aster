/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.json.JsonObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_wCxi0() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
        String result = bean.toString();
        assertEquals("Market Summary at: [summary date]\n\t\t        TSIA:100\n\t\t    openTSIA:200\n\t\t        gain: [gain percent]\n\t\t      volume:300\n\t\t   Current Top Gainers:\n\t\t\t[quote data]\n\t\t   Current Top Losers:\n\t\t\t[quote data]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_cpuh1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(null, new BigDecimal("200"), 300, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
        String result = bean.toString();
        assertEquals("Market Summary at: [summary date]\n\t\t        TSIA:null\n\t\t    openTSIA:200\n\t\t        gain: [gain percent]\n\t\t      volume:300\n\t\t   Current Top Gainers:\n\t\t\t[quote data]\n\t\t   Current Top Losers:\n\t\t\t[quote data]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_WVWJ2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), null, 300, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
        String result = bean.toString();
        assertEquals("Market Summary at: [summary date]\n\t\t        TSIA:100\n\t\t    openTSIA:null\n\t\t        gain: [gain percent]\n\t\t      volume:300\n\t\t   Current Top Gainers:\n\t\t\t[quote data]\n\t\t   Current Top Losers:\n\t\t\t[quote data]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_bEIe0() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getTSIA());
        assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getOpenTSIA());
        assertEquals(TradeConfig.rndQuantity(), result.getVolume());
        assertEquals(5, result.getTopGainers().size());
        assertEquals(5, result.getTopLosers().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_gzAL0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.print();
        assertEquals("MarketSummaryDataBean [toString=]", marketSummaryDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithValues_IrGZ1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("10.0"), new BigDecimal("20.0"), 30.0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.print();
        assertEquals("MarketSummaryDataBean [toString=]", marketSummaryDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopGainers_jkKE1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
        Assertions.assertNotNull(topGainers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_EmptyTopGainers_EmptyTopLosers_iZjI2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, new ArrayList<>(), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at:"));
        Assertions.assertTrue(result.contains("TSIA:100.0"));
        Assertions.assertTrue(result.contains("openTSIA:200.0"));
        Assertions.assertTrue(result.contains("volume:300.0"));
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_bEIe0_1() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_bEIe0_2() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_bEIe0_3() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndQuantity(), result.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_EmptyTopGainers_EmptyTopLosers_iZjI2_5() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, new ArrayList<>(), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIA_OpenTSIA_Volume_EmptyTopGainers_EmptyTopLosers_iZjI2_6() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
        new BigDecimal("100.0"), new BigDecimal("200.0"), 300.0, new ArrayList<>(), new ArrayList<>());
        String result = marketSummaryDataBean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJsonWithoutTopGainersAndLosers_SKbK1_eFeh0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(BigDecimal.valueOf(100));
        marketSummaryDataBean.setOpenTSIA(BigDecimal.valueOf(50));
        marketSummaryDataBean.setVolume(1000);
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertEquals("{\"tsia\":\"" + marketSummaryDataBean.getTSIA() + "\",\"openTSIA\":\"" + marketSummaryDataBean.getOpenTSIA() + "\",\"volume\":\"" + marketSummaryDataBean.getVolume() + "\"}", jsonObject.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithValues_IrGZ1_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("10.0"), new BigDecimal("20.0"), 30.0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.print();
        assertEquals("	Market Summary at: 2024-07-11		        TSIA:10.0		    openTSIA:20.0		        gain:-50.0000		      volume:30.0		   Current Top Gainers:		   Current Top Losers:", marketSummaryDataBean.toString());
    }
}