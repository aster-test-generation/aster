/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Log_Test_Failing {
    private static final Logger log = Logger.getLogger(Log.class.getName());

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_eRBr0() {
        String expected = "org.apache.maven.surefire.api.report.ConsoleOutputCapture$ForwardingPrintStream@244cae2a";
        Log.log("Hello ", "World");
        assertEquals(expected, System.out.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoTraceTrue_qzCB0() {
        Logger log = Logger.getLogger("test");
        log.setLevel(Level.FINE);
        boolean result = Log.doTrace();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_GBjt0() {
        Log.log("Hello, ", "World!", "!");
        assertEquals("org.apache.maven.surefire.api.report.ConsoleOutputCapture$ForwardingPrintStream@244cae2a", System.out.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_RzPb0() {
        String message = "Test Message(Parm1, Parm2, Parm3), Parm4, Parm5, Parm6, Parm7";
        Object parm1 = "Parm1";
        Object parm2 = "Parm2";
        Object parm3 = "Parm3";
        Object parm4 = "Parm4";
        Object parm5 = "Parm5";
        Object parm6 = "Parm6";
        Object parm7 = "Parm7";
        String expected = "Test Message(Parm1, Parm2, Parm3), Parm4, Parm5, Parm6, Parm7(" + parm1 + ", " + parm2 + ", " + parm3 + ")" + ", " + parm4 + ", " + parm5 + ", " + parm6 + ", " + parm7;
        Log.trace(message, parm1, parm2, parm3, parm4, parm5, parm6, parm7);
        assertEquals(expected, message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_svaH0_DyVV1() {
        Log log = new Log();
        String message = "Test message";
        log.printCollection(message, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_eRBr0_fid1() {
        String expected = "Hello World";
        Log.log("Hello ", "World");
        assertEquals(expected, System.out.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_GBjt0_fid1() {
        Log.log("Hello, ", "World!", "!");
        assertEquals("Hello, World!", System.out.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWarning_FpAL0() {
        Log.warning("Test warning message");
        assertEquals(Level.WARNING, log.getUseParentHandlers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTraceInterceptor_EVoC0() {
        Log.traceInterceptor("Test message", new Object());
        assertEquals(Level.SEVERE, log.getUseParentHandlers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDebug_NGdX0() {
        Log.debug("Test message");
        assertEquals(Level.INFO, log.getUseParentHandlers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_RzPb0_fid1() {
        String message = "Test Message";
        Object parm1 = "Parm1";
        Object parm2 = "Parm2";
        Object parm3 = "Parm3";
        Object parm4 = "Parm4";
        Object parm5 = "Parm5";
        Object parm6 = "Parm6";
        Object parm7 = "Parm7";
        String expected = "Test Message(" + parm1 + ", " + parm2 + ", " + parm3 + ")" + ", " + parm4 + ", " + parm5 + ", " + parm6 + ", " + parm7;
        Log.trace(message, parm1, parm2, parm3, parm4, parm5, parm6, parm7);
        assertEquals(expected, message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_fbWf0_mWFE1_fid2() {
        Log log = new Log();
        log.trace("Test", "param1", "param2", "param3");
        assertEquals(null, log);
    }
}