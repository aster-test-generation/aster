/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_VHZF0() {
        HoldingData holdingData = new HoldingData();
        double quantity = holdingData.getQuantity();
        assertEquals(0.0, quantity, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_tTLr0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = new BigDecimal("10.00");
        holdingData.setPurchasePrice(purchasePrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_wPLc0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = new BigDecimal("10.00");
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBasis_OodX0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal basis = new BigDecimal("10.00");
        holdingData.setBasis(basis);
        assert holdingData.getBasis().compareTo(basis) == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_isQd0() {
        HoldingData holdingData = new HoldingData();
        Date date = new Date();
        holdingData.setPurchaseDate(date);
        assert holdingData.getPurchaseDate() != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_kyIc0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = new BigDecimal("10.5");
        holdingData.setGain(gain);
        assert holdingData.getGain().equals(gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_AlCo0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("TestQuoteID");
        assertEquals("TestQuoteID", holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_LvGY0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expectedPrice = new BigDecimal("10.00");
        holdingData.setPrice(expectedPrice);
        BigDecimal actualPrice = holdingData.getPrice();
        assertEquals(expectedPrice, actualPrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketValue_lMFx0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expectedMarketValue = new BigDecimal("100.00");
        holdingData.setMarketValue(expectedMarketValue);
        BigDecimal actualMarketValue = holdingData.getMarketValue();
        assertEquals(expectedMarketValue, actualMarketValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain_pJyZ0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expectedGain = new BigDecimal("10.0");
        holdingData.setGain(expectedGain);
        BigDecimal actualGain = holdingData.getGain();
        assertEquals(expectedGain, actualGain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_hUDm0() {
        HoldingData holdingData = new HoldingData();
        Integer expected = null;
        Integer actual = holdingData.getHoldingID();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_WdMP0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuantity(10.5);
        assertEquals(10.5, holdingData.getQuantity(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValue_OZdK0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal("100.00");
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_YINj0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(123);
        assertEquals(123, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePrice_qmDV0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expected = new BigDecimal("10.00");
        holdingData.setPurchasePrice(expected);
        BigDecimal actual = holdingData.getPurchasePrice();
        assertEquals(expected, actual);
    }
}