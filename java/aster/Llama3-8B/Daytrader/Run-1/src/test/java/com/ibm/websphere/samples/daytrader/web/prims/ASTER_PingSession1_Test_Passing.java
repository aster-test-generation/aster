/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession1_Test_Passing {
    private static String initTime;
    private static int hitCount;
    private static int count;
    @Mock
    private ServletConfig servletConfig;
    @InjectMocks
    private PingSession1 pingsession1;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingsession1 = new PingSession1();
        when(httpservletrequest.getSession(any())).thenReturn(httpsession);
        pingsession1.doPost(httpservletrequest, httpservletresponse);
        verify(httpsession).setAttribute(any(), any());
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_YDzh0() {
        PingSession1 pingSession1 = new PingSession1();
        String result = pingSession1.getServletInfo();
        assertEquals("HTTP Session Key: Tests management of a read only unique id", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_yITs0_1() throws ServletException {
        MockitoAnnotations.initMocks(this);
        pingsession1.init(servletConfig);
        Mockito.verify(servletConfig, Mockito.times(1)).getInitParameter(Mockito.anyString());
        Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
        Assertions.assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_yITs0_2() throws ServletException {
        MockitoAnnotations.initMocks(this);
        pingsession1.init(servletConfig);
        Mockito.verify(servletConfig, Mockito.times(1)).getInitParameter(Mockito.anyString());
        Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
        Assertions.assertEquals(0, count);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_yITs0_3() throws ServletException {
        MockitoAnnotations.initMocks(this);
        pingsession1.init(servletConfig);
        Mockito.verify(servletConfig, Mockito.times(1)).getInitParameter(Mockito.anyString());
        Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
        Assertions.assertEquals(0, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_RfSw0_Luij0() {
        PingSession1 pingSession1 = new PingSession1();
    }
}