/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Failing {
    private String result = "";
    private ExternalContext context;
    @Mock
    private TradeConfig tradeConfig;
    @Mock
    private RunStatsDataBean runStatsData;
    @Mock
    private HttpSession httpSession;
    @Mock
    private ExternalContext externalContext;
    private TradeConfigJSF tradeConfigJSF;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterfaceList_IxSk0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = {"interface1", "interface2"};
        String[] actual = tradeConfigJSF.getWebInterfaceList();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuntimeModeList_jILd0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = {"Full EJB3", "mode2", "mode3"};
        String[] actual = tradeConfigJSF.getRuntimeModeList();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_zOpp40() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int result = tradeConfigJSF.getPrimIterations();
        assertEquals(40, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeList_PuGS0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = {"Sync", "mode2", "mode3"};
        String[] result = tradeConfigJSF.getOrderProcessingModeList();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTrade_WuCl0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.resetTrade();
        assertEquals("stats", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_RuntimeMode_FBlI0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.updateConfig();
        assertEquals("RuntimeMode: " + TradeConfig.getRunTimeModeNames()[TradeConfig.getRunTimeMode()], tradeConfigJSF.getResult());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_OrderProcessingMode_BUTV1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("OrderProcessingMode1");
        tradeConfigJSF.updateConfig();
        assertEquals("OrderProcessingMode: " + TradeConfig.getOrderProcessingModeNames()[TradeConfig.getOrderProcessingMode()], tradeConfigJSF.getResult());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_WebInterface_FYTl2() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setWebInterface("WebInterface1");
        tradeConfigJSF.updateConfig();
        assertEquals("Web Interface: " + TradeConfig.getWebInterfaceNames()[TradeConfig.getWebInterface()], tradeConfigJSF.getResult());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_MAX_USERS_hwIS3() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMaxUsers(10);
        tradeConfigJSF.updateConfig();
        assertEquals("Trade Users: " + TradeConfig.getMAX_USERS(), tradeConfigJSF.getResult());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_MarketSummaryInterval_fdKw5() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMarketSummaryInterval(30);
        tradeConfigJSF.updateConfig();
        assertEquals("Market Summary Interval: " + TradeConfig.getMarketSummaryInterval(), tradeConfigJSF.getResult());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_PrimIterations_xtgH6() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPrimIterations(40);
        tradeConfigJSF.updateConfig();
        assertEquals("Primitive Iterations: " + TradeConfig.getPrimIterations(), tradeConfigJSF.getResult());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetResult_eMvY0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.getResult();
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuntimeModeList_jILd0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = {"mode1", "mode2", "mode3"};
        String[] actual = tradeConfigJSF.getRuntimeModeList();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInterval_aGLm0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected = 0;
        int actual = tradeConfigJSF.getMarketSummaryInterval();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuntimeMode_cxtB0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.getRuntimeMode();
        assertEquals("runtimeMode", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_zOpp0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int result = tradeConfigJSF.getPrimIterations();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxUsers_Rehs0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected = 0;
        int actual = tradeConfigJSF.getMaxUsers();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeList_PuGS0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = {"mode1", "mode2", "mode3"};
        String[] result = tradeConfigJSF.getOrderProcessingModeList();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxQuotes_HClV0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int result = tradeConfigJSF.getMaxQuotes();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterface_ZWDR0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String actual = tradeConfigJSF.getWebInterface();
        assertEquals("Expected value", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterface_ymmW1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String actual = tradeConfigJSF.getWebInterface();
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_ZNcV0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.getOrderProcessingMode();
        assertEquals("Your expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_yKIn0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected = 0;
        int actual = tradeConfigJSF.getListQuotePriceChangeFrequency();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_MAX_QUOTES_hSyS4_RrkB0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("MAX_QUOTES");
        tradeConfigJSF.updateConfig();
        assertEquals("Trade Quotes: MAX_QUOTES", tradeConfigJSF.getResult());
    }
}