/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
    private EntityManager entityManager;
    @Mock
    private EntityManager mockEntityManager;
    @InjectMocks
    private TradeSLSBBean tradeslsbbean;
    @Mock
    private AccountProfileDataBean accountProfileDataBean;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;
    @Mock
    private OrderDataBean orderDataBean;
    @Mock
    private TradeConfig tradeConfig;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_iMHj0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            double result = tradeSLSBBean.investmentReturn(100, 120);
            assertEquals(0.2, result, 0.01);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderNullOrder_DqGX0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = null;
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(null, true);
            Assertions.assertNull(result);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_JPNm0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int result = tradeSLSBBean.getImpl();
        assertEquals(TradeConfig.EJB3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyNullUserID_ULql1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy(null, "AAPL", 100.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyNullSymbol_pvVI2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("123", null, 100.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyInvalidOrderProcessingMode_mIsC3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("123", "AAPL", 100.0, 5);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeInvalid_fOIr2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("user1", 1, 10);
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertEquals("TradeSLSBBean:sell(user1,1)", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellException_zIQS3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSellOrder_ehjm3_kVhS0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(new AccountDataBean());
        order.setQuote(new QuoteDataBean());
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
            Assertions.assertNotNull(result);
        } catch (Exception e) {
        }
    }
}