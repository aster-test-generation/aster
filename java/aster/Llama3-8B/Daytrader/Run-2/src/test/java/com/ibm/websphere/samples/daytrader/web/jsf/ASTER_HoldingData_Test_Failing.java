/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_ktOK0() {
        HoldingData holdingData = new HoldingData();
        String expected = "Expected quote ID";
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDate_JLJS0() {
        HoldingData holdingData = new HoldingData();
        Date expected = new Date();
        Date actual = holdingData.getPurchaseDate();
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBasis_uTNY0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expected = new BigDecimal("10.0");
        BigDecimal actual = holdingData.getBasis();
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_ktOK0_fid1() {
        HoldingData holdingData = new HoldingData();
        String expected = "Expected quote ID";
        assertEquals(expected, holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBasis_uTNY0_fid1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expected = new BigDecimal("10.0");
        BigDecimal actual = holdingData.getBasis();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_Uexx0_Tgkb1_fid1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expectedPrice = new BigDecimal("10.00");
        BigDecimal actualPrice = holdingData.getPurchasePrice();
        assertEquals(expectedPrice, actualPrice);
    }
}