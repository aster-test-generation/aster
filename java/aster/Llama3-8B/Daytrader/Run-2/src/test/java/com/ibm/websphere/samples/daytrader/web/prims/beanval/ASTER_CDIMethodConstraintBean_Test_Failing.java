/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CDIMethodConstraintBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHitCount_with_null_input_UfWP1() {
        CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
        LocalDateTime now = null;
        int expected = 0;
        int actual = bean.getHitCount(now);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHitCount_with_past_input_zSQc2() {
        CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
        LocalDateTime now = LocalDateTime.now().minusDays(1);
        int expected = 0;
        int actual = bean.getHitCount(now);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHitCount_with_future_input_LHFG3() {
        CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
        LocalDateTime now = LocalDateTime.now().plusDays(1);
        int expected = 1;
        int actual = bean.getHitCount(now);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHitCount_with_null_input_UfWP1_fid1() {
        CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
        LocalDateTime now = null;
        int expected = 3;
        int actual = bean.getHitCount(now);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHitCount_with_past_input_zSQc2_fid1() {
        CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
        LocalDateTime now = LocalDateTime.now().minusDays(1);
        int expected = 4;
        int actual = bean.getHitCount(now);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHitCount_with_future_input_LHFG3_fid1() {
        CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
        LocalDateTime now = LocalDateTime.now().plusDays(1);
        int expected = 2;
        int actual = bean.getHitCount(now);
        assertEquals(expected, actual);
    }
}