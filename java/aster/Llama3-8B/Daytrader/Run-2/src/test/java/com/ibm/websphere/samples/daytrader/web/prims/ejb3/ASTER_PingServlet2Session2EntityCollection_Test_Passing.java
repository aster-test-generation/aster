/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2EntityCollection_Test_Passing {
    private static String initTime;
    private static int hitCount;
    @Mock
    private ServletConfig servletConfig;
    @InjectMocks
    private PingServlet2Session2EntityCollection pingservlet2session2entitycollection;
    HttpServletRequest httpServletRequest;
    HttpServletResponse httpServletResponse;
    private TradeServices tradeSLSBLocal;
    @Mock
    private HttpServletRequest request;
    @Mock
    private HttpServletResponse response;
    @Mock
    private Collection<?> holdingDataBeans;
    @Mock
    private Iterator<?> iterator;
    @Mock
    private HoldingDataBean holdingDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws ServletException, IOException {
        httpServletRequest = mock(HttpServletRequest.class);
        httpServletResponse = mock(HttpServletResponse.class);
        pingservlet2session2entitycollection = new PingServlet2Session2EntityCollection();
        // Arrange
        when(httpServletRequest.getMethod()).thenReturn("POST");
        // Act
        pingservlet2session2entitycollection.doPost(httpServletRequest, httpServletResponse);
        // Assert
        verify(httpServletRequest, times(1)).getMethod();
        verify(httpServletResponse, times(1)).sendError(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_iiSM0() {
        PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
        String result = servlet.getServletInfo();
        assertEquals("web primitive, tests Servlet to Session to Entity returning a collection of Entity EJBs", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_lrVh0_uQGq0() throws ServletException, IOException {
        PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        servlet.doGet(req, res);
        verify(res).setStatus(HttpServletResponse.SC_OK);
    }
}