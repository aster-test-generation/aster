/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Passing {
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @InjectMocks
    private DirectSLSBBean directSLSBBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_aoDz0() {
        directSLSBBean = new DirectSLSBBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_DdId0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        boolean twoPhase = true;
        try {
            OrderDataBean result = directSLSBBean.completeOrder(orderDataBean.getOrderID(), twoPhase);
            assertNotNull(result);
            assertEquals(orderDataBean.getPrice(), result.getPrice());
            assertEquals(orderDataBean.getQuantity(), result.getQuantity());
            assertEquals(orderDataBean.getOrderFee(), result.getOrderFee());
            assertEquals(orderDataBean.getSymbol(), result.getSymbol());
            assertEquals(orderDataBean.getOrderStatus(), result.getOrderStatus());
            assertEquals(orderDataBean.getOpenDate(), result.getOpenDate());
            assertEquals(orderDataBean.getCompletionDate(), result.getCompletionDate());
            assertEquals(orderDataBean.getOrderType(), result.getOrderType());
            assertEquals(orderDataBean.getAccount(), result.getAccount());
            assertEquals(orderDataBean.getHolding(), result.getHolding());
            assertEquals(orderDataBean.getQuote(), result.getQuote());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImpl_uLSA0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        int result = directSLSBBean.getImpl();
        assertEquals(TradeConfig.SESSION_TO_DIRECT, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_sqcX0_CqAL0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        double rnd1 = 1.0;
        double rnd2 = 2.0;
        double expected = 0.0;
        double actual = 0.0;
        try {
            actual = directSLSBBean.investmentReturn(rnd1, rnd2);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual, 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_RHtW0_EYxh0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            OrderDataBean result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
            assertNotNull(result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}