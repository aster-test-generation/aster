/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingReentryServlet_Test_Passing {
    @Mock
    ServletConfig config;
    @Mock
    HttpServlet httpServlet;
    @InjectMocks
    PingReentryServlet pingReentryServlet;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    ServletOutputStream servletOutputStream;
    @Mock
    HttpServletRequest httpServletRequest;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        MockitoAnnotations.openMocks(this);
        pingReentryServlet.init(config);
        verify(httpServlet).init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        pingReentryServlet = new PingReentryServlet();
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        pingReentryServlet.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse).getOutputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_TYdZ0() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doPost(req, res);
        assertEquals(HttpServletResponse.SC_OK, res.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_ZShf0() {
        PingReentryServlet servlet = new PingReentryServlet();
        String actual = servlet.getServletInfo();
        String expected = "Basic dynamic HTML generation through a servlet";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_WhenNumReentriesIsZero_ShouldPrintZero() throws Exception {
        pingReentryServlet = new PingReentryServlet();
        // Set up the expected behavior
        when(request.getParameter("numReentries")).thenReturn("0");
        when(response.getOutputStream()).thenReturn(servletOutputStream);
        // Call the method under test
        pingReentryServlet.doGet(request, response);
        // Verify the expected behavior
        verify(response).setContentType("text/html");
        verify(servletOutputStream).println("0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_WhenNumReentriesIsPositive_ShouldMakeHttpCallAndPrintResponse() throws Exception {
        pingReentryServlet = new PingReentryServlet();
        // Set up the expected behavior
        when(request.getParameter("numReentries")).thenReturn("1");
        when(request.getParameter("sleep")).thenReturn("1000");
        when(response.getOutputStream()).thenReturn(servletOutputStream);
        // Call the method under test
        pingReentryServlet.doGet(request, response);
        // Verify the expected behavior
        verify(response).setContentType("text/html");
        verify(servletOutputStream).println("1" + "response");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNumReentriesAndSleepParameters_bAcY0() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn("10");
        when(req.getParameter("sleep")).thenReturn("500");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNoNumReentriesParameter_OKVy1() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn(null);
        when(req.getParameter("sleep")).thenReturn("500");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNoSleepParameter_reoL2() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn("10");
        when(req.getParameter("sleep")).thenReturn(null);
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNoParameters_IqYd3() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn(null);
        when(req.getParameter("sleep")).thenReturn(null);
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNegativeNumReentriesParameter_KLzc4() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn("-10");
        when(req.getParameter("sleep")).thenReturn("500");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithZeroNumReentriesParameter_zSvM5() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn("0");
        when(req.getParameter("sleep")).thenReturn("500");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNegativeSleepParameter_NfUG6() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn("10");
        when(req.getParameter("sleep")).thenReturn("-500");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_IsOG2_qcvN0() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getParameter("numReentries")).thenReturn("1");
        when(request.getParameter("sleep")).thenReturn("1000");
        servlet.doGet(request, response);
    }
}