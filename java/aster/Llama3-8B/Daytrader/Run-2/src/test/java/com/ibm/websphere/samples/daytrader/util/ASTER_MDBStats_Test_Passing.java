/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MDBStats_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWhenMdbStatsIsNull_zwra0() {
        MDBStats mdbStats = MDBStats.getInstance();
        assertNotNull(mdbStats);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingNegativeTime_WryI3_nJsf0_5() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 2000, 1000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingSameTime_mPil2_qvwj0_3_fid3() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 2000);
        Assertions.assertEquals(2, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingNegativeTime_WryI3_nJsf0_3_fid3() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 2000, 1000);
        Assertions.assertEquals(1, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_LKbD1_XeOv0() {
        MDBStats mdbStats = MDBStats.getInstance();
        mdbStats.reset();
        assertEquals(true, true);
    }
}