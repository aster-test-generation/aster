/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2IncludeRcv_Test_Failing {
    @Mock
    private HttpServletRequest request;
    @Mock
    private HttpServletResponse response;
    private PingServlet2IncludeRcv pingservlet2includercv;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Given
        PingServlet2IncludeRcv pingservlet2includercv = new PingServlet2IncludeRcv();
        // When
        pingservlet2includercv.doPost(request, response);
        // Then
        Mockito.verify(request, Mockito.times(1)).getMethod();
        Mockito.verify(response, Mockito.times(1)).sendRedirect(Mockito.anyString());
    }
}