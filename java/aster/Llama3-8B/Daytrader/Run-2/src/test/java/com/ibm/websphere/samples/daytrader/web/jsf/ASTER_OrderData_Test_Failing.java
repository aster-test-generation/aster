/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_xHec0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL");
        BigDecimal price = orderData.getPrice();
        assertNull(new BigDecimal(100));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithNullPrice_MptA1() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL", null);
        BigDecimal price = orderData.getPrice();
        assertEquals(new BigDecimal(0), price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_bxgK0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Limit", 100, "AAPL");
        BigDecimal total = orderData.getTotal();
        assertNull(new BigDecimal("100.00"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_EEIy1_1() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Limit", 100, "AAPL");
        BigDecimal total = orderData.getTotal();
        orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal("100.00"), "Limit", 100, "AAPL");
        total = orderData.getTotal();
        orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Market", 100, "AAPL");
        total = orderData.getTotal();
        assertNull(new BigDecimal("100.00"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_xHec0_fid1() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL");
        BigDecimal price = orderData.getPrice();
        assertEquals(new BigDecimal(100), price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithNullPrice_MptA1_fid1() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL", null);
        BigDecimal price = orderData.getPrice();
        assertEquals(null, price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_bxgK0_fid1() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Limit", 100, "AAPL");
        BigDecimal total = orderData.getTotal();
        assertEquals(new BigDecimal("100.00"), total);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_EEIy1() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Limit", 100, "AAPL");
        BigDecimal total = orderData.getTotal();
        assertEquals(new BigDecimal("100.00"), total);
        orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal("100.00"), "Limit", 100, "AAPL");
        total = orderData.getTotal();
        assertEquals(new BigDecimal("100.00"), total);
        orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Market", 100, "AAPL");
        total = orderData.getTotal();
        assertEquals(new BigDecimal("100.00"), total);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_EEIy1_1_fid2() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Limit", 100, "AAPL");
        BigDecimal total = orderData.getTotal();
        orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal("100.00"), "Limit", 100, "AAPL");
        total = orderData.getTotal();
        orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Market", 100, "AAPL");
        total = orderData.getTotal();
        assertEquals(new BigDecimal("100.00"), total);
    }
}