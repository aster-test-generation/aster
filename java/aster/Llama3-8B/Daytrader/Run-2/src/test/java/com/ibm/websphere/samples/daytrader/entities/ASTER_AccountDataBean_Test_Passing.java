/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLoginCount_nGGu0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, null);
        accountDataBean.setLoginCount(10);
        assertEquals(10, accountDataBean.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_BfJH0_1() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_BfJH0_3() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_BfJH0_5() {
        AccountDataBean result = AccountDataBean.getRandomInstance();
        assertEquals(new Date(), result.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogoutCount_QgeA1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, null);
        accountDataBean.setLogoutCount(5);
        assertEquals(5, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastLogin_yjya1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        Date lastLogin = new Date();
        accountDataBean.setLastLogin(lastLogin);
        assertEquals(lastLogin, accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullProfile_TBlf2() {
        AccountDataBean account = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, null);
        try {
            account.login("password");
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_AccountIDNotNull_KqBp0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        int hashCode = accountDataBean.hashCode();
        Assertions.assertEquals(hashCode, 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_AccountIDNull_JBFg1() {
        AccountDataBean accountDataBean = new AccountDataBean(null, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        int hashCode = accountDataBean.hashCode();
        Assertions.assertEquals(hashCode, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_jbyQ0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
        List<HoldingDataBean> holdings = new ArrayList<>();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdings.add(holdingDataBean);
        accountDataBean.setHoldings(holdings);
        assert accountDataBean.getHoldings().equals(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_AYIA0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        Date creationDate = accountDataBean.getCreationDate();
        assertEquals(new Date(), creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLogoutCount_YwmF1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        int logoutCount = accountDataBean.getLogoutCount();
        assertEquals(5, logoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_pLvN0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID");
        String result = accountDataBean.toHTML();
        assertEquals("<BR>Account Data for account: <B>1</B><LI>   loginCount:10</LI><LI>  logoutCount:5</LI><LI>    lastLogin:" + accountDataBean.getLastLogin() + "</LI><LI> creationDate:" + accountDataBean.getCreationDate() + "</LI><LI>      balance:100.0</LI><LI>  openBalance:100.0</LI><LI>    profileID:profileID</LI>", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountID_KBMl1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setAccountID(123);
        assertEquals(123, accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLoginCount_Suzg1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        int loginCount = accountDataBean.getLoginCount();
        assertEquals(10, loginCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID2_BLJu1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        Integer accountID = accountDataBean.getAccountID();
        assertEquals(1, accountID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_ZLXL0() {
        AccountDataBean obj1 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        boolean result = obj1.equals(obj1);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_gMhj1() {
        AccountDataBean obj1 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        AccountDataBean obj2 = new AccountDataBean(2, 2, 2, new Date(), new Date(), new BigDecimal(2), new BigDecimal(2), "2");
        boolean result = obj1.equals(obj2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_ztpV2() {
        AccountDataBean obj1 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        boolean result = obj1.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_zGOp3() {
        AccountDataBean obj1 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Object obj2 = new Object();
        boolean result = obj1.equals(obj2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentAccountID_TFLA4() {
        AccountDataBean obj1 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        AccountDataBean obj2 = new AccountDataBean(2, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        boolean result = obj1.equals(obj2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_FbCn1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        accountDataBean.logout();
        assertEquals(1, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_sKNH0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.00"), new java.math.BigDecimal("100.00"), "profileID");
        String expected = "\n\tAccount Data for account: 1\n\t\t   loginCount:10\n\t\t  logoutCount:5\n\t\t    lastLogin:" + accountDataBean.getLastLogin() + "\n\t\t creationDate:" + accountDataBean.getCreationDate() + "\n\t\t      balance:100.00\n\t\t  openBalance:100.00\n\t\t    profileID:profileID";
        assertEquals(expected, accountDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance_ruHN1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, null);
        BigDecimal openBalance = BigDecimal.valueOf(100);
        accountDataBean.setOpenBalance(openBalance);
        assertEquals(openBalance, accountDataBean.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfileID_wqkL0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        String profileID = accountDataBean.getProfileID();
        assertEquals("profileID", profileID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_aQWE1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date creationDate = new Date();
        accountDataBean.setCreationDate(creationDate);
        assertEquals(creationDate, accountDataBean.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfileID_SXbs0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "oldProfileID");
        accountDataBean.setProfileID("newProfileID");
        assertEquals("newProfileID", accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfile_bjHJ0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        accountDataBean.setProfile(accountProfileDataBean);
        assertEquals(accountProfileDataBean, accountDataBean.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrders_ImNC1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Collection<OrderDataBean> orders = new ArrayList<>();
        OrderDataBean orderDataBean = new OrderDataBean();
        orders.add(orderDataBean);
        accountDataBean.setOrders(orders);
        assertEquals(orders, accountDataBean.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLogin_UYLA0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        Date lastLogin = accountDataBean.getLastLogin();
        assertEquals(lastLogin, new Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBalance_xqTn0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
        BigDecimal balance = accountDataBean.getBalance();
        assertEquals(new BigDecimal("100.0"), balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalance_laWt0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, null, null, BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
        BigDecimal openBalance = accountDataBean.getOpenBalance();
        assertEquals(BigDecimal.ZERO, openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_rran0_ijeS0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
        Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalance_Fjtw0_KOyg0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        BigDecimal balance = BigDecimal.valueOf(100);
        accountDataBean.setBalance(balance);
        assertEquals(balance, accountDataBean.getBalance());
    }
}