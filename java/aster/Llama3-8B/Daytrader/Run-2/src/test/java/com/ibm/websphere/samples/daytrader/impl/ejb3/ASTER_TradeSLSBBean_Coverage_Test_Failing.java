/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import java.math.BigDecimal;
import java.util.concurrent.Future;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import javax.transaction.RollbackException;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeSLSBBean_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginValidUser_iwwF0() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.login("validUser", "validPassword");
    assertNotNull(accountDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginValidUserWithNullPassword_SnsR2() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.login("validUser", null);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("No such user: validUser", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginValidUserWithEmptyPassword_GmIu3() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.login("validUser", "");
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("No such user: validUser", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginValidUserWithNullUserID_UsXp4() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.login(null, "validPassword");
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("No such user: null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginValidUserWithEmptyUserID_oaeN5() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.login("", "validPassword");
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("No such user: ", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginValidUserWithValidPassword_iUEc6() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.login("validUser", "validPassword");
    assertNotNull(accountDataBean);
    assertEquals("validUser", accountDataBean.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_pXJB0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean expected = new QuoteDataBean();
        expected.setSymbol("symbol");
        expected.setCompanyName("companyName");
        expected.setPrice(BigDecimal.valueOf(10));
        expected.setOpen(BigDecimal.valueOf(5));
        expected.setLow(BigDecimal.valueOf(3));
        expected.setChange(2.5);
        expected.setHigh(BigDecimal.valueOf(15));
        expected.setVolume(1000);
        QuoteDataBean actual = tradeSLSBBean.getQuote("symbol");
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_FEzl0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderType("buy");
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertEquals("closed", order.getOrderStatus());
        assertNotNull(order.getHolding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_rbmP1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderType("sell");
        order.setHolding(HoldingDataBean.getRandomInstance());
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertEquals("closed", order.getOrderStatus());
        assertNull(order.getHolding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderNullHolding_aMQi2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderType("sell");
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertEquals("closed", order.getOrderStatus());
        assertNull(order.getHolding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_PublishConfigFalse_ReturnsImmediately_XDOf0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean("symbol", "company", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(5), BigDecimal.valueOf(3), BigDecimal.valueOf(15), 500);
        BigDecimal oldPrice = BigDecimal.valueOf(5);
        BigDecimal changeFactor = BigDecimal.valueOf(1.1);
        double sharesTraded = 100;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_PublishConfigTrue_SendsMessage_WOID1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        TradeConfig.setPublishQuotePriceChange(true);
        QuoteDataBean quote = new QuoteDataBean("symbol", "company", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(5), BigDecimal.valueOf(3), BigDecimal.valueOf(15), 500);
        BigDecimal oldPrice = BigDecimal.valueOf(5);
        BigDecimal changeFactor = BigDecimal.valueOf(1.1);
        double sharesTraded = 100;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_QmQh0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean("symbol");
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "buy";
        double quantity = 10.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNewAccount_vdYX1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNotNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullUserID_NXZK2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullPassword_cFrx3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = null;
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullFullname_qkkc4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = null;
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullAddress_homZ5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = "fullname";
        String address = null;
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullEmail_jGzp6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = null;
        String creditcard = "creditcard";
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullCreditcard_mQyk7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "newUser";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = null;
        BigDecimal openBalance = BigDecimal.valueOf(1000);
        AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNull(account);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_LKrH0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        AccountProfileDataBean expected = new AccountProfileDataBean();
        expected.setUserID(userID);
        expected.setAddress("testAddress");
        expected.setEmail("testEmail");
        expected.setFullName("testFullName");
        expected.setPassword("testPassword");
        expected.setCreditCard("testCreditCard");
        AccountProfileDataBean actual = tradeSLSBBean.getAccountProfileData(userID);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NoUpdate_tuZj0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
        Assertions.assertEquals(new QuoteDataBean(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptySymbol_KMkq1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("", BigDecimal.ONE, 10);
        Assertions.assertEquals(new QuoteDataBean(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NullSymbol_hOIu2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(null, BigDecimal.ONE, 10);
        Assertions.assertEquals(new QuoteDataBean(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_CreateNamedQuery_kQZY3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
        Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_GetPrice_LKMU6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
        Assertions.assertNotNull(result.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_GetOpen_TTII7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
        Assertions.assertNotNull(result.getOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_GetLow_Ywez8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
        Assertions.assertNotNull(result.getLow());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_GetChange_IQue9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
        Assertions.assertNotNull(result.getChange());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_GetHigh_Btyt10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
        Assertions.assertNotNull(result.getHigh());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_GetSymbol_aVjg11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
        Assertions.assertNotNull(result.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_GetVolume_hYsy12() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
        Assertions.assertNotNull(result.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_UpdateChange_LOIy14() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_PqSg0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "test_user_id";
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(userID);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ReturnsAccountDataBean_swfu4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "test_user_id";
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(userID);
        assertNotNull(accountDataBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_amZP0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        EntityManager entityManager = null; // Initialize the EntityManager
        HoldingDataBean expectedHolding = new HoldingDataBean(); // Initialize the expected HoldingDataBean
        HoldingDataBean actualHolding = tradeSLSBBean.getHolding(1); // Call the method under test
        assertEquals(expectedHolding, actualHolding); // Assert the result
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_ztdI0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(1, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithNullOrderID_rmio1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(null, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithZeroOrderID_QjiH3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(0, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithTwoPhaseFalse_HXKW4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(1, false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhaseTwo_VdjJ12() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(2, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhaseThree_Jzvn13() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(3, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhaseFour_jeAX14() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(4, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhaseFive_vyfv15() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(5, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhaseSix_UmLq16() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(6, true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_INLt0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(1, true);
        assertNotNull(future);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseWithContextException_givX1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.pingTwoPhase("symbol");
            fail("Expected exception");
        } catch (Exception e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithValidInputs_nlNp0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithAccountDataBean_vBlk7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        OrderDataBean order = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithQuoteDataBean_HIfy8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean();
        OrderDataBean order = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithHoldingDataBean_OALF9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithOrderDataBean_chwE10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = new OrderDataBean();
        OrderDataBean result = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithValidUserIDAndHoldingID_urlx0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("userID", 1, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithOrderProcessingModeAsynch_ztKF6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithOrderProcessingModeAsynch2Phase_hOGz7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithHoldingNotSold_ygbn9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("userID", 2, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginValidUserWithValidPassword_iUEc6_2() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.login("validUser", "validPassword");
    assertEquals("validUser", accountDataBean.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_FEzl0_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderType("buy");
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertEquals("closed", order.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_FEzl0_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderType("buy");
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertNotNull(order.getHolding());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_rbmP1_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderType("sell");
        order.setHolding(HoldingDataBean.getRandomInstance());
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertEquals("closed", order.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_rbmP1_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderType("sell");
        order.setHolding(HoldingDataBean.getRandomInstance());
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertNull(order.getHolding());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderNullHolding_aMQi2_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderType("sell");
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertEquals("closed", order.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderNullHolding_aMQi2_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(AccountDataBean.getRandomInstance());
        order.setQuote(QuoteDataBean.getRandomInstance());
        order.setQuantity(10.0);
        order.setPrice(BigDecimal.valueOf(10.0));
        order.setOrderType("sell");
        order = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertNull(order.getHolding());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCancelOrder_EntityManagerFindReturnsNull_RRxO1_ZHol0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.cancelOrder(1, true);
    assertEquals(true, true);
}
}