/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercentPositive_SlNo0() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("50"));
        BigDecimal result = bean.getGainPercent();
        assertEquals(new BigDecimal("100.0"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercentNegative_VOQC1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("50"));
        bean.setOpenTSIA(new BigDecimal("100"));
        BigDecimal result = bean.getGainPercent();
        assertEquals(new BigDecimal("-50.0"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HBqh0() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getTSIA());
        assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getOpenTSIA());
        assertEquals(TradeConfig.rndQuantity(), result.getVolume());
        assertEquals(5, result.getTopGainers().size());
        assertEquals(5, result.getTopLosers().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_tpgA0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopGainers_bgXd1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
        Assertions.assertNotNull(topGainers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopLosers_HvPM1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
        Assertions.assertTrue(topLosers.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainers_YjTZ1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
        Assertions.assertTrue(result.contains("TSIA:100"));
        Assertions.assertTrue(result.contains("openTSIA:200"));
        Assertions.assertTrue(result.contains("volume:300"));
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopLosers_hIVB2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
        Assertions.assertTrue(result.contains("TSIA:100"));
        Assertions.assertTrue(result.contains("openTSIA:200"));
        Assertions.assertTrue(result.contains("volume:300"));
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
        Assertions.assertTrue(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJsonWithoutTopGainersAndLosers_OzvL1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(BigDecimal.valueOf(100));
        marketSummaryDataBean.setOpenTSIA(BigDecimal.valueOf(50));
        marketSummaryDataBean.setVolume(1000);
        String summaryDate = "2022-01-01";
        assertEquals("{\"tsia\":100,\"volume\":1000,\"date\":\"2022-01-01\"}", marketSummaryDataBean.toJSON().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJsonWithNullTopGainersAndLosers_IQvx2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(BigDecimal.valueOf(100));
        marketSummaryDataBean.setOpenTSIA(BigDecimal.valueOf(50));
        marketSummaryDataBean.setVolume(1000);
        marketSummaryDataBean.setTopGainers(null);
        marketSummaryDataBean.setTopLosers(null);
        String summaryDate = "2022-01-01";
        assertEquals("{\"tsia\":100,\"volume\":1000,\"date\":\"2022-01-01\"}", marketSummaryDataBean.toJSON().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HBqh0_1() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HBqh0_2() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HBqh0_3() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndQuantity(), result.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainers_YjTZ1_5() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopLosers_hIVB2_6() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainers_Empty_hvTS2_qneu0_6() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Null_TopGainers_TopLosers_lnIR4_RdZx0_1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, null, null);
        String result = bean.toString();
        Assertions.assertTrue(result.contains("Market Summary at: Sat Jan 01 00:00:00 UTC 2022"));
    }
}