/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfig_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserID_JScW0() {
        TradeConfig tradeConfig = new TradeConfig();
        String userID = tradeConfig.nextUserID();
        assertEquals("uid:1", userID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_NullPointerException_mVvi5() {
        String orderType = null;
        try {
            TradeConfig.getOrderFee(orderType);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_PositiveValue_dtWQ0_1() {
        TradeConfig tradeConfig = new TradeConfig();
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndNewUserID_ExceptionInGetHostname_FullyQualifiedDomain_weEW2_bddv1() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = tradeConfig.rndBalance();
    assertEquals("1000000", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextUserID_MaxUsersReached_kDuB1_LtRd1() {
    TradeConfig tradeConfig = new TradeConfig();
    String userID = tradeConfig.rndBalance();
    assertEquals("1000000", userID);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndBalance_kZYI1() {
    TradeConfig tradeConfig = new TradeConfig();
    assertEquals("1000000", TradeConfig.rndBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWebInterfaceInvalidValue_ZTvq11_bwUn1() {
    TradeConfig.setConfigParam("WebInterface", "invalid");
    assertEquals("1000000", TradeConfig.rndBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrimIterationsInvalidValue_qDOz17_PCcv1() {
    TradeConfig.setConfigParam("primIterations", "invalid");
    assertEquals("1000000", TradeConfig.rndBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAccessModeInvalidValue_woet9_Atpu1() {
    TradeConfig.setConfigParam("accessMode", "invalid");
    assertEquals("1000000", TradeConfig.rndBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMultipleConfigParamsInvalidValues_qmPh19_DrNX0() {
    TradeConfig tradeConfig = new TradeConfig();
    String result = TradeConfig.rndBalance();
    assertEquals("1000000", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConfigParamOrder_ZARm20_thZq1() {
    TradeConfig.setConfigParam("orderProcessingMode", "value1");
    TradeConfig.setConfigParam("accessMode", "value2");
    assertEquals("1000000", TradeConfig.rndBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaxUsersInvalidValue_meak13_Qjwf1_fid2() {
    TradeConfig.setConfigParam("maxUsers", "invalid");
    assertEquals("1000000", TradeConfig.rndBalance());
}
}