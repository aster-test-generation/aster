/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2TwoPhase_Test_Passing {
    private static int hitCount;
    private static String initTime;
    @Mock
    private ServletConfig config;
    @InjectMocks
    private PingServlet2TwoPhase pingservlet2twophase;
    HttpServletRequest httprequest;
    HttpServletResponse httpservletresponse;
    private TradeServices tradeSLSBLocal;
    private HttpServlet httpservlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws ServletException, IOException {
        httprequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingservlet2twophase = new PingServlet2TwoPhase();
        // Arrange
        when(httprequest.getMethod()).thenReturn("POST");
        // Act
        pingservlet2twophase.doPost(httprequest, httpservletresponse);
        // Assert
        verify(httprequest, times(1)).getMethod();
        verify(httpservletresponse, times(1)).sendRedirect(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_eUAn0() {
        PingServlet2TwoPhase pingServlet2TwoPhase = new PingServlet2TwoPhase();
        String result = pingServlet2TwoPhase.getServletInfo();
        assertEquals("web primitive, tests Servlet to Session to Entity EJB and JMS -- 2-phase commit path", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_GCfL0_1() throws ServletException {
        hitCount = 0;
        initTime = null;
        pingservlet2twophase.init(config);
        Mockito.verify(config, Mockito.times(1)).getServletContext();
        Mockito.verify(pingservlet2twophase, Mockito.times(1)).getServletConfig();
        Assertions.assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_GCfL0_2() throws ServletException {
        hitCount = 0;
        initTime = null;
        pingservlet2twophase.init(config);
        Mockito.verify(config, Mockito.times(1)).getServletContext();
        Mockito.verify(pingservlet2twophase, Mockito.times(1)).getServletConfig();
        Assertions.assertNull(initTime);
    }
}