/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteData_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainHTML_OClC0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        String expectedGainHTML = FinancialUtils.printGainHTML(BigDecimal.ZERO);
        String actualGainHTML = quoteData.getGainHTML();
        assertEquals(expectedGainHTML, actualGainHTML);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getChangeHTML_with_negative_change_QLkl0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), "AAPL");
        String htmlString = quoteData.getChangeHTML();
        assertEquals("<FONT color=\"#cc0000\">-10.00</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getChangeHTML_with_positive_change_Qnsx1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(90.0), BigDecimal.valueOf(100.0), "AAPL");
        String htmlString = quoteData.getChangeHTML();
        assertEquals("<FONT color=\"#009900\">10.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetPrice_lLeG0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(90), "ABC", BigDecimal.valueOf(110), BigDecimal.valueOf(80), "XYZ", 900.0, 10.0);
        assertEquals(BigDecimal.valueOf(100), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithNullPrice_iizG1() {
        QuoteData quoteData = new QuoteData(null, BigDecimal.ZERO, "symbol");
        quoteData.setChange(100.0);
        assertEquals(100.0, quoteData.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithNullOpen_qdyP2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, null, "symbol");
        quoteData.setChange(100.0);
        assertEquals(100.0, quoteData.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithAllNull_VbdC4() {
        QuoteData quoteData = new QuoteData(null, null, null);
        quoteData.setChange(100.0);
        assertEquals(100.0, quoteData.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getChange_nullPrice_mmPl4() {
        QuoteData quoteData = new QuoteData(null, BigDecimal.ZERO, "symbol");
        double change = quoteData.getChange();
        assertTrue(Double.isNaN(change));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getChange_nullOpen_uHim5() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, null, "symbol");
        double change = quoteData.getChange();
        assertTrue(Double.isNaN(change));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHighWithNullHigh_Bbec2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", null, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        BigDecimal high = quoteData.getHigh();
        assertNull(high);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHighWithNullOpen_KDCD6() {
        QuoteData quoteData = new QuoteData(null, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        BigDecimal high = quoteData.getHigh();
        assertNotNull(high);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHighWithNegativeOpen_AHyX9() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE.negate(), BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", -1.0, -1.0);
        BigDecimal high = quoteData.getHigh();
        assertEquals(BigDecimal.ONE.negate(), high);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHighWithNullPrice_Hfuo10() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, null, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        BigDecimal high = quoteData.getHigh();
        assertNotNull(high);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_GiNY0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        BigDecimal gainPercent = quoteData.getGainPercent();
        assertNotNull(gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGainPercentHTML_Cmft0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        String expected = FinancialUtils.printGainPercentHTML(BigDecimal.ZERO);
        String actual = quoteData.getGainPercentHTML();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetRange_UVog0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ONE, "symbol");
        String range = quoteData.getRange();
        assertEquals("0.00-1.00", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetPrice_lLeG0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(90), "ABC", BigDecimal.valueOf(110), BigDecimal.valueOf(80), "XYZ", 1000.0, 10.0);
        assertEquals(BigDecimal.valueOf(100), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_xDLU0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        assertEquals(BigDecimal.ZERO, quoteData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpen2_GWch1_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), "ABC", BigDecimal.valueOf(110.0), BigDecimal.valueOf(80.0), "XYZ", 1000.0, 10.0);
        BigDecimal open = quoteData.getOpen();
        assertEquals(BigDecimal.valueOf(90.0), open);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getChange_nullSymbol_wKZu6_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, null);
        double change = quoteData.getChange();
        assertTrue(Double.isNaN(change));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHighWithNegativeOpen_AHyX9_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE.negate(), BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        BigDecimal high = quoteData.getHigh();
        assertEquals(BigDecimal.ONE.negate(), high);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNegativePrice_qOfl2_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(BigDecimal.valueOf(-1));
        assertEquals(BigDecimal.ZERO, quoteData.getPrice());
    }
}