/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeDirect_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInterval0_fSpj0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(0);
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryIntervalNegative_GFTS1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(-1);
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryIntervalPositive_IjGY2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(1);
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_aQjD9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternalNull_jHpR10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummarySynchronizedOldNextMarketSummaryFetchTrue_khwE15() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithValidParameters_esqa0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.queueOrder(1, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithExceptionHandling_cgZe11() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.queueOrder(1, true);
        } catch (Exception e) {
            fail("Expected no exception, but got " + e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_ConnGetSuccess_lCJD0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String symbol = "ABC";
        String companyName = "Company ABC";
        BigDecimal price = new BigDecimal("10.0");
        QuoteDataBean quoteData = tradeDirect.createQuote(symbol, companyName, price);
        assertNotNull(quoteData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_jmjD0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String symbol = "ABC";
        BigDecimal changeFactor = BigDecimal.valueOf(1.1);
        double sharesTraded = 100;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullUserID_WoFe14() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = null;
        String password = "password";
        String fullname = "Fullname";
        String address = "Address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal("100.00");
        AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNull(accountData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullPassword_BQBU15() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "userID";
        String password = null;
        String fullname = "Fullname";
        String address = "Address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal("100.00");
        AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNull(accountData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullFullname_jekh16() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "userID";
        String password = "password";
        String fullname = null;
        String address = "Address";
        String email = "email";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddToHoldingDataBeans_yMIZ6() throws Exception {
        Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
        HoldingDataBean holdingData = new HoldingDataBean();
        holdingDataBeans.add(holdingData);
        assertEquals(1, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataNullAccountProfileData_DrlV0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData(null);
        assertNull(accountProfileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithValidCredentials_yPyf4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        String password = "testPassword";
        AccountDataBean accountData = tradeDirect.login(userID, password);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidCredentials_dzCV5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        String password = "wrongPassword";
        try {
            tradeDirect.login(userID, password);
            fail("Expected exception");
        } catch (Exception e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNonExistingUser_TNZT6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "nonExistingUser";
        try {
            tradeDirect.login(userID, "testPassword");
            fail("Expected exception");
        } catch (Exception e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullUserID_oQKJ7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = null;
        try {
            tradeDirect.login(userID, "testPassword");
            fail("Expected exception");
        } catch (Exception e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullPassword_tZQu8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        String password = null;
        try {
            tradeDirect.login(userID, password);
            fail("Expected exception");
        } catch (Exception e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithEmptyUserID_IxQE9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "";
        try {
            tradeDirect.login(userID, "testPassword");
            fail("Expected exception");
        } catch (Exception e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithEmptyPassword_PbJi10() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        String password = "";
        try {
            tradeDirect.login(userID, password);
            fail("Expected exception");
        } catch (Exception e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOrderDataBean_Ppib6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = new ArrayList<OrderDataBean>();
        OrderDataBean orderData = new OrderDataBean();
        orderDataBeans.add(orderData);
        assertEquals(1, orderDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_cpEz10() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders(userID);
        assertNotNull(orderDataBeans);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersNullUserID_yaFU11() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders(null);
        assertNotNull(orderDataBeans);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ConnnectionNull_ZdsE0() throws java.lang.Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.buy(null, "symbol", 1.0, TradeConfig.SYNCH);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_SymbolNull_IPfD2() throws java.lang.Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.buy("userID", null, 1.0, TradeConfig.SYNCH);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_QuantityNegative_WTTQ4() throws java.lang.Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.buy("userID", "symbol", -1.0, TradeConfig.SYNCH);
            fail("Expected Exception");
        } catch (Exception e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_CreateOrder_TkOn8() throws java.lang.Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.buy("userID", "symbol", 1.0, TradeConfig.SYNCH);
        assertNotNull(orderData);
    }
}