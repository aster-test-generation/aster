/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenTSIA_mTNz0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setOpenTSIA(BigDecimal.valueOf(10));
        assertEquals(BigDecimal.valueOf(10), marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIANull_abvI1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setOpenTSIA(null);
        assertNull(marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTSIA_cVug0() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        BigDecimal value = new BigDecimal("10.00");
        bean.setTSIA(value);
        assertEquals(value, bean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolumeNegative_dhvG1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setVolume(-100.0);
        assertEquals(-100.0, bean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopLosersNull_YdxF1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTopLosers(null);
        assertEquals(null, bean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummaryDate_aDmP0() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        Date summaryDate = bean.getSummaryDate();
        assertEquals(null, summaryDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSummaryDateNull_pMjr1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setSummaryDate(null);
        assertNull(marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithValues_Hmhe1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        marketSummaryDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIA_ANDZ0() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(BigDecimal.valueOf(10));
        assertEquals(BigDecimal.valueOf(10), bean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIANegative_RDqd1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(BigDecimal.valueOf(-10));
        assertEquals(BigDecimal.valueOf(-10), bean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIAZero_DNQh2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(BigDecimal.valueOf(0));
        assertEquals(BigDecimal.valueOf(0), bean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_rTpO1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setVolume(100.0);
        assertEquals(100.0, marketSummaryDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeOnly_jbPF0() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
        Assertions.assertTrue(result.contains("TSIA:100"));
        Assertions.assertTrue(result.contains("openTSIA:200"));
        Assertions.assertTrue(result.contains("volume:300"));
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainersAndLosers_Lfil3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
        Assertions.assertTrue(result.contains("TSIA:100"));
        Assertions.assertTrue(result.contains("openTSIA:200"));
        Assertions.assertTrue(result.contains("volume:300"));
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
        Assertions.assertTrue(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainersNull_gbIC1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTopGainers(null);
        assertNull(bean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HBqh0_4() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(5, result.getTopGainers().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HBqh0_5() {
        MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
        assertEquals(5, result.getTopLosers().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeOnly_jbPF0_1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeOnly_jbPF0_2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("TSIA:100"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeOnly_jbPF0_3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("openTSIA:200"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeOnly_jbPF0_4() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("volume:300"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeOnly_jbPF0_5() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeOnly_jbPF0_6() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainers_YjTZ1_1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainers_YjTZ1_2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("TSIA:100"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainers_YjTZ1_3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("openTSIA:200"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainers_YjTZ1_4() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("volume:300"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainers_YjTZ1_6() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopLosers_hIVB2_1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopLosers_hIVB2_2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("TSIA:100"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopLosers_hIVB2_3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("openTSIA:200"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopLosers_hIVB2_4() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("volume:300"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopLosers_hIVB2_5() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainersAndLosers_Lfil3_1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainersAndLosers_Lfil3_2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("TSIA:100"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainersAndLosers_Lfil3_3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("openTSIA:200"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainersAndLosers_Lfil3_4() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("volume:300"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainersAndLosers_Lfil3_5() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainersAndLosers_Lfil3_6() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TSIA_OpenTSIA_Gain_Percent_Volume_Mbfe0_qaLL0_1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setTopGainers(new ArrayList<>());
        bean.setTopLosers(new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("Market Summary at: " + bean.getSummaryDate()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TSIA_OpenTSIA_Gain_Percent_Volume_Mbfe0_qaLL0_2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setTopGainers(new ArrayList<>());
        bean.setTopLosers(new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("TSIA:100"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TSIA_OpenTSIA_Gain_Percent_Volume_Mbfe0_qaLL0_3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setTopGainers(new ArrayList<>());
        bean.setTopLosers(new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("openTSIA:200"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TSIA_OpenTSIA_Gain_Percent_Volume_Mbfe0_qaLL0_4() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setTopGainers(new ArrayList<>());
        bean.setTopLosers(new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("volume:300"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainers_Empty_hvTS2_qneu0_1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("Market Summary at: " + bean.getSummaryDate()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainers_Empty_hvTS2_qneu0_2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("TSIA:100"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainers_Empty_hvTS2_qneu0_3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("openTSIA:200"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainers_Empty_hvTS2_qneu0_4() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("gain:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainers_Empty_hvTS2_qneu0_5() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("volume:300"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Null_TopGainers_TopLosers_lnIR4_RdZx0_2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, null, null);
        String result = bean.toString();
        Assertions.assertTrue(result.contains("TSIA:100"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Null_TopGainers_TopLosers_lnIR4_RdZx0_3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, null, null);
        String result = bean.toString();
        Assertions.assertTrue(result.contains("openTSIA:200"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Null_TopGainers_TopLosers_lnIR4_RdZx0_4() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, null, null);
        String result = bean.toString();
        Assertions.assertTrue(result.contains("gain:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Null_TopGainers_TopLosers_lnIR4_RdZx0_5() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, null, null);
        String result = bean.toString();
        Assertions.assertTrue(result.contains("volume:300"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Null_TopGainers_TopLosers_lnIR4_RdZx0_6() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, null, null);
        String result = bean.toString();
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Null_TopGainers_TopLosers_lnIR4_RdZx0_7() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, null, null);
        String result = bean.toString();
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercentPositive_SlNo0_fid2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("50"));
        BigDecimal result = bean.getGainPercent();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercentNegative_VOQC1_fid2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("50"));
        bean.setOpenTSIA(new BigDecimal("100"));
        BigDecimal result = bean.getGainPercent();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopGainers_YjTZ1_5_fid2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topGainers = new ArrayList<>();
        topGainers.add(new QuoteDataBean());
        bean.setTopGainers(topGainers);
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAOpenTSIAVolumeTopLosers_hIVB2_6_fid2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(new BigDecimal("100"));
        bean.setOpenTSIA(new BigDecimal("200"));
        bean.setVolume(300);
        List<QuoteDataBean> topLosers = new ArrayList<>();
        topLosers.add(new QuoteDataBean());
        bean.setTopLosers(topLosers);
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("Current Top Losers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainers_Empty_hvTS2_qneu0_6_fid2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, new ArrayList<>(), new ArrayList<>());
        bean.setSummaryDate(new Date());
        String result = bean.toString();
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Null_TopGainers_TopLosers_lnIR4_RdZx0_1_fid2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean(new BigDecimal("100"), new BigDecimal("200"), 300, null, null);
        String result = bean.toString();
        Assertions.assertFalse(result.contains("Market Summary at: Sat Jan 01 00:00:00 UTC 2022"));
    }
}