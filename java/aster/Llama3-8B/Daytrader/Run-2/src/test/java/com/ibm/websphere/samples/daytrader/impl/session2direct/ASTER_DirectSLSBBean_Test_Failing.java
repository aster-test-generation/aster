/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @InjectMocks
    private DirectSLSBBean directSLSBBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder() throws Exception {
        MockitoAnnotations.openMocks(this);
        // Set up the expected behavior of the mock objects
        when(account.getAccountID()).thenReturn(1);
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getQuantity()).thenReturn(100.0);
        // Call the method under test
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        // Verify that the expected behavior was met
        verify(account, times(1)).getAccountID();
        verify(quote, times(1)).getSymbol();
        verify(holding, times(1)).getQuantity();
        // Assert that the returned order is not null
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertEquals("BUY", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertEquals(100.0, order.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertTrue(order.getOrderID() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_10() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0_11() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_qleS0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_ImuI0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Collection<?> allQuotes = directSLSBBean.getAllQuotes();
        assertNotNull(allQuotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_svVc1() throws Exception {
        Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings("user1");
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_Sron0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_yqoG0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 123;
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_hvXK0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "sampleUserID";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullUserID_eNmj2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = null;
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithEmptyUserID_utCs3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatDoesNotExist_rFcl4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "nonexistentUserID";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_KbNu0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
        assertNotNull(createdQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_KbNu0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
        assertEquals(symbol, createdQuote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_KbNu0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
        assertEquals(companyName, createdQuote.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_KbNu0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
        assertEquals(price, createdQuote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_QXar0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_QXar0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("user123", updatedProfileData.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_QXar0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("password123", updatedProfileData.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_QXar0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("John Doe", updatedProfileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_QXar0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("123 Main St", updatedProfileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_QXar0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("john.doe@example.com", updatedProfileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_QXar0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("1234567890123456", updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_cFCA0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.queueOrder(1, true);
        directSLSBBean.setInSession(true);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_PJTB1() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_cXWK0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("user1");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_KbRD0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_xjXJ0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "user1";
        Integer orderID = 12345;
        directSLSBBean.orderCompleted(userID, orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithInvalidUserID_VGNH1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.logout(null);
        fail("Method setInSession is not implemented.");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithAsyncProcessing_jzht0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithAsyncProcessing_jzht0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithSyncProcessing_Ssut1_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithSyncProcessing_Ssut1_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_GHWO0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_GHWO0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertEquals(1, holdingDataBean.getHoldingID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_GHWO0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_GHWO0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_GHWO0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_GHWO0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_GHWO0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_GHWO0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_ereA0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_QEjC0() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(account.getAccountID()).thenReturn(1);
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getQuantity()).thenReturn(100.0);
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        verify(account, times(1)).getAccountID();
        verify(quote, times(1)).getSymbol();
        verify(holding, times(1)).getQuantity();
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_jYJA0_OXaB0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuote = null;
        try {
            updatedQuote = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(updatedQuote);
        assertEquals(quoteDataBean.getCompanyName(), updatedQuote.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), updatedQuote.getPrice());
        assertEquals(quoteDataBean.getOpen(), updatedQuote.getOpen());
        assertEquals(quoteDataBean.getLow(), updatedQuote.getLow());
        assertEquals(quoteDataBean.getChange(), updatedQuote.getChange(), 0.0);
        assertEquals(quoteDataBean.getHigh(), updatedQuote.getHigh());
        assertEquals(quoteDataBean.getSymbol(), updatedQuote.getSymbol());
        assertTrue(updatedQuote.getVolume() > quoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_LeWU0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order);
        assertEquals("BUY", order.getOrderType());
        assertEquals(100.0, order.getQuantity(), 0.001);
        assertNotNull(order.getAccount());
        assertNotNull(order.getQuote());
        assertNotNull(order.getHolding());
        assertNotNull(order.getOpenDate());
        assertNotNull(order.getCompletionDate());
        assertTrue(order.getOrderID() > 0);
        assertNotNull(order.getOrderStatus());
        assertNotNull(order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_KbNu0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
        assertNotNull(createdQuote);
        assertEquals(symbol, createdQuote.getSymbol());
        assertEquals(companyName, createdQuote.getCompanyName());
        assertEquals(price, createdQuote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_QXar0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
        assertEquals("user123", updatedProfileData.getUserID());
        assertEquals("password123", updatedProfileData.getPassword());
        assertEquals("John Doe", updatedProfileData.getFullName());
        assertEquals("123 Main St", updatedProfileData.getAddress());
        assertEquals("john.doe@example.com", updatedProfileData.getEmail());
        assertEquals("1234567890123456", updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_cFCA0_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.queueOrder(1, true);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_xmJU0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.logout("user123");
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithInvalidUserID_VGNH1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.logout(null);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_ZiLR2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithValidUserID_lhvr3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.logout("validUser");
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithAsyncProcessing_jzht0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(result);
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithSyncProcessing_Ssut1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(result);
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_GHWO0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean);
        assertEquals(1, holdingDataBean.getHoldingID().intValue());
        assertNotNull(holdingDataBean.getAccount());
        assertNotNull(holdingDataBean.getQuote());
        assertNotNull(holdingDataBean.getPurchaseDate());
        assertNotNull(holdingDataBean.getPurchasePrice());
        assertNotNull(holdingDataBean.getQuoteID());
        assertNotNull(holdingDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_fmHf0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Collection<?> closedOrders = directSLSBBean.getClosedOrders("validUserID");
        assertNotNull(closedOrders);
    }
}