/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
    private EntityManager entityManager;
    @Mock
    private EntityManager mockEntityManager;
    @InjectMocks
    private TradeSLSBBean tradeslsbbean;
    @Mock
    private AccountProfileDataBean accountProfileDataBean;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;
    @Mock
    private OrderDataBean orderDataBean;
    @Mock
    private TradeConfig tradeConfig;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_GEhf0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc", 1000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(120.0), 1000.0);
        BigDecimal oldPrice = BigDecimal.valueOf(90.0);
        BigDecimal changeFactor = BigDecimal.valueOf(1.1);
        double sharesTraded = 1000.0;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChangeNullQuote_fxib1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = null;
        BigDecimal oldPrice = BigDecimal.valueOf(90.0);
        BigDecimal changeFactor = BigDecimal.valueOf(1.1);
        double sharesTraded = 1000.0;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChangeInvalidChangeFactor_CMNo2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc", 1000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(120.0), 1000.0);
        BigDecimal oldPrice = BigDecimal.valueOf(90.0);
        BigDecimal changeFactor = BigDecimal.valueOf(0.0);
        double sharesTraded = 1000.0;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChangeInvalidSharesTraded_VzrV3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc", 1000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(120.0), 1000.0);
        BigDecimal oldPrice = BigDecimal.valueOf(90.0);
        BigDecimal changeFactor = BigDecimal.valueOf(1.1);
        double sharesTraded = -1000.0;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_uHZr0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNewAccount_FMrb1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean result = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal("0.0"));
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_swhm0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_PennyStock_mKBA0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(1.21));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_MaximumStock_qbjR1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(2.21));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_EmptySymbol_FOPW4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("", BigDecimal.valueOf(1.1), 100.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals("companyName", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(new BigDecimal("price"), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(new BigDecimal("open"), quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(new BigDecimal("low"), quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0.0, quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(new BigDecimal("high"), quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1_9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0.0, quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_PsVC0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("AAPL", "Apple Inc.", new BigDecimal("100.00"));
        assertNotNull(quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_PsVC0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("AAPL", "Apple Inc.", new BigDecimal("100.00"));
        assertEquals("AAPL", quote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_PsVC0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("AAPL", "Apple Inc.", new BigDecimal("100.00"));
        assertEquals("Apple Inc.", quote.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_PsVC0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("AAPL", "Apple Inc.", new BigDecimal("100.00"));
        assertEquals(new BigDecimal("100.00"), quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_GsmJ0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_GsmJ0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_GsmJ0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_GsmJ0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_GsmJ0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_lgdr0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderFalse_wAhg1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_zkhf0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUserID";
        AccountProfileDataBean expected = new AccountProfileDataBean();
        expected.setUserID(userID);
        expected.setAddress("testAddress");
        expected.setCreditCard("testCreditCard");
        expected.setEmail("testEmail");
        expected.setFullName("testFullName");
        expected.setPassword("testPassword");
        AccountProfileDataBean actual = tradeSLSBBean.getAccountProfileData(userID);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseInvalidSymbol_ezrY1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.pingTwoPhase("InvalidSymbol");
            fail("Expected exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseNullSymbol_OtVq2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.pingTwoPhase(null);
            fail("Expected exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_ItlQ1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.orderCompleted("testUser", 1);
        fail("This test should throw an exception");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyValidInput_Qnlx0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.buy("123", "AAPL", 100.0, TradeConfig.SYNCH);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_HLjc0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellHoldingNotFound_mCPc1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("user1", 100, TradeConfig.SYNCH);
        assertEquals("cancelled", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeAsync2Phase_YTAu4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("user1", 1, TradeConfig.ASYNCH_2PHASE);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_bDwE0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        HoldingDataBean expected = new HoldingDataBean();
        HoldingDataBean actual = tradeSLSBBean.getHolding(expected.getHoldingID());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_WOCQ0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(1, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_vEet0_Epvp0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("userID");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterExistingAccount_UbQQ0_wSGz0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = new AccountProfileDataBean("userID", "password", "fullname", "address", "email", "creditcard");
        AccountDataBean account = new AccountDataBean(0, 0, null, new java.sql.Timestamp(System.currentTimeMillis()), new BigDecimal("0.0"), new BigDecimal("0.0"), "userID");
        profile.setAccount(account);
        account.setProfile(profile);
        assertNull(tradeSLSBBean.getClosedOrders("userID"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_iBcR0_PYdX0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_pQSk0_wdhT0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        AccountProfileDataBean profile = new AccountProfileDataBean();
        profile.setAccount(new AccountDataBean());
        profile.getAccount().setOrders(new ArrayList<OrderDataBean>());
        OrderDataBean order = new OrderDataBean();
        profile.getAccount().getOrders().add(order);
        entityManager.persist(profile);
        Collection<OrderDataBean> orders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(1, orders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_QFCb0_faJd0() {
        String userID = "testUser";
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean(); // Create an instance of TradeSLSBBean
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertNotNull(closedOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderNullOrder_DqGX0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = null;
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(null, true);
            Assertions.assertNull(result);
        } catch (Exception e) {
            Assertions.fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NoUpdate_MPIE3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.0), 0.0);
        assertEquals(quoteDataBean.getPrice(), BigDecimal.valueOf(1.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeInvalid_fOIr2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("user1", 1, 10);
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertEquals("TradeSLSBBean:sell(user1,1) --> failed", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellException_zIQS3_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertEquals("TradeSLSBBean:sell(user1,1) --> failed", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSellOrder_ehjm3_kVhS0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = OrderDataBean.getRandomInstance();
        order.setAccount(new AccountDataBean());
        order.setQuote(new QuoteDataBean());
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        try {
            OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
            Assertions.assertNotNull(result);
        } catch (Exception e) {
            Assertions.fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_NHaG1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertNotNull(quoteDataBean);
        assertEquals("companyName", quoteDataBean.getCompanyName());
        assertEquals(new BigDecimal("price"), quoteDataBean.getPrice());
        assertEquals(new BigDecimal("open"), quoteDataBean.getOpen());
        assertEquals(new BigDecimal("low"), quoteDataBean.getLow());
        assertEquals(0.0, quoteDataBean.getChange(), 0.0);
        assertEquals(new BigDecimal("high"), quoteDataBean.getHigh());
        assertEquals("symbol", quoteDataBean.getSymbol());
        assertEquals(0.0, quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_PsVC0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("AAPL", "Apple Inc.", new BigDecimal("100.00"));
        assertNotNull(quote);
        assertEquals("AAPL", quote.getSymbol());
        assertEquals("Apple Inc.", quote.getCompanyName());
        assertEquals(new BigDecimal("100.00"), quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_GsmJ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
        assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    }
}