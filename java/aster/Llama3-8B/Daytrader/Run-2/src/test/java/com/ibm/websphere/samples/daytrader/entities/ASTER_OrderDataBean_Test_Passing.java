/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
    @Mock
    private TradeConfig tradeConfig;
    @Mock
    private QuoteDataBean quoteDataBean;
    private OrderDataBean orderdatabean;
    @Mock
    private Integer orderID;
    @Mock
    private Log log;
    private HoldingDataBean holding;
    @Mock
    private HoldingDataBean mockHolding;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;
    @Mock
    private QuoteDataBean quote;
    private OrderDataBean orderDataBean;
    private String symbol;
    private AccountDataBean account;
    private Date openDate;
    @Mock
    private Date date;
    @Mock
    private Date completionDate;
    private String orderType;
    private BigDecimal price; /* price */
    private double quantity; /* quantity */
    private BigDecimal orderFee; /* price */
    private String orderStatus;

    /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderStatus() {
           orderDataBean = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
           // Arrange
           orderDataBean.setOrderStatus("OPEN");
           // Act
           String actualOrderStatus = orderDataBean.getOrderStatus();
           // Assert
           assertEquals("OPEN", actualOrderStatus);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderStatus_hJvU0() {
           OrderDataBean orderDataBean = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 1.0, 10.0, 1.0, "AAPL");
           String orderStatus = orderDataBean.getOrderStatus();
           assertEquals("OPEN", orderStatus);
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus() {
           orderDataBean = new OrderDataBean();
           String expectedOrderStatus = "New";
           orderDataBean.setOrderStatus(expectedOrderStatus);
           assertEquals(expectedOrderStatus, orderDataBean.getOrderStatus());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus_jVWs0() {
           OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
           orderDataBean.setOrderStatus("Completed");
           assertEquals("Completed", orderDataBean.getOrderStatus());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatusNull_qHFW1() {
           OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
           orderDataBean.setOrderStatus(null);
           assertNull(orderDataBean.getOrderStatus());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatusEmpty_CQyL2() {
           OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
           orderDataBean.setOrderStatus("");
           assertEquals("", orderDataBean.getOrderStatus());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetSymbol() {
           symbol = "ABC";
           orderdatabean.setQuote(quote);
           orderdatabean.setSymbol(symbol);
           assertEquals(symbol, orderdatabean.getSymbol());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetSymbol_quoteNotNull() {
           symbol = "ABC";
           orderdatabean.setQuote(quote);
           orderdatabean.setSymbol(symbol);
           when(quote.getSymbol()).thenReturn("XYZ");
           assertEquals("XYZ", orderdatabean.getSymbol());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetSymbol_quoteNull() {
           orderdatabean.setQuote(null);
           symbol = "ABC";
           orderdatabean.setQuote(quote);
           orderdatabean.setSymbol(symbol);
           assertEquals(symbol, orderdatabean.getSymbol());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testGetSymbol_WithQuote_AzLM0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
       orderDataBean = new OrderDataBean(null, null, null, null, null, null, null, null, quoteDataBean);
       assertEquals("AAPL", orderDataBean.getSymbol());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testGetSymbol_WithoutQuote_AppX1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean = new OrderDataBean(null, null, null, null, null, null, null, null, null);
       assertEquals(null, orderDataBean.getSymbol());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOrderID() throws Exception{
           orderdatabean = new OrderDataBean();
           Mockito.when(orderdatabean.getOrderID()).thenReturn(orderID);
           Integer actualOrderID = orderdatabean.getOrderID();
           assertEquals(orderID, actualOrderID);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testGetOrderID_wRho0() {
       OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "COMPLETED", new Date(), new Date(), 1.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
       assertEquals(1, orderDataBean.getOrderID());
    
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testisOpen() throws Exception{
           orderdatabean = new OrderDataBean();
           orderdatabean.setOrderStatus("open");
           // Act
           boolean result = orderdatabean.isOpen();
           // Assert
           assertTrue(result);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testisOpenProcessing() throws Exception{
           // Arrange
           orderdatabean.setOrderStatus("processing");
           orderdatabean = new OrderDataBean();
           orderdatabean.setOrderStatus("open");
           // Act
           boolean result = orderdatabean.isOpen();
           // Assert
           assertTrue(result);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testisOpenOtherStatus() throws Exception{
           orderdatabean = new OrderDataBean();
           orderdatabean.setOrderStatus("open");
           // Arrange
           orderdatabean.setOrderStatus("completed");
           // Act
           boolean result = orderdatabean.isOpen();
           // Assert
           assertFalse(result);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testOpenOrderStatusOpen_SuZM0() {
       OrderDataBean orderDataBean = new OrderDataBean("buy", "open", new Date(), new Date(), 1.0, 10.0, 1.0, "ABC");
       OrderDataBean order = orderDataBean;
       boolean result = order.isOpen();
       Assertions.assertTrue(result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testOpenOrderStatusProcessing_SrST1() {
       OrderDataBean orderDataBean = new OrderDataBean("buy", "processing", new Date(), new Date(), 1.0, 10.0, 1.0, "ABC");
       OrderDataBean order = orderDataBean;
       boolean result = order.isOpen();
       Assertions.assertTrue(result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testOpenOrderStatusClosed_Dixa2() {
       OrderDataBean orderDataBean = new OrderDataBean("buy", "closed", new Date(), new Date(), 1.0, 10.0, 1.0, "ABC");
       OrderDataBean order = orderDataBean;
       boolean result = order.isOpen();
       Assertions.assertFalse(result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testtoString() throws Exception{
           orderdatabean = new OrderDataBean(
                   1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL"
           );
           String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + orderdatabean.getOpenDate().toString() + "\n\t completionDate: " + orderdatabean.getCompletionDate().toString() + "\n\t       quantity: 10.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: AAPL";
           assertEquals(expected, orderdatabean.toString());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToString_fZmK0() {
           OrderDataBean order = new OrderDataBean("BUY", "OPEN", new java.sql.Date(1), new java.sql.Date(2), 3, new BigDecimal("4.5"), new BigDecimal("5.6"), "AAPL");
           assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: AAPL", order.toString());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToStringWithNullOrderID_nEPA1() {
           OrderDataBean order = new OrderDataBean(null, "BUY", "OPEN", new java.sql.Date(1), new java.sql.Date(2), 3, new BigDecimal("4.5"), new BigDecimal("5.6"), "AAPL");
           assertEquals("Order \n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: AAPL", order.toString());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToStringWithNullSymbol_zhEh2() {
           OrderDataBean order = new OrderDataBean("BUY", "OPEN", new java.sql.Date(1), new java.sql.Date(2), 3, new BigDecimal("4.5"), new BigDecimal("5.6"), null);
           assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: null", order.toString());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToStringWithNullCompletionDate_duSz3() {
           OrderDataBean order = new OrderDataBean("BUY", "OPEN", new java.sql.Date(1), null, 3, new BigDecimal("4.5"), new BigDecimal("5.6"), "AAPL");
           assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: null\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: AAPL", order.toString());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToStringWithNullOpenDate_BCxY4() {
           OrderDataBean order = new OrderDataBean("BUY", "OPEN", null, new java.sql.Date(2), 3, new BigDecimal("4.5"), new BigDecimal("5.6"), "AAPL");
           assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: null\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: AAPL", order.toString());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToStringWithNullOrderFee_BgWv5() {
           OrderDataBean order = new OrderDataBean("BUY", "OPEN", new java.sql.Date(1), new java.sql.Date(2), 3, new BigDecimal("4.5"), null, "AAPL");
           assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: null\n\t         symbol: AAPL", order.toString());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testsetAccount() throws Exception {
           account = Mockito.mock(AccountDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setAccount(account);
           assertEquals(account, orderdatabean.getAccount());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetAccount_SSGZ0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
           orderDataBean.setAccount(accountDataBean);
           assertEquals(accountDataBean, orderDataBean.getAccount());
       }
       private BigDecimal orderFee; /* price */
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_VXZQ0_1() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals("buy", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_VXZQ0_2() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_VXZQ0_3() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getOpenDate().getTime());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_VXZQ0_4() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getCompletionDate().getTime());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_VXZQ0_5() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndQuantity(), order.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_VXZQ0_6() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_VXZQ0_7() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_VXZQ0_8() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol(), order.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceAgain_lYSS1_1() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals("sell", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetSymbol() throws Exception {
        orderdatabean = new OrderDataBean();
        String symbol = "ABC";
        orderdatabean.setSymbol(symbol);
        assertEquals(symbol, orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_qWNt0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setSymbol("ABC");
        assertEquals("ABC", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        orderdatabean = new OrderDataBean();
        when(orderID.hashCode()).thenReturn(1);
        orderdatabean.setOrderID(orderID);
        int expectedHashCode = 1;
        int actualHashCode = orderdatabean.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_OrderIDNotNull_HMDY0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        int result = orderDataBean.hashCode();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_OrderIDNull_gVYs1() {
        OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        int result = orderDataBean.hashCode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithNull_xSak1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertEquals(null, orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithNoParameters_IpaC2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.print();
        assertEquals("OrderDataBean [orderType=null, orderStatus=null, openDate=null, completionDate=null, quantity=0.0, price=null, orderFee=null, symbol=null]", orderDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding() throws Exception {
        holding = mockHolding;
        orderdatabean = new OrderDataBean();
        orderdatabean.setHolding(holding);
        // Act
        HoldingDataBean result = orderdatabean.getHolding();
        // Assert
        assertEquals(holding, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancel() {
        orderdatabean = new OrderDataBean();
        // Act
        orderdatabean.cancel();
        // Assert
        assertEquals("cancelled", orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderID() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Integer expectedOrderID = 1;
        orderdatabean.setOrderID(expectedOrderID);
        Mockito.verify(orderdatabean).setOrderID(expectedOrderID);
        Assertions.assertEquals(expectedOrderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID_HyTo0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(1);
        assertEquals(1, orderDataBean.getOrderID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithExistingValue_ekAT1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(10);
        orderDataBean.setOrderID(20);
        assertEquals(20, orderDataBean.getOrderID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNullValue_NGdh2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(null);
        assertEquals(null, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity() {
        quantity = 10.0;
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuantity(quantity);
        assertEquals(quantity, orderdatabean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantityNull_LuZV1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertEquals(null, orderDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderFee() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderFee(BigDecimal.valueOf(10.0));
        BigDecimal expectedOrderFee = BigDecimal.valueOf(10.0);
        BigDecimal actualOrderFee = orderdatabean.getOrderFee();
        assertEquals(expectedOrderFee, actualOrderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeWithDefaultConstructor_yBLG2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertEquals(null, orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderType() throws Exception {
        orderdatabean = new OrderDataBean();
        String expectedOrderType = "buy";
        orderdatabean.setOrderType(expectedOrderType);
        assertEquals(expectedOrderType, orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderType_uYMM0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("TestOrderType");
        assertEquals("TestOrderType", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuote(quote);
        // Arrange
        String expectedSymbol = "AAPL";
        when(quote.getSymbol()).thenReturn(expectedSymbol);
        // Act
        QuoteDataBean actualQuote = orderdatabean.getQuote();
        // Assert
        assertEquals(expectedSymbol, actualQuote.getSymbol());
        verify(quote, times(1)).getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPrice() {
        orderdatabean = new OrderDataBean();
        BigDecimal expectedPrice = new BigDecimal("10.00");
        orderdatabean.setPrice(expectedPrice);
        Assertions.assertEquals(expectedPrice, orderdatabean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_SLyV0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = new BigDecimal("10.00");
        orderDataBean.setPrice(price);
        assertEquals(price, orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_pKQE0() {
        OrderDataBean order = new OrderDataBean();
        boolean result = order.equals(order);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_WvAl1() {
        OrderDataBean order = new OrderDataBean();
        boolean result = order.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_UIHY2() {
        OrderDataBean order = new OrderDataBean();
        QuoteDataBean quote = new QuoteDataBean("symbol");
        boolean result = order.equals(quote);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOrderID_LVyL3() {
        OrderDataBean order1 = new OrderDataBean();
        OrderDataBean order2 = new OrderDataBean();
        boolean result = order1.equals(order2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee() {
        orderDataBean = new OrderDataBean();
        // Arrange
        BigDecimal expectedOrderFee = new BigDecimal("10.00");
        // Act
        orderDataBean.setOrderFee(expectedOrderFee);
        // Assert
        assertEquals(expectedOrderFee, orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_jCyC0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = new BigDecimal("10.00");
        orderDataBean.setOrderFee(orderFee);
        assertEquals(orderFee, orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenDate() {
        openDate = new Date();
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOpenDate()).thenReturn(openDate);
        Date result = orderdatabean.getOpenDate();
        assertEquals(openDate, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOpenDate() {
        orderdatabean = new OrderDataBean();
        // Arrange
        Date expectedOpenDate = new Date();
        // Act
        orderdatabean.setOpenDate(expectedOpenDate);
        // Assert
        assertEquals(expectedOpenDate, orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_JinG0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Date openDate = new Date();
        orderDataBean.setOpenDate(openDate);
        assertEquals(openDate, orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetHolding() {
        orderdatabean = new OrderDataBean();
        // Arrange
        HoldingDataBean expectedHolding = new HoldingDataBean();
        expectedHolding.setQuantity(10.0);
        expectedHolding.setPurchasePrice(new BigDecimal("100.0"));
        expectedHolding.setPurchaseDate(new Date());
        expectedHolding.setAccount(new AccountDataBean());
        expectedHolding.setQuote(new QuoteDataBean("AAPL"));
        // Act
        orderdatabean.setHolding(holding);
        // Assert
        assertEquals(expectedHolding, orderdatabean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_Zztk0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        orderDataBean.setHolding(holdingDataBean);
        assertEquals(holdingDataBean, orderDataBean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingNull_hFkv1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(null);
        assertNull(orderDataBean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingSameObject_TEaA2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        orderDataBean.setHolding(holdingDataBean);
        orderDataBean.setHolding(holdingDataBean);
        assertEquals(holdingDataBean, orderDataBean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingDifferentObject_ByGQ3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean1 = new HoldingDataBean();
        HoldingDataBean holdingDataBean2 = new HoldingDataBean();
        orderDataBean.setHolding(holdingDataBean1);
        orderDataBean.setHolding(holdingDataBean2);
        assertNotEquals(holdingDataBean1, orderDataBean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate() {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getCompletionDate()).thenReturn(completionDate);
        Date expectedCompletionDate = new Date();
        Mockito.when(orderdatabean.getCompletionDate()).thenReturn(expectedCompletionDate);
        Date actualCompletionDate = orderdatabean.getCompletionDate();
        assertEquals(expectedCompletionDate, actualCompletionDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisSell() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOrderType()).thenReturn("sell");
        boolean result = orderdatabean.isSell();
        Mockito.verify(orderdatabean).getOrderType();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderTypeWithNull_oXkX1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertEquals(null, orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("completed");
        boolean result = orderdatabean.isCompleted();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisNotCompleted() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("completed");
        orderdatabean.setOrderStatus("open");
        boolean result = orderdatabean.isCompleted();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisAlertCompleted() throws Exception {
        orderdatabean.setOrderStatus("alertcompleted");
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("completed");
        boolean result = orderdatabean.isCompleted();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCancelled() throws Exception {
        orderdatabean.setOrderStatus("cancelled");
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("completed");
        boolean result = orderdatabean.isCompleted();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_1() {
        orderdatabean = new OrderDataBean();
        // Arrange
        String symbol = "ABC";
        BigDecimal high = BigDecimal.valueOf(100.0);
        QuoteDataBean expectedQuote = new QuoteDataBean(symbol);
        expectedQuote.setHigh(high);
        // Act
        orderdatabean.setQuote(quote);
        Mockito.when(quote.getHigh()).thenReturn(high);
        // Assert
        assertEquals(expectedQuote, orderdatabean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_2() {
        orderdatabean = new OrderDataBean();
        // Arrange
        String symbol = "ABC";
        BigDecimal high = BigDecimal.valueOf(100.0);
        QuoteDataBean expectedQuote = new QuoteDataBean(symbol);
        expectedQuote.setHigh(high);
        // Act
        orderdatabean.setQuote(quote);
        Mockito.when(quote.getHigh()).thenReturn(high);
        // Assert
        assertEquals(high, orderdatabean.getQuote().getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_hwSR0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        orderDataBean.setQuote(quoteDataBean);
        assertEquals(quoteDataBean, orderDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetQuantity() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        double expectedQuantity = 10.0;
        orderdatabean.setQuantity(expectedQuantity);
        Mockito.verify(orderdatabean).setQuantity(expectedQuantity);
        Assertions.assertEquals(expectedQuantity, orderdatabean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_frTg0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(10.0);
        assertEquals(10.0, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisBuy() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOrderType()).thenReturn("buy");
        boolean result = orderdatabean.isBuy();
        Mockito.verify(orderdatabean).getOrderType();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCompletionDate() {
        orderdatabean = new OrderDataBean();
        Date expectedDate = new Date();
        orderdatabean.setCompletionDate(expectedDate);
        assertEquals(expectedDate, orderdatabean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDate_ZZKD0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Date completionDate = new Date();
        orderDataBean.setCompletionDate(completionDate);
        assertEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccount() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        // Act
        AccountDataBean result = orderdatabean.getAccount();
        // Assert
        assertEquals(account, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_YezW0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setAccount(new AccountDataBean());
        AccountDataBean account = orderDataBean.getAccount();
        assertNotNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("cancelled");
        // Act
        boolean result = orderdatabean.isCancelled();
        // Assert
        Mockito.verify(orderdatabean).getOrderStatus();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotCancelled() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("cancelled");
        // Act
        orderdatabean.setOrderStatus("open");
        boolean result = orderdatabean.isCancelled();
        // Assert
        Mockito.verify(orderdatabean).getOrderStatus();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_enaL0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("OPEN");
        String actualOrderStatus = orderDataBean.getOrderStatus();
        assertEquals("OPEN", actualOrderStatus);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_hJvU0_RjNO0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderStatus = orderDataBean.getOrderStatus();
        assertEquals("null", orderStatus);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_ttoA0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String expectedOrderStatus = "New"; // String literal
        orderDataBean.setOrderStatus(expectedOrderStatus);
        assertEquals("New", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_jVWs0_xFgj0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("cancelled");
        assertEquals("cancelled", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusEmpty_CQyL2_VkeL0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("");
        assertEquals("", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_aqIy0() {
        String symbol = "ABC";
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("type");
        orderDataBean.setOrderStatus("status");
        orderDataBean.setOpenDate(new Date());
        orderDataBean.setCompletionDate(new Date());
        orderDataBean.setQuantity(1.0);
        orderDataBean.setPrice(new BigDecimal("1.0"));
        orderDataBean.setOrderFee(new BigDecimal("1.0"));
        QuoteDataBean quote = new QuoteDataBean(symbol);
        orderDataBean.setQuote(quote);
        HoldingDataBean holding = new HoldingDataBean();
        orderDataBean.setHolding(holding);
        orderDataBean.setSymbol(symbol);
        assertEquals(symbol, orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_quoteNull_sKZk0_1() {
        OrderDataBean orderdatabean = new OrderDataBean();
        String symbol = "ABC";
        orderdatabean.setOrderType(symbol);
        QuoteDataBean quote = null;
        orderdatabean.setQuote(quote);
        assertEquals("ABC", orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_quoteNull_sKZk0_2() {
        OrderDataBean orderdatabean = new OrderDataBean();
        String symbol = "ABC";
        orderdatabean.setOrderType(symbol);
        QuoteDataBean quote = null;
        orderdatabean.setQuote(quote);
        assertEquals(symbol, orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_WithQuote_AzLM0_jwSx0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        orderDataBean.setQuote(quoteDataBean);
        assertEquals("AAPL", orderDataBean.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderID_nqbF0() throws Exception {
        OrderDataBean orderdatabean = Mockito.mock(OrderDataBean.class);
        Integer orderID = 1; // assign some value to orderID
        Mockito.when(orderdatabean.getOrderID()).thenReturn(orderID);
        assertEquals(orderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_wRho0_tOCQ0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(1);
        orderDataBean.setOrderType("BUY");
        orderDataBean.setOrderStatus("COMPLETED");
        orderDataBean.setOpenDate(new Date());
        orderDataBean.setCompletionDate(new Date());
        orderDataBean.setQuantity(1.0);
        orderDataBean.setPrice(new BigDecimal("10.0"));
        orderDataBean.setOrderFee(new BigDecimal("1.0"));
        orderDataBean.setSymbol("AAPL");
        assertEquals(1, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoString_XjtJ0() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean(
        );
        String expected = "Order 1\n\torderType: BUY\n\torderStatus: OPEN\n\topenDate: " + orderdatabean.getOpenDate().toString() + "\n\tcompletionDate: " + orderdatabean.getCompletionDate().toString() + "\n\tquantity: 10.0\n\tprice: 10.0\n\torderFee: 1.0\n\tsymbol: AAPL";
        assertEquals(expected, orderdatabean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullOrderID_nEPA1_KVQu0() {
        OrderDataBean order = new OrderDataBean(null, "BUY", "OPEN", new java.sql.Date(1), new java.sql.Date(2), 3, new BigDecimal("4.5"), new BigDecimal("5.6"), "AAPL");
        assertEquals("Order \n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: AAPL", order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount_bNuq0() throws Exception {
        AccountDataBean account = new AccountDataBean();
        OrderDataBean orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        assertEquals(account.getClass(), orderdatabean.getAccount().getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_SSGZ0_TWsK0_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        orderDataBean.setAccount(accountDataBean);
        assertEquals(1, orderDataBean.getAccount().getAccountID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_SSGZ0_TWsK0_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        orderDataBean.setAccount(accountDataBean);
        assertEquals(1, orderDataBean.getAccount().getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_SSGZ0_TWsK0_3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        orderDataBean.setAccount(accountDataBean);
        assertEquals(1, orderDataBean.getAccount().getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_SSGZ0_TWsK0_4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        orderDataBean.setAccount(accountDataBean);
        assertEquals(new java.util.Date(), orderDataBean.getAccount().getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_SSGZ0_TWsK0_5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        orderDataBean.setAccount(accountDataBean);
        assertEquals(new java.util.Date(), orderDataBean.getAccount().getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_SSGZ0_TWsK0_6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        orderDataBean.setAccount(accountDataBean);
        assertEquals(new java.math.BigDecimal("10.0"), orderDataBean.getAccount().getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_SSGZ0_TWsK0_7() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        orderDataBean.setAccount(accountDataBean);
        assertEquals(new java.math.BigDecimal("10.0"), orderDataBean.getAccount().getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_SSGZ0_TWsK0_8() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        orderDataBean.setAccount(accountDataBean);
        assertEquals("profileID", orderDataBean.getAccount().getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_SYpy0_1() {
        OrderDataBean orderdatabean = new OrderDataBean();
        String symbol = "ABC";
        BigDecimal high = BigDecimal.valueOf(100.00);
        QuoteDataBean expectedQuote = new QuoteDataBean(symbol);
        expectedQuote.setHigh(high);
        orderdatabean.setQuote(expectedQuote);
        assertEquals(expectedQuote.getSymbol(), orderdatabean.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_SYpy0_2() {
        OrderDataBean orderdatabean = new OrderDataBean();
        String symbol = "ABC";
        BigDecimal high = BigDecimal.valueOf(100.00);
        QuoteDataBean expectedQuote = new QuoteDataBean(symbol);
        expectedQuote.setHigh(high);
        orderdatabean.setQuote(expectedQuote);
        assertEquals(high, orderdatabean.getQuote().getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_hwSR0_bptc0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("AAPL");
        orderDataBean.setQuote(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrice_MTCM0() {
        OrderDataBean orderdatabean = new OrderDataBean();
        orderdatabean.setPrice(BigDecimal.valueOf(10.0));
        BigDecimal expectedPrice = BigDecimal.valueOf(10.0);
        BigDecimal actualPrice = orderdatabean.getPrice();
        assertEquals(expectedPrice, actualPrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolAgain_yxAD1_jeGU0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("Buy");
        orderDataBean.setOrderStatus("Open");
        orderDataBean.setOpenDate(new Date());
        orderDataBean.setCompletionDate(new Date());
        orderDataBean.setQuantity(1.0);
        orderDataBean.setPrice(new BigDecimal("10.0"));
        orderDataBean.setOrderFee(new BigDecimal("1.0"));
        orderDataBean.setAccount(new AccountDataBean());
        orderDataBean.setQuote(new QuoteDataBean("XYZ"));
        orderDataBean.setHolding(new HoldingDataBean());
        orderDataBean.setSymbol("PQR");
        assertEquals("PQR", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithQuote_GPUq2_HTVE0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 100.0, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(110.0), new BigDecimal(105.0), 5.0);
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(0.0), new BigDecimal(0.0), "AAPL");
        assertEquals(quoteDataBean.getPrice(), orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithAllParameters_Xcmc3_MqHT0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "Buy", "New", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), "AAPL");
        orderDataBean.print();
        assertEquals("OrderDataBean [orderType=Buy, orderStatus=New, openDate=Thu Jan 01 00:00:00 CET 1970, completionDate=Thu Jan 01 00:00:00 CET 1970, quantity=10.0, price=100.0, orderFee=10.0, symbol=AAPL]", orderDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoHTML_KETn0() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        orderdatabean.setOrderType("Buy");
        orderdatabean.setOrderStatus("Open");
        orderdatabean.setOpenDate(new Date());
        orderdatabean.setCompletionDate(new Date());
        orderdatabean.setQuantity(1.0);
        orderdatabean.setPrice(new BigDecimal("10.0"));
        orderdatabean.setOrderFee(new BigDecimal("1.0"));
        orderdatabean.setSymbol("AAPL");
        String expected = "<BR>Order <B>null</B>" + "<LI>      orderType: Buy</LI>" + "<LI>    orderStatus: Open</LI>" + "<LI>       openDate: " + orderdatabean.getOpenDate() + "</LI>" + "<LI> completionDate: " + orderdatabean.getCompletionDate() + "</LI>" + "<LI>       quantity: 1.0</LI>" + "<LI>          price: 10.0</LI>" + "<LI>       orderFee: 1.0</LI>" + "<LI>         symbol: AAPL</LI>";
        assertEquals(expected, orderdatabean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_TJJC0_fdWA0() {
        OrderDataBean orderDataBean = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(10.0), null, null, null);
        assertEquals(new BigDecimal(10.0), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_WuBi0_KqXN0() {
        QuoteDataBean quote = new QuoteDataBean("AAPL");
        OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 100, new BigDecimal(100), new BigDecimal(0), null, null, null);
        assert orderDataBean != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameOrderID_gstz4_ySmd0() {
        OrderDataBean order1 = new OrderDataBean();
        OrderDataBean order2 = new OrderDataBean();
        order2.setOrderID(order1.getOrderID());
        boolean result = order1.equals(order2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate_qPCD0_wFPT0() {
        OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), new AccountDataBean(), new QuoteDataBean("AAPL"), new HoldingDataBean());
        Date openDate = orderDataBean.getOpenDate();
        assertEquals(new Date(), openDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSellFalse_yyXf1_VChP0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("buy");
        orderDataBean.setOrderStatus("buy");
        orderDataBean.setOpenDate(new Date());
        orderDataBean.setCompletionDate(new Date());
        orderDataBean.setQuantity(1.0);
        orderDataBean.setPrice(new BigDecimal("10.0"));
        orderDataBean.setOrderFee(new BigDecimal("1.0"));
        orderDataBean.setAccount(new AccountDataBean());
        orderDataBean.setQuote(new QuoteDataBean("ABC"));
        orderDataBean.setHolding(new HoldingDataBean());
        boolean result = orderDataBean.isCancelled();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderType_vpJN0() throws Exception {
        String orderType = "buy";
        OrderDataBean orderdatabean = new OrderDataBean(orderType, "open", new java.sql.Date(new java.util.Date().getTime()), new java.sql.Date(new java.util.Date().getTime()), 1.0, new java.math.BigDecimal("10.0"), new java.math.BigDecimal("1.0"), null, null, null);
        assertEquals(orderType, orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderType_lRqD0_hKZW0() {
        OrderDataBean orderDataBean = new OrderDataBean("BUY", "FILLED", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), new AccountDataBean(), new QuoteDataBean("AAPL"), new HoldingDataBean());
        assertEquals("BUY", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuyTrue_yKba0_UCif0() {
        OrderDataBean orderDataBean = new OrderDataBean("buy", "cancelled", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), null, null, null);
        boolean result = orderDataBean.isCancelled();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuyFalse_kuco1_hXHE0() {
        OrderDataBean orderDataBean = new OrderDataBean("sell", "sell", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), null, null, null);
        boolean result = orderDataBean.isCancelled();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelledWhenOrderStatusIsNotCancelled_slfA1_TDvg0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("market");
        orderDataBean.setOrderStatus("new");
        orderDataBean.setOpenDate(new Date());
        orderDataBean.setCompletionDate(new Date());
        orderDataBean.setQuantity(1.0);
        orderDataBean.setPrice(new BigDecimal("10.0"));
        orderDataBean.setOrderFee(new BigDecimal("0.0"));
        orderDataBean.setAccount(new AccountDataBean());
        orderDataBean.setQuote(new QuoteDataBean("AAPL"));
        orderDataBean.setHolding(new HoldingDataBean());
        boolean result = orderDataBean.isCancelled();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceAgain_lYSS1() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals("sell", order.getOrderType());
        assertEquals("open", order.getOrderStatus());
        assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getOpenDate().getTime());
        assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getCompletionDate().getTime());
        assertEquals(TradeConfig.rndQuantity(), order.getQuantity());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getPrice());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getOrderFee());
        assertEquals(TradeConfig.rndSymbol(), order.getSymbol());
    }
}