/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0_1() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_etoj0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        quoteDataBean.setSymbol("MSFT");
        assertEquals("MSFT", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolNull_JRDt1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(null);
        assertEquals(null, quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolEmpty_futH2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("");
        assertEquals("", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolSame_QoZe3() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        quoteDataBean.setSymbol("AAPL");
        assertEquals("AAPL", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHigh_qiMq0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        BigDecimal high = BigDecimal.valueOf(100.0);
        quoteDataBean.setHigh(high);
        assertEquals(high, quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyName_biui0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("80.00"), new BigDecimal("110.00"), 10.0);
        assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNullSymbol_fsfw0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        int result = quoteDataBean.hashCode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNonNullSymbol_yzlQ3() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        int result = quoteDataBean.hashCode();
        assertNotEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_irky0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        quoteDataBean.setVolume(100.0);
        assertEquals(100.0, quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_EpnM0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(145.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(155.0), 5.0);
        BigDecimal result = quoteDataBean.getPrice();
        assertEquals(BigDecimal.valueOf(150.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpen_slpv0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        BigDecimal open = BigDecimal.valueOf(100.0);
        quoteDataBean.setOpen(open);
        assertEquals(open, quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChange_Zhfc0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.00"), new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("110.00"), 10.0);
        quoteDataBean.setChange(5.0);
        assertEquals(5.0, quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_Lgwv0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(110.0), 10.0);
        String expected = "<BR>Quote Data for: AAPL<LI> companyName: Apple Inc</LI><LI>      volume: 1000000.0</LI><LI>       price: 100.0</LI><LI>        open1: 90.0</LI><LI>         low: 80.0</LI><LI>        high: 110.0</LI><LI>      change1: 10.0</LI>";
        assertEquals(expected, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLEmpty_KyeC1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        String expected = "<BR>Quote Data for: null<LI> companyName: null</LI><LI>      volume: 0.0</LI><LI>       price: null</LI><LI>        open1: null</LI><LI>         low: null</LI><LI>        high: null</LI><LI>      change1: 0.0</LI>";
        assertEquals(expected, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithSymbol_UtlH2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("GOOG");
        String expected = "<BR>Quote Data for: GOOG<LI> companyName: null</LI><LI>      volume: 0.0</LI><LI>       price: null</LI><LI>        open1: null</LI><LI>         low: null</LI><LI>        high: null</LI><LI>      change1: 0.0</LI>";
        assertEquals(expected, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpen_vIfG0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("5.0"), new BigDecimal("15.0"), 5.0);
        assertEquals(new BigDecimal("10.0"), quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLow_ZEfP0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.00"), new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("110.00"), 10.0);
        assertEquals(new BigDecimal("90.00"), quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange_kQhp0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(110.0), 10.0);
        assertEquals(10.0, quoteDataBean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHigh_lQhR0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(12.0), 5.0);
        assertEquals(BigDecimal.valueOf(12.0), quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_SLSo0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        BigDecimal price = new BigDecimal("100.00");
        quoteDataBean.setPrice(price);
        assertEquals(price, quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_TKUC0() {
        QuoteDataBean bean = new QuoteDataBean("AAPL");
        boolean result = bean.equals(bean);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_srgn1() {
        QuoteDataBean bean = new QuoteDataBean("AAPL");
        boolean result = bean.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_UdPE2() {
        QuoteDataBean bean = new QuoteDataBean("AAPL");
        boolean result = bean.equals("AAPL");
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentSymbol_iAOC3() {
        QuoteDataBean bean1 = new QuoteDataBean("AAPL");
        QuoteDataBean bean2 = new QuoteDataBean("MSFT");
        boolean result = bean1.equals(bean2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameSymbol_GqAl4() {
        QuoteDataBean bean1 = new QuoteDataBean("AAPL");
        QuoteDataBean bean2 = new QuoteDataBean("AAPL");
        boolean result = bean1.equals(bean2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_nQmi0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        assertEquals("AAPL", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolDefaultConstructor_baiL1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        assertEquals(null, quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLow_MUWk0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        BigDecimal low = BigDecimal.valueOf(100.00);
        quoteDataBean.setLow(low);
        assertEquals(low, quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyName_VaZB1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, 0);
        quoteDataBean.setCompanyName("New Company Name");
        assertEquals("New Company Name", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_tMdX0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("80.00"), new BigDecimal("110.00"), 10.0);
        assertEquals(1000000.0, quoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolParameterizedConstructor_qXtz2_bFtz0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 10000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(160.0), 10.0);
        assertEquals("AAPL", quoteDataBean.getSymbol());
    }
}