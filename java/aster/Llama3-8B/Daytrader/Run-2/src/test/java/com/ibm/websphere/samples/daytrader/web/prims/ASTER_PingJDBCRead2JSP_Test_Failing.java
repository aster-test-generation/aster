/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead2JSP_Test_Failing {
    PingJDBCRead2JSP pingjdbcread2jsp;
    HttpServlet httpservlet;
    @Mock
    ServletConfig servletconfig;
    @Mock
    HttpServletRequest httpservletrequest;
    @Mock
    ServletContext servletcontext;
    @Mock
    HttpServletResponse httpservletresponse;
    QuoteDataBean quoteData;
    String symbol;
    int iter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcread2jsp = new PingJDBCRead2JSP();
        pingjdbcread2jsp.init(null);
        verify(httpservlet, times(1)).init(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_fXSV0() {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        String servletInfo = pingJDBCRead2JSP.getServletInfo();
        assertTrue("Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class".equals(servletInfo));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SWDc0_1() throws ServletException, IOException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletContext context = mock(ServletContext.class);
        when(request.getServletContext()).thenReturn(context);
        when(request.getAttribute("symbol")).thenReturn("symbol");
        when(request.getAttribute("quoteData")).thenReturn(new QuoteDataBean());
        pingJDBCRead2JSP.doGet(request, response);
        assertNotNull(request.getAttribute("quoteData"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SWDc0_2() throws ServletException, IOException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletContext context = mock(ServletContext.class);
        when(request.getServletContext()).thenReturn(context);
        when(request.getAttribute("symbol")).thenReturn("symbol");
        when(request.getAttribute("quoteData")).thenReturn(new QuoteDataBean());
        pingJDBCRead2JSP.doGet(request, response);
        assertEquals("symbol", request.getAttribute("symbol"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_YGwb1_1() throws ServletException, IOException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletContext context = mock(ServletContext.class);
        when(request.getServletContext()).thenReturn(context);
        when(request.getAttribute("symbol")).thenReturn("symbol");
        when(request.getAttribute("quoteData")).thenThrow(new Exception());
        pingJDBCRead2JSP.doGet(request, response);
        assertNotNull(request.getAttribute("quoteData"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_YGwb1_2() throws ServletException, IOException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletContext context = mock(ServletContext.class);
        when(request.getServletContext()).thenReturn(context);
        when(request.getAttribute("symbol")).thenReturn("symbol");
        when(request.getAttribute("quoteData")).thenThrow(new Exception());
        pingJDBCRead2JSP.doGet(request, response);
        assertEquals("symbol", request.getAttribute("symbol"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_FRRo1_ibIM0() throws ServletException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        ServletConfig config = mock(ServletConfig.class);
        when(config.getServletContext()).thenReturn(mock(ServletContext.class));
        pingJDBCRead2JSP.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SWDc0() throws ServletException, IOException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletContext context = mock(ServletContext.class);
        when(request.getServletContext()).thenReturn(context);
        when(request.getAttribute("symbol")).thenReturn("symbol");
        when(request.getAttribute("quoteData")).thenReturn(new QuoteDataBean());
        pingJDBCRead2JSP.doGet(request, response);
        assertNotNull(request.getAttribute("quoteData"));
        assertEquals("symbol", request.getAttribute("symbol"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_YGwb1() throws ServletException, IOException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletContext context = mock(ServletContext.class);
        when(request.getServletContext()).thenReturn(context);
        when(request.getAttribute("symbol")).thenReturn("symbol");
        when(request.getAttribute("quoteData")).thenThrow(new Exception());
        pingJDBCRead2JSP.doGet(request, response);
        assertNotNull(request.getAttribute("quoteData"));
        assertEquals("symbol", request.getAttribute("symbol"));
    }
}