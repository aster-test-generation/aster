/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity_POel0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        double quantity = holdingDataBean.getQuantity();
        assertEquals(0.0, quantity, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity2_Xjmh1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        double quantity = holdingDataBean.getQuantity();
        assertEquals(1.0, quantity, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity3_hPwR2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1, 1.0, new BigDecimal(1.0), new Date(), "1");
        double quantity = holdingDataBean.getQuantity();
        assertEquals(1.0, quantity, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuoteID_Bslc0() {
        HoldingDataBean holding = new HoldingDataBean();
        assertEquals(null, holding.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuoteID2_aQah1() {
        HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        assertEquals(null, holding.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_xMPe0() {
        HoldingDataBean holding = new HoldingDataBean();
        AccountDataBean account = new AccountDataBean();
        holding.setAccount(account);
        assertEquals(account, holding.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_PJJs0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_VnJK3() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        BigDecimal purchasePrice = new BigDecimal(100.0);
        holdingDataBean.setPurchasePrice(purchasePrice);
        assertTrue(purchasePrice.equals(holdingDataBean.getPurchasePrice()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_IcWK8() {
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_NDiy0() {
        HoldingDataBean holding = new HoldingDataBean();
        Date purchaseDate = new Date();
        holding.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holding.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_IpKn0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        int result = holdingDataBean.hashCode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_ffiR0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String quoteID = "123";
        holdingDataBean.setQuoteID(quoteID);
        assertEquals(quoteID, holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPrint_TBOO0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(100.0, new BigDecimal("100.0"), new Date(), new AccountDataBean(), new QuoteDataBean());
        holdingDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_GGWD0() {
        HoldingDataBean holding = new HoldingDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        holding.setQuote(quote);
        assertEquals(quote, holding.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingID_dctc0() {
        HoldingDataBean holding = new HoldingDataBean();
        Integer holdingID = holding.getHoldingID();
        assertEquals(null, holdingID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuantity_aBSt0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(10.0);
        assertEquals(10.0, holdingDataBean.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHoldingID_MQeo0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = 1;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_kDkZ0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        BigDecimal actualPurchasePrice = holdingDataBean.getPurchasePrice();
        BigDecimal expectedPurchasePrice = null;
        assertEquals(expectedPurchasePrice, actualPurchasePrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_aoAS0_zbUn0() {
        HoldingDataBean holding = new HoldingDataBean();
        BigDecimal purchasePrice = BigDecimal.valueOf(100.0);
        holding.setPurchasePrice(purchasePrice);
        Assertions.assertEquals(purchasePrice, holding.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_xMPe0_ESnq0() {
        HoldingDataBean holding = new HoldingDataBean();
        AccountDataBean account = AccountDataBean.getRandomInstance();
        holding.setAccount(account);
        assertEquals(account, holding.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_NDiy0_zAvA0() {
        HoldingDataBean holding = new HoldingDataBean();
        Calendar calendar = Calendar.getInstance();
        calendar.set(2021, 1, 1);
        Date purchaseDate = calendar.getTime();
        holding.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holding.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_ffiR0_Xfge0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        String quoteID = "123";
        quoteDataBean.setSymbol(quoteID);
        holdingDataBean.setQuote(quoteDataBean);
        assertEquals(quoteID, holdingDataBean.getQuoteID());
    }
}