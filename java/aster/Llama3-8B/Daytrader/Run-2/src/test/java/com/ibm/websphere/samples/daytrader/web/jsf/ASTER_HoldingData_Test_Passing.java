/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_vrWD0() {
        HoldingData holdingData = new HoldingData();
        double expectedQuantity = 0.0;
        double actualQuantity = holdingData.getQuantity();
        assertEquals(expectedQuantity, actualQuantity, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_xuiR0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = new BigDecimal("10.00");
        holdingData.setPurchasePrice(purchasePrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_bwar0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = new BigDecimal("10.00");
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBasis_NuiC0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal basis = new BigDecimal("10.00");
        holdingData.setBasis(basis);
        assert holdingData.getBasis().compareTo(basis) == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_cQqW0() {
        HoldingData holdingData = new HoldingData();
        Date date = new Date();
        holdingData.setPurchaseDate(date);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_AEyT0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = new BigDecimal("10.0");
        holdingData.setGain(gain);
        assert holdingData.getGain().compareTo(gain) == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_tJuP0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("TestQuoteID");
        assertEquals("TestQuoteID", holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketValue_nvkq0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expectedMarketValue = new BigDecimal("100.00");
        holdingData.setMarketValue(expectedMarketValue);
        BigDecimal actualMarketValue = holdingData.getMarketValue();
        assertEquals(expectedMarketValue, actualMarketValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain_yrmi0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expectedGain = new BigDecimal("10.0");
        holdingData.setGain(expectedGain);
        BigDecimal actualGain = holdingData.getGain();
        assertEquals(expectedGain, actualGain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_DUFB0() {
        HoldingData holdingData = new HoldingData();
        Integer expected = null;
        Integer actual = holdingData.getHoldingID();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_tqBT0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuantity(10.5);
        assertEquals(10.5, holdingData.getQuantity(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValue_xuOE0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal("100.00");
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_AUED0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(123);
        assertEquals(123, holdingData.getHoldingID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePrice_CSYN0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expected = new BigDecimal("10.00");
        holdingData.setPurchasePrice(expected);
        BigDecimal actual = holdingData.getPurchasePrice();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_Uexx0_Tgkb1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expectedPrice = new BigDecimal("10.00");
        BigDecimal actualPrice = holdingData.getPurchasePrice();
    }
}