/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PortfolioJSF_Test_Passing {
    private Integer numberHoldings;
    private TradeServices tradeAction;
    private BigDecimal totalValue = new BigDecimal(0.0);
    private ArrayList<HoldingData> holdingDatas;
    private ExternalContext context;
    private BigDecimal totalGain = new BigDecimal(0.0);
    private BigDecimal totalBasis = new BigDecimal(0.0);
    @Mock
    private TradeServices tradeServices;
    @Mock
    private HttpSession httpSession;
    @Mock
    private ExternalContext externalContext;
    @Mock
    private HoldingDataBean holdingDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    private PortfolioJSF portfoliojsf;
    private HtmlDataTable dataTable;
    HttpSession httpsession;
    ExternalContext externalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void method_OMFP1() {
    }
}