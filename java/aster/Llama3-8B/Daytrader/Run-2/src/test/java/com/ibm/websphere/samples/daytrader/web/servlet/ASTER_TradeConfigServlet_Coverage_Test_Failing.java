/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
public class Aster_TradeConfigServlet_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_xHLX0() throws ServletException {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        ServletConfig servletConfig = mock(ServletConfig.class);
        tradeConfigServlet.init(servletConfig);
        verify(servletConfig).getInitParameter("param");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRuntimeModeNull_BAZQ0() throws java.lang.Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
        verify(req, never()).getParameter("RuntimeMode");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderProcessingModeNull_hONQ4() throws java.lang.Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
        verify(req, never()).getParameter("OrderProcessingMode");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMaxUsersNull_AuoG8() throws java.lang.Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
        verify(req, never()).getParameter("MaxUsers");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnablePublishQuotePriceChangeNull_alHc12() throws java.lang.Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
        verify(req, never()).getParameter("EnablePublishQuotePriceChange");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAttributeRunStatsData_PzAn4_iyZE0() throws Exception {
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    tradeConfigServlet.doConfigUpdate(request, response);
    assertNull(request.getAttribute("runStatsData"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRuntimeModeInvalid_tupc2_VYRj0() throws java.lang.Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("RuntimeMode")).thenReturn("invalid");
    servlet.doConfigUpdate(req, resp);
    verify(req, atLeastOnce()).getParameter("RuntimeMode");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRuntimeModeEmpty_FAoH1_dXmT0() throws java.lang.Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("RuntimeMode")).thenReturn("");
    servlet.doConfigUpdate(req, resp);
    verify(req, times(1)).getParameter("RuntimeMode");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRuntimeModeValid_Zdln3_MaJQ0() throws java.lang.Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("RuntimeMode")).thenReturn("1");
    servlet.doConfigUpdate(req, resp);
    verify(req, times(1)).getParameter("RuntimeMode");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrderProcessingModeEmpty_fOwL5_PFkb0() throws java.lang.Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("");
    servlet.doConfigUpdate(req, resp);
    verify(req, atLeastOnce()).getParameter("OrderProcessingMode");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrderProcessingModeInvalid_cwhN6_BUHJ0() throws java.lang.Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("invalid");
    servlet.doConfigUpdate(req, resp);
    verify(req, atLeastOnce()).getParameter("OrderProcessingMode");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaxUsersEmpty_xTIO9_yDFk0() throws java.lang.Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("");
    servlet.doConfigUpdate(req, resp);
    verify(req, times(1)).getParameter("MaxUsers");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaxUsersInvalid_JVhK10_IAXi0() throws java.lang.Exception {
    TradeConfigServlet servlet = new com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("invalid");
    servlet.doConfigUpdate(req, resp);
    verify(req, atLeastOnce()).getParameter("MaxUsers");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaxUsersValid_hpxV11_yWqC0() throws java.lang.Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("10");
    servlet.doConfigUpdate(req, resp);
    verify(req, times(1)).getParameter("MaxUsers");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_VTKc0_HzSF0() throws java.lang.Exception {
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    tradeConfigServlet.doConfigUpdate(request, response);
    verify(request, times(1)).getParameter("OrderProcessingMode");
    verify(request, times(1)).getParameter("WebInterface");
    verify(request, times(1)).getParameter("MaxUsers");
    verify(request, times(1)).getParameter("MaxQuotes");
    verify(request, times(1)).getParameter("marketSummaryInterval");
    verify(request, times(1)).getParameter("primIterations");
    verify(request, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(request, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(request, times(1)).getParameter("EnableLongRun");
    verify(request, times(1)).getParameter("DisplayOrderAlerts");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrderProcessingModeValid_DTLx7_qnxU0_fid2() throws java.lang.Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    servlet.doConfigUpdate(req, resp);
    verify(req, times(1)).getParameter("OrderProcessingMode");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaxUsersInvalid_JVhK10_IAXi0_fid2() throws java.lang.Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("invalid");
    servlet.doConfigUpdate(req, resp);
    verify(req, atLeastOnce()).getParameter("MaxUsers");
}
}