/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MDBStats_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTiming_GyLm0_eZMU0_1() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        Assertions.assertEquals(2000, timerStat.getMax());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTiming_GyLm0_eZMU0_2() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        Assertions.assertEquals(1000, timerStat.getMin());
    }

    @Test
    @Timeout(value = 28, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTiming_GyLm0_eZMU0_3() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 28000, 2000);
        Assertions.assertEquals(1, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTiming_GyLm0_eZMU0_4() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        Assertions.assertEquals(2000, timerStat.getTotalTime());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTiming_GyLm0_eZMU0_5() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        Assertions.assertEquals(2000, timerStat.getMaxSecs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingMultipleTimes_BJho1_xuUv0_1() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 3000);
        Assertions.assertEquals(3000, timerStat.getMax());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingMultipleTimes_BJho1_xuUv0_2() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 3000);
        Assertions.assertEquals(1000, timerStat.getMin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingMultipleTimes_BJho1_xuUv0_3() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 21000);
        timerStat = mdbStats.addTiming("type", 21000, 3000);
        Assertions.assertEquals(2, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingMultipleTimes_BJho1_xuUv0_4() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 3000);
        Assertions.assertEquals(5000, timerStat.getTotalTime());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingMultipleTimes_BJho1_xuUv0_5() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 3000);
        Assertions.assertEquals(3000, timerStat.getMaxSecs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingSameTime_mPil2_qvwj0_1() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 2000);
        Assertions.assertEquals(2000, timerStat.getMax());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingSameTime_mPil2_qvwj0_2() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 2000);
        Assertions.assertEquals(2000, timerStat.getMin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingSameTime_mPil2_qvwj0_3() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 6000);
        timerStat = mdbStats.addTiming("type", 6000, 6000);
        Assertions.assertEquals(2, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingSameTime_mPil2_qvwj0_4() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 2000);
        Assertions.assertEquals(4000, timerStat.getTotalTime());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingSameTime_mPil2_qvwj0_5() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 2000);
        Assertions.assertEquals(2000, timerStat.getMaxSecs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingNegativeTime_WryI3_nJsf0_1() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 2000, 1000);
        Assertions.assertEquals(1000, timerStat.getMax());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingNegativeTime_WryI3_nJsf0_2() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 2000, 1000);
        Assertions.assertEquals(1000, timerStat.getMin());
    }

    @Test
    @Timeout(value = 13, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingNegativeTime_WryI3_nJsf0_3() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 2000, 13000);
        Assertions.assertEquals(1, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingNegativeTime_WryI3_nJsf0_4() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 2000, 1000);
        Assertions.assertEquals(1000, timerStat.getTotalTime());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTiming_GyLm0_eZMU0_3_fid3() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        Assertions.assertEquals(1, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingMultipleTimes_BJho1_xuUv0_3_fid3() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 1000, 2000);
        timerStat = mdbStats.addTiming("type", 2000, 3000);
        Assertions.assertEquals(2, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingNegativeTime_WryI3_nJsf0_5_fid3() {
        MDBStats mdbStats = MDBStats.getInstance();
        TimerStat timerStat = mdbStats.addTiming("type", 2000, 1000);
        Assertions.assertEquals(1000, timerStat.getMaxSecs());
    }
}