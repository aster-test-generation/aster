/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingCountWithNegativeHoldings_vvIY3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(-10);
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(0, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_PqGD1_3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(0);
        runStatsDataBean.setTradeStockCount(1);
        runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
        runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
        assertEquals(Integer.MAX_VALUE, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingCountWithNegativeHoldings_vvIY3_fid1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(-1 - 10);
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(-10, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_zxJT1_1_fid3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = runStatsDataBean.getOrderCount();
        runStatsDataBean.setOrderCount(1);
        orderCount = runStatsDataBean.getOrderCount();
        runStatsDataBean.setOrderCount(-1);
        orderCount = runStatsDataBean.getOrderCount();
        assertEquals(0, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_mIoh2_1_fid3() {
        RunStatsDataBean runStatsData = new RunStatsDataBean();
        int orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(1);
        orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(-1);
        orderCount = runStatsData.getOrderCount();
        assertEquals(0, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_tOrz3_3() {
        RunStatsDataBean runStatsData = new RunStatsDataBean();
        int orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(1);
        orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(-1);
        orderCount = runStatsData.getOrderCount();
        assertNotEquals(-1, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_PqGD1_1_fid3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(0);
        runStatsDataBean.setTradeStockCount(1);
        runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
        runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
        assertEquals(0, runStatsDataBean.getTradeStockCount());
    }
}