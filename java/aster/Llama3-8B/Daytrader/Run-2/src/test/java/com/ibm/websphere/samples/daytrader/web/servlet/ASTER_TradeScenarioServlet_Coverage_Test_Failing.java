/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
public class Aster_TradeScenarioServlet_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_XAPh0() {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        String expected = "TradeScenarioServlet emulates a population of web users";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_SuperInitCalled_exrL0() throws ServletException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        servlet.init(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testActionNull_dOLq0() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        servlet.performTask(req, resp);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_CrWx0_TRbm0() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPostWithException_udRa2_nisB0() throws ServletException, IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    tradeScenarioServlet.performTask(request, response);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testActionEmptyString_XHZk1_AuaA1() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    MockHttpServletRequest req = new MockHttpServletRequest();
    MockHttpServletResponse resp = new MockHttpServletResponse();
    req.setParameter("action", "");
    servlet.performTask(req, resp);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_Lpab0_tYFJ0() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("action")).thenReturn("n");
    tradeScenarioServlet.performTask(request, response);
    verify(response).setContentType("text/html");
    verify(response).sendError(500, "trade_client.TradeScenarioServlet.service(...): erorr creating and writing to PrintStream created from response.getOutputStream()");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_syTW1_iRZp0() throws ServletException, IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PrintWriter writer = mock(PrintWriter.class);
    when(response.getWriter()).thenReturn(writer);
    Map<String, String[]> paramMap = new HashMap<>();
    paramMap.put("action", new String[] {"n"});
    when(request.getParameterMap()).thenReturn(paramMap);
    tradeScenarioServlet.performTask(request, response);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testActionNonNullUserID_Vwww5_XrwN0() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = new MockHttpServletRequest();
    HttpServletResponse resp = new MockHttpServletResponse();
    req.getSession().setAttribute("uidBean", "user123");
    servlet.performTask(req, resp);
}
}