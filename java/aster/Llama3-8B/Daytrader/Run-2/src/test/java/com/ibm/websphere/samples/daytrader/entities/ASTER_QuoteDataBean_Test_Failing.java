/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0_2() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol(), quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0_3() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol() + " Incorporated", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0_4() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0_5() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0_6() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0_7() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0_8() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0_9() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_Xjet0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(120.0), BigDecimal.valueOf(160.0), 10.0);
        quoteDataBean.print();
        assertEquals("	Quote Data for: AAPL		 companyName: Apple Inc.		      volume: 1000000.0		       price: 150.0		        open1: 140.0		         low: 120.0		        high: 160.0		      change1: 10.0", quoteDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_JLOo0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(149.0), BigDecimal.valueOf(148.0), BigDecimal.valueOf(151.0), 1.0);
        String expected = "\n\tQuote Data for: AAPL\n\t\t companyName: Apple Inc.\n\t\t      volume: 1000000\n\t\t       price: 150.0\n\t\t        open1: 149.0\n\t\t         low: 148.0\n\t\t        high: 151.0\n\t\t      change1: 1.0";
        assertEquals(expected, quoteDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_Xjet0_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(120.0), BigDecimal.valueOf(160.0), 10.0);
        quoteDataBean.print();
        assertEquals("QuoteDataBean[symbol=AAPL, companyName=Apple Inc., volume=1000000.0, price=150.0, open=140.0, low=120.0, high=160.0, change=10.0]", quoteDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_Lgwv0_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(110.0), 10.0);
        String expected = "<BR>Quote Data for: AAPL<LI> companyName: Apple Inc</LI><LI>      volume: 1000000</LI><LI>       price: 100.0</LI><LI>        open: 90.0</LI><LI>         low: 80.0</LI><LI>        high: 110.0</LI><LI>      change: 10.0</LI>";
        assertEquals(expected, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLEmpty_KyeC1_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        String expected = "<BR>Quote Data for: <LI> companyName: </LI><LI>      volume: </LI><LI>       price: </LI><LI>        open: </LI><LI>         low: </LI><LI>        high: </LI><LI>      change: </LI>";
        assertEquals(expected, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithSymbol_UtlH2_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("GOOG");
        String expected = "<BR>Quote Data for: GOOG<LI> companyName: </LI><LI>      volume: </LI><LI>       price: </LI><LI>        open: </LI><LI>         low: </LI><LI>        high: </LI><LI>      change: </LI>";
        assertEquals(expected, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_doZj0() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertNotNull(quoteDataBean);
        assertEquals(TradeConfig.rndSymbol(), quoteDataBean.getSymbol());
        assertEquals(TradeConfig.rndSymbol() + " Incorporated", quoteDataBean.getCompanyName());
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getVolume(), 0.0);
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getPrice());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getOpen());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getLow());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getHigh());
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getChange(), 0.0);
    }
}