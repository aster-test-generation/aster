/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_TQZO0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = holdingDataBean.getQuote();
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchaseDate_cuKs0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Date purchaseDate = holdingDataBean.getPurchaseDate();
        assertNotNull(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToString_OoRL0() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 1, new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), 1);
        HoldingDataBean holding = new HoldingDataBean(1, new BigDecimal(1), new Date(), account, quote);
        String expected = "\n\tHolding Data for holding: 1 \n\t\t      quantity:1 \n\t\t purchasePrice:1 \n\t\t  purchaseDate: sun Jan 01 01:00:00 EST 1970 \n\t\t       quoteID:symbol";
        assertEquals(expected, holding.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_jajr1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_ZvNs2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDate_OYoB4() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_MVAh5() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePrice_inqc6() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_haGX7() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToHTML_mHIa0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        String expected = "<BR>Holding Data for holding: 1 </B>" + "<LI>      quantity:1.0 </LI>" + "<LI> purchasePrice:1.0 </LI>" + "<LI>  purchaseDate: sun Jan 01 01:00:00 EST 1970 </LI>" + "<LI>       quoteID:null </LI>";
        assertEquals(expected, holdingDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_tFOw0() {
        HoldingDataBean holding = new HoldingDataBean();
        AccountDataBean account = holding.getAccount();
        assertNotNull(account);
    }
}