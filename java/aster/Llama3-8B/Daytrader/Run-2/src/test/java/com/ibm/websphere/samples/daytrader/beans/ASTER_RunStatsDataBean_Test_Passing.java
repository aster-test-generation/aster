/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeUserCount_wuzL0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int tradeUserCount = runStatsDataBean.getTradeUserCount();
        assertEquals(0, tradeUserCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_oFGW0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(10);
        assertEquals(10, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_KvtF1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(10);
        assertEquals(10, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCount_Ivbe0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int deletedOrderCount = 10; // Replace with any valid value
        runStatsDataBean.setDeletedOrderCount(deletedOrderCount);
        assertEquals(deletedOrderCount, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCount_wCgB0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCount_MjRy1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(10);
        runStatsDataBean.setTradeUserCount(0);
        runStatsDataBean.setTradeUserCount(-10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetBuyOrderCount_VDHO0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(1);
        assertEquals(1, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_nziw0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = runStatsDataBean.getOrderCount();
        assertEquals(0, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_zxJT1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = runStatsDataBean.getOrderCount();
        assertEquals(0, orderCount);
        runStatsDataBean.setOrderCount(1);
        orderCount = runStatsDataBean.getOrderCount();
        assertEquals(1, orderCount);
        runStatsDataBean.setOrderCount(-1);
        orderCount = runStatsDataBean.getOrderCount();
        assertEquals(-1, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_mIoh2() {
        RunStatsDataBean runStatsData = new RunStatsDataBean();
        int orderCount = runStatsData.getOrderCount();
        assertEquals(0, orderCount);
        runStatsData.setOrderCount(1);
        orderCount = runStatsData.getOrderCount();
        assertEquals(1, orderCount);
        runStatsData.setOrderCount(-1);
        orderCount = runStatsData.getOrderCount();
        assertEquals(-1, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_tOrz3() {
        RunStatsDataBean runStatsData = new RunStatsDataBean();
        int orderCount = runStatsData.getOrderCount();
        assertEquals(0, orderCount);
        assertNotEquals(1, orderCount);
        assertNotEquals(-1, orderCount);
        runStatsData.setOrderCount(1);
        orderCount = runStatsData.getOrderCount();
        assertEquals(1, orderCount);
        assertNotEquals(0, orderCount);
        assertNotEquals(-1, orderCount);
        runStatsData.setOrderCount(-1);
        orderCount = runStatsData.getOrderCount();
        assertEquals(-1, orderCount);
        assertNotEquals(0, orderCount);
        assertNotEquals(1, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenOrderCount_APqI0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int openOrderCount = runStatsDataBean.getOpenOrderCount();
        assertEquals(0, openOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_SnKn0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int newUserCount = runStatsDataBean.getNewUserCount();
        assertEquals(0, newUserCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenOrderCount_TsLj0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(10);
        assertEquals(10, runStatsDataBean.getOpenOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_goqg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(10);
        assertEquals(10, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_PqGD1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(0);
        assertEquals(0, runStatsDataBean.getTradeStockCount());
        runStatsDataBean.setTradeStockCount(1);
        assertEquals(1, runStatsDataBean.getTradeStockCount());
        runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, runStatsDataBean.getTradeStockCount());
        runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCount_ogJp0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(10);
        assertEquals(10, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCountZero_GZFp1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(0);
        assertEquals(0, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCountNegative_RHfr2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(-10);
        assertEquals(-10, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCountPositive_fVXm3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(100);
        assertEquals(100, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingCount_YmeW0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        assertEquals(10, runStatsDataBean.getHoldingCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCancelledOrderCount_czAE0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int cancelledOrderCount = runStatsDataBean.getCancelledOrderCount();
        assertEquals(0, cancelledOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_UvaC0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(10);
        runStatsDataBean.setNewUserCount(5);
        runStatsDataBean.setSumLoginCount(20);
        runStatsDataBean.setSumLogoutCount(15);
        runStatsDataBean.setHoldingCount(8);
        runStatsDataBean.setOrderCount(12);
        runStatsDataBean.setBuyOrderCount(6);
        runStatsDataBean.setSellOrderCount(3);
        runStatsDataBean.setCancelledOrderCount(2);
        runStatsDataBean.setOpenOrderCount(4);
        runStatsDataBean.setDeletedOrderCount(1);
        String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: 10\n\t\t        newUserCount: 5\n\t\t       sumLoginCount: 20\n\t\t      sumLogoutCount: 15\n\t\t        holdingCount: 8\n\t\t          orderCount: 12\n\t\t       buyOrderCount: 6\n\t\t      sellOrderCount: 3\n\t\t cancelledOrderCount: 2\n\t\t      openOrderCount: 4\n\t\t   deletedOrderCount: 1";
        assertEquals(expected, runStatsDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeStockCount_dmzi0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int tradeStockCount = runStatsDataBean.getTradeStockCount();
        assertEquals(0, tradeStockCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDeletedOrderCount_SGEF0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
        assertEquals(0, deletedOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLogoutCount_guKH0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expectedSumLogoutCount = 0; // Replace with the expected value
        int actualSumLogoutCount = runStatsDataBean.getSumLogoutCount();
        assertEquals(expectedSumLogoutCount, actualSumLogoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLoginCount_Lxpz0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expectedSumLoginCount = 0; // Replace with expected value
        int actualSumLoginCount = runStatsDataBean.getSumLoginCount();
        assertEquals(expectedSumLoginCount, actualSumLoginCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCount_acos0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(10);
        assertEquals(10, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCountWithZero_Htnp2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(0);
        assertEquals(0, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCountWithNegativeNumber_WMAP3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(-10);
        assertEquals(-10, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLogoutCount_HoRI0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(10);
        assertEquals(10, runStatsDataBean.getSumLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLogoutCountWithZero_SNcy2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(0);
        assertEquals(0, runStatsDataBean.getSumLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLogoutCountWithNegativeNumber_UTgA3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(-10);
        assertEquals(-10, runStatsDataBean.getSumLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingCount_yeob0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(0, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingCountWithHoldings_ybik1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(10, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCount_xsaB0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sellOrderCount = runStatsDataBean.getSellOrderCount();
        assertEquals(0, sellOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_zxJT1_1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = runStatsDataBean.getOrderCount();
        runStatsDataBean.setOrderCount(1);
        orderCount = runStatsDataBean.getOrderCount();
        runStatsDataBean.setOrderCount(-1);
        orderCount = runStatsDataBean.getOrderCount();
        assertEquals(-1, orderCount);
    }

    @Test
    @Timeout(value = -1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_zxJT1_2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = runStatsDataBean.getOrderCount();
        runStatsDataBean.setOrderCount(1);
        orderCount = runStatsDataBean.getOrderCount();
        runStatsDataBean.setOrderCount(-1);
        orderCount = runStatsDataBean.getOrderCount();
        assertEquals(1, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_mIoh2_1() {
        RunStatsDataBean runStatsData = new RunStatsDataBean();
        int orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(1);
        orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(-1);
        orderCount = runStatsData.getOrderCount();
        assertEquals(-1, orderCount);
    }

    @Test
    @Timeout(value = -1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_mIoh2_2() {
        RunStatsDataBean runStatsData = new RunStatsDataBean();
        int orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(1);
        orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(-1);
        orderCount = runStatsData.getOrderCount();
        assertEquals(1, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_tOrz3_2() {
        RunStatsDataBean runStatsData = new RunStatsDataBean();
        int orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(1);
        orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(-1);
        orderCount = runStatsData.getOrderCount();
        assertNotEquals(1, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_tOrz3_5() {
        RunStatsDataBean runStatsData = new RunStatsDataBean();
        int orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(1);
        orderCount = runStatsData.getOrderCount();
        runStatsData.setOrderCount(-1);
        orderCount = runStatsData.getOrderCount();
        assertNotEquals(0, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_PqGD1_1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(-2147483648);
        runStatsDataBean.setTradeStockCount(1);
        runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
        runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
        assertEquals(-2147483648, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = -2147483648, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_PqGD1_2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(0);
        runStatsDataBean.setTradeStockCount(1);
        runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
        runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
        assertEquals(1, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_PqGD1_4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(0);
        runStatsDataBean.setTradeStockCount(1);
        runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
        runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, runStatsDataBean.getTradeStockCount());
    }
}