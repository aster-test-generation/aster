/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Failing {
    @Mock
    private TradeConfig tradeConfig;
    @Mock
    private QuoteDataBean quoteDataBean;
    private OrderDataBean orderdatabean;
    @Mock
    private Integer orderID;
    @Mock
    private Log log;
    private HoldingDataBean holding;
    @Mock
    private HoldingDataBean mockHolding;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;
    @Mock
    private QuoteDataBean quote;
    private OrderDataBean orderDataBean;
    private String symbol;
    private AccountDataBean account;
    private Date openDate;
    @Mock
    private Date date;
    @Mock
    private Date completionDate;
    private String orderType;
    private BigDecimal price; /* price */
    private double quantity; /* quantity */
    private BigDecimal orderFee; /* price */
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus() {
        orderDataBean = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        // Arrange
        orderDataBean.setOrderStatus("OPEN");
        // Act
        String actualOrderStatus = orderDataBean.getOrderStatus();
        // Assert
        assertEquals("OPEN", actualOrderStatus);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_hJvU0() {
        OrderDataBean orderDataBean = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 1.0, 10.0, 1.0, "AAPL");
        String orderStatus = orderDataBean.getOrderStatus();
        assertEquals("OPEN", orderStatus);
    }
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus() {
        orderDataBean = new OrderDataBean();
        String expectedOrderStatus = "New";
        orderDataBean.setOrderStatus(expectedOrderStatus);
        assertEquals(expectedOrderStatus, orderDataBean.getOrderStatus());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_jVWs0() {
        OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        orderDataBean.setOrderStatus("Completed");
        assertEquals("Completed", orderDataBean.getOrderStatus());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusNull_qHFW1() {
        OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        orderDataBean.setOrderStatus(null);
        assertNull(orderDataBean.getOrderStatus());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusEmpty_CQyL2() {
        OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        orderDataBean.setOrderStatus("");
        assertEquals("", orderDataBean.getOrderStatus());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol() {
        symbol = "ABC";
        orderdatabean.setQuote(quote);
        orderdatabean.setSymbol(symbol);
        assertEquals(symbol, orderdatabean.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_quoteNotNull() {
        symbol = "ABC";
        orderdatabean.setQuote(quote);
        orderdatabean.setSymbol(symbol);
        when(quote.getSymbol()).thenReturn("XYZ");
        assertEquals("XYZ", orderdatabean.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_quoteNull() {
        orderdatabean.setQuote(null);
        symbol = "ABC";
        orderdatabean.setQuote(quote);
        orderdatabean.setSymbol(symbol);
        assertEquals(symbol, orderdatabean.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_WithQuote_AzLM0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    orderDataBean = new OrderDataBean(null, null, null, null, null, null, null, null, quoteDataBean);
    assertEquals("AAPL", orderDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_WithoutQuote_AppX1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean = new OrderDataBean(null, null, null, null, null, null, null, null, null);
    assertEquals(null, orderDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderID() throws Exception{
        orderdatabean = new OrderDataBean();
        Mockito.when(orderdatabean.getOrderID()).thenReturn(orderID);
        Integer actualOrderID = orderdatabean.getOrderID();
        assertEquals(orderID, actualOrderID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderID_wRho0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "COMPLETED", new Date(), new Date(), 1.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertEquals(1, orderDataBean.getOrderID());
}
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen() throws Exception{
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("open");
        // Act
        boolean result = orderdatabean.isOpen();
        // Assert
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpenProcessing() throws Exception{
        // Arrange
        orderdatabean.setOrderStatus("processing");
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("open");
        // Act
        boolean result = orderdatabean.isOpen();
        // Assert
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpenOtherStatus() throws Exception{
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("open");
        // Arrange
        orderdatabean.setOrderStatus("completed");
        // Act
        boolean result = orderdatabean.isOpen();
        // Assert
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenOrderStatusOpen_SuZM0() {
    OrderDataBean orderDataBean = new OrderDataBean("buy", "open", new Date(), new Date(), 1.0, 10.0, 1.0, "ABC");
    OrderDataBean order = orderDataBean;
    boolean result = order.isOpen();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenOrderStatusProcessing_SrST1() {
    OrderDataBean orderDataBean = new OrderDataBean("buy", "processing", new Date(), new Date(), 1.0, 10.0, 1.0, "ABC");
    OrderDataBean order = orderDataBean;
    boolean result = order.isOpen();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenOrderStatusClosed_Dixa2() {
    OrderDataBean orderDataBean = new OrderDataBean("buy", "closed", new Date(), new Date(), 1.0, 10.0, 1.0, "ABC");
    OrderDataBean order = orderDataBean;
    boolean result = order.isOpen();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoString() throws Exception{
        orderdatabean = new OrderDataBean(
                1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL"
        );
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + orderdatabean.getOpenDate().toString() + "\n\t completionDate: " + orderdatabean.getCompletionDate().toString() + "\n\t       quantity: 10.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: AAPL";
        assertEquals(expected, orderdatabean.toString());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_fZmK0() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new java.sql.Date(1), new java.sql.Date(2), 3, new BigDecimal("4.5"), new BigDecimal("5.6"), "AAPL");
        assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: AAPL", order.toString());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullOrderID_nEPA1() {
        OrderDataBean order = new OrderDataBean(null, "BUY", "OPEN", new java.sql.Date(1), new java.sql.Date(2), 3, new BigDecimal("4.5"), new BigDecimal("5.6"), "AAPL");
        assertEquals("Order \n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: AAPL", order.toString());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullSymbol_zhEh2() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new java.sql.Date(1), new java.sql.Date(2), 3, new BigDecimal("4.5"), new BigDecimal("5.6"), null);
        assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: null", order.toString());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullCompletionDate_duSz3() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new java.sql.Date(1), null, 3, new BigDecimal("4.5"), new BigDecimal("5.6"), "AAPL");
        assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: null\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: AAPL", order.toString());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullOpenDate_BCxY4() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", null, new java.sql.Date(2), 3, new BigDecimal("4.5"), new BigDecimal("5.6"), "AAPL");
        assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: null\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: 5.6\n\t         symbol: AAPL", order.toString());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullOrderFee_BgWv5() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new java.sql.Date(1), new java.sql.Date(2), 3, new BigDecimal("4.5"), null, "AAPL");
        assertEquals("Order " + order.getOrderID() + "\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 3\n\t          price: 4.5\n\t       orderFee: null\n\t         symbol: AAPL", order.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount() throws Exception {
        account = Mockito.mock(AccountDataBean.class);
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        assertEquals(account, orderdatabean.getAccount());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_SSGZ0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), new java.math.BigDecimal("10.0"), "profileID");
        orderDataBean.setAccount(accountDataBean);
        assertEquals(accountDataBean, orderDataBean.getAccount());
    }
    private BigDecimal orderFee; /* price */
}