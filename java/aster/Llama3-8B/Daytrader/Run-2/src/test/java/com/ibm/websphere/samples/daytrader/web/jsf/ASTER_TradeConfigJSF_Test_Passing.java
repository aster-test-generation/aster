/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Passing {
    private TradeConfigJSF tradeConfigJSF;
    private String result = "";
    private ExternalContext context;
    TradeConfigJSF tradeconfigjsf;
    HttpSession httpsession;
    ExternalContext externalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetWebInterfaceList_xvTF0_1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] webInterfaceList = tradeConfigJSF.getWebInterfaceList();
        assertNotNull(webInterfaceList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetWebInterfaceList_xvTF0_2() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] webInterfaceList = tradeConfigJSF.getWebInterfaceList();
        assertTrue(webInterfaceList.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetResult_YqYq0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.getResult();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInterval_aOSH20() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int result = tradeConfigJSF.getMarketSummaryInterval();
        assertEquals(20, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryIntervalWithPositiveValue_TpGa1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMarketSummaryInterval(10);
        int result = tradeConfigJSF.getMarketSummaryInterval();
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryIntervalWithNegativeValue_CXVJ2() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMarketSummaryInterval(-10);
        int result = tradeConfigJSF.getMarketSummaryInterval();
        assertEquals(-10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryIntervalWithZeroValue_NNGo3() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMarketSummaryInterval(0);
        int result = tradeConfigJSF.getMarketSummaryInterval();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWebInterfaceList_dYUg0_1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] webInterfaceList = new String[10];
        for (int i = 0; i < webInterfaceList.length; i++) {
            webInterfaceList[i] = "interface" + i;
        }
        tradeConfigJSF.setWebInterfaceList(webInterfaceList);
        for (int i = 0; i < webInterfaceList.length; i++) {
        }
        assertEquals(webInterfaceList.length, tradeConfigJSF.getWebInterfaceList().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuntimeMode_fdkD0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String expectedRuntimeMode = "expectedRuntimeMode"; // Replace with actual expected runtime mode
        tradeConfigJSF.setRuntimeMode(expectedRuntimeMode);
        String actualRuntimeMode = tradeConfigJSF.getRuntimeMode();
        assertEquals(expectedRuntimeMode, actualRuntimeMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_OicC0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPrimIterations(10);
        assertEquals(10, tradeConfigJSF.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxUsers_BMuc0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expectedMaxUsers = 10; // Replace with the expected value
        tradeConfigJSF.setMaxUsers(expectedMaxUsers);
        int actualMaxUsers = tradeConfigJSF.getMaxUsers();
        assertEquals(expectedMaxUsers, actualMaxUsers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLongRun_RByH0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setLongRun(true);
        boolean result = tradeConfigJSF.isLongRun();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPublishQuotePriceChange_xNPU0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        boolean result = tradeConfigJSF.isPublishQuotePriceChange();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetResult_Ihdi0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setResult("success");
        assertEquals("success", tradeConfigJSF.getResult());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxUsers_Bnwl0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMaxUsers(10);
        assertEquals(10, tradeConfigJSF.getMaxUsers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketSummaryInterval_nzwV0() {
        TradeConfigJSF tradeConfig = new TradeConfigJSF();
        tradeConfig.setMarketSummaryInterval(1);
        assertEquals(1, tradeConfig.getMarketSummaryInterval());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPublishQuotePriceChange_TlIT0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPublishQuotePriceChange(true);
        assertEquals(true, tradeConfigJSF.isPublishQuotePriceChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_eHLf0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
        assertNotNull(orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetListQuotePriceChangeFrequency_czes0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setListQuotePriceChangeFrequency(1);
        assertEquals(1, tradeConfigJSF.getListQuotePriceChangeFrequency());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuntimeModeList_mHrH0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] runtimeModeList = new String[]{"mode1", "mode2"};
        tradeConfigJSF.setRuntimeModeList(runtimeModeList);
        assertEquals(runtimeModeList, tradeConfigJSF.getRuntimeModeList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDisplayOrderAlerts_IvTo0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        boolean displayOrderAlerts = tradeConfigJSF.isDisplayOrderAlerts();
        assertTrue(displayOrderAlerts);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuntimeMode_Jras0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setRuntimeMode("runtimeMode");
        assertEquals("runtimeMode", tradeConfigJSF.getRuntimeMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPopulateDatabaseWithException_nRMD1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        try {
            tradeConfigJSF.populateDatabase();
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildDatabaseTables_MVBw0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.buildDatabaseTables();
        assertEquals("database", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setContext(ExternalContext externalcontext)
    {
        this.externalcontext = externalcontext;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void populateDatabase(java.io.PrintWriter out, String message)
    {
        out.println(message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetWebInterfaceList_xvTF0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] webInterfaceList = tradeConfigJSF.getWebInterfaceList();
        assertNotNull(webInterfaceList);
        assertTrue(webInterfaceList.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWebInterfaceList_dYUg0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] webInterfaceList = new String[10];
        for (int i = 0; i < webInterfaceList.length; i++) {
            webInterfaceList[i] = "interface" + i;
        }
        tradeConfigJSF.setWebInterfaceList(webInterfaceList);
        assertEquals(webInterfaceList.length, tradeConfigJSF.getWebInterfaceList().length);
        for (int i = 0; i < webInterfaceList.length; i++) {
            assertTrue(tradeConfigJSF.getWebInterfaceList()[i].equals("interface" + i));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_Qejp0() {
        tradeConfigJSF = new TradeConfigJSF();
    }
}