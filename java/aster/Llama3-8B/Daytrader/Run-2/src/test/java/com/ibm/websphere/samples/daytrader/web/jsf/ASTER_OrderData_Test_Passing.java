/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity_mnEu0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100.0, "AAPL");
        assertEquals(100.0, orderData.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_bpev0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL");
        orderData.setPrice(new BigDecimal(10));
        assertEquals(new BigDecimal(10), orderData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_WAdI0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Limit", 100, "AAPL");
        String actualOrderStatus = orderData.getOrderStatus();
        String expectedOrderStatus = "Open";
        assertEquals(expectedOrderStatus, actualOrderStatus);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_AISK0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.0), "Limit", 100.0, "AAPL", new BigDecimal(150.0));
        String symbol = orderData.getSymbol();
        assertEquals("AAPL", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_pNQG0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 100, "symbol");
        Integer actual = orderData.getOrderID();
        Integer expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_cSSs0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "symbol");
        orderData.setSymbol("newSymbol");
        assertEquals("newSymbol", orderData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_jBLk0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "symbol");
        orderData.setOrderFee(new BigDecimal(200));
        assertEquals(new BigDecimal(200), orderData.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate_bvcO0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Limit", 100, "AAPL");
        Date expectedOpenDate = new Date();
        Date actualOpenDate = orderData.getOpenDate();
        assertEquals(expectedOpenDate, actualOpenDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_KngK0() {
        OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(100), "limit", 100, "AAPL");
        orderData.setOpenDate(new Date());
        assertNotNull(orderData.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderType_izmB0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL");
        String orderType = orderData.getOrderType();
        assertEquals("limit", orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_KnQI0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "symbol");
        orderData.setQuantity(50);
        assertEquals(50, orderData.getQuantity(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_sOVi0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL");
        BigDecimal orderFee = orderData.getOrderFee();
        assertEquals(new BigDecimal(100), orderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotal_hlBS0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal("100.00"), "limit", 100, "symbol");
        orderData.setTotal(new BigDecimal("1000.00"));
        assertEquals(new BigDecimal("1000.00"), orderData.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCompletionDate_KZeX0() {
        OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(100), "limit", 100, "symbol");
        orderData.setCompletionDate(new Date());
        assertNotNull(orderData.getCompletionDate());
    }
}