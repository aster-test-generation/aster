/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PortfolioJSF_Test_Failing {
    private Integer numberHoldings;
    private TradeServices tradeAction;
    private BigDecimal totalValue = new BigDecimal(0.0);
    private ArrayList<HoldingData> holdingDatas;
    private ExternalContext context;
    private BigDecimal totalGain = new BigDecimal(0.0);
    private BigDecimal totalBasis = new BigDecimal(0.0);
    @Mock
    private TradeServices tradeServices;
    @Mock
    private HttpSession httpSession;
    @Mock
    private ExternalContext externalContext;
    @Mock
    private HoldingDataBean holdingDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    private PortfolioJSF portfoliojsf;
    private HtmlDataTable dataTable;
    HttpSession httpsession;
    ExternalContext externalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals(1, portfoliojsf.getNumberHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals(1, portfoliojsf.getHoldingDatas().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_3() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals("holdingID", holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_4() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals("quoteID", holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_5() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals(1, holdingData.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_6() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals(new BigDecimal("1.0"), holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_7() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals(new BigDecimal("1.0"), holdingData.getBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_8() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals(new BigDecimal("1.0"), holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_9() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals(new BigDecimal("1.0"), holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_OznS0_10() throws Exception {
        MockitoAnnotations.initMocks(this);
        Instance<TradeServices> instance = Mockito.mock(Instance.class);
        when(instance.get()).thenReturn(tradeServices);
        portfoliojsf = new PortfolioJSF(instance);
        when(externalContext.getSession(any())).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("uidBean");
        when(tradeServices.getHoldings(anyString())).thenReturn(Collections.singletonList(holdingDataBean));
        when(tradeServices.getQuote(anyString())).thenReturn(quoteDataBean);
        portfoliojsf.getPortfolio();
        verify(httpSession).getAttribute("uidBean");
        verify(tradeServices).getHoldings("uidBean");
        verify(tradeServices).getQuote("quoteID");
        HoldingData holdingData = portfoliojsf.getHoldingDatas().get(0);
        assertEquals(new BigDecimal("1.0"), holdingData.getPrice());
    }
}