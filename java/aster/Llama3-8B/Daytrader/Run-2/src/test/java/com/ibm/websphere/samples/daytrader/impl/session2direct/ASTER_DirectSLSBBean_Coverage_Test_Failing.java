/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;
import java.math.BigDecimal;
import java.util.Collection;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DirectSLSBBean_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_SetInSessionTrue_ReturnMarketSummary_UfpQ0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean expectedMarketSummary = new MarketSummaryDataBean();
        MarketSummaryDataBean actualMarketSummary = directSLSBBean.getMarketSummary();
        assertEquals(expectedMarketSummary, actualMarketSummary);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_SetInSessionFalse_ReturnMarketSummary_XWSK1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean expectedMarketSummary = new MarketSummaryDataBean();
        directSLSBBean.setInSession(false); // Set inSession to false
        MarketSummaryDataBean actualMarketSummary = directSLSBBean.getMarketSummary();
        assertEquals(expectedMarketSummary, actualMarketSummary);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_SetInSession_ReturnQuotes_KkIj0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.tradeDirect.setInSession(true);
        Collection<?> quotes = directSLSBBean.getAllQuotes();
        assertNotNull(quotes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_SetInSession_False_ReturnQuotes_BKOh1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.tradeDirect.setInSession(false);
        Collection<?> quotes = directSLSBBean.getAllQuotes();
        assertNotNull(quotes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_ReturnOrderDataBean_DiBh1_1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        OrderDataBean result = directSLSBBean.completeOrder(1, true);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_ReturnOrderDataBean_DiBh1_2() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        OrderDataBean result = directSLSBBean.completeOrder(1, true);
        assertEquals(1, result.getOrderID().intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_ReturnOrderDataBean_DiBh1_3() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        OrderDataBean result = directSLSBBean.completeOrder(1, true);
        assertEquals(true, result.getOrderStatus().equals("Completed"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_ReturnQuoteDataBean_sGuf1_1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
        assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_ReturnQuoteDataBean_sGuf1_2() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
        assertEquals("AAPL", quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_sdlr0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Collection<?> orders = directSLSBBean.getOrders("userID");
        assertNotNull(orders);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_XaQi0_1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUserID");
        assertNotNull(accountDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_XaQi0_2() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUserID");
        assertEquals("testUserID", accountDataBean.getAccountID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_XaQi0_3() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUserID");
        assertEquals("testProfileID", accountDataBean.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_ReturnQuoteDataBean_rOwk1_1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.createQuote("AAPL", "Apple Inc.", BigDecimal.valueOf(100.0));
        assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_ReturnQuoteDataBean_rOwk1_2() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.createQuote("AAPL", "Apple Inc.", BigDecimal.valueOf(100.0));
        assertEquals("AAPL", quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_ReturnQuoteDataBean_rOwk1_3() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.createQuote("AAPL", "Apple Inc.", BigDecimal.valueOf(100.0));
        assertEquals("Apple Inc.", quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_ReturnQuoteDataBean_rOwk1_4() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.createQuote("AAPL", "Apple Inc.", BigDecimal.valueOf(100.0));
        assertEquals(BigDecimal.valueOf(100.0), quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_ReturnNull_uqum3() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.createQuote(null, "Apple Inc.", BigDecimal.valueOf(100.0));
        assertNull(quoteDataBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_OrderCompleted_Called_iXRy1() throws java.lang.Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = new TradeDirect();
        bean.orderCompleted("userID", 1);
        verify(bean.tradeDirect).orderCompleted("userID", 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_SetInSessionTrue_ReturnHolding_ViFp0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        directSLSBBean.tradeDirect.setInSession(true);
        HoldingDataBean result = directSLSBBean.getHolding(1);
        assertEquals(holdingDataBean, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_SetInSessionFalse_ReturnHolding_RMRC1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        directSLSBBean.tradeDirect.setInSession(false);
        HoldingDataBean result = directSLSBBean.getHolding(1);
        assertEquals(holdingDataBean, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_ValidHoldingID_ReturnHolding_abGC3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        HoldingDataBean result = directSLSBBean.getHolding(1);
        assertEquals(holdingDataBean, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_CompleteOrderAsync_Called_njMz4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = directSLSBBean.buy("userID", "symbol", 1.0, TradeConfig.ASYNCH);
        assertEquals(orderDataBean.getOrderID(), directSLSBBean.completeOrderAsync(orderDataBean.getOrderID(), false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_jLij0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
        assertNotNull(closedOrders);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Synchronous_rtkO0_1() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should not be null", orderData != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Synchronous_rtkO0_2() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct order ID", orderData.getOrderID() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Synchronous_rtkO0_3() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct order status", orderData.getOrderStatus() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Synchronous_rtkO0_4() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct symbol", orderData.getSymbol() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Synchronous_rtkO0_5() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct quantity", orderData.getQuantity() != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Synchronous_rtkO0_6() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct price", orderData.getPrice() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Asynchronous_wbmB1_1() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should not be null", orderData != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Asynchronous_wbmB1_2() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct order ID", orderData.getOrderID() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Asynchronous_wbmB1_3() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct order status", orderData.getOrderStatus() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Asynchronous_wbmB1_4() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct symbol", orderData.getSymbol() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Asynchronous_wbmB1_5() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct quantity", orderData.getQuantity() != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Asynchronous_wbmB1_6() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct price", orderData.getPrice() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_OrderDataBean_zkBR3_1() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct holding", orderData.getHolding() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_OrderDataBean_zkBR3_2() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct quote", orderData.getQuote() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_OrderDataBean_zkBR3_3() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct order fee", orderData.getOrderFee() != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_CompleteOrderAsync_hTUR4() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        bean.completeOrderAsync(orderData.getOrderID(), false);
        assertEquals("Order should be completed asynchronously", true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_GetClosedOrdersUserID_QpWQ1_NiDq0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
    assertNotNull(closedOrders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_SetInSession_False_ReturnNull_iBdE1_QtvI0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect.setInSession(false);
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertNull(closedOrders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_SessionSet_MNAE1_TvCL0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    directSLSBBean.tradeDirect.setInSession(true);
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
    assertNotNull(closedOrders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_GetClosedOrders_True_iSlc1_wVXd1() throws java.lang.Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Collection<?> closedOrders = bean.getClosedOrders("userID");
    assertNotNull(closedOrders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_Returned_Collection_sUqu1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertNotNull(closedOrders);
    if (closedOrders != null) {
        if (!closedOrders.isEmpty()) {
            // Add a check for the size of the collection
            // Add a check for the type of the elements in the collection
            // Add a check for the first element in the collection
            // Add a check for the last element in the collection
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_ValidUserID_EOKC0_XMDB1() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Collection<?> closedOrders = bean.getClosedOrders("testUserID");
    assertNotNull(closedOrders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_kATz0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertEquals("userID", closedOrders.iterator().next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_ReturnOrderDataBean_DiBh1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        OrderDataBean result = directSLSBBean.completeOrder(1, true);
        assertNotNull(result);
        assertEquals(1, result.getOrderID().intValue());
        assertEquals(true, result.getOrderStatus().equals("Completed"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_ReturnQuoteDataBean_sGuf1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
        assertNotNull(quoteDataBean);
        assertEquals("AAPL", quoteDataBean.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullUserID_QPWk3_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.getOrders(null);
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("userID cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithEmptyUserID_OYZp4_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.getOrders("");
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("userID cannot be empty", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidUserID_gGnJ5_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.getOrders("invalidUserID");
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("Invalid userID", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeException_oLgy1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        try {
            directSLSBBean.updateQuotePriceVolume(null, new BigDecimal(10.0), 100.0);
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("Symbol cannot be null", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeNullPrice_scxU2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        try {
            directSLSBBean.updateQuotePriceVolume("symbol", null, 100.0);
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("Price cannot be null", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeNegativeSharesTraded_DjgA3_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        try {
            directSLSBBean.updateQuotePriceVolume("symbol", new BigDecimal(10.0), -100.0);
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("Shares traded cannot be negative", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_XaQi0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUserID");
        assertNotNull(accountDataBean);
        assertEquals("testUserID", accountDataBean.getAccountID());
        assertEquals("testProfileID", accountDataBean.getProfileID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ExceptionHandling_ltKu3_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.getAccountData("testUserID");
        } catch (Exception e) {
            assertNotNull(e);
            assertEquals("Exception occurred while getting account data", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_ReturnQuoteDataBean_rOwk1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.createQuote("AAPL", "Apple Inc.", BigDecimal.valueOf(100.0));
        assertNotNull(quoteDataBean);
        assertEquals("AAPL", quoteDataBean.getSymbol());
        assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
        assertEquals(BigDecimal.valueOf(100.0), quoteDataBean.getPrice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_InvalidPrice_BpLl4_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.createQuote("AAPL", "Apple Inc.", BigDecimal.valueOf(-100.0));
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("Invalid price", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_InvalidCompanyName_aHKT5_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.createQuote("AAPL", null, BigDecimal.valueOf(100.0));
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("Invalid company name", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_InvalidSymbol_iYrp6_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.createQuote(null, "Apple Inc.", BigDecimal.valueOf(100.0));
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("Invalid symbol", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_InvalidUserID_PEOb2_fid1() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        try {
            bean.logout(null);
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("Invalid user ID", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_InvalidInput_ThrowsException_qete2_fid1() throws java.lang.Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = new TradeDirect();
        try {
            bean.orderCompleted(null, 1);
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("userID cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_NullHoldingID_ThrowsException_VBEq2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.getHolding(null);
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("Holding ID cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Synchronous_rtkO0() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should not be null", orderData != null);
        assertEquals("OrderDataBean object should have correct order ID", orderData.getOrderID() != null);
        assertEquals("OrderDataBean object should have correct order status", orderData.getOrderStatus() != null);
        assertEquals("OrderDataBean object should have correct symbol", orderData.getSymbol() != null);
        assertEquals("OrderDataBean object should have correct quantity", orderData.getQuantity() != 0);
        assertEquals("OrderDataBean object should have correct price", orderData.getPrice() != null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_Asynchronous_wbmB1() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should not be null", orderData != null);
        assertEquals("OrderDataBean object should have correct order ID", orderData.getOrderID() != null);
        assertEquals("OrderDataBean object should have correct order status", orderData.getOrderStatus() != null);
        assertEquals("OrderDataBean object should have correct symbol", orderData.getSymbol() != null);
        assertEquals("OrderDataBean object should have correct quantity", orderData.getQuantity() != 0);
        assertEquals("OrderDataBean object should have correct price", orderData.getPrice() != null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_OrderDataBean_zkBR3() throws Exception {
        DirectSLSBBean bean = new DirectSLSBBean();
        String userID = "testUser";
        Integer holdingID = 1;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean orderData = bean.sell(userID, holdingID, orderProcessingMode);
        assertEquals("OrderDataBean object should have correct holding", orderData.getHolding() != null);
        assertEquals("OrderDataBean object should have correct quote", orderData.getQuote() != null);
        assertEquals("OrderDataBean object should have correct order fee", orderData.getOrderFee() != null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_SetInSession_Fails_CFtU1_xsSn0_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        directSLSBBean.getClosedOrders("userID");
        fail("Expected Exception");
    } catch (Exception e) {
        assertEquals("In session is not set", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_ReturnsNull_RDUJ3_NriZ1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertNull(closedOrders);
}
}