/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeServletAction_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_Constructors_amum0() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        assertNotNull(tradeServletAction);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_Parameters_mYgX1() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String symbols = "AAPL,GOOG,MSFT";
        tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
        verify(ctx).getRequestDispatcher(any(String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_QuoteDataBeans_qBpJ2() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String symbols = "AAPL,GOOG,MSFT";
        Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
        tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
        assertEquals(3, quoteDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_SymbolsSplit_Mjtg3() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String symbols = "AAPL,GOOG,MSFT";
        String[] symbolsSplit = symbols.split(",");
        tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
        assertEquals(3, symbolsSplit.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_SessionNotInvalidated_IIje4() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        HttpSession session = null;
        when(req.getSession()).thenReturn(session);
        action.doLogout(ctx, req, resp, userID);
        verify(session, never()).invalidate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_LogoutCalled_DguK5() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        action.doLogout(ctx, req, resp, userID);
        verify(req).logout();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_RecreateSession_xnac6() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        Object o = mock(Object.class);
        when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(o);
        when(o.equals(Boolean.TRUE)).thenReturn(true);
        action.doLogout(ctx, req, resp, userID);
        verify(req).getSession(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_RecreateSession_False_VJJI7() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        Object o = mock(Object.class);
        when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(o);
        when(o.equals(Boolean.TRUE)).thenReturn(false);
        action.doLogout(ctx, req, resp, userID);
        verify(req, never()).getSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome_AccountDataBean_lMUV0() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String results = "testResults";
        AccountDataBean accountData = mock(AccountDataBean.class);
        action.doHome(ctx, req, resp, userID, results);
        verify(req).setAttribute("accountData", accountData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome_HoldingDataBeans_Bzej1() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String results = "testResults";
        Collection<?> holdingDataBeans = mock(Collection.class);
        action.doHome(ctx, req, resp, userID, results);
        verify(req).setAttribute("holdingDataBeans", holdingDataBeans);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome_Results_LAPJ2() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String results = "testResults";
        action.doHome(ctx, req, resp, userID, results);
        verify(req).setAttribute("results", results);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome_Exception_CdaJ5() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String results = "testResults";
        Exception e = mock(Exception.class);
        action.doHome(ctx, req, resp, userID, results);
        verify(new ServletException("TradeServletAction.doHome(...)" + " exception user =" + userID, e));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome_AccountDataBean_Null_QuRv7() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String results = "testResults";
        AccountDataBean accountData = null;
        action.doHome(ctx, req, resp, userID, results);
        verify(req).setAttribute("accountData", accountData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBuy_Initializations_IQcj0() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String symbol = "testSymbol";
        String quantity = "1";
        action.doBuy(ctx, req, resp, userID, symbol, quantity);
        verify(ctx).setAttribute("orderData", any(OrderDataBean.class));
        verify(req).setAttribute("results", anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoSell_ResultsInitialization_PnqS0() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        Integer holdingID = 1;
        action.doSell(ctx, req, resp, userID, holdingID);
        verify(req, times(1)).setAttribute("results", "");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoSell_ResultsSetting_XzVN2() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        Integer holdingID = 1;
        String results = "testResults";
        action.doSell(ctx, req, resp, userID, holdingID);
        verify(req, times(1)).setAttribute("results", results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_Vdfq0() throws javax.servlet.ServletException, java.io.IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String passwd = "password";
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
    verify(tradeServletAction, times(1)).doLogin(ctx, req, resp, userID, passwd);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogout_InvalidSession_BDOO0_mMzO0() throws javax.servlet.ServletException, java.io.IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    action.doLogin(ctx, req, resp, userID, "testPass");
    HttpSession session = req.getSession();
    session.invalidate();
    action.doLogout(ctx, req, resp, "testUser");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoAccount_SetAttributes_avdR7_QqDB0() throws ServletException, IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    action.doLogin(ctx, req, resp, userID, results);
    verify(req, times(1)).setAttribute("uidBean", userID);
    verify(req, times(1)).setAttribute("sessionCreationDate", eq(new java.util.Date()));
    verify(req, times(1)).setAttribute("results", results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBuy_OrderPageDispatch_dSfU4_CocO0() throws javax.servlet.ServletException, java.io.IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String symbol = "testSymbol";
    String quantity = "1";
    action.doLogin(ctx, req, resp, userID, "testPasswd");
    verify(ctx).getRequestDispatcher(any(String.class)).forward(req, resp);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBuy_HomePageDispatch_tdCr5_xIxd0() throws javax.servlet.ServletException, java.io.IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String symbol = "testSymbol";
    String quantity = "invalid";
    try {
        action.doLogin(ctx, req, resp, userID, "testPasswd");
        fail("Expected ServletException");
    } catch (ServletException e) {
        verify(ctx).getRequestDispatcher(any(String.class)).forward(req, resp);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogout_InvalidSession_BDOO0_mMzO0_fid1() throws javax.servlet.ServletException, java.io.IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    action.doLogin(ctx, req, resp, userID, "testPass");
    HttpSession session = req.getSession();
    session.invalidate();
    action.doLogout(ctx, req, resp, userID);
}
}