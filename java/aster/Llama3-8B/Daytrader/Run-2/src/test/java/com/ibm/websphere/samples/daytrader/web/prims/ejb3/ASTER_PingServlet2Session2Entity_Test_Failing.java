/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockedConstruction;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2Entity_Test_Failing {
    private static int hitCount;
    private static String initTime;
    private TradeServices tradeSLSBLocal;
    PingServlet2Session2Entity pingservlet2session2entity;
    HttpServlet httpservlet;
    InitialContext initialcontext;
    MockedConstruction<InitialContext> mockedInitialContext;
    HttpServletResponse httpservletresponse;
    @Mock
    private HttpServletRequest httpServletRequest;
    @Mock
    private HttpServletResponse httpServletResponse;
    @Mock
    private TradeServices tradeSLSBLocalMock;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private InitialContext initialContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        mockedInitialContext = mockConstruction(InitialContext.class);
        httpservlet = mock(HttpServlet.class);
        initialcontext = mock(InitialContext.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingservlet2session2entity = new PingServlet2Session2Entity();
        HttpServletRequest httprequest = mock(HttpServletRequest.class);
        when(httprequest.getMethod()).thenReturn("POST");
        pingservlet2session2entity.doPost(httprequest, httpservletresponse);
        verify(httpservletresponse).sendRedirect(anyString());
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostException_XAgw1() throws ServletException, IOException {
        PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getMethod()).thenReturn("POST");
        when(res.getWriter()).thenThrow(new IOException("Error"));
        try {
            pingServlet2Session2Entity.doPost(req, res);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("Error", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostNullRequest_CVIu2() throws ServletException, IOException {
        PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
        HttpServletResponse res = mock(HttpServletResponse.class);
        try {
            pingServlet2Session2Entity.doPost(null, res);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("request", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostNullResponse_ORHq3() throws ServletException, IOException {
        PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
        HttpServletRequest req = mock(HttpServletRequest.class);
        try {
            pingServlet2Session2Entity.doPost(req, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("response", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_EgVm0() {
        PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
        String result = pingServlet2Session2Entity.getServletInfo();
        assertEquals("web primitive, tests Servlet to Session to Entity EJB path", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_WnOr0() throws Exception {
        mockedInitialContext = mockConstruction(InitialContext.class);
        httpservlet = mock(HttpServlet.class);
        initialcontext = mock(InitialContext.class);
        pingservlet2session2entity = new PingServlet2Session2Entity();
        when(initialcontext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenReturn(mock(TradeSLSBBean.class));
        pingservlet2session2entity.init(httpservlet);
        assertEquals(0, hitCount);
        verify(initialcontext, times(1)).lookup("java:comp/env/ejb/TradeSLSBBean");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_wsYl0() throws Exception {
        MockitoAnnotations.initMocks(this);
        initTime = "initTime";
        hitCount = 0;
        tradeSLSBLocal = tradeSLSBLocalMock;
        when(httpServletRequest.getParameter("symbol")).thenReturn("symbol");
        when(tradeSLSBLocalMock.getQuote("symbol")).thenReturn(quoteDataBean);
        when(initialContext.lookup("TradeServices")).thenReturn(tradeSLSBLocalMock);
        pingservlet2session2entity.doGet(httpServletRequest, httpServletResponse);
        verify(httpServletResponse).setContentType("text/html");
        verify(httpServletResponse).getWriter().append(anyString());
        verify(quoteDataBean).toHTML();
        verify(tradeSLSBLocalMock).getQuote("symbol");
        verify(initialContext).lookup("TradeServices");
        assertEquals(1, hitCount);
    }
}