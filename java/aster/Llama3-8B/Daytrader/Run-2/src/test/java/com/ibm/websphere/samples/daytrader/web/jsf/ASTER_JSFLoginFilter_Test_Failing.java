/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JSFLoginFilter_Test_Failing {
    private FilterConfig filterConfig = null;
    @Mock
    private HttpServletRequest httpservletrequest;
    @Mock
    private HttpSession httpsession;
    @Mock
    private HttpServletResponse httpservletresponse;
    @Mock
    private FilterChain filterChain;
    private JSFLoginFilter jsfloginfilter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_YPPq0() throws ServletException {
        JSFLoginFilter filter = new JSFLoginFilter();
        FilterConfig filterConfig = mock(FilterConfig.class);
        filter.init(filterConfig);
        verify(filterConfig).getServletContext();
        verify(filterConfig).getInitParameter("param");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoFilter_userNotLoggedIn_redirectToWelcomePage_tjem0() throws Exception {
        JSFLoginFilter jsfloginfilter = new JSFLoginFilter();
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        FilterConfig filterConfig = mock(FilterConfig.class);
        when(httpservletrequest.getServletPath()).thenReturn("somePath");
        when(httpsession.getAttribute("uidBean")).thenReturn(null);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(httpservletresponse).thenReturn(response);
        jsfloginfilter.doFilter(httpservletrequest, response, filterChain);
        verify(response).sendRedirect("welcome.faces");
    }
}