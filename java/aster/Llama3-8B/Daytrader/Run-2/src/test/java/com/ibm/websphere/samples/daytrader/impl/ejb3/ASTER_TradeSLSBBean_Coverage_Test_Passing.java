/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import java.math.BigDecimal;
import java.util.Collection;
import javax.ejb.EJBException;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeSLSBBean_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_PublishConfigTrue_ThrowsException_hUcJ2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        TradeConfig.setPublishQuotePriceChange(true);
        QuoteDataBean quote = new QuoteDataBean("symbol", "company", 100, BigDecimal.valueOf(10), BigDecimal.valueOf(5), BigDecimal.valueOf(3), BigDecimal.valueOf(15), 500);
        BigDecimal oldPrice = BigDecimal.valueOf(5);
        BigDecimal changeFactor = BigDecimal.valueOf(1.1);
        double sharesTraded = 100;
        try {
            tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithNullAccount_ZRcC1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean("symbol");
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "buy";
        double quantity = 10.0;
        try {
            tradeSLSBBean.createOrder(null, quote, holding, orderType, quantity);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithNullQuote_xANo2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "buy";
        double quantity = 10.0;
        try {
            tradeSLSBBean.createOrder(account, null, holding, orderType, quantity);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithNullHolding_WwcA3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean("symbol");
        String orderType = "buy";
        double quantity = 10.0;
        try {
            tradeSLSBBean.createOrder(account, quote, null, orderType, quantity);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithInvalidOrderType_Nwpj4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean("symbol");
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "invalid";
        double quantity = 10.0;
        try {
            tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithZeroQuantity_lSeP5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean("symbol");
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "buy";
        double quantity = 0.0;
        try {
            tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithNegativeQuantity_Rfpo6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean("symbol");
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "buy";
        double quantity = -10.0;
        try {
            tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void tearDown_WwhA10() {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseWithContext_Kevr0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("symbol");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithNullUserID_sQcb1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy(null, "symbol", 10.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithNullSymbol_rymI2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("userID", null, 10.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithZeroQuantity_mHwZ3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("userID", "symbol", 0.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithNegativeQuantity_EfSV4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("userID", "symbol", -10.0, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithInvalidOrderProcessingMode_TisL5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy("userID", "symbol", 10.0, 100);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidUserID_ZFuy1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("invalidUserID", 1, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidHoldingID_fMkt2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("userID", 2, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithNullUserID_rtqG3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell(null, 1, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithNullHoldingID_iuLl4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("userID", null, TradeConfig.SYNCH);
            fail("Expected EJBException");
        } catch (EJBException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_Tyyh0_wJXb0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_EmptyUserID_rEcP2_zYTH0() {
    AccountProfileDataBean profileData = new AccountProfileDataBean("", "password", "fullName", "address", "email", "creditCard");
    try {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean(); // Create an instance of TradeSLSBBean
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("userID"); // Call the method under test
        fail("Expected exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_NullUserID_jApy3_dPcQ0() {
    AccountProfileDataBean profileData = new AccountProfileDataBean(null, "password", "fullName", "address", "email", "creditCard");
    try {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean(); // Create an instance of TradeSLSBBean
        tradeSLSBBean.getClosedOrders(null); // Call the method under test
        fail("Expected exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_AddressNull_SQwp4_lKsd0() {
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", null, "email", "creditCard");
    try {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean(); // Create an instance of TradeSLSBBean
        tradeSLSBBean.getClosedOrders("userID"); // Call the method under test
        fail("Expected exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_PasswordNull_zDfz5_FIgb0() {
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", null, "fullName", "address", "email", "creditCard");
    try {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean(); // Create an instance of TradeSLSBBean
        tradeSLSBBean.getClosedOrders("userID"); // Call the method under test
        fail("Expected exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_CreditCardNull_PsFI7_cXCT0() {
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", null);
    try {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean(); // Create an instance of TradeSLSBBean
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("userID"); // Call the method under test
        fail("Expected exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_FullNameNull_oFol6_piaE0() {
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", null, "address", "email", "creditCard");
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean(); // Create an instance of TradeSLSBBean
    try {
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("userID");
        fail("Expected exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_EmailNull_VBlz8_NLAE0() {
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", null, "creditCard");
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean(); // Create an instance of TradeSLSBBean
    try {
        tradeSLSBBean.getClosedOrders("userID"); // Call the method under test
        fail("Expected exception");
    } catch (Exception e) {
    }
}
}