/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Failing {
    private OrderData[] closedOrders;
    private ExternalContext context;
    private TradeServices tradeAction;
    @Mock
    AccountDataJSF accountdatajsf;
    @Mock
    HttpSession httpsession;
    @Mock
    ExternalContext externalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetClosedOrders_bxHv0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        OrderData[] closedOrders = new OrderData[10];
        accountDataJSF.setClosedOrders(closedOrders);
        assertEquals(10, accountDataJSF.getClosedOrders().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetClosedOrdersWithNull_uSLg1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setClosedOrders(null);
        assertNotNull(accountDataJSF.getClosedOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_fYtC0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gainPercent = new BigDecimal(0.5);
        accountDataJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, accountDataJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithZeroGainPercent_nUwu1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gainPercent = new BigDecimal(0);
        accountDataJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, accountDataJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithNegativeGainPercent_LDDv2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gainPercent = new BigDecimal(-0.5);
        accountDataJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, accountDataJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithNullGainPercent_iOxF3() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gainPercent = null;
        accountDataJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, accountDataJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogoutCount_JbvF0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setLogoutCount(10);
        assertEquals(10, accountDataJSF.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumOfCashHoldings_ipPs0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal sumOfCashHoldings = BigDecimal.ZERO;
        accountDataJSF.setSumOfCashHoldings(sumOfCashHoldings);
        assertEquals(sumOfCashHoldings, accountDataJSF.getSumOfCashHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testNumbersHoldings_Vnhl0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        int expected = 0;
        int actual = accountDataJSF.getNumberHoldings();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrders_ayiy0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrders = accountDataJSF.getNumberOfOrders();
        assertNotNull(numberOfOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGain_Ztty0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = accountDataJSF.getGain();
        assertNotNull(gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainWithPositiveGain_rtHn1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = new BigDecimal("100.00");
        accountDataJSF.setGain(gain);
        BigDecimal result = accountDataJSF.getGain();
        assertEquals(gain, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainWithNegativeGain_WHIh2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = new BigDecimal("-100.00");
        accountDataJSF.setGain(gain);
        BigDecimal result = accountDataJSF.getGain();
        assertEquals(gain, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_dKJo0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date creationDate = accountDataJSF.getCreationDate();
        assertNotNull(creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLogoutCount_buqe0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        int logoutCount = accountDataJSF.getLogoutCount();
        assertEquals(0, logoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_ppiv0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertNotNull(numberOfOrderRows);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_RKdF1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertEquals(0, (int) numberOfOrderRows);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_PhSQ2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertTrue(numberOfOrderRows > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_XGtG3() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertTrue(numberOfOrderRows >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_hqGY6() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertEquals(10, (int) numberOfOrderRows);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_Flek7() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertNotEquals(10, (int) numberOfOrderRows);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_kRaC8() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertEquals(100, (int) numberOfOrderRows);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_zsOp9() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertNotEquals(100, (int) numberOfOrderRows);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentTime_UWDz0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date currentTime = accountDataJSF.getCurrentTime();
        assertNotNull(currentTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance_ajau0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal openBalance = new BigDecimal(100);
        accountDataJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, accountDataJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalanceWithZero_sdpE1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal openBalance = BigDecimal.ZERO;
        accountDataJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, accountDataJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalanceWithNegativeValue_Wlgb2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal openBalance = new BigDecimal(-100);
        accountDataJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, accountDataJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProfileID_KOsV0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        String profileID = accountDataJSF.getProfileID();
        assertNotNull(profileID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_GtGN0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date creationDate = new Date();
        accountDataJSF.setCreationDate(creationDate);
        assertEquals(creationDate, accountDataJSF.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToggleShowAllRows_SKOa0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(Mockito.mock(Instance.class));
        Mockito.when(Mockito.mock(Instance.class).select(Mockito.any(Class.class))).thenReturn(Mockito.mock(Instance.class));
        accountDataJSF.toggleShowAllRows();
        Mockito.verify(accountDataJSF).setNumberOfOrderRows(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBalance_jfsp0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal balance = accountDataJSF.getBalance();
        assertNotNull(balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBalanceWithZeroBalance_yAfU2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        when(accountDataJSF.getBalance()).thenReturn(BigDecimal.ZERO);
        BigDecimal balance = accountDataJSF.getBalance();
        assertEquals(BigDecimal.ZERO, balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLogin_ViXG0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date lastLogin = accountDataJSF.getLastLogin();
        assertNotNull(lastLogin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLoginWithServices_luqB1() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.get()).thenReturn(mock(TradeServices.class));
        AccountDataJSF accountDataJSF = new AccountDataJSF(services);
        Date lastLogin = accountDataJSF.getLastLogin();
        assertNotNull(lastLogin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLoginWithNullServices_UUUG2() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.get()).thenReturn(null);
        AccountDataJSF accountDataJSF = new AccountDataJSF(services);
        Date lastLogin = accountDataJSF.getLastLogin();
        assertNotNull(lastLogin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLoginWithNoServices_UCOK3() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.get()).thenThrow(new IllegalStateException());
        AccountDataJSF accountDataJSF = new AccountDataJSF(services);
        Date lastLogin = accountDataJSF.getLastLogin();
        assertNotNull(lastLogin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLoginWithServicesThatReturnsNonNull_DOOH6() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.select(TradeServices.class)).thenReturn(services);
        when(services.get()).thenReturn(mock(TradeServices.class));
        AccountDataJSF accountDataJSF = new AccountDataJSF(services);
        Date lastLogin = accountDataJSF.getLastLogin();
        assertNotNull(lastLogin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrders_KOsn0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        OrderData[] orders = accountDataJSF.getAllOrders();
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSessionCreationDate_Tmeo0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date sessionCreationDate = new Date();
        accountDataJSF.setSessionCreationDate(sessionCreationDate);
        assertEquals(sessionCreationDate, accountDataJSF.getSessionCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalance_xQCu0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal openBalance = accountDataJSF.getOpenBalance();
        assertNotNull(openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalance_jNHm0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal balance = new BigDecimal(100);
        accountDataJSF.setBalance(balance);
        assertEquals(balance, accountDataJSF.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalanceWithZeroBalance_bUwi1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal balance = BigDecimal.ZERO;
        accountDataJSF.setBalance(balance);
        assertEquals(balance, accountDataJSF.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalanceWithNegativeBalance_CuGF2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal balance = new BigDecimal(-100);
        accountDataJSF.setBalance(balance);
        assertEquals(balance, accountDataJSF.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfileID_RLca0_fLlK0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        String profileID = "testProfileID";
        accountDataJSF.setProfileID(profileID);
        assertEquals(profileID, accountDataJSF.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetClosedOrdersWithNull_uSLg1_fid1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setClosedOrders(null);
        assertNull(accountDataJSF.getClosedOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_XGtG3_fid1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertFalse(numberOfOrderRows < 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfOrderRows_hyoL5_fid1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = accountDataJSF.getNumberOfOrderRows();
        assertTrue(numberOfOrderRows <= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToggleShowAllRows_SKOa0_fid1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(Mockito.mock(Instance.class));
        accountDataJSF.toggleShowAllRows();
        Mockito.verify(accountDataJSF).setNumberOfOrderRows(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountID_pGYm0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setAccountID(123);
        assertEquals(123, accountDataJSF.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_VNDL0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer actualAccountID = accountDataJSF.getAccountID();
        Integer expectedAccountID = null;
        assertEquals(expectedAccountID, actualAccountID);
    }
}