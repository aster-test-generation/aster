/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
    TradeDirect tradedirect;
    Connection connection;
    DataSource datasource;
    Statement statement;
    @Mock
    private MarketSummaryDataBean marketSummaryDataBean;
    @Mock
    private PreparedStatement preparedstatement;
    @Mock
    private ResultSet resultset;
    @Mock
    private TradeConfig tradeConfig;
    private TradeDirect tradeDirect;
    private static String getAllQuotesSQL = "select * from quoteejb q";
    private boolean inSession = false;
    OrderDataBean orderDataBean;
    private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
    AccountDataBean accountDataBean;
    @Mock
    private PreparedStatement preparedStatement;
    @Mock
    private ResultSet resultSet;
    @Mock
    private DataSource dataSource;
    @Mock
    private AccountDataBean accountData;
    @Mock
    private QuoteDataBean quoteData;
    @Mock
    private HoldingDataBean holdingData;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private KeySequenceDirect keySequenceDirect;
    @Mock
    private Log log;
    AccountProfileDataBean accountProfileDataBean;
    private UserTransaction txn;
    private ManagedExecutorService mes;
    private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
    private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
    private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
    private static BigDecimal ZERO = new BigDecimal(0.0);
    private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
    private static long nextMarketSummary = System.currentTimeMillis();
    private static final Integer marketSummaryLock = new Integer(0);
    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
    private static final String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
    private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_VKMX0() {
        TradeDirect tradeDirect = new TradeDirect();
        double rnd1 = 10.0;
        double rnd2 = 20.0;
        double expected = 0.0; // replace with your expected result
        double actual = tradeDirect.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_KZEF0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_iyOM0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSuccess_svpr0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(1, true);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSuccess_PbgL0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAlreadyCompleted_TpfC1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        // Fix the error by checking if orderData is null
        assertNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAlreadyCompleted_TpfC1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        assertEquals("completed", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderError_WrwP2_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAlreadyCompleted_tLEI1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        assertNotNull(orderData);
        try {
            tradeDirect.completeOrder(new Integer(1), true);
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:completeOrder -- attempt to complete Order that is already completed", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_FNFR0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        Assertions.assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderNull_ALUI1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(null, true);
        Assertions.assertNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_sdYA0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("testUser");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersNull_QaNv1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersEmpty_ZFNF2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_ohon0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = tradeDirect.getQuote("symbol");
        assertNotNull(quoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteNull_BRla1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = tradeDirect.getQuote(null);
        assertNull(quoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_FLmA0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.queueOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderFalse_XocU1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.queueOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderNull_Zkwv2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.queueOrder(null, true);
        fail("Expected NullPointerException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_afNU0() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean result = tradeDirect.pingTwoPhase("symbol");
        assertThrows(UnsupportedOperationException.class, () -> {
            result.getCompanyName();
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_SAdZ0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.logout("testUser");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInputs_bjps0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellNullUserID_fwYH1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell(null, 1, TradeConfig.SYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellNullHoldingID_vtGf2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", null, TradeConfig.SYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellInvalidOrderProcessingMode_EJQm3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_BSpX0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellNullHoldingID_DYdr2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", null, TradeConfig.SYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellInvalidOrderProcessingMode_DMqS3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeAsynch_XAaK8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeAsynch2Phase_AZwU9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellInvalidHoldingID_DhwR2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 0, TradeConfig.SYNCH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_WXtg0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellInvalidOrderProcessingMode_UdIY3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.sell("user1", 1, 5);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataNull_fIBB7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertNull(orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataCancelled_QgWW8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataCompleted_fETF9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertEquals("completed", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataQueued_MUCb10() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH);
        assertEquals("queued", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataGlobalTransactionCommitted_HKWA13() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH_2PHASE);
        assertEquals("completed", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_Mwlg0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_Mwlg0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertEquals(1, holdingData.getHoldingID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingNull_lRuq1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(null);
        assertNull(holdingData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncTrue_WPIU0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> result = tradeDirect.completeOrderAsync(1, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncFalse_PfRR1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> result = tradeDirect.completeOrderAsync(1, false);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_anky0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.ONE, 10.0, true);
        assertEquals(quoteData, new QuoteDataBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_LSjs0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        quoteData.setSymbol("symbol1");
        quoteData.setCompanyName("company1");
        quoteData.setPrice(BigDecimal.valueOf(10.0));
        quoteData.setOpen(BigDecimal.valueOf(10.0));
        quoteData.setLow(BigDecimal.valueOf(5.0));
        quoteData.setHigh(BigDecimal.valueOf(15.0));
        quoteData.setVolume(100.0);
        BigDecimal changeFactor = BigDecimal.valueOf(1.1);
        double sharesTraded = 50.0;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol1", changeFactor, sharesTraded, true);
        assertEquals(quoteData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt2_JBGl1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        quoteData.setSymbol("symbol2");
        quoteData.setCompanyName("company2");
        quoteData.setPrice(BigDecimal.valueOf(10.0));
        quoteData.setOpen(BigDecimal.valueOf(10.0));
        quoteData.setLow(BigDecimal.valueOf(5.0));
        quoteData.setHigh(BigDecimal.valueOf(15.0));
        quoteData.setVolume(100.0);
        BigDecimal changeFactor = BigDecimal.valueOf(0.9);
        double sharesTraded = 50.0;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol2", changeFactor, sharesTraded, true);
        assertEquals(quoteData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt3_BdDy2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        quoteData.setSymbol("symbol3");
        quoteData.setCompanyName("company3");
        quoteData.setPrice(BigDecimal.valueOf(10.0));
        quoteData.setOpen(BigDecimal.valueOf(10.0));
        quoteData.setLow(BigDecimal.valueOf(5.0));
        quoteData.setHigh(BigDecimal.valueOf(15.0));
        quoteData.setVolume(100.0);
        BigDecimal changeFactor = BigDecimal.valueOf(1.0);
        double sharesTraded = 0.0;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol3", changeFactor, sharesTraded, true);
        assertEquals(quoteData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt4_PihI3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        quoteData.setSymbol("symbol4");
        quoteData.setCompanyName("company4");
        quoteData.setPrice(BigDecimal.valueOf(10.0));
        quoteData.setOpen(BigDecimal.valueOf(10.0));
        quoteData.setLow(BigDecimal.valueOf(5.0));
        quoteData.setHigh(BigDecimal.valueOf(15.0));
        quoteData.setVolume(100.0);
        BigDecimal changeFactor = BigDecimal.valueOf(1.0);
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol4", changeFactor, sharesTraded, true);
        assertEquals(quoteData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt5_FIKl4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        quoteData.setSymbol("symbol5");
        quoteData.setCompanyName("company5");
        quoteData.setPrice(BigDecimal.valueOf(10.0));
        quoteData.setOpen(BigDecimal.valueOf(10.0));
        quoteData.setLow(BigDecimal.valueOf(5.0));
        quoteData.setHigh(BigDecimal.valueOf(15.0));
        quoteData.setVolume(100.0);
        BigDecimal changeFactor = BigDecimal.valueOf(0.0);
        double sharesTraded = 50.0;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol5", changeFactor, sharesTraded, true);
        assertEquals(quoteData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_ypDU0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginInvalidPassword_dgaC2() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("validUser", "invalidPassword");
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:Login failure for user: validUser\n\tIncorrect password-->" + "validUser:" + "invalidPassword", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_HELg0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean("testUserID", "testPassword", "testFullName", "testAddress", "testEmail", "testCreditCard");
        AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_trEp0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean("testUser", "testPassword", "testFullName", "testAddress", "testEmail", "testCreditCard");
        AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_ZKIV0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternal_hkGZ0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(true).thenReturn(false);
        when(rs.getBigDecimal("TSIA")).thenReturn(BigDecimal.ONE);
        when(rs.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ZERO);
        when(rs.getDouble("totalVolume")).thenReturn(1.0);
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        verify(conn, times(1)).prepareStatement(anyString(), anyInt(), anyInt());
        verify(stmt, times(4)).close();
        verify(rs, times(1)).next();
        assertEquals(BigDecimal.ONE, marketSummaryData.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternal_hkGZ0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(true).thenReturn(false);
        when(rs.getBigDecimal("TSIA")).thenReturn(BigDecimal.ONE);
        when(rs.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ZERO);
        when(rs.getDouble("totalVolume")).thenReturn(1.0);
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        verify(conn, times(1)).prepareStatement(anyString(), anyInt(), anyInt());
        verify(stmt, times(4)).close();
        verify(rs, times(1)).next();
        assertEquals(BigDecimal.ZERO, marketSummaryData.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternal_hkGZ0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(true).thenReturn(false);
        when(rs.getBigDecimal("TSIA")).thenReturn(BigDecimal.ONE);
        when(rs.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ZERO);
        when(rs.getDouble("totalVolume")).thenReturn(1.0);
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        verify(conn, times(1)).prepareStatement(anyString(), anyInt(), anyInt());
        verify(stmt, times(4)).close();
        verify(rs, times(1)).next();
        assertEquals(1.0, marketSummaryData.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternalNoResults_uGzf1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(false);
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        verify(conn, times(1)).prepareStatement(anyString(), anyInt(), anyInt());
        verify(stmt, times(4)).close();
        assertEquals(null, marketSummaryData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternalError_DjYv2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(true).thenReturn(false);
        when(rs.getBigDecimal("TSIA")).thenThrow(new SQLException());
        try {
            tradeDirect.getMarketSummaryInternal();
            fail("Expected SQLException");
        } catch (SQLException e) {
        }
        verify(conn, times(1)).prepareStatement(anyString(), anyInt(), anyInt());
        verify(stmt, times(4)).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesException_qCKo2_OdhD0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[]{"CREATE TABLE", "DROP TABLE"};
        java.io.PrintWriter out = new java.io.PrintWriter(new java.io.File("test.txt"));
        try {
            tradeDirect.recreateDBTables(sqlBuffer, out);
            fail("Expected Exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_uxed0_1() throws Exception {
        tradeDirect = new TradeDirect();
        tradeConfig = mock(TradeConfig.class);
        when(TradeConfig.getMarketSummaryInterval()).thenReturn(1);
        when(MarketSummaryDataBean.getRandomInstance()).thenReturn(marketSummaryDataBean);
        when(datasource.getConnection()).thenReturn(connection);
        when(marketSummaryDataBean.getOpenTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getGainPercent()).thenReturn(BigDecimal.TEN);
        when(marketSummaryDataBean.getTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getVolume()).thenReturn(1.0);
        when(marketSummaryDataBean.getTopGainers()).thenReturn(new ArrayList<>());
        when(marketSummaryDataBean.getTopLosers()).thenReturn(new ArrayList<>());
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        resultset = mock(ResultSet.class);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ONE);
        when(resultset.getBigDecimal("gainPercent")).thenReturn(BigDecimal.TEN);
        when(resultset.getBigDecimal("tsia")).thenReturn(BigDecimal.ONE);
        when(resultset.getDouble("volume")).thenReturn(1.0);
        when(resultset.getTimestamp("summaryDate")).thenReturn(new Timestamp(System.currentTimeMillis()));
        MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
        assertEquals(marketSummaryDataBean, marketSummary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_uxed0_2() throws Exception {
        tradeDirect = new TradeDirect();
        tradeConfig = mock(TradeConfig.class);
        when(TradeConfig.getMarketSummaryInterval()).thenReturn(1);
        when(MarketSummaryDataBean.getRandomInstance()).thenReturn(marketSummaryDataBean);
        when(datasource.getConnection()).thenReturn(connection);
        when(marketSummaryDataBean.getOpenTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getGainPercent()).thenReturn(BigDecimal.TEN);
        when(marketSummaryDataBean.getTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getVolume()).thenReturn(1.0);
        when(marketSummaryDataBean.getTopGainers()).thenReturn(new ArrayList<>());
        when(marketSummaryDataBean.getTopLosers()).thenReturn(new ArrayList<>());
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        resultset = mock(ResultSet.class);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ONE);
        when(resultset.getBigDecimal("gainPercent")).thenReturn(BigDecimal.TEN);
        when(resultset.getBigDecimal("tsia")).thenReturn(BigDecimal.ONE);
        when(resultset.getDouble("volume")).thenReturn(1.0);
        when(resultset.getTimestamp("summaryDate")).thenReturn(new Timestamp(System.currentTimeMillis()));
        MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
        assertEquals(BigDecimal.ONE, marketSummary.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_uxed0_3() throws Exception {
        tradeDirect = new TradeDirect();
        tradeConfig = mock(TradeConfig.class);
        when(TradeConfig.getMarketSummaryInterval()).thenReturn(1);
        when(MarketSummaryDataBean.getRandomInstance()).thenReturn(marketSummaryDataBean);
        when(datasource.getConnection()).thenReturn(connection);
        when(marketSummaryDataBean.getOpenTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getGainPercent()).thenReturn(BigDecimal.TEN);
        when(marketSummaryDataBean.getTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getVolume()).thenReturn(1.0);
        when(marketSummaryDataBean.getTopGainers()).thenReturn(new ArrayList<>());
        when(marketSummaryDataBean.getTopLosers()).thenReturn(new ArrayList<>());
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        resultset = mock(ResultSet.class);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ONE);
        when(resultset.getBigDecimal("gainPercent")).thenReturn(BigDecimal.TEN);
        when(resultset.getBigDecimal("tsia")).thenReturn(BigDecimal.ONE);
        when(resultset.getDouble("volume")).thenReturn(1.0);
        when(resultset.getTimestamp("summaryDate")).thenReturn(new Timestamp(System.currentTimeMillis()));
        MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
        assertEquals(BigDecimal.TEN, marketSummary.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_uxed0_4() throws Exception {
        tradeDirect = new TradeDirect();
        tradeConfig = mock(TradeConfig.class);
        when(TradeConfig.getMarketSummaryInterval()).thenReturn(1);
        when(MarketSummaryDataBean.getRandomInstance()).thenReturn(marketSummaryDataBean);
        when(datasource.getConnection()).thenReturn(connection);
        when(marketSummaryDataBean.getOpenTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getGainPercent()).thenReturn(BigDecimal.TEN);
        when(marketSummaryDataBean.getTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getVolume()).thenReturn(1.0);
        when(marketSummaryDataBean.getTopGainers()).thenReturn(new ArrayList<>());
        when(marketSummaryDataBean.getTopLosers()).thenReturn(new ArrayList<>());
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        resultset = mock(ResultSet.class);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ONE);
        when(resultset.getBigDecimal("gainPercent")).thenReturn(BigDecimal.TEN);
        when(resultset.getBigDecimal("tsia")).thenReturn(BigDecimal.ONE);
        when(resultset.getDouble("volume")).thenReturn(1.0);
        when(resultset.getTimestamp("summaryDate")).thenReturn(new Timestamp(System.currentTimeMillis()));
        MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
        assertEquals(BigDecimal.ONE, marketSummary.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_uxed0_5() throws Exception {
        tradeDirect = new TradeDirect();
        tradeConfig = mock(TradeConfig.class);
        when(TradeConfig.getMarketSummaryInterval()).thenReturn(1);
        when(MarketSummaryDataBean.getRandomInstance()).thenReturn(marketSummaryDataBean);
        when(datasource.getConnection()).thenReturn(connection);
        when(marketSummaryDataBean.getOpenTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getGainPercent()).thenReturn(BigDecimal.TEN);
        when(marketSummaryDataBean.getTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getVolume()).thenReturn(1.0);
        when(marketSummaryDataBean.getTopGainers()).thenReturn(new ArrayList<>());
        when(marketSummaryDataBean.getTopLosers()).thenReturn(new ArrayList<>());
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        resultset = mock(ResultSet.class);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ONE);
        when(resultset.getBigDecimal("gainPercent")).thenReturn(BigDecimal.TEN);
        when(resultset.getBigDecimal("tsia")).thenReturn(BigDecimal.ONE);
        when(resultset.getDouble("volume")).thenReturn(1.0);
        when(resultset.getTimestamp("summaryDate")).thenReturn(new Timestamp(System.currentTimeMillis()));
        MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
        assertEquals(1.0, marketSummary.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_uxed0_6() throws Exception {
        tradeDirect = new TradeDirect();
        tradeConfig = mock(TradeConfig.class);
        when(TradeConfig.getMarketSummaryInterval()).thenReturn(1);
        when(MarketSummaryDataBean.getRandomInstance()).thenReturn(marketSummaryDataBean);
        when(datasource.getConnection()).thenReturn(connection);
        when(marketSummaryDataBean.getOpenTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getGainPercent()).thenReturn(BigDecimal.TEN);
        when(marketSummaryDataBean.getTSIA()).thenReturn(BigDecimal.ONE);
        when(marketSummaryDataBean.getVolume()).thenReturn(1.0);
        when(marketSummaryDataBean.getTopGainers()).thenReturn(new ArrayList<>());
        when(marketSummaryDataBean.getTopLosers()).thenReturn(new ArrayList<>());
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        resultset = mock(ResultSet.class);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ONE);
        when(resultset.getBigDecimal("gainPercent")).thenReturn(BigDecimal.TEN);
        when(resultset.getBigDecimal("tsia")).thenReturn(BigDecimal.ONE);
        when(resultset.getDouble("volume")).thenReturn(1.0);
        when(resultset.getTimestamp("summaryDate")).thenReturn(new Timestamp(System.currentTimeMillis()));
        MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
        assertEquals(new Timestamp(System.currentTimeMillis()), marketSummary.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderFailure_aTmt1_TOqW0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            Field inGlobalTxnField = tradeDirect.getClass().getDeclaredField("inGlobalTxn");
            inGlobalTxnField.setAccessible(true);
            inGlobalTxnField.setBoolean(tradeDirect, true);
            fail("Expected exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_MLyM0_GNAH0() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        orderData.setOrderType("buy");
        orderData.setQuantity(10.0);
        orderData.setPrice(new BigDecimal(100.0));
        orderData.setSymbol("ABC");
        orderData.setOrderID(1);
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        orderData.setAccount(accountData);
        try {
            OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
            assertEquals(orderData, result);
        } catch (Exception e) {
            fail("Exception occurred while completing order");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_LtEy1_WDPJ0() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        orderData.setOrderType("sell");
        orderData.setQuantity(10.0);
        orderData.setPrice(new BigDecimal(100.0));
        orderData.setSymbol("ABC");
        orderData.setOrderID(1);
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        orderData.setAccount(accountData);
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        orderData.setQuote(quoteData);
        try {
            OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
            assertEquals(orderData, result);
        } catch (Exception e) {
            fail("Exception occurred while completing order");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_kZdC0_pVmv0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = new OrderDataBean();
        orderData.setOrderID(1);
        orderData.setOrderType("buy");
        orderData.setSymbol("symbol");
        orderData.setQuantity(10.0);
        orderData.setPrice(new BigDecimal("10.0"));
        AccountDataBean accountData = new AccountDataBean(); // assuming this is the correct class
        orderData.setAccount(accountData);
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertEquals(orderData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_CgJC1_divG0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = new OrderDataBean();
        orderData.setOrderID(1);
        orderData.setOrderType("sell");
        orderData.setSymbol("symbol");
        orderData.setQuantity(10.0);
        orderData.setPrice(new BigDecimal("10.0"));
        AccountDataBean accountData = new AccountDataBean(); // assuming this is the correct class
        orderData.setAccount(accountData);
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertEquals(orderData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderError_HqkC2_hWKM0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = null;
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        when(conn.prepareStatement(anyString())).thenReturn(stmt);
        when(stmt.executeQuery()).thenThrow(new SQLException());
        try {
            tradeDirect.getMarketSummaryInternal();
            fail("Expected SQLException");
        } catch (Exception e) {
            assertEquals(SQLException.class, e.getClass());
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderBuy_xScQ0_niXX0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        orderData.setOrderType("buy");
        orderData.setSymbol("symbol");
        orderData.setQuantity(10.0);
        orderData.setPrice(BigDecimal.valueOf(100.0));
        orderData.setOrderID(1);
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        orderData.setAccount(accountData);
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        orderData.setQuote(quoteData);
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertEquals(orderData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_vIwH1_Tliu0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        orderData.setOrderType("sell");
        orderData.setSymbol("symbol");
        orderData.setQuantity(10.0);
        orderData.setPrice(BigDecimal.valueOf(100.0));
        orderData.setOrderID(1);
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        orderData.setAccount(accountData);
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        orderData.setQuote(quoteData);
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertEquals(orderData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderError_lHkd2_BYwA0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        orderData.setOrderType("buy");
        orderData.setSymbol("symbol");
        orderData.setQuantity(10.0);
        orderData.setPrice(BigDecimal.valueOf(100.0));
        orderData.setOrderID(1);
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        orderData.setAccount(accountData);
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        orderData.setQuote(quoteData);
        try {
            tradeDirect.completeOrder(orderData.getOrderID(), true);
            fail("Expected Exception");
        } catch (Exception e) {
            assertEquals("Expected Exception", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_XFsq0_zEtV0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:default:connection");
            AccountDataBean accountData = tradeDirect.getAccountData(1);
            assertNotNull(accountData);
        } catch (Exception e) {
            fail("getAccountData method failed");
        } finally {
            if (conn != null) {
                conn.close();
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_hhBU0() throws Exception {
        MockitoAnnotations.initMocks(this);
        tradeDirect = new TradeDirect();
        when(dataSource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        when(resultSet.next()).thenReturn(true);
        when(resultSet.getInt(any(String.class))).thenReturn(1);
        HoldingDataBean holdingDataBean = tradeDirect.getHolding(1);
        assertNotNull(holdingDataBean);
        verify(preparedStatement, times(1)).executeQuery();
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(dataSource, times(1)).getConnection();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderSuccess_UvIc0_lgxP0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/daytrader", "root", "password");
            tradeDirect.cancelOrder(1, true);
            conn.commit();
        } catch (Exception e) {
            fail("Exception occurred while cancelling order");
        } finally {
            if (conn != null) {
                conn.close();
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderFailure_BpQz1_aeHu0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:default:connection", "username", "password");
            tradeDirect.cancelOrder(1, true);
            conn.rollback();
        } catch (Exception e) {
            fail("Exception occurred while cancelling order");
        } finally {
            if (conn != null) {
                conn.close();
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryIntervalZero_hwkS0_ZsIg0() {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = null;
        try {
            marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
            if (marketSummaryDataBean == null) {
                fail("MarketSummaryDataBean is null");
            }
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_awEg0_vKKO0() {
        TradeDirect tradeDirect = new TradeDirect();
        String symbol = "ABC";
        String companyName = "Company ABC";
        BigDecimal price = new BigDecimal("10.00");
        try {
            QuoteDataBean quoteData = tradeDirect.createQuote(symbol, companyName, price);
            assertNotNull(quoteData);
        } catch (Exception e) {
            fail("Exception occurred while creating quote: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeAsynch2Phase_NZsD7_cKrY0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH_2PHASE);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeAsynch_EeUd8_zgVF0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeOne_wZzk13_jnkn0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("user1", 1, 1);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeTwo_sEjl14_VcJD0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("user1", 1, 2);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderProcessingModeThree_vPht15_vVlM0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("user1", 1, 3);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_uWZY0_WJvV0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
            assertNotNull(orderData);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataBean_EZDC7_asxI0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
            assertNotNull(orderData.getOrderID());
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderStatus_dpxx8_GXPB0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
            assertEquals("sell", orderData.getOrderStatus());
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellQuantity_DUBO9_mNKo0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
            assertEquals(0, orderData.getQuantity(), 0.0);
        } catch (Exception e) {
            fail("An exception was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderFee_vjJG10_ezGa0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
            assertNotNull(orderData.getOrderFee());
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_Qbld0_AZzd0() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean("symbol");
        HoldingDataBean holdingData = new HoldingDataBean();
        try {
            OrderDataBean orderData = tradeDirect.createOrder(accountData, quoteData, holdingData, "orderType", 1.0);
            assertNotNull(orderData);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderNullHolding_qLWE1_hDWD0() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean("symbol");
        HoldingDataBean holdingData = null;
        try {
            OrderDataBean orderData = tradeDirect.createOrder(accountData, quoteData, holdingData, "orderType", 1.0);
            assertNotNull(orderData);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_PennyStockPrice_zRXO0_rYTD0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.valueOf(0.01), 100, true);
            assertEquals(new QuoteDataBean(), quoteData);
        } catch (Exception e) {
            fail("Exception caught: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_MaximumStockPrice_nWSd1_rYvd0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.valueOf(0.5), 100, true);
            assertEquals(new QuoteDataBean(), quoteData);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_NormalPrice_CxSL2_lNhk0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.valueOf(0.1), 100, true);
            assertEquals(new QuoteDataBean(), quoteData);
        } catch (Exception e) {
            fail("Exception caught: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_yOxy0_MzkW0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            AccountDataBean accountData = tradeDirect.register("testUser", "testPassword", "testFullname", "testAddress", "testEmail", "testCreditcard", BigDecimal.valueOf(1000));
            assertNotNull(accountData);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginValidUser_lLIJ0_rldm0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            AccountDataBean accountData = tradeDirect.login("validUser", "validPassword");
            assertNotNull(accountData);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_eiiz0_MyEb0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            QuoteDataBean quoteDataBean = tradeDirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.1), 100.0);
            assertNotNull(quoteDataBean);
            assertEquals("symbol", quoteDataBean.getSymbol());
            assertEquals(BigDecimal.valueOf(1.1), quoteDataBean.getPrice());
            assertEquals(100.0, quoteDataBean.getVolume(), 0.01);
        } catch (Exception e) {
            fail("Exception caught: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_mWiL0_aZod0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
            assertNotNull(result);
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderFailed_MxXO2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.completeOrder(new Integer(1), true);
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:completeOrder -- error completing order", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingError_rrfu2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.getHolding(1);
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:getHolding -- error getting holding 1", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginInvalidUser_jdhQ1() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("invalidUser", "validPassword");
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("Cannot find account forinvalidUser", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginDatabaseError_BZyt3() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("validUser", "validPassword");
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:login -- error logging in user", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesSuccess_wACi0_izlT0_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[]{"CREATE TABLE", "DROP TABLE"};
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        assertTrue(tradeDirect.recreateDBTables(sqlBuffer, out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderError_HqkC2_hWKM0_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = null;
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        when(conn.prepareStatement(anyString())).thenReturn(stmt);
        when(stmt.executeQuery()).thenThrow(new SQLException());
        try {
            tradeDirect.getMarketSummaryInternal();
            fail("Expected SQLException");
        } catch (Exception e) {
            assertEquals(SQLException.class, e.getClass());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryIntervalZero_hwkS0_ZsIg0_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = null;
        try {
            marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
            Assertions.assertNotNull(marketSummaryDataBean);
        } catch (Exception e) {
            Assertions.fail("Exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAlreadyCompleted_TpfC1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        assertNotNull(orderData);
        assertEquals("completed", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderError_WrwP2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
        assertNotNull(orderData);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_Mwlg0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData);
        assertEquals(1, holdingData.getHoldingID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_WOta0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData("userID");
        assertNotNull(accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInternal_hkGZ0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        PreparedStatement stmt = mock(PreparedStatement.class);
        ResultSet rs = mock(ResultSet.class);
        when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
        when(stmt.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(true).thenReturn(false);
        when(rs.getBigDecimal("TSIA")).thenReturn(BigDecimal.ONE);
        when(rs.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ZERO);
        when(rs.getDouble("totalVolume")).thenReturn(1.0);
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        verify(conn, times(1)).prepareStatement(anyString(), anyInt(), anyInt());
        verify(stmt, times(4)).close();
        verify(rs, times(1)).next();
        assertEquals(BigDecimal.ONE, marketSummaryData.getTSIA());
        assertEquals(BigDecimal.ZERO, marketSummaryData.getOpenTSIA());
        assertEquals(1.0, marketSummaryData.getVolume(), 0.0);
    }
}