/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarketSummaryInterval_mlsk0() {
        TradeConfig tradeConfig = new TradeConfig();
        int interval = tradeConfig.getMarketSummaryInterval();
        assertEquals(10, interval); // Assuming the expected interval is20
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_IDfb0() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] runTimeModeNames = tradeConfig.getRunTimeModeNames();
        String[] expected = {"mode1", "mode2", "mode3"};
        assert expected.length == runTimeModeNames.length;
        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i], runTimeModeNames[i]);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_USERS_ufrO0() {
        int expected = 10; // Replace with the expected value
        int actual = TradeConfig.getMAX_USERS();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_QUOTES_LNGB0() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 100; // Replace with the expected value
        int actual = tradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongRun_QeKg0() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean longRun = tradeConfig.getLongRun();
        assertFalse(longRun);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisplayOrderAlerts_JlUg0() {
        boolean displayOrderAlerts = TradeConfig.getDisplayOrderAlerts();
        assertFalse(displayOrderAlerts);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_XDOV0() {
        int expected = 0; // Replace with the expected value
        int actual = TradeConfig.getListQuotePriceChangeFrequency();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJDBCDriverNeedsGlobalTransation_SDbt0() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean result = tradeConfig.getJDBCDriverNeedsGlobalTransation();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_vqXr1_fid1() {
        float f = TradeConfig.rndFloat(0);
        assertTrue(f >= 0 && f < 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarketSummaryInterval_mlsk0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int interval = tradeConfig.getMarketSummaryInterval();
        assertEquals(10, interval); // Assuming the expected interval is 10
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_IDfb0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] runTimeModeNames = tradeConfig.getRunTimeModeNames();
        String[] expected = {"mode1", "mode2", "mode3"};
        assertEquals(expected, runTimeModeNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_auyU0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 0;
        int actual = tradeConfig.getPrimIterations();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_BUbB0() {
        String address = TradeConfig.rndAddress();
        assertNotNull(address);
        assertTrue(address.matches("^\\d{4} Oak St.$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioMixes_TSsJ0() {
        TradeConfig tradeConfig = new TradeConfig();
        int[][] scenarioMixes = tradeConfig.getScenarioMixes();
        assertNotNull(scenarioMixes);
        assertTrue(scenarioMixes.length > 0);
        for (int[] mix : scenarioMixes) {
            assertTrue(mix.length == 2);
            assertTrue(mix[0] >= 0 && mix[0] <= 100);
            assertTrue(mix[1] >= 0 && mix[1] <= 100);
            assertTrue(mix[0] + mix[1] == 100);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndNewUserID_MoHO0() {
        String result = TradeConfig.rndNewUserID();
        assertNotNull(result);
        assertTrue(result.startsWith("NewUser"));
        assertTrue(result.contains("."));
        assertTrue(result.contains(String.valueOf(System.currentTimeMillis())));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_HOLDINGS_MVel0() {
        int expected = 100;
        int actual = TradeConfig.getMAX_HOLDINGS();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_SELL_EAMK1() {
        BigDecimal expected = new BigDecimal("15.00");
        BigDecimal actual = TradeConfig.getOrderFee("SELL");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_invalidType_wpUw2() {
        BigDecimal expected = new BigDecimal("5.00");
        BigDecimal actual = TradeConfig.getOrderFee("invalidType");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction1_vgCf0() {
        boolean newUser = false;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('s', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction2_nXXG1() {
        boolean newUser = true;
        char result = TradeConfig.getScenarioAction(newUser);
        assertTrue(result == 'b' || result == 's');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction3_YYdx2() {
        boolean newUser = false;
        char result = TradeConfig.getScenarioAction(newUser);
        assertTrue(result == 'b' || result == 's');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction4_sKdW3() {
        boolean newUser = true;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('s', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetWebInterfaceNames_AfPo0() {
        String[] expected = {"webInterface1", "webInterface2"};
        String[] actual = TradeConfig.getWebInterfaceNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeNames_CzNu0() {
        String[] expected = {"mode1", "mode2", "mode3"};
        String[] actual = TradeConfig.getOrderProcessingModeNames();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_kkmD1() {
        int i = 10;
        int result;
        result = TradeConfig.rndInt(0);
        assertEquals(0, result);
        result = TradeConfig.rndInt(1);
        assertEquals(0, result);
        result = TradeConfig.rndInt(2);
        assertTrue(result == 0 || result == 1);
        result = TradeConfig.rndInt(3);
        assertTrue(result == 0 || result == 1 || result == 2);
        result = TradeConfig.rndInt(10);
        assertTrue(result >= 0 && result < 10);
        result = TradeConfig.rndInt(Integer.MAX_VALUE);
        assertTrue(result >= 0 && result < Integer.MAX_VALUE);
        result = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertTrue(result >= 0 && result < Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRandomPriceChangeFactor_test3_QGJu2() {
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(BigDecimal.ONE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioCount_iTgi0() {
        TradeConfig tradeConfig = new TradeConfig();
        int result = tradeConfig.getScenarioCount();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndCreditCard_TRuT0() {
        String rndCreditCard = TradeConfig.rndCreditCard();
        assertTrue(rndCreditCard.matches("\\d{4}-\\d{4}-\\d{4}-\\d{4}"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBigDecimal_vFjA0() {
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_BUbB0_2_fid3() {
        String address = TradeConfig.rndAddress();
        assertTrue(address.matches("^\\d{4} Oak St.$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndNewUserID_MoHO0_2() {
        String result = TradeConfig.rndNewUserID();
        assertTrue(result.startsWith("NewUser"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndNewUserID_MoHO0_3() {
        String result = TradeConfig.rndNewUserID();
        assertTrue(result.contains("."));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_kkmD1_1() {
        int i = 10;
        int result;
        result = TradeConfig.rndInt(0);
        result = TradeConfig.rndInt(1);
        result = TradeConfig.rndInt(2);
        result = TradeConfig.rndInt(3);
        result = TradeConfig.rndInt(10);
        result = TradeConfig.rndInt(Integer.MAX_VALUE);
        result = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_kkmD1_3() {
        int i = 10;
        int result;
        result = TradeConfig.rndInt(0);
        result = TradeConfig.rndInt(1);
        result = TradeConfig.rndInt(2);
        result = TradeConfig.rndInt(3);
        result = TradeConfig.rndInt(10);
        result = TradeConfig.rndInt(Integer.MAX_VALUE);
        result = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertTrue(result == 0 || result == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_kkmD1_4() {
        int i = 10;
        int result;
        result = TradeConfig.rndInt(0);
        result = TradeConfig.rndInt(1);
        result = TradeConfig.rndInt(2);
        result = TradeConfig.rndInt(3);
        result = TradeConfig.rndInt(10);
        result = TradeConfig.rndInt(Integer.MAX_VALUE);
        result = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertTrue(result == 0 || result == 1 || result == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_kkmD1_5() {
        int i = 10;
        int result;
        result = TradeConfig.rndInt(0);
        result = TradeConfig.rndInt(1);
        result = TradeConfig.rndInt(2);
        result = TradeConfig.rndInt(3);
        result = TradeConfig.rndInt(10);
        result = TradeConfig.rndInt(Integer.MAX_VALUE);
        result = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertTrue(result >= 0 && result < 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_kkmD1_6() {
        int i = 10;
        int result;
        result = TradeConfig.rndInt(0);
        result = TradeConfig.rndInt(1);
        result = TradeConfig.rndInt(2);
        result = TradeConfig.rndInt(3);
        result = TradeConfig.rndInt(10);
        result = TradeConfig.rndInt(Integer.MAX_VALUE);
        result = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertTrue(result >= 0 && result < Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_kkmD1_7() {
        int i = 10;
        int result;
        result = TradeConfig.rndInt(0);
        result = TradeConfig.rndInt(1);
        result = TradeConfig.rndInt(2);
        result = TradeConfig.rndInt(3);
        result = TradeConfig.rndInt(10);
        result = TradeConfig.rndInt(Integer.MAX_VALUE);
        result = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertTrue(result >= 0 && result < Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBigDecimal_vFjA0_1() {
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmail_XOxE0_DVGC0() {
        String userID = "user123";
        String expected = userID.replace(":", "") + "@" + TradeConfig.rndInt(100) + ".com";
        String actual = TradeConfig.rndEmail(userID);
        assertEquals(expected, actual);
    }
}