/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;
import java.math.BigDecimal;
import java.util.ArrayList;
import javax.json.JsonObject;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryDataBean_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNullTopGainersAndLosers_grtg0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        String result = marketSummaryDataBean.toString();
        assertEquals("\n\tMarket Summary at: null\n\t\t        TSIA:null\n\t\t    openTSIA:null\n\t\t        gain:null\n\t\t      volume:null", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNonNullTopGainersAndLosers_xKQH1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(new ArrayList<>());
        marketSummaryDataBean.setTopLosers(new ArrayList<>());
        String result = marketSummaryDataBean.toString();
        assertEquals("\n\tMarket Summary at: null\n\t\t        TSIA:null\n\t\t    openTSIA:null\n\t\t        gain:null\n\t\t      volume:null\n\t\t   Current Top Gainers:\n\t\t   Current Top Losers:", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNonNullTopGainers_TRfi2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        String result = marketSummaryDataBean.toString();
        assertEquals("\n\tMarket Summary at: null\n\t\t        TSIA:null\n\t\t    openTSIA:null\n\t\t        gain:null\n\t\t      volume:null\n\t\t   Current Top Gainers:\n\t\t\tQuoteDataBean", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNonNullTopLosers_FtZv3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = marketSummaryDataBean.toString();
        assertEquals("\n\tMarket Summary at: null\n\t\t        TSIA:null\n\t\t    openTSIA:null\n\t\t        gain:null\n\t\t      volume:null\n\t\t   Current Top Gainers:\n\t\t   Current Top Losers:\n\t\t\tQuoteDataBean", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNonNullTopGainersAndLosersWithMultipleElements_UmKh4() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(Arrays.asList(new QuoteDataBean(), new QuoteDataBean()));
        marketSummaryDataBean.setTopLosers(Arrays.asList(new QuoteDataBean(), new QuoteDataBean()));
        String result = marketSummaryDataBean.toString();
        assertEquals("\n\tMarket Summary at: null\n\t\t        TSIA:null\n\t\t    openTSIA:null\n\t\t        gain:null\n\t\t      volume:null\n\t\t   Current Top Gainers:\n\t\t\tQuoteDataBean\n\t\t\tQuoteDataBean\n\t\t   Current Top Losers:\n\t\t\tQuoteDataBean\n\t\t\tQuoteDataBean", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNonNullTopGainersAndLosersWithMultipleElementsAndNullTSIA_rhgS5() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(null);
        marketSummaryDataBean.setTopGainers(Arrays.asList(new QuoteDataBean(), new QuoteDataBean()));
        marketSummaryDataBean.setTopLosers(Arrays.asList(new QuoteDataBean(), new QuoteDataBean()));
        String result = marketSummaryDataBean.toString();
        assertEquals("\n\tMarket Summary at: null\n\t\t        TSIA:null\n\t\t    openTSIA:null\n\t\t        gain:null\n\t\t      volume:null\n\t\t   Current Top Gainers:\n\t\t\tQuoteDataBean\n\t\t\tQuoteDataBean\n\t\t   Current Top Losers:\n\t\t\tQuoteDataBean\n\t\t\tQuoteDataBean", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIntI_ZDrQ1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals(1, jsonObject.getJsonArray("gainer1_stock").size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJsonObjectBuilder_pNEG0_ohwv0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals(jsonObject instanceof JsonObject, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForLoopTopGainers_qsaA2_pGGe0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(new ArrayList<>());
    QuoteDataBean quote = new QuoteDataBean();
    quote.setSymbol("stock1");
    marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>() {{
        add(quote);
    }});
    marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>() {{
        add(quote);
    }});
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals("stock1", jsonObject.get("gainer1_stock").toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForLoopTopLosers_pJMW6_QTqd0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopLosers(new ArrayList<>());
    QuoteDataBean quote = new QuoteDataBean();
    quote.setSymbol("stock2");
    marketSummaryDataBean.setTopLosers(new ArrayList<>());
    marketSummaryDataBean.setTopLosers(new ArrayList<>());
    marketSummaryDataBean.getTopLosers().add(quote);
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals("stock2", jsonObject.get("topLosers[0].symbol").toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddGainerChange_kCYS5_YdbT0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(new ArrayList<>());
    QuoteDataBean quote = new QuoteDataBean();
    quote.setChange(5.0);
    marketSummaryDataBean.setTopGainers(new ArrayList<>(Collections.singletonList(quote)));
    marketSummaryDataBean.setTopGainers(new ArrayList<>());
    marketSummaryDataBean.getTopGainers().add(quote);
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals("5.0", jsonObject.get("gainer1_change").toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddGainerPrice_DpqR4_nwTn0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(new ArrayList<>());
    QuoteDataBean quote = new QuoteDataBean();
    quote.setPrice(BigDecimal.valueOf(10.0));
    marketSummaryDataBean.setTopGainers(new ArrayList<>(Collections.singletonList(quote)));
    marketSummaryDataBean.setTopGainers(new ArrayList<>(Collections.singletonList(quote)));
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals("10.0", jsonObject.get("gainer1_price").toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddTSIA_Eglc10_hJrm0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.valueOf(100.0));
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals("100.0", jsonObject.getString("tsia"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddVolume_VBKR11_Mkvc1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setVolume(1000.0);
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals("1000.0", jsonObject.get("volume").toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLoserPrice_GYnN8_PRdz0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopLosers(new ArrayList<>());
    QuoteDataBean quote = new QuoteDataBean();
    quote.setPrice(new BigDecimal("20.0")); 
    marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.getTopGainers().add(quote);
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals("20.0", jsonObject.getString("gainer1_price"));
}
}