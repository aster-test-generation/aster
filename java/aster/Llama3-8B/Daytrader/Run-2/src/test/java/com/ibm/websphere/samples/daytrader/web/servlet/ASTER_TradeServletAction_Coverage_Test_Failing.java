/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import java.util.Collection;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.Collection;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeServletAction_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_SetAttribute_SDiw6() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String symbols = "AAPL,GOOG,MSFT";
        tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
        verify(req).setAttribute("quoteDataBeans", any(Collection.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_SessionInvalidated_AVaa3() throws javax.servlet.ServletException, java.io.IOException {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        HttpSession session = mock(HttpSession.class);
        when(req.getSession()).thenReturn(session);
        action.doLogout(ctx, req, resp, userID);
        verify(session).invalidate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoAccount_NormalFlow_Kicy0_gaEi0() throws ServletException, IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    action.doLogin(ctx, req, resp, userID, results);
    verify(ctx).getRequestDispatcher(anyString());
    verify(req).setAttribute(anyString(), anyString());
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter().flush();
    verify(resp).getWriter().close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoAccount_LongRun_NORq3_NcSI0() throws ServletException, IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    when(TradeConfig.getLongRun()).thenReturn(true);
    action.doLogin(ctx, req, resp, userID, results);
    verify(ctx).getRequestDispatcher(any(String.class));
    verify(req).setAttribute("results", results);
    verify(req).setAttribute("uidBean", userID);
    verify(req).setAttribute("sessionCreationDate", any(Date.class));
    verify(resp).sendRedirect(any(String.class));
    verify(ctx).getRequestDispatcher(any(String.class));
    verify(req).setAttribute("results", results);
    verify(req).setAttribute("uidBean", userID);
    verify(req).setAttribute("sessionCreationDate", any(Date.class));
    verify(resp).sendRedirect(any(String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoSell_OrderDataBeanCreation_ZnNR1_goWh0() throws javax.servlet.ServletException, java.io.IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String passwd = "testPasswd";
    action.doLogin(ctx, req, resp, userID, passwd);
    verify(req, times(1)).setAttribute("uidBean", userID);
    verify(req, times(1)).setAttribute("sessionCreationDate", any());
    verify(req, times(1)).setAttribute("results", anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoSell_NullHoldingID_OlrD7_lZOb0() throws javax.servlet.ServletException, java.io.IOException {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    Integer holdingID = null;
    action.doLogin(ctx, req, resp, userID, "testPasswd");
    verify(action, times(1)).doHome(ctx, req, resp, userID, "Ready to Trade");
}
}