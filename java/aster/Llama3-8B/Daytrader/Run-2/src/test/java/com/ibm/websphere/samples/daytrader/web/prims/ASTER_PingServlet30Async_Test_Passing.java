/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet30Async_Test_Passing {
    @Mock
    private ServletConfig servletConfig;
    private PingServlet30Async pingservlet30async;
    private static String initTime;
    private static int hitCount;
    @Mock
    private HttpServletResponse httpservletresponse;
    @Mock
    private HttpServletRequest httpservletrequest;
    @Mock
    private ServletInputStream servletinputstream;
    @Mock
    private ServletOutputStream servletoutputstream;
    HttpServlet httpservlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_scfz0() {
        PingServlet30Async pingServlet30Async = new PingServlet30Async();
        String result = pingServlet30Async.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletinputstream = mock(ServletInputStream.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservlet = mock(HttpServlet.class);
        pingservlet30async = new PingServlet30Async();
        when(httpservletrequest.getMethod()).thenReturn("GET");
        pingservlet30async.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
        verify(httpservletresponse).setContentType("text/plain");
        verify(servletoutputstream).write("Hello, World!".getBytes());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_ytOY0_1() throws ServletException {
        pingservlet30async = new PingServlet30Async();
        pingservlet30async.init(servletConfig);
        verify(servletConfig, times(1)).getServletContext();
        assertEquals(0, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_ytOY0_2() throws ServletException {
        pingservlet30async = new PingServlet30Async();
        pingservlet30async.init(servletConfig);
        verify(servletConfig, times(1)).getServletContext();
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_OzbS0_1() throws Exception {
        initTime = "2022-01-01 00:00:00";
        hitCount = 0;
        pingservlet30async = new PingServlet30Async();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        when(httpservletrequest.getParameter("initTime")).thenReturn(initTime);
        when(httpservletrequest.getInputStream()).thenReturn(servletinputstream);
        String data = "Hello, World!";
        when(servletinputstream.read(any(byte[].class))).thenReturn(data.length()).thenReturn(-1);
        pingservlet30async.doPost(httpservletrequest, httpservletresponse);
        verify(servletoutputstream, times(1)).println(any(String.class));
        verify(servletoutputstream, times(1)).flush();
        verify(servletoutputstream, times(1)).close();
        assertEquals(initTime, httpservletrequest.getParameter("initTime"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_OzbS0_2() throws Exception {
        initTime = "2022-01-01 00:00:00";
        hitCount = 0;
        pingservlet30async = new PingServlet30Async();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        when(httpservletrequest.getParameter("initTime")).thenReturn(initTime);
        when(httpservletrequest.getInputStream()).thenReturn(servletinputstream);
        String data = "Hello, World!";
        when(servletinputstream.read(any(byte[].class))).thenReturn(data.length()).thenReturn(-1);
        pingservlet30async.doPost(httpservletrequest, httpservletresponse);
        verify(servletoutputstream, times(1)).println(any(String.class));
        verify(servletoutputstream, times(1)).flush();
        verify(servletoutputstream, times(1)).close();
        assertEquals(1, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_asVX1_suqi0() throws ServletException, IOException {
        PingServlet30Async servlet = new PingServlet30Async();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        String expected = "<html><head><title>Ping Servlet 3.0 Async</title></head><body><hr/><br/><font size=\"+2\" color=\"#000066\">Ping Servlet 3.0 Async</font><br/><font size=\"+1\" color=\"#000066\">Init time : </font><br/><br/><b>Hit Count: 1</b><br/>Data Received: </body></html>";
        assertEquals(expected, res.getWriter().toString());
    }
}