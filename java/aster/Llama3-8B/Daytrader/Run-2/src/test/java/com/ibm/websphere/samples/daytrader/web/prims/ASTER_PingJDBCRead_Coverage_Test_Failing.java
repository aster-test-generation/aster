/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingJDBCRead_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_CZyO0() {
        PingJDBCRead pingJDBCRead = new PingJDBCRead();
        String expected = "Basic JDBC Read using a prepared statment, makes use of TradeJDBC class";
        String actual = pingJDBCRead.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_InitTime_PAjq0() throws ServletException, IOException {
        PingJDBCRead pingJDBCRead = new PingJDBCRead();
        HttpServletResponse res = mock(HttpServletResponse.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        pingJDBCRead.doGet(req, res);
        verify(res, times(1)).setContentType("text/html");
        verify(res, times(1)).getWriter();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_Iterations_zWIM8_MfjS0() throws ServletException, IOException {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    HttpServletResponse res = mock(HttpServletResponse.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    pingJDBCRead.doGet(req, res);
    verify(pingJDBCRead, times(1)).doGet(eq(req), eq(res));
}
}