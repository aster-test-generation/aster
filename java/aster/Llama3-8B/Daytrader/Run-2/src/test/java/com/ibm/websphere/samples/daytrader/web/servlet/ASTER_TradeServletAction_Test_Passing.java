/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Passing {
    private TradeServices tAction;
    @Mock
    private TradeServletAction tradeservletaction;
    @Mock
    private HttpServletRequest httpservletrequest;
    @Mock
    private ServletContext servletcontext;
    @Mock
    private HttpSession httpsession;
    TradeServletAction tradeServletAction;
    HttpServletRequest httpServletRequest;
    @Mock
    private TradeServices mockTradeServices;
    @Mock
    private HttpServletRequest mockHttpServletRequest;
    @Mock
    private HttpServletResponse mockHttpServletResponse;
    @Mock
    private AccountProfileDataBean mockAccountProfileDataBean;
    ServletContext servletContext;
    HttpServletResponse httpServletResponse;
    private HttpServletRequest req;
    private HttpServletResponse resp;
    private ServletContext ctx;
    private String userID;
    private String results;
    private Collection<QuoteDataBean> quoteDataBeans;
    private AccountDataBean tAccountData;
    private AccountProfileDataBean tAccountProfileData;
    private Collection<OrderDataBean> tOrders;
    private HttpServletRequest tReq;
    private HttpServletResponse tResp;
    private String tUserID;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogoutWithException_ghNB2() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "userIDWithException";
        when(req.getSession()).thenThrow(new IllegalStateException());
        try {
            tradeServletAction.doLogout(ctx, req, resp, userID);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogoutWithNullUserID_gtBb3() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = null;
        try {
            tradeServletAction.doLogout(ctx, req, resp, userID);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }
}