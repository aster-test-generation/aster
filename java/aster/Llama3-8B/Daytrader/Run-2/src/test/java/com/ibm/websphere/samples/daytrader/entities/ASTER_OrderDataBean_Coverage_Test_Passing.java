/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import java.math.BigDecimal;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OrderDataBean_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_QuoteNotNull_qJlp0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("ABC");
        orderDataBean.setQuote(quoteDataBean);
        assertEquals("ABC", orderDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_QuoteNull_UOPv1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertNull(orderDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotInstanceOfOrderDataBean_LYeR0() {
        Object obj = new Object();
        assertFalse(new OrderDataBean().equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullObject_qXox1() {
        Object obj = null;
        assertFalse(new OrderDataBean().equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenOrderStatusNull_imak3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertNull(orderDataBean.getOrderStatus());
        assertFalse(orderDataBean.isOpen());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSellTrue_PokK0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("sell");
    boolean result = orderDataBean.isSell();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSellFalse_ZWJG1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("buy");
    boolean result = orderDataBean.isSell();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSellNullOrderType_qIuj2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    boolean result = orderDataBean.isSell();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSellEmptyOrderType_OFwx3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("");
    boolean result = orderDataBean.isSell();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_Completed_Ienb0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("completed");
        assertTrue(orderDataBean.isCompleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_AlertCompleted_KNEQ1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("alertcompleted");
        assertTrue(orderDataBean.isCompleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_Cancelled_EpxM2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("cancelled");
        assertTrue(orderDataBean.isCompleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_InProgress_Xzxd3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("in progress");
        assertFalse(orderDataBean.isCompleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_NullOrderStatus_ETaK4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertNull(orderDataBean.getOrderStatus());
        assertFalse(orderDataBean.isCompleted());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuy_ReturnsTrue_WhenOrderTypeIsBuy_Frjr0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("buy");
        assertTrue(orderDataBean.isBuy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuy_ReturnsFalse_WhenOrderTypeIsNotBuy_seBO1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("sell");
        assertFalse(orderDataBean.isBuy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuy_ReturnsFalse_WhenOrderTypeIsNull_pEMd2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertNull(orderDataBean.getOrderType());
        assertFalse(orderDataBean.isBuy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuy_ReturnsFalse_WhenOrderTypeIsEmpty_hYpP3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("");
        assertFalse(orderDataBean.isBuy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled_Cancelled_QEBN0() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("cancelled");
        assertTrue(order.isCancelled());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled_NotCancelled_nnAi1() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("open");
        assertFalse(order.isCancelled());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled_NullOrderStatus_Ttvz2() {
        OrderDataBean order = new OrderDataBean();
        assertNull(order.getOrderStatus());
        assertFalse(order.isCancelled());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled_EmptyOrderStatus_cNsT3() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("");
        assertFalse(order.isCancelled());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenOrderStatusNull_imak3_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertNull(orderDataBean.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenOrderStatusNull_imak3_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertFalse(orderDataBean.isOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted_NullOrderStatus_ETaK4_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertFalse(orderDataBean.isCompleted());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuy_ReturnsFalse_WhenOrderTypeIsNull_pEMd2_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertNull(orderDataBean.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuy_ReturnsFalse_WhenOrderTypeIsNull_pEMd2_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertFalse(orderDataBean.isBuy());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled_NullOrderStatus_Ttvz2_1() {
        OrderDataBean order = new OrderDataBean();
        assertNull(order.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled_NullOrderStatus_Ttvz2_2() {
        OrderDataBean order = new OrderDataBean();
        assertFalse(order.isCancelled());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_OrderIDNotNull_CgbT0_pJwX0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new java.util.Date(), new java.util.Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    int result = orderDataBean.hashCode();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_OrderIDNull_nRwf1_qaDW0() {
    OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "OPEN", new java.util.Date(), new java.util.Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    int result = orderDataBean.hashCode();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_OrderIDZero_Vohd2_kDOK0() {
    OrderDataBean orderDataBean = new OrderDataBean(0, "BUY", "OPEN", new java.util.Date(), new java.util.Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    int result = orderDataBean.hashCode();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifferentOrderID_BShD2_VPWr0() {
    OrderDataBean obj1 = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    OrderDataBean obj2 = new OrderDataBean(2, "Sell", "Open", new Date(), new Date(), 2.0, BigDecimal.valueOf(20.0), BigDecimal.valueOf(2.0), "GOOG");
    assertFalse(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameOrderID_BgeP3_JxOa0() {
    OrderDataBean obj1 = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    OrderDataBean obj2 = new OrderDataBean(1, "Sell", "Open", new Date(), new Date(), 2.0, BigDecimal.valueOf(20.0), BigDecimal.valueOf(2.0), "AAPL");
    assertTrue(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullOrderID_vZIn4_CGHb0() {
    OrderDataBean obj1 = new OrderDataBean(null, "Buy", "Open", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    OrderDataBean obj2 = new OrderDataBean(1, "Sell", "Open", new Date(), new Date(), 2.0, BigDecimal.valueOf(20.0), BigDecimal.valueOf(2.0), "AAPL");
    assertFalse(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualOrderDataBeans_WPwD5_BJeB0() {
    OrderDataBean obj1 = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    OrderDataBean obj2 = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 1.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    assertTrue(obj1.equals(obj2));
}
}