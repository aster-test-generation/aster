/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.jaxrs;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TestJSONObject_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0001_YkBs0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0001();
        assertEquals("Expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0005_XpeL0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String expected = "expected value";
        String actual = testJSONObject.getProp0005();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0004_sPpn0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0004();
        assertEquals("Expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0003_UzWh0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0003();
        assertEquals("Your expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0002_Omif0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0002();
        assertEquals("Your expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0013_QiUl0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0013();
        assertEquals("Your expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0014_RQpJ0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0014();
        assertEquals("Your expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0015_ZxwM0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0015();
        assertEquals("Expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0016_qkYR0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0016();
        assertEquals("Your expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0010_XpDA0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0010();
        assertEquals("Method body", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0012_qIYO0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0012();
        assertEquals("Expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0009_XEGe0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0009();
        assertEquals("Expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0008_aagm0() {
        TestJSONObject jsonObject = new TestJSONObject();
        String expected = "expected value";
        String actual = jsonObject.getProp0008();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0007_ZKwD0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0007();
        assertEquals("Your expected value", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0006_sXxE0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0006();
        assertEquals("Your expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0005_XpeL0_fid1() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String expected = "expected value";
        String actual = testJSONObject.getProp0005();
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0008_aagm0_fid1() {
        TestJSONObject jsonObject = new TestJSONObject();
        String expected = "expected value";
        String actual = jsonObject.getProp0008();
        assertNull(expected);
    }
}