/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Log_Test_Passing {
    private static final Logger log = Logger.getLogger(Log.class.getName());

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStat_TdAm0() {
        Log log = new Log();
        log.stat("Test message");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintCollection_rMyZ0() {
        Collection<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Log.printCollection(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintCollectionEmpty_QgVD1() {
        Collection<String> collection = new ArrayList<>();
        Log.printCollection(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoTraceNotFine_BstU1() {
        Logger log = Logger.getLogger(Log.class.getName());
        log.setLevel(Level.OFF);
        boolean result = Log.doTrace();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_FAkN0() {
        Throwable e = new Throwable();
        Log.error("Error message 1", "Error message 2", e);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_dXCn0() {
        Throwable e = new Throwable();
        Log.error("msg1", "msg2", "msg3", e);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_HJOd1() {
        Log log = new Log();
        log.error("msg1", "msg2", "msg3", new Exception("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintCollection_afni0() {
        Log log = new Log();
        Collection<String> collection = new ArrayList<>();
        collection.add("parm1");
        collection.add("parm2");
        collection.add("parm3");
        log.printCollection("message", collection);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_aeFX0_ZRlN0() {
        String message = "Test Message";
        Log.printCollection(message, Arrays.asList("Parm1", "Parm2", "Parm3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTraceExit_UHwM0_CGZA1() {
        Logger log = Logger.getLogger(Log.class.getName());
        log.setLevel(Level.FINE);
        Log.traceExit("Test message");
        assertEquals(Level.FINE, log.getLevel());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_DJqj0_nMwx0() {
        Log log = new Log();
        String message = "Test message";
        Object parm1 = "Parm1";
        Object parm2 = "Parm2";
        Object parm3 = "Parm3";
        Object parm4 = "Parm4";
        Object parm5 = "Parm5";
        Object parm6 = "Parm6";
        Object parm7 = "Parm7";
        log.printCollection(message, Arrays.asList(parm1, parm2, parm3, parm4, parm5, parm6, parm7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_zHOE0_ibxb0() {
        Log log = new Log();
        String message = "Test message";
        Object parm1 = "Parm1";
        Object parm2 = "Parm2";
        Object parm3 = "Parm3";
        log.printCollection(message, Arrays.asList(parm1, parm2, parm3));
    }
}