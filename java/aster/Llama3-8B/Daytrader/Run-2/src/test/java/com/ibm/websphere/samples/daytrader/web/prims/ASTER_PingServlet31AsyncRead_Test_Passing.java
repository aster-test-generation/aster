/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31AsyncRead_Test_Passing {
    private static String initTime;
    private static int hitCount;
    @Mock
    private ServletConfig servletConfig;
    @InjectMocks
    private PingServlet31AsyncRead pingservlet31asyncread;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    ServletInputStream servletinputstream;
    HttpServlet httpservlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_1() throws ServletException {
        initTime = null;
        hitCount = 0;
        pingservlet31asyncread = new PingServlet31AsyncRead();
        // Act
        pingservlet31asyncread.init(servletConfig);
        // Assert
        assertEquals(new java.util.Date().toString(), initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_2() throws ServletException {
        initTime = null;
        hitCount = 0;
        pingservlet31asyncread = new PingServlet31AsyncRead();
        // Act
        pingservlet31asyncread.init(servletConfig);
        // Assert
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_OGWq0() {
        PingServlet31AsyncRead pingServlet31AsyncRead = new PingServlet31AsyncRead();
        String result = pingServlet31AsyncRead.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletinputstream = mock(ServletInputStream.class);
        httpservlet = mock(HttpServlet.class);
        pingservlet31asyncread = new PingServlet31AsyncRead();
        when(httpservletrequest.getMethod()).thenReturn("GET");
        pingservlet31asyncread.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).setStatus(HttpServletResponse.SC_OK);
        verify(httpservletresponse, times(1)).setContentType("text/plain");
        verify(httpservletresponse, times(1)).flushBuffer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_wowZ0() throws ServletException, IOException {
        PingServlet31AsyncRead pingServlet31AsyncRead = new PingServlet31AsyncRead();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        pingServlet31AsyncRead.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_JHxz0() throws Exception {
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        ServletInputStream servletinputstream = mock(ServletInputStream.class);
        HttpServlet httpservlet = mock(HttpServlet.class);
        PingServlet31AsyncRead pingservlet31asyncread = new PingServlet31AsyncRead();
        when(httpservletrequest.startAsync()).thenReturn(mock(AsyncContext.class));
        when(httpservletrequest.getContentType()).thenReturn("text/html");
        when(servletinputstream.available()).thenReturn(1);
        when(servletinputstream.isFinished()).thenReturn(false);
        pingservlet31asyncread.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setContentType("text/html");
        verify(httpservletrequest).startAsync();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_cAvR0_laaC0() throws ServletException, IOException {
        PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
        MockHttpServletRequest req = new MockHttpServletRequest();
        MockHttpServletResponse res = new MockHttpServletResponse();
        servlet.doPost(req, res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        initTime = null;
        hitCount = 0;
        pingservlet31asyncread = new PingServlet31AsyncRead();
        // Act
        pingservlet31asyncread.init(servletConfig);
        // Assert
        assertEquals(new java.util.Date().toString(), initTime);
        assertEquals(0, hitCount);
    }
}