/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Failing {
    private TradeConfigJSF tradeConfigJSF;
    private String result = "";
    private ExternalContext context;
    TradeConfigJSF tradeconfigjsf;
    HttpSession httpsession;
    ExternalContext externalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuntimeModeList_dSaQ0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
        String[] expectedRuntimeModeList = {"mode1", "mode2"}; // Replace with actual expected values
        assertEquals(expectedRuntimeModeList, runtimeModeList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_KuGF0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expectedPrimIterations = 0; // Replace with the expected value
        int actualPrimIterations = tradeConfigJSF.getPrimIterations();
        assertEquals(expectedPrimIterations, actualPrimIterations);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInterval_aOSH0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int result = tradeConfigJSF.getMarketSummaryInterval();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderProcessingModeListTest_ATmt0_1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertEquals(1, orderProcessingModeList.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderProcessingModeListTest_ATmt0_2() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertEquals("New Order Processing", orderProcessingModeList[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxQuotes_TJuG0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int maxQuotes = tradeConfigJSF.getMaxQuotes();
        Assertions.assertEquals(0, maxQuotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_uGqQ0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        TradeConfig tradeConfig = mock(TradeConfig.class);
        when(tradeConfig.getRunTimeMode()).thenReturn(0);
        when(tradeConfig.getOrderProcessingMode()).thenReturn(0);
        when(tradeConfig.getWebInterface()).thenReturn(0);
        when(tradeConfig.getMAX_USERS()).thenReturn(0);
        when(tradeConfig.getMAX_QUOTES()).thenReturn(0);
        when(tradeConfig.getMarketSummaryInterval()).thenReturn(0);
        when(tradeConfig.getPrimIterations()).thenReturn(0);
        when(tradeConfig.getPublishQuotePriceChange()).thenReturn(false);
        when(tradeConfig.getListQuotePriceChangeFrequency()).thenReturn(0);
        when(tradeConfig.getLongRun()).thenReturn(false);
        when(tradeConfig.getDisplayOrderAlerts()).thenReturn(false);
        tradeConfigJSF.updateConfig();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_yZUH0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int listQuotePriceChangeFrequency = tradeConfigJSF.getListQuotePriceChangeFrequency();
        assertEquals(0, listQuotePriceChangeFrequency);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderProcessingModeListTest_ATmt0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertEquals(1, orderProcessingModeList.length);
        assertEquals("New Order Processing", orderProcessingModeList[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterface_FavL1() {
        String expectedWebInterface = "webInterface";
        String actualWebInterface = tradeConfigJSF.getWebInterface();
        assertEquals(expectedWebInterface, actualWebInterface);
    }
}