/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletLargeContentLength_Test_Passing {
    @Mock
    private ServletConfig servletConfig;
    @InjectMocks
    private PingServletLargeContentLength pingservletlargecontentlength;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        MockitoAnnotations.initMocks(this);
        // Given
        // No setup needed
        // When
        pingservletlargecontentlength.init(servletConfig);
        // Then
        Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
        Mockito.verify(servletConfig, Mockito.times(1)).getInitParameter("param");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_XaKm0() {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingservletlargecontentlength = new PingServletLargeContentLength();
        // Given
        when(httpservletrequest.getMethod()).thenReturn("GET");
        // When
        pingservletlargecontentlength.doGet(httpservletrequest, httpservletresponse);
        // Then
        verify(httpservletrequest).getMethod();
        verify(pingservletlargecontentlength).doPost(httpservletrequest, httpservletresponse);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_jkEE0() throws ServletException, IOException {
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        PingServletLargeContentLength pingservletlargecontentlength = new PingServletLargeContentLength();
        when(httpservletrequest.getContentLengthLong()).thenReturn(1024L);
        pingservletlargecontentlength.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getContentLengthLong();
        verify(httpservletresponse, never()).sendError(anyInt(), anyString());
        verify(httpservletresponse, never()).sendRedirect(anyString());
    }
}