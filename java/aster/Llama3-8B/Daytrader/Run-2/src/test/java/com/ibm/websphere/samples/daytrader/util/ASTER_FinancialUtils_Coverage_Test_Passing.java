/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import java.math.BigDecimal;
import java.util.Collection;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FinancialUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeHoldingsTotalNullInput_Vhee0() {
        Collection<?> holdingDataBeans = null;
        BigDecimal result = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
        assertEquals(new BigDecimal(0.0).setScale(FinancialUtils.SCALE), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeHoldingsTotalEmptyCollection_rrii1() {
        Collection<?> holdingDataBeans = new ArrayList<>();
        BigDecimal result = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
        assertEquals(new BigDecimal(0.0).setScale(FinancialUtils.SCALE), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeHoldingsTotalMultipleHoldings_iCgp3_LfBm0() {
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    HoldingDataBean holdingData1 = new HoldingDataBean();
    holdingData1.setPurchasePrice(new BigDecimal(10.0));
    holdingData1.setQuantity(1);
    holdingDataBeans.add(holdingData1);
    HoldingDataBean holdingData2 = new HoldingDataBean();
    holdingData2.setPurchasePrice(new BigDecimal(20.0));
    holdingData2.setQuantity(2);
    holdingDataBeans.add(holdingData2);
    BigDecimal result = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
    assertEquals(new BigDecimal(50.0).setScale(FinancialUtils.SCALE), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeHoldingsTotalMultipleHoldingsWithZeroQuantity_quyT5_uSnB0() {
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    HoldingDataBean holdingData1 = new HoldingDataBean();
    holdingData1.setPurchasePrice(new BigDecimal(10.0));
    holdingData1.setQuantity(0);
    holdingDataBeans.add(holdingData1);
    HoldingDataBean holdingData2 = new HoldingDataBean();
    holdingData2.setPurchasePrice(new BigDecimal(20.0));
    holdingData2.setQuantity(new Integer(0)); // Changed from 2 to 0
    holdingDataBeans.add(holdingData2);
    BigDecimal result = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
    assertEquals(new BigDecimal(0.0).setScale(FinancialUtils.SCALE), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeHoldingsTotalMultipleHoldingsWithNegativeQuantity_HlJi6_UCln0() {
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    HoldingDataBean holdingData1 = new HoldingDataBean();
    holdingData1.setPurchasePrice(new BigDecimal(10.0));
    holdingData1.setQuantity(-1);
    holdingDataBeans.add(holdingData1);
    HoldingDataBean holdingData2 = new HoldingDataBean();
    holdingData2.setPurchasePrice(new BigDecimal(20.0));
    holdingData2.setQuantity(2);
    holdingDataBeans.add(holdingData2);
    BigDecimal result = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
    assertEquals(new BigDecimal(0.0).setScale(FinancialUtils.SCALE), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeHoldingsTotalMultipleHoldingsWithLargeQuantity_fOqL7_EXaP0() {
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    HoldingDataBean holdingData1 = new HoldingDataBean();
    holdingData1.setPurchasePrice(new BigDecimal(10.0));
    holdingData1.setQuantity(1000000);
    holdingDataBeans.add(holdingData1);
    HoldingDataBean holdingData2 = new HoldingDataBean();
    holdingData2.setPurchasePrice(new BigDecimal(20.0));
    holdingData2.setQuantity(2000000);
    holdingDataBeans.add(holdingData2);
}
}