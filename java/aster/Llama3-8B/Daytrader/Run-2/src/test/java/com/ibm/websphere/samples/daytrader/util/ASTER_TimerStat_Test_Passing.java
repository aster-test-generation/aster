/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMin_UuZo0() {
        TimerStat timerStat = new TimerStat();
        double min = timerStat.getMin();
        assertEquals(0.0, min, 1.0E9);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCount_uQdo1() {
        TimerStat timerStat = new TimerStat();
        timerStat.setCount(10);
        assertEquals(10, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMax_bojN0() {
        TimerStat timerStat = new TimerStat();
        double result = timerStat.getMax();
        assertEquals(0.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAvgSecs_GetM0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setTotalTime(10000);
        timerStat.setCount(2);
        assertEquals(5.0, timerStat.getAvgSecs(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMax_LEBA0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMax(10.0);
        assertEquals(10.0, timerStat.getMax());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMin_dCIs1() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(10.5);
        assertEquals(10.5, timerStat.getMin(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalTime_FhSE0() {
        TimerStat timerStat = new TimerStat();
        double result = timerStat.getTotalTime();
        assertEquals(0.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalTime_lAts0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setTotalTime(10.5);
        assertEquals(10.5, timerStat.getTotalTime(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCount_Rhai0() {
        TimerStat timerStat = new TimerStat();
        assertEquals(0, timerStat.getCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxSecs_EyEi0_eAeK0() {
        TimerStat timerStat = new TimerStat();
    }
}