/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCWrite_Test_Failing {
    @Mock
    private ServletConfig servletConfig;
    @Mock
    private ServletException servletException;
    private PingJDBCWrite pingJDBCWrite;
    PingJDBCWrite pingjdbcwrite;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_ShEd0() {
        PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
        String result = pingJDBCWrite.getServletInfo();
        assertEquals("Basic JDBC Write using a prepared statment makes use of TradeJDBC code.", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_aZwC0() throws Exception {
        MockitoAnnotations.initMocks(this);
        pingjdbcwrite = new PingJDBCWrite();
        String expected = "Hello";
        when(request.getParameter("param")).thenReturn(expected);
        pingjdbcwrite.doGet(request, response);
        verify(request, times(1)).getParameter("param");
        verify(response, times(1)).setContentType("text/html");
        verify(response, times(1)).getWriter().println(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetExceptionHandling_OMzD1_UjTT0() throws ServletException, IOException {
        PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
        HttpServletRequest req = null;
        HttpServletResponse res = Mockito.mock(HttpServletResponse.class);
        try {
            pingJDBCWrite.doGet(req, res);
        } catch (Exception e) {
            System.out.println("PingJDBCWrite -- error updating quote for symbol");
            Mockito.verify(res).sendError(500, "PingJDBCWrite Exception caught: " + e.toString());
        }
    }
}