/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession2_Test_Failing {
    @Mock
    private ServletConfig servletConfig;
    private PingSession2 pingsession2;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    HttpServletResponse httpservletresponse;
    private static String initTime;
    private static int hitCount;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_bCpm0() {
        PingSession2 pingSession2 = new PingSession2();
        String result = pingSession2.getServletInfo();
        assertEquals("HTTP Session Key: Tests management of a read/write unique id", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_JUUk0_1() throws ServletException {
        pingsession2 = new PingSession2();
        pingsession2.init(servletConfig);
        Mockito.verify(servletConfig, Mockito.times(1)).getInitParameter(Mockito.anyString());
        Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
        Mockito.verifyNoMoreInteractions(servletConfig);
        Assertions.assertNotNull(hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_JUUk0_2() throws ServletException {
        pingsession2 = new PingSession2();
        pingsession2.init(servletConfig);
        Mockito.verify(servletConfig, Mockito.times(1)).getInitParameter(Mockito.anyString());
        Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
        Mockito.verifyNoMoreInteractions(servletConfig);
        Assertions.assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_tNKq0() throws Exception {
        HttpServlet httpservlet = mock(HttpServlet.class);
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpSession httpsession = mock(HttpSession.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        PingSession2 pingsession2 = new PingSession2();
        when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
        pingsession2.doGet(httpservletrequest, httpservletresponse);
        verify(httpsession).setAttribute("sessiontest.counter", any(Integer.class));
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
    }
}