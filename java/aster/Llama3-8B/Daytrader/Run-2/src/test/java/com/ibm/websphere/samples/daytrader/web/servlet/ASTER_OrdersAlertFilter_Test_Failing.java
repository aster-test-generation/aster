/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrdersAlertFilter_Test_Failing {
    private FilterConfig filterConfig = null;
    private TradeServices tradeAction;
    @Mock
    private ServletRequest req;
    @Mock
    private ServletResponse resp;
    @Mock
    private FilterChain chain;
    @Mock
    private HttpServletRequest httpServletRequest;
    @Mock
    private TradeServices tradeServices;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilterWithNullFilterConfig_gQEu0() throws IOException, ServletException {
        OrdersAlertFilter ordersAlertFilter = new OrdersAlertFilter(Mockito.mock(Instance.class));
        ordersAlertFilter.doFilter(Mockito.mock(ServletRequest.class), Mockito.mock(ServletResponse.class), Mockito.mock(FilterChain.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilterWithDisplayOrderAlertsFalse_NUIa1() throws IOException, ServletException {
        OrdersAlertFilter ordersAlertFilter = new OrdersAlertFilter(Mockito.mock(Instance.class));
        Mockito.when(filterConfig.getInitParameter("displayOrderAlerts")).thenReturn("false");
        ordersAlertFilter.doFilter(Mockito.mock(ServletRequest.class), Mockito.mock(ServletResponse.class), Mockito.mock(FilterChain.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilterWithActionParameter_CImN2() throws IOException, ServletException {
        OrdersAlertFilter ordersAlertFilter = new OrdersAlertFilter(Mockito.mock(Instance.class));
        Mockito.when(filterConfig.getInitParameter("displayOrderAlerts")).thenReturn("true");
        Mockito.when(req.getParameter("action")).thenReturn("login");
        ordersAlertFilter.doFilter(Mockito.mock(ServletRequest.class), Mockito.mock(ServletResponse.class), Mockito.mock(FilterChain.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilterWithUserIDParameter_zXee3() throws IOException, ServletException {
        OrdersAlertFilter ordersAlertFilter = new OrdersAlertFilter(Mockito.mock(Instance.class));
        Mockito.when(filterConfig.getInitParameter("displayOrderAlerts")).thenReturn("true");
        Mockito.when(req.getParameter("action")).thenReturn("logout");
        Mockito.when(req.getParameter("uid")).thenReturn("123");
        ordersAlertFilter.doFilter(Mockito.mock(ServletRequest.class), Mockito.mock(ServletResponse.class), Mockito.mock(FilterChain.class));
    }
}