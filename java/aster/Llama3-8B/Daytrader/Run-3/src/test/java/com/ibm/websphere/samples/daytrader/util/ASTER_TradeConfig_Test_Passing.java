/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import java.math.BigDecimal;
import java.util.Random;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Random;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfig_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_ccqd0() {
        Random random = new Random();
        float result = TradeConfig.rndFloat(10);
        assert result >= 0 && result <= 10;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessMode_IDiu1() {
        assertEquals(1, TradeConfig.getAccessMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRunTimeMode_jCbo0() {
        TradeConfig.setRunTimeMode(1);
        assertEquals(1, TradeConfig.getRunTimeMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetJDBCDriverNeedsGlobalTransationTrue_ncTb0() {
        TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
        assert TradeConfig.getJDBCDriverNeedsGlobalTransation();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetJDBCDriverNeedsGlobalTransationFalse_zuCs1() {
        TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
        assert !TradeConfig.getJDBCDriverNeedsGlobalTransation();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDisplayOrderAlertsTrue_AgIK0() {
        TradeConfig config = new TradeConfig();
        config.setDisplayOrderAlerts(true);
        boolean result = config.getDisplayOrderAlerts();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDisplayOrderAlertsFalse_AfOw1() {
        TradeConfig config = new TradeConfig();
        config.setDisplayOrderAlerts(false);
        boolean result = config.getDisplayOrderAlerts();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioMixes_ouZT0_2() {
        int[][] expected = {{1, 2}, {3, 4}};
        int[][] actual = TradeConfig.getScenarioMixes();
        assertNotNull(actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_HOLDINGS_Owvw0() {
        TradeConfig config = new TradeConfig();
        config.setMAX_HOLDINGS(10);
        assertEquals(10, config.getMAX_HOLDINGS());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPublishQuotePriceChange_UQZL1() {
        TradeConfig.setPublishQuotePriceChange(true);
        assertEquals(true, TradeConfig.getPublishQuotePriceChange());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetListQuotePriceChangeFrequency_HsOO0() {
        TradeConfig config = new TradeConfig();
        config.setListQuotePriceChangeFrequency(10);
        assertEquals(10, TradeConfig.getListQuotePriceChangeFrequency());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderProcessingMode_lHxQ0() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setOrderProcessingMode(1);
        assertEquals(1, tradeConfig.getOrderProcessingMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS_ICso0() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setMAX_USERS(10);
        assertEquals(10, tradeConfig.getMAX_USERS());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDisplayOrderAlertsTrue_uklg0() {
        TradeConfig tradeConfig = new TradeConfig();
        assertTrue(TradeConfig.getDisplayOrderAlerts());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUpdateQuotePricesTrue_GObo0() {
        TradeConfig.setUpdateQuotePrices(true);
        assertEquals(true, TradeConfig.getUpdateQuotePrices());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUpdateQuotePricesFalse_jwQW1() {
        TradeConfig.setUpdateQuotePrices(false);
        assertEquals(false, TradeConfig.getUpdateQuotePrices());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessMode_nmXY0() {
        TradeConfig config = new TradeConfig();
        config.setAccessMode(1);
        assertEquals(1, config.getAccessMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_HOLDINGS_JRQR10() {
        assertEquals(10, TradeConfig.getMAX_HOLDINGS());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_fIjP0() {
        TradeConfig config = new TradeConfig();
        config.setPrimIterations(10);
        assertEquals(10, config.getPrimIterations());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextUserID_DyPc0() {
    String userID = TradeConfig.nextUserID();
    Assertions.assertTrue(userID.startsWith("uid:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextUserIDMultipleCalls_DCvg1() {
    String userID1 = TradeConfig.nextUserID();
    String userID2 = TradeConfig.nextUserID();
    Assertions.assertFalse(userID1.equals(userID2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTES_Ofbd0() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setMAX_QUOTES(10);
        assertEquals(10, tradeConfig.getMAX_QUOTES());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUpdateQuotePrices_uBSM0() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean result = TradeConfig.getUpdateQuotePrices();
        assertEquals(false, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBoolean_Jsbf0() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean result = tradeConfig.rndBoolean();
        assertTrue(true); // assert that the method returns a boolean
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_tOQL0() {
        Random random = new Random();
        int i = 10;
        int result = TradeConfig.rndInt(i);
        assert result >= 0 && result <= i;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandom_ywah0() {
        Random randomNumberGenerator = new Random();
        double result = TradeConfig.random();
        assert result >= 0.0 && result <= 1.0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_GrSR0() {
        assertEquals(0, TradeConfig.getOrderProcessingMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndCreditCard_IfNc0_1() {
        String result = TradeConfig.rndCreditCard();
        assertEquals(14, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWebInterface_hbJI0() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setWebInterface(10);
        assertEquals(10, tradeConfig.getWebInterface());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeMode_VFrA1() {
        assertEquals(1, TradeConfig.getRunTimeMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBalance_jHrO0() {
        String result = TradeConfig.rndBalance();
        assertEquals("1000000", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndUserID_tCnv0_1() {
        TradeConfig tradeConfig = new TradeConfig();
        String result = tradeConfig.rndUserID();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndUserID_tCnv0_2() {
        TradeConfig tradeConfig = new TradeConfig();
        String result = tradeConfig.rndUserID();
        assertEquals("uid:", result.substring(0, 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndUserIDDeckFull_IHGo3_1() {
        TradeConfig tradeConfig = new TradeConfig();
        for (int i = 0; i < 10; i++) {
            tradeConfig.rndUserID();
        }
        String result = tradeConfig.rndUserID();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetJDBCDriverNeedsGlobalTransation_FsTQ0_RZUc0() {
    boolean result = TradeConfig.rndUserID() != null;
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrementSellDeficit_teDA0_qSWv0() {
    TradeConfig tradeConfig = new TradeConfig();
    String nextUser = tradeConfig.rndUserID();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderFeeForBuyOrder_YNUa0_BARS0() {
    BigDecimal orderFee = new BigDecimal("0.01"); // Initialize orderFee
    BigDecimal result = TradeConfig.getOrderFee("BUY");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderFeeForSellOrder_noBO1_grjb0() {
    BigDecimal orderFee = new BigDecimal("0.01"); // Initialize orderFee
    BigDecimal result = TradeConfig.getOrderFee("SELL");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRndNewUserIDGetHostname_FTkW1_ctRy0() {
    TradeConfig tradeConfig = new TradeConfig();
    String nextUser = tradeConfig.rndUserID();
    assertEquals("uid:", nextUser.substring(0, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderFeeForInvalidOrderType_GhcO2_bNUG0() {
    String result = TradeConfig.rndUserID();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetScenarioActionNoSellDeficit_rFLy3_CVfT0() {
    boolean newUser = false;
    TradeConfig tradeConfig = new TradeConfig();
    char result = TradeConfig.getScenarioAction(newUser);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLongRunTrue_faTr0_LHUC0() {
    TradeConfig.setLongRun(true);
    assertEquals(true, TradeConfig.getLongRun());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrementSellDeficit_teDA0_qSWv0_fid1() {
    TradeConfig tradeConfig = new TradeConfig();
    String nextUser = tradeConfig.rndUserID();
    assertEquals("uid:0", nextUser);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndUserID_tCnv0() {
        TradeConfig tradeConfig = new TradeConfig();
        String result = tradeConfig.rndUserID();
        assertNotNull(result);
        assertEquals("uid:", result.substring(0, 4));
}
}