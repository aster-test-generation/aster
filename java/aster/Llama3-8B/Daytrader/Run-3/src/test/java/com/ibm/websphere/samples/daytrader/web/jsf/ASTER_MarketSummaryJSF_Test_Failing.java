/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.util.Date;
import javax.enterprise.inject.Instance;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryJSF_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_YEoC0_vigL1() {
    TradeServices services = mock(TradeServices.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryWithEmptyTopLosers_NjUO3_kwtM0() {
    TradeServices services = mock(TradeServices.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
    marketSummaryJSF.getMarketSummary();
    QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
    Assertions.assertArrayEquals(new QuoteData[0], topLosers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSummaryDate_HVOU0_JkLj0() {
    TradeServices services = mock(TradeServices.class);
    Instance<TradeServices> instance = mock(Instance.class);
    when(instance.get()).thenReturn(services);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(instance);
    Date summaryDate = marketSummaryJSF.getSummaryDate();
    assertEquals(null, summaryDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryWithTopGainersAndLosers_sSVs4_fQBS0_1() {
    TradeServices services = mock(TradeServices.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
    marketSummaryJSF.getMarketSummary();
    QuoteData[] topGainers = marketSummaryJSF.getTopGainers();
    QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
    Assertions.assertArrayEquals(new QuoteData[5], topGainers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryWithTopGainersAndLosers_sSVs4_fQBS0_2() {
    TradeServices services = mock(TradeServices.class);
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
    marketSummaryJSF.getMarketSummary();
    QuoteData[] topGainers = marketSummaryJSF.getTopGainers();
    QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
    Assertions.assertArrayEquals(new QuoteData[5], topLosers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTopGainers_NMxN0_xQPa0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF((Instance<TradeServices>) services);
}
}