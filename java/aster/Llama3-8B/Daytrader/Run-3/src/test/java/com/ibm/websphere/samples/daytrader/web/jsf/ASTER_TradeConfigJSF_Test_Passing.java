/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Passing {
private String result = "";
private ExternalContext context;
@Mock
    private TradeConfig tradeConfig;
@Mock
    private RunStatsDataBean runStatsData;
@Mock
    private HttpSession httpSession;
@Mock
    private ExternalContext externalContext;
private TradeConfigJSF tradeConfigJSF;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryInterval_xhHt0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected =20;
        int actual = tradeConfigJSF.getMarketSummaryInterval();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWebInterfaceList_DbQU0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expectedWebInterfaceList = {"interface1", "interface2", "interface3"};
        tradeConfigJSF.setWebInterfaceList(expectedWebInterfaceList);
        String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
        assertArrayEquals(expectedWebInterfaceList, actualWebInterfaceList);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuntimeMode_RXEr0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.getRuntimeMode();
        assertEquals("Full EJB3", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_Bkge0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPrimIterations(10);
        assertEquals(10, tradeConfigJSF.getPrimIterations());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxUsers_yirZ0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected =15000;
        int actual = tradeConfigJSF.getMaxUsers();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLongRun_IgDZ0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        boolean result = tradeConfigJSF.isLongRun();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPublishQuotePriceChangeTrue_ENac0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPublishQuotePriceChange(true);
        assertTrue(tradeConfigJSF.isPublishQuotePriceChange());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPublishQuotePriceChangeFalse_Adbp1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPublishQuotePriceChange(false);
        assertFalse(tradeConfigJSF.isPublishQuotePriceChange());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxQuotes_RZXI0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected =10000; // replace with your expected value
        int actual = tradeConfigJSF.getMaxQuotes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderProcessingModeList_cUXc0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = {"mode1", "mode2", "mode3"};
        tradeConfigJSF.setOrderProcessingModeList(expected);
        assertArrayEquals(expected, tradeConfigJSF.getOrderProcessingModeList());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWebInterface_XVtc0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setWebInterface("testWebInterface");
        assertEquals("testWebInterface", tradeConfigJSF.getWebInterface());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetResult_tABN0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setResult("TestResult");
        assertEquals("TestResult", tradeConfigJSF.getResult());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxUsers_CDrg0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMaxUsers(5);
        assertEquals(5, tradeConfigJSF.getMaxUsers());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketSummaryInterval_QAVZ0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMarketSummaryInterval(5);
        assertEquals(5, tradeConfigJSF.getMarketSummaryInterval());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPublishQuotePriceChange_wZIo0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setPublishQuotePriceChange(true);
        assertEquals(true, tradeConfigJSF.isPublishQuotePriceChange());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuntimeModeList_obDy0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = {"mode1", "mode2", "mode3"};
        tradeConfigJSF.setRuntimeModeList(expected);
        assertArrayEquals(expected, tradeConfigJSF.getRuntimeModeList());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetListQuotePriceChangeFrequency_BGHS0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setListQuotePriceChangeFrequency(5);
        assertEquals(5, tradeConfigJSF.getListQuotePriceChangeFrequency());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDisplayOrderAlertsTrue_WhEw0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setDisplayOrderAlerts(true);
        boolean result = tradeConfigJSF.isDisplayOrderAlerts();
        assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDisplayOrderAlertsFalse_WxhA1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setDisplayOrderAlerts(false);
        boolean result = tradeConfigJSF.isDisplayOrderAlerts();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_wpuo0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected =100;
        int actual = tradeConfigJSF.getListQuotePriceChangeFrequency();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuntimeMode_BYDK0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setRuntimeMode("test");
        assertEquals("test", tradeConfigJSF.getRuntimeMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPopulateDatabase_acdO0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.populateDatabase();
        assertEquals("database", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderProcessingMode_kRjA1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setOrderProcessingMode("Test");
        assertEquals("Test", tradeConfigJSF.getOrderProcessingMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildDatabaseTablesDB2_jlzQ0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.buildDatabaseTables();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildDatabaseTablesNullDBProductName_BUca4() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.buildDatabaseTables();
        assertEquals("database", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_vEBU0() {
        tradeConfigJSF = new TradeConfigJSF();
        MockitoAnnotations.initMocks(this);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLongRunTrue_Znlr0_Bnka0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.buildDatabaseTables();
    assertEquals("database", tradeConfig.buildDatabaseTables());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLongRunFalse_DrrC1_DIlK0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.buildDatabaseTables();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_RuntimeMode_pGdW0_zasr0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.updateConfig();
    String expected = "RuntimeMode: " + TradeConfig.getRunTimeModeNames()[TradeConfig.getRunTimeMode()];
    String actual = System.out.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_MarketSummaryInterval_DxWa5_wjfZ0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.updateConfig();
    StringBuilder sb = new StringBuilder();
    System.out.println(sb.append("Market Summary Interval: ").append(TradeConfig.getMarketSummaryInterval()));
    String actual = sb.toString();
    assertEquals("Market Summary Interval: " + TradeConfig.getMarketSummaryInterval(), actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetmaxQuotes_LZfi0_EZaH0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables();
    assertEquals("database", tradeConfigJSF.buildDatabaseTables());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_PrimIterations_QydW6_oOtr0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.updateConfig();
    StringBuilder sb = new StringBuilder();
    System.out.println(sb.append("Primitive Iterations: ").append(TradeConfig.getPrimIterations()));
    String actual = sb.toString();
    String expected = "Primitive Iterations: " + TradeConfig.getPrimIterations();
    assertEquals(expected, actual);
}
}