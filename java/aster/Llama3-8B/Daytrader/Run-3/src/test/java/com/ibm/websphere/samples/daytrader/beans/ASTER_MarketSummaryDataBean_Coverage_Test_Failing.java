/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;
import java.math.BigDecimal;
import java.util.ArrayList;
import javax.json.JsonObject;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryDataBean_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainersAndLosersNotNull_GpdJ0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(new ArrayList<>());
        marketSummaryDataBean.setTopLosers(new ArrayList<>());
        String expected = "\n\tMarket Summary at: " + marketSummaryDataBean.getSummaryDate() + "\n\t\t        TSIA:" + marketSummaryDataBean.getTSIA() + "\n\t\t    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "\n\t\t        gain:" + marketSummaryDataBean.getGainPercent() + "\n\t\t      volume:" + marketSummaryDataBean.getVolume() + "\n\t\t   Current Top Gainers:\n\t\t\t" + marketSummaryDataBean.getTopGainers().iterator().next().toString() + "\n\t\t   Current Top Losers:\n\t\t\t" + marketSummaryDataBean.getTopLosers().iterator().next().toString();
        assertEquals(expected, marketSummaryDataBean.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TopGainersOrLosersNull_BbPf1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(null);
        marketSummaryDataBean.setTopLosers(null);
        String expected = "\n\tMarket Summary at: " + marketSummaryDataBean.getSummaryDate() + "\n\t\t        TSIA:" + marketSummaryDataBean.getTSIA() + "\n\t\t    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "\n\t\t        gain:" + marketSummaryDataBean.getGainPercent() + "\n\t\t      volume:" + marketSummaryDataBean.getVolume();
        assertEquals(expected, marketSummaryDataBean.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJsonObjectBuilder_vLXj0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIntInitialization_Ulvc1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForLoopTopGainers_fBYr2_TUsG0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(new ArrayList<>());
    marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.getTopGainers().add(new QuoteDataBean());
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddTSIA_oUBn12_jQca0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal("1.0"));
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddVolume_vqFa13_PoiS0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setVolume(100.0);
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForLoopTopLosers_Pvtb7_URhe0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(new ArrayList<>());
    marketSummaryDataBean.setTopLosers(new ArrayList<>());
    marketSummaryDataBean.setTopLosers(new ArrayList<>());
    marketSummaryDataBean.getTopLosers().add(new QuoteDataBean());
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_aazn1() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setOpenTSIA(BigDecimal.valueOf(200));
        bean.setVolume(300);
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
        Assertions.assertFalse(result.contains("TSIA:"));
        Assertions.assertTrue(result.contains("openTSIA:200"));
        Assertions.assertTrue(result.contains("volume:300"));
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
        Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_ZqgJ2() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(BigDecimal.valueOf(100));
        bean.setVolume(300);
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
        Assertions.assertTrue(result.contains("TSIA:100"));
        Assertions.assertFalse(result.contains("openTSIA:"));
        Assertions.assertTrue(result.contains("volume:300"));
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
        Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_Oikt3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setVolume(300);
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
        Assertions.assertFalse(result.contains("TSIA:"));
        Assertions.assertFalse(result.contains("openTSIA:"));
        Assertions.assertTrue(result.contains("volume:300"));
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
        Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIANotNull_openTSIANotNull_volumeIsNull_topGainersNotNull_topLosersNotNull_TtFX4() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(BigDecimal.valueOf(100));
        bean.setOpenTSIA(BigDecimal.valueOf(200));
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
        Assertions.assertTrue(result.contains("TSIA:100"));
        Assertions.assertTrue(result.contains("openTSIA:200"));
        Assertions.assertFalse(result.contains("volume:"));
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
        Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeIsNull_topGainersNotNull_topLosersNotNull_jvEu5() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertTrue(result.contains("Market Summary at: "));
        Assertions.assertFalse(result.contains("TSIA:"));
        Assertions.assertFalse(result.contains("openTSIA:"));
        Assertions.assertFalse(result.contains("volume:"));
        Assertions.assertTrue(result.contains("Current Top Gainers:"));
        Assertions.assertTrue(result.contains("Current Top Losers:"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_aazn1_2_fid3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setOpenTSIA(BigDecimal.valueOf(200));
        bean.setVolume(300);
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("TSIA:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_ZqgJ2_3_fid3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(BigDecimal.valueOf(100));
        bean.setVolume(300);
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("openTSIA:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_Oikt3_2_fid3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setVolume(300);
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("TSIA:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_Oikt3_3_fid3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setVolume(300);
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("openTSIA:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIANotNull_openTSIANotNull_volumeIsNull_topGainersNotNull_topLosersNotNull_TtFX4_4_fid3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTSIA(BigDecimal.valueOf(100));
        bean.setOpenTSIA(BigDecimal.valueOf(200));
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("volume:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeIsNull_topGainersNotNull_topLosersNotNull_jvEu5_2_fid3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("TSIA:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeIsNull_topGainersNotNull_topLosersNotNull_jvEu5_3_fid3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("openTSIA:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_TSIAIsNull_openTSIAIsNull_volumeIsNull_topGainersNotNull_topLosersNotNull_jvEu5_4_fid3() {
        MarketSummaryDataBean bean = new MarketSummaryDataBean();
        bean.setTopGainers(Arrays.asList(new QuoteDataBean()));
        bean.setTopLosers(Arrays.asList(new QuoteDataBean()));
        String result = bean.toHTML();
        Assertions.assertFalse(result.contains("volume:"));}
}