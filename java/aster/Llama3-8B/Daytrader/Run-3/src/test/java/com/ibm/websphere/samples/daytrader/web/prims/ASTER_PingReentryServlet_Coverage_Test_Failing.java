/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
public class Aster_PingReentryServlet_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_NoParams_QFYT0() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("200 OK", res.getStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_NumReentriesNull_DxBr1() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("numReentries", null);
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("200 OK", res.getStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SleepNull_VNJn2() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("sleep", null);
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("200 OK", res.getStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_NumReentriesZero_BIwy3() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("numReentries", "0");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("0", res.getWriter().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SleepZero_Dzoo4() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("sleep", "0");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("0", res.getWriter().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_NumReentriesOne_ASVw5() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("numReentries", "1");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("1", res.getWriter().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SleepOne_IOQQ6() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("sleep", "1");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("1", res.getWriter().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_NumReentriesTwo_nmUO7() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("numReentries", "2");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("2", res.getWriter().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SleepTwo_oGEs8() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("sleep", "2");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("2", res.getWriter().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_NumReentriesThree_AWwi9() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("numReentries", "3");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("3", res.getWriter().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SleepThree_Yhco10() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("sleep", "3");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("3", res.getWriter().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_NumReentriesFour_wIre11() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("numReentries", "4");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("4", res.getWriter().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SleepFour_OUiI12() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest("sleep", "4");
        HttpServletResponse res = new MockHttpServletResponse();
        servlet.doGet(req, res);
        assertEquals("4", res.getWriter().toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_nYDc0_IOja0() throws ServletException, IOException {
    PingReentryServlet servlet = new PingReentryServlet();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_quWv1_XAwT0() throws ServletException, IOException {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getMethod()).thenReturn("GET");
    servlet.doGet(request, response);
    verify(request).getMethod();
    verify(response).setStatus(200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPostWithIOException_ibxG2_ktzV0() throws ServletException, IOException {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getMethod()).thenReturn("GET");
    servlet.doGet(request, response);
    verify(request).getMethod();
    verify(response).sendError(500, "IOException");
}
}