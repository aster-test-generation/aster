/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
public class Aster_PingJDBCRead2JSP_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_owJH0() {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        String expected = "Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class";
        String actual = pingJDBCRead2JSP.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_kgXZ0_fneO0() throws javax.servlet.ServletException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_pCCa1_MXZO0() throws ServletException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    ServletConfig servletConfig = mock(ServletConfig.class);
    pingJDBCRead2JSP.init(servletConfig);
    verify(servletConfig).getServletContext();
    verify(servletConfig).getInitParameter("param1");
    verify(pingJDBCRead2JSP).init(servletConfig);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetError500_DpIC11_BXOh0() throws ServletException, IOException {
    Exception e = new Exception("Test Exception");
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    MockHttpServletRequest request = new MockHttpServletRequest();
    MockHttpServletResponse response = new MockHttpServletResponse();
    pingJDBCRead2JSP.doGet(request, response);
}
}