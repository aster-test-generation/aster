/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HoldingData_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainHTML_ESEr0() {
        HoldingData holdingData = new HoldingData();
        String expected = "Expected HTML";
        String actual = holdingData.getGainHTML();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDate_Xhzj0() {
        HoldingData holdingData = new HoldingData();
        Date expectedDate = new Date();
        Date actualDate = holdingData.getPurchaseDate();
        assert actualDate.equals(expectedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBasis_Mlpd0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expected = new BigDecimal("10.00");
        BigDecimal actual = holdingData.getBasis();
    assertNull(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePrice_smDl0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expected = new BigDecimal("10.00");
        BigDecimal actual = holdingData.getPurchasePrice();
    assertNull(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_fzhy0_fid2() {
        HoldingData holdingData = new HoldingData();
        String actual = holdingData.getQuoteID();
        assertEquals("Expected quoteID", actual, "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBasis_Mlpd0_fid2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expected = new BigDecimal("10.00");
        BigDecimal actual = holdingData.getBasis();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePrice_smDl0_fid2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expected = new BigDecimal("10.00");
        BigDecimal actual = holdingData.getPurchasePrice();
        assertEquals(expected, actual);
    }
}