/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimerStat_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCount_KAXm0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setCount(5);
        assertEquals(5, timerStat.getCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMax_iyWV0() {
        TimerStat timerStat = new TimerStat();
        double result = timerStat.getMax();
        assertEquals(0.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAvgSecs_cDNR0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setTotalTime(1000);
        timerStat.setCount(2);
        assertEquals(0.5, timerStat.getAvgSecs(), 0.01);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMin_Trci0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(10.5);
        assertEquals(10.5, timerStat.getMin(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMax_JdDs0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMax(10.0);
        assertEquals(10.0, timerStat.getMax());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalTime_pmuC0() {
        TimerStat timerStat = new TimerStat();
        double result = timerStat.getTotalTime();
        assertEquals(0.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalTime_rxTf0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setTotalTime(10.5);
        assertEquals(10.5, timerStat.getTotalTime(), 0.01);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCount_qfXJ0() {
        TimerStat timerStat = new TimerStat();
        int expected = 0;
        int actual = timerStat.getCount();
        assertEquals(expected, actual);
    }
}