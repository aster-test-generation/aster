/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.Future;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.MDBStats;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import java.sql.*;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
@Mock
    private MDBStats mdbStats;
@Mock
    private Connection connection;
@Mock
    private Statement statement;
@Mock
    private DataSource dataSource;
private TradeDirect tradeDirect;
@Mock
    private MarketSummaryDataBean marketSummaryDataBean;
@Mock
    private PreparedStatement preparedstatement;
@Mock
    private DataSource datasource;
@Mock
    private ResultSet resultset;
private TradeDirect tradedirect;
private static String getAllQuotesSQL = "select * from quoteejb q";
private boolean inSession = false;
OrderDataBean orderDataBean;
private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
@Mock
    private FinancialUtils financialUtils;
AccountDataBean accountDataBean;
private UserTransaction txn;
@Mock
    private TradeConfig tradeConfig;
@Mock
    private Log log;
@Mock
    private HoldingDataBean holdingDataBean;
@Mock
    private QuoteDataBean quoteDataBean;
@Mock
    private PreparedStatement preparedStatement;
@Mock
    private ResultSet resultSet;
private ManagedExecutorService mes;
private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
private static BigDecimal ZERO = new BigDecimal(0.0);
private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
  private static long nextMarketSummary = System.currentTimeMillis();
  private static final Integer marketSummaryLock = new Integer(0);
  private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
  private static final String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
  private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_IpIm0() {
        TradeDirect tradeDirect = new TradeDirect();
        double result = tradeDirect.investmentReturn(10.0, 20.0);
        assertEquals(0.0, result, 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_hYxo0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_XTaY0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertNotNull(quotes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_fkcW0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(1, true);
    assertNotNull(orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderInSession_QKBO1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    OrderDataBean orderData = tradeDirect.completeOrder(1, true);
    assertNotNull(orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sdLE0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), false);
    Assertions.assertNotNull(orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderTwoPhase_DZGK1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
    Assertions.assertNotNull(orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_YAjy0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), false);
    assertNotNull(orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderTwoPhase_AJay1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
    assertNotNull(orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderBuy_Veig0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), true);
    assertEquals("closed", orderData.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderSell_OfPj1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(new Integer(2), true);
    assertEquals("closed", orderData.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAlreadyCompleted_wLiv2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(new Integer(3), true);
    assertEquals("completed", orderData.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAlreadyCompleted_Cpcp1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(1), false);
        assertNotNull(orderData);
        try {
            tradeDirect.completeOrder(new Integer(1), false);
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:completeOrder -- attempt to complete Order that is already completed", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_1() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        tradedirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(datasource.getConnection()).thenReturn(connection);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getString("symbol")).thenReturn("ABC");
        when(resultset.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(9.0));
        when(resultset.getBigDecimal("low")).thenReturn(BigDecimal.valueOf(8.0));
        when(resultset.getDouble("change")).thenReturn(1.0);
        when(resultset.getBigDecimal("high")).thenReturn(BigDecimal.valueOf(11.0));
        when(resultset.getString("companyName")).thenReturn("Company ABC");
        when(resultset.getDouble("volume")).thenReturn(1000.0);
        QuoteDataBean result = tradedirect.getQuote("ABC");
        assertEquals("Company ABC", result.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_2() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        tradedirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(datasource.getConnection()).thenReturn(connection);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getString("symbol")).thenReturn("ABC");
        when(resultset.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(9.0));
        when(resultset.getBigDecimal("low")).thenReturn(BigDecimal.valueOf(8.0));
        when(resultset.getDouble("change")).thenReturn(1.0);
        when(resultset.getBigDecimal("high")).thenReturn(BigDecimal.valueOf(11.0));
        when(resultset.getString("companyName")).thenReturn("Company ABC");
        when(resultset.getDouble("volume")).thenReturn(1000.0);
        QuoteDataBean result = tradedirect.getQuote("ABC");
        assertEquals(BigDecimal.valueOf(10.0), result.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_3() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        tradedirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(datasource.getConnection()).thenReturn(connection);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getString("symbol")).thenReturn("ABC");
        when(resultset.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(9.0));
        when(resultset.getBigDecimal("low")).thenReturn(BigDecimal.valueOf(8.0));
        when(resultset.getDouble("change")).thenReturn(1.0);
        when(resultset.getBigDecimal("high")).thenReturn(BigDecimal.valueOf(11.0));
        when(resultset.getString("companyName")).thenReturn("Company ABC");
        when(resultset.getDouble("volume")).thenReturn(1000.0);
        QuoteDataBean result = tradedirect.getQuote("ABC");
        assertEquals(BigDecimal.valueOf(9.0), result.getOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_4() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        tradedirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(datasource.getConnection()).thenReturn(connection);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getString("symbol")).thenReturn("ABC");
        when(resultset.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(9.0));
        when(resultset.getBigDecimal("low")).thenReturn(BigDecimal.valueOf(8.0));
        when(resultset.getDouble("change")).thenReturn(1.0);
        when(resultset.getBigDecimal("high")).thenReturn(BigDecimal.valueOf(11.0));
        when(resultset.getString("companyName")).thenReturn("Company ABC");
        when(resultset.getDouble("volume")).thenReturn(1000.0);
        QuoteDataBean result = tradedirect.getQuote("ABC");
        assertEquals(BigDecimal.valueOf(8.0), result.getLow());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_5() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        tradedirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(datasource.getConnection()).thenReturn(connection);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getString("symbol")).thenReturn("ABC");
        when(resultset.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(9.0));
        when(resultset.getBigDecimal("low")).thenReturn(BigDecimal.valueOf(8.0));
        when(resultset.getDouble("change")).thenReturn(1.0);
        when(resultset.getBigDecimal("high")).thenReturn(BigDecimal.valueOf(11.0));
        when(resultset.getString("companyName")).thenReturn("Company ABC");
        when(resultset.getDouble("volume")).thenReturn(1000.0);
        QuoteDataBean result = tradedirect.getQuote("ABC");
        assertEquals(1.0, result.getChange());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_6() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        tradedirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(datasource.getConnection()).thenReturn(connection);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getString("symbol")).thenReturn("ABC");
        when(resultset.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(9.0));
        when(resultset.getBigDecimal("low")).thenReturn(BigDecimal.valueOf(8.0));
        when(resultset.getDouble("change")).thenReturn(1.0);
        when(resultset.getBigDecimal("high")).thenReturn(BigDecimal.valueOf(11.0));
        when(resultset.getString("companyName")).thenReturn("Company ABC");
        when(resultset.getDouble("volume")).thenReturn(1000.0);
        QuoteDataBean result = tradedirect.getQuote("ABC");
        assertEquals(BigDecimal.valueOf(11.0), result.getHigh());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_7() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        tradedirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(datasource.getConnection()).thenReturn(connection);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getString("symbol")).thenReturn("ABC");
        when(resultset.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(9.0));
        when(resultset.getBigDecimal("low")).thenReturn(BigDecimal.valueOf(8.0));
        when(resultset.getDouble("change")).thenReturn(1.0);
        when(resultset.getBigDecimal("high")).thenReturn(BigDecimal.valueOf(11.0));
        when(resultset.getString("companyName")).thenReturn("Company ABC");
        when(resultset.getDouble("volume")).thenReturn(1000.0);
        QuoteDataBean result = tradedirect.getQuote("ABC");
        assertEquals("ABC", result.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_8() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        tradedirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(datasource.getConnection()).thenReturn(connection);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getString("symbol")).thenReturn("ABC");
        when(resultset.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(9.0));
        when(resultset.getBigDecimal("low")).thenReturn(BigDecimal.valueOf(8.0));
        when(resultset.getDouble("change")).thenReturn(1.0);
        when(resultset.getBigDecimal("high")).thenReturn(BigDecimal.valueOf(11.0));
        when(resultset.getString("companyName")).thenReturn("Company ABC");
        when(resultset.getDouble("volume")).thenReturn(1000.0);
        QuoteDataBean result = tradedirect.getQuote("ABC");
        assertEquals(1000.0, result.getVolume());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderSell_eBaC1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.completeOrder(new Integer(2), true);
        assertNotNull(orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_dJkX0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("userID");
        assert orderDataBeans != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersNull_qRgC1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(null);
        assert orderDataBeans == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersEmpty_lfDQ2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("userID");
        assert orderDataBeans.isEmpty();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_gsTc0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = tradeDirect.getQuote("symbol");
        assertNotNull(quoteData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteNull_fzzS1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteData = tradeDirect.getQuote(null);
        assertNull(quoteData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_ZTOz0() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean result = tradeDirect.pingTwoPhase("symbol");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_UJhY0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        tradeDirect.logout(userID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VJkK0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingNull_FzXZ1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(null);
        assertNotNull(holdingData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellValidInput_hYTx0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellNullUserID_ikBX1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell(null, 1, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellNullHoldingID_PTBR2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", null, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellInvalidOrderProcessingMode_xZUh3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellOrderProcessingModeAsynch2Phase_TpLz10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellOrderProcessingModeAsynch_FDnr11() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_tDdS0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("testUser");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testupdateQuotePriceVolume_1() throws Exception{
        tradedirect = new TradeDirect();
        quoteDataBean = QuoteDataBean.getRandomInstance();
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString(any(String.class))).thenReturn("symbol");
        when(resultset.getBigDecimal(any(String.class))).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getDouble(any(String.class))).thenReturn(100.0);
        QuoteDataBean updatedQuoteDataBean = tradedirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 100.0);
        assertEquals("symbol", updatedQuoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testupdateQuotePriceVolume_2() throws Exception{
        tradedirect = new TradeDirect();
        quoteDataBean = QuoteDataBean.getRandomInstance();
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString(any(String.class))).thenReturn("symbol");
        when(resultset.getBigDecimal(any(String.class))).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getDouble(any(String.class))).thenReturn(100.0);
        QuoteDataBean updatedQuoteDataBean = tradedirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 100.0);
        assertEquals(BigDecimal.valueOf(20.0), updatedQuoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testupdateQuotePriceVolume_3() throws Exception{
        tradedirect = new TradeDirect();
        quoteDataBean = QuoteDataBean.getRandomInstance();
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString(any(String.class))).thenReturn("symbol");
        when(resultset.getBigDecimal(any(String.class))).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getDouble(any(String.class))).thenReturn(100.0);
        QuoteDataBean updatedQuoteDataBean = tradedirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 100.0);
        assertEquals(200.0, updatedQuoteDataBean.getVolume(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellInvalidAccount_jvlD1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    accountData.setAccountID(null);
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellInvalidHolding_sjEn2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = new HoldingDataBean();
    holdingData.setHoldingID(null);
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellValidInput_FsOG0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellInvalidOrderProcessingMode_egqF3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.sell("userID", 1, 5);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataNotReturned_WpLa5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH);
        assertNull(orderData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithOrderID_VJdN6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getOrderID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithOrderStatus_tsxw7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithSymbol_bIPR8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithQuantity_WNXV9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getQuantity());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithPrice_NbMj10() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithOrderFee_xMRS11() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getOrderFee());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithQuote_jgVY12() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getQuote());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithAccount_UpMS13() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getAccount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithOpenDate_ucqL14() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getOpenDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOrderDataReturnedWithCompletionDate_tZhg15() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
        assertNotNull(orderData.getCompletionDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginInvalidPassword_adDZ2() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("validUser", "invalidPassword");
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("TradeDirect:Login failure for user: validUser\n\tIncorrect password-->" + "validUser:" + "invalidPassword", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_1() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradedirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("testUser");
        profileData.setFullName("Test Full Name");
        profileData.setEmail("testEmail");
        profileData.setCreditCard("testCreditCard");
        profileData.setAddress("testAddress");
        profileData.setPassword("testPassword");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString("profile_userid")).thenReturn("testUser");
        AccountProfileDataBean updatedProfileData = tradedirect.updateAccountProfile(profileData);
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(preparedstatement, times(1)).executeQuery();
        verify(resultset, times(1)).next();
        verify(resultset, times(1)).getString("profile_userid");
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_2() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradedirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("testUser");
        profileData.setFullName("Test Full Name");
        profileData.setEmail("testEmail");
        profileData.setCreditCard("testCreditCard");
        profileData.setAddress("testAddress");
        profileData.setPassword("testPassword");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString("profile_userid")).thenReturn("testUser");
        AccountProfileDataBean updatedProfileData = tradedirect.updateAccountProfile(profileData);
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(preparedstatement, times(1)).executeQuery();
        verify(resultset, times(1)).next();
        verify(resultset, times(1)).getString("profile_userid");
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_3() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradedirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("testUser");
        profileData.setFullName("Test Full Name");
        profileData.setEmail("testEmail");
        profileData.setCreditCard("testCreditCard");
        profileData.setAddress("testAddress");
        profileData.setPassword("testPassword");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString("profile_userid")).thenReturn("testUser");
        AccountProfileDataBean updatedProfileData = tradedirect.updateAccountProfile(profileData);
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(preparedstatement, times(1)).executeQuery();
        verify(resultset, times(1)).next();
        verify(resultset, times(1)).getString("profile_userid");
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_4() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradedirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("testUser");
        profileData.setFullName("Test Full Name");
        profileData.setEmail("testEmail");
        profileData.setCreditCard("testCreditCard");
        profileData.setAddress("testAddress");
        profileData.setPassword("testPassword");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString("profile_userid")).thenReturn("testUser");
        AccountProfileDataBean updatedProfileData = tradedirect.updateAccountProfile(profileData);
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(preparedstatement, times(1)).executeQuery();
        verify(resultset, times(1)).next();
        verify(resultset, times(1)).getString("profile_userid");
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_5() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradedirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("testUser");
        profileData.setFullName("Test Full Name");
        profileData.setEmail("testEmail");
        profileData.setCreditCard("testCreditCard");
        profileData.setAddress("testAddress");
        profileData.setPassword("testPassword");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString("profile_userid")).thenReturn("testUser");
        AccountProfileDataBean updatedProfileData = tradedirect.updateAccountProfile(profileData);
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(preparedstatement, times(1)).executeQuery();
        verify(resultset, times(1)).next();
        verify(resultset, times(1)).getString("profile_userid");
        assertEquals(profileData.getPassword(), updatedProfileData.getPassword());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_PublishQuotePriceChangeTrue_uRTR0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = new QuoteDataBean();
    quoteData.setSymbol("symbol");
    quoteData.setCompanyName("companyName");
    quoteData.setPrice(BigDecimal.valueOf(10));
    quoteData.setOpen(BigDecimal.valueOf(5));
    quoteData.setLow(BigDecimal.valueOf(3));
    quoteData.setHigh(BigDecimal.valueOf(15));
    quoteData.setVolume(100);
    BigDecimal changeFactor = BigDecimal.valueOf(2);
    double sharesTraded = 50;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol", changeFactor, sharesTraded, true);
    assertEquals(quoteData, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_PublishQuotePriceChangeFalse_FLAn1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = new QuoteDataBean();
    quoteData.setSymbol("symbol");
    quoteData.setCompanyName("companyName");
    quoteData.setPrice(BigDecimal.valueOf(10));
    quoteData.setOpen(BigDecimal.valueOf(5));
    quoteData.setLow(BigDecimal.valueOf(3));
    quoteData.setHigh(BigDecimal.valueOf(15));
    quoteData.setVolume(100);
    BigDecimal changeFactor = BigDecimal.valueOf(2);
    double sharesTraded = 50;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol", changeFactor, sharesTraded, false);
    assertEquals(new QuoteDataBean(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_ChangeFactorLessThanOne_vbyK2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = new QuoteDataBean();
    quoteData.setSymbol("symbol");
    quoteData.setCompanyName("companyName");
    quoteData.setPrice(BigDecimal.valueOf(10));
    quoteData.setOpen(BigDecimal.valueOf(5));
    quoteData.setLow(BigDecimal.valueOf(3));
    quoteData.setHigh(BigDecimal.valueOf(15));
    quoteData.setVolume(100);
    BigDecimal changeFactor = BigDecimal.valueOf(0.5);
    double sharesTraded = 50;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol", changeFactor, sharesTraded, true);
    assertEquals(quoteData, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_SharesTradedZero_hcWz3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = new QuoteDataBean();
    quoteData.setSymbol("symbol");
    quoteData.setCompanyName("companyName");
    quoteData.setPrice(BigDecimal.valueOf(10));
    quoteData.setOpen(BigDecimal.valueOf(5));
    quoteData.setLow(BigDecimal.valueOf(3));
    quoteData.setHigh(BigDecimal.valueOf(15));
    quoteData.setVolume(100);
    BigDecimal changeFactor = BigDecimal.valueOf(2);
    double sharesTraded = 0;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("symbol", changeFactor, sharesTraded, true);
    assertEquals(quoteData, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_auCJ0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileUpdateAccountProfileSQL_MFhY1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        tradeDirect.updateAccountProfile(profileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileGetAccountProfileData_tXHs2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_UScG0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean expected = new AccountProfileDataBean();
        expected.setCreditCard("creditCard");
        expected.setEmail("email");
        expected.setUserID("userID");
        expected.setAddress("address");
        expected.setPassword("password");
        expected.setFullName("fullName");
        AccountProfileDataBean actual = tradeDirect.getAccountProfileData("userID");
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataNull_osfO1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean actual = tradeDirect.getAccountProfileData(null);
        assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_Yfkq0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders(userID);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_cKQH0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenReturn(true).thenReturn(false);
    when(rs.getBigDecimal("TSIA")).thenReturn(BigDecimal.ONE);
    when(rs.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ZERO);
    when(rs.getDouble("totalVolume")).thenReturn(10.0);
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    verify(conn, times(1)).close();
    verify(stmt, times(3)).close();
    assertEquals(BigDecimal.ONE, marketSummaryData.getTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_cKQH0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenReturn(true).thenReturn(false);
    when(rs.getBigDecimal("TSIA")).thenReturn(BigDecimal.ONE);
    when(rs.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ZERO);
    when(rs.getDouble("totalVolume")).thenReturn(10.0);
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    verify(conn, times(1)).close();
    verify(stmt, times(3)).close();
    assertEquals(BigDecimal.ZERO, marketSummaryData.getOpenTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_cKQH0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenReturn(true).thenReturn(false);
    when(rs.getBigDecimal("TSIA")).thenReturn(BigDecimal.ONE);
    when(rs.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ZERO);
    when(rs.getDouble("totalVolume")).thenReturn(10.0);
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    verify(conn, times(1)).close();
    verify(stmt, times(3)).close();
    assertEquals(10.0, marketSummaryData.getVolume());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternalNoResults_hIcX1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenReturn(false);
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    verify(conn, times(1)).close();
    verify(stmt, times(3)).close();
    assertNull(marketSummaryData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternalError_cYVT4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
    when(stmt.executeQuery()).thenThrow(new SQLException());
    try {
        tradeDirect.getMarketSummaryInternal();
        fail("Expected SQLException");
    } catch (SQLException e) {
    }
    verify(conn, times(1)).close();
    verify(stmt, times(1)).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternalRollback_cyKW5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenReturn(true).thenReturn(false);
    SQLException e = mock(SQLException.class);
    when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenThrow(e);
    try {
        tradeDirect.getMarketSummaryInternal();
        fail("Expected SQLException");
    } catch (SQLException ex) {
    }
    verify(conn, times(1)).close();
    verify(stmt, times(1)).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderFailure_lYEv1_lIFA0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    doThrow(new SQLException("Error closing connection")).when(conn).close();
    tradeDirect.getMarketSummaryInternal();
    verify(conn, times(1)).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderBuy_bCis0_aQmk0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setSymbol("symbol");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(10.0));
    orderData.setOrderID(Integer.valueOf(1));
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    orderData.setAccount(accountData);
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    orderData.setQuote(quote);
    OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
    assertEquals(orderData, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderSell_gNwT1_hdWC0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("sell");
    orderData.setSymbol("symbol");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(10.0));
    orderData.setOrderID(Integer.valueOf(1));
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    orderData.setAccount(accountData);
    QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
    orderData.setQuote(quoteData);
    OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
    assertEquals(orderData, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountData_cgzh0() throws Exception{
    connection = mock(Connection.class);
    accountDataBean = mock(AccountDataBean.class);
    resultset = mock(ResultSet.class);
    datasource = mock(DataSource.class);
    preparedstatement = mock(PreparedStatement.class);
    tradedirect = new TradeDirect();
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(resultset.next()).thenReturn(true);
    when(resultset.getDate("date")).thenReturn(new java.sql.Date(new java.util.Date().getTime()));
    when(resultset.getInt(any(String.class))).thenReturn(1);
    when(resultset.getBigDecimal(any(String.class))).thenReturn(new BigDecimal("4.5"));
    when(resultset.getObject(any(String.class))).thenReturn(accountDataBean);
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getProfileID()).thenReturn("profileID");
    when(accountDataBean.getOrders()).thenReturn(new ArrayList<>());
    when(accountDataBean.getLastLogin()).thenReturn(new java.sql.Date(new java.util.Date().getTime()));
    when(accountDataBean.getBalance()).thenReturn(new BigDecimal("5.6"));
    when(accountDataBean.getProfile()).thenReturn(new AccountProfileDataBean());
    AccountDataBean accountData = tradedirect.getAccountData(1);
    assertEquals(accountDataBean, accountData);
    verify(preparedstatement).executeQuery();
    verify(connection).prepareStatement(any(String.class));
    verify(datasource).getConnection();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_EIYC0_dtlR0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null;
    try {
        conn = DriverManager.getConnection("jdbc:default:connection");
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertNotNull(accountData);
    } catch (Exception e) {
        fail("Error getting account data");
    } finally {
        if (conn != null) {
            conn.close();
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAsyncTrue_reeu0_PtdI0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertNull(future);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryData_UIjD3_SlRx0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellNullAccount_iASy1_LRMj0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null;
    try {
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/your_database_name", "your_username", "your_password");
        HoldingDataBean holdingData = null; // initialize holdingData to null
        OrderDataBean orderData = tradeDirect.sell(null, 1, TradeConfig.SYNCH);
        assertEquals("cancelled", orderData.getOrderStatus());
    } finally {
        if (conn != null) {
            conn.close();
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellInvalidOrderProcessingMode_ASMa4_MTRz0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null;
    try {
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/your_database_name", "username", "password");
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertEquals(true, true); // add assertion statement
    } finally {
        if (conn != null) {
            conn.close();
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCancelOrderTwoPhaseFalse_dOeG1_GQgk0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null;
    try {
        conn = DriverManager.getConnection("jdbc:default:connection");
        tradeDirect.cancelOrder(1, false);
        conn.commit();
    } catch (Exception e) {
        fail("Exception occurred while cancelling order");
    } finally {
        if (conn != null) {
            conn.close();
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryIntervalZero_BuUa0_zdca0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_QjMa0_OmAE0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        QuoteDataBean quoteData = tradeDirect.createQuote("AAPL", "Apple Inc.", BigDecimal.valueOf(100.0));
        assertNotNull(quoteData);
        assertEquals("AAPL", quoteData.getSymbol());
        assertEquals("Apple Inc.", quoteData.getCompanyName());
        assertEquals(BigDecimal.valueOf(100.0), quoteData.getPrice());
    } catch (Exception e) {
        fail("Exception caught: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder_IhvT0_Nfup0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.queueOrder(1, true);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummaryInternal_syRR0_1() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradedirect = new TradeDirect();
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(getTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getOpenTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getTSIATotalVolumeSQL)).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(resultset.next()).thenReturn(true).thenReturn(false);
    when(resultset.getBigDecimal("TSIA")).thenReturn(new BigDecimal("10.0"));
    when(resultset.getBigDecimal("openTSIA")).thenReturn(new BigDecimal("20.0"));
    when(resultset.getDouble("totalVolume")).thenReturn(100.0);
    MarketSummaryDataBean marketSummaryData = tradedirect.getMarketSummaryInternal();
    assertEquals(new BigDecimal("10.0"), marketSummaryData.getTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummaryInternal_syRR0_2() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradedirect = new TradeDirect();
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(getTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getOpenTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getTSIATotalVolumeSQL)).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(resultset.next()).thenReturn(true).thenReturn(false);
    when(resultset.getBigDecimal("TSIA")).thenReturn(new BigDecimal("10.0"));
    when(resultset.getBigDecimal("openTSIA")).thenReturn(new BigDecimal("20.0"));
    when(resultset.getDouble("totalVolume")).thenReturn(100.0);
    MarketSummaryDataBean marketSummaryData = tradedirect.getMarketSummaryInternal();
    assertEquals(new BigDecimal("20.0"), marketSummaryData.getOpenTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummaryInternal_syRR0_3() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradedirect = new TradeDirect();
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(getTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getOpenTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getTSIATotalVolumeSQL)).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(resultset.next()).thenReturn(true).thenReturn(false);
    when(resultset.getBigDecimal("TSIA")).thenReturn(new BigDecimal("10.0"));
    when(resultset.getBigDecimal("openTSIA")).thenReturn(new BigDecimal("20.0"));
    when(resultset.getDouble("totalVolume")).thenReturn(100.0);
    MarketSummaryDataBean marketSummaryData = tradedirect.getMarketSummaryInternal();
    assertEquals(100.0, marketSummaryData.getVolume(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummaryInternal_syRR0_4() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradedirect = new TradeDirect();
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(getTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getOpenTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getTSIATotalVolumeSQL)).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(resultset.next()).thenReturn(true).thenReturn(false);
    when(resultset.getBigDecimal("TSIA")).thenReturn(new BigDecimal("10.0"));
    when(resultset.getBigDecimal("openTSIA")).thenReturn(new BigDecimal("20.0"));
    when(resultset.getDouble("totalVolume")).thenReturn(100.0);
    MarketSummaryDataBean marketSummaryData = tradedirect.getMarketSummaryInternal();
    assertEquals(0, marketSummaryData.getTopGainers().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummaryInternal_syRR0_5() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradedirect = new TradeDirect();
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(getTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getOpenTSIASQL)).thenReturn(preparedstatement);
    when(connection.prepareStatement(getTSIATotalVolumeSQL)).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(resultset.next()).thenReturn(true).thenReturn(false);
    when(resultset.getBigDecimal("TSIA")).thenReturn(new BigDecimal("10.0"));
    when(resultset.getBigDecimal("openTSIA")).thenReturn(new BigDecimal("20.0"));
    when(resultset.getDouble("totalVolume")).thenReturn(100.0);
    MarketSummaryDataBean marketSummaryData = tradedirect.getMarketSummaryInternal();
    assertEquals(0, marketSummaryData.getTopLosers().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_qeih0_kiXm0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        QuoteDataBean quoteDataBean = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.valueOf(1.0), 100.0, true);
        Assertions.assertNotNull(quoteDataBean);
    } catch (Exception e) {
        Assertions.fail("Exception was thrown", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderNullHolding_rugh1_GwMJ0() {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    accountData.setAccountID(new Integer(1));
    QuoteDataBean quoteData = new QuoteDataBean("AAPL");
    quoteData.setPrice(new BigDecimal(100));
    try {
        OrderDataBean orderData = tradeDirect.createOrder(accountData, quoteData, null, "buy", 100);
        assertNotNull(orderData);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_uOak0_FyMA0() {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    accountData.setAccountID(new Integer(1));
    QuoteDataBean quoteData = new QuoteDataBean("AAPL");
    quoteData.setPrice(new BigDecimal(100));
    HoldingDataBean holdingData = new HoldingDataBean();
    holdingData.setHoldingID(new Integer(1));
    try {
        OrderDataBean orderData = tradeDirect.createOrder(accountData, quoteData, holdingData, "buy", 100);
        assertNotNull(orderData);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_dSFz3_QOkb0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        QuoteDataBean quoteDataBean = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.valueOf(1.0), 0.0, true);
        Assertions.assertNotNull(quoteDataBean);
    } catch (Exception e) {
        Assertions.fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_PennyStockPrice_ARTV0_tEtd0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.valueOf(0.01), 100, true);
        assertEquals(quoteData.getPrice(), BigDecimal.valueOf(0.02));
        assertEquals(quoteData.getVolume(), 100);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_MaximumStockPrice_bSrs1_wZCv0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.valueOf(0.1), 100, true);
        assertEquals(quoteData.getPrice(), BigDecimal.valueOf(0.2));
        assertEquals(quoteData.getVolume(), 100);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_NormalPrice_tFus2_VeJo0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.valueOf(0.05), 100, true);
        assertEquals(quoteData.getPrice(), BigDecimal.valueOf(0.1));
        assertEquals(quoteData.getVolume(), 100);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt_NoUpdate_Hbhk3_LxAu0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt("symbol", BigDecimal.valueOf(0.05), 0, true);
        assertEquals(quoteData.getPrice(), BigDecimal.valueOf(0.05));
        assertEquals(quoteData.getVolume(), 0);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_DcOV0_PlUV0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test Fullname";
    String address = "Test Address";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal("1000.00");
    try {
        AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNotNull(accountData);
        assertEquals(userID, accountData.getAccountID().intValue());
        assertEquals(0, accountData.getLoginCount());
        assertEquals(0, accountData.getLogoutCount());
        assertEquals(new Timestamp(System.currentTimeMillis()), accountData.getCreationDate());
        assertEquals(new Timestamp(System.currentTimeMillis()), accountData.getLastLogin());
        assertEquals(openBalance, accountData.getOpenBalance());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginValidUser_XBnL0_eZYm0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        AccountDataBean accountData = tradeDirect.login("validUser", "validPassword");
        assertNotNull(accountData);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_BRcH0_zXmE0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    try {
        AccountDataBean accountData = tradeDirect.getAccountData(userID);
        assertNotNull(accountData);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_SDbB0_QfrX0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        QuoteDataBean quoteDataBean = tradeDirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(1.2), 1000);
        assertEquals("symbol", quoteDataBean.getSymbol());
        assertEquals(BigDecimal.valueOf(1.2), quoteDataBean.getPrice());
        assertEquals(1000, quoteDataBean.getVolume(), 0);
    } catch (Exception e) {
        fail("Exception caught: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuyValidInput_HXvE0_joCw0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        OrderDataBean orderData = tradeDirect.buy("user1", "AAPL", 100.0, TradeConfig.SYNCH);
        Assertions.assertNotNull(orderData);
    } catch (Exception e) {
        Assertions.fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuyAsync2PhaseOrder_cUia5_XMCz0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        OrderDataBean orderData = tradeDirect.buy("user1", "AAPL", 100.0, TradeConfig.ASYNCH_2PHASE);
        Assertions.assertNotNull(orderData);
    } catch (Exception e) {
        Assertions.fail("Exception occurred while executing the test", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderNull_ZTMO2() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.queueOrder(null, true);
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("java.lang.NullPointerException", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginInvalidUser_jYqb1() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("invalidUser", "validPassword");
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("Cannot find account forinvalidUser", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullUser_LLoq3() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login(null, "validPassword");
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals("Cannot find account fornull", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderRollback_uETN2_gZFX0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    Exception e = new Exception("Error completing order");
    tradeDirect.completeOrder(1, true);
    verify(conn, times(1)).rollback();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAlreadyCompleted_bNOI2_feQA0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setSymbol("symbol");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(10.0));
    orderData.setOrderID(Integer.valueOf(1));
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    orderData.setAccount(accountData);
    QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
    orderData.setQuote(quoteData);
    orderData.setOrderStatus("completed");
    try {
        tradeDirect.completeOrder(orderData.getOrderID(), true);
        fail("Expected exception");
    } catch (Exception e) {
        assertEquals("TradeDirect:completeOrder -- attempt to complete Order that is already completed", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCancelOrderException_PHBh2_kCik0_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null;
    try {
        conn = DriverManager.getConnection("jdbc:default:connection");
        tradeDirect.cancelOrder(1, true);
        throw new Exception("Test exception");
    } catch (Exception e) {
        assertEquals("Test exception", e.getMessage());
    } finally {
        if (conn != null) {
            conn.close();
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        tradedirect = new TradeDirect();
        QuoteDataBean quoteData = new QuoteDataBean();
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(datasource.getConnection()).thenReturn(connection);
        when(resultset.next()).thenReturn(true).thenReturn(false);
        when(resultset.getString("symbol")).thenReturn("ABC");
        when(resultset.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(9.0));
        when(resultset.getBigDecimal("low")).thenReturn(BigDecimal.valueOf(8.0));
        when(resultset.getDouble("change")).thenReturn(1.0);
        when(resultset.getBigDecimal("high")).thenReturn(BigDecimal.valueOf(11.0));
        when(resultset.getString("companyName")).thenReturn("Company ABC");
        when(resultset.getDouble("volume")).thenReturn(1000.0);
        QuoteDataBean result = tradedirect.getQuote("ABC");
        assertEquals("Company ABC", result.getCompanyName());
        assertEquals(BigDecimal.valueOf(10.0), result.getPrice());
        assertEquals(BigDecimal.valueOf(9.0), result.getOpen());
        assertEquals(BigDecimal.valueOf(8.0), result.getLow());
        assertEquals(1.0, result.getChange());
        assertEquals(BigDecimal.valueOf(11.0), result.getHigh());
        assertEquals("ABC", result.getSymbol());
        assertEquals(1000.0, result.getVolume());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testupdateQuotePriceVolume() throws Exception{
        tradedirect = new TradeDirect();
        quoteDataBean = QuoteDataBean.getRandomInstance();
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString(any(String.class))).thenReturn("symbol");
        when(resultset.getBigDecimal(any(String.class))).thenReturn(BigDecimal.valueOf(10.0));
        when(resultset.getDouble(any(String.class))).thenReturn(100.0);
        QuoteDataBean updatedQuoteDataBean = tradedirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 100.0);
        assertEquals("symbol", updatedQuoteDataBean.getSymbol());
        assertEquals(BigDecimal.valueOf(20.0), updatedQuoteDataBean.getPrice());
        assertEquals(200.0, updatedQuoteDataBean.getVolume(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile() throws Exception {
        connection = mock(Connection.class);
        preparedstatement = mock(PreparedStatement.class);
        resultset = mock(ResultSet.class);
        datasource = mock(DataSource.class);
        tradedirect = new TradeDirect();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("testUser");
        profileData.setFullName("Test Full Name");
        profileData.setEmail("testEmail");
        profileData.setCreditCard("testCreditCard");
        profileData.setAddress("testAddress");
        profileData.setPassword("testPassword");
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
        when(preparedstatement.executeQuery()).thenReturn(resultset);
        when(resultset.next()).thenReturn(true);
        when(resultset.getString("profile_userid")).thenReturn("testUser");
        AccountProfileDataBean updatedProfileData = tradedirect.updateAccountProfile(profileData);
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(preparedstatement, times(1)).executeQuery();
        verify(resultset, times(1)).next();
        verify(resultset, times(1)).getString("profile_userid");
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
        assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_cKQH0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString(), anyInt(), anyInt())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenReturn(true).thenReturn(false);
    when(rs.getBigDecimal("TSIA")).thenReturn(BigDecimal.ONE);
    when(rs.getBigDecimal("openTSIA")).thenReturn(BigDecimal.ZERO);
    when(rs.getDouble("totalVolume")).thenReturn(10.0);
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    verify(conn, times(1)).close();
    verify(stmt, times(3)).close();
    assertEquals(BigDecimal.ONE, marketSummaryData.getTSIA());
    assertEquals(BigDecimal.ZERO, marketSummaryData.getOpenTSIA());
    assertEquals(10.0, marketSummaryData.getVolume());
}
}