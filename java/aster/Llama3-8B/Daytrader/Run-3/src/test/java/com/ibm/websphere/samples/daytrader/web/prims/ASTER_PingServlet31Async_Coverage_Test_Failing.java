/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.AsyncContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServlet31Async_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_SfwV0() {
        PingServlet31Async pingServlet31Async = new PingServlet31Async();
        String result = pingServlet31Async.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_mXNM0_weZy0() throws javax.servlet.ServletException, java.io.IOException {
    PingServlet31Async pingServlet31Async = new PingServlet31Async();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPostStartAsync_LJfH2_JYLP0() throws ServletException, IOException {
    PingServlet31Async servlet = new com.ibm.websphere.samples.daytrader.web.prims.PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext ac = mock(AsyncContext.class);
    when(req.startAsync()).thenReturn(ac);
    servlet.doGet(req, res);
    verify(req, times(1)).startAsync();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPostStartAsync_LJfH2_JYLP0_fid2() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext ac = mock(AsyncContext.class);
    when(req.startAsync()).thenReturn(ac);
    servlet.doGet(req, res);
    verify(req, times(1)).startAsync();
}
}