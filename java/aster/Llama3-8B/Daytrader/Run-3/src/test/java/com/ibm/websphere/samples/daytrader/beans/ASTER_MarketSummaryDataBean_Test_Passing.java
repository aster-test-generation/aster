/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryDataBean_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercentPositive_Ztyz0() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setTSIA(new BigDecimal("100"));
    bean.setOpenTSIA(new BigDecimal("50"));
    BigDecimal result = bean.getGainPercent();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercentNegative_iHyw1() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setTSIA(new BigDecimal("50"));
    bean.setOpenTSIA(new BigDecimal("100"));
    BigDecimal result = bean.getGainPercent();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenTSIANull_LbGv1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setOpenTSIA(null);
    assertNull(marketSummaryDataBean.getOpenTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_aPam0_4() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertEquals(5, result.getTopGainers().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_aPam0_5() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertEquals(5, result.getTopLosers().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolumeNegative_npKB1() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setVolume(-10.0);
    assertEquals(-10.0, bean.getVolume(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTSIANull_vbFw1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(null);
    assertNull(marketSummaryDataBean.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTopLosers_PbeU0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    topLosers.add(quoteDataBean);
    marketSummaryDataBean.setTopLosers(topLosers);
    assertEquals(topLosers, marketSummaryDataBean.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSummaryDateNull_guPP1() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setSummaryDate(null);
    assertNull(bean.getSummaryDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSummaryDate_sqMd0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Date summaryDate = marketSummaryDataBean.getSummaryDate();
    assertEquals(null, summaryDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTSIA_Jupt0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.valueOf(10));
    assertEquals(BigDecimal.valueOf(10), marketSummaryDataBean.getTSIA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTopGainers_FKFF0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
    assertEquals(null, topGainers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolume_CcYH0() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setVolume(100.0);
    assertEquals(100.0, bean.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolumeWithNonZeroValue_Racu1() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setVolume(200.0);
    assertEquals(200.0, bean.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_TQAy0_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Market Summary at:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_TQAy0_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("TSIA:100.00"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_TQAy0_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("openTSIA:200.00"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_TQAy0_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("gain:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_TQAy0_5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("volume:300.0"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_TQAy0_6() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Current Top Gainers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_TQAy0_7() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Current Top Losers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTopGainersNull_AEex1() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setTopGainers(null);
    assertNull(bean.getTopGainers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_TQAy0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Market Summary at:"));
    Assertions.assertTrue(result.contains("TSIA:100.00"));
    Assertions.assertTrue(result.contains("openTSIA:200.00"));
    Assertions.assertTrue(result.contains("gain:"));
    Assertions.assertTrue(result.contains("volume:300.0"));
    Assertions.assertTrue(result.contains("Current Top Gainers:"));
    Assertions.assertTrue(result.contains("Current Top Losers:"));
}
}