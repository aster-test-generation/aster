/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import java.math.BigDecimal;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuoteDataBean_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_tfLe0_2() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol(), quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_tfLe0_3() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol() + " Incorporated", quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_tfLe0_4() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getVolume(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_tfLe0_5() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_tfLe0_6() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_tfLe0_7() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getLow());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_tfLe0_8() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getHigh());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_tfLe0_9() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getChange(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_dFuJ0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(150.0), BigDecimal.valueOf(140.0), BigDecimal.valueOf(120.0), BigDecimal.valueOf(160.0), 10.0);
        String result = quoteDataBean.toHTML();
        assertEquals("<BR>Quote Data for: AAPL<LI> companyName: Apple Inc.</LI><LI>      volume: 1000000.0</LI><LI>       price: 150.0</LI><LI>        open: 140.0</LI><LI>         low: 120.0</LI><LI>        high: 160.0</LI><LI>      change: 10.0</LI>", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLEmpty_fLdC1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        String result = quoteDataBean.toHTML();
        assertEquals("<BR>Quote Data for: <LI> companyName: </LI><LI>      volume: </LI><LI>       price: </LI><LI>        open: </LI><LI>         low: </LI><LI>        high: </LI><LI>      change: </LI>", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithSymbol_sTqv2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("GOOG");
        String result = quoteDataBean.toHTML();
        assertEquals("<BR>Quote Data for: GOOG<LI> companyName: </LI><LI>      volume: </LI><LI>       price: </LI><LI>        open: </LI><LI>         low: </LI><LI>        high: </LI><LI>      change: </LI>", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_GNSU0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("80.00"), new BigDecimal("110.00"), 10.0);
        assertEquals("\n\tQuote Data for: AAPL\n\t\t companyName: Apple Inc.\n\t\t      volume: 1000000.0\n\t\t       price: 100.00\n\t\t        open: 90.00\n\t\t         low: 80.00\n\t\t        high: 110.00\n\t\t      change: 10.0", quoteDataBean.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrint_YHJG0_vqcB0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(110.0), 10.0);
    quoteDataBean.print();
    String expected = "QuoteDataBean[symbol=AAPL, companyName=Apple Inc., volume=1000000.0, price=100.0, open=90.0, low=80.0, high=110.0, change=10.0]";
    assertEquals(expected, quoteDataBean.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrintWithoutParameters_LWAH1_JNOs0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    assertEquals("QuoteDataBean[symbol=null, companyName=null, volume=0.0, price=0.0, open=0.0, low=0.0, high=0.0, change=0.0]", quoteDataBean.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrintWithSymbol_czgX2_WZie0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("GOOG");
    assertEquals("QuoteDataBean[symbol=GOOG, companyName=null, volume=0.0, price=0.0, open=0.0, low=0.0, high=0.0, change=0.0]", quoteDataBean.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrint_YHJG0_vqcB0_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(110.0), 10.0);
    quoteDataBean.print();
    String expected = "	Quote Data for: AAPL		 companyName: Apple Inc.		      volume: 1000000.0		       price: 100.0		        open1: 90.0		         low: 80.0		        high: 110.0		      change1: 10.0";
    assertEquals(expected, quoteDataBean.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_tfLe0() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        assertNotNull(quoteDataBean);
        assertEquals(TradeConfig.rndSymbol(), quoteDataBean.getSymbol());
        assertEquals(TradeConfig.rndSymbol() + " Incorporated", quoteDataBean.getCompanyName());
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getVolume(), 0.0);
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getPrice());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getOpen());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getLow());
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), quoteDataBean.getHigh());
        assertEquals(TradeConfig.rndFloat(100000), quoteDataBean.getChange(), 0.0);
    }
}