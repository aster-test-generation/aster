/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.util.Collection;
import java.util.Iterator;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Collection;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2CMROne2Many_Test_Passing {
private static int hitCount;
private static String initTime;
@Mock
    private ServletConfig config;
@InjectMocks
    private PingServlet2Session2CMROne2Many pingservlet2session2cmrone2many;
HttpServletResponse httpservletresponse;
HttpServletRequest httpServletRequest;
HttpServlet httpservlet;
private TradeServices tradeSLSBLocal;
@Mock
    private HttpServletResponse httpResponse;
@Mock
    private HttpServletRequest httpRequest;
@Mock
    private TradeConfig tradeConfig;
@Mock
    private OrderDataBean orderDataBean;
@Mock
    private Iterator<?> iterator;
@Mock
    private Collection<?> orderDataBeans;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpServletRequest = mock(HttpServletRequest.class);
        httpservlet = mock(HttpServlet.class);
        pingservlet2session2cmrone2many = new PingServlet2Session2CMROne2Many();
        // Given
        when(httpServletRequest.getMethod()).thenReturn("POST");
        // When
        pingservlet2session2cmrone2many.doPost(httpServletRequest, httpservletresponse);
        // Then
        verify(httpservletresponse, times(1)).sendRedirect(any(String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_NLxL0() {
        PingServlet2Session2CMROne2Many pingServlet2Session2CMROne2Many = new PingServlet2Session2CMROne2Many();
        String result = pingServlet2Session2CMROne2Many.getServletInfo();
        assertEquals("web primitive, tests Servlet to Entity EJB path", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_kLJz0_1() throws ServletException {
    hitCount = 0;
    initTime = null;
    pingservlet2session2cmrone2many.init(config);
    Mockito.verify(config, Mockito.times(1)).getServletContext();
    assertEquals(0, hitCount);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_kLJz0_2() throws ServletException {
    hitCount = 0;
    initTime = null;
    pingservlet2session2cmrone2many.init(config);
    Mockito.verify(config, Mockito.times(1)).getServletContext();
    assertNotNull(initTime);}
}