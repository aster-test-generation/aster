/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AccountProfileDataBean_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObjectDifferentFields_gAyB4() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "full1", "add1", "email1", "credit1");
    AccountProfileDataBean bean2 = new AccountProfileDataBean("user1", "pass2", "full2", "add2", "email2", "credit2");
    boolean result = bean1.equals(bean2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_EGfb0_1() {
    AccountProfileDataBean actual = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean expected = new AccountProfileDataBean(
        TradeConfig.rndUserID(), 
        TradeConfig.rndUserID(), 
        TradeConfig.rndFullName(), 
        TradeConfig.rndAddress(), 
        TradeConfig.rndEmail(TradeConfig.rndUserID()), 
        TradeConfig.rndCreditCard());
    assertEquals(expected.getUserID(), actual.getUserID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_EGfb0_2() {
    AccountProfileDataBean actual = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean expected = new AccountProfileDataBean(
        TradeConfig.rndUserID(), 
        TradeConfig.rndUserID(), 
        TradeConfig.rndFullName(), 
        TradeConfig.rndAddress(), 
        TradeConfig.rndEmail(TradeConfig.rndUserID()), 
        TradeConfig.rndCreditCard());
    assertEquals(expected.getPassword(), actual.getPassword());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_EGfb0_3() {
    AccountProfileDataBean actual = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean expected = new AccountProfileDataBean(
        TradeConfig.rndUserID(), 
        TradeConfig.rndUserID(), 
        TradeConfig.rndFullName(), 
        TradeConfig.rndAddress(), 
        TradeConfig.rndEmail(TradeConfig.rndUserID()), 
        TradeConfig.rndCreditCard());
    assertEquals(expected.getFullName(), actual.getFullName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_EGfb0_4() {
    AccountProfileDataBean actual = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean expected = new AccountProfileDataBean(
        TradeConfig.rndUserID(), 
        TradeConfig.rndUserID(), 
        TradeConfig.rndFullName(), 
        TradeConfig.rndAddress(), 
        TradeConfig.rndEmail(TradeConfig.rndUserID()), 
        TradeConfig.rndCreditCard());
    assertEquals(expected.getAddress(), actual.getAddress());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_EGfb0_5() {
    AccountProfileDataBean actual = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean expected = new AccountProfileDataBean(
        TradeConfig.rndUserID(), 
        TradeConfig.rndUserID(), 
        TradeConfig.rndFullName(), 
        TradeConfig.rndAddress(), 
        TradeConfig.rndEmail(TradeConfig.rndUserID()), 
        TradeConfig.rndCreditCard());
    assertEquals(expected.getEmail(), actual.getEmail());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_EGfb0_6() {
    AccountProfileDataBean actual = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean expected = new AccountProfileDataBean(
        TradeConfig.rndUserID(), 
        TradeConfig.rndUserID(), 
        TradeConfig.rndFullName(), 
        TradeConfig.rndAddress(), 
        TradeConfig.rndEmail(TradeConfig.rndUserID()), 
        TradeConfig.rndCreditCard());
    assertEquals(expected.getCreditCard(), actual.getCreditCard());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_Nvvn0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        accountProfileDataBean.print();
        assertEquals("	Account Profile Data for userID:userID		   passwd:password		   fullName:fullName		    address:address		      email:email		 creditCard:creditCard", accountProfileDataBean.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_bAPD0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("testID", "testPassword", "testFullName", "testAddress", "testEmail", "testCreditCard");
        String expected = "<BR>Account Profile Data for userID: <B>testID</B>" + "<LI>   passwd: testPassword</LI>" + "<LI>   fullName: testFullName</LI>" + "<LI>    address: testAddress</LI>" + "<LI>      email: testEmail</LI>" + "<LI> creditCard: testCreditCard</LI>";
        assertEquals(expected, accountProfileDataBean.toHTML());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_jhYt0() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
        assertNotNull(accountDataBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_Nvvn0_fid2() {
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        accountProfileDataBean.print();
        assertEquals("AccountProfileDataBean{userID='userID', password='password', fullName='fullName', address='address', email='email', creditCard='creditCard'}", accountProfileDataBean.toString());
    }
}