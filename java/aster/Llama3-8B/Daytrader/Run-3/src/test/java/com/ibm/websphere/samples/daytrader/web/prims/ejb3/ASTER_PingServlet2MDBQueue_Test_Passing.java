/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.io.IOException;
import javax.jms.ConnectionFactory;
import javax.jms.Queue;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBQueue_Test_Passing {
private static String initTime;
private static int hitCount;
@Mock
    private ServletConfig servletConfig;
@InjectMocks
    private PingServlet2MDBQueue pingservlet2mdbqueue;
HttpServletResponse httpservletresponse;
HttpServletRequest httprequest;
HttpServlet httpservlet;
private ConnectionFactory queueConnectionFactory;
private Queue tradeBrokerQueue;
@Mock
    private HttpServletRequest httpServletRequest;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpServletRequest = mock(HttpServletRequest.class);
        pingservlet2mdbqueue = mock(PingServlet2MDBQueue.class);
        when(queueConnectionFactory).thenReturn(queueConnectionFactory);
        when(tradeBrokerQueue).thenReturn(tradeBrokerQueue);
        when(initTime).thenReturn(initTime);
        when(hitCount).thenReturn(hitCount);
        when(httpServletRequest.getMethod()).thenReturn("GET");
        pingservlet2mdbqueue.doGet(httpServletRequest, httpservletresponse);
        verify(pingservlet2mdbqueue, times(1)).doGet(httpServletRequest, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletresponse, times(1)).getWriter();
        verifyNoMoreInteractions(pingservlet2mdbqueue, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_RHEv0() {
        PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
        String result = pingServlet2MDBQueue.getServletInfo();
        assertEquals("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoPost_xfBE0() throws ServletException, IOException {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    HttpServletRequest httprequest = mock(HttpServletRequest.class);
    PingServlet2MDBQueue pingservlet2mdbqueue = new PingServlet2MDBQueue();
    when(httprequest.getMethod()).thenReturn("GET");
    when(httprequest.getParameter("param")).thenReturn("value");
    pingservlet2mdbqueue.doGet(httprequest, httpservletresponse);
    verify(httpservletresponse, times(1)).setStatus(HttpServletResponse.SC_OK);
    verify(httpservletresponse, times(1)).setContentType("text/html");
    verify(httpservletresponse, times(1)).flushBuffer();
}
}