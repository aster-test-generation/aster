/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletSetContentLength_Test_Failing {
PingServletSetContentLength pingservletsetcontentlength;
ServletConfig servletConfig;
HttpServlet httpServlet;
HttpServletResponse httpservletresponse;
HttpServletRequest httpservletrequest;
ServletOutputStream servletoutputstream;
HttpServlet httpservlet;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        httpServlet = mock(HttpServlet.class);
        servletConfig = mock(ServletConfig.class);
        pingservletsetcontentlength = new PingServletSetContentLength();
        pingservletsetcontentlength.init(servletConfig);
        verify(servletConfig).getServletContext();
        verify(pingservletsetcontentlength, times(1)).init(servletConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservlet = mock(HttpServlet.class);
        pingservletsetcontentlength = new PingServletSetContentLength();
        when(httpservletrequest.getParameter("contentLength")).thenReturn("10");
        pingservletsetcontentlength.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setContentType("text/html");
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
        verify(servletoutputstream).println(anyString());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_YAnq0() {
        PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
        String result = pingServletSetContentLength.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.", result);
    }
}