/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuoteData_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainHTML_BHij0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        String result = quoteData.getGainHTML();
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeHTMLNegativeChange_TsUa0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(90), "ABC");
        DecimalFormat df = new DecimalFormat("####0.00");
        String result = quoteData.getChangeHTML();
        assert result.equals("<FONT color=\"#cc0000\">-10.00</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeHTMLPositiveChange_llbo1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(110), "ABC");
        DecimalFormat df = new DecimalFormat("####0.00");
        String result = quoteData.getChangeHTML();
        assert result.equals("<FONT color=\"#009900\">10.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithTwoParams_ZhWT0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL");
        BigDecimal gain = quoteData.getGain();
    assertNull(new BigDecimal("10.0"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLow_ojOW0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC");
    BigDecimal low = quoteData.getLow();
    assertNull(BigDecimal.valueOf(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange_nTzR0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "symbol");
        assertEquals(0, quoteData.getChange(),-10.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHigh_WvVj0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "symbol");
    assertNull(BigDecimal.valueOf(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_aBUZ0() {
        BigDecimal open = new BigDecimal("100");
        BigDecimal price = new BigDecimal("120");
        String symbol = "ABC";
        QuoteData quoteData = new QuoteData(open, price, symbol);
        BigDecimal gainPercent = quoteData.getGainPercent();
    assertNull(new BigDecimal("20"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercentHTML_deVp0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "ABC");
        String result = quoteData.getGainPercentHTML();
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercentHTML1_ikVu1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("20.00"), "ABC");
        String result = quoteData.getGainPercentHTML();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainHTMLWithGain_qQaR1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGain(BigDecimal.valueOf(10));
        String result = quoteData.getGainHTML();
        assertEquals("10.00%", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercent_TqEq0_fid2() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.00), BigDecimal.valueOf(10.00), "symbol");
    quoteData.setGainPercent(BigDecimal.valueOf(5.00));
    assertEquals(BigDecimal.valueOf(50.00).setScale(2), quoteData.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercentNegative_wcys1_fid2() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.00), BigDecimal.valueOf(10.00), "symbol");
    quoteData.setGainPercent(BigDecimal.valueOf(-5.00));
    assertEquals(BigDecimal.valueOf(-50.00).setScale(2), quoteData.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyNameWithMinimalParameters_PJKv0_fid2() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL");
        assertEquals("AAPL", quoteData.getCompanyName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithTwoParams_hghB0_fid2() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "ABC");
        String range = quoteData.getRange();
        assertEquals("", range);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithSixParams_tWAG1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "ABC", new BigDecimal("30.0"), new BigDecimal("25.0"), "Company", new Double(1000.0), new Double(5.0));
        String range = quoteData.getRange();
        assertEquals("", range);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithTwoParams_ZhWT0_fid2() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL");
        BigDecimal gain = quoteData.getGain();
        assertEquals(new BigDecimal("10.0"), gain);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithFiveParams_MVhJ1_fid2() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL", new BigDecimal("30.0"), new BigDecimal("25.0"), "Apple Inc.", 100.0, 5.0);
        BigDecimal gain = quoteData.getGain();
        assertEquals(new BigDecimal("10.0"), gain);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpen_UFoX0_fid2() {
    BigDecimal open = new BigDecimal("10.0");
    BigDecimal price = new BigDecimal("20.0");
    String symbol = "ABC";
    QuoteData quoteData = new QuoteData(open, price, symbol);
    BigDecimal result = quoteData.getOpen();
    assertEquals(open, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLow_ojOW0_fid2() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC");
    BigDecimal low = quoteData.getLow();
    assertEquals(BigDecimal.valueOf(0), low);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange_nTzR0_fid2() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "symbol");
        assertEquals(0, quoteData.getChange(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHigh_WvVj0_fid2() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "symbol");
        assertEquals(BigDecimal.valueOf(0), quoteData.getHigh());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_aBUZ0_fid2() {
        BigDecimal open = new BigDecimal("100");
        BigDecimal price = new BigDecimal("120");
        String symbol = "ABC";
        QuoteData quoteData = new QuoteData(open, price, symbol);
        BigDecimal gainPercent = quoteData.getGainPercent();
        assertEquals(new BigDecimal("20"), gainPercent);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent2_qkYl1() {
        BigDecimal open = new BigDecimal("100");
        BigDecimal price = new BigDecimal("120");
        String symbol = "ABC";
        BigDecimal high = new BigDecimal("130");
        BigDecimal low = new BigDecimal("110");
        String companyName = "Company Name";
        Double volume = 1000.0;
        Double change = 20.0;
        QuoteData quoteData = new QuoteData(open, price, symbol, high, low, companyName, volume, change);
        BigDecimal gainPercent = quoteData.getGainPercent();
        assertEquals(new BigDecimal("20"), gainPercent);
    }
}