/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import java.math.BigDecimal;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HoldingDataBean_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_QuoteNotNull_tdRW0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(new QuoteDataBean("ABC", "Company Name", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 0.0));
        assertEquals("ABC", holdingDataBean.getQuoteID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_QuoteNull_PXTb1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuoteID("ABC");
        assertEquals("ABC", holdingDataBean.getQuoteID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_QuoteNullAndNoID_muhk2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNull(holdingDataBean.getQuoteID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_HoldingIDNull_aZsk1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        int expectedHashCode = 0;
        assertEquals(expectedHashCode, holdingDataBean.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HoldingID_fuCH0_1() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        Integer holdingID = holding.getHoldingID();
        assertNotNull(holding);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HoldingID_fuCH0_2() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        Integer holdingID = holding.getHoldingID();
        assertNotNull(holdingID);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HoldingID_fuCH0_3() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        Integer holdingID = holding.getHoldingID();
        assertTrue(holdingID > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_Quantity_cdmr1_1() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        double quantity = holding.getQuantity();
        assertNotNull(holding);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_Quantity_cdmr1_2() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        double quantity = holding.getQuantity();
        assertTrue(quantity > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_PurchasePrice_RnUh2_1() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        BigDecimal purchasePrice = holding.getPurchasePrice();
        assertNotNull(holding);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_PurchasePrice_RnUh2_2() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        BigDecimal purchasePrice = holding.getPurchasePrice();
        assertNotNull(purchasePrice);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_PurchasePrice_RnUh2_3() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        BigDecimal purchasePrice = holding.getPurchasePrice();
        assertTrue(purchasePrice.compareTo(BigDecimal.ZERO) > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_PurchaseDate_Dqbp3_1() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        Date purchaseDate = holding.getPurchaseDate();
        assertNotNull(holding);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_PurchaseDate_Dqbp3_2() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        Date purchaseDate = holding.getPurchaseDate();
        assertNotNull(purchaseDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNullObject_GRAk0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertEquals(false, holdingDataBean.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClassObject_BuUq1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        assertEquals(false, holdingDataBean.equals(quoteDataBean));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_Uofw2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertEquals(true, holdingDataBean.equals(holdingDataBean));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_HoldingID_fuCH0() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        assertNotNull(holding);
        Integer holdingID = holding.getHoldingID();
        assertNotNull(holdingID);
        assertTrue(holdingID > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_Quantity_cdmr1() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        assertNotNull(holding);
        double quantity = holding.getQuantity();
        assertTrue(quantity > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_PurchasePrice_RnUh2() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        assertNotNull(holding);
        BigDecimal purchasePrice = holding.getPurchasePrice();
        assertNotNull(purchasePrice);
        assertTrue(purchasePrice.compareTo(BigDecimal.ZERO) > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_PurchaseDate_Dqbp3() {
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        assertNotNull(holding);
        Date purchaseDate = holding.getPurchaseDate();
        assertNotNull(purchaseDate);
}
}