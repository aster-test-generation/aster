/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Log_Test_Passing {
    private static final Logger log = Logger.getLogger(Log.class.getName());
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStat_udrD0() {
        Log.log("Test message");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintCollection_yZDC0() {
        Collection<String> collection = new ArrayList<>();
        collection.add("Test1");
        collection.add("Test2");
        Log.printCollection(collection);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintCollectionEmpty_tUpn1() {
        Collection<String> collection = new ArrayList<>();
        Log.printCollection(collection);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoTraceFalse_NdLi1() {
        Logger log = Logger.getLogger(Log.class.getName());
        log.setLevel(Level.OFF);
        boolean result = Log.doTrace();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_kbmH0() {
        Log.error("Error message 1", "Error message 2", new Throwable());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public static void log(String message) {
        System.out.println(message);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_spYd0() {
        Throwable e = new Throwable();
        Log.error("Error message 1", "Error message 2", e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_OsaV0() {
        Throwable e = new Throwable();
        Log.error("msg1", "msg2", "msg3", e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintCollection_IoJH0() {
        Log log = new Log();
        Collection<String> collection = new ArrayList<>();
        collection.add("Test");
        log.printCollection("Test message", collection);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_MXfw0() {
        String message = "Test message";
        Throwable e = new Exception("Test exception");
        Log.error(message, e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrintObject_SznH0_dRDH0() {
    Log log = new Log();
    String expected = "Hello\n\t";
    log.error("Hello");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testError_lqpx0_KDWr1() {
    String message = "Test Message";
    Throwable e = new Exception("Test Exception");
    Log.error(message, e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrace_XSdL0_lFGz0() {
    String message = "Test message";
    Object parm1 = "Parm1";
    Object parm2 = "Parm2";
    Object parm3 = "Parm3";
    Object parm4 = "Parm4";
    Log.trace(message, parm1, parm2, parm3, parm4);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrace_YdWG0_MXib0() {
    String message = "Test Message";
    Object parm1 = "Parm1";
    Object parm2 = "Parm2";
    Object parm3 = "Parm3";
    Object parm4 = "Parm4";
    Object parm5 = "Parm5";
    Object parm6 = "Parm6";
    Log.trace(message, parm1, parm2, parm3, parm4, parm5, parm6);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testError_mPtd0_wVog0() {
    Log.error("msg1", new Exception("msg2", new Exception("msg3", new Exception("test"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrace_ccbR0_umCB0() {
    Log.error("Test message", new Exception());
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrace_VRAm0_pCnD0() {
    Log log = new Log();
    log.error("Test", new Exception("param1", new Exception("param2")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLog_AoQZ1_heMP0() {
    Logger log = Logger.getLogger(Log.class.getName());
    Log.error("Test message", new Exception("Test exception"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDebug_sIIw0_UNXE0() {
    Log log = new Log();
    Log.error("Test message", new Exception("Test exception"));
}
}