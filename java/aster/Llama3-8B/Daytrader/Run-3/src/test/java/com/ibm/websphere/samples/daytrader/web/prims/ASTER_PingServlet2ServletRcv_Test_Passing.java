/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2ServletRcv_Test_Passing {
private static String initTime = null;
@Mock
    private ServletConfig config;
@InjectMocks
    private PingServlet2ServletRcv pingservlet2servletrcv;
HttpServletRequest httpservletrequest;
HttpServletResponse httpservletresponse;
HttpServlet httpservlet;
@Mock
    private PingBean pingBean;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservlet = mock(HttpServlet.class);
        pingservlet2servletrcv = new PingServlet2ServletRcv();
        // Arrange
        when(httpservletrequest.getMethod()).thenReturn("POST");
        when(httpservletrequest.getParameter("param")).thenReturn("value");
        // Act
        pingservlet2servletrcv.doPost(httpservletrequest, httpservletresponse);
        // Assert
        verify(httpservletrequest, times(1)).getMethod();
        verify(httpservletrequest, times(1)).getParameter("param");
        verify(httpservletresponse, times(1)).sendError(HttpServletResponse.SC_OK);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_nMjn0() throws ServletException {
    MockitoAnnotations.initMocks(this);
    pingservlet2servletrcv.init(config);
    Assertions.assertEquals(0, initTime); // Assuming initTime is an integer
}
}