/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;
import java.math.BigDecimal;
import java.util.Collection;
import javax.json.Json;
import javax.json.JsonObject;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryDataBean_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_aPam0_1() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_aPam0_2() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getOpenTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_aPam0_3() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndQuantity(), result.getVolume());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_nCnt1_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Market Summary at:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_nCnt1_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("openTSIA:200.00"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_nCnt1_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("gain:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_nCnt1_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("volume:300.0"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_nCnt1_5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Current Top Gainers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_nCnt1_6() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Current Top Losers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_tqJU2_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Market Summary at:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_tqJU2_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("TSIA:100.00"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_tqJU2_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("gain:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_tqJU2_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("volume:300.0"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_tqJU2_5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Current Top Gainers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_tqJU2_6() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Current Top Losers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_ARRT3_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Market Summary at:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_ARRT3_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("gain:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_ARRT3_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("volume:300.0"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_ARRT3_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Current Top Gainers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_ARRT3_5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Current Top Losers:"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTopLosers_JRVa1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
    Assertions.assertEquals(0, topLosers.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToJsonWithoutTopGainersAndLosers_VglS1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.valueOf(100));
    marketSummaryDataBean.setOpenTSIA(BigDecimal.valueOf(50));
    marketSummaryDataBean.setVolume(1000);
    JsonObject expected = Json.createObjectBuilder()
        .add("tsia", "100")
        .add("volume", "1000")
        .add("date", "")
        .build();
    assertEquals(expected, marketSummaryDataBean.toJSON());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToJsonWithNullTopGainersAndLosers_hdsU2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.valueOf(100));
    marketSummaryDataBean.setOpenTSIA(BigDecimal.valueOf(50));
    marketSummaryDataBean.setVolume(1000);
    marketSummaryDataBean.setTopGainers(null);
    marketSummaryDataBean.setTopLosers(null);
    JsonObject expected = Json.createObjectBuilder()
        .add("tsia", "100")
        .add("volume", "1000")
        .add("date", "")
        .build();
    assertEquals(expected, marketSummaryDataBean.toJSON());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenTSIA_SVqD1_yfWU0() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setTSIA(BigDecimal.valueOf(10));
    assertNull(BigDecimal.valueOf(10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercentPositive_Ztyz0_fid1() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setTSIA(new BigDecimal("100"));
    bean.setOpenTSIA(new BigDecimal("50"));
    BigDecimal result = bean.getGainPercent();
    assertEquals(new BigDecimal("100.0"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercentNegative_iHyw1_fid1() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setTSIA(new BigDecimal("50"));
    bean.setOpenTSIA(new BigDecimal("100"));
    BigDecimal result = bean.getGainPercent();
    assertEquals(new BigDecimal("-50.0"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_aPam0() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getTSIA());
    assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getOpenTSIA());
    assertEquals(TradeConfig.rndQuantity(), result.getVolume());
    assertEquals(5, result.getTopGainers().size());
    assertEquals(5, result.getTopLosers().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstanceNullCollections_wkIp1() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getTSIA());
    assertEquals(TradeConfig.rndBigDecimal(1000000.0f), result.getOpenTSIA());
    assertEquals(TradeConfig.rndQuantity(), result.getVolume());
    assertEquals(0, result.getTopGainers().size());
    assertEquals(0, result.getTopLosers().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIANotNull_volumeNotNull_topGainersNotNull_topLosersNotNull_nCnt1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal("200.00"), 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Market Summary at:"));
    Assertions.assertTrue(result.contains("openTSIA:200.00"));
    Assertions.assertTrue(result.contains("gain:"));
    Assertions.assertTrue(result.contains("volume:300.0"));
    Assertions.assertTrue(result.contains("Current Top Gainers:"));
    Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIANotNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_tqJU2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Market Summary at:"));
    Assertions.assertTrue(result.contains("TSIA:100.00"));
    Assertions.assertTrue(result.contains("gain:"));
    Assertions.assertTrue(result.contains("volume:300.0"));
    Assertions.assertTrue(result.contains("Current Top Gainers:"));
    Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TSIAIsNull_openTSIAIsNull_volumeNotNull_topGainersNotNull_topLosersNotNull_ARRT3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 300.0, Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
    String result = marketSummaryDataBean.toString();
    System.out.println(result);
    Assertions.assertTrue(result.contains("Market Summary at:"));
    Assertions.assertTrue(result.contains("gain:"));
    Assertions.assertTrue(result.contains("volume:300.0"));
    Assertions.assertTrue(result.contains("Current Top Gainers:"));
    Assertions.assertTrue(result.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstanceNullCollections_wkIp1_4_fid3() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertEquals(0, result.getTopGainers().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstanceNullCollections_wkIp1_5_fid3() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertEquals(0, result.getTopLosers().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenTSIA_SVqD1_yfWU0_fid3() {
    MarketSummaryDataBean bean = new MarketSummaryDataBean();
    bean.setTSIA(BigDecimal.valueOf(10));
    assertEquals(BigDecimal.valueOf(10), bean.getOpenTSIA());
}
}