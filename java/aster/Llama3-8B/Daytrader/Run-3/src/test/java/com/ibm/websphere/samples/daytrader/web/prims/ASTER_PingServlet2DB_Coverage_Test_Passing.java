/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServlet2DB_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeDirect_KdGK4() throws javax.servlet.ServletException, java.io.IOException {
        TradeDirect trade = new TradeDirect();
        assertEquals(true, trade instanceof TradeDirect);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAppendHtml_cCda6() throws javax.servlet.ServletException, java.io.IOException {
        StringBuffer output = new StringBuffer(100);
        output.append("<html><head><title>PingServlet2DB.</title></head>");
        assertEquals("<html><head><title>PingServlet2DB.</title></head>", output.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAppendInitTime_wdCH7() throws javax.servlet.ServletException, java.io.IOException {
        String initTime = "initTime";
        StringBuffer output = new StringBuffer(100);
        output.append("<FONT size=\"+2\" color=\"#000066\">PingServlet2DB:</FONT><HR><FONT size=\"-1\" color=\"#000066\">Init time : " + initTime);
        assertEquals("<FONT size=\"+2\" color=\"#000066\">PingServlet2DB:</FONT><HR><FONT size=\"-1\" color=\"#000066\">Init time : " + initTime, output.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAppendHitCount_qufX9() throws javax.servlet.ServletException, java.io.IOException {
        StringBuffer output = new StringBuffer(100);
        output.append("<BR>Hit Count: 1");
        assertEquals("<BR>Hit Count: 1", output.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAppendHr_kbJa10() throws javax.servlet.ServletException, java.io.IOException {
        StringBuffer output = new StringBuffer(100);
        output.append("<HR></body></html>");
        assertEquals("<HR></body></html>", output.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPostDoGetCall_pEcc2_eCFK0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServlet2DB pingServlet2DB = new PingServlet2DB();
    pingServlet2DB.doGet(request, response);
    verify(request).getMethod();
    verify(response).setStatus(HttpServletResponse.SC_OK);
    verify(request).getMethod();
    verify(response).setStatus(HttpServletResponse.SC_OK);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWriter_JFmM2_TjRY0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServlet2DB pingServlet2DB = new PingServlet2DB();
    pingServlet2DB.doGet(request, response);
    verify(response, times(1)).getWriter();
}
}