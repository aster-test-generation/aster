/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;
import java.time.LocalDateTime;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple1_Test_Failing {
private static LocalDateTime initTime;
@Mock
    private ServletConfig servletConfig;
@Mock
    private ServletException servletException;
private PingServletBeanValSimple1 pingservletbeanvalsimple1;
HttpServletResponse httpservletresponse;
ServletOutputStream servletoutputstream;
HttpServletRequest httprequest;
private static int hitCount = 0;
@Mock
    private HttpServletRequest httpServletRequest;
@Mock
    private SimpleBean1 simpleBean1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception{
        initTime = LocalDateTime.now();
        hitCount = 0;
        pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        when(httpServletRequest.getMethod()).thenReturn("GET");
        when(httpServletRequest.getContentType()).thenReturn("text/html");
        pingservletbeanvalsimple1.doGet(httpServletRequest, httpservletresponse);
        verify(servletoutputstream).println(anyString());
        verify(servletoutputstream).flush();
        verify(servletoutputstream).close();
        verify(simpleBean1).checkInjectionValidation();
        verify(httpservletresponse).setContentType("text/html");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_jpYP0() {
        PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
        String result = pingServletBeanValSimple1.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_tGsP0() throws ServletException {
    pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
    when(servletConfig.getServletContext()).thenReturn(null);
    when(servletException.getMessage()).thenReturn("Mocked ServletException");
    pingservletbeanvalsimple1.init(servletConfig);
    verify(servletConfig, times(1)).getServletContext();
    verify(servletConfig, times(1)).getServletContext();
    assertEquals(0, hitCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoPost_OJFi0() throws Exception {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    ServletOutputStream servletoutputstream = mock(ServletOutputStream.class);
    HttpServletRequest httprequest = mock(HttpServletRequest.class);
    PingServletBeanValSimple1 pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingservletbeanvalsimple1.doGet(httprequest, httpservletresponse);
    verify(httpservletresponse).setStatus(200);
    verify(servletoutputstream).print("<html><head><title>Ping Servlet Bean Validation Simple</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet Bean Validation Simple<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + "initTime" + "<BR><BR></FONT>  <B>Hit Count: " + "hitCount" + "</B></body></html>");
    verify(servletoutputstream).flush();
    verify(servletoutputstream).close();
}
}