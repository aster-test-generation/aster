/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import java.util.logging.Level;
import java.util.logging.Logger;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Log_Test_Failing {
    private static final Logger log = Logger.getLogger(Log.class.getName());
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_smEg0() {
        String expected = "org.apache.maven.surefire.api.report.ConsoleOutputCapture$ForwardingPrintStream@777f2e6a";
        Log.log("Hello ", "World");
        assertEquals(expected, System.out.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_WxVd0() {
        Log log = new Log();
        log.trace("Hello", "World");
        assertEquals("com.ibm.websphere.samples.daytrader.util.Log@2f138e96", log.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoTraceTrue_CBMP0() {
        Logger log = Logger.getLogger(Log.class.getName());
        log.setLevel(Level.FINE);
        boolean result = Log.doTrace();
        assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_KKWS0() {
        Log.log("Hello", "World", "Java");
        assertEquals("org.apache.maven.surefire.api.report.ConsoleOutputCapture$ForwardingPrintStream@777f2e6a", System.out.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testError_fYHN0_CZek0() {
    Log.error("message", new Exception("error"));
    assertEquals("message\n\tjava.lang.Exception: error", System.out.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_smEg0_fid1() {
        String expected = "Hello World";
        Log.log("Hello ", "World");
        assertEquals(expected, System.out.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_WxVd0_fid1() {
        Log log = new Log();
        log.trace("Hello", "World");
        assertEquals("trace(Hello(World))", log.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_KKWS0_fid1() {
        Log.log("Hello", "World", "Java");
        assertEquals("HelloWorldJava", System.out.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWarning_xOfj0() {
        Log.warning("This is a warning message");
        assertEquals(Level.WARNING, log.getUseParentHandlers());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDebug_sIIw0() {
        Log.debug("Test message");
        assertEquals(Level.INFO, log.getUseParentHandlers());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLog_AoQZ1_heMP0_fid1() {
    Logger log = Logger.getLogger(Log.class.getName());
    Log.error("Test message", new Exception("Test exception"));
    assertEquals(Level.SEVERE, log.getLevel());
}
}