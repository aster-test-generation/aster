/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuoteData_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRange_OlqL0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(20.0), "ABC");
    quoteData.setRange("1d");
    assertEquals("1d", quoteData.getRange());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_hmaH0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("10.0"), "ABC");
        quoteData.setSymbol("XYZ");
        assertEquals("XYZ", quoteData.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol2_xUnX1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("10.0"), "ABC", new BigDecimal("10.0"), new BigDecimal("10.0"), "Company Name", new Double(100.0), new Double(10.0));
        quoteData.setSymbol("XYZ");
        assertEquals("XYZ", quoteData.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHigh_iYAj0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(20.0), "AAPL");
        quoteData.setHigh(BigDecimal.valueOf(30.0));
        assertEquals(BigDecimal.valueOf(30.0), quoteData.getHigh());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercent_TqEq0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.00), BigDecimal.valueOf(10.00), "symbol");
    quoteData.setGainPercent(BigDecimal.valueOf(5.00));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercentNegative_wcys1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.00), BigDecimal.valueOf(10.00), "symbol");
    quoteData.setGainPercent(BigDecimal.valueOf(-5.00));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyNameWithMinimalParameters_PJKv0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL");
    assertNull(quoteData.getCompanyName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyNameWithAllParameters_EoIi1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "AAPL", new BigDecimal("30.0"), new BigDecimal("40.0"), "Apple Inc", new Double(100.0), new Double(5.0));
        assertEquals("Apple Inc", quoteData.getCompanyName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGain_wWlS0() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "ABC");
    BigDecimal gain = new BigDecimal("5.00");
    quoteData.setGain(gain);
    assertEquals(gain, quoteData.getGain());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_QNJi0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setVolume(10.0);
        assertEquals(10.0, quoteData.getVolume(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithTwoParams_hghB0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("20.0"), "ABC");
        String range = quoteData.getRange();
    assertNull(range);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpen_fCiw0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC");
        quoteData.setOpen(BigDecimal.valueOf(30));
        assertEquals(BigDecimal.valueOf(30), quoteData.getOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenWithHighLow_sAmv1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC", BigDecimal.valueOf(25), BigDecimal.valueOf(15), "Company", 100.0, 5.0);
        quoteData.setOpen(BigDecimal.valueOf(30));
        assertEquals(BigDecimal.valueOf(30), quoteData.getOpen());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrice_orTA0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "symbol");
    BigDecimal result = quoteData.getPrice();
    assertEquals(BigDecimal.valueOf(10.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPriceWithMoreFields_fqGD1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(20.0), "symbol", BigDecimal.valueOf(30.0), BigDecimal.valueOf(40.0), "companyName", 50.0, 60.0);
    BigDecimal result = quoteData.getPrice();
    assertEquals(BigDecimal.valueOf(20.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithFiveParams_MVhJ1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("20.0"), "AAPL", new BigDecimal("30.0"), new BigDecimal("25.0"), "Apple Inc.", 100.0, 5.0);
        BigDecimal gain = quoteData.getGain();
        assertEquals(new BigDecimal("10.00"), gain);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChange_NWYs0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setChange(10.0);
        assertEquals(10.0, quoteData.getChange(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeAgain_vTLf1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        quoteData.setChange(20.0);
        assertEquals(20.0, quoteData.getChange(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpen_UFoX0() {
    BigDecimal open = new BigDecimal("20.0");
    BigDecimal price = new BigDecimal("20.0");
    String symbol = "ABC";
    QuoteData quoteData = new QuoteData(open, price, symbol);
    BigDecimal result = quoteData.getOpen();
    assertEquals(open, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenWithAllParams_RWBH1() {
    BigDecimal open = new BigDecimal("10.0");
    BigDecimal price = new BigDecimal("20.0");
    String symbol = "ABC";
    BigDecimal high = new BigDecimal("30.0");
    BigDecimal low = new BigDecimal("5.0");
    String companyName = "Company Name";
    Double volume = 100.0;
    Double change = 5.0;
    QuoteData quoteData = new QuoteData(open, price, symbol, high, low, companyName, volume, change);
    BigDecimal result = quoteData.getOpen();
    assertEquals(open, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLow2_zyNz1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "ABC", BigDecimal.valueOf(30), BigDecimal.valueOf(40), "Company", 100.0, 5.0);
    BigDecimal low = quoteData.getLow();
    assertEquals(BigDecimal.valueOf(40), low);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithValues_gCwA1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "symbol", BigDecimal.valueOf(30), BigDecimal.valueOf(25), "companyName", 100.0, 5.0);
        assertEquals(5.0, quoteData.getChange(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHighWithAllParams_PKbY1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10), BigDecimal.valueOf(20), "symbol", BigDecimal.valueOf(30), BigDecimal.valueOf(40), "companyName", 100.0, 5.0);
        assertEquals(BigDecimal.valueOf(30), quoteData.getHigh());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_DiDj0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(BigDecimal.ONE);
        assertEquals(BigDecimal.ONE, quoteData.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithOtherFields_hLTa1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        quoteData.setPrice(BigDecimal.ONE);
        assertEquals(BigDecimal.ONE, quoteData.getPrice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithTwoParameters_ywdJ0() {
        BigDecimal price = new BigDecimal("10.0");
        BigDecimal open = new BigDecimal("5.0");
        String symbol = "ABC";
        QuoteData quoteData = new QuoteData(price, open, symbol);
        assertEquals(symbol, quoteData.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithSixParameters_KsuV1() {
        BigDecimal open = new BigDecimal("5.0");
        BigDecimal price = new BigDecimal("10.0");
        String symbol = "ABC";
        BigDecimal high = new BigDecimal("15.0");
        BigDecimal low = new BigDecimal("3.0");
        String companyName = "Company Name";
        Double volume = 100.0;
        Double change = 5.0;
        QuoteData quoteData = new QuoteData(open, price, symbol, high, low, companyName, volume, change);
        assertEquals(symbol, quoteData.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLow_KvCX0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("20.00"), "AAPL");
        quoteData.setLow(new BigDecimal("5.00"));
        assertEquals(new BigDecimal("5.00"), quoteData.getLow());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyName_pQBv0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10.00"), new BigDecimal("10.00"), "AAPL");
        quoteData.setCompanyName("Apple Inc.");
        assertEquals("Apple Inc.", quoteData.getCompanyName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolume_bLhp0() {
    QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
    double volume = quoteData.getVolume();
    assertEquals(0.0, volume);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolumeWithNonNull_GJmn1() {
    QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 10.0, 0.0);
    double volume = quoteData.getVolume();
    assertEquals(10.0, volume);
}
}