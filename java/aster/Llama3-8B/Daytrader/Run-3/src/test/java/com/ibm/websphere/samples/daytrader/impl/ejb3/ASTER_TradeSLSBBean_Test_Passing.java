/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
private EntityManager entityManager;
@Mock
    private EntityManager mockEntityManager;
@InjectMocks
    private TradeSLSBBean tradeslsbbean;
@Mock
    private AccountProfileDataBean accountProfileDataBean;
@Mock
    private AccountDataBean accountDataBean;
@Mock
    private QuoteDataBean quoteDataBean;
@Mock
    private HoldingDataBean holdingDataBean;
@Mock
    private OrderDataBean orderDataBean;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_pROH0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            double result = tradeSLSBBean.investmentReturn(100, 110);
            assertEquals(0.1, result, 0.01);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_jLki0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int result = tradeSLSBBean.getImpl();
        assertEquals(TradeConfig.EJB3, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuyException_amgD3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.buy("userID", "symbol", 1.0, TradeConfig.SYNCH);
        fail("Expected EJBException");
    } catch (EJBException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellInvalidOrderProcessingMode_Ysto2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.sell("userID", 1, 10);
        Assertions.fail("Expected EJBException");
    } catch (EJBException e) {
        Assertions.assertTrue(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellException_wFro3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.sell("userID", 1, TradeConfig.SYNCH);
        Assertions.fail("Expected EJBException");
    } catch (EJBException e) {
        Assertions.assertTrue(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSellNullUserID_poXQ4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.sell(null, 1, TradeConfig.SYNCH);
        Assertions.fail("Expected EJBException");
    } catch (EJBException e) {
        Assertions.assertTrue(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithException_TsNM2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        try {
            tradeSLSBBean.getClosedOrders(userID);
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertEquals("TradeSLSBBean.getClosedOrders - error", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhaseNull_teVp1_jQzn0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase(null);
        assertNull(quoteData);
    } catch (EJBException e) {
        fail("Exception was thrown: " + e.getMessage());
    } catch (Exception e) {
        fail("Exception was thrown: " + e.getMessage());
    }
}
}