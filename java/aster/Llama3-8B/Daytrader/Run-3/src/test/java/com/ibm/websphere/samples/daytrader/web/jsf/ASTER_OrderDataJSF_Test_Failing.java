/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataJSF_Test_Failing {
private TradeServices tradeAction;
private ExternalContext context;
OrderDataJSF orderDataJSF;
HttpSession httpSession;
ExternalContext externalContext;
private OrderData orderData;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getOrderID(), 0);
        assertEquals(orderData.getSymbol(), "");
        assertEquals(orderData.getOrderStatus(), "");
        assertEquals(orderData.getPrice(), BigDecimal.ZERO);
        assertEquals(orderData.getTotal(), BigDecimal.ZERO);
        assertEquals(orderData.getQuantity(), 0.0);
        assertEquals(orderData.getOrderType(), "");
        assertEquals(orderData.getOpenDate(), null);
        assertEquals(orderData.getCompletionDate(), null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getOrderID(), orderDataJSF.getOrderData().getOrderID());
        assertEquals(orderData.getOrderStatus(), orderDataJSF.getOrderData().getOrderStatus());
        assertEquals(orderData.getOpenDate(), orderDataJSF.getOrderData().getOpenDate());
        assertEquals(orderData.getCompletionDate(), orderDataJSF.getOrderData().getCompletionDate());
        assertEquals(orderData.getOrderFee(), orderDataJSF.getOrderData().getOrderFee());
        assertEquals(orderData.getOrderType(), orderDataJSF.getOrderData().getOrderType());
        assertEquals(orderData.getQuantity(), orderDataJSF.getOrderData().getQuantity());
        assertEquals(orderData.getSymbol(), orderDataJSF.getOrderData().getSymbol());
        assertEquals(orderData.getPrice(), orderDataJSF.getOrderData().getPrice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0_1() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getOrderID(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0_2() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getSymbol(), "");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0_3() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getOrderStatus(), "");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0_4() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getPrice(), BigDecimal.ZERO);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0_5() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getTotal(), BigDecimal.ZERO);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0_6() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getQuantity(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0_7() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getOrderType(), "");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0_8() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getOpenDate(), null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderData_deRi0_9() {
        OrderData orderData = orderDataJSF.getOrderData();
        assertEquals(orderData.getCompletionDate(), null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0_1() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getOrderID(), orderDataJSF.getOrderData().getOrderID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0_2() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getOrderStatus(), orderDataJSF.getOrderData().getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0_3() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getOpenDate(), orderDataJSF.getOrderData().getOpenDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0_4() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getCompletionDate(), orderDataJSF.getOrderData().getCompletionDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0_5() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getOrderFee(), orderDataJSF.getOrderData().getOrderFee());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0_6() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getOrderType(), orderDataJSF.getOrderData().getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0_7() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getQuantity(), orderDataJSF.getOrderData().getQuantity());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0_8() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getSymbol(), orderDataJSF.getOrderData().getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderData_qzqZ0_9() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData orderData = new OrderData(1, "Active", new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("10.0"), "Buy", 1.0, "AAPL", new java.math.BigDecimal("100.0"));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData.getPrice(), orderDataJSF.getOrderData().getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllOrderWithException_wZKp1_JLIb0() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    try {
        orderDataJSF.setOrderData(new OrderData(null, null, null, null, new BigDecimal("0"), null, 0, null));
        orderDataJSF.getAllOrder();
        fail("Expected exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllOrder_XulZ0_ONbu0() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    orderDataJSF.setOrderData(new OrderData(null, null, null, null, null, null, 0, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderWithSessionAttribute_KOKK0_vYHX0() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    HttpSession session = mock(HttpSession.class);
    OrderData order = mock(OrderData.class);
    when(session.getAttribute("orderData")).thenReturn(order);
    orderDataJSF.setOrderData(order);
    verify(session).getAttribute("orderData");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderWithoutSessionAttribute_knAt1_nVTG0() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    HttpSession session = mock(HttpSession.class);
    when(session.getAttribute("orderData")).thenReturn(null);
    orderDataJSF.setOrderData(null);
    orderDataJSF.getOrder();
    verify(session).getAttribute("orderData");
    verify(session, times(1)).getAttribute("orderData");
}
}