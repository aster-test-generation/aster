/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockServletContext;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletCDI_Test_Failing {
private static String initTime;
@Mock
    private ServletConfig servletConfig;
@Mock
    private ServletException servletException;
private PingServletCDI pingservletcdi;
@Mock
    private HttpServletResponse httpservletresponse;
@Mock
    private HttpServletRequest httpServletRequest;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        pingservletcdi = new PingServletCDI();
        // Arrange
        when(servletConfig.getServletContext()).thenReturn(new MockServletContext());
        pingservletcdi.init(servletConfig);
        // Assert
        assertEquals(new java.util.Date().toString(), initTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_KLnD0() throws IOException {
        PingServletCDI pingServletCDI = new PingServletCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter pw = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(pw);
        pingServletCDI.doGet(request, response);
        verify(pw).write("html code");
        verify(pw).flush();
        verify(pw).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoGet_aQXa0() throws Exception {
    initTime = "2022-01-01 00:00:00";
    PingServletCDI pingservletcdi = new PingServletCDI();
    PrintWriter printWriter = mock(PrintWriter.class);
    when(httpservletresponse.getWriter()).thenReturn(printWriter);
    pingservletcdi.doGet(httpServletRequest, httpservletresponse);
    verify(printWriter, times(1)).write(anyString());
    verify(printWriter, times(1)).flush();
    verify(printWriter, times(1)).close();
    verify(httpservletresponse, times(1)).setContentType(anyString());
    verify(httpservletresponse, times(1)).getWriter();
}
}