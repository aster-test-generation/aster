/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfigJSF_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTrade_TradeConfig_VbIq14() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_RuntimeMode_zpdI0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.updateConfig();
        assertEquals("DayTrader Configuration Updated", tradeConfigJSF.getResult());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildDatabaseTablesNullDBProductName_HHmU0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.buildDatabaseTables();
        assertEquals("database", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResetTrade_RunStatsDataBean_kxzS13_BIZd0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.buildDatabaseTables();
    verify(new RunStatsDataBean());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_OrderProcessingMode_TWnL1_kEIU0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_WebInterface_lhak2_bJdZ0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables();
    assertEquals("database", tradeConfigJSF.buildDatabaseTables());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_MAX_USERS_yoap3_PjoW0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_PrimIterations_fftD6_oOhE0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(40);
    tradeConfigJSF.updateConfig();
    assertEquals("DayTrader Configuration Updated", tradeConfigJSF.getResult());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_MarketSummaryInterval_OAeG5_TjWV0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables(); // Assuming this method sets the marketSummaryInterval
    assertEquals("database", tradeConfigJSF.buildDatabaseTables());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_OrderProcessingModeNull_tdaV12_ChDw0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.buildDatabaseTables();
    assertEquals("TradeBuildDB: **** Unable to check DB Product name, please check Database/AppServer configuration and retry ****<br/>", tradeConfigJSF.getResult());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_LongRun_jioQ9_KwMM0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.updateConfig();
    assertEquals("database", tradeConfigJSF.buildDatabaseTables());
}
}