/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServletSetContentLength_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_GVjj0() {
        PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
        String expected = "Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.";
        String actual = pingServletSetContentLength.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_sTkO0_bgsI0() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_ZxKh1_brWM0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(req, res);
    verify(req).getParameter("contentLength");
    verify(res).setContentType("text/html");
    verify(res).setStatus(200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPostDoGet_SIiS2_xieL0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(req, res);
    verify(req).getParameter("contentLength");
    verify(res).setContentType("text/html");
    verify(res).setStatus(HttpServletResponse.SC_OK);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetContentType_ZNKQ1_voFL0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetContentLengthValid_boJF3_DoPV0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("contentLength")).thenReturn("100");
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).setContentLength(100);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetOutputStream_rZWI4_uxEU0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).getOutputStream();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetBuffer_xJHP5_qvOG0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).setContentLength(anyInt());
    verify(response, times(1)).getWriter();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetBufferLength_fPDp6_Utde0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("contentLength")).thenReturn("100");
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).setContentLength(100);
    verify(response, times(1)).setContentType("text/html");
    verify(response, times(1)).getWriter();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetBufferLengthZero_LYrc8_cMvs0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("contentLength")).thenReturn("0");
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).setContentLength(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetBufferLengthNegative_qLTR9_TUWA0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("contentLength")).thenReturn("-1");
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).setContentLength(-1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetBufferLengthLarge_nJpe10_LjkX0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("contentLength")).thenReturn("1000000");
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).setContentLength(1000000);
    verify(response, times(1)).getWriter();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetBufferLengthLargeNegative_WMKa11_rEEL0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("contentLength")).thenReturn("-1000000");
    PingServletSetContentLength pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).setContentLength(-1000000);
    verify(response, times(1)).getWriter();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetBufferLengthLarge_nJpe10_LjkX0_fid2() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("contentLength")).thenReturn("1000000");
    PingServletSetContentLength pingServletSetContentLength = mock(PingServletSetContentLength.class);
    pingServletSetContentLength.doGet(request, response);
    verify(response, times(1)).setContentLength(1000000);
    verify(response, times(1)).getWriter();
}
}