/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.drive;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletDrive_Test_Passing {
private static String initTime;
private static int hitCount;
@Mock
    private ServletConfig servletConfig;
@InjectMocks
    private PingServletDrive pingservletdrive;
HttpServletResponse httpservletresponse;
ServletOutputStream servletoutputstream;
HttpServletRequest httprequest;
@Mock
    private HttpServletResponse httpResponse;
@Mock
    private ServletOutputStream servletOutputStream;
@Mock
    private HttpServletRequest httpServletRequest;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception{
        initTime = "2022-01-01 00:00:00";
        hitCount = 0;
        pingservletdrive = new PingServletDrive();
        when(httpResponse.getOutputStream()).thenReturn(servletOutputStream);
        when(httpServletRequest.getMethod()).thenReturn("GET");
        pingservletdrive.doGet(httpServletRequest, httpResponse);
        verify(servletOutputStream).println("html code");
        verify(servletOutputStream).flush();
        verify(servletOutputStream).close();
        assertEquals(1, hitCount);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_lAXl0() {
        PingServletDrive pingServletDrive = new PingServletDrive();
        String result = pingServletDrive.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_RvOW0_1() throws ServletException {
    initTime = null;
    hitCount = 0;
    pingservletdrive = new PingServletDrive();
    pingservletdrive.init(servletConfig);
    verify(servletConfig, times(1)).getServletContext();
    assertEquals(null, initTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_RvOW0_2() throws ServletException {
    initTime = null;
    hitCount = 0;
    pingservletdrive = new PingServletDrive();
    pingservletdrive.init(servletConfig);
    verify(servletConfig, times(1)).getServletContext();
    assertEquals(0, hitCount);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoGet_UIBH0() throws ServletException, IOException {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    ServletOutputStream servletoutputstream = mock(ServletOutputStream.class);
    HttpServletRequest httprequest = mock(HttpServletRequest.class);
    PingServletDrive pingservletdrive = new PingServletDrive();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingservletdrive.doGet(httprequest, httpservletresponse);
    verify(httpservletresponse).setStatus(200);
    verify(servletoutputstream).write(any(byte[].class));
    verify(servletoutputstream).flush();
    verify(servletoutputstream).close();
}
}