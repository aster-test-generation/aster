/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import java.math.BigDecimal;
import java.util.Date;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import java.sql.Date;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
@Mock
    private TradeConfig tradeConfig;
@Mock
    private QuoteDataBean quoteDataBean;
@Mock
    private AccountDataBean accountDataBean;
@Mock
    private HoldingDataBean holdingDataBean;
private OrderDataBean orderDataBean;
@Mock
    private Integer orderID;
@Mock
    private OrderDataBean orderdatabean;
@Mock
    private Log log;
@Mock
    private HoldingDataBean holding;
@Mock
    private QuoteDataBean quote;
@Mock
    private BigDecimal price;
private String symbol;
@Mock
    private AccountDataBean account;
@Mock
    private BigDecimal orderFee;
@Mock
    private Date openDate;
@Mock
    private Date completionDate;
private String orderType;
    private double quantity; /* quantity */
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus() {
        orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        // Arrange
        String expectedOrderStatus = "Open";
        // Act
        String actualOrderStatus = orderDataBean.getOrderStatus();
        // Assert
        assertEquals(expectedOrderStatus, actualOrderStatus);
    }
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus() {
        orderDataBean = new OrderDataBean();
        String expectedOrderStatus = "TestOrderStatus";
        orderDataBean.setOrderStatus(expectedOrderStatus);
        assertEquals(expectedOrderStatus, orderDataBean.getOrderStatus());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_nNdP0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = new BigDecimal("10.00");
        orderDataBean.setPrice(price);
        assertEquals(price, orderDataBean.getPrice());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithExistingPrice_doVe1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = new BigDecimal("10.00");
        orderDataBean.setPrice(price);
        BigDecimal newPrice = new BigDecimal("20.00");
        orderDataBean.setPrice(newPrice);
        assertEquals(newPrice, orderDataBean.getPrice());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNull_qzEl2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setPrice(null);
        assertEquals(null, orderDataBean.getPrice());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithZero_Gnvv3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = new BigDecimal("0.00");
        orderDataBean.setPrice(price);
        assertEquals(price, orderDataBean.getPrice());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_UfHd0() {
        OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        assertEquals("Open", orderDataBean.getOrderStatus());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol() throws Exception{
        symbol = "ABC";
        Mockito.when(quote.getSymbol()).thenReturn(symbol);
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuote(quote);
        assertEquals(symbol, orderdatabean.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderID() throws Exception{
        orderdatabean = new OrderDataBean();
        Mockito.when(orderdatabean.getOrderID()).thenReturn(orderID);
        Integer actualOrderID = orderdatabean.getOrderID();
        assertEquals(orderID, actualOrderID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_dbgX0() {
    OrderDataBean orderDataBean = new OrderDataBean("Buy", "New", new Date(), new Date(), 10.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "AAPL");
    orderDataBean.setOrderStatus("Updated");
    assertEquals("Updated", orderDataBean.getOrderStatus());
}
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_openOrder() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        // Set up the order status to "open"
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("open");
        // Call the isOpen method
        boolean result = orderdatabean.isOpen();
        // Assert that the result is true
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_processingOrder() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        // Set up the order status to "processing"
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("processing");
        // Call the isOpen method
        boolean result = orderdatabean.isOpen();
        // Assert that the result is true
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_closedOrder() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        // Set up the order status to "closed"
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("closed");
        // Call the isOpen method
        boolean result = orderdatabean.isOpen();
        // Assert that the result is false
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_NvkH0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    boolean result = order.equals(order);
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_FZfd1() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    Object obj = new HoldingDataBean(1, 10, new BigDecimal("10.0"), new Date(), new QuoteDataBean("AAPL"));
    boolean result = order.equals(obj);
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentOrderID_UkHX2() {
    OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    OrderDataBean order2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    boolean result = order1.equals(order2);
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNullObject_LdCA3() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    boolean result = order.equals(null);
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentOrder_JUbO4() {
    OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    OrderDataBean order2 = new OrderDataBean("SELL", "OPEN", new Date(), new Date(), 10, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    boolean result = order1.equals(order2);
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_WhenQuoteNotNull_WtYE0() {
    OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 10.0, new BigDecimal("100.0"), new BigDecimal("10.0"), new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("100.0"), new BigDecimal("90.0"), new BigDecimal("110.0"), new BigDecimal("120.0"), 0.0));
    String symbol = orderDataBean.getSymbol();
    assertEquals("AAPL", symbol);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_WhenQuoteNull_gGhu1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    String symbol = orderDataBean.getSymbol();
    assertEquals("", symbol);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString() throws Exception {
        orderdatabean = new OrderDataBean(
                1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "AAPL"
        );
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + orderdatabean.getOpenDate().toString() + "\n\t completionDate: " + orderdatabean.getCompletionDate().toString() + "\n\t       quantity: 10.0\n\t          price: 100.0\n\t       orderFee: 10.0\n\t         symbol: AAPL";
        assertEquals(expected, orderdatabean.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount() throws Exception{
        orderdatabean = new OrderDataBean();
        // Arrange
        AccountDataBean accountMock = Mockito.mock(AccountDataBean.class);
        // Act
        orderdatabean.setAccount(accountMock);
        // Assert
        Mockito.verify(orderdatabean, Mockito.times(1)).setAccount(accountMock);
        Assertions.assertEquals(orderdatabean.getAccount(), accountMock);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenOrder_mbpG0() {
    OrderDataBean order = new OrderDataBean("buy", "open", new Date(), new Date(), 10, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    assertTrue(order.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testProcessingOrder_YWca1() {
    OrderDataBean order = new OrderDataBean("sell", "processing", new Date(), new Date(), 10, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    assertTrue(order.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClosedOrder_TJXj2() {
    OrderDataBean order = new OrderDataBean("sell", "completed", new Date(), new Date(), 10, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    assertFalse(order.isOpen());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_MpPj0() {
        OrderDataBean orderDataBean = new OrderDataBean(Integer.valueOf(1), "BUY", "COMPLETED", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), "AAPL");
        assertEquals(Integer.valueOf(1), orderDataBean.getOrderID());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderIDWithNull_JSQG1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertEquals(null, orderDataBean.getOrderID());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderIDWithDefault_dtYQ2() {
        OrderDataBean orderDataBean = new OrderDataBean(Integer.valueOf(1), "BUY", "COMPLETED", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), "AAPL");
        assertEquals(Integer.valueOf(1), orderDataBean.getOrderID());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderIDWithParameters_dYMc3() {
        OrderDataBean orderDataBean = new OrderDataBean(Integer.valueOf(1), "BUY", "COMPLETED", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(10.0), "AAPL", new AccountDataBean(), new QuoteDataBean("AAPL"), new HoldingDataBean(10.0, BigDecimal.valueOf(100.0), new Date(), new AccountDataBean(), new QuoteDataBean("AAPL")));
        assertEquals(Integer.valueOf(1), orderDataBean.getOrderID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderFee() throws Exception{
        orderdatabean = new OrderDataBean();
        // Arrange
        BigDecimal expectedOrderFee = new BigDecimal("10.00");
        // Act
        orderdatabean.setOrderFee(expectedOrderFee);
        // Assert
        assertEquals(expectedOrderFee, orderdatabean.getOrderFee);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenDate() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOpenDate(openDate);
        // Arrange
        Date expectedOpenDate = new Date();
        // Act
        Date actualOpenDate = orderdatabean.getOpenDate();
        // Assert
        assertEquals(expectedOpenDate, actualOpenDate);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_cbRt0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        orderDataBean.setAccount(accountDataBean);
        assertEquals(accountDataBean, orderDataBean.getAccount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderFee_sBWE0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal("10.00");
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOpenDate() {
        orderdatabean = new OrderDataBean();
        // Arrange
        Date expectedOpenDate = new Date();
        // Act
        orderdatabean.setOpenDate(expectedOpenDate);
        // Assert
        assertEquals(expectedOpenDate, orderdatabean.getOpenDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetHolding() {
        orderdatabean = new OrderDataBean();
        // Arrange
        HoldingDataBean expectedHolding = new HoldingDataBean();
        // Act
        orderdatabean.setHolding(holding);
        // Assert
        assertEquals(expectedHolding, orderdatabean.getHolding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate() {
        MockitoAnnotations.initMocks(this);
        orderdatabean = new OrderDataBean();
        ocompletionDatee;
        // Act
        Date result = orderdatabean.getCompletionDate();
        // Assert
        assertEquals(completionDate, result);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_wrnX0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "COMPLETED", new java.util.Date(), new java.util.Date(), 10.0, new java.math.BigDecimal("10.0"), new java.math.BigDecimal("1.0"), "AAPL");
        String result = order.toString();
        assert result.contains("Order 1");
        assert result.contains("orderType: BUY");
        assert result.contains("orderStatus: COMPLETED");
        assert result.contains("openDate: ");
        assert result.contains("completionDate: ");
        assert result.contains("quantity: 10.0");
        assert result.contains("price: 10.0");
        assert result.contains("orderFee: 1.0");
        assert result.contains("symbol: AAPL");
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullFields_buap1() {
        OrderDataBean order = new OrderDataBean();
        String result = order.toString();
        assert result.contains("Order ");
        assert result.contains("orderType: ");
        assert result.contains("orderStatus: ");
        assert result.contains("openDate: ");
        assert result.contains("completionDate: ");
        assert result.contains("quantity: ");
        assert result.contains("price: ");
        assert result.contains("orderFee: ");
        assert result.contains("symbol: ");
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAllFields_hmNf2() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "COMPLETED", new java.util.Date(), new java.util.Date(), 10.0, new java.math.BigDecimal("10.0"), new java.math.BigDecimal("1.0"), "AAPL", new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID"), new QuoteDataBean("AAPL"), new HoldingDataBean(1, 10.0, new java.math.BigDecimal("10.0"), new java.util.Date(), new AccountDataBean(1, 1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal("100.0"), new java.math.BigDecimal("100.0"), "profileID"), new QuoteDataBean("AAPL")));
        String result = order.toString();
        assert result.contains("Order 1");
        assert result.contains("orderType: BUY");
        assert result.contains("orderStatus: COMPLETED");
        assert result.contains("openDate: ");
        assert result.contains("completionDate: ");
        assert result.contains("quantity: 10.0");
        assert result.contains("price: 10.0");
        assert result.contains("orderFee: 1.0");
        assert result.contains("symbol: AAPL");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenDate_orvn0() {
    OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), null, 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    Date expectedOpenDate = new Date();
    order.setOpenDate(expectedOpenDate);
    assertEquals(expectedOpenDate, order.getOpenDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisSell() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOrderType()).thenReturn("sell");
        boolean result = orderdatabean.isSell();
        Mockito.verify(orderdatabean).getOrderType();
        Assertions.assertTrue(result);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_TUxO0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean(10.0, new BigDecimal("100.0"), new Date(), new AccountDataBean(), new QuoteDataBean("AAPL"));
        orderDataBean.setHolding(holdingDataBean);
        assertEquals(holdingDataBean, orderDataBean.getHolding());
    }
    private String orderType; /* orderType (buy, sell, etc.) */
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol() {
        orderDataBean = new OrderDataBean();
        String expectedSymbol = "ABC";
        orderDataBean.setSymbol(expectedSymbol);
        assertEquals(expectedSymbol, orderDataBean.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception{
        orderdatabean = new OrderDataBean();
        when(orderID.hashCode()).thenReturn(1);
        orderdatabean.setOrderID(orderID);
        int expectedHashCode = 1;
        int actualHashCode = orderdatabean.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_qMpK0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setSymbol("ABC");
        assertEquals("ABC", orderDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolNull_ywwb1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setSymbol(null);
        assertNull(orderDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolEmpty_zNBq2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setSymbol("");
        assertEquals("", orderDataBean.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance1_yXJL0_1() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals("buy", order.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance1_yXJL0_2() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals("open", order.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance1_yXJL0_3() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getOpenDate().getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance1_yXJL0_4() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getCompletionDate().getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance1_yXJL0_5() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndQuantity(), order.getQuantity(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance1_yXJL0_6() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance1_yXJL0_7() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getOrderFee());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance1_yXJL0_8() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals(TradeConfig.rndSymbol(), order.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance2_LkRh1_1() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals("sell", order.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding() throws Exception{
        orderdatabean = new OrderDataBean();
        // Arrange
        orderdatabean.setHolding(holding);
        // Act
        HoldingDataBean result = orderdatabean.getHolding();
        // Assert
        Assertions.assertEquals(holding, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_OrderIDNotNull_VNLJ0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "COMPLETED", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    int result = orderDataBean.hashCode();
    assertEquals(result, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_OrderIDNull_Sujg1() {
    OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "COMPLETED", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    int result = orderDataBean.hashCode();
    assertEquals(result, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancel() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.cancel();
        assertEquals("cancelled", orderdatabean.getOrderStatus());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderID() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        // Arrange
        Integer expectedOrderID = 1;
        // Act
        orderdatabean.setOrderID(expectedOrderID);
        // Assert
        Mockito.verify(orderdatabean).setOrderID(expectedOrderID);
        Assertions.assertEquals(expectedOrderID, orderdatabean.getOrderID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithNoParameter_sMnl2() {
        OrderDataBean order = new OrderDataBean();
        order.print();
        assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceNull_AmTm1() {
        OrderDataBean order = new OrderDataBean();
        assertEquals(null, order.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity() {
        MockitoAnnotations.initMocks(this);
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getQuantity()).thenReturn(10.0);
        double result = orderdatabean.getQuantity();
        Assertions.assertEquals(10.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderFee() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderFee(BigDecimal.valueOf(10.0));
        BigDecimal actual = orderdatabean.getOrderFee();
        BigDecimal expected = BigDecimal.valueOf(10.0);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderType() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        String orderType = "buy";
        orderdatabean.setOrderType(orderType);
        Mockito.verify(orderdatabean).setOrderType(orderType);
        Assertions.assertEquals(orderType, orderdatabean.getOrderType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuantity_kAlh0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "COMPLETED", new Date(), new Date(), 10.0, new BigDecimal(100.0), new BigDecimal(10.0), "AAPL");
    double result = order.getQuantity();
    assertEquals(10.0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID_cvoL0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(1);
        assertEquals(1, orderDataBean.getOrderID().intValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNull_aUfv1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(null);
        assertEquals(null, orderDataBean.getOrderID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithZero_yYTE2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(0);
        assertEquals(0, orderDataBean.getOrderID().intValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNegative_Wlam3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(-1);
        assertEquals(-1, orderDataBean.getOrderID().intValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithLargeNumber_xgse4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(1000000);
        assertEquals(1000000, orderDataBean.getOrderID().intValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuote(quote);
        // Act
        QuoteDataBean result = orderdatabean.getQuote();
        // Assert
        assertEquals(quote, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPrice() throws Exception{
        orderdatabean = new OrderDataBean();
        // Arrange
        BigDecimal expectedPrice = BigDecimal.valueOf(10.00);
        // Act
        orderdatabean.setPrice(expectedPrice);
        // Assert
        assertEquals(expectedPrice, orderdatabean.getPrice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithAccountAndQuote_BZdX1() {
        QuoteDataBean quote = new QuoteDataBean("AAPL");
        AccountDataBean account = new AccountDataBean();
        OrderDataBean order = new OrderDataBean("BUY", "COMPLETED", new java.util.Date(), new java.util.Date(), 10.0, new java.math.BigDecimal("100.0"), new java.math.BigDecimal("5.0"), account, quote, null);
        String result = order.toHTML();
        assertEquals("<BR>Order <B>null</B><LI>      orderType: BUY</LI><LI>    orderStatus: COMPLETED</LI><LI>       openDate: " + order.getOpenDate() + "</LI><LI> completionDate: " + order.getCompletionDate() + "</LI><LI>       quantity: 10.0</LI><LI>          price: 100.0</LI><LI>       orderFee: 5.0</LI><LI>         symbol: AAPL</LI>", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderType_gLKv0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("Test Order Type");
    assertEquals("Test Order Type", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_1() throws Exception{
        orderdatabean = new OrderDataBean();
        // Test when orderID is null
        OrderDataBean other = new OrderDataBean();
        // Test when orderID is different
        orderdatabean.setOrderID(1);
        OrderDataBean other2 = new OrderDataBean();
        other2.setOrderID(2);
        // Test when orderID is the same
        orderdatabean.setOrderID(1);
        OrderDataBean other3 = new OrderDataBean();
        other3.setOrderID(1);
        assertFalse(orderdatabean.equals(other));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_2() throws Exception{
        orderdatabean = new OrderDataBean();
        // Test when orderID is null
        OrderDataBean other = new OrderDataBean();
        // Test when orderID is different
        orderdatabean.setOrderID(1);
        OrderDataBean other2 = new OrderDataBean();
        other2.setOrderID(2);
        // Test when orderID is the same
        orderdatabean.setOrderID(1);
        OrderDataBean other3 = new OrderDataBean();
        other3.setOrderID(1);
        assertFalse(orderdatabean.equals(other2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_3() throws Exception{
        orderdatabean = new OrderDataBean();
        // Test when orderID is null
        OrderDataBean other = new OrderDataBean();
        // Test when orderID is different
        orderdatabean.setOrderID(1);
        OrderDataBean other2 = new OrderDataBean();
        other2.setOrderID(2);
        // Test when orderID is the same
        orderdatabean.setOrderID(1);
        OrderDataBean other3 = new OrderDataBean();
        other3.setOrderID(1);
        assertTrue(orderdatabean.equals(other3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderType() throws Exception{
        orderType = "buy";
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOrderType()).thenReturn(orderType);
        assertEquals(orderType, orderdatabean.getOrderType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("completed");
        boolean result = orderdatabean.isCompleted();
        Mockito.verify(orderdatabean, Mockito.times(1)).getOrderStatus();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotCompleted() throws Exception {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("completed");
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("open");
        boolean result = orderdatabean.isCompleted();
        Mockito.verify(orderdatabean, Mockito.times(1)).getOrderStatus();
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled() throws Exception {
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOrderStatus()).thenReturn("completed");
        boolean result = orderdatabean.isCompleted();
        Mockito.verify(orderdatabean, Mockito.times(1)).getOrderStatus();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote() {
        orderdatabean = new OrderDataBean();
        // Arrange
        String symbol = "ABC";
        BigDecimal price = BigDecimal.valueOf(100);
        // Act
        orderdatabean.setQuote(quote);
        // Assert
        Mockito.verify(quote, Mockito.times(1)).setSymbol(symbol);
        Mockito.verify(quote, Mockito.times(1)).setPrice(price);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSellTrue_qPaa0() {
    OrderDataBean orderDataBean = new OrderDataBean("sell", "sell", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), null, null, null);
    boolean result = orderDataBean.isSell();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSellFalse_GCqW1() {
    OrderDataBean orderDataBean = new OrderDataBean("buy", "buy", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), null, null, null);
    boolean result = orderDataBean.isSell();
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetQuantity() {
        orderdatabean = Mockito.mock(OrderDataBean.class);
        double quantity = 10.0;
        orderdatabean.setQuantity(quantity);
        Mockito.verify(orderdatabean).setQuantity(quantity);
        assertEquals(quantity, orderdatabean.getQuantity(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDateWithNull_Jygg1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Date openDate = orderDataBean.getOpenDate();
        assertEquals(null, openDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDateWithID_Yxcm3() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
        Date openDate = orderDataBean.getOpenDate();
        assertEquals(new Date(), openDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisBuy() throws Exception{
        orderdatabean = Mockito.mock(OrderDataBean.class);
        Mockito.when(orderdatabean.getOrderType()).thenReturn("buy");
        boolean result = orderdatabean.isBuy();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_qAgC0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
        orderDataBean.setQuote(quoteDataBean);
        assertEquals(quoteDataBean, orderDataBean.getQuote());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCompletionDate() {
        MockitoAnnotations.initMocks(this);
        orderdatabean = new OrderDataBean();
        Date expectedDate = new Date();
        orderdatabean.setCompletionDate(expectedDate);
        assertEquals(expectedDate, orderdatabean.getCompletionDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccount() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        assertEquals(account, orderdatabean.getAccount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_Pljl0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(10.0);
        assertEquals(10.0, orderDataBean.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeValue_PDig1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(-10.0);
        assertEquals(-10.0, orderDataBean.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithZeroValue_YZcm2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(0.0);
        assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCancelled() throws Exception{
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("cancelled");
        boolean result = orderdatabean.isCancelled();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisNotCancelled() throws Exception{
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("cancelled");
        orderdatabean.setOrderStatus("open");
        boolean result = orderdatabean.isCancelled();
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPriceWithNull_qzEl2_zVHn0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    assertEquals(null, accountDataBean.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderStatus_UfHd0_XvBg0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    assertEquals(null, orderDataBean.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_jdhg0() {
    AccountDataBean account = new AccountDataBean();
    String expectedProfileID = "TestProfileID";
    assertEquals(expectedProfileID, account.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_NvkH0_mzLG0() {
    AccountDataBean account = new AccountDataBean();
    boolean result = account.equals(account);
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisOpen_processingOrder_bnpi0() throws Exception{
    OrderDataBean orderdatabean = new OrderDataBean(); 
    Mockito.when(orderdatabean.getOrderStatus()).thenReturn("processing");
    boolean result = "processing".equals(orderdatabean.getOrderStatus()); 
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenOrder_mbpG0_lhFH0_1() {
    OrderDataBean order = new OrderDataBean(Integer.valueOf(1), "buy", "open", new Date(), new Date(), 10, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    assertEquals("buy", order.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenOrder_mbpG0_lhFH0_2() {
    OrderDataBean order = new OrderDataBean(Integer.valueOf(1), "buy", "open", new Date(), new Date(), 10, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    assertEquals("open", order.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_dbgX0_aoGO0_1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    AccountDataBean accountDataBean = new AccountDataBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("New");
    orderDataBean.setOrderStatus("Updated");
    orderDataBean.setOrderStatus("Cancelled");
    orderDataBean.setOrderStatus("Filled");
    orderDataBean.setOrderStatus("Expired");
    orderDataBean.setOrderStatus("Rejected");
    assertEquals("New", orderDataBean.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_dbgX0_aoGO0_2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    AccountDataBean accountDataBean = new AccountDataBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("New");
    orderDataBean.setOrderStatus("Updated");
    orderDataBean.setOrderStatus("Cancelled");
    orderDataBean.setOrderStatus("Filled");
    orderDataBean.setOrderStatus("Expired");
    orderDataBean.setOrderStatus("Rejected");
    assertEquals("Updated", orderDataBean.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_dbgX0_aoGO0_3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    AccountDataBean accountDataBean = new AccountDataBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("New");
    orderDataBean.setOrderStatus("Updated");
    orderDataBean.setOrderStatus("Cancelled");
    orderDataBean.setOrderStatus("Filled");
    orderDataBean.setOrderStatus("Expired");
    orderDataBean.setOrderStatus("Rejected");
    assertEquals("Cancelled", orderDataBean.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_dbgX0_aoGO0_4() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    AccountDataBean accountDataBean = new AccountDataBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("New");
    orderDataBean.setOrderStatus("Updated");
    orderDataBean.setOrderStatus("Cancelled");
    orderDataBean.setOrderStatus("Filled");
    orderDataBean.setOrderStatus("Expired");
    orderDataBean.setOrderStatus("Rejected");
    assertEquals("Filled", orderDataBean.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_dbgX0_aoGO0_5() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    AccountDataBean accountDataBean = new AccountDataBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("New");
    orderDataBean.setOrderStatus("Updated");
    orderDataBean.setOrderStatus("Cancelled");
    orderDataBean.setOrderStatus("Filled");
    orderDataBean.setOrderStatus("Expired");
    orderDataBean.setOrderStatus("Rejected");
    assertEquals("Expired", orderDataBean.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderStatus_dbgX0_aoGO0_6() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    AccountDataBean accountDataBean = new AccountDataBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("New");
    orderDataBean.setOrderStatus("Updated");
    orderDataBean.setOrderStatus("Cancelled");
    orderDataBean.setOrderStatus("Filled");
    orderDataBean.setOrderStatus("Expired");
    orderDataBean.setOrderStatus("Rejected");
    assertEquals("Rejected", orderDataBean.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderIDWithNull_JSQG1_oLOT0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    assertEquals(null, orderDataBean.getOrderID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetAccount_Serx0() throws Exception{
    OrderDataBean orderdatabean = new OrderDataBean();
    AccountDataBean accountMock = new AccountDataBean();
    orderdatabean.setAccount(accountMock);
    Mockito.verify(orderdatabean, Mockito.times(1)).setAccount(Mockito.eq(accountMock));
    Mockito.verifyNoMoreInteractions(orderdatabean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetOrderFee_aWio0() throws Exception{
    OrderDataBean orderdatabean = new OrderDataBean();
    BigDecimal expectedOrderFee = new BigDecimal(10.00);
    orderdatabean.setOrderFee(expectedOrderFee);
    assertEquals(expectedOrderFee.doubleValue(), orderdatabean.getOrderFee().doubleValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetOpenDate_etHp0() {
    OrderDataBean orderdatabean = new OrderDataBean();
    Date expectedOpenDate = new java.util.Date();
    orderdatabean.setOpenDate(expectedOpenDate);
    assertEquals(expectedOpenDate, orderdatabean.getOpenDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetOpenDate_CEyf0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Date expectedOpenDate = new java.sql.Date(0);
    accountDataBean.setLastLogin(expectedOpenDate);
    Date actualOpenDate = accountDataBean.getLastLogin();
    assertEquals(actualOpenDate, expectedOpenDate);
}
@Test
public void testSetOrderFee_sBWE0_Oifs0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(10.00); 
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee.doubleValue(), orderDataBean.getOrderFee().doubleValue(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenDate_orvn0_wjuf0() {
    OrderDataBean order = new OrderDataBean();
    java.sql.Date expectedOpenDate = new java.sql.Date(new java.util.Date().getTime());
    order.setOpenDate(expectedOpenDate);
    assertEquals(expectedOpenDate, order.getOpenDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccount_cbRt0_bECQ1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean(); 
    orderDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean, orderDataBean.getAccount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCompletionDate_qzHa0() {
    MockitoAnnotations.initMocks(this);
    OrderDataBean orderDataBean = new OrderDataBean(Integer.valueOf(0), "BUY", "OPEN", new Date(), null, 0.0, BigDecimal.ZERO, BigDecimal.ZERO, "ABC");
    Date completionDate = new Date();
    orderDataBean.setCompletionDate(completionDate);
    assertEquals(completionDate, orderDataBean.getCompletionDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHolding_TUxO0_nFsE0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean(10.0, new BigDecimal("100.0"), new Date(), null, null);
    orderDataBean.setHolding(holdingDataBean);
    assertEquals(holdingDataBean, orderDataBean.getHolding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testtoHTML_wWgq0() throws Exception{
    OrderDataBean orderdatabean = new OrderDataBean(Integer.valueOf(1), "Buy", "Open", new Date(), new Date(), 10.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    String expected = "<BR>Order <B>1</B>" + "<LI>      orderType: Buy</LI>" + "<LI>    orderStatus: Open</LI>" + "<LI>       openDate: " + orderdatabean.getOpenDate() + "</LI>" + "<LI> completionDate: " + orderdatabean.getCompletionDate() + "</LI>" + "<LI>       quantity: 10.0</LI>" + "<LI>          price: 10.0</LI>" + "<LI>       orderFee: 1.0</LI>" + "<LI>         symbol: AAPL</LI>";
    assertEquals(expected, orderdatabean.toHTML());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSymbol_qMpK0_YEyJ0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("ABC");
    assertEquals("ABC", quoteDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSymbolEmpty_zNBq2_bjBu0() {
    AccountDataBean accountDataBean = new AccountDataBean();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrintWithAccountAndQuote_TSvN1_Avdo0() {
    Date openDate = new Date();
    Date completionDate = new Date();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("symbol");
    HoldingDataBean holding = new HoldingDataBean(1.0, BigDecimal.valueOf(1.0), openDate, account, quote);
    OrderDataBean order = new OrderDataBean(Integer.valueOf(1), "orderType", "orderStatus", openDate, completionDate, 1.0, BigDecimal.valueOf(1.0), BigDecimal.valueOf(1.0), "symbol");
    order.print();
    assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNotCompleted_FTrF0() throws Exception {
    OrderDataBean orderdatabean = Mockito.mock(OrderDataBean.class);
    Mockito.when(orderdatabean.getOrderStatus()).thenReturn("open");
    boolean result = !orderdatabean.isCompleted(); // This line is incorrect
    Mockito.verify(orderdatabean, Mockito.times(1)).getOrderStatus();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSymbolNull_ywwb1_OXrX1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setQuote(new QuoteDataBean(null));
    QuoteDataBean quote = holdingDataBean.getQuote();
    assertEquals(null, quote.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_HUDV0() throws Exception{
    AccountDataBean accountDataBean = new AccountDataBean();
    int expectedHashCode = 0; // default hashCode
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenDate_BFVi0_hEQu0() {
    OrderDataBean orderDataBean = new OrderDataBean(Integer.valueOf(1), "Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    Date openDate = orderDataBean.getOpenDate();
    assertEquals(new Date(), openDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_KBUN0_WQcF0() {
    OrderDataBean order = new OrderDataBean(Integer.valueOf(null), "BUY", "COMPLETED", new java.util.Date(), new java.util.Date(), 10.0, new java.math.BigDecimal("100.0"), new java.math.BigDecimal("5.0"), "AAPL");
    String result = order.toHTML();
    assertEquals("<BR>Order <B>null</B><LI>      orderType: BUY</LI><LI>    orderStatus: COMPLETED</LI><LI>       openDate: " + order.getOpenDate() + "</LI><LI> completionDate: " + order.getCompletionDate() + "</LI><LI>       quantity: 10.0</LI><LI>          price: 100.0</LI><LI>       orderFee: 5.0</LI><LI>         symbol: AAPL</LI>", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenDateWithAccountID_qWoE4_qOpa0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    OrderDataBean orderDataBean = new OrderDataBean("Buy", "Open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), accountDataBean, quoteDataBean, holdingDataBean);
    Date openDate = orderDataBean.getOpenDate();
    assertEquals(new Date(), openDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompletedCancelled_pGBj2_zlSH0() {
    OrderDataBean order = new OrderDataBean(Integer.valueOf(0), "cancelled", "completed", new Date(), new Date(), 1, new BigDecimal(10), new BigDecimal(1), "AAPL");
    boolean result = order.isCompleted();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompletedCompleted_lyVy0_sYVV0() {
    OrderDataBean order = new OrderDataBean(Integer.valueOf(0), "completed", "completed", new Date(), new Date(), 1, new BigDecimal(10), new BigDecimal(1), "AAPL");
    boolean result = order.isCompleted();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBuyTrue_svmu0_osLI0() {
    OrderDataBean order = new OrderDataBean(Integer.valueOf(1), "buy", "open", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    boolean result = order.isBuy();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompletionDate_Liou0_gAkV0() {
    OrderDataBean order = new OrderDataBean(Integer.valueOf(0), "Buy", "Open", new Date(), null, 10.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "AAPL");
    Date completionDate = new Date();
    order.setCompletionDate(completionDate);
    assertEquals(completionDate, order.getCompletionDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCancelledWhenOrderStatusIsCancelled_OQui0_BgDw0() {
    OrderDataBean orderDataBean = new OrderDataBean(Integer.valueOf(0), "cancelled", "cancelled", new Date(), new Date(), 1.0, new BigDecimal("10.0"), new BigDecimal("1.0"), "AAPL");
    boolean result = orderDataBean.isCancelled();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullFields_buap1_sGev0_1() {
    HoldingDataBean holding = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    AccountDataBean account = new AccountDataBean();
    OrderDataBean order = new OrderDataBean();
    String result = order.toString();
    assertEquals("Order [orderID=null, orderType=null, orderStatus=null, openDate=null, completionDate=null, quantity=0.0, price=0.0, orderFee=0.0, symbol=null]", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullFields_buap1_sGev0_2() {
    HoldingDataBean holding = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    AccountDataBean account = new AccountDataBean();
    OrderDataBean order = new OrderDataBean();
    String result = order.toString();
    assertTrue(result.contains("orderType: null"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullFields_buap1_sGev0_3() {
    HoldingDataBean holding = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    AccountDataBean account = new AccountDataBean();
    OrderDataBean order = new OrderDataBean();
    String result = order.toString();
    assertTrue(result.contains("orderStatus: null"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullFields_buap1_sGev0_4() {
    HoldingDataBean holding = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    AccountDataBean account = new AccountDataBean();
    OrderDataBean order = new OrderDataBean();
    String result = order.toString();
    assertTrue(result.contains("openDate: null"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullFields_buap1_sGev0_5() {
    HoldingDataBean holding = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    AccountDataBean account = new AccountDataBean();
    OrderDataBean order = new OrderDataBean();
    String result = order.toString();
    assertTrue(result.indexOf("quantity: 0.0") != -1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullFields_buap1_sGev0_6() {
    HoldingDataBean holding = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    AccountDataBean account = new AccountDataBean();
    OrderDataBean order = new OrderDataBean();
    String result = order.toString();
    assertNotEquals("symbol: ", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_wrnX0_dIOT0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "COMPLETED", new java.util.Date(), new java.util.Date(), 10.0, new java.math.BigDecimal("10.0"), new java.math.BigDecimal("1.0"), "AAPL");
    String result = order.toString();
    assertEquals("OrderDataBean(orderID=1, orderType=BUY, orderStatus=COMPLETED, openDate=" + order.getOpenDate() + ", completionDate=" + order.getCompletionDate() + ", quantity=10.0, price=10.0, orderFee=1.0, symbol=AAPL)", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance1_yXJL0() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals("buy", order.getOrderType());
    assertEquals("open", order.getOrderStatus());
    assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getOpenDate().getTime());
    assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getCompletionDate().getTime());
    assertEquals(TradeConfig.rndQuantity(), order.getQuantity(), 0.0);
    assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getPrice());
    assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getOrderFee());
    assertEquals(TradeConfig.rndSymbol(), order.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance2_LkRh1() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertEquals("sell", order.getOrderType());
    assertEquals("open", order.getOrderStatus());
    assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getOpenDate().getTime());
    assertEquals(TradeConfig.rndInt(Integer.MAX_VALUE), order.getCompletionDate().getTime());
    assertEquals(TradeConfig.rndQuantity(), order.getQuantity(), 0.0);
    assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getPrice());
    assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getOrderFee());
    assertEquals(TradeConfig.rndSymbol(), order.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception{
        orderdatabean = new OrderDataBean();
        // Test when orderID is null
        OrderDataBean other = new OrderDataBean();
        assertFalse(orderdatabean.equals(other));
        // Test when orderID is different
        orderdatabean.setOrderID(1);
        OrderDataBean other2 = new OrderDataBean();
        other2.setOrderID(2);
        assertFalse(orderdatabean.equals(other2));
        // Test when orderID is the same
        orderdatabean.setOrderID(1);
        OrderDataBean other3 = new OrderDataBean();
        other3.setOrderID(1);
        assertTrue(orderdatabean.equals(other3));
    }
}