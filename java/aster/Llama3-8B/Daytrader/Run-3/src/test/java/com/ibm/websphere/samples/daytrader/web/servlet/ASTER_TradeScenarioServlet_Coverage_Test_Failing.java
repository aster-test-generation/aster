/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.Enumeration;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeScenarioServlet_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_wmEI0() {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        String expected = "TradeScenarioServlet emulates a population of web users";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_GetInitParameterNames_uwBq1() throws ServletException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        when(config.getInitParameterNames()).thenReturn(mock(Enumeration.class));
        servlet.init(config);
        verify(config).getInitParameterNames();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_HasMoreElements_KNLk2() throws ServletException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        Enumeration<String> en = mock(Enumeration.class);
        when(config.getInitParameterNames()).thenReturn(en);
        servlet.init(config);
        verify(en).hasMoreElements();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_GetNextElement_FJYs3() throws ServletException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        Enumeration<String> en = mock(Enumeration.class);
        when(config.getInitParameterNames()).thenReturn(en);
        when(en.nextElement()).thenReturn("parm");
        servlet.init(config);
        verify(en).nextElement();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_GetInitParameter_orVq4() throws ServletException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        Enumeration<String> en = mock(Enumeration.class);
        when(config.getInitParameterNames()).thenReturn(en);
        when(en.nextElement()).thenReturn("parm");
        when(config.getInitParameter("parm")).thenReturn("value");
        servlet.init(config);
        verify(config).getInitParameter("parm");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_bJOi0_tlIe0() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_jpHa1_vTpn0() throws ServletException, IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("action")).thenReturn("n");
    PrintWriter writer = mock(PrintWriter.class);
    when(response.getWriter()).thenReturn(writer);
    tradeScenarioServlet.performTask(request, response);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPostWithException_gpFT2_uQjr0() throws ServletException, IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("action")).thenReturn("n");
    PrintWriter writer = mock(PrintWriter.class);
    when(response.getWriter()).thenReturn(writer);
    try {
        tradeScenarioServlet.performTask(request, response);
        fail("Expected ServletException or IOException");
    } catch (ServletException | IOException e) {
    }
}
}