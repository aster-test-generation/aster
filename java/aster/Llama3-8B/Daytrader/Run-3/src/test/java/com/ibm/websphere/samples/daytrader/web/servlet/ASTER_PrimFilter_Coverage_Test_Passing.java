/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PrimFilter_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_Ttsd0() throws ServletException {
        PrimFilter primFilter = new PrimFilter();
        FilterConfig filterConfig = mock(FilterConfig.class);
        primFilter.init(filterConfig);
        verify(filterConfig).getServletContext();
        verify(filterConfig).getServletContext().getContextPath();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFilterConfigIsNull_MCgG0() throws IOException, ServletException {
        PrimFilter primFilter = new PrimFilter();
        ServletRequest req = mock(ServletRequest.class);
        ServletResponse resp = mock(ServletResponse.class);
        FilterChain chain = mock(FilterChain.class);
        primFilter.doFilter(req, resp, chain);
        verifyNoMoreInteractions(req, resp, chain);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testChainDoFilterFail_dyKS4_taTg0() throws IOException, ServletException {
    PrimFilter primFilter = new PrimFilter();
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    doThrow(new ServletException()).when(chain).doFilter(req, resp);
    primFilter.doFilter(req, resp, chain);
    verifyNoMoreInteractions(req, resp, chain);
}
}