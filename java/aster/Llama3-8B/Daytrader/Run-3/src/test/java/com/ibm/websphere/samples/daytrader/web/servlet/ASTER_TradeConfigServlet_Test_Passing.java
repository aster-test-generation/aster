/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirectDBUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockServletContext;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Passing {
@Mock
    ServletConfig servletConfig;
@Mock
    HttpServlet httpServlet;
TradeConfigServlet tradeConfigServlet;
private TradeDirectDBUtils dbUtils;
@Mock
    private HttpServletResponse httpservletresponse;
@Mock
    private HttpServletRequest httpservletrequest;
@Mock
    private ServletConfig servletconfig;
@Mock
    private HttpServlet httpservlet;
@Mock
    private TradeConfigServlet tradeconfigservlet;
@Mock
    private HttpServletRequest httpServletRequest;
@Mock
    private HttpServletResponse httpServletResponse;
@Mock
    private TradeConfig tradeConfig;
@Mock
    private RunStatsDataBean runStatsData;
@Mock
    private TradeConfig tradeconfig;
@Mock
    private Log log;
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_dvPb0() {
        tradeConfigServlet = new TradeConfigServlet();
        MockitoAnnotations.initMocks(this);
    }
@Test
    public void testDoConfigUpdate_LMcq1() throws Exception {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testService_ResetTrade_mToq0() throws Exception {
    TradeDirectDBUtils dbUtils = mock(TradeDirectDBUtils.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("action")).thenReturn("resetTrade");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    verify(dbUtils, times(0)).buildDB(any(), any());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testService_BuildDB_hxnk0() throws Exception {
    dbUtils = mock(TradeDirectDBUtils.class);
    httpservletresponse = mock(HttpServletResponse.class);
    httpservletrequest = mock(HttpServletRequest.class);
    servletConfig = mock(ServletConfig.class);
    tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("action")).thenReturn("buildDB");
    when(servletConfig.getServletContext()).thenReturn(new MockServletContext());
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
}
}