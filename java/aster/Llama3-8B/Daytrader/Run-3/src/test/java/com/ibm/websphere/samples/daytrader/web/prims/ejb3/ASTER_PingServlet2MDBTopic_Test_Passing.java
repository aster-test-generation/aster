/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.io.IOException;
import javax.jms.ConnectionFactory;
import javax.jms.Topic;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBTopic_Test_Passing {
private static String initTime;
private static int hitCount;
@Mock
    private ServletConfig config;
@InjectMocks
    private PingServlet2MDBTopic pingservlet2mdbtopic;
HttpServletResponse httpservletresponse;
HttpServletRequest httprequest;
HttpServlet httpservlet;
private ConnectionFactory topicConnectionFactory;
private Topic tradeStreamerTopic;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws ServletException, IOException {
        httpservletresponse = mock(HttpServletResponse.class);
        httprequest = mock(HttpServletRequest.class);
        httpservlet = mock(HttpServlet.class);
        pingservlet2mdbtopic = new PingServlet2MDBTopic();
        // Given
        when(httprequest.getMethod()).thenReturn("POST");
        // When
        pingservlet2mdbtopic.doPost(httprequest, httpservletresponse);
        // Then
        verify(httpservletresponse, times(1)).sendRedirect(any(String.class));
        verify(httpservletresponse, times(1)).setStatus(HttpServletResponse.SC_OK);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_fzcw0() {
        PingServlet2MDBTopic pingServlet2MDBTopic = new PingServlet2MDBTopic();
        String result = pingServlet2MDBTopic.getServletInfo();
        assertEquals("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_fnBV0_1() throws ServletException {
    MockitoAnnotations.initMocks(this);
    pingservlet2mdbtopic.init(config);
    Mockito.verify(config, Mockito.times(1)).getServletContext();
    assertEquals(0, hitCount); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_fnBV0_2() throws ServletException {
    MockitoAnnotations.initMocks(this);
    pingservlet2mdbtopic.init(config);
    Mockito.verify(config, Mockito.times(1)).getServletContext();
    assertEquals(0L, initTime); }
}