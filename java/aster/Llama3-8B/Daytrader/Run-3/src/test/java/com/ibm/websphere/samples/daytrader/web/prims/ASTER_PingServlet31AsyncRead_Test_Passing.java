/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31AsyncRead_Test_Passing {
private static String initTime;
private static int hitCount;
@Mock
    private ServletConfig servletConfig;
@InjectMocks
    private PingServlet31AsyncRead pingservlet31asyncread;
HttpServletResponse httpservletresponse;
HttpServletRequest httpservletrequest;
ServletInputStream servletinputstream;
HttpServlet httpservlet;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletinputstream = mock(ServletInputStream.class);
        pingservlet31asyncread = new PingServlet31AsyncRead();
        when(httpservletrequest.getMethod()).thenReturn("GET");
        when(httpservletrequest.getInputStream()).thenReturn(servletinputstream);
        when(httpservletresponse.getStatus()).thenReturn(HttpServletResponse.SC_OK);
        pingservlet31asyncread.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setStatus(HttpServletResponse.SC_OK);
        verify(httpservletresponse).flushBuffer();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_Fyte0() throws ServletException, IOException {
        PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
        HttpServletRequest req = null;
        HttpServletResponse res = null;
        servlet.doPost(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_NScn0() {
        PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_pIOD0_1() throws ServletException {
    MockitoAnnotations.initMocks(this);
    pingservlet31asyncread.init(servletConfig);
    Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
    assertEquals(0, initTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_pIOD0_2() throws ServletException {
    MockitoAnnotations.initMocks(this);
    pingservlet31asyncread.init(servletConfig);
    Mockito.verify(servletConfig, Mockito.times(1)).getServletContext();
    assertEquals(0, servletConfig.getInitParameter("hitCount"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoPost_fTaq0() throws Exception {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    ServletInputStream servletinputstream = mock(ServletInputStream.class);
    HttpServlet httpservlet = mock(HttpServlet.class);
    PingServlet31AsyncRead pingservlet31asyncread = new PingServlet31AsyncRead();
    when(httpservletrequest.startAsync()).thenReturn(mock(AsyncContext.class));
    when(httpservletrequest.getInputStream()).thenReturn(servletinputstream);
    when(servletinputstream.isReady()).thenReturn(true);
    when(servletinputstream.isFinished()).thenReturn(false);
    pingservlet31asyncread.doPost(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(httpservletrequest).startAsync();
}
}