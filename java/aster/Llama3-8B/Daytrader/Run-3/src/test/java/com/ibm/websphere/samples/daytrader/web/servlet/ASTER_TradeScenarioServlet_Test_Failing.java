/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeScenarioServlet_Test_Failing {
TradeScenarioServlet tradescenarioservlet;
HttpServlet httpservlet;
ServletConfig servletconfig;
HttpServletResponse httpservletresponse;
HttpServletRequest httpservletrequest;
HttpSession httpsession;
ServletContext servletcontext;
private static String tasPathPrefix = "/app?action=";
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_aAtu0() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response, times(1)).getWriter();
        PrintWriter writer = response.getWriter();
        assertEquals("performTask(request, response);", writer.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_egZv0() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
        verify(request).getParameter("param");
        verify(response).getWriter();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_dSvy0() {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        String result = servlet.getServletInfo();
        assertEquals("TradeScenarioServlet emulates a population of web users", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPerformTask_loginAction_UaXd0() throws ServletException, IOException {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    ServletConfig servletconfig = mock(ServletConfig.class);
    HttpSession httpsession = mock(HttpSession.class);
    ServletContext servletcontext = mock(ServletContext.class);
    TradeScenarioServlet tradescenarioservlet = new TradeScenarioServlet();
    when(httpservletrequest.getParameter("action")).thenReturn("l");
    tradescenarioservlet.performTask(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(servletcontext).getRequestDispatcher(anyString());
    verify(servletcontext, times(1)).getRequestDispatcher(anyString());
    verify(httpservletresponse, times(1)).sendError(500, "trade_client.TradeScenarioServlet.service(...): erorr creating and writing to PrintStream created from response.getOutputStream()");
    verify(httpservletresponse, times(1)).sendError(500, "trade_client.TradeScenarioServlet.service(...): erorr creating and writing to PrintStream created from response.getOutputStream()");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPerformTask_nAction_WMCI0_dWxb0() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    PrintWriter printWriter = mock(PrintWriter.class);
    when(resp.getWriter()).thenReturn(printWriter);
    verify(printWriter).println("<HTML><HEAD>TradeScenarioServlet</HEAD><BODY>Hello</BODY></HTML>");
    verify(printWriter).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPerformTask_aAction_Wspj0() throws ServletException, IOException {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    ServletConfig servletconfig = mock(ServletConfig.class);
    HttpSession httpsession = mock(HttpSession.class);
    ServletContext servletcontext = mock(ServletContext.class);
    TradeScenarioServlet tradescenarioservlet = new TradeScenarioServlet();
    when(httpservletrequest.getParameter("action")).thenReturn("a");
    tradescenarioservlet.performTask(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(servletcontext).getRequestDispatcher(tasPathPrefix + "account");
    verify(servletcontext).getRequestDispatcher(tasPathPrefix + "account").include(httpservletrequest, httpservletresponse);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPerformTask_bAction_pikU0() throws ServletException, IOException {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    ServletConfig servletconfig = mock(ServletConfig.class);
    HttpSession httpsession = mock(HttpSession.class);
    ServletContext servletcontext = mock(ServletContext.class);
    TradeScenarioServlet tradescenarioservlet = new TradeScenarioServlet();
    when(httpservletrequest.getParameter("action")).thenReturn("b");
    tradescenarioservlet.performTask(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).sendError(500, "trade_client.TradeScenarioServlet.service(...): erorr creating and writing to PrintStream created from response.getOutputStream()");
    verify(servletcontext).getRequestDispatcher(anyString());
    verify(servletcontext, times(2)).getRequestDispatcher(anyString()).include(httpservletrequest, httpservletresponse);
}
}