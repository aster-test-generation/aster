/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObject_Test_Passing {
private static String initTime;
private static int hitCount;
@Mock
    private ServletConfig servletConfig;
@InjectMocks
    private PingJSONPObject pingjsonpobject;
HttpServletResponse httpservletresponse;
ServletOutputStream servletoutputstream;
HttpServletRequest httprequest;
HttpServlet httpservlet;
@Mock
    private HttpServletResponse httpResponse;
@Mock
    private ServletOutputStream servletOutputStream;
@Mock
    private HttpServletRequest httpServletRequest;
@Mock
    private PingJSONPObject pingJSONPObject;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_1() throws ServletException {
        initTime = null;
        hitCount = 0;
        pingjsonpobject = new PingJSONPObject();
        // Act
        pingjsonpobject.init(servletConfig);
        // Assert
        assertEquals(new java.util.Date().toString(), initTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_2() throws ServletException {
        initTime = null;
        hitCount = 0;
        pingjsonpobject = new PingJSONPObject();
        // Act
        pingjsonpobject.init(servletConfig);
        // Assert
        assertEquals(0, hitCount);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_wzyF0() {
        PingJSONPObject pingJSONPObject = new PingJSONPObject();
        String result = pingJSONPObject.getServletInfo();
        assertEquals("Basic JSON generation and parsing in a servlet", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_cAhJ0() {
        pingJSONPObject = new PingJSONPObject();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoPost_LIKe0() throws Exception {
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    ServletOutputStream servletoutputstream = mock(ServletOutputStream.class);
    HttpServletRequest httprequest = mock(HttpServletRequest.class);
    HttpServlet httpservlet = mock(HttpServlet.class);
    PingJSONPObject pingjsonpobject = new PingJSONPObject();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    when(httprequest.getMethod()).thenReturn("POST");
    pingjsonpobject.doPost(httprequest, httpservletresponse);
    verify(httpservletresponse).setStatus(200);
    verify(servletoutputstream).write("Hello, World!".getBytes());
    verify(servletoutputstream).flush();
    verify(servletoutputstream).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void flush_lyIN1() {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        initTime = null;
        hitCount = 0;
        pingjsonpobject = new PingJSONPObject();
        // Act
        pingjsonpobject.init(servletConfig);
        // Assert
        assertEquals(new java.util.Date().toString(), initTime);
        assertEquals(0, hitCount);
    }
}