/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_aQCm0() {
        Option option = new Option("a", "longA", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs2_GIxC1() {
        Option option = new Option("b", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescriptionWithAllParameters_WOJp0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescriptionWithTwoParameters_npwY1() {
        Option option = new Option("option", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescriptionWithOneParameter_NpbZ2() {
        Option option = new Option("option", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_iNtS0() {
        Option option = new Option("a", "longA", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName2_UIuA1() {
        Option option = new Option("a", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName3_jRnP2() {
        Option option = new Option("a", "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithAllParams_FILd0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithTwoParams_nVZP1() {
        Option option = new Option("a", true, "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithOneParam_EVlM2() {
        Option option = new Option("a", "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_eXzZ0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        assert option.isRequired();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredFalse_rWmK1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(false);
        assert !option.isRequired();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_tDkN0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.equals(option);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_HZAA1() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        boolean result = option1.equals(option2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_FcmI2() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_SbOb3() {
        Option option = new Option("option", "longOption", true, "description");
        Object obj = new Object();
        boolean result = option.equals(obj);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOption_bYcA4() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        boolean result = option1.equals(option2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgTrue_qJMp0() {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.acceptsArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgFalseNoArg_Ulhm1() {
        Option option = new Option("o", "option", false, "description");
        boolean result = option.acceptsArg();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterWhenConverterIsNotNull_hLPG1() {
        Option option = new Option("option", "longOption", true, "description");
        Converter<?, ?> converter = option.getConverter();
        assertEquals(converter, converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringNotDeprecated_AmMJ0() {
        Option option = new Option("a", "longA", true, "description");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsFalse_TAuH1() {
        Option option = new Option("a", "a", false, "description");
        boolean result = option.hasArgs();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_yhgC0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setDescription("newDescription");
        assertEquals("newDescription", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithNoArgsAllowed_wmBL0() {
        Option option = new Option("o", "option", false, "description");
        try {
            option.processValue("");
        } catch (IllegalArgumentException e) {
            assertEquals("NO_ARGS_ALLOWED", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithOneArg_jLId1() {
        Option option = new Option("o", "option", true, "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithMultipleArgs_xNiW2() {
        Option option = new Option("o", "option", true, "description");
        option.processValue("value1,value2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithNoValueSeparator_PuuN3() {
        Option option = new Option("o", "option", true, "description");
        option.processValue("value1;value2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithLongOption_zCtT0() {
        Option option = new Option("o", "longOption", true, "description");
        int result = option.hashCode();
        assertEquals(Objects.hash("longOption", "o"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithAllParameters_woxr0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithTwoParameters_yHUm1() {
        Option option = new Option("b", true, "description");
        assertEquals("b", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithOneParameter_MwYz2() {
        Option option = new Option("c", "description");
        assertEquals("c", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_cCUq0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType2_ZhWF1() {
        Option option = new Option("option", true, "description");
        option.setType(Integer.class);
        assertEquals(Integer.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType3_eGHz2() {
        Option option = new Option("option", "description");
        option.setType(Double.class);
        assertEquals(Double.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId_TdbE0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId2_uxOA1() {
        Option option = new Option("b", true, "description");
        assertEquals('b', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId3_XNKj2() {
        Option option = new Option("c", "description");
        assertEquals('c', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWhenHasNoValuesReturnsNull_Vwep0() {
        Option option = new Option("option", "longOption", false, "description");
        String[] values = option.getValues();
        assert values == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyOptionNotNull_ILEI0() {
        Option option = new Option("a", "longOption", true, "description");
        String result = option.getKey();
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyOptionNull_nZip1() {
        Option option = new Option(null, "longOption", true, "description");
        String result = option.getKey();
        assertEquals("longOption", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithLongOption_POlD0() {
        Option option = new Option("a", "abc", true, "description");
        boolean result = option.hasLongOpt();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithoutLongOption_mjeT3() {
        Option option = new Option("a", true, "description");
        boolean result = option.hasLongOpt();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrue_GvVa0() {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.hasArg();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalse_sMIZ1() {
        Option option = new Option("o", "option", false, "description");
        boolean result = option.hasArg();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutValues_LYBt1() {
        Option option = new Option("o", "option", true, "description");
        assertEquals(null, option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList_SPkS0() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> values = option.getValuesList();
        assertEquals(0, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedFalse_PDou3() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.isDeprecated();
        assert(result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgTrue_jVpn0() {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.requiresArg();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgFalse_oByu1() {
        Option option = new Option("o", "option", false, "description");
        boolean result = option.requiresArg();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg3_KRdP2() {
        Option option = new Option("option", "description");
        boolean result = option.hasOptionalArg();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameFalse_oQFj1() throws Exception {
        Option option = new Option("o", "option", false, "description");
        boolean result = option.hasArgName();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameNull_XphT2() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.setArgName(null);
        boolean result = option.hasArgName();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithDefaultValue_gLib1() {
        Option option = new Option("a", "a", true, "description");
        String result = option.getValue("default");
        Assertions.assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullDefaultValue_eJKF2() {
        Option option = new Option("a", "a", true, "description");
        String result = option.getValue(null);
        Assertions.assertEquals(option.getValue(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoArgOptionAndDefaultValue_uaGn7() {
        Option option = new Option("a", false, "description");
        String result = option.getValue("default");
        Assertions.assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoArgOptionAndNullDefaultValue_xQjU8() {
        Option option = new Option("a", false, "description");
        String result = option.getValue(null);
        Assertions.assertEquals(option.getValue(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired3_MCej2() {
        Option option = new Option("option", "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs3_qAnn2_fid1() {
        Option option = new Option("c", "description");
        assertEquals(-1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescription_lQKl0_fid1() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("[ Option a longOption [ARG] :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescriptionAndNoArg_kYkj3_fid1() {
        Option option = new Option("a", false, "description");
        assertEquals("[ Option a :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType3_qxwy2() {
        Option option = new Option("option", "description");
        option.setType(Boolean.class);
        assertEquals(Boolean.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_QnJO0() {
        Option option = new Option("a", "a", true, "description");
        try {
            option.addValue("value");
            assert false;
        } catch (UnsupportedOperationException e) {
            assert true;
        }
    }
}