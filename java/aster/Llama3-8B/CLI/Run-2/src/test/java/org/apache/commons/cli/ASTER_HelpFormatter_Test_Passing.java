/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_hnaX3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_IUsm0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getOptPrefix();
        assertEquals("-", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_mVYG0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        helpFormatter.printHelp(cmdLineSyntax, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_Oybr0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_FJYN1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 6;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_ScpU2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 2;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_laZF3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 3;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_zcAn4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 4;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_wCHp5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 5;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_bUyK6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 6;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_Qrds7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 7;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos9_ZxhT8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 8;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos10_Pyyf9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 9;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos11_BAGt10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 10;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos12_mxkh11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 11;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_qVIS0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setArgName("test");
        assertEquals("test", helpFormatter.defaultArgName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_hTxA0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(5);
        assertEquals(5, helpFormatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_JEJY0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, options, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_pTKM0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        int width = 10;
        helpFormatter.printHelp(width, cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithFooter_RDQF1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        int width = 10;
        helpFormatter.printHelp(width, cmdLineSyntax, header, options, footer, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithRequiredOptions_dokf2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        int width = 10;
        options.addRequiredOption("opt", "longOpt", true, "description");
        helpFormatter.printHelp(width, cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithOptionGroup_UsFe3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        int width = 10;
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        helpFormatter.printHelp(width, cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_mxQH0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithOption_SLgq1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(new Option("o", "opt", true, "description"));
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithOptions_PwQP2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(new Option("o", "opt", true, "description"));
        options.addOption(new Option("p", "pt", true, "description"));
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithOptionGroup_VjEz3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("o", "opt", true, "description"));
        group.addOption(new Option("p", "pt", true, "description"));
        options.addOptionGroup(group);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithRequiredOption_Xgct4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addRequiredOption("o", "opt", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_UIth0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("=");
        assertEquals("=", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_ZSSZ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setNewLine("\n");
        assertEquals("\n", helpFormatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_MlhJ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getSyntaxPrefix();
        assertEquals("usage: ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_yBKs0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_mxAA0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getNewLine();
        assertEquals("\n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintOptionsWithNoOptions_rJWr2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printOptions(pw, 80, options, 2, 4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_OepT74() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getWidth();
        assertEquals(74, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_cdxr0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptPrefix("testPrefix");
        assertEquals("testPrefix", helpFormatter.defaultLongOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_EFue0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getArgName();
        assertEquals("arg", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_Ghjl0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setOptPrefix("prefix");
        assertEquals("prefix", helpFormatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_dpbo1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(5);
        assertEquals(5, helpFormatter.defaultDescPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_OLAX1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_Foie0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getLongOptPrefix();
        assertEquals("--", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimNull_Ztvr0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimEmpty_hAmL1() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimNonWhitespace_YEWP4() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello world");
        assertEquals("hello world", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_PNBU0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("prefix");
        assertEquals("prefix", helpFormatter.defaultSyntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_DNPq0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "a", true, "a option");
        options.addOption("b", "b", false, "b option");
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_njTc1_SAMO1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(10);
        assertEquals(10, helpFormatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_vfYJ0_GEMQ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(HelpFormatter.class, helpFormatter.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintOptions_pwEq0_YVLJ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(new Option("o", "opt", true, "option description"));
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("opt1", "opt1", true, "option1 description"));
        group.addOption(new Option("opt2", "opt2", true, "option2 description"));
        group.addOption(new Option("opt3", "opt3", true, "option3 description"));
        options.addOptionGroup(group);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printWrapped(pw, 80, "This is a test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintOptionsWithRequiredOptions_gVxU1_JHAk0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "opt", true, "option description");
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "aopt", false, "a option description"));
        group.addOption(new Option("b", "bopt", false, "b option description"));
        options.addOptionGroup(group);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printWrapped(pw, 80, "Usage: myprogram [options]\n" +
                "Options:\n" +
                options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_LVYV0_oonc0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "a", true, "a description");
        options.addOption("b", "b", false, "b description");
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("c", "c", true, "c description"));
        group.addOption(new Option("d", "d", false, "d description"));
        group.addOption(new Option("e", "e", true, "e description"));
        options.addOptionGroup(group);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 4, "footer");
    }
}