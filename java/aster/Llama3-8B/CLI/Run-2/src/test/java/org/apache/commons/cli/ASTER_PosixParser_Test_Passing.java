/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_EmptyOptions_MultipleArguments_QkVf2_sypX0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"hello", "world", "java"};
        try {
            String[] result = parser.flatten(options, arguments, false);
            Assertions.assertArrayEquals(new String[]{"hello", "world", "java"}, result);
        } catch (ParseException e) {
            fail("Unexpected ParseException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithRequiredOption_MXXw0_lEuI0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--long-a", "value"};
        try {
            String[] result = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOptionalOption_mIie1_qSWI0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("b", "long-b", false, "description");
        String[] arguments = new String[]{"--long-b"};
        try {
            String[] result = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithNonOption_iCrl3_rolG0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"non-option"};
        try {
            String[] result = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithMultipleNonOptions_qvjO4_hhvd0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"non-option1", "non-option2"};
        try {
            String[] result = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOptionAndNonOption_QZtI5_rOOM0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("e", "long-e", false, "description");
        String[] arguments = new String[]{"--long-e", "non-option"};
        try {
            String[] result = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOptionGroup_CPZH7_kxxA0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        options.addOption("g", "long-g", false, "description");
        group.addOption(options.getOption("g"));
        String[] arguments = new String[]{"--long-g"};
        try {
            String[] result = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOptionAndOptionGroup_Pykz9_yncx0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("j", "long-j", false, "description");
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        options.addOption("k", "long-k", false, "description");
        group.addOption(options.getOption("k"));
        String[] arguments = new String[]{"--long-j", "--long-k"};
        try {
            String[] result = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_EmptyArguments_TbcX0_UBWP0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        try {
            String[] result = parser.flatten(options, arguments, true);
            Assertions.assertArrayEquals(new String[0], result);
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_SingleOption_gpPl1_gUBN0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        try {
            String[] result = parser.flatten(options, arguments, true);
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }
}