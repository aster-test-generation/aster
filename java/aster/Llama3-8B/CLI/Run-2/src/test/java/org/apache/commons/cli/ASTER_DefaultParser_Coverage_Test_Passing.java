/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithEqual_KJkn3() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"--long-opt=arg"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_RYRT0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--"}, null, false);
        assertEquals(true, parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_lJSq1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"arg"}, null, false);
        assertEquals("arg", parser.cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsingAfterDoubleDash_DlMr2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--", "arg"}, null, false);
        assertEquals(true, parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_ojma5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"unknown"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qrQg3() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", true, "Print help message");
        String[] arguments = {"-h", "hello"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), true);
        assertEquals("hello", commandLine.getOptionValue("h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToken_QhVJ0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-"}, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShortOptionWithNoValue_PYdO1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-S"}, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShortOptionWithValue_ekmN2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-S=V"}, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_omAv0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--"}, null, false);
        assertTrue(parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsingAfterDoubleDash_PgHL2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--", "arg"}, null, false);
        assertTrue(parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_BiHX0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_OkKP1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_NXJx4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"unknownToken"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_MprD1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"arg"}, null, false);
        assertEquals("arg", parser.cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_jhKW5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"unknown"}, null, false);
        assertEquals("unknown", parser.cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_MnBY0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--"};
        parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(true, parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_Lsbb1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"arg"};
        parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals("arg", parser.cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithoutEqual_MLel2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--option"};
        parser.parse(new Options(), arguments, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_ildd3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-o"};
        parser.parse(new Options(), arguments, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_vFyu4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"unknown"};
        parser.parse(new Options(), arguments, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithArgument_Fdta5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--option", "value"};
        parser.parse(new Options(), arguments, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLongOptionWithEqual_UvCE3() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"--opt=value"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_TyLx0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_xsLb1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_JivF4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_jjhd0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_HDjR1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_Sjgc4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"unknownToken"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_WZxd0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_SmGd1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_PjKw0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "arg1", "arg2"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_WQrp1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"arg1", "arg2"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_Zxdb0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_mfxL1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_QxEj0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_AUip1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_GmKW4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknownToken", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNullArguments_QqCY3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, null);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEmptyArguments_ndXa4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine commandLine = parser.parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithMultipleArgumentsAndOtherOptionsAndUnknownOption_vNGJ10() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "value2", "value3", "-b", "value4", "-c", "value5", "unknownOption"};
        try {
            parser.parse(options, arguments);
            assertEquals(false, true);
        } catch (ParseException e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithMultipleArgumentsAndOtherOptionsAndUnknownOptionAndUnknownArgument_Lsde11() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "value2", "value3", "-b", "value4", "-c", "value5", "unknownOption", "unknownArgument"};
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_thRk0() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] arguments = {"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_MLHa1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("long", "long", true, "long option");
        String[] arguments = {"--long", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOptionWithEqualSign_aMeg4() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] arguments = {"-s=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqualSign_qSwi5() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("long", "long", true, "long option");
        String[] arguments = {"--long=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleProperties_SelectedOption_dcoh0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option opt = new Option("opt", "opt", true, "description");
        group.addOption(opt);
        options.addOptionGroup(group);
        String[] arguments = new String[]{"--opt", "value"};
        Properties properties = new Properties();
        parser.parse(options, arguments, properties, false);
        assertTrue(parser.cmd.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleProperties_SelectedOptionNoArg_cMQk2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        Option opt = new Option("opt", "opt", false, "description");
        options.addOption(opt);
        String[] arguments = new String[]{"--opt"};
        Properties properties = new Properties();
        parser.parse(options, arguments, properties, false);
        assertTrue(parser.cmd.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleProperties_SelectedOptionWithArg_ZpEj3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        Option opt = new Option("opt", "opt", true, "description");
        options.addOption(opt);
        String[] arguments = new String[]{"--opt", "value"};
        Properties properties = new Properties();
        parser.parse(options, arguments, properties, false);
        assertTrue(parser.cmd.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleProperties_SelectedOptionWithNoValueAndNoArgAndNoProperties_erJE6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        Option opt = new Option("opt", "opt", false, "description");
        options.addOption(opt);
        String[] arguments = new String[]{"--opt"};
        Properties properties = null;
        parser.parse(options, arguments, properties, false);
        assertTrue(parser.cmd.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_vGOe8() throws ParseException {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--unknown", "value"};
        try {
            parser.parse(options, arguments, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_qIrd0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--long-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getParsedOptionValue("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_aglV1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getParsedOptionValue("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_nyxP4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        options.addRequiredOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--long-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getParsedOptionValue("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_QXHO5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        options.addRequiredOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_BvEl2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"nonOption"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertNull(commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_rPfQ3() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("opt", "opt", true, "Description");
        String[] arguments = new String[]{"--opt", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value", commandLine.getOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_nkdN4() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("opt", "opt", true, "Description");
        String[] arguments = new String[]{"--opt2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOptionMissing_cgDA7() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"nonOption", "--opt2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_XnSh5() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2"};
        try {
            parser.parse(options, arguments, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_MnPC8() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2", "unknown-token"};
        try {
            parser.parse(options, arguments, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToken_yqhD0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--option", "value"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithoutDash_IReN1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"option"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashButNotLongOption_jIRt2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOption_FaDO3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "--option"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValue_yOwc4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "--option=value"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithEquals_BSaU5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "--option=value="};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithEqualsAndSpace_NIJs6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "--option=value with space"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithEqualsAndSpaceAndQuotes_hcbG7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "--option=\"value with space\""};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithEqualsAndSpaceAndQuotesAndBackslash_vMGI8() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "--option=\"value with space\\\"\""};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithEqualsAndSpaceAndQuotesAndBackslashAndComma_ogvU9() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "--option=\"value with space\\\", value2\""};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithEqualsAndSpaceAndQuotesAndBackslashAndCommaAndDoubleQuotes_mQhF10() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_eEWZ0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "arg1", "--opt2", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_SlFU1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "-10", "--opt2", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOptionArgument_JBrn2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndNonOptionArgument_qJzd3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_Zcqo4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "--opt2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_AUeJ5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"unknownToken"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_JPtV8() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_ikwm9() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentAndUnknownToken_QvZr6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--test", "value", "unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndUnknownToken_fdke7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-t", "unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentAndShortOptionAndUnknownToken_AHSk8() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--test", "value", "-t", "unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_kThv6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-5"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToken_qavY0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--abc", "def"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithoutDash_DCuK1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"abc", "def"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashButNotLongOption_Qyeb2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "def"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValue_gZjM4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--abc=def", "ghi"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithQuotes_dAgI5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--abc=\"def ghi\"", "ghi"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithQuotesAndEscape_RFJi6() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--abc=\"def\\\"ghi\"", "ghi"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithQuotesAndEscapeAndBackslash_iQGP7() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--abc=\"def\\\"ghi\\\\jkl\"", "ghi"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndLongOptionAndValueWithQuotesAndEscapeAndBackslashAndTab_Zlrb8() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--abc=\"def\\\"ghi\\\\jkl\\t", "ghi"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOptionArgument_mcJo2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArguments_kAeg2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "--long-a", "world"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), true);
        assertEquals("hello", commandLine.getParsedOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithRequiredOptions_ygyb3() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--long-a", "world"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), true);
        assertEquals("world", commandLine.getParsedOptionValue("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithStopAtNonOption_RPNv7_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "world", "--long-a", "abc"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("hello", commandLine.getParsedOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongPrefixWithEmptyString_SfAw4_Ymql0() throws ParseException {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, new String[]{}, new Properties());
        } catch (Exception e) {
            assertEquals("getLongPrefix(java.lang.String) has private access in org.apache.commons.cli.DefaultParser", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CZGJ0_3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value0"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, stopAtNonOption);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_AbUL3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1", "arg3"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_xdMT3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg3"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_vfrb4_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknown", "arg1", "arg3"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_bEkZ3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1", "arg3"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_iUFH4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "--opt", "arg1", "arg2"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(4, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_AzLE4_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknown", "arg1", "arg3"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortOption_zgCH5_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "arg1", "arg3"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOptionWithoutValue_fZDG2_fid1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "short option");
        String[] arguments = {"-s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutValue_rsvY3_fid1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("long", "long", false, "long option");
        String[] arguments = {"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseConcatenatedOptions_tKcO8_1_fid1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        options.addOption("l", "long", true, "long option");
        String[] arguments = {"-s-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }
}