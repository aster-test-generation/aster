/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_uLCs0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--unknown"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAmbiguousOptionException_mjDo1() throws ParseException {
        Options options = new Options();
        options.addOption("opt1", "long-opt-1", true, "description");
        options.addOption("opt2", "long-opt-2", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"--long-opt-1", "--long-opt-2"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithoutEqual_wrzX2() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"--long-opt"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_eYTU3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--opt"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_jqXw4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-o"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueForOptionWithArg_dVmr3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--opt", "value"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CZGJ0_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, stopAtNonOption);
        assertEquals("value1", commandLine.getOptionValue("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CZGJ0_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, stopAtNonOption);
        assertEquals("value2", commandLine.getOptionValue("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CZGJ0_3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithArg_LXMw3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--option", "arg"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_JZSA2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--longOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_UxyK3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-s", "--longOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithOption_lpjO5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-o", "optionValue"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithArg_GSBR3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--opt", "value"}, null, false);
        assertEquals("value", parser.cmd.getOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortOption_Ouii4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-o"}, null, false);
        assertEquals("o", parser.cmd.getOptionValue('o'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAmbiguousOptionException_PGyb1() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "opt", true, "description");
        options.addOption("opt2", "opt2", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"--opt"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLongOptionWithoutEqual_yReM2() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"--opt"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShortAndLongOption_rObC4() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"-o", "value"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiredOptions_nxtT6() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("opt", "opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_TMwB2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_tqSo3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-o"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithArgument_RhwH5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--option", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleOptionWithArg_dLic3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-o", "value"}, null, false);
        assertEquals("value", parser.cmd.getOptionValue(parser.options.getOption("o"), ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleOptionWithoutArg_sDEg4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-o"}, null, false);
        assertEquals("true", parser.cmd.getOptionValue(parser.options.getOption("o"), "true"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleOptionWithConcatenatedArgs_ytKO5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-o", "value1", "value2"}, null, false);
        assertEquals("value1value2", parser.cmd.getOptionValue(parser.options.getOption("o"), ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_tiiO2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--longOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_FppV3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-s", "--longOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithArgument_QLtd5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_AbUL2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_xdMT3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_vfrb4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknown", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_bEkZ2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1", "arg2"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_iUFH3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "--opt", "arg1", "arg2"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_AzLE4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknown", "arg1", "arg2"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortOption_zgCH5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "arg1", "arg2"};
        CommandLine cmd = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_UDxW2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_Uvtu3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-o", "--opt1", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithOption_xNld5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-o", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_nSkd2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--longOption", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_MbvF3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-s", "--longOption", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(4, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithOption_WsLe5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hxWE0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        CommandLine commandLine = parser.parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNullOptions_CGQk2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        CommandLine commandLine = parser.parse(null, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_SQeC5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        CommandLine commandLine = parser.parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithoutArgument_UhZv7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "value2"};
        CommandLine commandLine = parser.parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithMultipleArguments_WCmT8() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "value2", "value3", "-b", "value4"};
        CommandLine commandLine = parser.parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithMultipleArgumentsAndOtherOptions_eRQB9() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "value2", "value3", "-b", "value4", "-c", "value5"};
        CommandLine commandLine = parser.parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOptionWithoutValue_fZDG2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "short option");
        String[] arguments = {"-s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("true", commandLine.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutValue_rsvY3() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("long", "long", false, "long option");
        String[] arguments = {"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("true", commandLine.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseUnknownToken_EYKV6() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        String[] arguments = {"unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqualSign_NXoM7() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("long", "long", true, "long option");
        String[] arguments = {"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("true", commandLine.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseConcatenatedOptions_tKcO8_1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        options.addOption("l", "long", true, "long option");
        String[] arguments = {"-s-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("true", commandLine.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseConcatenatedOptions_tKcO8_2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        options.addOption("l", "long", true, "long option");
        String[] arguments = {"-s-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("true", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseJavaProperty_LWYl9() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] arguments = {"-Ds=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleProperties_SelectedOptionGroup_NuMd1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option opt = new Option("opt", "opt", true, "description");
        group.addOption(opt);
        options.addOptionGroup(group);
        String[] arguments = new String[]{"--group", "opt"};
        Properties properties = new Properties();
        parser.parse(options, arguments, properties, false);
        assertTrue(parser.cmd.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleProperties_SelectedOptionWithNoValue_FCYi4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        Option opt = new Option("opt", "opt", true, "description");
        options.addOption(opt);
        String[] arguments = new String[]{"--opt"};
        Properties properties = new Properties();
        parser.parse(options, arguments, properties, false);
        assertTrue(parser.cmd.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleProperties_SelectedOptionWithNoValueAndNoArgAndNoPropertiesAndNoOption_RGqq7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--nonopt"};
        Properties properties = null;
        parser.parse(options, arguments, properties, false);
        assertFalse(parser.cmd.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_pgMB0() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--opt", "value"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("long-opt", commandLine.getOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleLongOptions_unnx1_1() throws ParseException {
        Options options = new Options();
        options.addOption("opt1", "long-opt1", true, "description");
        options.addOption("opt2", "long-opt2", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--opt1", "value1", "--opt2", "value2"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value1", commandLine.getOptionValue("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleLongOptions_unnx1_2() throws ParseException {
        Options options = new Options();
        options.addOption("opt1", "long-opt1", true, "description");
        options.addOption("opt2", "long-opt2", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--opt1", "value1", "--opt2", "value2"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value2", commandLine.getOptionValue("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_puZN4() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "o", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-o", "value"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", commandLine.getOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleShortOptions_yIQT5_1() throws ParseException {
        Options options = new Options();
        options.addOption("opt1", "o", true, "description");
        options.addOption("opt2", "p", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-o", "value1", "-p", "value2"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value1", commandLine.getOptionValue("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleShortOptions_yIQT5_2() throws ParseException {
        Options options = new Options();
        options.addOption("opt1", "o", true, "description");
        options.addOption("opt2", "p", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-o", "value1", "-p", "value2"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value2", commandLine.getOptionValue("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_MIXw2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"unknown-token"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_BJhf3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--long-a", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RyWj6_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--long-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RyWj6_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--long-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionProperties("long-a").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Icvr7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--long-a", "value", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CuHw0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "value", "--opt2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value", commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CuHw0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "value", "--opt2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value2", commandLine.getOptionValue("--opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_EnFO1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("-1", commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_jzSH5_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "value", "--prop", "key=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value", commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_jzSH5_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "value", "--prop", "key=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("key=value", commandLine.getOptionProperties("--prop"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_siLe6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"nonOption", "--opt", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OLwj4_1() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg", cmd.getOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OLwj4_2() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OLwj4_3() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mfTo6_1() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("prop1", "value1");
        properties.setProperty("prop2", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg", cmd.getOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mfTo6_2() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("prop1", "value1");
        properties.setProperty("prop2", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionProperties("prop1").getProperty("value1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mfTo6_3() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("prop1", "value1");
        properties.setProperty("prop2", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionProperties("prop2").getProperty("value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_BpQq7() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2", "non-option"};
        try {
            parser.parse(options, arguments, new Properties(), true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_dSfz7() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "arg1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_yzlT0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--test", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("--test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_NUPc1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-t", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("-t"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_Ynyg3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-t", "--test", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("--test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentAndOption_OJXD4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--test", "value", "-t"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("--test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_WOci5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_eAbG0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue('S'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_CIIA1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption('S'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_EwUO2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--shortOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_OzZG3_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "--shortOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption('S'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_OzZG3_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "--shortOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentAndOption_VPDr4_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "value", "--shortOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue('S'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentAndOption_VPDr4_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "value", "--shortOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_svOP5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"unknownToken"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_LRCF7_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "value1", "value2", "--shortOption", "value3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", cmd.getOptionValue('S'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_LRCF7_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "value1", "value2", "--shortOption", "value3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", cmd.getOptionValue('S'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_LRCF7_3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "value1", "value2", "--shortOption", "value3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_LRCF7_4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "value1", "value2", "--shortOption", "value3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value3", cmd.getOptionValue("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_areu8() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--requiredOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("requiredOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredArgument_ZHHK9() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"requiredArgument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_CgSU0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--test", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_tpzr1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--test", "-10"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_wGdo3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--test"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_kzGM5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--unknown-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOptionAndArgument_XDeC6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--unknown-option", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_ylKa7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-t", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndUnknownArgument_uKCP9() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-t", "unknown-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndRequiredOption_xRTi10() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-t", "--test"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArguments_kAeg2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "--long-a", "world"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), true);
        assertEquals("world", commandLine.getParsedOptionValue("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithUnknownToken_nbUT4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-b", "hello"};
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, new Properties(), true);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unknown option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithRequiredOptionsAndUnknownToken_DrER5() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-b", "hello"};
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, new Properties(), true);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: --long-a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithProperties_qrEZ6_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "--long-a", "world"};
        Properties properties = new Properties();
        properties.put("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("hello", commandLine.getParsedOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithProperties_qrEZ6_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "--long-a", "world"};
        Properties properties = new Properties();
        properties.put("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("world", commandLine.getParsedOptionValue("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithProperties_qrEZ6_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "--long-a", "world"};
        Properties properties = new Properties();
        properties.put("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value", commandLine.getOptionValue("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithStopAtNonOption_RPNv7_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "world", "--long-a", "abc"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("abc", commandLine.getParsedOptionValue("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithStopAtNonOptionAndUnknownToken_gJcM8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-b", "hello", "world", "--long-a", "abc"};
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unknown option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLongOption_FOEU2_ZZlA0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--test", "test"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongPrefixWithNonOptionString_UKYw6_LuGP0() throws ParseException {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, new String[]{"non-option"}, new Properties());
            fail("Expected parse to throw ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsStripLeadingAndTrailingQuotesTrue_WRnD0_IbJc1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(new Options(), new String[]{"--hello"}, new Properties());
        assertEquals("hello", commandLine.getParsedOptionValue("hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToken_RiiT0_RBUQ0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--test", "test"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        try {
            parser.parse(options, null, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_JZSA2_fid1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption(new Option("l", "longOption", true, "long option description"));
        String[] arguments = new String[]{"--longOption"};
        parser.parse(options, arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CZGJ0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, stopAtNonOption);
        assertEquals("value1", commandLine.getOptionValue("-a"));
        assertEquals("value2", commandLine.getOptionValue("-b"));
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseConcatenatedOptions_tKcO8() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        options.addOption("l", "long", true, "long option");
        String[] arguments = {"-s-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("true", commandLine.getOptionValue("s"));
        assertEquals("true", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleLongOptions_unnx1() throws ParseException {
        Options options = new Options();
        options.addOption("opt1", "long-opt1", true, "description");
        options.addOption("opt2", "long-opt2", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--opt1", "value1", "--opt2", "value2"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value1", commandLine.getOptionValue("opt1"));
        assertEquals("value2", commandLine.getOptionValue("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleShortOptions_yIQT5() throws ParseException {
        Options options = new Options();
        options.addOption("opt1", "o", true, "description");
        options.addOption("opt2", "p", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-o", "value1", "-p", "value2"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value1", commandLine.getOptionValue("opt1"));
        assertEquals("value2", commandLine.getOptionValue("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RyWj6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--long-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("long-a"));
        assertEquals("value", commandLine.getOptionProperties("long-a").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CuHw0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "value", "--opt2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value", commandLine.getOptionValue("--opt"));
        assertEquals("value2", commandLine.getOptionValue("--opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_jzSH5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "value", "--prop", "key=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value", commandLine.getOptionValue("--opt"));
        assertEquals("key=value", commandLine.getOptionProperties("--prop"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OLwj4() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg", cmd.getOptionValue("opt"));
        assertEquals("arg1", cmd.getArgList().get(0));
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mfTo6() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.options = options;
        String[] arguments = {"--opt=arg", "arg1", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("prop1", "value1");
        properties.setProperty("prop2", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg", cmd.getOptionValue("opt"));
        assertEquals("value1", cmd.getOptionProperties("prop1").getProperty("value1"));
        assertEquals("value2", cmd.getOptionProperties("prop2").getProperty("value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_OzZG3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "--shortOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption('S'));
        assertTrue(cmd.hasOption("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentAndOption_VPDr4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "value", "--shortOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue('S'));
        assertTrue(cmd.hasOption("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_LRCF7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-S", "value1", "value2", "--shortOption", "value3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", cmd.getOptionValue('S'));
        assertEquals("value2", cmd.getOptionValue('S'));
        assertTrue(cmd.hasOption("shortOption"));
        assertEquals("value3", cmd.getOptionValue("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArguments_kAeg2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "--long-a", "world"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), true);
        assertEquals("hello", commandLine.getParsedOptionValue("a"));
        assertEquals("world", commandLine.getParsedOptionValue("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithProperties_qrEZ6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "--long-a", "world"};
        Properties properties = new Properties();
        properties.put("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("hello", commandLine.getParsedOptionValue("a"));
        assertEquals("world", commandLine.getParsedOptionValue("long-a"));
        assertEquals("value", commandLine.getOptionValue("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArgumentsWithStopAtNonOption_RPNv7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "world", "--long-a", "abc"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("hello", commandLine.getParsedOptionValue("a"));
        assertEquals("abc", commandLine.getParsedOptionValue("long-a"));
    }
}