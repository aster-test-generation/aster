/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_wmgK0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        int expected = 5;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_vHPd1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 1;
        int expected = 5;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_sFNN2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 6;
        int startPos = 0;
        int expected = 5;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_QxoX3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 6;
        int startPos = 1;
        int expected = 5;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHeaderNull_gArU2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "test";
        String header = null;
        Options options = new Options();
        int leftPad = 0;
        int descPad = 0;
        String footer = "Test Footer";
        boolean autoUsage = false;
        helpFormatter.printHelp(null, 80, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFooterNull_BChW3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "test";
        String header = "Test Header";
        Options options = new Options();
        int leftPad = 0;
        int descPad = 0;
        String footer = null;
        boolean autoUsage = false;
        helpFormatter.printHelp(null, 80, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_NqYr0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test text that is longer than the width and has a tab stop at 5";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a test\n" +
                "that is longer\n" +
                "than the width\n" +
                "and has a tab\n" +
                "stop at 5";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithTabStopAtEnd_tLas1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 10;
        String text = "This is a test text that is longer than the width and has a tab stop at the end";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a test\n" +
                "that is longer\n" +
                "than the width\n" +
                "and has a tab\n" +
                "stop at the\n" +
                "end";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithLongText_CKUX2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a very long test text that is longer than the width and has a tab stop at 5";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a very\n" +
                "long test text\n" +
                "that is longer\n" +
                "than the width\n" +
                "and has a tab\n" +
                "stop at 5";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithShortText_GvwJ3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a short test text";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a short test text";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithTextAtTabStop_WqPT4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test text that is at the tab stop";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a test\n" +
                "that is at the\n" +
                "tab stop";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithTextBeforeTabStop_LrbB5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test text that is before the tab stop";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a test\n" +
                "that is before\n" +
                "the tab stop";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithTextAfterTabStop_cCsr6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test text that is after the tab stop";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a test\n" +
                "that is after\n" +
                "the tab stop";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_vHPd1_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = -1;
        int startPos = 1;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }
}