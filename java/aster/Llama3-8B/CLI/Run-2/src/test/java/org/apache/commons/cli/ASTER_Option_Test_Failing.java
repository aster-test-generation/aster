/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Objects;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs3_qAnn2() {
        Option option = new Option("c", "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWhenIndexIsOutOfRange_gNCN1() {
        Option option = new Option("option", "longOption", true, "description");
        try {
            option.getValue(2);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescription_lQKl0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("[ Option a longOption [ARG] :: description :: ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescriptionAndNoArg_kYkj3() {
        Option option = new Option("a", false, "description");
        assertEquals("[ Option a :: description :: ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_Dejz0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator2_ybCS1() {
        Option option = new Option("option", true, "description");
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator3_nZon2() {
        Option option = new Option("option", "description");
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsTrue_IhFZ0() {
        Option option = new Option("a", "a", true, "description");
        boolean result = option.hasArgs();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsUnlimited_jDKl2() {
        Option option = new Option("a", true, "description");
        boolean result = option.hasArgs();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_Teyj0_1() {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("description", deprecated.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_Teyj0_2() {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("1.0", deprecated.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_Gqbr1_1() {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("description", deprecated.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_Gqbr1_2() {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("1.0", deprecated.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_PXuP2_1() {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("description", deprecated.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_PXuP2_2() {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("1.0", deprecated.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithoutLongOption_QpqV1() {
        Option option = new Option("o", true, "description");
        int result = option.hashCode();
        assertEquals(Objects.hash("o", null), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithoutDescription_EKhq2() {
        Option option = new Option("o", "description");
        int result = option.hashCode();
        assertEquals(Objects.hash("o", "description"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_MqjI0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(Object.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType2_cIVD1() {
        Option option = new Option("option", true, "description");
        assertEquals(Object.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType3_qzuZ2() {
        Option option = new Option("option", "description");
        assertEquals(Object.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithLongOption_PGQu0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("arg", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithoutLongOption_KlXW1() {
        Option option = new Option("a", true, "description");
        assertEquals("arg", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithoutArg_HhEr2() {
        Option option = new Option("a", "description");
        assertEquals("", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_GDKj0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasOptionalArg();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg2_uHMW1() {
        Option option = new Option("option", true, "description");
        boolean result = option.hasOptionalArg();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameTrue_urNi0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.hasArgName();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullValue_fLNn0() {
        Option option = new Option("a", "a", true, "description");
        String result = option.getValue("default");
        Assertions.assertEquals(option.getValue(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyString_LAkX3() {
        Option option = new Option("a", "a", true, "description");
        String result = option.getValue("");
        Assertions.assertEquals(option.getValue(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithLongOption_Knpx5() {
        Option option = new Option("a", "longOption", true, "description");
        String result = option.getValue("default");
        Assertions.assertEquals(option.getValue(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoArgOption_Spzk6() {
        Option option = new Option("a", false, "description");
        String result = option.getValue("default");
        Assertions.assertEquals(option.getValue(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoArgOptionAndEmptyStringDefaultValue_QCVD9() {
        Option option = new Option("a", false, "description");
        String result = option.getValue("");
        Assertions.assertEquals(option.getValue(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_CWzq0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired2_IPCT1() {
        Option option = new Option("option", true, "description");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_Teyj0() {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("description", deprecated.getDescription());
        assertEquals("1.0", deprecated.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_Gqbr1() {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("description", deprecated.getDescription());
        assertEquals("1.0", deprecated.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_PXuP2() {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("description", deprecated.getDescription());
        assertEquals("1.0", deprecated.getSince());
    }
}