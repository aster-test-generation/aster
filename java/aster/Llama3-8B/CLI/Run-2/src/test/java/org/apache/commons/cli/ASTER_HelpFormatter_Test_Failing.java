/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_SaUw0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        helpFormatter.renderWrappedText(sb, 10, 8, "Hello        Wo        rl        d");
        assertEquals("Hello        Wo        rl        d", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText2_UxBD1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        helpFormatter.renderWrappedText(sb, 10, 8, "Hello World\nThis is a test");
        assertEquals("Hello World\nThis is a test", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText3_xqdT2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        helpFormatter.renderWrappedText(sb, 10, 8, "Hello World\nThis is a test\nThis is another test");
        assertEquals("Hello World\nThis is a test\nThis is another test", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText4_CKbe3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        helpFormatter.renderWrappedText(sb, 10, 8, "Hello World\nThis is a test\nThis is another test\nThis is yet another test");
        assertEquals("Hello World\nThis is a test\nThis is another test\nThis is yet another test", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText5_apDN4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        helpFormatter.renderWrappedText(sb, 10, 8, "Hello World\nThis is a test\nThis is another test\nThis is yet another test\nThis is the last test");
        assertEquals("Hello World\nThis is a test\nThis is another test\nThis is yet another test\nThis is the last test", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText6_ntKu5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        helpFormatter.renderWrappedText(sb, 10, 8, "Hello World\nThis is a test\nThis is another test\nThis is yet another test\nThis is the last test\nThis is the last test");
        assertEquals("Hello World\nThis is a test\nThis is another test\nThis is yet another test\nThis is the last test\nThis is the last test", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_bXzx0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String padding = helpFormatter.createPadding(5);
        assertEquals("    ", padding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_uXrC0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> comparator = helpFormatter.getOptionComparator();
        assertEquals(Comparator.class, comparator.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimMultipleSpaces_JxLs3() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("     hello   ");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_hnaX0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_IUsm0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getOptPrefix();
        assertEquals("defaultOptPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_MlhJ0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getSyntaxPrefix();
        assertEquals("defaultSyntaxPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_OepT0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getWidth();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_EFue0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getArgName();
        assertEquals("defaultArgName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_OLAX0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_Foie0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getLongOptPrefix();
        assertEquals("defaultLongOptPrefix", result);
    }
}