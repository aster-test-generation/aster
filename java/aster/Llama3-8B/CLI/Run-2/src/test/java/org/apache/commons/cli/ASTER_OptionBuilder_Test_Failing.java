/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredTrue_yIQR0() {
        OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredFalse_SngS1() {
        OptionBuilder.isRequired(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredDefaultFalse_Pipl2_fid1() {
        OptionBuilder.isRequired();
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredMultipleCalls_DoCE3() {
        OptionBuilder.isRequired(true);
        OptionBuilder.isRequired(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredMultipleCallsWithDefault_uIoD4() {
        OptionBuilder.isRequired();
        OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredMultipleCallsWithDefaultAndFalse_qACF5() {
        OptionBuilder.isRequired();
        OptionBuilder.isRequired(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredMultipleCallsWithTrueAndTrue_jnaW8() {
        OptionBuilder.isRequired(true);
        OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredMultipleCallsWithFalseAndFalse_SArS9() {
        OptionBuilder.isRequired(false);
        OptionBuilder.isRequired(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_AJij0_RXSo0() {
        OptionBuilder result = OptionBuilder.hasArg();
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgAgain_TQGy1_EilV0() {
        OptionBuilder.hasArg();
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalse_yIOa1_iGRX0() {
        OptionBuilder.hasArg(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrueWithOptionalArg_QNFT4_gHqC0_1() {
        OptionBuilder.hasOptionalArgs(1);
        OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrueWithOptionalArg_QNFT4_gHqC0_2() {
        OptionBuilder.hasOptionalArgs(1);
        OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.hasOptionalArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalseWithOptionalArg_bwzx5_JPGb0() {
        OptionBuilder.hasOptionalArgs(1);
        OptionBuilder.hasArg(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrueWithOptionalArgCount_xQuj6_eBER0() {
        OptionBuilder.hasOptionalArgs();
        OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalseWithOptionalArgCount_IKBP7_mFBy1() {
        OptionBuilder.hasOptionalArgs();
        OptionBuilder.hasArg(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrueWithArgCount_vUxC8_WLMI0_1() {
        OptionBuilder.hasArgs(1);
        OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrueWithArgCount_vUxC8_WLMI0_2() {
        OptionBuilder.hasArgs(1);
        OptionBuilder.isRequired(true);
        assertEquals(1, OptionBuilder.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalseWithArgCount_TOwa9_ZQoO1() {
        OptionBuilder.hasArgs(1);
        OptionBuilder.hasArg(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithArgName_JtYc0_hlEE0() {
        String expected = "expected";
        OptionBuilder optionBuilder = OptionBuilder.withArgName(expected);
        assertEquals(expected, optionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_gHXT0_SgCl0() {
        OptionBuilder.hasArgs(5);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_SVCL1_vrje1() {
        OptionBuilder result = OptionBuilder.hasArgs();
        assertEquals(true, result.isRequired());
    }
}