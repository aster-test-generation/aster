/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_foAY3() {
        Options options = new Options();
        String[] arguments = {"--a", "1", "--a", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_MHIW2() {
        Options options = new Options();
        String[] arguments = new String[]{"--unknownOption"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_kFnK3() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "--d", "value3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidArguments_vTzy1() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "value1", "--b=value2", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_kicz3() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "value1", "--b=value2", "-d", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_ozUs3() {
        Options options = new Options();
        options.addOption(new Option("a", "longA", true, "Description of longA"));
        try {
            new DefaultParser().parse(options, new String[]{"-c"}, null, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_Ubkn3() {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        try {
            new DefaultParser().parse(options, new String[]{"-unknown", "value"}, null, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutRequiredArgs_BGwi1() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--non-required-opt", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected MissingArgumentException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutRequiredOptions_zTcr1() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOptionArgument_mRVu3() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"nonOptionArgument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_yajP2() {
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        try {
            new DefaultParser().parse(options, new String[]{"-b"}, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals(e.getMessage(), "Unrecognized option: -b");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_UCBW3() {
        Options options = new Options();
        options.addRequiredOption("a", "a", true, "test option a");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_XXNf0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "1", "-b", "2", "-c", "3"};
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArgumentsAndProperties_NnVd1() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = null;
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = null;
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_fGna2() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "1", "-b", "2"};
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_UkjT3() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "1", "-b", "2", "-c", "3", "-d", "4"};
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_kGls0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArgumentsAndProperties_YZVi1() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = null;
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[0];
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_hJmS3() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-c", "3"};
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_SDVy1() {
        assertEquals(1, DefaultParser.indexOfEqual("a=1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual2_bKhO2() {
        assertEquals(-1, DefaultParser.indexOfEqual("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_McVb0_NTEi0() {
        DefaultParser defaultParser = new DefaultParser(true);
        assertEquals(defaultParser.getClass(), DefaultParser.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_gUJn1_Jszj0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{"-a", "-b", "-c"}, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_QIBb4_ZynJ0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine cmd = parser.parse(new Options(), new String[]{"-a--b-c--d--e"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_iGcX5_ORcU0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "--b", "-c", "--d", "--e", "--f"}, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithOptionWithArg_WsEI3_TxRl0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine cmd = parser.parse(new Options(), new String[]{"abhello"}, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithMultipleOptions_ufBo6_mutI0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{"abcde"}, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithMultipleOptions_aAIN5_rwEN0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{"-a", "-b", "-c", "-d"}, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithNoOptions_vqwb6_avVQ1() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{""}, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_jAEY0_WVtk0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_uDCd1_FILn0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_TZFq2_pkjp0() {
        Options options = new Options();
        String[] arguments = new String[]{"--longOption", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_NXKT3_NxAi0() {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_mwVt0_yVfw0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_Gcyh1_vNRW0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oxWo2_lrly0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_xVhM3_HFRw0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_XmSa0_AyqG0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option = new Option("opt", "longOpt", true, "description");
        group.addOption(option);
        options.addOptionGroup(group);
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--opt", "value"};
        Properties properties = new Properties();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_qqsH1_Bbbz0() {
        Options options = new Options();
        Option option = new Option("o", "opt", true, "description");
        options.addOption(option);
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-o", "value"};
        Properties properties = new Properties();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_WoxD2_pXGj0() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"unknownToken"};
        Properties properties = new Properties();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_XkFA3_vDkx0() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_NuBm0_yIRl0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_eXRd2_SgzG0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_Lqby3_oVlu0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_EMuq0_hvbm0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_gmiq1_ZFvW0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_tnKO2_jCRb0() {
        Options options = new Options();
        String[] arguments = {"--a", "1", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_Bqiv3_YcIe0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_Myxm2_dKaL0() {
        Options options = new Options();
        options.addOption("a", "a", true, "a option");
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_Jphf3_HrUC0() {
        Options options = new Options();
        options.addOption("a", "a", true, "a option");
        String[] arguments = {"--a", "1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_jhdr0_hBKq0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseProperties_YSqG1_fCfa0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_ZVsG3_bOOL0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--shortAndLongOption", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_ixVK2_klWm0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_DIwH0_QfkT0() {
        Options options = new Options();
        options.addRequiredOption("opt1", "longOpt1", true, "description1");
        options.addRequiredOption("opt2", "longOpt2", false, "description2");
        String[] arguments = new String[]{"--opt1=value1", "--opt2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptions_xsHn1_cdQv0() {
        Options options = new Options();
        options.addOption("o", "opt", true, "description");
        String[] arguments = new String[]{"-o", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_zSXY0_Ztsb0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "--b", "value2", "--c"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_UHdl1_AZKt0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(false);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_GrKX2_dLcg0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "--b", "-c"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_aIgb3_aGvh0() {
        Options options = new Options();
        String[] arguments = new String[]{"--a", "--b", "--c"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_fCLq2_imTV0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "--b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_rcxQ0_lmUT0() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "value1", "--b=value2", "--c", "value3", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_QhHA2_meCr0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        try {
            CommandLine commandLine = new DefaultParser(true).parse(options, new String[]{"--longOpt", "value"}, null);
            assertEquals("value", commandLine.getParsedOptionValue("longOpt"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_UQEC2_vNHD0() {
        Options options = new Options();
        String[] arguments = {"-x", "y"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_WqJi1_SgFu0() {
        Options options = new Options();
        options.addOption("o", "opt", true, "description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-o", "value"}, null);
            assertEquals("value", commandLine.getOptionValue('o'));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_NPpd0_DCrc0() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_hInT1_dYpa0() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_CPHY2_uTnl0() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_jTsd3_zTlb0() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "1", "non-option", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_nmLs3_GhvN0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "1", "non-option"}, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_iIti0_lLqL0() {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "-b", "value2", "--c", "value3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_ZBLz2_jNaL0() {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "--b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_MKUN3_szzN0() {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "--b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("key1", "value1");
        properties.setProperty("key2", "value2");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_Jenz0_qweJ0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_hyJV2_lpOJ0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_BtbJ0_USRg0() {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_aZgA2_pYDM0() {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("key1", "value1");
        properties.setProperty("key2", "value2");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_fqRK0_qDOW0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NBBd3_pgyA0() {
        Options options = new Options();
        String[] arguments = {"1", "2", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_SPQn1_RSgv0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_kmSI2_MqWK0() {
        Options options = new Options();
        String[] arguments = {"-x", "y", "z"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_ckUf3_ZbTH0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_ZndD3_rxei0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_zQSH2_fnVZ0() {
        Options options = new Options();
        String[] arguments = {"--longOption", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_MWyN0_Kagn0() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-opt", "value"}, null);
            assertEquals("value", commandLine.getOptionValue("opt"));
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_dniq1_uosp0() {
        Options options = new Options();
        options.addOption("s", "shortOpt", true, "description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-s", "value"}, null);
            assertEquals("value", commandLine.getOptionValue("s"));
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_Aeug2_DcHG0() {
        Options options = new Options();
        options.addOption("longOpt", "longOpt", true, "description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--longOpt", "value"}, null);
            assertEquals("value", commandLine.getOptionValue("longOpt"));
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_Vhve3_TFYr0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-unknown"}, null);
            assertEquals("Unrecognized option: -unknown", commandLine.getOptionValue("-unknown"));
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -unknown", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_gsky0_IvSb0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_oMMW3_bLVr0() {
        Options options = new Options();
        String[] arguments = {"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_mzpj0_dpjA0() {
        Options options = new Options();
        options.addOption(new Option("a", "longA", true, "Description of longA"));
        options.addOption(new Option("b", "longB", false, "Description of longB"));
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "valueA", "-b", "valueB"}, null);
            assertEquals(2, commandLine.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_jIcU1_VAid0() {
        Options options = new Options();
        options.addOption(new Option("longA", "longA", true, "Description of longA"));
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--longA=valueA"}, null);
            assertEquals(1, commandLine.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_weRn2_tcgY0() {
        Options options = new Options();
        options.addOption(new Option("a", "longA", true, "Description of longA"));
        options.addOption(new Option("b", "longB", true, "Description of longB"));
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "valueA"}, null);
            assertEquals(1, commandLine.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_gtlz0_HKXI0() {
        Options options = new Options();
        String[] arguments = {"-S", "V1", "-L=V2", "-l=V3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_XXTi2_cAsP0() {
        Options options = new Options();
        String[] arguments = {"-S", "V1"};
        Properties properties = new Properties();
        properties.setProperty("key1", "value1");
        properties.setProperty("key2", "value2");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_uWXF2_jWEQ0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("key1", "value1");
        properties.setProperty("key2", "value2");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_akZj3_jpgj0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_ieIE2_VwVr0() {
        Options options = new Options();
        options.addOption("l", "longOpt", true, "description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--longOpt=hello"}, null);
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_TDWD3_FGJb0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"unknownToken"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_OYNc3_luPm0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_frne0_ASMZ0() {
        Options options = new Options();
        options.addRequiredOption("opt1", "longOpt1", true, "description1");
        options.addRequiredOption("opt2", "longOpt2", false, "description2");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-opt1", "value1", "-opt2"}, null);
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOptions_dGyr1_hQEC0() {
        Options options = new Options();
        options.addOption("o", "opt", true, "description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-o", "value", "--opt=anotherValue"}, null);
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_TWII2_HPYS0() {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "--longOption", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_YfUN3_apmU0() {
        Options options = new Options();
        String[] arguments = {"-a", "value1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_hYZT2_NOSS0() {
        Options options = new Options();
        Properties properties = new Properties();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "1"}, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_iQZt1_Gavt0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(false);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_MPUG2_ygLf0() {
        Options options = new Options();
        String[] arguments = new String[]{"-x", "y"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(false);
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_eqoG3_KsPi0() {
        Options options = new Options();
        String[] arguments = new String[]{"--a", "1", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(false);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredArgs_hJrN0_LHOX0() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-opt", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_eIZl2_pIEI0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-opt", "value"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaProperty_xFRk2_ZYvz0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-Dopt=value"};
        Properties properties = new Properties();
        properties.put("opt", "value");
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_FIih0_diDD0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_PwHn2_Mzam0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredArgs_SLXp3_Skmd0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Ljbj0_yoXO0() {
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        try {
            CommandLine cmd = new DefaultParser().parse(options, new String[]{"-a", "value"}, new Properties());
            assertEquals(cmd.getOptionValue("a"), "value");
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutProperties_gSFL1_ilKH0() {
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        try {
            CommandLine cmd = new DefaultParser().parse(options, new String[]{"-a", "value"}, null);
            assertEquals(cmd.getOptionValue("a"), "value");
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutProperties_vvQz1_PQSg0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        try {
            parser.parse(options, arguments, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_kBHo3_yMmm0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[0];
        try {
            parser.parse(options, arguments, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_tEEk0_wzRT0() {
        Options options = new Options();
        options.addOption("a", "a", true, "test option a");
        options.addOption("b", "b", true, "test option b");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_iWaM1_CyWN0() {
        Options options = new Options();
        options.addOption("a", "a", true, "test option a");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_gQjU2_rASP0() {
        Options options = new Options();
        options.addOption("a", "a", true, "test option a");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_EmptyExpectedOpts_DeBj0_vYRF0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[0], new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_joyW0_ddXR0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        try {
            CommandLine result = parser.parse(options, arguments, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LafR0_vWxh0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_ohnv3_fid1() {
        Options options = new Options();
        String[] arguments = {"-o", "value1", "-o", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected AmbiguousOptionException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -o", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_xltz3_fid1() {
        Options options = new Options();
        options.addRequiredOption("a", "longA", true, "description");
        try {
            new DefaultParser().parse(options, new String[]{}, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals(e.getMessage(), "Missing required option: a");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_FzCh4_flIl0_fid1() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        try {
            CommandLine commandLine = parser.parse(options, new String[]{"-a", "abc", "-x", "yz", "-z", "v"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_gDdt5_dmJo0_fid1() {
        DefaultParser parser = new DefaultParser(false);
        Options options = new Options();
        try {
            CommandLine commandLine = parser.parse(options, new String[]{"abcxyz"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_tOGX3_FDJM0_fid1() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--unknownOption"}, null);
            assertEquals(false, commandLine.hasOption("unknownOption"));
        } catch (ParseException e) {
            assertEquals("Unrecognized option: --unknownOption", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_TiVJ0_sZtO0_fid1() {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-opt", "value", "--long-opt", "value"}, null);
            assertEquals("value", commandLine.getOptionValue("opt"));
            assertEquals("value", commandLine.getOptionValue("long-opt"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_QGiX2_pEHA0_fid1() {
        Options options = new Options();
        options.addRequiredOption("opt", "long-opt", true, "description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-opt", "value", "--long-opt", "long-value"}, null);
            assertEquals("value", commandLine.getOptionValue("opt"));
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_rvwl1_gIYc0_fid1() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--long-option", "value1"}, null);
            fail("ParseException was not expected");
        } catch (ParseException e) {
            // expected
        }
    }
}