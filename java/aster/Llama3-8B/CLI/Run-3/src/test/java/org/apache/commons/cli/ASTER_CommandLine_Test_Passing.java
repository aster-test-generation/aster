/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Iterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    private Supplier<String> defaultValueSupplier;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_kjWD0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        String[] expected = new String[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_kqis0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        Option[] expectedOptions = Option.EMPTY_ARRAY;
        assert Arrays.equals(options, expectedOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_BSKw0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String result = commandLine.getOptionValue(option, "defaultValue");
        assertEquals("defaultValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_CARB0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("testOption");
        assertEquals("Expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_oXMX0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        String opt = "opt";
        String result = commandLine.getOptionValue(opt, defaultValue);
        assert result.equals("default");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_wthN0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("opt", "defaultValue");
        assertEquals("defaultValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_TMsA0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a');
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueNullOption_Gqrs0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<Integer> defaultValue = () -> 1;
        assertEquals(1, commandLine.getParsedOptionValue(option, defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueNullDefaultValue_ynDU1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Supplier<Integer> defaultValue = null;
        assertEquals(null, commandLine.getParsedOptionValue(option, defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_Iqzm0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("test");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_WSXp1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Supplier<Integer> defaultValue = () -> 10;
        assertEquals(20, commandLine.getParsedOptionValue('x', defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesEmptyOption_GELB1_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties properties = commandLine.getOptionProperties("");
        Assertions.assertNotNull(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesEmptyOption_GELB1_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties properties = commandLine.getOptionProperties("");
        Assertions.assertTrue(properties.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesValidOption_BQby2_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties properties = commandLine.getOptionProperties("test");
        Assertions.assertNotNull(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesValidOption_BQby2_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties properties = commandLine.getOptionProperties("test");
        Assertions.assertEquals(1, properties.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesValidOption_BQby2_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties properties = commandLine.getOptionProperties("test");
        Assertions.assertEquals("true", properties.getProperty("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_nRlE0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a', "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_Mlhp0_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_Mlhp0_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('a');
        assertEquals(String.valueOf('a'), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionTrue_JCiV0() throws Exception {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('a');
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionFalse_SDDW1() throws Exception {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('b');
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_sVnR1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] expected = {"-a", "-b", "-c"};
        String[] actual = commandLine.getOptionValues('a');
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_ckYJ0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionNotAdded_Elnp1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        assertFalse(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionNull_FFVh2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        assertFalse(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_Gcpy0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue('a', defaultValue);
        assert result.equals("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueDefaultValue_fBUm1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue('b', defaultValue);
        assert result.equals("default");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueNotNull_VeQb0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(option, defaultValue);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueNull_LQuo1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(option, defaultValue);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_PYcv1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assert iterator.hasNext();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_SEfI0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] expected = {"value1", "value2"};
        String opt = "opt";
        String[] result = commandLine.getOptionValues(opt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionTrue_uLhb0() throws Exception {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption("opt");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionFalse_cPcL1() throws Exception {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption("wrongOpt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_kXIv0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String value = commandLine.getOptionValue(option);
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithOptionAndDefaultValue_URJZ0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object result = commandLine.getParsedOptionValue(option, "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithOptionAndNoDefaultValue_CtEj1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object result = commandLine.getParsedOptionValue(option, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithOptionAndOptionalArg_pFWl2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        Object result = commandLine.getParsedOptionValue(option, "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithOptionAndRequiredArg_ObPd3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        Object result = commandLine.getParsedOptionValue(option, "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithOptionAndNoArg_SdIB4() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", false, "description");
        Object result = commandLine.getParsedOptionValue(option, "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithOptionAndValueSeparator_llXc5() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        option.setValueSeparator(',');
        Object result = commandLine.getParsedOptionValue(option, "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithOptionAndNoDescription_XfNW8() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, null);
        Object result = commandLine.getParsedOptionValue(option, "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithOptionAndMultipleValues_vFIf9() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        Object result = commandLine.getParsedOptionValue(option, "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesEmptyValues_Vujk1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        commandLine.getOptionValues(option);
        String[] result = commandLine.getOptionValues(option);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesSingleValue_ErVo2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.getValuesList().add("value");
        commandLine.getOptionValues(option);
        String[] result = commandLine.getOptionValues(option);
        assert result.length == 1;
        assert result[0].equals("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesMultipleValues_rMoI3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.getValuesList().add("value1");
        option.getValuesList().add("value2");
        commandLine.getOptionValues(option);
        String[] result = commandLine.getOptionValues(option);
        assert result.length == 2;
        assert result[0].equals("value1");
        assert result[1].equals("value2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesMultipleOptions_WNOl4() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "description1");
        option1.getValuesList().add("value1");
        Option option2 = new Option("option2", "description2");
        option2.getValuesList().add("value2");
        commandLine.getOptionValues(option1);
        commandLine.getOptionValues(option2);
        String[] result = commandLine.getOptionValues(option1);
        assert result.length == 1;
        assert result[0].equals("value1");
        result = commandLine.getOptionValues(option2);
        assert result.length == 1;
        assert result[0].equals("value2");
    }
}