/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescription_CBIY0() throws Exception {
        Option option = new Option("o", "option", false, "This is a test option");
        String expected = "[ Option o :: This is a test option :: ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndLongOptionAndDescription_GjXw1() throws Exception {
        Option option = new Option("o", "option", true, "This is a test option");
        String expected = "[ Option o --option :: This is a test option :: ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndArgsAndDescription_VmxI3() throws Exception {
        Option option = new Option("o", "option", true, "This is a test option");
        String expected = "[ Option o --option [ARG] :: This is a test option :: ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndArgsAndLongOptionAndDescription_Wskg4() throws Exception {
        Option option = new Option("o", "option", true, "This is a test option");
        String expected = "[ Option o --option [ARG...] :: This is a test option :: ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithNoArgCount_WATe3() {
        Option option = new Option("option", true, "description");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgOptionalArgTrue_cEKd0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgOptionalArgFalse_NDCd1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(false);
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOptionWithDifferentDescription_lFBg8() {
        Option option1 = new Option("a", "longA", true, "description1");
        Option option2 = new Option("a", "longA", true, "description2");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOptionWithDifferentHasArg_NWvX9() {
        Option option1 = new Option("a", "longA", true, "description");
        Option option2 = new Option("a", "longA", false, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_TzVU0() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        assertNotNull(values);
        String[] expected = {"value1", "value2"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithNullValues_MKch3() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        String[] values = option.getValues();
        assertNotNull(values);
        String[] expected = {""};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithEmptyValues_xhze4() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        String[] values = option.getValues();
        assertNotNull(values);
        String[] expected = {""};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleNullValues_kStB5() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        option.addValue(null);
        String[] values = option.getValues();
        assertNotNull(values);
        String[] expected = {null, null};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleEmptyValues_snrO6() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        option.addValue("");
        String[] values = option.getValues();
        assertNotNull(values);
        String[] expected = {"", ""};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValues_ylTr7() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        assertNotNull(values);
        String[] expected = {"value1", "value2", "value3"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValuesAndNull_yxrI8() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue(null);
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        assertNotNull(values);
        String[] expected = {"value1", null, "value2", "value3"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValuesAndEmpty_LIDz9() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("");
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        assertNotNull(values);
        String[] expected = {"value1", "", "value2", "value3"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValuesAndEmptyAndNull_ZZmD10() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("");
        option.addValue(null);
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        assertNotNull(values);
        String[] expected = {"value1", "", null, "value2", "value3"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_TzVU0_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        String[] expected = {"value1", "value2"};
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_TzVU0_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        String[] expected = {"value1", "value2"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithNullValues_MKch3_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        String[] values = option.getValues();
        String[] expected = {""};
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithNullValues_MKch3_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        String[] values = option.getValues();
        String[] expected = {""};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithEmptyValues_xhze4_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        String[] values = option.getValues();
        String[] expected = {""};
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithEmptyValues_xhze4_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        String[] values = option.getValues();
        String[] expected = {""};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleNullValues_kStB5_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        option.addValue(null);
        String[] values = option.getValues();
        String[] expected = {null, null};
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleNullValues_kStB5_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        option.addValue(null);
        String[] values = option.getValues();
        String[] expected = {null, null};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleEmptyValues_snrO6_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        option.addValue("");
        String[] values = option.getValues();
        String[] expected = {"", ""};
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleEmptyValues_snrO6_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        option.addValue("");
        String[] values = option.getValues();
        String[] expected = {"", ""};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValues_ylTr7_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        String[] expected = {"value1", "value2", "value3"};
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValues_ylTr7_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        String[] expected = {"value1", "value2", "value3"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValuesAndNull_yxrI8_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue(null);
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        String[] expected = {"value1", null, "value2", "value3"};
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValuesAndNull_yxrI8_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue(null);
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        String[] expected = {"value1", null, "value2", "value3"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValuesAndEmpty_LIDz9_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("");
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        String[] expected = {"value1", "", "value2", "value3"};
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValuesAndEmpty_LIDz9_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("");
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        String[] expected = {"value1", "", "value2", "value3"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValuesAndEmptyAndNull_ZZmD10_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("");
        option.addValue(null);
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        String[] expected = {"value1", "", null, "value2", "value3"};
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithMultipleValuesAndEmptyAndNull_ZZmD10_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("");
        option.addValue(null);
        option.addValue("value2");
        option.addValue("value3");
        String[] values = option.getValues();
        String[] expected = {"value1", "", null, "value2", "value3"};
        assertArrayEquals(expected, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_vnxw0_fuIO0() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDeprecatedAndDescription_gftg2_Bxmz0() throws Exception {
        Option option = new Option("o", "option", false, "This is a test option");
        option.addValue("value");
        String expected = "[ Option o :: This is a test option :: ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithArgCountGreaterThanZero_vFtq0_xCcS0() {
        Option option = new Option("option", true, "description");
        option.addValue("arg");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWhenHasValues_joqE1_PIxb0() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value");
        String result = option.getValue();
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenOptionEmpty_FqDt5_vNaF0() {
        Option option = new Option("", "testLongOption", true, "testDescription");
        option.addValue("testValue");
        assertEquals("Option '': test (DEPRECATED) [testValue]", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenOptionMultiCharacter_yyrX7_gkSD0() {
        Option option = new Option("testOption", "testLongOption", true, "testDescription");
        option.addValue("testValue");
        assertEquals("Option 'testOption' (DEPRECATED): test testValue", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgUnlimitedValuesEmptyValues_YSKP2_zsHW0() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgUnlimitedValuesNonEmptyValues_HaHH3_AbEf0() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_xfmi0_VevL0_fid2() {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenLongOptionNull_BJgw2_OYVM0_fid2() {
        Option option = new Option("test", null, true, "testDescription");
        assertEquals("Option 'test': test", option.toDeprecatedString());
    }
}