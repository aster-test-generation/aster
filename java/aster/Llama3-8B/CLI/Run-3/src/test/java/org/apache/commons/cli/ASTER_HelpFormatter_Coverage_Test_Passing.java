/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithHeaderAndFooter_USGk0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "This is the header";
        String footer = "This is the footer";
        Options options = new Options();
        int width = 80;
        int leftPad = 2;
        int descPad = 4;
        boolean autoUsage = false;
        helpFormatter.printHelp(new PrintWriter(System.out), width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithoutHeaderAndFooter_oOHs1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "";
        String footer = "";
        Options options = new Options();
        int width = 80;
        int leftPad = 2;
        int descPad = 4;
        boolean autoUsage = false;
        helpFormatter.printHelp(new PrintWriter(System.out), width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_HSrC0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        Assertions.assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorNotNull_fOcO0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.renderOptions(new StringBuffer(), 10, new Options(), 0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionOptNull_beJO2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Option option = new Option("opt", "longOpt", true, "description");
        helpFormatter.renderOptions(new StringBuffer(), 10, new Options().addOption(option), 0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionOptNotNull_TgQe3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Option option = new Option("o", "longOpt", true, "description");
        helpFormatter.renderOptions(new StringBuffer(), 10, new Options().addOption(option), 0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionNoLongOpt_qKWt5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Option option = new Option("o", true, "description");
        helpFormatter.renderOptions(new StringBuffer(), 10, new Options().addOption(option), 0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionNoArg_vPEQ7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Option option = new Option("o", "longOpt", false, "description");
        helpFormatter.renderOptions(new StringBuffer(), 10, new Options().addOption(option), 0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionNoDescription_vXRU12() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Option option = new Option("o", "longOpt", true, null);
        helpFormatter.renderOptions(new StringBuffer(), 10, new Options().addOption(option), 0, 0);
    }
}