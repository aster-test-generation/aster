/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithEmptyOptionsAndArguments_eLjd0() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        Assertions.assertArrayEquals(new String[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithSingleOptionAndArgument_KfUL1() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("o", "opt", true, "option");
        String[] arguments = {"-o", "value"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        Assertions.assertArrayEquals(new String[]{"--opt", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithMultipleOptionsAndArguments_ohbN2() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("o", "opt", true, "option");
        options.addOption("p", "path", true, "path");
        String[] arguments = {"-o", "value1", "-p", "value2"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        Assertions.assertArrayEquals(new String[]{"--opt", "value1", "--path", "value2"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithAmbiguousOption_dGxG3() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("o", "opt", true, "option");
        options.addOption("p", "path", true, "path");
        String[] arguments = {"-op"};
        boolean stopAtNonOption = true;
        try {
            parser.flatten(options, arguments, stopAtNonOption);
            Assertions.fail("Expected AmbiguousOptionException");
        } catch (ParseException e) {
            Assertions.assertTrue(e instanceof AmbiguousOptionException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithNonOptionArgument_MVSP4() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"non-option"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        Assertions.assertArrayEquals(new String[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOption_JkKB5() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-o", "value", "non-option"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        Assertions.assertArrayEquals(new String[]{"--opt", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithoutStopAtNonOption_mXsl6() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-o", "value", "non-option"};
        boolean stopAtNonOption = false;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        Assertions.assertArrayEquals(new String[]{"--opt", "value", "non-option"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithRequiredOption_ObtS7() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addRequiredOption("o", "opt", true, "option");
        String[] arguments = {"-o", "value"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        Assertions.assertArrayEquals(new String[]{"--opt", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithoutRequiredOption_Axin8() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addRequiredOption("o", "opt", true, "option");
        String[] arguments = {};
        boolean stopAtNonOption = true;
        try {
            parser.flatten(options, arguments, stopAtNonOption);
            Assertions.fail("Expected ParseException");
        } catch (ParseException e) {
            Assertions.assertTrue(e instanceof ParseException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOptionGroup_RUba9() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        String[] arguments = {"-o", "value"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        Assertions.assertArrayEquals(new String[]{"--opt", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithMultipleOptionGroups_hASE10() throws Exception {
        PosixParser parser = new PosixParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_EmptyOptions_EmptyArguments_VwrD0() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_EmptyOptions_SingleArgument_ujrh1() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"hello"};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[]{"hello"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_EmptyOptions_MultipleArguments_EAvh2() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"hello", "world", "java"};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[]{"hello", "world", "java"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_SingleOption_EmptyArguments_zyKy3() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        String[] arguments = {};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_SingleOption_SingleArgument_KvbZ4() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        String[] arguments = {"-o"};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[]{"--option"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_SingleOption_MultipleArguments_bqjt5() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        String[] arguments = {"-o", "hello", "world", "java"};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[]{"--option", "hello", "world", "java"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_MultipleOptions_EmptyArguments_TyPQ6() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("o", "option1", true, "description");
        options.addOption("p", "option2", true, "description");
        String[] arguments = {};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_MultipleOptions_SingleArgument_duaT7() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("o", "option1", true, "description");
        options.addOption("p", "option2", true, "description");
        String[] arguments = {"-o", "-p"};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[]{"--option1", "--option2"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_MultipleOptions_MultipleArguments_rler8() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("o", "option1", true, "description");
        options.addOption("p", "option2", true, "description");
        String[] arguments = {"-o", "hello", "-p", "world", "java"};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[]{"--option1", "hello", "--option2", "world", "java"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_StopAtNonOption_EmptyArguments_qSpC9() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {};
        String[] result = parser.flatten(options, arguments, true);
        Assertions.assertArrayEquals(new String[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_StopAtNonOption_SingleArgument_Mgxr10() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"hello"};
        String[] result = parser.flatten(options, arguments, true);
        Assertions.assertArrayEquals(new String[]{"hello"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithNoOptions_ZJzJ0() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"hello", "world"};
        String[] result = parser.flatten(options, arguments, true);
        Assertions.assertArrayEquals(new String[]{"hello", "world"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithShortOption_mdkB1() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("-a", true, "description");
        String[] arguments = new String[]{"-a", "hello", "world"};
        String[] result = parser.flatten(options, arguments, true);
        Assertions.assertArrayEquals(new String[]{"-a", "hello", "world"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithLongOption_cOBv2() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("--long", true, "description");
        String[] arguments = new String[]{"--long", "hello", "world"};
        String[] result = parser.flatten(options, arguments, true);
        Assertions.assertArrayEquals(new String[]{"--long", "hello", "world"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithAmbiguousOption_BwqD3() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("-a", true, "description");
        options.addOption("-b", true, "description");
        String[] arguments = new String[]{"-a", "-b", "hello", "world"};
        try {
            parser.flatten(options, arguments, true);
            Assertions.fail("Expected AmbiguousOptionException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithBurstToken_UXJG5() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-ab", "hello", "world"};
        String[] result = parser.flatten(options, arguments, true);
        Assertions.assertArrayEquals(new String[]{"-a", "-b", "hello", "world"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOption_EAza7() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "hello", "world", "non-option", "foo", "bar"};
        String[] result = parser.flatten(options, arguments, false);
        Assertions.assertArrayEquals(new String[]{"-a", "hello", "world", "non-option"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithMultipleOptions_NhST8() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("-a", true, "description");
        options.addOption("-b", true, "description");
        String[] arguments = new String[]{"-a", "-b", "hello", "world"};
        String[] result = parser.flatten(options, arguments, true);
        Assertions.assertArrayEquals(new String[]{"-a", "-b", "hello", "world"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOptionGroup_Zsyi9() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("-a", true, "description"));
        group.addOption(new Option("-b", true, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a", "-b", "hello", "world"};
        String[] result = parser.flatten(options, arguments, true);
        Assertions.assertArrayEquals(new String[]{"-a", "-b", "hello", "world"}, result);
    }
}