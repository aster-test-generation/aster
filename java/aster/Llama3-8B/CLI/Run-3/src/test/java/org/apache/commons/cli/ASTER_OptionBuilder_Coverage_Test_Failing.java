/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalse_ikZb1_mjUG0() {
        OptionBuilder.hasArg(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrue_mssc0_ZSID0() {
        OptionBuilder.hasArg(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgsWithDefault_Farc1_Gkok0() {
        OptionBuilder.hasOptionalArgs();
        assertEquals(false, OptionBuilder.isRequired(false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_dILC0_fGRq0() {
        OptionBuilder isRequired = OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithLongOptReturnInstance_pBiU1_rcLk0() {
        String newLongopt = "testLongopt";
        OptionBuilder result = OptionBuilder.withLongOpt(newLongopt).isRequired(false);
        assertEquals(result.isRequired(), false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparatorReturnInstance_vSrg1_uETY0() {
        OptionBuilder result = OptionBuilder.withValueSeparator();
        assertEquals(true, result.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgCount_SLVe2_enWm0() {
        OptionBuilder.hasOptionalArg();
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator_sIHA0_tYdH0() {
        char sep = ',';
        OptionBuilder withValueSeparator = OptionBuilder.withValueSeparator(sep);
        assertEquals(sep, OptionBuilder.isRequired(false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithArgName_XbRO0_icrV0() {
        String expectedName = "testName";
        OptionBuilder actual = OptionBuilder.withArgName(expectedName);
        assertEquals(expectedName, OptionBuilder.isRequired(false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_ZmYI0_glSQ1() {
        OptionBuilder result = OptionBuilder.hasArgs(5);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparatorInstance_etpB1_HSWi0() {
        char sep = '/';
        OptionBuilder withValueSeparator = OptionBuilder.withValueSeparator(sep);
        assertEquals(true, withValueSeparator.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithArgNameNull_sXLj1_smPw0() {
        String expectedName = null;
        OptionBuilder actual = OptionBuilder.withArgName(expectedName);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithZero_IvgN1_InBD1_1() {
        OptionBuilder result = OptionBuilder.hasArgs(0);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithArgName_XbRO0_icrV0_fid2() {
        String expectedName = "org.apache.commons.cli.OptionBuilder@5baec14d";
        OptionBuilder actual = OptionBuilder.withArgName(expectedName);
        assertEquals(expectedName, OptionBuilder.isRequired(false));
    }
}