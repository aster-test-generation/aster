/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_FVRU0() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        Class<?> clazz = String.class;
        Object obj = clazz;
        Object result = TypeHandler.createValue("test", obj);
        assertEquals(clazz, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_ThrowsParseException_LdUf2_1() throws org.apache.commons.cli.ParseException {
        String string = "invalidFile.txt";
        ParseException exception = assertThrows(ParseException.class, () -> TypeHandler.openFile(string));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_ThrowsParseException_LdUf2() throws org.apache.commons.cli.ParseException {
        String string = "invalidFile.txt";
        ParseException exception = assertThrows(ParseException.class, () -> TypeHandler.openFile(string));
        assertTrue(exception != null);
    }
}