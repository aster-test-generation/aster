/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    private OptionGroup optionGroup;
    Options options;
    private Map<String, OptionGroup> optionGroups = new LinkedHashMap<>();
    private List<Object> requiredOpts = new ArrayList<>();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionTrue_snvV0() throws Exception {
        Options options = new Options();
        boolean result = options.hasLongOption("--test");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_hmVZ0() throws Exception {
        Options options = new Options();
        Collection<Option> optionsCollection = options.getOptions();
        assert !optionsCollection.isEmpty();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_iaVK0() throws Exception {
        Options options = new Options();
        String result = options.toString();
        assertEquals("[ Options: [ short [] [ long  ]]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionShortOpt_oyeu0() throws Exception {
        Options options = new Options();
        Option option = options.getOption("a");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionLongOpt_EwGs1() throws Exception {
        Options options = new Options();
        Option option = options.getOption("--abc");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_wWfs0() throws Exception {
        Options options = new Options();
        options.addRequiredOption("-a", "--alpha", true, "Alpha option");
        assertEquals(options.getOption("-a"), new Option("-a", "--alpha", true, "Alpha option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_hSXF0() throws Exception {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptionsExactMatch_mVta0() throws Exception {
        List<String> result = options.getMatchingOptions("foo");
        assert result.size() == 1;
        assert result.get(0).equals("foo");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptionsPartialMatch_CyvB1() throws Exception {
        List<String> result = options.getMatchingOptions("foo-bar");
        assert result.size() > 0;
        assert result.contains("foo-bar");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptionsNoMatch_rJIc2() throws Exception {
        List<String> result = options.getMatchingOptions("baz");
        assert result.size() == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptionsMultipleMatches_bqeN3() throws Exception {
        List<String> result = options.getMatchingOptions("foo");
        assert result.size() > 1;
        assert result.contains("foo");
        assert result.contains("foo-abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_hQYX0() throws Exception {
        Options options = new Options();
        Option opt = new Option("option", "longOption", true, "description");
        OptionGroup optionGroup = options.getOptionGroup(opt);
        assertNotNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_kaFM0() throws Exception {
        Options options = new Options();
        options.addOption("o", "opt", true, "description");
        options.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionFalse_CplX1() throws Exception {
        Options options = new Options();
        assertFalse(options.hasShortOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_nnxG0() throws Exception {
        Options options = new Options();
        options.addOption("test", false, "Test description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_eLkB0() throws Exception {
        Options options = new Options();
        Option opt = new Option("a", "longOpt", true, "description");
        options.addOption(opt);
        assertEquals(opt, options.getOption("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortOpt_QnUV1() throws Exception {
        Options options = new Options();
        Option opt = new Option("a", true, "description");
        options.addOption(opt);
        assertEquals(opt, options.getOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithMultipleOptions_YNtF3() throws Exception {
        Options options = new Options();
        Option opt1 = new Option("a", true, "description");
        Option opt2 = new Option("b", true, "description");
        options.addOption(opt1);
        options.addOption(opt2);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_SLcj0() throws Exception {
        Options options = new Options();
        options.addOption("test", "test description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_RxeJ1() throws Exception {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionTrue_cLRQ0() throws Exception {
        Options options = new Options();
        boolean result = options.hasOption("-a");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionFalse_cHyZ1() throws Exception {
        Options options = new Options();
        boolean result = options.hasOption("-b");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionLongOptionTrue_Mzbc2() throws Exception {
        Options options = new Options();
        boolean result = options.hasOption("--abc");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupRequiredOptionGroup_EvgH0() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        options.addOptionGroup(group);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_MUWZ0() throws Exception {
        Options options = new Options();
        Options optionsToBeAdded = new Options();
        optionsToBeAdded.addOption("opt1", "longOpt1", true, "description1");
        optionsToBeAdded.addOption("opt2", "longOpt2", false, "description2");
        options.addOptions(optionsToBeAdded);
        assert options.getOptions().size() == 2;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithDuplicateKey_UlzB1() throws Exception {
        Options options = new Options();
        Options optionsToBeAdded = new Options();
        optionsToBeAdded.addOption("opt1", "longOpt1", true, "description1");
        optionsToBeAdded.addOption("opt1", "longOpt2", false, "description2");
        try {
            options.addOptions(optionsToBeAdded);
            assert false;
        } catch (IllegalArgumentException e) {
            assert e.getMessage().equals("Duplicate key: opt1");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithOptionGroup_wGgi2() throws Exception {
        Options options = new Options();
        Options optionsToBeAdded = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("opt1", "longOpt1", true, "description1"));
        group.addOption(new Option("opt2", "longOpt2", false, "description2"));
        optionsToBeAdded.addOptionGroup(group);
        options.addOptions(optionsToBeAdded);
        assert options.getOptionGroups().size() == 1;
    }
}