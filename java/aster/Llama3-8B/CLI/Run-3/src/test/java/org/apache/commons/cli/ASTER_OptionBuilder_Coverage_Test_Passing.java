/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_ThrowsIllegalArgumentException_WhenLongOptionIsNull_GQWD0() throws java.lang.IllegalArgumentException {
        try {
            OptionBuilder.create();
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("must specify longopt", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_ReturnsOption_WhenLongOptionIsNotNull_AkkW1() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("testLongOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithZero_IvgN1_InBD1_2() {
        OptionBuilder result = OptionBuilder.hasArgs(0);
        assertEquals(OptionBuilder.isRequired(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithArgNameNull_sXLj1_smPw0_fid2() {
        String expectedName = null;
        OptionBuilder actual = OptionBuilder.withArgName(expectedName);
        assertNull(null);
    }
}