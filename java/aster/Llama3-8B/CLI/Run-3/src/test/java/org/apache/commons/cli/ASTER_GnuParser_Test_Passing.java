/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_EmptyOptions_EmptyArguments_StopAtNonOption_FlattenEmptyArray_WGAL0() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[0];
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert result.length == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_EmptyOptions_SingleArgument_StopAtNonOption_FlattenSingleArgument_kqGT1() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"test"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert result.length == 1;
        assert result[0].equals("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_EmptyOptions_MultipleArguments_StopAtNonOption_FlattenMultipleArguments_jPcR2() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"test1", "test2", "test3"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert result.length == 3;
        assert result[0].equals("test1");
        assert result[1].equals("test2");
        assert result[2].equals("test3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_OptionsWithShortOption_SingleArgument_StopAtNonOption_FlattenSingleArgument_TjgO3() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("-a", true, "test");
        String[] arguments = new String[]{"-a test"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert result.length == 2;
        assert result[0].equals("-a");
        assert result[1].equals("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_OptionsWithLongOption_SingleArgument_StopAtNonOption_FlattenSingleArgument_IfUI4() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("long-a", true, "test");
        String[] arguments = new String[]{"--long-a test"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert result.length == 2;
        assert result[0].equals("--long-a");
        assert result[1].equals("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_OptionsWithShortOption_MultipleArguments_StopAtNonOption_FlattenMultipleArguments_jeyw5() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("-a", true, "test");
        String[] arguments = new String[]{"-a test1", "test2", "test3"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert result.length == 3;
        assert result[0].equals("-a");
        assert result[1].equals("test1");
        assert result[2].equals("test2 test3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_OptionsWithLongOption_MultipleArguments_StopAtNonOption_FlattenMultipleArguments_yRuj6() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("long-a", true, "test");
        String[] arguments = new String[]{"--long-a test1", "test2", "test3"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert result.length == 3;
        assert result[0].equals("--long-a");
        assert result[1].equals("test1");
        assert result[2].equals("test2 test3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_OptionsWithShortOption_SingleArgument_StopAtNonOption_FlattenSingleArgument_StopAtNonOption_ZHXz7() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("-a", true, "test");
        String[] arguments = new String[]{"-a test"};
        boolean stopAtNonOption = false;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert result.length == 1;
        assert result[0].equals("test");
    }
}