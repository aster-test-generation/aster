/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_msaQ0_HZmw0() throws Exception {
        org.apache.commons.cli.DefaultParser defaultParser = new org.apache.commons.cli.DefaultParser(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArguments_kuUP3_qJYO0() throws Exception {
        Options options = mock(Options.class);
        String[] arguments = new String[1];
        arguments[0] = "test";
        DefaultParser defaultParser = new DefaultParser(false);
        CommandLine result = defaultParser.parse(options, arguments, new Properties(), false);
        verify(defaultParser, times(1)).parse(options, arguments, new Properties(), false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNoArguments_GjmX2_hEfd0() throws Exception {
        Options options = mock(Options.class);
        DefaultParser defaultParser = new DefaultParser(false);
        defaultParser.parse(options, new String[0], false);
        verify(defaultParser, times(1)).parse(options, new String[0], false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_hqDa0_oKLb0() throws Exception {
        Options options = mock(Options.class);
        Option currentOption = mock(Option.class);
        DefaultParser defaultParser = new DefaultParser(true);
    }
}