/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SingleOptionWithOpt_sqJd1() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("a", "Description A"));
        String result = optionGroup.toString();
        assertEquals("[ -a, Description A ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SingleOptionWithoutOpt_Smke2() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option(null, "Description B"));
        String result = optionGroup.toString();
        assertEquals("[ --Description B ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MultipleOptionsWithOpt_dUzQ3() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("a", "Description A"));
        optionGroup.getOptions().add(new Option("b", "Description B"));
        String result = optionGroup.toString();
        assertEquals("[ -a, Description A, -b, Description B ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MultipleOptionsWithoutOpt_RLZh4() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option(null, "Description C"));
        optionGroup.getOptions().add(new Option(null, "Description D"));
        String result = optionGroup.toString();
        assertEquals("[ --Description C, --Description D ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MixedOptions_XZXu5() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("a", "Description A"));
        optionGroup.getOptions().add(new Option(null, "Description B"));
        optionGroup.getOptions().add(new Option("c", "Description C"));
        String result = optionGroup.toString();
        assertEquals("[ -a, Description A, --Description B, -c, Description C ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithDescription_RJRx6() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("a", "Description A"));
        optionGroup.getOptions().add(new Option(null, "Description B with space"));
        String result = optionGroup.toString();
        assertEquals("[ -a, Description A, --Description B with space ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithMultipleDescriptions_guGO7() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("a", "Description A with space"));
        optionGroup.getOptions().add(new Option(null, "Description B with space, and another"));
        String result = optionGroup.toString();
        assertEquals("[ -a, Description A with space, --Description B with space, and another ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithCommasInDescription_bfsD8() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("a", "Description A, with, commas"));
        optionGroup.getOptions().add(new Option(null, "Description B, with, commas, too"));
        String result = optionGroup.toString();
        assertEquals("[ -a, Description A, with, commas, --Description B, with, commas, too ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithQuotesInDescription_HYOW9() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("a", "Description A with quotes \"hello\""));
        optionGroup.getOptions().add(new Option(null, "Description B with quotes \"hello\", and another"));
        String result = optionGroup.toString();
        assertEquals("[ -a, Description A with quotes \"hello\", --Description B with quotes \"hello\", and another ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithNewlinesInDescription_dLNI10() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("a", "Description A with newlines\nand another"));
        optionGroup.getOptions().add(new Option(null, "Description B with newlines\nand another"));
        String result = optionGroup.toString();
        assertEquals("[ -a, Description A with newlines\nand another, --Description B with newlines\nand another ]", result);
    }
}