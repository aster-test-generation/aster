/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_rxKN0() throws Exception {
        TypeHandler typeHandler = new TypeHandler();
        String string = "test";
        Object obj = new Object();
        Object result = TypeHandler.createValue(string, obj);
        assertEquals(obj, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFile_NVFD0() throws Exception {
        String string = "testFile";
        File file = TypeHandler.createFile(string);
        assertEquals("testFile", file.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClass_ozCT0() throws ParseException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, ClassNotFoundException {
        String className = "java.lang.String";
        Class<?> result = TypeHandler.createClass(className);
        assertEquals(String.class, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefault_OtiD0() throws Exception {
        TypeHandler result = TypeHandler.getDefault();
        assertEquals(TypeHandler.getDefault(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_sxcj0() throws Exception {
        String string = "test";
        Class<String> clazz = String.class;
        assertEquals("test", TypeHandler.createValue(string, clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueThrowsException_usPt1() throws Exception {
        String string = "test";
        Class<Integer> clazz = Integer.class;
        assertThrows(ParseException.class, () -> TypeHandler.createValue(string, clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDate_LMyh0_1() throws Exception {
        Date result = TypeHandler.createDate("2022-01-01");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDate_LMyh0_2() throws Exception {
        Date result = TypeHandler.createDate("2022-01-01");
        assertEquals(2022, result.getYear());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDate_LMyh0_3() throws Exception {
        Date result = TypeHandler.createDate("2022-01-01");
        assertEquals(1, result.getMonth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDate_LMyh0_4() throws Exception {
        Date result = TypeHandler.createDate("2022-01-01");
        assertEquals(1, result.getDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_HHPA0() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        Converter<String, ?> converter = typeHandler.getConverter(String.class);
        assertEquals(Converter.DEFAULT, converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterDefault_EgWv1() throws Exception {
        TypeHandler typeHandler = new TypeHandler();
        Converter<Integer, ?> converter = typeHandler.getConverter(Integer.class);
        assertEquals(Converter.DEFAULT, converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFiles_qidD0() throws Exception {
        File[] result = TypeHandler.createFiles("test");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateURL_AgLu0() throws Exception {
        URL expected = new URL("https://www.example.com");
        URL actual = TypeHandler.createURL("https://www.example.com");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateURLThrowsParseException_gEcr1() throws Exception {
        assertThrows(ParseException.class, () -> TypeHandler.createURL("invalid url"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObject_Zwjt0() throws ParseException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, ClassNotFoundException {
        String className = "java.lang.String";
        Object result = TypeHandler.createObject(className);
        assertEquals(String.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_hFPZ0() throws Exception {
        assertEquals(10, TypeHandler.createNumber("10"));
    }
}