/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    private Properties properties;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_Fjst0() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        CommandLine result = parser.parse(options, arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_uvja0_1() throws Exception {
        DefaultParser defaultParser = new DefaultParser(true);
        assertEquals(defaultParser.getClass(), DefaultParser.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_EmptyList_cRNV0() throws Exception {
        DefaultParser parser = new DefaultParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_NonEmptyList_LyCg1() throws Exception {
        DefaultParser parser = new DefaultParser();
        parser.checkRequiredOptions();
        MissingOptionException e = assertThrows(MissingOptionException.class, () -> parser.checkRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_maVV0() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithValidOption_Ciji0() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithUnknownToken_OqDL1() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abcx");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithValidOptionAndValue_IOcV2() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc=x");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithValidOptionAndMultipleValues_ZTmm3() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc=x,y,z");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_SqPs0() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        CommandLine result = parser.parse(options, arguments, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_MODY1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_DLlC2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_RhuA4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a b c d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_ystF5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a b c d e");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_dvtQ6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a b c d e f");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_KBrt0() throws Exception {
        assertEquals(1, DefaultParser.indexOfEqual("a=1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_VVHV0() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a");
        assertEquals(null, parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_eVyM1() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a b");
        assertEquals(null, parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_RWST2() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a=b");
        assertEquals(null, parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_LXQd3() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a=b c");
        assertEquals(null, parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_NsiF4() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a");
        parser.handleConcatenatedOptions("b");
        assertEquals(null, parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_Xwxw5() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a=b c=d");
        assertEquals(null, parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_Yrri6() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("a=b c=d e");
        assertEquals(null, parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_GeIy0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc");
        assertEquals(true, parser.stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_eYdi1() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        parser.handleConcatenatedOptions("abc");
        assertEquals(false, parser.stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_MJwP2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-abc");
        assertEquals(true, parser.stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_ewqK3() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        parser.handleConcatenatedOptions("-abc");
        assertEquals(false, parser.stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_EKJZ4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc-");
        assertEquals(true, parser.stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_pWMb5() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        parser.handleConcatenatedOptions("abc-");
        assertEquals(false, parser.stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_BybT6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-abc-");
        assertEquals(true, parser.stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_EPQe0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_yVcw1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_famd2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_Rsxc2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--longOption", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_eVhx3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithValidOption_eBcM0() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc");
        assertEquals("", "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithInvalidOption_tXux1() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abcx");
        assertEquals("", "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithOptionAndValue_yMIf3() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc=x");
        assertEquals("", "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithOptionAndValueAndUnknownToken_QeLk4() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc=xz");
        assertEquals("", "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_FZFp0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_bIEI2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_ZKMU2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--longOption"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_EfPq3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_Lnzm0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_iWVA1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_brKj2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionWithoutArgument_HRTG3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_knHA0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_yfNF1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_vDEp2() throws Exception {
        Options options = new Options();
        options.addOption("a", "a", true, "a option");
        String[] arguments = new String[]{"-a", "1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_ryfm3() throws Exception {
        Options options = new Options();
        options.addOption("a", "a", true, "a option");
        String[] arguments = new String[]{"--a", "1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_utXC0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "value1", "--opt2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_XXvi2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-o", "value1", "-p", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndArgument_MRNH3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1=value1", "--opt2=value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_vago0() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "--b", "2", "--c"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_PnxN1() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_ACam2() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_TnGQ3() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "--b", "2", "-d"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_IHtL0() throws Exception {
        Options options = new Options();
        options.addRequiredOption("opt1", "longOpt1", true, "description");
        options.addRequiredOption("opt2", "longOpt2", false, "description");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"--opt1", "value1", "--opt2"}, new Properties(), false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptions_OIor1() throws Exception {
        Options options = new Options();
        options.addOption("o", "opt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"-o", "value"}, new Properties(), false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_JZMG2() throws Exception {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, new String[]{"--unknownOption"}, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_eUqb3() throws Exception {
        Options options = new Options();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{}, new Properties(), false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_HVyG0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_RAWo1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_Gxbt2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_EuRG3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mTpi0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutProperties_WOWD1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_dpJT2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "a", true, "a description");
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_wShk0() throws Exception {
        Options options = new Options();
        String[] arguments = {"--opt1", "value1", "--opt2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_mEIV1() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_oXOA3() throws Exception {
        Options options = new Options();
        String[] arguments = {"unknownToken"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_BUQs0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "value1", "--opt2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value1", cmd.getOptionValue("--opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_BUQs0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "value1", "--opt2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value2", cmd.getOptionValue("--opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptions_MAWl1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value1", cmd.getOptionValue("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptions_MAWl1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value2", cmd.getOptionValue("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_iJEK2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "value1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value1", cmd.getOptionValue("--opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_lkYR3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"unknownToken"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithOptionValue_afqn4() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.options.addOption(new Option("a", "arg1", true, "option1"));
        parser.handleConcatenatedOptions("a foo");
        assertEquals("foo", parser.currentOption.getValue());
    }
}