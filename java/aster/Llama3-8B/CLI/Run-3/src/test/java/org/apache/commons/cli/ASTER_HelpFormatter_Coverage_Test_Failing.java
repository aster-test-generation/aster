/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_FSVA0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test string";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a\n    test string";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText2_mPKV1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 15;
        String text = "This is a string string";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a string\n";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText3_nrtt2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a very long test string that will wrap around";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a\n    very long test\n    string that will wrap\n    around";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText2_mPKV1_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 15;
        String text = "This is a test string";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a test\n";
        assertEquals(expected, sb.toString());
    }
}