/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequiredOptionAlreadyPresent_OXYF0_1() {
        Options options = new Options();
        Option opt = new Option("a", "a", true, "Description");
        opt.setRequired(true);
        options.addOption(opt);
        Option existingOpt = options.getOption("a");
        options.addOption(opt);
        assertTrue(existingOpt.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequiredOptionAlreadyPresent_OXYF0_2() {
        Options options = new Options();
        Option opt = new Option("a", "a", true, "Description");
        opt.setRequired(true);
        options.addOption(opt);
        Option existingOpt = options.getOption("a");
        options.addOption(opt);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequiredOptionNotPresent_fMYB1() {
        Options options = new Options();
        Option opt = new Option("a", "a", true, "Description");
        opt.setRequired(true);
        options.addOption(opt);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_DuplicateKey_ThrowsIllegalArgumentException_HQPS0() {
        Options options = new Options();
        Option opt = new Option("key", "description");
        options.addOption(opt);
        Options optionsToBeAdded = new Options();
        optionsToBeAdded.addOption(opt);
        try {
            options.addOptions(optionsToBeAdded);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Duplicate key: key", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_NoDuplicateKey_AddsOptionsSuccessfully_Djgr1() {
        Options options = new Options();
        Option opt = new Option("key", "description");
        options.addOption(opt);
        Options optionsToBeAdded = new Options();
        optionsToBeAdded.addOption(new Option("otherKey", "otherDescription"));
        options.addOptions(optionsToBeAdded);
        assertEquals(2, options.getOptions().size());
    }
}