/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_tVVF0() throws Exception {
        Option option = new Option("a", "longA", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs2_eJGT1() throws Exception {
        Option option = new Option("b", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs3_gbHi2() throws Exception {
        Option option = new Option("c", "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescriptionWithAllParameters_qlkN0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescriptionWithTwoParameters_gBMi1() throws Exception {
        Option option = new Option("option", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescriptionWithOneParameter_CafV2() throws Exception {
        Option option = new Option("option", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredTrue_ectl0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredFalse_QNJP1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(false);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithAllParams_qHNM0() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithTwoParams_jzEO1() throws Exception {
        Option option = new Option("o", true, "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithOneParam_hBgH2() throws Exception {
        Option option = new Option("o", "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_mtTQ0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoIndex_gqhz1() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertEquals(null, option.getValue(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_PynC0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator2_ErHk1() throws Exception {
        Option option = new Option("option", true, "description");
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator3_IiFj2() throws Exception {
        Option option = new Option("option", "description");
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_BWzM0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setDescription("newDescription");
        assertEquals("newDescription", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringNotDeprecated_YONs0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_PiQZ0() throws Exception {
        Option option = new Option("a", "a", true, "description");
        assertEquals(true, option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_Mqfb1() throws Exception {
        Option option1 = new Option("a", "a", true, "description");
        Option option2 = new Option("b", "b", true, "description");
        assertEquals(false, option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_ZhZm2() throws Exception {
        Option option = new Option("a", "a", true, "description");
        assertEquals(false, option.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_JhJM3() throws Exception {
        Option option = new Option("a", "a", true, "description");
        Object obj = new Object();
        assertEquals(false, option.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsEqualOptions_hJDV4() throws Exception {
        Option option1 = new Option("a", "a", true, "description");
        Option option2 = new Option("a", "a", true, "description");
        assertEquals(true, option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithAllParams_bpdS0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithTwoParams_hwWN1() throws Exception {
        Option option = new Option("b", true, "description");
        assertEquals("b", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithOneParam_pReZ2() throws Exception {
        Option option = new Option("c", "description");
        assertEquals("c", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_AfBO0_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("description", deprecatedAttributes.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_AfBO0_2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("1.0", deprecatedAttributes.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_JmJw1_1() throws Exception {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("description", deprecatedAttributes.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_JmJw1_2() throws Exception {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("1.0", deprecatedAttributes.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_XRuJ2_1() throws Exception {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("description", deprecatedAttributes.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_XRuJ2_2() throws Exception {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("1.0", deprecatedAttributes.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndLongOption_KUmg0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("[ Option a longOption [ARG] :: description :: ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescription_FjMv1() throws Exception {
        Option option = new Option("a", "description");
        assertEquals("[ Option a :: description :: ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndLongOptionAndArg_Rgjj2() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("[ Option a longOption [ARG...] :: description :: ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndLongOptionAndNoArg_JKzO4() throws Exception {
        Option option = new Option("a", "longOption", false, "description");
        assertEquals("[ Option a longOption :: description :: ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId_aiXC0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId2_mXPd1() throws Exception {
        Option option = new Option("b", true, "description");
        assertEquals('b', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId3_zkvL2() throws Exception {
        Option option = new Option("c", "description");
        assertEquals('c', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_DKTS0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType2_TYgm1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(Integer.class);
        assertEquals(Integer.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType3_PALq2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(Double.class);
        assertEquals(Double.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_withNullOption_gMGz0() throws Exception {
        Option option = new Option(null, "longOption", true, "description");
        assertEquals("longOption", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_withOption_DtJC1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("option", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithoutValues_FoyM1() throws Exception {
        Option option = new Option("a", "long-a", true, "description");
        String[] result = option.getValues();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeWithAllParameters_tgqE0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(option.getType(), option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeWithTwoParameters_pBMe1() throws Exception {
        Option option = new Option("option", true, "description");
        assertEquals(option.getType(), option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeWithOneParameter_dabP2() throws Exception {
        Option option = new Option("option", "description");
        assertEquals(option.getType(), option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgTrue_UddE0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.acceptsArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgFalseNoArg_RoHq1() throws Exception {
        Option option = new Option("o", "option", false, "description");
        boolean result = option.acceptsArg();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgFalseOptionalArg_nPmR2() throws Exception {
        Option option = new Option("o", "option", false, "description");
        option.setOptionalArg(true);
        boolean result = option.acceptsArg();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgTrueOptionalArg_fBny3() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.setOptionalArg(true);
        boolean result = option.acceptsArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithLongOption_MpgS0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        boolean result = option.hasLongOpt();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithoutLongOption_aTTs1() throws Exception {
        Option option = new Option("a", "description");
        boolean result = option.hasLongOpt();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearValues_phaG0() throws Exception {
        Option option = new Option("a", "longA", true, "description");
        option.clearValues();
        List<String> values = new ArrayList<>();
        assert values.equals(option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndArgCountGreaterThanZero_wLlF0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndArgCountEqualUnlimitedValues_KiCi1() throws Exception {
        Option option = new Option("o", "option", false, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndArgCountZero_kRAk2() throws Exception {
        Option option = new Option("o", "option", false, "description");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutValues_ZKhj1() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertNull(option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedFalse_WSCe1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.isDeprecated();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithNoArg_vtRf0() throws Exception {
        Option option = new Option("a", "a", false, "description");
        option.processValue("value");
        fail("Expected IllegalArgumentException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithAllParams_Fmwx0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("arg", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithTwoParams_ZfWX1() throws Exception {
        Option option = new Option("a", true, "description");
        assertEquals("arg", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithOneParam_QsvK2() throws Exception {
        Option option = new Option("a", "description");
        assertEquals("arg", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgTrue_BNoM0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgFalse_yhAH1() throws Exception {
        Option option = new Option("o", "option", false, "description");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgTrue_JeEE0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.requiresArg();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgFalse_jpaM1() throws Exception {
        Option option = new Option("o", "option", false, "description");
        boolean result = option.requiresArg();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredWithRequiredTrue_GuPX0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredWithRequiredFalse_FcPD1() throws Exception {
        Option option = new Option("o", "option", false, "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList_ZJkX0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        List<String> values = option.getValuesList();
        List<String> expected = new ArrayList<>();
        assert values.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList2_mchr1() throws Exception {
        Option option = new Option("option", true, "description");
        List<String> values = option.getValuesList();
        List<String> expected = new ArrayList<>();
        assert values.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList3_EwqL2() throws Exception {
        Option option = new Option("option", "description");
        List<String> values = option.getValuesList();
        List<String> expected = new ArrayList<>();
        assert values.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithArg_VnWJ0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("arg");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithoutArg_dkAo1() throws Exception {
        Option option = new Option("o", "option", false, "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameNullArgName_mVrr2() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.setArgName(null);
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_UdPw0() throws Exception {
        Option option = new Option("a", "a", true, "description");
        boolean result = option.addValue("value");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType3_tuQo2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(Boolean.class);
        assertEquals(Boolean.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullValue_sefG0() throws Exception {
        Option option = new Option("a", "longA", true, "description");
        String result = option.getValue("default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoArgOption_WlTp2() throws Exception {
        Option option = new Option("a", false, "description");
        String result = option.getValue("default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoDescription_tYes4() throws Exception {
        Option option = new Option("a", "longA", true, null);
        String result = option.getValue("default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullDefaultValue_Mjeg5() throws Exception {
        Option option = new Option("a", "longA", true, "description");
        String result = option.getValue(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyDefaultValue_ZYEX6() throws Exception {
        Option option = new Option("a", "longA", true, "description");
        String result = option.getValue("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonEmptyDefaultValue_ARjI7() throws Exception {
        Option option = new Option("a", "longA", true, "description");
        String result = option.getValue("nonEmpty");
        assertEquals("nonEmpty", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoOption_lalN8() throws Exception {
        Option option = new Option("", "longA", true, "description");
        String result = option.getValue("default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoLongOption_PLfn9() throws Exception {
        Option option = new Option("a", "", true, "description");
        String result = option.getValue("default");
        assertEquals("default", result);
    }
}