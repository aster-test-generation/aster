/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithClass_ZeBy0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWhenHasNoValues_sMlf0() {
        Option option = new Option("option", "longOption", false, "description");
        String result = option.getValue();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullValue_klEN0() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "default";
        String result = option.getValue(defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenNotDeprecated_gUjh0() {
        Option option = new Option("test", "testLongOption", true, "testDescription");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithNoArgsAllowed_fQor2() {
        Option option = new Option("o", false, "test");
        try {
            option.processValue("abc");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("NO_ARGS_ALLOWED", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithSeparatorAndNoArgsAllowed_JMZw3() {
        Option option = new Option("o", false, "test");
        try {
            option.processValue("a,b");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("NO_ARGS_ALLOWED", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_mfAI0() {
        Option option1 = new Option("a", "longA", true, "description");
        Option option2 = new Option("a", "longA", true, "description");
        Option option3 = new Option("b", "longB", true, "description");
        assertTrue(option1.equals(option2));
        assertFalse(option1.equals(option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_DrRR1() {
        Option option = new Option("a", "longA", true, "description");
        assertFalse(option.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_LrcZ2() {
        Option option = new Option("a", "longA", true, "description");
        assertFalse(option.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOption_JtwW3() {
        Option option1 = new Option("a", "longA", true, "description");
        Option option2 = new Option("b", "longB", true, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_SpuC4() {
        Option option = new Option("a", "longA", true, "description");
        assertTrue(option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOptionWithNullLongOption_xNlt5() {
        Option option1 = new Option("a", null, true, "description");
        Option option2 = new Option("b", "longB", true, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOptionWithNullOption_hKgW6() {
        Option option1 = new Option(null, "longA", true, "description");
        Option option2 = new Option("b", "longB", true, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameOption_wGhs7() {
        Option option1 = new Option("a", "longA", true, "description");
        Option option2 = new Option("a", "longA", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOptionWithDifferentLongOption_kEYJ11() {
        Option option1 = new Option("a", "longA", true, "description");
        Option option2 = new Option("a", "longB", true, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOptionWithDifferentHasArgAndOptionAndLongOption_RlPl12() {
        Option option1 = new Option("a", "longA", true, "description");
        Option option2 = new Option("b", "longB", false, "description1");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithoutValues_czCV1() {
        Option option = new Option("option", "longOption", true, "description");
        String[] values = option.getValues();
        assertNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithNoValues_NoSB2() {
        Option option = new Option("option", "longOption", false, "description");
        String[] values = option.getValues();
        assertNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescription_CBIY0_fid1() throws Exception {
        Option option = new Option("o", "option", false, "This is a test option");
        String expected = "[ Option o option :: This is a test option :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndLongOptionAndDescription_GjXw1_fid1() throws Exception {
        Option option = new Option("o", "option", true, "This is a test option");
        String expected = "[ Option o option [ARG] :: This is a test option :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithNoArgCount_WATe3_fid1() {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgOptionalArgTrue_cEKd0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgOptionalArgFalse_NDCd1_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(false);
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_mfAI0_1() {
        Option option1 = new Option("a", "longA", true, "description");
        Option option2 = new Option("a", "longA", true, "description");
        Option option3 = new Option("b", "longB", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_mfAI0_2() {
        Option option1 = new Option("a", "longA", true, "description");
        Option option2 = new Option("a", "longA", true, "description");
        Option option3 = new Option("b", "longB", true, "description");
        assertFalse(option1.equals(option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOptionWithDifferentDescription_lFBg8_fid1() {
        Option option1 = new Option("a", "longA", true, "description1");
        Option option2 = new Option("a", "longA", true, "description2");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentOptionWithDifferentHasArg_NWvX9_fid1() {
        Option option1 = new Option("a", "longA", true, "description");
        Option option2 = new Option("a", "longA", false, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_jpMM0_hGqd0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setValueSeparator('-');
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_xfmi0_VevL0() {
        Option option = new Option("option", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithArgCountZero_yQRt2_DNzA0() {
        Option option = new Option("option", true, "description");
        option.hasArg(); // This is the correct method to check if the option has an argument
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithArgCountEqualToUnlimitedValues_eTsB1_IIPb0() {
        Option option = new Option("option", true, "description");
        option.hasArg();
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenLongOptionNull_BJgw2_OYVM0() {
        Option option = new Option("test", null, true, "testDescription");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_ConverterIsNull_gZqM0_xlwd0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        Converter<?, ?> converter = option.getConverter();
        assertEquals(TypeHandler.getDefault().getConverter(String.class), converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenOptionAndLongOptionNull_CXXg8_hEdm0() {
        Option option = new Option(null, null, true, "testDescription");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_npaD0_cnGP0() throws CloneNotSupportedException {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertEquals(option, clonedOption);
    }
}