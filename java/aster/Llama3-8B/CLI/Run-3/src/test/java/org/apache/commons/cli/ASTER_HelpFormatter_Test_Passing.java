/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_GpfX0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_CfAu0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(10);
        assertEquals(10, helpFormatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_FvJY0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getLongOptSeparator();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_oSTa0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getOptPrefix();
        assertEquals("defaultOptPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_xtwF0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setArgName("test");
        assertEquals("test", helpFormatter.defaultArgName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_ukqT0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(5);
        assertEquals(5, helpFormatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_XGOz0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.createPadding(5);
        assertEquals("    ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_SLWQ0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, options, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_ClLO0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getSyntaxPrefix();
        assertEquals("defaultSyntaxPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_aLJW0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("=");
        assertEquals("=", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_JLRO0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setNewLine("\n");
        assertEquals("\n", helpFormatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_rKHd0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getNewLine();
        assertEquals("\n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_YCyL0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getWidth();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_sqwf0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getArgName();
        assertEquals("defaultArgName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_tneY0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> comparator = helpFormatter.getOptionComparator();
        assertEquals(comparator, helpFormatter.getOptionComparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_eogP0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptPrefix("testPrefix");
        assertEquals("testPrefix", helpFormatter.defaultLongOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_anra0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_fnYy0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        PrintWriter printWriter = new PrintWriter(System.out);
        helpFormatter.printHelp(80, cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_bZid0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setOptPrefix("prefix");
        assertEquals("prefix", helpFormatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_eYSh0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getLongOptPrefix();
        assertEquals("defaultLongOptPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_ywru1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(5);
        assertEquals(5, helpFormatter.defaultDescPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_asfE0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_KrLi0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("testPrefix");
        assertEquals("testPrefix", helpFormatter.defaultSyntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_lIPm0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "a", true, "a option");
        options.addOption("b", "b", false, "b option");
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithOptionGroup_yjfl1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("a", "a", true, "a option"));
        optionGroup.addOption(new Option("b", "b", false, "b option"));
        options.addOptionGroup(optionGroup);
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithRequiredOptions_gEJj2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addRequiredOption("a", "a", true, "a option");
        options.addOption("b", "b", false, "b option");
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoOptions_yYBs3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_PAqJ0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        assertEquals(-1, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_CAwI2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 6;
        int startPos = 0;
        assertEquals(-1, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_CZPp3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 3;
        assertEquals(5, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_OJuq4() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 2;
        assertEquals(3, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_mqys5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 1;
        assertEquals(2, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_xUfc6() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        assertEquals(0, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_HPoo7() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 5;
        assertEquals(-1, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos9_SZpB8() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 6;
        assertEquals(-1, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos10_naKQ9() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 4;
        assertEquals(4, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos11_dLmG10() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 3;
        assertEquals(3, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos12_ZYKi11() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 2;
        assertEquals(2, helpFormatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithAutoUsage_FYSs0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 4, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithoutAutoUsage_nnhC1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 4, "footer", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNullCmdLineSyntax_chre2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        try {
            helpFormatter.printHelp(pw, 80, null, "header", options, 2, 4, "footer", true);
            assert false;
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithEmptyCmdLineSyntax_nzmu3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        try {
            helpFormatter.printHelp(pw, 80, "", "header", options, 2, 4, "footer", true);
            assert false;
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNullHeader_aPVU4() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", null, options, 2, 4, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNullFooter_PbtR5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 4, null, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_Ikjq0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        helpFormatter.printHelp(cmdLineSyntax, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintOptionsWithNoOptions_hRrg2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(new java.io.StringWriter());
        helpFormatter.printOptions(pw, 80, options, 2, 4);
        String output = pw.toString();
        System.out.println(output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithRequiredOptions_exLW1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        helpFormatter.printHelp(80, "cmdLineSyntax", "Header", options, "Footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithFooter_cXwk3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        helpFormatter.printHelp(80, "cmdLineSyntax", "Header", options, "Footer message");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithWidth_ScWV4() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        helpFormatter.printHelp(40, "cmdLineSyntax", "Header", options, "Footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithCmdLineSyntax_yCcy5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        helpFormatter.printHelp(80, "cmdLineSyntax message", "Header", options, "Footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithHeader_rgeA6() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        helpFormatter.printHelp(80, "cmdLineSyntax", "Header message", options, "Footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithOptions_npDJ7() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        helpFormatter.printHelp(80, "cmdLineSyntax", "Header", options, "Footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithWidthFooterAndOptions_sWkv9() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        helpFormatter.printHelp(40, "cmdLineSyntax", "Header", options, "Footer message");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithCmdLineSyntaxFooterAndOptions_xAZP10() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        helpFormatter.printHelp(80, "cmdLineSyntax message", "Header", options, "Footer message");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsNullOptions_kXeW0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        helpFormatter.renderOptions(sb, width, null, leftPad, descPad);
        Assertions.assertEquals(sb.toString(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsEmptyOptions_VvdZ1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        Options options = new Options();
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        Assertions.assertEquals(sb.toString(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsSingleOption_djGc2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        Options options = new Options();
        options.addOption(new Option("o", "opt", true, "description"));
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsMultipleOptions_SmyJ3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        Options options = new Options();
        options.addOption(new Option("o", "opt", true, "description"));
        options.addOption(new Option("p", "popt", true, "description"));
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsOptionWithoutArg_AFrC5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        Options options = new Options();
        options.addOption(new Option("o", "opt", false, "description"));
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsOptionWithLongDescription_rejm9() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 2;
        int descPad = 4;
        Options options = new Options();
        options.addOption(new Option("o", "opt", true, "description description description"));
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_Inhw0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "opt", true, "Option description");
        options.addOption("a", "arg", false, "Another option description");
        helpFormatter.printHelp(new PrintWriter(System.out), 80, "cmdLineSyntax", "Header", options, 2, 4, "Footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithFooter_rlkZ3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "opt", true, "Option description");
        options.addOption("a", "arg", false, "Another option description");
        helpFormatter.printHelp(new PrintWriter(System.out), 80, "cmdLineSyntax", "Header", options, 2, 4, "Footer with more text");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithHeader_TxIE4() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "opt", true, "Option description");
        options.addOption("a", "arg", false, "Another option description");
        helpFormatter.printHelp(new PrintWriter(System.out), 80, "cmdLineSyntax", "Header with more text", options, 2, 4, "Footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithCmdLineSyntax_sCgE5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "opt", true, "Option description");
        options.addOption("a", "arg", false, "Another option description");
        helpFormatter.printHelp(new PrintWriter(System.out), 80, "cmdLineSyntax with more text", "Header", options, 2, 4, "Footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithWidth_KtaK6() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "opt", true, "Option description");
        options.addOption("a", "arg", false, "Another option description");
        helpFormatter.printHelp(new PrintWriter(System.out), 100, "cmdLineSyntax", "Header", options, 2, 4, "Footer");
    }
}