/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.FileInputStream;
import java.net.URL;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_DEzQ1() throws Exception {
        assertEquals(Object.class, PatternOptionBuilder.getValueClass('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypeAtSymbol_vwft0() throws Exception {
        assertEquals(PatternOptionBuilder.OBJECT_VALUE, PatternOptionBuilder.getValueType('@'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypeColonSymbol_Tclf1() throws Exception {
        assertEquals(PatternOptionBuilder.STRING_VALUE, PatternOptionBuilder.getValueType(':'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypePercentSymbol_TSfG2() throws Exception {
        assertEquals(PatternOptionBuilder.NUMBER_VALUE, PatternOptionBuilder.getValueType('%'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypePlusSymbol_sikr3() throws Exception {
        assertEquals(PatternOptionBuilder.CLASS_VALUE, PatternOptionBuilder.getValueType('+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypeNumberSymbol_ofwI4() throws Exception {
        assertEquals(PatternOptionBuilder.DATE_VALUE, PatternOptionBuilder.getValueType('#'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypeLessThanSymbol_kpkj5() throws Exception {
        assertEquals(PatternOptionBuilder.EXISTING_FILE_VALUE, PatternOptionBuilder.getValueType('<'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypeGreaterThanSymbol_pdgq6() throws Exception {
        assertEquals(PatternOptionBuilder.FILE_VALUE, PatternOptionBuilder.getValueType('>'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypeAsteriskSymbol_PIHJ7() throws Exception {
        assertEquals(PatternOptionBuilder.FILES_VALUE, PatternOptionBuilder.getValueType('*'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypeForwardSlashSymbol_moBC8() throws Exception {
        assertEquals(PatternOptionBuilder.URL_VALUE, PatternOptionBuilder.getValueType('/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypeInvalidSymbol_RqTc9() throws Exception {
        assertEquals(null, PatternOptionBuilder.getValueType('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeAtSymbol_fkUZ0() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('@');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeColonSymbol_zTsv1() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode(':');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodePercentSymbol_ZXCd2() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('%');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodePlusSymbol_sfIS3() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('+');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeNumberSymbol_yZHL4() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('#');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeLessThanSymbol_ydEM5() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('<');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeGreaterThanSymbol_OeHd6() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('>');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeAsteriskSymbol_epGX7() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('*');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeForwardSlashSymbol_Apqj8() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('/');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeExclamationSymbol_EKSe9() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('!');
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeOtherSymbol_NjxQ10() throws Exception {
        boolean result = PatternOptionBuilder.isValueCode('a');
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternEmptyString_rUpZ0() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("");
        assertEquals(0, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternSingleOption_qxmG1_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternSingleOption_qxmG1_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptions_TvhA2_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a b c");
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptions_TvhA2_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a b c");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptions_TvhA2_3() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a b c");
        assertEquals("b", options.getOption("b").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptions_TvhA2_4() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a b c");
        assertEquals("c", options.getOption("c").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionWithArg_Pber3_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a:");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionWithArg_Pber3_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a:");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionWithArg_Pber3_3() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a:");
        assertEquals(true, options.getOption("a").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionWithRequiredArg_RZwL4_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!:");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionWithRequiredArg_RZwL4_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!:");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionWithRequiredArg_RZwL4_3() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!:");
        assertEquals(true, options.getOption("a").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionWithRequiredArg_RZwL4_4() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!:");
        assertEquals(true, options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionWithConverter_LcPI5_4() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a:");
        assertEquals(TypeHandler.class, options.getOption("a").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithConverter_DipV6_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a: b:");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithConverter_DipV6_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a: b:");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithConverter_DipV6_3() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a: b:");
        assertEquals(true, options.getOption("a").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithConverter_DipV6_4() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a: b:");
        assertEquals(TypeHandler.class, options.getOption("a").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithConverter_DipV6_5() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a: b:");
        assertEquals("b", options.getOption("b").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithConverter_DipV6_6() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a: b:");
        assertEquals(true, options.getOption("b").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithConverter_DipV6_7() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a: b:");
        assertEquals(TypeHandler.class, options.getOption("b").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionWithRequiredConverter_huhx7_4() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!:");
        assertEquals(TypeHandler.class, options.getOption("a").getType());
    }
}