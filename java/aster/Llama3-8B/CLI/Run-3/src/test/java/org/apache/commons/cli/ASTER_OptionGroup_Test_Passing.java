/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Passing {
    private Option option;
    private OptionGroup optiongroup;
    private String selected;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedNullOption() throws AlreadySelectedException {
        optiongroup = new OptionGroup();
        optiongroup.setSelected(null);
        assertNull(optiongroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedDifferentOption() throws AlreadySelectedException {
        optiongroup = new OptionGroup();
        OptionGroup optiongroup = new OptionGroup();
        optiongroup.setSelected(new Option("key1", "longOption1", true, "description1"));
        assertThrows(AlreadySelectedException.class, () -> optiongroup.setSelected(new Option("key2", "longOption2", true, "description2")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedSameOption() throws AlreadySelectedException {
        optiongroup = new OptionGroup();
        optiongroup.setSelected(new Option("key1", "longOption1", true, "description1"));
        optiongroup.setSelected(new Option("key1", "longOption1", true, "description1"));
        assertEquals("key1", optiongroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredTrue_OYMG0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(true);
        assertEquals(true, optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredFalse_McWi1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(false);
        assertEquals(false, optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_stHF0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredTrue_uCiM0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(true);
        boolean result = optionGroup.isRequired();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredFalse_KnwH1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(false);
        boolean result = optionGroup.isRequired();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelected_tjGU0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        String selected = optionGroup.getSelected();
        assert selected != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_HjVP0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("o", "longOption", true, "description");
        optionGroup = optionGroup.addOption(option);
        assertEquals(option, optionGroup.getOptions().iterator().next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedNullOption_EUcC0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setSelected(null);
        assertNull(optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedDifferentOption_IWjz1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "option1", false, "description");
        Option option2 = new Option("option2", "option2", false, "description");
        optionGroup.setSelected(option1);
        try {
            optionGroup.setSelected(option2);
            fail("Expected AlreadySelectedException");
        } catch (AlreadySelectedException e) {
            assertEquals(optionGroup, e.getOptionGroup());
            assertEquals(option1.getKey(), e.getOption());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedSameOption_awRS2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "option", false, "description");
        optionGroup.setSelected(option);
        assertEquals(option.getKey(), optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedSameOptionAgain_gNNh3() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "option", false, "description");
        optionGroup.setSelected(option);
        optionGroup.setSelected(option);
        assertEquals(option.getKey(), optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_EmptyOptions_lMdc0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        String result = optionGroup.toString();
        assert result.equals("[]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SingleOption_MGSC1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("-a", "Description A"));
        String result = optionGroup.toString();
        assert result.equals("[-a, Description A]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MultipleOptions_SEuu2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().addAll(Arrays.asList(new Option("-a", "Description A"), new Option("-b", "Description B"), new Option("--c", "Description C")));
        String result = optionGroup.toString();
        assert result.equals("[-a, Description A, -b, Description B, --c, Description C]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionWithoutShortOpt_lngI3() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("--help", "Description Help"));
        String result = optionGroup.toString();
        assert result.equals("[--help, Description Help]");
    }
}