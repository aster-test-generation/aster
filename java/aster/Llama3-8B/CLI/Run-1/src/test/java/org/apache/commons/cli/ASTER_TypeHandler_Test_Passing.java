/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueValidClass_WEPs4() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        String string = "test";
        Object obj = String.class;
        Object result = TypeHandler.createValue(string, obj);
        assertEquals(string, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClass_aEks1() throws ParseException {
        String className = "java.lang.String";
        Class<?> result = TypeHandler.createClass(className);
        assertEquals(String.class, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFile_uYCr2() {
        String string = "testFile";
        File file = TypeHandler.createFile(string);
        assertEquals("testFile", file.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefault_xkyb1() {
        TypeHandler typeHandler = TypeHandler.getDefault();
        assertEquals(TypeHandler.class, typeHandler.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_hGyR0() {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        Converter<String, ?> converter = typeHandler.getConverter(String.class);
        assertEquals(Converter.DEFAULT, converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumberInvalidInput_DeVQ3() {
        assertThrows(ParseException.class, () -> TypeHandler.createNumber("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateURL_ThrowsParseException_EMpn1_1() {
        String invalidString = "invalid URL";
        ParseException exception = assertThrows(ParseException.class, () -> TypeHandler.createURL(invalidString));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectThrowsException_gXiG1() {
        assertThrows(ParseException.class, () -> TypeHandler.createObject("InvalidClass"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_JOYW1_ugBF0() {
        String string = "10";
        Class<Integer> clazz = Integer.class;
        try {
            Integer result = (Integer) TypeHandler.createValue(string, clazz);
            assertEquals(Integer.valueOf(10), result);
        } catch (ParseException e) {
            fail("ParseException was thrown unexpectedly");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObject_OMQZ0_uABC1() {
        try {
            Object result = TypeHandler.createObject("java.lang.String");
            assertEquals(String.class, result.getClass());
        } catch (Exception e) {
            fail("Expected createObject to return an object of type String, but threw " + e.getMessage());
        }
    }
}