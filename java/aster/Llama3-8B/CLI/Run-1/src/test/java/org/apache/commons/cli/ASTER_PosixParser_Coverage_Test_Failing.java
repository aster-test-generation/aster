/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_ynBn0_1() {
        PosixParser parser = new PosixParser();
        List actual = parser.getRequiredOptions();
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_ynBn0_2() {
        PosixParser parser = new PosixParser();
        List actual = parser.getRequiredOptions();
        assertEquals(0, actual.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionStartsWithDash_LYna7() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        String token = "-a";
        parser.processOption(token, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionDoesNotStartsWithDash_dXfO8() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        String token = "a";
        parser.cmd.addArg(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_wyeu11() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_ynBn0() {
        PosixParser parser = new PosixParser();
        List actual = parser.getRequiredOptions();
        assertNotNull(actual);
        assertEquals(0, actual.size());
    }
}