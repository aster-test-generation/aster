/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BasicParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_heHI0() {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        boolean stopAtNonOption = false;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert Arrays.equals(result, arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_EqTN0() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesNullProperties_zwcd0() throws ParseException {
        BasicParser parser = new BasicParser();
        parser.processProperties(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesEmptyProperties_tOpk1() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithParseException_dKpU4() throws ParseException {
        BasicParser parser = new BasicParser();
        Option opt = new Option("a", "longOpt", true, "description");
        ListIterator<String> iter = new java.util.ArrayList<String>().listIterator();
        iter.add("a");
        try {
            parser.processArgs(opt, iter);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_zcui0() throws ParseException {
        BasicParser basicParser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        boolean stopAtNonOption = true;
        try {
            CommandLine commandLine = basicParser.parse(options, arguments, stopAtNonOption);
            assert commandLine != null;
        } catch (ParseException e) {
            assert false;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_AZtP0() throws ParseException {
        BasicParser basicParser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "value2"};
        try {
            CommandLine commandLine = basicParser.parse(options, arguments);
            assert commandLine.getOptions().length == 2;
            assert Arrays.equals(commandLine.getArgs(), new String[]{"value", "value2"});
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptions_rDzP0() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        BasicParser parser = new BasicParser();
        parser.setOptions(options);
        List<?> requiredOptions = parser.getRequiredOptions();
        assert requiredOptions.size() == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutOptionsAndArguments_oqRC1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_bVWe4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = {"-a", "1", "b", "2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
    }
}