/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_fLvR1() throws ParseException {
        Options options = new Options();
        options.addOption("longOption", "longOption", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--longOption=value"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", commandLine.getParsedOptionValue("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_qkCx0() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        String[] arguments = new String[]{"--long-opt", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getParsedOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_heEF1() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        String[] arguments = new String[]{"--long-opt=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getParsedOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_mQKY0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_kIuz1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_QcmB4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknown", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_tycM0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--"}, new Properties(), true);
        assertEquals(true, parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_fqmj1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"arg"}, new Properties(), true);
        assertEquals("arg", parser.cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleDoubleDash_bWVi2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--", "arg"}, new Properties(), true);
        assertEquals(true, parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_TKub0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_khYA1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_MjRC0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "arg1", "arg2"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_TIGb1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"arg1", "arg2"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_jsVE0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_oDca1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"arg"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_aoiv4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"unknown"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_YDbo0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_ZNyu1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_OGgI4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknownToken"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_JhJa0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_Vruv1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_IWZJ4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"unknownToken"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_hfEm1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_SERg4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nJOA0_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        boolean stopAtNonOption = true;
        CommandLine result = parser.parse(options, arguments, stopAtNonOption);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_YhtI0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArg_WsUV1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_ZqQK5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknownToken", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsing_PkkP0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--"}, new Properties(), true);
        assertTrue(parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsingAfterDoubleDash_BnWC2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--", "arg"}, new Properties(), true);
        assertTrue(parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithoutEqual_ibDj2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_rCpe3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "--opt"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_GPkg4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknownToken"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithArgument_Ywxq5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_hhNV0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "arg1", "--opt2", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidArguments_AeIq1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "arg1", "invalid", "--opt2", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_KCsK2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "-10"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonNumber_laPL3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "abc"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToken_acJn0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"null"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithoutDash_yWEa1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"hello"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashButNotOption_aBuv2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptions_AqAw3_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithRequiredOptions_BHsa4_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithStopAtNonOption_PWhc8_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2", "non-option", "arg3"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), true);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithStopAtNonOption_PWhc8_3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2", "non-option", "arg3"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), true);
        assertEquals("arg3", cmd.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_GDmv4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_ewIs5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--test", "--test2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionAndNoValue_nLEM8() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--test"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionAndMultipleValues_QgUZ9() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--test", "value1", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionAndNoValueAndNoMultipleValues_gVlc11() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--test"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToken_fgQb0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithoutDash_wPzl1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"hello"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionNull_NRUR0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGroup_wuPs1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        options.addOptionGroup(new OptionGroup());
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionValue_uDZT3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        options.addOption("opt", "opt", true, "description");
        properties.setProperty("opt", "value");
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionNoArg_nVBU4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        options.addOption("opt", "opt", false, "description");
        properties.setProperty("opt", "yes");
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionValues_fHXd5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        options.addOption("opt", "opt", true, "description");
        properties.setProperty("opt", "value1,value2");
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionNoValue_xBTH6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        options.addOption("opt", "opt", true, "description");
        properties.setProperty("opt", "");
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionYesNo_VxjP7() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        options.addOption("opt", "opt", true, "description");
        properties.setProperty("opt", "yes");
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionTrueFalse_rTVJ8() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        options.addOption("opt", "opt", true, "description");
        properties.setProperty("opt", "true");
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionOne_rzje9() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        options.addOption("opt", "opt", true, "description");
        properties.setProperty("opt", "1");
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionMultiple_OBcy10() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        options.addOption("opt", "opt", true, "description");
        properties.setProperty("opt", "value1,value2,value3");
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToken_GLeq0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--a", "b", "c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithoutDash_dOYM1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"a", "b", "c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithOneDash_KCCW2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-", "b", "c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithEqual_bkTt4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--a=b", "c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithLongOption_orQc5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--longOption", "c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithShortOption_BYJf6() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-s", "c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithLongPrefix_KoNg7() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-lV", "c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithLongPrefixAndEqual_nSms9() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-lV=a", "c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_Mntr2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("unknown", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_zlgG4() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("opt1", "opt1", true, "required option 1");
        String[] arguments = {"--opt1", "arg1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutRequiredOptions_Mlwz5() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("opt1", "opt1", true, "required option 1");
        String[] arguments = {};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: opt1", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_mhUC4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_Gsew3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_KAkK4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "--req-opt"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_xmgu5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_GGZh7() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(false);
        String token = "--longOption";
        int result = parser.indexOfEqual(token);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_KsXw13() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--longOption", "value", "-s", "shortOption", "nonOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_caBy0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("opt1", "long-opt1", true, "description");
        String[] arguments = new String[]{"--long-opt1", "value"};
        Properties properties = new Properties();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutValue_RKvl2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("opt1", "long-opt1", false, "description");
        String[] arguments = new String[]{"--long-opt1"};
        Properties properties = new Properties();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseUnknownOption_nexI4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--unknown-opt"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseRequiredOption_lXEM5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt1", "long-opt1", true, "description");
        String[] arguments = new String[]{"--long-opt1", "value"};
        Properties properties = new Properties();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_OzGL4() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "Option description");
        String[] arguments = new String[]{"-o", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getParsedOptionValue("option", String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_rEUo5() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "Option description");
        String[] arguments = new String[]{"--unknown", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredArguments_BshO7() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "Option description");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_InLy0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        String[] arguments = new String[]{"--long-opt", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("long-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_ZIyB1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("s", "short-opt", true, "description");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("short-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongAndShortOption_AGJY2_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        options.addOption("s", "short-opt", true, "description");
        String[] arguments = new String[]{"--long-opt", "value", "-s", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("long-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongAndShortOption_AGJY2_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        options.addOption("s", "short-opt", true, "description");
        String[] arguments = new String[]{"--long-opt", "value", "-s", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("short-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOption_GhwE3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNull(cmd.getOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionWithoutValueAndStopAtNonOption_eliE6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt", "required-opt", false, "description");
        String[] arguments = new String[]{"--non-required-opt"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_baCx4_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        options.addOption("b", "def", false, "description");
        String[] arguments = new String[]{"--abc", "123", "-b", "456", "789"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("123", cmd.getParsedOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionPrefix_ewrA0_tQGb0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String token = "L";
        parser.parse(options, new String[]{token});
        assertEquals("longOption", options.getOption("L").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithEqual_QVIS4_UbQe0_1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("longOption", "longOption", true, "long option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"--longOption=value"}, null);
        assertEquals(true, commandLine.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithEqual_QVIS4_UbQe0_2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("longOption", "longOption", true, "long option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"--longOption=value"}, null);
        assertEquals("value", commandLine.getOptionValue("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionPrefixWithNoMatchingOptions_pCbm2_ZxEr0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String token = "X";
        CommandLine commandLine = parser.parse(options, new String[]{token}, new Properties());
        assertFalse(commandLine.hasOption(token));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsOptionEmpty_sAbH1_PnZH0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(false);
        String token = "";
        CommandLine commandLine = parser.parse(new Options(), new String[]{}, new Properties());
        boolean result = commandLine.hasOption(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleRequiredOptionWithValue_lMyo10_jizw0_1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addRequiredOption("s", "shortOption", true, "short option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"-s=value"}, null, false);
        assertEquals(true, commandLine.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleRequiredOptionWithValue_lMyo10_jizw0_2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addRequiredOption("s", "shortOption", true, "short option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"-s=value"}, null, false);
        assertEquals("value", commandLine.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_dFpy3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--option", "arg1", "arg3"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_JzGn3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg3"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_qesK4_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknown", "arg1", "arg3"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_BfXv3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1", "arg3"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_gRIM4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "--opt", "arg1", "arg2"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(4, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_jiFZ4_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknown", "arg1", "arg3"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortOption_hLxi5_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg3"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_yPtb2_fid1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--option"};
        Options options = new Options();
        options.addOption("o", "option", false, "Option description");
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_IXID3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1", "arg3"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_UhPt3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg3"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nJOA0_0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "0"};
        boolean stopAtNonOption = true;
        CommandLine result = parser.parse(options, arguments, stopAtNonOption);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsingAfterDoubleDash_VRVj3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "--", "arg1", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptions_AqAw3_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg1"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithRequiredOptions_BHsa4_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg1"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithStopAtNonOption_PWhc8_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg1", "non-option", "arg3"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), true);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_yTQx1_3_fid1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        options.addOption("b", "long-b", false, "description");
        String[] arguments = new String[]{"--a", "123", "--b", "abc", "--a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("--a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseRequiredOptionWithoutValueAndNotStopAtNonOption_Uqjn8_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt1", "long-opt1", false, "description");
        String[] arguments = new String[]{"--long-opt1", "value", "non-option"};
        Properties properties = new Properties();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertNull(commandLine.getOptionValue("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_ZFSa4_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt", "required-opt", false, "description");
        String[] arguments = new String[]{"--required-opt", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNull(cmd.getOptionValue("required-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_stYn6_fid1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        String[] arguments = new String[]{"--xyz", "123"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: --xyz", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_rkIs8_fid1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        String[] arguments = new String[]{"123", "xyz", "--abc", "456"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleOptionWithArg_snvh3_YJDc1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(new Options(), new String[]{"-o", "arg"}, new Properties(), true);
        assertNull(cmd.getOptionValue("-o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleOptionWithArg_iprS3_hsXb0_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        parser.parse(options, new String[]{"-o", "value"}, new Properties(), true);
        CommandLine commandLine = parser.parse(options, new String[]{"-o", "value"}, new Properties(), true);
        assertNull(commandLine.getOptionValue("-o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotesDefaultOnFalse_msBq1_fWlt0_fid1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(false);
        String token = "\"hello\"";
        String result = parser.parse(new Options(), new String[]{token}, new Properties()).getOptionValue(token);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotesDefaultOnTrue_UxMF0_RCyr0_fid1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String token = "\"hello\"";
        String result = parser.parse(new Options(), new String[]{token}, new Properties()).getOptionValue(token);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongAndShortOption_AGJY2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("opt", "long-opt", true, "description");
        options.addOption("s", "short-opt", true, "description");
        String[] arguments = new String[]{"--long-opt", "value", "-s", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("long-opt"));
        assertEquals("value2", cmd.getOptionValue("short-opt"));
    }
}