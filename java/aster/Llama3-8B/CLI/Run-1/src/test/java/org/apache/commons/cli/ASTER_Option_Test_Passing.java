/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_CAoU0() {
        Option option = new Option("a", "longA", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs2_eYYo1() {
        Option option = new Option("b", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescriptionWithAllParameters_TDLy0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescriptionWithTwoParameters_uHqc1() {
        Option option = new Option("option", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescriptionWithOneParameter_rqgK2() {
        Option option = new Option("option", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_WcJJ0() {
        Option option = new Option("a", "longA", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName2_sarJ1() {
        Option option = new Option("a", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName3_ZKTu2() {
        Option option = new Option("a", "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithAllParams_TGUu0() {
        Option option = new Option("o", "opt", true, "description");
        assertEquals("opt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithTwoParams_CoDu1() {
        Option option = new Option("o", true, "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithOneParam_gPBM2() {
        Option option = new Option("o", "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_lzTB0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        assertEquals(true, option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredFalse_COrc1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(false);
        assertEquals(false, option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoIndex_kvgv1() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(null, option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_HtSY0() {
        Option option = new Option("a", "a", true, "desc");
        boolean result = option.equals(option);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_fEIp1() {
        Option option1 = new Option("a", "a", true, "desc");
        Option option2 = new Option("b", "b", true, "desc");
        boolean result = option1.equals(option2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_njvY2() {
        Option option = new Option("a", "a", true, "desc");
        boolean result = option.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_UBoz3() {
        Option option = new Option("a", "a", true, "desc");
        Object obj = new Object();
        boolean result = option.equals(obj);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameOption_rJyC4() {
        Option option1 = new Option("a", "a", true, "desc");
        Option option2 = new Option("a", "a", true, "desc");
        boolean result = option1.equals(option2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgTrue_OKxl0() {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.acceptsArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgFalseNoArg_Ktkg1() {
        Option option = new Option("o", "option", false, "description");
        boolean result = option.acceptsArg();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterWhenConverterIsNotNull_WWNN1() {
        Option option = new Option("option", "longOption", true, "description");
        Converter<?, ?> converter = option.getConverter();
        assertEquals(converter, option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringNotDeprecated_OLQG0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_UDNY1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setDescription("newDescription");
        assertEquals("newDescription", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithNoValueSeparator_PNqX2() {
        Option option = new Option("a", true, "description");
        option.processValue("value1value2");
        assertEquals("value1value2", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithAllParams_IhEO0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithTwoParams_UkUz1() {
        Option option = new Option("b", true, "description");
        assertEquals("b", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithOneParam_zTov2() {
        Option option = new Option("c", "description");
        assertEquals("c", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_Pjcm1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId_ydjy0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId2_AkPz1() {
        Option option = new Option("b", true, "description");
        assertEquals('b', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId3_UOYT2() {
        Option option = new Option("c", "description");
        assertEquals('c', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithoutValues_BaeX1() {
        Option option = new Option("o", "option", true, "description");
        String[] result = option.getValues();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyOptionNull_MIJX0() {
        Option option = new Option(null, "longOption", true, "description");
        assertEquals("longOption", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyOptionNotNull_AJTZ3() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("option", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithLongOption_MJJO0() {
        Option option = new Option("a", "longOption", true, "description");
        boolean result = option.hasLongOpt();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithLongOption_ptSb2() {
        Option option = new Option("a", "longOption", true, "description");
        boolean result = option.hasLongOpt();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithoutLongOption_IMIv3() {
        Option option = new Option("a", true, "description");
        boolean result = option.hasLongOpt();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrue_ngOO0() {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.hasArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalse_qrrp1() {
        Option option = new Option("o", "option", false, "description");
        boolean result = option.hasArg();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoValues_IuJN3() {
        Option option = new Option("a", true, "description");
        assertEquals(null, option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList_sppZ0_1() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> values = option.getValuesList();
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList_sppZ0_2() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> values = option.getValuesList();
        assertEquals(0, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList2_MeqI1_1() {
        Option option = new Option("option", true, "description");
        List<String> values = option.getValuesList();
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList2_MeqI1_2() {
        Option option = new Option("option", true, "description");
        List<String> values = option.getValuesList();
        assertEquals(0, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList3_TCNp2_1() {
        Option option = new Option("option", "description");
        List<String> values = option.getValuesList();
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList3_TCNp2_2() {
        Option option = new Option("option", "description");
        List<String> values = option.getValuesList();
        assertEquals(0, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedFalse_BeHI3() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.isDeprecated();
        assert(result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg3_uVWk2() {
        Option option = new Option("option", "description");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameFalse_kqXu1() {
        Option option = new Option("o", "option", false, "description");
        boolean result = option.hasArgName();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullValue_FwOA0() {
        Option option = new Option("o", "option", true, "description");
        String result = option.getValue("default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoArg_UXjG3() {
        Option option = new Option("o", false, "description");
        String result = option.getValue("default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullDefaultValue_aGKl7() {
        Option option = new Option("o", "option", true, "description");
        String result = option.getValue(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyDefaultValue_NtkN8() {
        Option option = new Option("o", "option", true, "description");
        String result = option.getValue("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonEmptyDefaultValue_qyXv9() {
        Option option = new Option("o", "option", true, "description");
        String result = option.getValue("nonEmpty");
        assertEquals("nonEmpty", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired3_nXzV2() {
        Option option = new Option("option", "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType2_EhgR1() {
        Option option = new Option("option", true, "description");
        option.setType(Integer.class);
        assertEquals(Integer.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType3_PNyZ2() {
        Option option = new Option("option", "description");
        option.setType(Boolean.class);
        assertEquals(Boolean.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionalArg_veXB0_Wzzi0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        assertEquals(true, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgFalseMultipleArgs_LXzz3_tPii1() {
        Option option = new Option("o", false, "description");
        boolean result = option.acceptsArg();
        assert(result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgTrueOptionalArg_KxoS4_RcmN0() {
        Option option = new Option("o", "option", true, "description");
        option.setOptionalArg(true);
        boolean result = option.acceptsArg();
        assert(result == true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsFalse_GRoK1_aICl0() {
        Option option = new Option("o", "option", false, "description");
        option.hasArg(); // This method is used to check if the option has an argument
        boolean result = !option.hasArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsFalse_GRoK1_YmcA1() {
        Option option = new Option("o", "option", false, "description");
        boolean result = !option.hasArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_YKgY0_smZH0() {
        Option option = new Option("a", "longOption", true, "description");
        int result = option.hashCode();
        assertEquals(result, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_RKPQ1_UhTY0() {
        Option option = new Option("a", true, "description");
        int result = option.hashCode();
        assertEquals(result, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode3_MaRI2_OxGH0() {
        Option option = new Option("a", "description");
        int result = option.hashCode();
        assertEquals(result, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparator_JLjV1_xpyI0() {
        Option option = new Option("a", "a", true, "description");
        option.setValueSeparator(',');
        assertEquals(',', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOpt_zEjv0_zySS0() {
        Option option = new Option("a", "longA", true, "description");
        option.setLongOpt("newLongOpt");
        assertEquals("newLongOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOpt2_xdKc1_XLoE0() {
        Option option = new Option("a", true, "description");
        option.setLongOpt("newLongOpt");
        assertEquals("newLongOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOpt3_QowR2_GUVp0() {
        Option option = new Option("a", "description");
        option.setLongOpt("newLongOpt");
        assertEquals("newLongOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameNull_XKFq2_YiNf1() {
        Option option = new Option("o", true, "description");
        boolean result = option.hasArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithLongOption_CAfT2_aLsZ1() {
        Option option = new Option("o", true, "description");
        option.processValue("value");
        String result = option.getValue();
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithArg_POYY4_PPMW1() {
        Option option = new Option("o", true, "description");
        option.processValue("value");
        assertEquals("value", option.getValue("default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs3_dkMF2_fid1() {
        Option option = new Option("c", "description");
        assertEquals(-1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithAllParams_cQQT0_fid1() {
        Option option = new Option("o", "option", true, "description");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithTwoParams_Tbxf1_fid1() {
        Option option = new Option("o", true, "description");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithOneParam_ngWs2_fid1() {
        Option option = new Option("o", "description");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList_sppZ0() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> values = option.getValuesList();
        assertNotNull(values);
        assertEquals(0, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList2_MeqI1() {
        Option option = new Option("option", true, "description");
        List<String> values = option.getValuesList();
        assertNotNull(values);
        assertEquals(0, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList3_TCNp2() {
        Option option = new Option("option", "description");
        List<String> values = option.getValuesList();
        assertNotNull(values);
        assertEquals(0, values.size());
    }
}