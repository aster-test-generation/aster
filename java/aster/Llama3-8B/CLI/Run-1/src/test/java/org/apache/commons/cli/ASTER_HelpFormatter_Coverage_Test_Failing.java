/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_quXj0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test string that needs to be wrapped";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a test\nstring that needs to be\nwrapped", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText2_AFuj1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 10;
        String text = "This is a test string that needs to be wrapped";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a test\nstring that needs to be wrapped", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText3_Nfdt2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a very long test string that needs to be wrapped and should be wrapped at the next tab stop";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a very\nlong test string\nthat needs to be\nwrapped and should\nbe wrapped at the\nnext tab stop", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_uKWk0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        int expected = 5;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_wDSB1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 3;
        int expected = 5;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, result);
    }

    @Test
    public void testPrintHelpCmdLineSyntaxEmpty_oycC2_GZrA0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter printWriter = new PrintWriter(System.out);
        String cmdLineSyntax = "";
        String header = "header";
        Options options = new Options();
        int leftPad = 0;
        int descPad = 0;
        String footer = "footer";
        boolean autoUsage = false;
        helpFormatter.printHelp(printWriter, 80, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_wDSB1_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = -1;
        int startPos = 3;
        int expected = -1;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, result);
    }
}