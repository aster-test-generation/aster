/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparatorNull_eArb0_SJpp1() {
        OptionBuilder.withValueSeparator((Character) null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_LoHH2() {
        OptionBuilder optionBuilder = OptionBuilder.isRequired();
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredTrue_BCrs0() {
        OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredFalse_hPyk1() {
        OptionBuilder.isRequired(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredDefaultFalse_Zvuk2() {
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredMultipleCalls_gyYZ3() {
        OptionBuilder.isRequired(true);
        OptionBuilder.isRequired(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredMultipleCallsWithReset_Dlvi4() {
        OptionBuilder.isRequired(true);
        OptionBuilder.isRequired(false);
        OptionBuilder.isRequired(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_tBTs0_TDCl0() {
        OptionBuilder.hasArg();
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgs_vjpx1_VzIM0() {
        OptionBuilder optionBuilder = OptionBuilder.hasOptionalArgs(5);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgMultipleCalls_PmUc4_Nbws1() {
        OptionBuilder.hasArg(true);
        OptionBuilder.hasArg(false);
        assertEquals(OptionBuilder.isRequired(), true, "Expected isRequired to be true");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgMultipleCallsAgain_nKsj5_rbeC1() {
        OptionBuilder.hasArg(false);
        OptionBuilder.hasArg(true);
        assertEquals(OptionBuilder.isRequired(), true, "Expected isRequired to be true");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgMultipleCallsMultiple_xWRw6_UMVT1() {
        OptionBuilder.hasArg(true);
        OptionBuilder.hasArg(true);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgMultipleCallsMultipleAgain_KdmH7_dJyD1() {
        OptionBuilder.hasArg(false);
        OptionBuilder.hasArg(false);
        assertEquals(false, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgMultipleCallsMultipleMixedAgain_eKwr9_jiRZ1() {
        OptionBuilder.hasArg(false);
        OptionBuilder.hasArg(true);
        OptionBuilder.hasArg(false);
        assertEquals(OptionBuilder.isRequired(), true, "Expected isRequired to be true");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithArgName_YBwR1_OdKu1() {
        String expected = "expected";
        OptionBuilder optionBuilder = OptionBuilder.withArgName(expected);
        assertEquals(expected, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOptionWithValueSeparator_AwDq5_BBhS1_fid1() {
        char valueSeparator = '-';
        Option option = OptionBuilder.isRequired(false).hasArg().create("opt");
        assertEquals(valueSeparator, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_MkMJ1_AJun0() {
        OptionBuilder.hasArgs(5);
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator_PLwm2_vgtr1() {
        OptionBuilder optionBuilder = OptionBuilder.withValueSeparator();
        assertEquals(true, OptionBuilder.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_UQPX1_LuYu0() {
        OptionBuilder optionBuilder = OptionBuilder.hasArgs();
        assertEquals(OptionBuilder.isRequired(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_UQPX1_BOZF1() {
        OptionBuilder optionBuilder = OptionBuilder.isRequired(true);
        assertEquals(OptionBuilder.isRequired(), true);
    }
}