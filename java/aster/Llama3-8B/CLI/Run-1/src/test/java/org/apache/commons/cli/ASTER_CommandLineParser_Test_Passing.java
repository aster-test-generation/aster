/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLineParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutRequiredOption_ChFI1_hVOK0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"-b", "value"};
        try {
            parser.parse(options, arguments, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutOptionGroup_czrC5_CIxY0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("b", "long-b", true, "description"));
        group.addOption(new Option("c", "long-c", true, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-d", "value"};
        try {
            CommandLine line = parser.parse(options, arguments);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutMultipleOptions_YvBm7_HzAr0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "long-b", true, "description");
        options.addOption("c", "long-c", true, "description");
        String[] arguments = new String[]{"-d", "value"};
        try {
            CommandLine commandLine = parser.parse(options, arguments);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutShortOption_rCYb9_JlLk0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "long-b", true, "description");
        String[] arguments = new String[]{"-c", "value"};
        try {
            CommandLine commandLine = parser.parse(options, arguments);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutOptionGroup_cTiv5_VbFV0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("c", "long-c", true, "description"));
        group.addOption(new Option("d", "long-d", true, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[0];
        try {
            CommandLine line = parser.parse(options, arguments);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_vvQm7_QPCf0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("g", "long-g", true, "description");
        String[] arguments = new String[]{"-h", "value"};
        try {
            parser.parse(options, arguments);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_UuLn8_uREs0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("i", "long-i", true, "description");
        String[] arguments = new String[]{"-j", "value"};
        try {
            parser.parse(options, arguments);
        } catch (ParseException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutRequiredOption_fZXE1_rZEZ0_fid1() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "description");
        String[] arguments = new String[0];
        try {
            parser.parse(options, arguments);
            assert false;
        } catch (ParseException e) {
            assert true;
        }
    }
}