/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs3_dkMF2() {
        Option option = new Option("c", "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgFalseOptionalArg_xtSE2() {
        Option option = new Option("o", "option", true, "description");
        option.setOptionalArg(true);
        boolean result = option.acceptsArg();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_Iufu1() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator1_YNNJ2() {
        Option option = new Option("option", true, "description");
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator2_oVLK3() {
        Option option = new Option("option", "description");
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConverterWithNull_fWCB2() {
        Option option = new Option("option", "longOption", true, "description");
        option.setConverter(null);
        assertNull(option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_NpuT0_1() {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("description", deprecatedAttributes.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_NpuT0_2() {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("since", deprecatedAttributes.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_EINe1_1() {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("description", deprecatedAttributes.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_EINe1_2() {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("since", deprecatedAttributes.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_bknw2_1() {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("description", deprecatedAttributes.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_bknw2_2() {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("since", deprecatedAttributes.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithNoArgsAllowed_VnPs0() {
        Option option = new Option("a", true, "description");
        option.processValue("value");
        fail("Expected IllegalArgumentException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithArgsAllowed_PKdt1() {
        Option option = new Option("a", true, "description");
        option.processValue("value1,value2");
        assertEquals("value1", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithMultipleValues_HCwt3() {
        Option option = new Option("a", true, "description");
        option.processValue("value1,value2,value3");
        assertEquals("value1", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithNoValue_fNZi4() {
        Option option = new Option("a", true, "description");
        option.processValue("");
        fail("Expected IllegalArgumentException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeWithAllParameters_wSbL0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(Object.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeWithTwoParameters_dEOp1() {
        Option option = new Option("option", true, "description");
        assertEquals(Object.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeWithOneParameter_qHJJ2() {
        Option option = new Option("option", "description");
        assertEquals(Object.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithAllParams_cQQT0() {
        Option option = new Option("o", "option", true, "description");
        assertEquals("arg", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithTwoParams_Tbxf1() {
        Option option = new Option("o", true, "description");
        assertEquals("arg", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithOneParam_ngWs2() {
        Option option = new Option("o", "description");
        assertEquals("arg", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_IjtI0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg2_tpAM1() {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameTrue_Ljpb0() {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.hasArgName();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_OQUU0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired2_aFfY1() {
        Option option = new Option("option", true, "description");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_gEoh1() {
        Option option = new Option("a", "a", true, "description");
        boolean result = option.addValue("value");
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredNull_BhTQ2_IoHL1() {
        Option option = new Option("option", "longOption", true, "description");
        try {
            option.setRequired(true);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndex_lVNl0_IgmZ1() {
        Option option = new Option("option", "longOption", true, "description");
        option.processValue("value1");
        option.processValue("value2");
        assertEquals("value2", option.getValue(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgTrueMultipleArgs_qlHw5_JFal1() {
        Option option = new Option("o", "option", true, "description");
        option.addValue("arg1");
        option.addValue("arg2");
        boolean result = option.hasArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsTrue_JicI0_IHYx0() {
        Option option = new Option("o", "option", true, "description");
        boolean result = option.hasArgs();
        assert(result == true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_XJHc0_jBgt0() {
        Option option = new Option("o", "option", true, "description");
        option.processValue("value1");
        option.processValue("value2");
        String[] result = option.getValues();
        assert result != null;
        assert result.length == 2;
        assert result[0].equals("value1");
        assert result[1].equals("value2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoValues_wlfx0_EcBm1() {
        Option option = new Option("a", true, "description");
        option.processValue("value1");
        option.processValue("value2");
        assertEquals("value1", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonNullValue_Fcqb1_XnwP1() {
        Option option = new Option("o", "option", true, "description");
        option.addValue("value");
        String result = option.getValue("default");
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithArgsAllowed_PKdt1_fid1() {
        Option option = new Option("a", true, "description");
        option.processValue("value1,value2,value2");
        assertEquals("value1,value2", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithMultipleValues_HCwt3_fid1() {
        Option option = new Option("a", true, "description");
        option.processValue("value1,value2,value3,value2,value3");
        assertEquals("value1,value2,value3", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_NpuT0() {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("description", deprecatedAttributes.getDescription());
        assertEquals("since", deprecatedAttributes.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_EINe1() {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("description", deprecatedAttributes.getDescription());
        assertEquals("since", deprecatedAttributes.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_bknw2() {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals("description", deprecatedAttributes.getDescription());
        assertEquals("since", deprecatedAttributes.getSince());
    }
}