/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern1_MAmz0() {
        Options options = PatternOptionBuilder.parsePattern("a");
        assertEquals(1, options.getOptions().size());
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern2_mQgP1() {
        Options options = PatternOptionBuilder.parsePattern("a:b");
        assertEquals(1, options.getOptions().size());
        assertEquals("a", options.getOption("a").getLongOpt());
        assertEquals(true, options.getOption("a").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_xoSM2() {
        Options options = PatternOptionBuilder.parsePattern("a:b!");
        assertEquals(1, options.getOptions().size());
        assertEquals("a", options.getOption("a").getLongOpt());
        assertEquals(true, options.getOption("a").hasArg());
        assertEquals(true, options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_wsOI3() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c");
        assertEquals(1, options.getOptions().size());
        assertEquals("a", options.getOption("a").getLongOpt());
        assertEquals(true, options.getOption("a").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_NZsh4() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c!");
        assertEquals(1, options.getOptions().size());
        assertEquals("a", options.getOption("a").getLongOpt());
        assertEquals(true, options.getOption("a").hasArg());
        assertEquals(true, options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_KtCg5() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c:d");
        assertEquals(1, options.getOptions().size());
        assertEquals("a", options.getOption("a").getLongOpt());
        assertEquals(true, options.getOption("a").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern7_JDGI6() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c:d!");
        assertEquals(1, options.getOptions().size());
        assertEquals("a", options.getOption("a").getLongOpt());
        assertEquals(true, options.getOption("a").hasArg());
        assertEquals(true, options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_Vpes1() {
        assertEquals(Object.class, PatternOptionBuilder.getValueClass('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern1_MAmz0_2() {
        Options options = PatternOptionBuilder.parsePattern("a");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern2_mQgP1_1_fid2() {
        Options options = PatternOptionBuilder.parsePattern("a:b");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern2_mQgP1_2() {
        Options options = PatternOptionBuilder.parsePattern("a:b");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_xoSM2_1() {
        Options options = PatternOptionBuilder.parsePattern("a:b!");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_xoSM2_2() {
        Options options = PatternOptionBuilder.parsePattern("a:b!");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_xoSM2_4() {
        Options options = PatternOptionBuilder.parsePattern("a:b!");
        assertEquals(true, options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_wsOI3_1() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_wsOI3_2() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_NZsh4_1() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c!");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_NZsh4_2() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c!");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_NZsh4_4() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c!");
        assertEquals(true, options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_KtCg5_1() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c:d");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_KtCg5_2() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c:d");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern7_JDGI6_1() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c:d!");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern7_JDGI6_2() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c:d!");
        assertEquals("a", options.getOption("a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern7_JDGI6_4() {
        Options options = PatternOptionBuilder.parsePattern("a:b:c:d!");
        assertEquals(true, options.getOption("a").isRequired());
    }
}