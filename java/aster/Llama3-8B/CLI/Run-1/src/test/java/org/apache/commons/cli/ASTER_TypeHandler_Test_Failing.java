/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_Hyyr1() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        String string = "test";
        Object obj = new Object();
        Object result = TypeHandler.createValue(string, obj);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueNull_Mlbn2() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        String string = null;
        Object obj = new Object();
        try {
            TypeHandler.createValue(string, obj);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueInvalidClass_iJzs3() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        String string = "test";
        Object obj = new Integer(1);
        try {
            TypeHandler.createValue(string, obj);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterDefault_aCuW1() {
        TypeHandler typeHandler = new TypeHandler();
        Converter<Integer, ?> converter = typeHandler.getConverter(Integer.class);
        assertEquals(Converter.DEFAULT, converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDate_IHTV0() {
        Date date = TypeHandler.createDate("2022-01-01");
        assertEquals(date.getClass(), Date.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFiles_Pjyd1() {
        File[] result = TypeHandler.createFiles("test");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_uATY0_DmLB0() {
        try {
            Object fileInputStream = TypeHandler.createObject("java.io.FileInputStream");
            assert fileInputStream != null;
        } catch (ParseException e) {
            assert false;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_MHkn0_LDeO1() {
        try {
            assertEquals(10, (int) TypeHandler.createNumber("10"));
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateURL_ThrowsParseException_EMpn1() {
        String invalidString = "invalid URL";
        ParseException exception = assertThrows(ParseException.class, () -> TypeHandler.createURL(invalidString));
        assertEquals("Invalid URL: " + invalidString, exception.getMessage());
    }
}