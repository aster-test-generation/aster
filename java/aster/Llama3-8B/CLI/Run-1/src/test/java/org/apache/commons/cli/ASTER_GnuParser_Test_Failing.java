/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.ListIterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOption_gUDn6() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"a", "b", "c", "d"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert Arrays.equals(result, new String[]{"a"});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOptionAndOptions_RkgM7() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"a", "-b", "c", "d", "--e", "f"};
        boolean stopAtNonOption = true;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assert Arrays.equals(result, new String[]{"a", "-b"});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_EHLv1() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesSingleOption_lWcY2() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("option", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesSingleOptionWithoutArg_ekjN4() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("option", "yes");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesMultipleOptions_LlvF5() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesMultipleOptionsWithoutArg_vLnj7() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("option1", "yes");
        properties.setProperty("option2", "no");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_zwTM8() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("requiredOption", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionWithoutArg_vIcF9() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("requiredOption", "yes");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionGroup_yNvE10() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("optionGroupOption", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionGroupWithoutArg_qBKG11() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("optionGroupOption", "yes");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesUnrecognizedOption_XSeD12() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("unrecognizedOption", "value");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesInvalidOptionValue_aOVx13() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("option", "invalidValue");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_EmptyRequiredOptions_qCmV0() throws MissingOptionException {
        GnuParser parser = new GnuParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOption_vxfR0() throws ParseException {
        GnuParser parser = new GnuParser();
        Option opt = new Option("a", "longOption", true, "description");
        ListIterator<String> iter = new java.util.ArrayList<String>().listIterator();
        iter.add("a");
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOptionalArg_aJZo2() throws ParseException {
        GnuParser parser = new GnuParser();
        Option opt = new Option("a", "longOption", false, "description");
        ListIterator<String> iter = new java.util.ArrayList<String>().listIterator();
        iter.add("a");
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithRequiredArg_WBRZ4() throws ParseException {
        GnuParser parser = new GnuParser();
        Option opt = new Option("a", "longOption", true, "description");
        ListIterator<String> iter = new java.util.ArrayList<String>().listIterator();
        iter.add("a");
        iter.add("arg");
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_zSUn0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        CommandLine result = parser.parse(options, arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_zYQL1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        try {
            CommandLine result = parser.parse(options, arguments);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qlbZ0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArguments_vihW0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_aYuC2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        options.addOptionGroup(group);
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_WFwA3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        options.addRequiredOption("opt", "longOpt", true, "description");
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_HnZd4() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        options.addOption("a", "longOpt", true, "description");
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_qoks5() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = {"--longOpt"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        options.addOption("longOpt", "longOpt", true, "description");
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_MahL7() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = {"-a", "--longOpt", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        options.addOption("a", "longOpt", true, "description");
        options.addOption("b", "longOpt", true, "description");
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroupAndRequiredOptions_syPk8() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        options.addOptionGroup(group);
        options.addRequiredOption("opt", "longOpt", true, "description");
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroupAndShortOption_jOOY9() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        options.addOptionGroup(group);
        options.addOption("a", "longOpt", true, "description");
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroupAndLongOption_mXGh10() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        String[] arguments = {"--longOpt"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        options.addOptionGroup(group);
        options.addOption("longOpt", "longOpt", true, "description");
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroupAndMultipleOptions_ZfZC12() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        String[] arguments = {"-a", "--longOpt", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        options.addOptionGroup(group);
        options.addOption("a", "longOpt", true, "description");
        options.addOption("b", "longOpt", true, "description");
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }
}