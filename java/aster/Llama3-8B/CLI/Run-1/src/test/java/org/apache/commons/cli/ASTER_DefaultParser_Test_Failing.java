/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_ewvB0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_ILis1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_fugq2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-a-b-c");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_djUf3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-a-b-c-d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_pzLV4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-a-b-c-d-e");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_RwCu5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-a-b-c-d-e-f");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_zJyS6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-a-b-c-d-e-f-g");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_XPEQ3() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArgumentsAndProperties_ahtL1() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, null, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_NonEmptyExpectedOpts_ojEf1_hwoo0() {
        DefaultParser parser = new DefaultParser(true);
        List<String> expectedOpts = Arrays.asList("opt1", "opt2");
        String[] args = new String[0];
        try {
            parser.parse(null, args, new Properties());
        } catch (ParseException e) {
        }
        assertThrows(ParseException.class, () -> parser.parse(null, args, new Properties()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithUnknownToken_RMVB2_MOmi1() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(null, new String[]{"abcx"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithOptionAndValue_mibc3_QTqE0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(null, new String[]{"abc=hello"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithMultipleOptions_ymdG5_cKvQ0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(null, new String[]{"abc", "def"}, null);
            assertEquals("abc", commandLine.getOptionValue("abc"));
            assertEquals("def", commandLine.getOptionValue("def"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_jLem1_Zvwi0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(null, new String[]{"a"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_xvPo2_ZtfK1() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(null, new String[]{"abcde"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_SByV3_DepC0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(null, new String[]{"a", "b"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithStripLeadingAndTrailingQuotes_ZfXr4_OBEY0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "abc"}, new Properties());
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithStripLeadingAndTrailingQuotesDefaultOff_UPCQ5_UIqa0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(null, new String[]{"abc\"def\""}, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NOFb0_aadi0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        try {
            CommandLine result = parser.parse(options, arguments, new Properties());
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_kokw0_gemt0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "1", "-b", "2"}, new Properties());
            assertEquals("1", commandLine.getOptionValue("-a"));
            assertEquals("2", commandLine.getOptionValue("-b"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptions_mdec1_ZTYk0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--a=1", "--b=2"}, new Properties());
            assertEquals("1", commandLine.getOptionValue("--a"));
            assertEquals("2", commandLine.getOptionValue("--b"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_agPX3_fhgr0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-c", "1"}, new Properties());
            assertEquals("", commandLine.getOptionValue("-c"));
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_veKr0_OHXb0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "1", "-b", "2"}, new Properties());
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_BLLR3_qggn0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-x"}, new Properties());
            assertNull(commandLine.getOptionValue("-x"));
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_HwIa0_hZQA0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "1", "-b", "2"}, new Properties());
            assertEquals(2, commandLine.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_FxVc1_jMzn0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--long-option", "value"}, new Properties());
            assertEquals(1, commandLine.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutProperties_EQbb1_JDsp0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, null);
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }
}