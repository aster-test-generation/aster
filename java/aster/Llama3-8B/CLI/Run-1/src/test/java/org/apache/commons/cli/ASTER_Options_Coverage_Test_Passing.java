/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Passing {
    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptionsStartsWith_mlGM0_1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("abc");
        assertEquals(1, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptionsNotStartsWith_GgXh1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("ghi");
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_EmptyOptions_XtBp0() {
        Options options = new Options();
        Options result = options.addOptions(options);
        assertEquals(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_DuplicateOption_CdOh2() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        Options duplicateOptions = new Options();
        duplicateOptions.addOption("opt", "longOpt", true, "description");
        try {
            options.addOptions(duplicateOptions);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_MultipleOptions_kHLA4() {
        Options options = new Options();
        options.addOption("opt1", "longOpt1", true, "description1");
        options.addOption("opt2", "longOpt2", true, "description2");
        Options multipleOptions = new Options();
        multipleOptions.addOption("opt3", "longOpt3", true, "description3");
        multipleOptions.addOption("opt4", "longOpt4", true, "description4");
        Options result = options.addOptions(multipleOptions);
        assertEquals(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_EmptyOptionGroups_Tbxq5() {
        Options options = new Options();
        Options emptyOptionGroups = new Options();
        emptyOptionGroups.getOptionGroups().forEach(options::addOptionGroup);
        assertEquals(options, options.addOptions(emptyOptionGroups));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequiredOptionAlreadyPresent_zlps0_nGwT0() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequiredOptionNotPresent_yExe1_rSTL1() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        assertEquals(1, options.getMatchingOptions(opt.getOpt()).size());
    }
}