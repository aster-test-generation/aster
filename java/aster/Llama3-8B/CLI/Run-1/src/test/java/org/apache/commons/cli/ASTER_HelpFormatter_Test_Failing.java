/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_WZbo1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getLongOptSeparator();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_bdAw3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = -1;
        int startPos = 3;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_CeFh5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = -1;
        int startPos = 2;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_tzfF6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = -1;
        int startPos = 1;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_DfVL7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = -1;
        int startPos = 4;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoCmdLineSyntax_Bzts7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String header = "Header";
        String footer = "Footer";
        boolean autoUsage = true;
        helpFormatter.printHelp("", header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoOptionsAndCmdLineSyntax_LuiA10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String header = "Header";
        String footer = "Footer";
        boolean autoUsage = true;
        helpFormatter.printHelp("", header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoOptionsAndNoFooterAndHeader_zAji14() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        boolean autoUsage = true;
        helpFormatter.printHelp("", "", options, "", autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoOptionsAndNoFooterAndCmdLineSyntax_GWOq15() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String header = "Header";
        boolean autoUsage = true;
        helpFormatter.printHelp("", header, options, "", autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimStringWithLeadingWhitespace_yFuF2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim("     Hello");
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_ZHTg1_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_gRSS1_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getOptPrefix();
        assertEquals("defaultOptPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_NHJp2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 6;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_bdAw3_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 3;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_CeFh5_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 2;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_tzfF6_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 1;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_DfVL7_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 4;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_cguc1_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getSyntaxPrefix();
        assertEquals("defaultSyntaxPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_oXwo0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getWidth();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_CYGn0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getArgName();
        assertEquals("defaultArgName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_yZyr0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_hfxC0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getLongOptPrefix();
        assertEquals("defaultLongOptPrefix", result);
    }
}