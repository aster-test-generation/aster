/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BasicParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_Dghf1() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assert options != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesSingleOption_RZLz2() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesSingleOptionWithoutArg_TVQn4() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option", "yes");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesMultipleOptions_PeJJ5() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesMultipleOptionsWithoutArg_wdFV7() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option1", "yes");
        properties.setProperty("option2", "no");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_VMOd8() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("requiredOption", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionWithoutArg_wUTO9() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("requiredOption", "yes");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesUnrecognizedOption_OPOe10() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("unrecognizedOption", "value");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionGroup_eLNj11() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("optionGroupOption", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionGroupWithoutArg_Skck12() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("optionGroupOption", "yes");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionGroupRequired_kBuI13() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("optionGroupRequiredOption", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_EmptyRequiredOptions_fxnu0() throws MissingOptionException {
        BasicParser parser = new BasicParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_NonEmptyRequiredOptions_diqL1() throws MissingOptionException {
        BasicParser parser = new BasicParser();
        parser.getRequiredOptions().add("option1");
        try {
            parser.checkRequiredOptions();
            fail("Expected MissingOptionException");
        } catch (MissingOptionException e) {
            assertEquals("option1", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOption_YMcN0() throws ParseException {
        BasicParser parser = new BasicParser();
        Option opt = new Option("a", "longOpt", true, "description");
        ListIterator<String> iter = new java.util.ArrayList<String>().listIterator();
        iter.add("a");
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithoutOption_QwHi1() throws ParseException {
        BasicParser parser = new BasicParser();
        Option opt = new Option("a", "longOpt", true, "description");
        ListIterator<String> iter = new java.util.ArrayList<String>().listIterator();
        iter.add("b");
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOptionalArg_tCuy2() throws ParseException {
        BasicParser parser = new BasicParser();
        Option opt = new Option("a", "longOpt", false, "description");
        ListIterator<String> iter = new java.util.ArrayList<String>().listIterator();
        iter.add("a");
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_aCLb1() {
        BasicParser parser = new BasicParser();
        List actual = parser.getRequiredOptions();
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ihvv0() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArguments_knnn0() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2", "c", "3"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_zLKW2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        String[] arguments = {"-g", "1", "-b", "2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WDhn5() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithHelpOptions_VNIz6() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = {"-h"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionValues_WUFN7() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionValues_fFwj9() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroupsAndProperties_xqJZ15() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        String[] arguments = {"-g", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        CommandLine result = parser.parse(options, arguments, properties, false);
    }
}