/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_iwPJ0() {
        Option option1 = new Option("a", "longOptionA", true, "descriptionA");
        Option option2 = new Option("a", "longOptionA", true, "descriptionA");
        Option option3 = new Option("b", "longOptionB", true, "descriptionB");
        assertTrue(option1.equals(option2));
        assertFalse(option1.equals(option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithClass_yDvU0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(Class.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenNotDeprecated_PAsn0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionalArgReturnsFalse_SijS0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        assertEquals(false, option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDefaultAcceptsArg_WTXp3() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(true, option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameTrue_gxlR0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName("argName");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameFalse_SNSl1() {
        Option option = new Option("option", "longOption", false, "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameNull_FWeE2() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName(null);
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameEmpty_qEtK3() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName("");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgNoArg_AJtg1() {
        Option option = new Option("option", "longOption", false, "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_iwPJ0_1() {
        Option option1 = new Option("a", "longOptionA", true, "descriptionA");
        Option option2 = new Option("a", "longOptionA", true, "descriptionA");
        Option option3 = new Option("b", "longOptionB", true, "descriptionB");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_iwPJ0_2() {
        Option option1 = new Option("a", "longOptionA", true, "descriptionA");
        Option option2 = new Option("a", "longOptionA", true, "descriptionA");
        Option option3 = new Option("b", "longOptionB", true, "descriptionB");
        assertFalse(option1.equals(option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_uXcw0_oXQw0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setValueSeparator('1');
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrue_cShv0_yScp0() {
        Option option = new Option("option", true, "description");
        option.hasArg(); // Corrected the line
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalse_CedS1_VYfA0() {
        Option option = new Option("option", false, "description");
        option.hasArg();
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenOptionIsNull_krRl4_GQgE0() {
        Option option = new Option(null, "longOption", true, "description");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_ConverterIsNull_dMpE0_zpaw0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        Converter<?, ?> converter = option.getConverter();
        assertEquals(TypeHandler.getDefault().getConverter(String.class), converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_dBCr0_FgfH0_1() throws CloneNotSupportedException {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertNotSame(option, clonedOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_dBCr0_FgfH0_2() throws CloneNotSupportedException {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertEquals(option.getValues(), clonedOption.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgOptionalArg_HpYA4_OOuJ0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescription_hzgQ0_fid2() throws Exception {
        Option option = new Option("o", "option", false, "This is a test option");
        assertEquals("[ Option o option :: This is a test option :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOptionAndDescription_mJVT1_fid2() throws Exception {
        Option option = new Option("o", "option-long", false, "This is a test option");
        assertEquals("[ Option o option-long :: This is a test option :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndArgAndDescription_pqOi2_fid2() throws Exception {
        Option option = new Option("o", true, "This is a test option");
        assertEquals("[ Option o [ARG] :: This is a test option :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDeprecatedAndDescription_tEBh4_ICNa0_fid2() throws Exception {
        Option option = new Option("o", "option", true, "This is a test option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenOptionHasDescription_vdOV9_lpfy0_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        option.setDescription("description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgOptionalArgNoValues_yRHh8_iIJX0_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgNoValues_USKc3_LrZy0_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgNoOptionalArg_IndJ5_GMIr0_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(false);
        assertTrue(option.acceptsArg());
    }
}