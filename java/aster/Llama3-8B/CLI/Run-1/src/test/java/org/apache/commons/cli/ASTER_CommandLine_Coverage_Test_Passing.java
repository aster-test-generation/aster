/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionNullOption_VFgW0() {
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_NullSupplier_Lqkh1() throws org.apache.commons.cli.ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        assertNull(commandLine.getParsedOptionValue(option, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ErIq0_1() throws org.apache.commons.cli.ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object defaultValue = "default";
        Object result = commandLine.getParsedOptionValue(option, defaultValue);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ErIq0_2() throws org.apache.commons.cli.ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object defaultValue = "default";
        Object result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ReturnsDefaultValue_bJtn2_1() throws org.apache.commons.cli.ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object defaultValue = "default";
        Object result = commandLine.getParsedOptionValue(option, () -> defaultValue);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ReturnsDefaultValue_bJtn2_2() throws org.apache.commons.cli.ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object defaultValue = "default";
        Object result = commandLine.getParsedOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ErIq0() throws org.apache.commons.cli.ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object defaultValue = "default";
        Object result = commandLine.getParsedOptionValue(option, defaultValue);
        assertNotNull(result);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ReturnsDefaultValue_bJtn2() throws org.apache.commons.cli.ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object defaultValue = "default";
        Object result = commandLine.getParsedOptionValue(option, () -> defaultValue);
        assertNotNull(result);
        assertEquals(defaultValue, result);
    }
}