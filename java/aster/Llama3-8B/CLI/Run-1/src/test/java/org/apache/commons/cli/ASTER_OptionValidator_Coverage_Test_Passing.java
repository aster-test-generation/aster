/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionValidator_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOption_vkxH2() throws java.lang.IllegalArgumentException {
        OptionValidator optionValidator = new OptionValidator();
        assertEquals("abc", optionValidator.validate("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidOption_JgxM3() throws java.lang.IllegalArgumentException {
        OptionValidator optionValidator = new OptionValidator();
        try {
            optionValidator.validate("!");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Illegal option name '!'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmptyOption_ztYl4() throws java.lang.IllegalArgumentException {
        OptionValidator optionValidator = new OptionValidator();
        try {
            optionValidator.validate("");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateNullOption_WnLv5() throws java.lang.IllegalArgumentException {
        OptionValidator optionValidator = new OptionValidator();
        assertEquals(null, optionValidator.validate(null));
    }
}