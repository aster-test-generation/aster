/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_dlIo3() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_JqZA3() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "--option1", "--option2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_PhiZ3() {
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        options.addOption("b", "longB", false, "description");
        String[] arguments = new String[]{"-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected AmbiguousOptionException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutRequiredArgs_jSyb1() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-help"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutRequiredOptions_Rswh1() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-help"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_leav3() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_McPB3() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "true", "-d", "yes"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_RAUp0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "value", "-b", "value", "-c", "value"};
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_NpSe2() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "value", "-b", "value"};
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_BCls0() {
        assertEquals(1, DefaultParser.indexOfEqual("a=1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_bIAc1_uEYL0() {
        assertEquals(DefaultParser.class, new DefaultParser().getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithInvalidOptions_ZpHc1_hvek0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(new Options(), new String[]{"abcd"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithOptionAndValue_PmQq2_DksO0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine cmd = parser.parse(new Options(), new String[]{"-abc=def"}, null);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_qStH0_gJmQ0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_ooUL1_pGFY0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_NSNd2_Vwhb0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_tRpA3_zIaE0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_GJZz2_LAGD0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionWithoutArgument_AlQp3_ySKc0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_kukn2_lyqd0() {
        Options options = new Options();
        String[] arguments = new String[]{"--longOption", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_BpCW3_liIR0() {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_xBWN2_fzdy0() {
        Options options = new Options();
        String[] arguments = new String[]{"--longOption"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_prGQ3_nCxa0() {
        Options options = new Options();
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_exNG0_MDkp0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "--b", "2", "--c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_rkjA1_qaQl0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_ZJIa2_vnUS0() {
        Options options = new Options();
        String[] arguments = {"--longOption", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_SsIY3_mKMa0() {
        Options options = new Options();
        String[] arguments = {"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_daRr2_zoyT0() {
        Options options = new Options();
        options.addOption("a", "short-option", true, "short option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_AICR3_CcFL0() {
        Options options = new Options();
        options.addOption("a", "long-option", true, "long option");
        String[] arguments = new String[]{"--a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_nYYX3_DZBK0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_FtCD0_FtcV0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_EtTZ2_WHHA0() {
        Options options = new Options();
        String[] arguments = new String[]{"--a", "1", "--b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_zQEd3_xbBB0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "--c", "3", "--d", "4"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_mLXI2_JGiD0() {
        Options options = new Options();
        String[] arguments = new String[]{"-x", "y"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_Kzfc0_soVa0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "--option2", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lfnk2_SMrF0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_KQWE3_BrPF0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "--b", "2", "-d"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_dJPk2_HMaY0() {
        Options options = new Options();
        options.addRequiredOption("a", "a", true, "a description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "1"}, new Properties());
            assertEquals("1", commandLine.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_sOdg0_tqbr0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ISlw2_kyWx0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_alop0_aDJf0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_mEmx0_kVuv0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_UouZ3_aeRV0() {
        Options options = new Options();
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_hrEu0_SPED0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_UbUm2_bRCE0() {
        Options options = new Options();
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_wDvr3_JBaV0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "non-option", "-b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_JLMc2_XHBE0() {
        Options options = new Options();
        String[] arguments = new String[]{"-x", "y", "z"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_vxIi3_GLxj0() {
        Options options = new Options();
        String[] arguments = {"-l", "1", "-L", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_kcEX0_NFym0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(stopAtNonOption);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_luFR1_kjDp0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_aABz2_cbOM0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(stopAtNonOption);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dYKA3_rdJO0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "non-option", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser(stopAtNonOption);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_vcsB0_aFkJ0() {
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        options.addOption("b", "longB", false, "description");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_VeMg1_Vurq0() {
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        options.addOption("b", "longB", false, "description");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mtpy2_WBbk0() {
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        options.addOption("b", "longB", false, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_AkEj3_flhE0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArguments_XnGJ1_vTmz0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{}, new Properties(), false);
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_wOvY3_tJKL0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_DWpQ2_oKMI0() {
        Options options = new Options();
        String[] arguments = {"-x", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(stopAtNonOption);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_JTEv3_lnBz0() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(stopAtNonOption);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_oeZx2_PtyO0() {
        Options options = new Options();
        options.addRequiredOption("a", "a", true, "Required option a");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "1"}, new Properties());
            assertEquals("1", commandLine.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_PVBj2_ewxT0() {
        Options options = new Options();
        options.addRequiredOption("a", "long-option", true, "description");
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--long-option", "value"}, new Properties());
            assertEquals(1, commandLine.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_xjms3_rNvW0() {
        Options options = new Options();
        try {
            CommandLine commandLine = new DefaultParser().parse(options, new String[]{}, new Properties(), false);
        } catch (ParseException e) {
            fail("ParseException occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_HQzr0_chav0() {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oogG2_tsMk0() {
        Options options = new Options();
        String[] arguments = {"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("key1", "value1");
        properties.setProperty("key2", "value2");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredArgs_ekmi0_XVmO0() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-opt", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_eBlO2_lRJG0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-opt", "arg"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_OaaP0_gqBn0() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-opt", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_PjxZ2_rYpf0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-opt", "value"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qFmZ0_cFSJ0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_wCBK2_avpC0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredArgs_ZXnk3_VzlT0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_FHsa0_LYzx0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "value", "-b", "true", "-c", "yes"};
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArgumentsAndProperties_TPhJ1_Idaz0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, new String[0], properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsButNoProperties_ZxLk2_fEWe0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = null;
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "value", "-b", "true", "-c", "yes"};
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_wMHg0_VYOs0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "true", "-c", "1"};
        Properties properties = new Properties();
        properties.setProperty("d", "yes");
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArgumentsAndProperties_Lgek1_QhsU0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_Aaaw2_PCpm0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "true", "-c", "1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_Pfmj0_Sffl0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "value", "-b", "true", "-c", "1"};
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArgumentsAndProperties_JWRe1_YwtU0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = null;
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, new String[0], properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsButNoProperties_ZGXU2_cNoP0() {
        Options options = new Options();
        CommandLine cmd = new CommandLine();
        Properties properties = null;
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a", "value", "-b", "true", "-c", "1"};
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_EmptyExpectedOpts_WMCY0_FdeR1() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[0], new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_Ixri0_ADda0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        try {
            CommandLine result = parser.parse(options, arguments, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_RtgU0_hrpy0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NOFb0_aadi0_fid1() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        try {
            CommandLine result = parser.parse(options, arguments, new Properties());
            fail("ParseException was not expected");
        } catch (ParseException e) {
            // expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutProperties_EQbb1_JDsp0_fid1() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, arguments, null);
            fail("ParseException was not expected");
        } catch (ParseException e) {
            // expected
        }
    }
}