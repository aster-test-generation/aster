/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_qgMF1() {
        Options options = new Options();
        List<Option> result = options.helpOptions();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionFalse_YzjL1() {
        Options options = new Options();
        assertFalse(options.hasLongOption("abc-def"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionNull_IbkC2() {
        Options options = new Options();
        assertFalse(options.hasLongOption(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionEmpty_PLNS3() {
        Options options = new Options();
        assertFalse(options.hasLongOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionLeadingHyphen_pmYs4() {
        Options options = new Options();
        assertFalse(options.hasLongOption("-abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionMultipleHyphens_lmHO5() {
        Options options = new Options();
        assertFalse(options.hasLongOption("--abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionNull_auMA1() {
        Options options = new Options();
        Option option = options.getOption("null");
        assertNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_cFcI1() {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_usPo0() {
        Options options = new Options();
        Option opt = new Option("a", "longOption", true, "description");
        options.addOption(opt);
        assertEquals(opt, options.getOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortOpt_JANY1() {
        Options options = new Options();
        Option opt = new Option("a", true, "description");
        options.addOption(opt);
        assertEquals(opt, options.getOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithMultipleOptions_avfC3() {
        Options options = new Options();
        Option opt1 = new Option("a", true, "description");
        Option opt2 = new Option("b", true, "description");
        options.addOption(opt1);
        options.addOption(opt2);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_xmCh1() {
        Options options = new Options();
        options.addOption("o", "opt", true, "description");
        assertEquals(options.getOptions().size(), 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithExistingOption_txJv2() {
        Options options = new Options();
        options.addOption("o", "opt", true, "description");
        options.addOption("o", "opt", true, "description");
        assertEquals(options.getOptions().size(), 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullDescription_ADHo3() {
        Options options = new Options();
        options.addOption("o", "opt", true, null);
        assertEquals(options.getOptions().size(), 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithDuplicateKey_qHYL1() {
        Options options = new Options();
        Option opt = new Option("key", "description");
        options.addOption(opt);
        Options optionsToBeAdded = new Options();
        optionsToBeAdded.addOption(opt);
        try {
            options.addOptions(optionsToBeAdded);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Duplicate key: key", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_IZCd0() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        assertEquals(options, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_wVTn1() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        assertEquals(options.getOptions().size(), 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_wJrM1() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionNonExistingOption_ZqGI2() {
        Options options = new Options();
        boolean result = options.hasOption("-xyz");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OdOy0() {
        Options options = new Options();
        options.addOption("opt", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptionsNoMatch_HICm2_rzGv1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("bar");
        List<String> expected = new ArrayList<>();
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptionsEmptyInput_tWvp3_cSJo1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("");
        List<String> expected = new ArrayList<>();
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequiredOption_mtFb2_hVLX0() {
        Options options = new Options();
        options.addOption("a", "description");
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupMultipleOptions_nXmi2_CzpI0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        for (int i = 0; i < 3; i++) {
            Option option = new Option("opt" + i, "description" + i, false, "description" + i);
            group.addOption(option);
        }
        options.addOptionGroup(group);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_kWnL0_FjqU1() {
        Options options = new Options();
        options.addOption("a", null, false, "description");
        assertTrue(options.hasShortOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionFalse_YJKn1_hlaN1() {
        Options options = new Options();
        options.addOption("a", null, false, "description");
        assertFalse(options.hasShortOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vXcD1_fid2() {
        Options options = new Options();
        String result = options.toString();
        assertEquals("[ Options: [ short {} ] [ long {} ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithShortOptions_swCN2_YVrW1_fid2() {
        Options options = new Options();
        options.addOption("s", "short");
        String result = options.toString();
        assertEquals("[ Options: [ short {s=[ Option s :: short :: class java.lang.String ]} ] [ long {} ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOptions_AhrL3_dtQK1_fid2() {
        Options options = new Options();
        options.addOption("long", "long description", true, "long");
        String result = options.toString();
        assertEquals("[ Options: [ short {long=[ Option long long description [ARG] :: long :: class java.lang.String ]} ] [ long {long description=[ Option long long description [ARG] :: long :: class java.lang.String ]} ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithShortAndLongOptions_Cwrt4_QdCi0_fid2() {
        Options options = new Options();
        options.addOption("s", "short", false, "short");
        options.addOption("l", "long", false, "long");
        String result = options.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupRequiredOptionGroup_naxT0_vBwu1_fid2() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(false);
        options.addOptionGroup(group);
        assertEquals(false, options.getOptions().stream().anyMatch(Option::isRequired));
    }
}