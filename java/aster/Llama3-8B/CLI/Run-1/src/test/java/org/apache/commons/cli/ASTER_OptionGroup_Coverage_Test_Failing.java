/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SingleOptionWithOpt_jqxt1() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("opt", "description"));
        assertEquals("[-opt, description]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SingleOptionWithoutOpt_FTIY2() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option(null, "description"));
        assertEquals("[--description]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MultipleOptionsWithOpt_CzGu3() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("opt1", "description1"));
        optionGroup.getOptions().add(new Option("opt2", "description2"));
        assertEquals("[-opt1, description1, -opt2, description2]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MultipleOptionsWithoutOpt_CsuQ4() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option(null, "description1"));
        optionGroup.getOptions().add(new Option(null, "description2"));
        assertEquals("[--description1, --description2]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MixedOptions_ZXYl5() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("opt1", "description1"));
        optionGroup.getOptions().add(new Option(null, "description2"));
        assertEquals("[-opt1, description1, --description2]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithDescription_eFzU6() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("opt1", "description1"));
        optionGroup.getOptions().add(new Option(null, "description2 with space"));
        assertEquals("[-opt1, description1, --description2 with space]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithCommaInDescription_VvyM8() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("opt1", "description, with, comma"));
        assertEquals("[-opt1, description, with, comma]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithCommaInOpt_ZYrP9() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("opt, with, comma", "description"));
        assertEquals("[-opt, with, comma, description]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithCommaInLongOpt_yUha10() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option(null, "description, with, comma"));
        assertEquals("[--description, with, comma]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithMultipleCommas_LmLm11() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("opt, with, multiple, commas", "description, with, multiple, commas"));
        assertEquals("[-opt, with, multiple, commas, description, with, multiple, commas]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithEscapedCommas_shgP12() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("opt,\\,with,comma", "description,\\,with,comma"));
        assertEquals("[-opt,\\,with,comma, description,\\,with,comma]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OptionsWithBackslashes_VegS13() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.getOptions().add(new Option("opt,with\\backslash,comma", "description,with\\backslash,comma"));
        assertEquals("[-opt,with\\backslash,comma, description,with\\backslash,comma]", optionGroup.toString());
    }
}