/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesSingleValue_uXeG2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.getValuesList().add("value");
        String[] result = commandLine.getOptionValues(option);
        assert result.length == 1;
        assert result[0].equals("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesMultipleValues_KBPv3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.getValuesList().add("value1");
        option.getValuesList().add("value2");
        String[] result = commandLine.getOptionValues(option);
        assert result.length == 2;
        assert result[0].equals("value1");
        assert result[1].equals("value2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesMultipleOptions_CQgn4() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "description1");
        option1.getValuesList().add("value1");
        Option option2 = new Option("option2", "description2");
        option2.getValuesList().add("value2");
        commandLine.getOptionValues(option1);
        commandLine.getOptionValues(option2);
        String[] result = commandLine.getOptionValues(option1);
        assert result.length == 1;
        assert result[0].equals("value1");
        result = commandLine.getOptionValues(option2);
        assert result.length == 1;
        assert result[0].equals("value2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionTrue_wLnT0() {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('a');
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_RXch0() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assert argList == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_lVGr1() {
        CommandLine commandLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue('a', defaultValue);
        assert result.equals("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_JRzp1() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assert iterator.hasNext();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueNull_rqbj2() {
        CommandLine commandLine = new CommandLine();
        try {
            commandLine.getParsedOptionValue('a');
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_dfrH0() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues("opt");
        assertEquals(Arrays.asList(), Arrays.asList(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesResolveOptionReturnsNull_hErz2() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues("nonExistentOpt");
        assertEquals(Arrays.asList(), Arrays.asList(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesResolveOptionReturnsOptionWithDeprecated_QSYU3() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues("deprecatedOpt");
        assertEquals(Arrays.asList(), Arrays.asList(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_rHSg0_fid1() {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        String result = commandLine.getOptionValue(opt);
        assertEquals("Expected result", result, "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueResolvedOption_pZeW1_fid1() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("opt", "default");
        assertEquals("resolvedOption", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_UiCB1_fid1() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a');
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_YeSZ1() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a', "default");
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_IRhI1_fid1() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('a');
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectNull_JyBT2_fid1() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('b');
        assertEquals("b", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_wMrl0() {
        CommandLine commandLine = new CommandLine();
        String[] expected = {"-a", "-b", "-c"};
        String[] actual = commandLine.getOptionValues('a');
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOptionValue_cnBh0_fid1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(option, defaultValue);
        assertEquals("answer", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueConvertedValue_vqgJ2_hMzO0_fid3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option", true, "description");
        option.setConverter(Integer::valueOf);
        Supplier<Integer> defaultValue = () -> 0;
        assertEquals(1, commandLine.getOptionValue(option));
    }
}