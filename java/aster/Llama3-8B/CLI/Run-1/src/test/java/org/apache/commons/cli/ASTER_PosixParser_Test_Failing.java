/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_AkYd0() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        assert options != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesSingleOption_gpCi2() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("option", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesSingleOptionWithoutArg_OhQu4() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("option", "yes");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesMultipleOptions_sYau5() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesMultipleOptionsWithoutArg_aaTq7() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("option1", "yes");
        properties.setProperty("option2", "no");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_pWKv8() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("requiredOption", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionWithoutArg_gsVi9() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("requiredOption", "yes");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionGroup_UXda10() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("optionGroupOption", "value");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionGroupWithoutArg_oRqm11() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("optionGroupOption", "yes");
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesUnrecognizedOption_WzMz12() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("unrecognizedOption", "value");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesInvalidOptionValue_lCQo13() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        properties.setProperty("option", "invalidValue");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_EmptyRequiredOptions_pcXU0() throws MissingOptionException {
        PosixParser parser = new PosixParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOption_DNoe0() throws ParseException {
        PosixParser parser = new PosixParser();
        Option opt = new Option("a", "longOption", true, "description");
        ListIterator<String> iter = new java.util.ArrayList<String>().listIterator();
        iter.add("a");
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOptionalArg_JzRB2() throws ParseException {
        PosixParser parser = new PosixParser();
        Option opt = new Option("a", "longOption", false, "description");
        ListIterator<String> iter = new java.util.ArrayList<String>().listIterator();
        iter.add("a");
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_tHrl0() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "value2"};
        CommandLine result = parser.parse(options, arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mEZA0() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndArguments_oEJk0() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2", "c", "d"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_eEYy2() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        String[] arguments = {"-a", "1", "-b", "2", "c", "d"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_NBhU3() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptions_NAtk5() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"--a", "1", "--b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionProperties_VAIR6() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_rELH8() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-a", "1", "non-option", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithHelpOptions_uKbG9() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-h"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithVersionOptions_Jift10() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-v"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_AoNH11() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-x"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_ffpT12() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }
}