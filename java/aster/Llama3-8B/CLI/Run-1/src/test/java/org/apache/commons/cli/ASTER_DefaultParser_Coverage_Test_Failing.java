/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithRequiredArg_MIGj0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithRequiredArgAndJavaProperty_JaDA1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc=");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_Wdac0() throws ParseException {
        Options options = new Options();
        options.addOption("longOption", "longOption", true, "description");
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--longOption"};
        CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("description", commandLine.getParsedOptionValue("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithUnknownToken_mFWM3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("abc");
        assertEquals("abc", parser.stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMatchingLongOptions_eEnG2() throws ParseException {
        Options options = new Options();
        options.addOption("L", "L", true, "L option");
        String[] arguments = new String[]{"--L", "--L=V"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutMatchingLongOptions_bhbn3() throws ParseException {
        Options options = new Options();
        options.addOption("L", "L", true, "L option");
        String[] arguments = new String[]{"--M", "--M=V"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArrayList_KcHH4() throws ParseException {
        Options options = new Options();
        options.addOption("L", "L", true, "L option");
        String[] arguments = new String[]{"--L", "--L=V", "--L=V", "--L=V"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_hhuy0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"--unknownOption"}, new Properties(), true);
        assertEquals("unknownOption", parser.currentToken);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAmbiguousOptionException_aDCz1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("opt1", "longOpt1", true, "description1");
        options.addOption("opt2", "longOpt2", true, "description2");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"--longOpt1", "--longOpt2"}, new Properties(), true);
        assertEquals("longOpt1", parser.currentToken);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLongOptionWithoutEqual_cUfX2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"--longOpt"}, new Properties(), true);
        assertEquals("longOpt", parser.currentToken);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLongOptionWithEqual_BJfa3() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"--longOpt=value"}, new Properties(), true);
        assertEquals("longOpt", parser.currentToken);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_Hcht2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_tuih3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_dFpy2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--option", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_JzGn3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_qesK4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknown", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_BfXv2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1", "arg2"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_gRIM3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "--opt", "arg1", "arg2"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(3, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_jiFZ4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"unknown", "arg1", "arg2"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortOption_hLxi5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg2"};
        CommandLine result = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_yPtb2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--option"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_XOpg3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-o"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithArgument_eVpi5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--option", "value"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_IXID2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_UhPt3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-o", "arg1", "arg2"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_qXyv2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--longOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_WSNF3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithArgument_LNok5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-o", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_uJZk2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--opt1", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_PFUa3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "--opt1", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithOption_kFdL5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "arg1", "arg2"};
        Options options = new Options();
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOption_bodo2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_Cuog3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-o"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithArgument_rWPc5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--option", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nJOA0_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        boolean stopAtNonOption = true;
        CommandLine result = parser.parse(options, arguments, stopAtNonOption);
        assertEquals(2, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nJOA0_3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        boolean stopAtNonOption = true;
        CommandLine result = parser.parse(options, arguments, stopAtNonOption);
        assertEquals("1", result.getOptionValue("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nJOA0_4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        boolean stopAtNonOption = true;
        CommandLine result = parser.parse(options, arguments, stopAtNonOption);
        assertEquals("2", result.getOptionValue("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipParsingAfterDoubleDash_VRVj2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"--", "--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_HnfV3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "--longOption", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortOption_NzSU4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = {"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(new Options(), arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_FxXB6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{"unknown"}, new Properties(), true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortOption_NWPq5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndEqual_TKCN3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-S=V"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithShortOption_qOuo4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-S"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithShortOptionConcatenated_wsrL5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"-SV"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptions_AqAw3_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg2", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithRequiredOptions_BHsa4_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg2", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithNoArguments_NsNj5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("true", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithNoMatchingOptions_QpGS6_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-X", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithNoMatchingOptions_QpGS6_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-X", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithProperties_Bgoa7_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithProperties_Bgoa7_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg2", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithProperties_Bgoa7_3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionProperties("L").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithStopAtNonOption_PWhc8_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2", "non-option", "arg3"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), true);
        assertEquals("arg2", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_bVzl2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        String[] arguments = new String[]{"--opt", "value", "anotherArgument"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionsAndProperties_GtEU3() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        String[] arguments = new String[]{"--opt", "value", "anotherArgument"};
        Properties properties = new Properties();
        properties.put("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_kOcy0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--test"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_qmvj1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--test=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_llul2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-t"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_VpNE3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-t", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionAndValue_yNwn7() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--test", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionTrue_FbGT0() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "shortOption", true, "short option");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"-s"}, null, false);
        assertEquals(true, options.hasShortOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionFalse_sHph1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "shortOption", true, "short option");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"-t"}, null, false);
        assertEquals(false, options.hasShortOption("t"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashButNotOption_dFEt2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-1"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithDashAndOption_igjz3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithLongOption_ZaEo5() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--longOption"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithLongOptionAndValue_RcLk6() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"--longOption=value"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTokenWithShortOptionAndValue_nlDR7() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String[] arguments = new String[]{"-a=value"};
        CommandLine commandLine = parser.parse(new Options(), arguments, new Properties(), false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithEqual_EmptyMatchingOpts_aJdB0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--test"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithEqual_MoreThanOneMatchingOpts_oZue1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--test1", "--test2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithEqual_OptionHasArg_ekhL3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--test", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithoutEqual_EmptyMatchingOpts_EnOZ5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-t"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithoutEqual_MoreThanOneMatchingOpts_qNeK6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-t1", "-t2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_FXzy0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--opt", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_BCZe1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-o", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("-o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_IDnJ3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--opt=-1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-1", commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialLongOption_uGPO4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--optL"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("optL", commandLine.getOptionValue("--optL"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_myFd5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--opt"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("opt", commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_pPGr6_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-o", "--opt"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("o", commandLine.getOptionValue("-o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_pPGr6_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-o", "--opt"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("opt", commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_zcCy0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1", "--opt2", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("--opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_zcCy0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1", "--opt2", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg2", cmd.getOptionValue("--opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_GrqT1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "-10"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-10", cmd.getOptionValue("--opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutArgument_xRhZ2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("", cmd.getOptionValue("--opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_SGpV3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1", "arg2", "--opt2", "arg3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("--opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_SGpV3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1", "arg2", "--opt2", "arg3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg2", cmd.getOptionValue("--opt1", "default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_SGpV3_3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1", "arg2", "--opt2", "arg3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg3", cmd.getOptionValue("--opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_zCdP6() throws ParseException {
        Options options = new Options();
        String[] arguments = {"unknownToken"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unknown token: unknownToken", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDeprecatedHandler_Dhxt7() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("--opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Yrez8_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("--opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Yrez8_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionProperties("--opt1").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_HMBp0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--opt", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_Qjij1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-o", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("-o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndArgument_bMGz2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--opt=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndArgument_PaCK3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-o=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("-o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_FPAw5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--opt"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("opt", cmd.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_eZZj7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--opt=-1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-1", cmd.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialLongOption_LUmB8() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--optL"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("optL", cmd.getOptionValue("--optL"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_eZIq9() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--optL=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("--optL"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Zrnx6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_XzoM8() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"unknown-token"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_upqH9() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_yfuC10() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt1", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_ainQ11() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--opt", "--long-opt", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rgZm10() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--longOption", "value", "-s", "shortOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Hmng12() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--longOption", "value", "-s", "shortOption"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredArgs_ohUY14() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--longOption", "value", "-s", "shortOption", "requiredArg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_yTQx1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        options.addOption("b", "long-b", false, "description");
        String[] arguments = new String[]{"--a", "123", "--b", "abc", "def"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("123", commandLine.getParsedOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_yTQx1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        options.addOption("b", "long-b", false, "description");
        String[] arguments = new String[]{"--a", "123", "--b", "abc", "def"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("abc", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_yTQx1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        options.addOption("b", "long-b", false, "description");
        String[] arguments = new String[]{"--a", "123", "--b", "abc", "def"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("def", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qlfq5_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--a", "123"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("123", commandLine.getParsedOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qlfq5_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--a", "123"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value", commandLine.getOptionProperties("a").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_CFnx6_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--a", "123", "def", "ghi"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("123", commandLine.getParsedOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_CFnx6_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--a", "123", "def", "ghi"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_HHja7_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--a", "123", "def", "ghi"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("123", commandLine.getParsedOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_HHja7_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--a", "123", "def", "ghi"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseRequiredOptionWithoutValue_ekeq6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt1", "long-opt1", false, "description");
        String[] arguments = new String[]{"--long-opt1"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseRequiredOptionWithoutValueAndStopAtNonOption_gjXH7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt1", "long-opt1", false, "description");
        String[] arguments = new String[]{"--long-opt1", "value", "non-option"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseRequiredOptionWithoutValueAndNotStopAtNonOption_Uqjn8() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt1", "long-opt1", false, "description");
        String[] arguments = new String[]{"--long-opt1", "value", "non-option"};
        Properties properties = new Properties();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownArgument_eZEm6() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "Option description");
        String[] arguments = new String[]{"value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_ZFSa4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt", "required-opt", false, "description");
        String[] arguments = new String[]{"--required-opt", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("required-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionWithoutValue_vpdF5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt", "required-opt", false, "description");
        String[] arguments = new String[]{"--required-opt"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionWithoutValueAndNotStopAtNonOption_JFgk7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt", "required-opt", false, "description");
        String[] arguments = new String[]{"--non-required-opt"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNull(cmd.getOptionValue("required-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionWithoutValueAndProperties_TKft8() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("opt", "required-opt", false, "description");
        String[] arguments = new String[]{"--required-opt"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("required-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_baCx4_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        options.addOption("b", "def", false, "description");
        String[] arguments = new String[]{"--abc", "123", "-b", "456", "789"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("456", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_Hqnd5() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "abc", true, "description");
        String[] arguments = new String[]{"--abc", "123"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_stYn6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        String[] arguments = new String[]{"--xyz", "123"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unknown option: xyz", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownArgument_AcUI7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        String[] arguments = new String[]{"123", "xyz"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unknown argument: xyz", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_rkIs8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        String[] arguments = new String[]{"123", "xyz", "--abc", "456"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("456", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Wvmi9_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        String[] arguments = new String[]{"--abc", "123"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("123", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Wvmi9_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        String[] arguments = new String[]{"--abc", "123"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionProperties("key").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsStripLeadingAndTrailingQuotesTrue_PFSf0_RIRM0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("  hello  ");
        assertEquals("hello", parser.parse(new Options(), new String[]{"  hello  "}, new Properties()).getOptionValue("hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StartsWithDash_RhGu0_TJwe0_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(new Options(), new String[]{"-abc"}, new Properties());
        assertEquals("abc", commandLine.getOptionValue("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StartsWithDash_RhGu0_TJwe0_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(new Options(), new String[]{"-abc"}, new Properties());
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutAllowPartialMatching_eMqI1_aCNM0() throws ParseException {
        Options options = new Options();
        options.addOption("L", "L", true, "Description");
        String[] arguments = new String[]{"--L", "--L=V"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleOptionWithArg_snvh3_YJDc1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(new Options(), new String[]{"-o", "arg"}, new Properties(), true);
        assertEquals("arg", cmd.getOptionValue("-o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleOptionWithArg_iprS3_hsXb0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        parser.parse(options, new String[]{"-o", "value"}, new Properties(), true);
        CommandLine commandLine = parser.parse(options, new String[]{"-o", "value"}, new Properties(), true);
        assertEquals("value", commandLine.getOptionValue("-o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotesDefaultOnFalse_msBq1_fWlt0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(false);
        String token = "\"hello\"";
        String result = parser.parse(new Options(), new String[]{token}, new Properties()).getOptionValue(token);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_kdcV5_heTf1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(new Options(), new String[]{"-o", "-l"}, new Properties(), true);
        assertEquals("l", commandLine.getOptionValue("-l", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotesDefaultOnTrue_UxMF0_RCyr0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        String token = "\"hello\"";
        String result = parser.parse(new Options(), new String[]{token}, new Properties()).getOptionValue(token);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithoutEqual_OhWk3_igJt0() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("longOption", "longOption", true, "long option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"--longOption"}, null, false);
        CommandLine cmd = parser.parse(options, new String[]{"--longOption"}, null, false);
        assertEquals(true, commandLine.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleRequiredOption_GRsA8_DHfK0_1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addRequiredOption("s", "shortOption", true, "short option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, new String[]{"-s"}, null, false);
        CommandLine cmdLine = parser.parse(options, new String[]{"-s"}, null, false);
        assertEquals(true, cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleRequiredOption_GRsA8_DHfK0_2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addRequiredOption("s", "shortOption", true, "short option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, new String[]{"-s"}, null, false);
        CommandLine cmdLine = parser.parse(options, new String[]{"-s"}, null, false);
        assertEquals(true, cmdLine.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleRequiredOption_GRsA8_DHfK0_3() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addRequiredOption("s", "shortOption", true, "short option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, new String[]{"-s"}, null, false);
        CommandLine cmdLine = parser.parse(options, new String[]{"-s"}, null, false);
        assertEquals(true, cmd.hasOption("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleRequiredOption_GRsA8_DHfK0_4() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addRequiredOption("s", "shortOption", true, "short option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, new String[]{"-s"}, null, false);
        CommandLine cmdLine = parser.parse(options, new String[]{"-s"}, null, false);
        assertEquals(true, cmdLine.hasOption("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionPrefixWithMultipleOptions_FeSn1_FldR0_1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption1", true, "long option1 description");
        options.addOption("M", "longOption2", true, "long option2 description");
        String token = "LM";
        String[] args = token.split("");
        CommandLine cmd = parser.parse(options, args);
        assertEquals("L", cmd.getOptionValue("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionPrefixWithMultipleOptions_FeSn1_FldR0_2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption1", true, "long option1 description");
        options.addOption("M", "longOption2", true, "long option2 description");
        String token = "LM";
        String[] args = token.split("");
        CommandLine cmd = parser.parse(options, args);
        assertEquals("M", cmd.getOptionValue("M"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_AilZ5_MMbr0_1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "shortOption", true, "short option");
        options.addOption("longOption", "longOption", true, "long option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"-s", "--longOption"}, null);
        assertEquals(true, commandLine.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleShortAndLongOption_AilZ5_MMbr0_2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "shortOption", true, "short option");
        options.addOption("longOption", "longOption", true, "long option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"-s", "--longOption"}, null);
        assertEquals(true, commandLine.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsOptionLongOption_TpmH3_EtGo0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(false);
        String token = "--longOption";
        boolean result = parser.parse(null, new String[]{token}, null).hasOption(token);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsOptionShortOption_gYMC4_QapT0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(false);
        String token = "-s";
        boolean result = parser.parse(new Options(), new String[]{token}, new Properties()).hasOption(token);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsOptionLongOptionWithEquals_PmTu5_dBVf0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(false);
        String token = "--longOption=value";
        boolean result = parser.parse(null, new String[]{token}, null).hasOption("longOption");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNegativeNumber_tPDK2_xMFx0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(null, new String[]{"-help"}, new Properties());
        } catch (Exception e) {
            fail("Expected no exception, but got " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_BKeO6_DJmE0_1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "shortOption", true, "short option");
        options.addOption("l", "longOption", true, "long option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"-s", "-l"}, null);
        assertEquals(true, commandLine.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_BKeO6_DJmE0_2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "shortOption", true, "short option");
        options.addOption("l", "longOption", true, "long option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"-s", "-l"}, null);
        assertEquals(true, commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_BKeO6_DJmE0_3() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "shortOption", true, "short option");
        options.addOption("l", "longOption", true, "long option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"-s", "-l"}, null);
        assertEquals(true, commandLine.hasOption("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_BKeO6_DJmE0_4() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("s", "shortOption", true, "short option");
        options.addOption("l", "longOption", true, "long option");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, new String[]{"-s", "-l"}, null);
        assertEquals(true, commandLine.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_pkHI1_dTOA0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("opt1", "short-opt1", true, "description");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("short-opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOptionWithoutValue_YAgZ3_rUwH0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("opt1", "short-opt1", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("short-opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_hhuy0_fid1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.parse(new Options(), new String[]{"----unknownOption"}, new Properties(), true);
        assertEquals("--unknownOption", parser.currentToken);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLongOptionWithEqual_BJfa3_fid1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("opt", "--longOpt=value", true, "description");
        DefaultParser parser = new DefaultParser(true);
        parser.parse(options, new String[]{"----longOpt=value=value"}, new Properties(), true);
        assertEquals("--longOpt=value", parser.currentToken);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nJOA0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        boolean stopAtNonOption = true;
        CommandLine result = parser.parse(options, arguments, stopAtNonOption);
        assertNotNull(result);
        assertEquals(2, result.getOptions().length);
        assertEquals("1", result.getOptionValue("-a"));
        assertEquals("2", result.getOptionValue("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptions_AqAw3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
        assertEquals("arg2", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithRequiredOptions_BHsa4() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addRequiredOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
        assertEquals("arg2", cmd.getOptionValue("L", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithNoMatchingOptions_QpGS6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-X", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("arg1", cmd.getArgList().get(0));
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithProperties_Bgoa7() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        String[] arguments = {"-L", "arg1", "arg2"};
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
        assertEquals("arg2", cmd.getOptionValue("L", ""));
        assertEquals("value", cmd.getOptionProperties("L").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsWithStopAtNonOption_PWhc8() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        String[] arguments = {"-L", "arg1", "arg2", "non-option", "arg3"};
        CommandLine cmd = parser.parse(options, arguments, new Properties(), true);
        assertEquals("arg1", cmd.getOptionValue("L", ""));
        assertEquals("arg2", cmd.getOptionValue("L", ""));
        assertEquals("arg3", cmd.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_pPGr6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"-o", "--opt"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("o", commandLine.getOptionValue("-o"));
        assertEquals("opt", commandLine.getOptionValue("--opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_zcCy0() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1", "--opt2", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("--opt1"));
        assertEquals("arg2", cmd.getOptionValue("--opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_SGpV3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1", "arg2", "--opt2", "arg3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("--opt1"));
        assertEquals("arg2", cmd.getOptionValue("--opt1", "default"));
        assertEquals("arg3", cmd.getOptionValue("--opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Yrez8() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--opt1", "arg1"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("--opt1"));
        assertEquals("value", cmd.getOptionProperties("--opt1").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_yTQx1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        options.addOption("b", "long-b", false, "description");
        String[] arguments = new String[]{"--a", "123", "--b", "abc", "def"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("123", commandLine.getParsedOptionValue("a"));
        assertEquals("abc", commandLine.getOptionValue("b"));
        assertEquals("def", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qlfq5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--a", "123"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("123", commandLine.getParsedOptionValue("a"));
        assertEquals("value", commandLine.getOptionProperties("a").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_CFnx6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--a", "123", "def", "ghi"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("123", commandLine.getParsedOptionValue("a"));
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_HHja7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        String[] arguments = new String[]{"--a", "123", "def", "ghi"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("123", commandLine.getParsedOptionValue("a"));
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_baCx4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        options.addOption("b", "def", false, "description");
        String[] arguments = new String[]{"--abc", "123", "-b", "456", "789"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("123", cmd.getParsedOptionValue("a"));
        assertEquals("456", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Wvmi9() throws ParseException {
        Options options = new Options();
        options.addOption("a", "abc", true, "description");
        String[] arguments = new String[]{"--abc", "123"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("123", cmd.getOptionValue("a"));
        assertEquals("value", cmd.getOptionProperties("key").getProperty("key"));
    }
}