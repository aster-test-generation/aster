/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStopAtNonOption_Glmz0() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "b", "c"};
        String[] result = parser.flatten(options, arguments, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionFound_liTW1() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--longA", "b", "c"};
        String[] result = parser.flatten(options, arguments, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionNotFound_ffRS2() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"--longA", "b", "c"};
        String[] result = parser.flatten(options, arguments, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_eBas0() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearDataFromGroups_SMqI1() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.parse(options, arguments, properties, stopAtNonOption);
        for (Option opt : options.helpOptions()) {
            opt.clearValues();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedNull_DrLd2() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        for (OptionGroup group : options.getOptionGroups()) {
            group.setSelected(null);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitializeMembers_OzrQ3() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.setOptions(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCmdBuilder_DCiC4() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.cmd = CommandLine.builder().build();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_nzOo10() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStopAtNonOption_NQyH9_UxhT0() throws org.apache.commons.cli.ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        parser.parse(options, arguments, properties, stopAtNonOption);
    }
}