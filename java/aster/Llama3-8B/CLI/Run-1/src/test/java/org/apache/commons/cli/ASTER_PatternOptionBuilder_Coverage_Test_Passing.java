/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOption_ZLdK0_1() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOption_ZLdK0_2() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionAndArg_lzMo1_1() {
        String pattern = "a:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionAndArg_lzMo1_2() {
        String pattern = "a:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionAndArg_lzMo1_4() {
        String pattern = "a:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionAndArgAndRequired_LheD2_1() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionAndArgAndRequired_LheD2_2() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionAndArgAndRequired_LheD2_4() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionAndArgAndRequired_LheD2_5() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertTrue(option.isRequired());
    }
}