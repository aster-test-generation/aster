/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_BQTK0() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert Arrays.equals(result, new String[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_gvYz0() {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        Option[] expectedOptions = Option.EMPTY_ARRAY;
        assertArrayEquals(expectedOptions, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_SZYb1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String result = commandLine.getOptionValue(option, () -> "defaultValue");
        assertEquals("defaultValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_rHSg0() {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        String result = commandLine.getOptionValue(opt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_FlFx0() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("opt", () -> "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_Hjie0() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("opt", () -> "default");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueResolveOptionReturnsNull_pogT1() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("nonExistingOpt", () -> "default");
        assert result.equals("default");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueHandleDeprecated_wnUU3() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("deprecatedOpt", () -> "default");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_NiYM0() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("opt", "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueNullOption_Bofe2() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("nonExistingOpt", "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_UiCB1() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a');
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_IRhI1() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('a');
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectNull_JyBT2() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('b');
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesNullOption_mtDw0() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String[] result = commandLine.getOptionValues(option);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesEmptyValues_CKYF1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        commandLine.getOptionValues(option);
        String[] result = commandLine.getOptionValues(option);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionFalse_wUMY1() {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('b');
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_bWSX0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionNotAdded_QvIB1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        assertFalse(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_oSrt1() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assert argList.isEmpty();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOptionValue_cnBh0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_Oend0() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assert iterator != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionNotPresent_dyek2() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("not-present"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNonExistingOpt_xBCr3() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("non-existing-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithoutValues_BRxw1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String result = commandLine.getOptionValue(option);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueResolveOptionReturnNull_bZKy1_PIuX0() {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        String result = commandLine.getOptionValue(opt);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueConvertedValue_vqgJ2_hMzO0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option", true, "description");
        option.setConverter(Integer::valueOf);
        Supplier<Integer> defaultValue = () -> 0;
    }
}