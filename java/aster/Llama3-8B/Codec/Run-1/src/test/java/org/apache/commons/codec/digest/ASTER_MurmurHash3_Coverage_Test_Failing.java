/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_GNuE0() {
        byte[] data = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09, (byte) 0x10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Tail_sLmD1() {
        byte[] data = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09, (byte) 0x10, (byte) 0x11, (byte) 0x12};
        int offset = 0;
        int length = 12;
        int seed = 12345;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_XflN0() {
        byte[] data = new byte[16];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        data[5] = 6;
        data[6] = 7;
        data[7] = 8;
        data[8] = 9;
        data[9] = 10;
        data[10] = 11;
        data[11] = 12;
        data[12] = 13;
        data[13] = 14;
        data[14] = 15;
        data[15] = 16;
        int offset = 0;
        int length = 16;
        int seed = 123456789;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Tail_AuKZ1() {
        byte[] data = new byte[20];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        data[5] = 6;
        data[6] = 7;
        data[7] = 8;
        data[8] = 9;
        data[9] = 10;
        data[10] = 11;
        data[11] = 12;
        data[12] = 13;
        data[13] = 14;
        data[14] = 15;
        data[15] = 16;
        data[16] = 17;
        data[17] = 18;
        data[18] = 19;
        data[19] = 20;
        int offset = 0;
        int length = 20;
        int seed = 123456789;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
}