/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8NullBytes_hKRA0() {
        String result = StringUtils.newStringUtf8(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_fvVn0() {
        String string = "Hello, World!";
        byte[] expected = "Hello, World!".getBytes(StandardCharsets.UTF_16);
        byte[] actual = StringUtils.getBytesUtf16(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_goCv0() {
        String string = "Hello";
        byte[] result = StringUtils.getBytesIso8859_1(string);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeNullBytes_hFYd0() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf16Le(bytes);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeNonNullBytes_FSiR1() {
        byte[] bytes = new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03};
        String result = StringUtils.newStringUtf16Le(bytes);
        assertEquals(new String(new byte[]{(byte) 0x0000, (byte) 0x0001, (byte) 0x0002, (byte) 0x0003}, StandardCharsets.UTF_16LE), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16NullBytes_HlqQ0() {
        String result = StringUtils.newStringUtf16(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNullAndNull_sARS0() {
        assertTrue(StringUtils.equals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNullAndString_YNDX1() {
        assertFalse(StringUtils.equals(null, "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsStringAndNull_NVmq2() {
        assertFalse(StringUtils.equals("test", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsStringAndString_hnVT3() {
        assertTrue(StringUtils.equals("test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsStringAndStringWithDifferentLength_JJBp5() {
        assertFalse(StringUtils.equals("test", "testing"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsStringAndStringWithDifferentContent_xNWx6() {
        assertFalse(StringUtils.equals("test", "hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsStringBuilderAndString_Vylf7() {
        StringBuilder sb = new StringBuilder("test");
        assertTrue(StringUtils.equals(sb.toString(), "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_ujRl0() {
        String string = "Hello, World!";
        ByteBuffer result = StringUtils.getByteBufferUtf8(string);
        ByteBuffer expected = ByteBuffer.wrap(string.getBytes(StandardCharsets.UTF_8));
        assert result.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_zCOR0() {
        String string = "Test String";
        byte[] result = StringUtils.getBytesUtf16Be(string);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16BeNull_HoLf1() {
        String string = null;
        byte[] result = StringUtils.getBytesUtf16Be(string);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16BeEmpty_DoXl2() {
        String string = "";
        byte[] result = StringUtils.getBytesUtf16Be(string);
        assert result.length == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_gOkV0() {
        byte[] bytes = "Hello, World!".getBytes();
        String result = StringUtils.newStringIso8859_1(bytes);
        assert result.equals("Hello, World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAsciiNullInput_qbhK0() {
        byte[] result = StringUtils.getBytesUsAscii(null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAsciiValidInput_rawm1() {
        byte[] result = StringUtils.getBytesUsAscii("Hello");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringValidInput_cJud0() {
        byte[] bytes = "Hello, World!".getBytes();
        String charsetName = "UTF-8";
        String result = StringUtils.newString(bytes, charsetName);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUncheckedUnsupportedEncodingException_pQzK1() {
        assertThrows(IllegalStateException.class, () -> StringUtils.getBytesUnchecked("Test", "Invalid charset"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8NullInput_lgTt0() {
        byte[] result = StringUtils.getBytesUtf8(null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8ValidInput_Trjy1() {
        byte[] result = StringUtils.getBytesUtf8("Hello, World!");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16BeNullBytes_mqmu0() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf16Be(bytes);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAsciiNullInput_nKBp0() {
        String result = StringUtils.newStringUsAscii(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAsciiValidInput_gxtT1() {
        byte[] bytes = "Hello, World!".getBytes();
        String result = StringUtils.newStringUsAscii(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsStringAndStringWithDifferentCase_IqsD4_fid1() {
        assertFalse(StringUtils.equals("Test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16BeEmptyBytes_VdHZ1_yOXJ0_fid1() {
        byte[] bytes = new byte[0];
        String result = StringUtils.newStringUsAscii(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringInvalidCharset_DEVk1_ZsXu0_fid1() {
        byte[] bytes = "Hello, World!".getBytes();
        String charsetName = "InvalidCharset";
        try {
            String result = StringUtils.newString(bytes, charsetName);
            fail("Expected UnsupportedEncodingException");
        } catch (Exception e) {
            assertEquals("InvalidCharset: java.io.UnsupportedEncodingException: InvalidCharset", e.getMessage());
        }
    }
}