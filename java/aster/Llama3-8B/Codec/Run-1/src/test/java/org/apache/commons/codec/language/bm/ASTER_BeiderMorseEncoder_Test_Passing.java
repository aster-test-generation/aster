/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BeiderMorseEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameTypeAshkenazi_pGkQ0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setNameType(NameType.ASHKENAZI);
        assertEquals(encoder.getNameType(), NameType.ASHKENAZI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameTypeGeneric_wgUJ1() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setNameType(NameType.GENERIC);
        assertEquals(encoder.getNameType(), NameType.GENERIC);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameTypeSephardic_CNye2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setNameType(NameType.SEPHARDIC);
        assertEquals(encoder.getNameType(), NameType.SEPHARDIC);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_XVLc0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        RuleType ruleType = beiderMorseEncoder.getRuleType();
        assertEquals(RuleType.class, ruleType.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_WEap0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        boolean result = encoder.isConcat();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType_noNM0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        NameType result = beiderMorseEncoder.getNameType();
        assertEquals(NameType.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_LyJr0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        try {
            Object result = beiderMorseEncoder.encode("Hello");
            assertNotNull(result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_Ldch1() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        try {
            beiderMorseEncoder.encode(123);
            fail("EncoderException was not thrown");
        } catch (EncoderException e) {
            assertEquals("BeiderMorseEncoder encode parameter is not of type String", e.getMessage());
        }
    }
}