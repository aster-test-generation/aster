/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_uvbp0() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input = "Hello";
        Object result = refinedSoundex.encode(input);
        assertEquals("H070", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonLetterCharacter_Rlle0() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals(0, soundex.getMappingCode(' '));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLetterCharacter_rgsz1() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals('0', soundex.getMappingCode('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOutOfRange_GIuI2() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals(53, soundex.getMappingCode('Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidIndex_hNRR3() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals('0', soundex.getMappingCode('A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_EQvs0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("Hello");
        assertEquals("H070", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithNonZeroCode_meor1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("HelloWorld");
        assertEquals("H070976", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithZeroCode_OONI2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("HelloW");
        assertEquals("H070", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithNullInput_UIGi3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithEmptyString_nllS4() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSingleCharacter_FTYU5() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a");
        assertEquals("A0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleCharacters_WvIe6() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("abc");
        assertEquals("A013", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveSameCodes_LPqi7() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("aaaa");
        assertEquals("A0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveDifferentCodes_pFmT8() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("abcd");
        assertEquals("A0136", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveSameCodesAndZeroCode_EjoB9() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a0a");
        assertEquals("A0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveDifferentCodesAndZeroCode_pBey10() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("ab0c");
        assertEquals("A013", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveSameCodesAndNonZeroCode_AkxM11() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a4a");
        assertEquals("A0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveDifferentCodesAndNonZeroCode_ygWu12() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("ab4c");
        assertEquals("A013", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveSameCodesAndNonZeroCodeAndZeroCode_gZqr13() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a40a");
        assertEquals("A0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveDifferentCodesAndNonZeroCodeAndZeroCode_VubA14() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("ab40c");
        assertEquals("A013", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveSameCodesAndNonZeroCodeAndNonZeroCode_dwPf15() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a44a");
        assertEquals("A0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithConsecutiveDifferentCodesAndNonZeroCodeAndNonZeroCode_lDhG16() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("ab44c");
        assertEquals("A013", result);
    }
}