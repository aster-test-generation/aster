/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNullString_wqVu0() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyString_TVUR1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("", "UTF-8");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonNullString_NGew1() throws org.apache.commons.codec.DecoderException {
        URLCodec codec = new URLCodec();
        String str = "Hello World";
        String decoded = codec.decode(str);
        assertNotNull(decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_yPrs1() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] byteArray = new byte[]{1, 2, 3};
        Object result = urlCodec.decode(byteArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_GdsQ2() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String str = "Hello, World!";
        Object result = urlCodec.decode(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonStringObject_jDbx3() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        Object obj = new Object();
        try {
            urlCodec.decode(obj);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonByteArrayObject_coRH4() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        Object obj = new Integer(1);
        try {
            urlCodec.decode(obj);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_Jnoq1() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] byteArray = new byte[]{1, 2, 3};
        Object result = urlCodec.encode(byteArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_hgec2() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String str = "Hello World";
        Object result = urlCodec.encode(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonStringObject_mrsR3() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        Object obj = new Object();
        try {
            urlCodec.encode(obj);
            assert false;
        } catch (EncoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonByteArrayNonStringObject_ChZB5() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        Object obj = new Integer(1);
        try {
            urlCodec.encode(obj);
            assert false;
        } catch (EncoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidString_XkVt1() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String encoded = urlCodec.encode("Hello, World!");
        assertNotNull(encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidStringWithCharset_Smqh2() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String encoded = urlCodec.encode("Hello, World!");
        assertNotNull(encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlNullInput_EWmO0() throws DecoderException {
        byte[] bytes = null;
        byte[] expected = null;
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEmptyInput_aBMe1() throws DecoderException {
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlSingleByteInput_eHPo2() throws DecoderException {
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] expected = new byte[]{(byte) 'a'};
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlTwoByteInput_mlUP3() throws DecoderException {
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] expected = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNullString_csmH0_fbiH0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        assertNull(codec.encode(null, "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_nJPd0_PsaY1() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String result = urlCodec.encode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_WrPB0_sYoB0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String result = urlCodec.encode(null, "UTF-8");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullString_DCYj0_vlIv1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        assertNull(urlCodec.encode(null, "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEscapeSequenceInput_jYro4_eXHR0() throws DecoderException {
        byte[] bytes = new byte[]{(byte) 37, (byte) '1', (byte) '2'};
        byte[] expected = new byte[]{(byte) (0x12)};
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEscapeSequenceInputWithArrayIndexOutOfBoundsException_FCwb5_Uimo0() throws DecoderException {
        byte[] bytes = new byte[]{(byte) 37, (byte) '1'}; // ESCAPE_CHAR is 37
        try {
            URLCodec.decodeUrl(bytes);
            assertEquals(false, true); // This test should fail
        } catch (DecoderException e) {
            assertEquals("Invalid URL encoding: ", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEscapeSequenceInputWithInvalidEscapeSequence_PrGE6_pcxK0() throws DecoderException {
        byte[] bytes = new byte[]{(byte) '%', (byte) '1', (byte) '3', (byte) '4'};
        try {
            URLCodec.decodeUrl(bytes);
            assertEquals(true, true); // This test should fail
        } catch (DecoderException e) {
            assertEquals("Invalid URL encoding: ", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithCharset_QHWe2_veIk0() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String str = "Hello World";
        String decoded = codec.encode(str, "UTF-8");
        assertNotNull(decoded);
    }
}