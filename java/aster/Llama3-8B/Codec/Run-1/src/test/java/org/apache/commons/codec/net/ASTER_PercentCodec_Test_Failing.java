/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_mqFO1_EXIo0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        try {
            byte[] result = codec.decode(bytes);
            assertEquals(result, bytes);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpace_FqOZ4_ltTD0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) '%'}, true);
        byte[] bytes = new byte[]{(byte) 'a', (byte) ' '};
        try {
            byte[] result = codec.encode(bytes);
            Assertions.assertArrayEquals(new byte[]{(byte) 'a', (byte) '%', (byte) '2', (byte) '0'}, result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeChars_NiIB4_TCRY0() {
        PercentCodec codec = new PercentCodec(new byte[]{0x20, 0x21}, true);
        byte[] bytes = "Hello World!".getBytes();
        try {
            byte[] result = codec.encode(bytes);
            Assertions.assertArrayEquals(bytes, result);
        } catch (EncoderException e) {
            throw new AssertionError("EncoderException was thrown", e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpace_TwUK4_VGwH0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0x20}, true);
        byte[] bytes = "abc ".getBytes();
        try {
            byte[] result = codec.encode(bytes);
            Assertions.assertArrayEquals(new byte[]{(byte) 0x61, (byte) 0x63, (byte) 0x63, (byte) 0x25, (byte) 0x20, (byte) 0x25}, result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeChars_ZSrK5_KrGB0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0x20, (byte) 0x30}, true);
        byte[] bytes = "abc30".getBytes();
        try {
            byte[] result = codec.decode(bytes);
            Assertions.assertArrayEquals(new byte[]{(byte) 0x61, (byte) 0x63, (byte) 0x63, (byte) 0x33, (byte) 0x30}, result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_xEVR0_LVSW0() {
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.decode(null);
            fail("DecoderException was expected, but it was not thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_YRcT5_uOJz0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 32};
        try {
            byte[] result = codec.encode(bytes);
            assert result.length == 4;
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodePlusForSpace_QtTc4_cFpL0() {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b'}, true);
        byte[] bytes = "a b".getBytes();
        try {
            byte[] result = codec.decode(bytes);
            Assertions.assertArrayEquals(new byte[]{'a', 'b'}, result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodePlusForSpaceNoEncode_hrZD5_ZAZS0() {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b'}, false);
        byte[] bytes = "a b".getBytes();
        try {
            byte[] result = codec.encode(bytes);
            Assertions.assertArrayEquals(new byte[]{'a', ' ', 'b'}, result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown but not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultiByteWithSpace_HlyA4_Uphl0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0x20}, true);
        byte[] bytes = new byte[]{(byte) 0x20, (byte) 0x30};
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, new byte[]{(byte) '+', (byte) 0x30});
        } catch (EncoderException e) {
            fail("EncoderException was thrown unexpectedly");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultiByteWithEscape_QcVZ5_OpEz0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x20, (byte) 0x25};
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, new byte[]{(byte) '%', (byte) 0x25, (byte) 0x25});
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_GFRX4_zFRy0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 'a'}, true);
        try {
            byte[] result = codec.encode(new byte[]{(byte) 'a', (byte) ' '});
            assert Arrays.equals(result, new byte[]{(byte) 'a', (byte) '+'});
        } catch (EncoderException e) {
            fail("EncoderException was thrown but not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEscapeChar_CvMI5_UPzD0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 'a'}, false);
        try {
            byte[] result = codec.decode(new byte[]{(byte) '%'});
            assert Arrays.equals(result, new byte[]{(byte) '%'});
        } catch (DecoderException e) {
            fail("DecoderException was thrown, but it should not");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleByteEncoded_GDKu3_XWvH0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0}, true);
        try {
            byte[] result = codec.encode(new byte[]{(byte) 0});
            assert Arrays.equals(result, new byte[]{(byte) 0});
        } catch (EncoderException e) {
            fail("EncoderException was not thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_oOAR4_zJcY0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0x20}, true);
        byte[] bytes = new byte[]{(byte) 0x20};
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, new byte[]{(byte) '+'});
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAscii_KLbv3_mTWn0_fid1() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "abc".getBytes();
        bytes[0] = (byte) 0x80;
        try {
            byte[] result = codec.encode(bytes);
            Assertions.assertArrayEquals(new byte[]{(byte) 0x25, (byte) 0x63, (byte) 0x63, (byte) 0x63}, result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown, but it should not be");
        }
    }
}