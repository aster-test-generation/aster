/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_StringUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8NullString_JzfK0() {
        ByteBuffer result = StringUtils.getByteBufferUtf8(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8ValidString_Nwcl1() {
        String string = "Hello, World!";
        ByteBuffer result = StringUtils.getByteBufferUtf8(string);
        assertEquals(string.length(), result.remaining());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_StringString_RojF0_1() {
        assertTrue(StringUtils.equals("Hello", "Hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_StringString_RojF0_2() {
        assertFalse(StringUtils.equals("Hello", "World"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullString_aJcy3_1() {
        assertFalse(StringUtils.equals(null, "Hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullString_aJcy3_2() {
        assertFalse(StringUtils.equals("Hello", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullNull_ebHn4() {
        assertTrue(StringUtils.equals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_CharSequenceCharSequenceDifferentLength_ThdC10() {
        assertFalse(StringUtils.equals("Hello", "HelloWorld"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_ObjectString_PJBa2_QxvN0_1() {
        Object obj = "Hello";
        String str2 = "Hello";
        assertTrue(StringUtils.getByteBufferUtf8(String.valueOf(obj)).equals(StringUtils.getByteBufferUtf8(str2)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_ObjectString_PJBa2_QxvN0_2() {
        Object obj = "Hello";
        String str2 = "Hello";
        assertFalse(StringUtils.getByteBufferUtf8(null) != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_StringString_RojF0() {
        assertTrue(StringUtils.equals("Hello", "Hello"));
        assertFalse(StringUtils.equals("Hello", "World"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullString_aJcy3() {
        assertFalse(StringUtils.equals(null, "Hello"));
        assertFalse(StringUtils.equals("Hello", null));
    }
}