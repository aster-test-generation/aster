/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Sha2Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptNullSalt_qSVs1() {
        byte[] keyBytes = "testkey".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha256Crypt(keyBytes, null, random);
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_Jcph0() {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            String keyBytes = "testKey";
            byte[] keyBytesBytes = keyBytes.getBytes(StandardCharsets.UTF_8);
            String result = Sha2Crypt.sha512Crypt(keyBytesBytes);
            System.out.println("sha512Crypt(" + keyBytesBytes + ") = " + result);
            assert result != null;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptNullSalt_isfH1() {
        byte[] keyBytes = "testKey".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha512Crypt(keyBytes, null, random);
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_qAty0_ttoh0() {
        byte[] keyBytes = "testkey".getBytes();
        Random random = new Random();
        String salt = "$6$" + B64.getRandomSalt(8, random);
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt, random);
        System.out.println(result);
    }
}