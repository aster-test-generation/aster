/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_MqPZ0() throws EncoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String result = codec.encodeText("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", "UTF-8");
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithString_HrXi3() {
        BCodec codec = new BCodec("UTF-64");
        assertEquals("UTF-64", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_iEPH0_kiaV0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        try {
            String result = codec.decode("Hello");
            assertEquals("Hello", result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown but not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_lEGI1_UUtM1() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        try {
            String result = codec.decode(null);
            fail("DecoderException was expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_wVZ0_qIjb0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        try {
            String result = codec.encodeText("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", Charset.forName("UTF-8"));
            assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_wrLd0_qOoM0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        try {
            String result = codec.encodeText("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", Charset.forName("UTF-8"));
            assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CtnP0_UYds0() {
        BCodec codec = new BCodec("UTF-8");
        try {
            String result = codec.encodeText("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", Charset.forName("UTF-8"));
            assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_MqPZ0_fid1() throws EncoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String result = codec.encodeText("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidFormat_tGWM4_fid1() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("=?UTF-8?q?Hello_World?=");
            assertEquals("Hello World", result);
        } catch (DecoderException | UnsupportedEncodingException e) {
            fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidCharset_ETaU5_fid1() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("=?UTF-16?q?Hello_World?=");
            assertEquals("Hello World", result);
        } catch (DecoderException | UnsupportedEncodingException e) {
            fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidEncoding_aSLI6_fid1() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("=?ISO-8859-1?q?Hello_World?=");
            assertEquals("Hello World", result);
        } catch (DecoderException | UnsupportedEncodingException e) {
            fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_miOv0_Nxyl0_fid2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String value = "Hello World";
        try {
            String result = codec.encodeText(value, Charset.forName("UTF-8"));
            assertEquals(value, result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_wVZ0_qIjb0_fid2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        try {
            String result = codec.encodeText("Hello, World!", Charset.forName("UTF-8"));
            assertEquals("Hello, World!", result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_wrLd0_qOoM0_fid2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        try {
            String result = codec.encodeText("Hello, World!", Charset.forName("UTF-8"));
            assertEquals("Hello, World!", result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CtnP0_UYds0_fid2() {
        BCodec codec = new BCodec("UTF-8");
        try {
            String result = codec.encodeText("Hello, World!", Charset.forName("UTF-8"));
            assertEquals("Hello, World!", result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }
}