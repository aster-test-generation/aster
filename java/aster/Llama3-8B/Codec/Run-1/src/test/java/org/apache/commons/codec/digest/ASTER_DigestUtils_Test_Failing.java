/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_jogq0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "f4c4a4f9c5a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x4y4z";
        String result = DigestUtils.sha3_384Hex(data);
        assert result.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_aKJy0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        DigestUtils digestUtils = new DigestUtils(digest);
        String result = DigestUtils.shaHex("Hello World");
        assertEquals("aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_efGu0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        String expected = "a94a8fe5ccb19ba61c4c0873f5e657e";
        assertEquals(expected, DigestUtils.md2Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_BJmI0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "e4d909c290d0fb1ca068ffaddf22cbd0";
        String result = DigestUtils.sha384Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_FesU0() {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        String expected = "a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4";
        String actual = DigestUtils.sha512Hex(messageDigest.digest());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_HSiy0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-512");
            byte[] data = "test".getBytes();
            byte[] result = DigestUtils.sha512_224(data);
            byte[] expected = digest.digest(data);
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_zrgB0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = DigestUtils.sha3_256(data);
            byte[] expected = digest.digest(data);
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            assert false;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_wNkN0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
            byte[] data = "Hello, World!".getBytes();
            byte[] hash = digest.digest(data);
            String expected = "c67a9f2e3e5e4e3e2e1e0e1e2e3e4e5e6";
            String actual = DigestUtils.sha3_256Hex(hash);
            Assertions.assertEquals(expected, actual);
        } catch (NoSuchAlgorithmException e) {
            Assertions.fail("SHA-3-256 algorithm not found");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_JSuU0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        byte[] hashBytes = messageDigest.digest(data);
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        assertEquals(expected, DigestUtils.sha1Hex(hashBytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_Kkbg0() throws NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        String result = digestUtils.md5Hex("Hello, World!");
        assertEquals("5d41402abc4b2a76b9719d911017c592", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_aEag0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-512");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = DigestUtils.sha512_256(data);
            byte[] expected = digest.digest(data);
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_qVtX0() throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] data = "Hello World".getBytes();
        byte[] digest = md.digest(data);
        String expected = "5d41402abc4b2a76b9719d911017c592";
        String result = DigestUtils.md5Hex(digest);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_ktEB0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        String expected = "a2f4";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithDigest_Pqse1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        String expected = "a2f4";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithName_ppGJ2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        String expected = "a2f4";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNull_KZYy1() {
        try {
            DigestUtils digestUtils = new DigestUtils();
            InputStream data = null;
            digestUtils.digest(data);
        } catch (IOException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Null_mHSR1() throws Exception {
        String data = null;
        byte[] expected = new byte[0];
        byte[] result = DigestUtils.sha384(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Empty_eObb2() throws Exception {
        String data = "";
        byte[] expected = new byte[0];
        byte[] result = DigestUtils.sha384(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384LargeDataNull_CgLH4() throws Exception {
        String data = new String(new char[1024]).replace("\0", null);
        byte[] expected = new byte[0];
        byte[] result = DigestUtils.sha384(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384LargeDataEmpty_ewtF5() throws Exception {
        String data = new String(new char[1024]).replace("\0", "");
        byte[] expected = new byte[0];
        byte[] result = DigestUtils.sha384(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_XBKy0() throws NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = digestUtils.sha512Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_ZMVr0() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = "HelloWorld".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotNull(updatedDigest);
        assertArrayEquals(messageDigest.digest(), updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_rFyN0() {
        byte[] data = "HelloWorld".getBytes();
        String expected = "a5b6e1f2c3d4e5f6g7h8i9j";
        assertEquals(expected, DigestUtils.sha384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithName_PsXJ2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "31B9F4A8F75B8B8F";
        assertEquals(expected, digestUtils.digestAsHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_mwrO0() {
        byte[] data = "HelloWorld".getBytes();
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        assertEquals(expected, DigestUtils.sha512_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_UbVY0() {
        String data = "Hello World";
        String expected = "c0a4d6e5a2f5d8a3a5c0a4d6e5a2f5d8a3";
        String result = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_KDlq0() {
        DigestUtils digestUtils = new DigestUtils();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            byte[] result = digestUtils.digest(messageDigest.digest("Hello, World!".getBytes()));
            byte[] expected = messageDigest.digest("Hello, World!".getBytes());
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MIqB0() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA3-224");
        DigestUtils digestUtils = new DigestUtils(digest);
        byte[] data = "Test String".getBytes();
        String expected = "d41d8cd9..."; // replace with the expected hash
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_pMJG0_2() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, World!";
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        byte[] expected = messageDigest.digest(StringUtils.getBytesUtf8(valueToDigest));
        byte[] actual = result.digest();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_qtjs0() {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello";
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            String result = digestUtils.digestAsHex(data);
            assertEquals("5eb63bbbe01eeed093cb22bb8f5acdc3", result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_nJqr1() throws IOException {
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        try {
            DigestUtils.updateDigest(null, data);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals(e.getMessage(), "digest is null");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_MtcK0() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        File file = new File("path_to_your_file");
        byte[] expectedDigest = digestUtils.digest(file);
        assertNotNull(expectedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest2_DYyX1() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        File file = new File("path_to_your_file");
        byte[] expectedDigest = digestUtils.digest(file);
        assertNotNull(expectedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest3_lCWV2() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        File file = new File("path_to_your_file");
        byte[] expectedDigest = digestUtils.digest(file);
        assertNotNull(expectedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_ZMVr0_2() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = "HelloWorld".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertArrayEquals(messageDigest.digest(), updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_UImP0_upyp0() throws Exception {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        byte[] hash = digest.digest("Hello, World!".getBytes("UTF-8"));
        String actual = Hex.encodeHexString(hash);
        String expected = "a3b7f2f6f5f8f7f5f4f3f2f1f0f1f2f3f4f5f6f7f8f9";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigestAndRandomAccessFile_EkGc2_VqOs0() throws IOException {
        MessageDigest messageDigest = null;
        RandomAccessFile data = new RandomAccessFile(new File("test.txt"), "r");
        try {
            DigestUtils.getSha512_256Digest().digest();
            assert false : "Expected NullPointerException";
        } catch (NullPointerException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigestAndRandomAccessFileWithSpaces_tTte6_jfYf0() throws IOException {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] result = DigestUtils.digest(messageDigest, new FileInputStream(data.getFD()));
        assert result != null : "result is null";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigestAndRandomAccessFileWithSpecialChars_hopq7_ReGJ0() throws IOException {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        RandomAccessFile data = new RandomAccessFile(new File("file with special chars.txt"), "r");
        byte[] result = DigestUtils.digest(messageDigest, new FileInputStream(data.getFD()));
        assert result != null : "result is null";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigestAndRandomAccessFileWithLongLines_uitW9_Wyni0() throws IOException {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        RandomAccessFile data = new RandomAccessFile(new File("file with long lines.txt"), "r");
        byte[] result = DigestUtils.digest(messageDigest, new FileInputStream(data.getFD()));
        assert result != null : "result is null";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_aHPJ0_hbmF0() {
        try {
            MessageDigest digest = DigestUtils.getSha512_256Digest();
            byte[] data = "Hello, World!".getBytes("UTF-8");
            byte[] result = digest.digest(data);
            String expected = DigestUtils.sha512Hex(result);
            assertEquals(expected, "a8c4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4");
        } catch (Exception e) {
            fail("Should not throw an exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_nJqr1_khpS0() throws IOException {
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        try {
            DigestUtils.updateDigest(null, data);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("digest is null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithLargeData_xsPw4_EePF0() throws IOException {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        File file = new File("large.txt");
        RandomAccessFile data = new RandomAccessFile(file, "r");
        byte[] buffer = new byte[1024];
        int bytesRead;
        byte[] digestBytes = new byte[digest.getDigestLength()];
        digest.reset();
        while ((bytesRead = data.read(buffer)) != -1) {
            digest.update(buffer, 0, bytesRead);
        }
        digest.digest(digestBytes);
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithClosedData_zQzu6_WeUg0() throws IOException {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        File file = new File("test.txt");
        RandomAccessFile data = new RandomAccessFile(file, "r");
        try {
            DigestUtils.updateDigest(digest, data);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("Stream closed", e.getMessage());
        } finally {
            data.close();
            try {
                DigestUtils.updateDigest(digest, new FileInputStream(file));
            } catch (IOException e) {
                assertEquals("Stream closed", e.getMessage());
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDataReadError_lyRo8_fSxz0() throws IOException {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        File file = new File("test.txt");
        try {
            RandomAccessFile data = new RandomAccessFile(file, "r");
            DigestUtils.updateDigest(digest, data);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("Error reading data", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_gDpT0_KDTF1() throws Exception {
        byte[] expected = new byte[]{1, 2, 3};
        MessageDigest md = DigestUtils.getSha512_256Digest();
        byte[] result = md.digest(expected);
        assertArrayEquals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest3_lCWV2_MKSN0() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        File file = new File("path_to_your_file"); // replace with your actual file path
        MessageDigest digest = digestUtils.getSha512_256Digest();
        byte[] fileBytes = Files.readAllBytes(file.toPath());
        byte[] expectedDigest = digest.digest(fileBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_FqFZ0_INWa0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
        messageDigest.update("test".getBytes());
        byte[] hashBytes = messageDigest.digest();
        String expected = Hex.encodeHexString(hashBytes);
        String actual = DigestUtils.getSha512_256Digest().digest("test".getBytes()).toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_qbvZ0_uqTy0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = DigestUtils.shaHex(data);
        assert Arrays.equals(digest.digest(data), digest.digest(data)) : "Invalid hash";
        assert result.equals(expected) : "Invalid SHA-1 hash";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNullByteBuffer_WXRk2_CVwk0() {
        try {
            DigestUtils.getSha512_256Digest();
            assert false;
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_etOo0_VRwX0() {
        try {
            MessageDigest digest = DigestUtils.getSha512_256Digest();
            String data = "Hello, World!";
            String result = DigestUtils.sha256Hex(data);
            byte[] expectedBytes = digest.digest(data.getBytes());
            String expected = Hex.encodeHexString(expectedBytes);
            assertEquals(expected, result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_AzID0_oWRs0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = messageDigest.digest(data);
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_DHCL0_TJky0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        byte[] data = "hello".getBytes();
        String result = DigestUtils.getSha512_256Digest().digest(data).toString();
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_gEIr0_Ccez0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = "Hello World".getBytes();
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = DigestUtils.sha256Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_aPmW0_COdM0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        String result = digestUtils.digestAsHex("path_to_your_file");
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_BeSj0_McYx0() throws IOException {
        String expected = "a5bc9f6e4d8f2d6a5b9f6e4d8f2";
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        byte[] bytes = "HelloWorld".getBytes();
        byte[] hashBytes = digest.digest(bytes);
        String actual = Hex.encodeHexString(hashBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_bpbC0_UvCE0() throws IOException {
        byte[] expected = new byte[0]; // Initialize expected array
        byte[] actual = DigestUtils.getSha512_256Digest().digest();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_iLeu0_cTCa0() {
        try {
            String data = "Hello, World!";
            String result = DigestUtils.sha3_224Hex(data);
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-224");
            byte[] bytes = messageDigest.digest(data.getBytes());
            String expected = Hex.encodeHexString(bytes);
            assert result.equals(expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_jsAk0_URtU0() {
        String data = "Hello";
        String expected = "aaf4c61ddcc5e8a2ecf9dcbbaut1";
        try {
            String result = DigestUtils.md2Hex(data);
            assertEquals(expected, result);
        } catch (Exception e) {
            fail("Unexpected exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_qEBT1_mAvi0() {
        try {
            MessageDigest expectedDigest = MessageDigest.getInstance("SHA-512/256");
            MessageDigest actualDigest = DigestUtils.getSha512Digest();
            assertEquals(expectedDigest.getAlgorithm(), actualDigest.getAlgorithm());
        } catch (NoSuchAlgorithmException e) {
            fail("Failed to get SHA-512 digest");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_MnhO0_kBHA0() {
        DigestUtils digestUtils = new DigestUtils();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-512/256");
            byte[] data = "Hello, World!".getBytes();
            String expected = "31B9F4A8F75B8B8F";
            assertEquals(expected, digestUtils.digestAsHex(messageDigest.digest(data)));
        } catch (NoSuchAlgorithmException e) {
            fail("Expected SHA-512/256 algorithm but got " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithDigest_RkKE1_zKId0() {
        try {
            DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
            byte[] data = "Hello, World!".getBytes();
            String expected = "31B9F4A8F75B8B8F";
            assertEquals(expected, digestUtils.digestAsHex(data));
        } catch (NoSuchAlgorithmException e) {
            fail("Unexpected exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_Lzvk0_qASC0() {
        try {
            MessageDigest actual = DigestUtils.getMd5Digest();
            MessageDigest expected = MessageDigest.getInstance("MD5");
            assertEquals(expected, actual);
        } catch (NoSuchAlgorithmException e) {
            fail("Unexpected exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigestAndRandomAccessFileWithSpecialChars_hopq7_ReGJ0_fid2() throws IOException {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        RandomAccessFile data = new RandomAccessFile("C:\\path\\to\\file with special chars.txt", "r");
        byte[] result = DigestUtils.digest(messageDigest, new FileInputStream(data.getFD()));
        assert result.length > 0 : "result is empty";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNull_ryks1_BLoi0_fid2() {
        try {
            DigestUtils.getSha512_256Digest();
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }
}