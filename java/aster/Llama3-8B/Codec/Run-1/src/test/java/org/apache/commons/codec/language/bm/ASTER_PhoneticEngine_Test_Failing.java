/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PhoneticEngine_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType3_UJge2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, false);
        assertEquals(NameType.SEPHARDIC, engine.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XWWD0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true);
        String result = engine.encode("Hello");
        assertEquals("Expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Sephardic_Rules_hbfY0_VkDJ0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 10);
        String result = engine.encode("d'Avraham", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
        Assertions.assertEquals("(Avraham)-", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Ashkenazi_Rules_drWu1_PybR0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 10);
        String result = engine.encode("Avraham", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
        Assertions.assertEquals("Avraham", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Generic_Rules_xHyi2_rRIt0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, true, 10);
        String result = engine.encode("Avraham", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
        Assertions.assertEquals("Avraham", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Sephardic_NoRules_GyOQ3_bGsU0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
        String result = engine.encode("d'Avraham", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
        Assertions.assertEquals("d'Avraham", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Generic_NoRules_nPOr5_dmmG0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
        String result = engine.encode("Avraham", Languages.LanguageSet.from(new HashSet<>(Arrays.asList("hebrew"))));
        Assertions.assertEquals("Avraham", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Sephardic_Concatenate_zBei6_hsqD0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 10);
        String result = engine.encode("Avraham ben Yitzchak", LanguageSet.from(new HashSet<>(Arrays.asList("hebrew"))));
        Assertions.assertEquals("(Avraham ben Yitzchak)-", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Ashkenazi_Concatenate_Pjue7_fcyS0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 10);
        String result = engine.encode("Avraham ben Yitzchak", Languages.LanguageSet.from(new HashSet<>(Arrays.asList("hebrew"))));
        Assertions.assertEquals("Avraham ben Yitzchak", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Generic_Concatenate_NdBh8_evpM0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, true, 10);
        String result = engine.encode("Avraham ben Yitzchak", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
        Assertions.assertEquals("Avraham ben Yitzchak", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Sephardic_Empty_cdRq9_TsQO0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 10);
        String result = engine.encode("", LanguageSet.from(new HashSet<>(Arrays.asList("hebrew"))));
        Assertions.assertEquals("", result);
    }
}