/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEncodedInput_YSnY3() throws DecoderException {
        byte[] bytes = new byte[]{(byte) '%', (byte) 'u', (byte) '0', (byte) '1', (byte) '2'};
        byte[] result = URLCodec.decodeUrl(bytes);
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        buffer.write((char) 0x102);
        assert Arrays.equals(result, buffer.toByteArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlEmptyBytes_FAsQ2() {
        byte[] bytes = new byte[0];
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlSingleByte_BBNN3() {
        byte[] bytes = new byte[1];
        bytes[0] = 'a';
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result != null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        buffer.write('a');
        byte[] expected = buffer.toByteArray();
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlMultipleBytes_vTAE4() {
        byte[] bytes = new byte[2];
        bytes[0] = 'a';
        bytes[1] = 'b';
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result != null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        buffer.write('a');
        buffer.write('b');
        byte[] expected = buffer.toByteArray();
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_GlFF0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode("Hello, World!", "UTF-8");
        assert result.equals("%48%65%6c%6c%6f%2c%20%57%6f%72%6c%64%21");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNullUrlSafe_Whib1_RKPm0() {
        byte[] bytes = new byte[1];
        BitSet urlsafe = null;
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result != null;
        BitSet wwwFormUrlSafe = new BitSet();
        wwwFormUrlSafe.set(0, 128);
        assert result.equals(URLCodec.encodeUrl(wwwFormUrlSafe, bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_XJmn1_SrFJ0() {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello World";
        try {
            String result = urlCodec.encode(str, "UTF-8");
            assert result.equals(str);
        } catch (UnsupportedEncodingException e) {
            assert false : "Should not throw UnsupportedEncodingException";
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_ufBX2_vxbY0() {
        URLCodec codec = new URLCodec();
        String str = "Hello+World";
        try {
            String result = codec.encode(str, "UTF-8");
            Assertions.assertEquals(str, result);
        } catch (UnsupportedEncodingException e) {
            Assertions.fail("UnsupportedEncodingException was thrown but not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingDefault_YHiI1() {
        URLCodec codec = new URLCodec();
        String encoding = codec.getEncoding();
        assertEquals("", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetNoArgument_xtYR1() {
        URLCodec urlCodec = new URLCodec();
        assertEquals("", urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeValid_JoSh1_kHpn0_fid1() {
        URLCodec codec = new URLCodec();
        try {
            String result = codec.encode("Hello World", "UTF-8");
            Assertions.assertEquals("Hello%20World", result);
        } catch (UnsupportedEncodingException e) {
            Assertions.fail("Unexpected exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_ufBX2_vxbY0_fid1() {
        URLCodec codec = new URLCodec();
        String str = "Hello World";
        try {
            String result = codec.encode(str, "UTF-8");
            Assertions.assertEquals(str, result);
        } catch (UnsupportedEncodingException e) {
            Assertions.fail("UnsupportedEncodingException was thrown but not expected");
        }
    }
}