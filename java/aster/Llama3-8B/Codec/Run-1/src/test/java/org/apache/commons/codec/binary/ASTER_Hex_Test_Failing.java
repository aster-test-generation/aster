/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexNullData_cYzK3() {
        char[] data = null;
        byte[] out = new byte[6];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            assert false;
        } catch (DecoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_yJlY0() {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        char[] result = Hex.encodeHex(data);
        assert Arrays.equals(result, new char[]{'1', '2', '3', '4', '5'});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_zUaU0() {
        byte[] data = new byte[]{1, 2, 3};
        char[] result = Hex.encodeHex(data, 0, data.length, true);
        String expected = "0102";
        assert Arrays.equals(expected.toCharArray(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexNullData_IchC2() {
        byte[] data = null;
        char[] toDigits = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        char[] expected = new char[0];
        char[] result = Hex.encodeHex(data, toDigits);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexNullToDigits_lqqI3() {
        byte[] data = new byte[]{0x12, 0x34, 0x56, 0x78};
        char[] toDigits = null;
        char[] expected = new char[0];
        char[] result = Hex.encodeHex(data, toDigits);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_Cshp0() {
        byte[] data = new byte[]{1, 2, 3};
        char[] result = Hex.encodeHex(data, true);
        char[] expected = new char[]{'1', '2', '3'};
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitInvalidCharacter_ixpP1() {
        try {
            Hex.toDigit('f', 0);
            Assertions.fail("Expected DecoderException");
        } catch (DecoderException e) {
            Assertions.assertEquals("Illegal hexadecimal character f at index 0", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_Uhnu0() {
        Hex hex = new Hex();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3});
        char[] result = hex.encodeHex(data, true);
        assert Arrays.equals(result, new char[]{'1', '2', '3'});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_bJZO0() {
        Hex hex = new Hex();
        assertEquals("org.apache.commons.codec.binary.Hex@5ccdc6c3[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharset_HGxS1() {
        Hex hex = new Hex("UTF-8");
        assertEquals("org.apache.commons.codec.binary.Hex@6920d79[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharsetObject_eFZf2() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("org.apache.commons.codec.binary.Hex@33c264f9[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_rsUY0() {
        Hex hex = new Hex();
        Charset charset = hex.getCharset();
        assert charset == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_BcWt0() {
        Hex hex = new Hex();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        char[] result = hex.encodeHex(data);
        assert result.length == 10;
        assert result[0] == '1';
        assert result[1] == '2';
        assert result[2] == '3';
        assert result[3] == '4';
        assert result[4] == '5';
        assert result[5] == '0';
        assert result[6] == '0';
        assert result[7] == '\0';
        assert result[8] == '\0';
        assert result[9] == '\0';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_dDBT0_qRlD0() {
        char[] data = new char[]{'1', '2', '3', '4'};
        byte[] expected = new byte[]{1, 2, 3, 4};
        try {
            byte[] result = Hex.decodeHex(data);
            assertArrayEquals(expected, result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_BhfN0_MbvT0() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        Object object = "Hello";
        try {
            String result = (String) hex.decode(object);
            assertEquals("Hello", result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown but not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_cSiV1_kbSI0() {
        Hex hex = new Hex();
        Object object = new byte[]{(byte) 0x48, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x6f};
        try {
            String result = (String) hex.decode(object);
            assertEquals("Hello", result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteBuffer_ZCwJ2_AILN0() {
        Hex hex = new Hex();
        Object object = ByteBuffer.wrap(new byte[]{(byte) 0x48, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x6f});
        try {
            String result = (String) hex.decode(object);
            assertEquals("Hello", result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharArray_zMiO3_zfim0() {
        Hex hex = new Hex();
        char[] object = new char[]{'H', 'e', 'l', 'l', 'o'};
        try {
            String result = (String) hex.decode(object);
            assertEquals("Hello", result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_VAJW0_mhUq0() {
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6};
        try {
            byte[] actual = Hex.decodeHex("123456");
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_AdhE0_TpaF0() {
        Hex hex = new Hex();
        byte[] array = new byte[]{(byte) 0x48, (byte) 0x65, (byte) 0x78};
        try {
            byte[] result = hex.decode(array);
            assert result.length == 3;
            assert result[0] == (byte) 72;
            assert result[1] == (byte) 101;
            assert result[2] == (byte) 120;
        } catch (org.apache.commons.codec.DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithNoArgument_WEDc2_fid1() {
        Hex hex = new Hex();
        assertEquals("US-ASCII", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_bJZO0_fid1() {
        Hex hex = new Hex();
        assertEquals("java.lang.Object@toString()[charsetName=null]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharset_HGxS1_fid1() {
        Hex hex = new Hex("UTF-8");
        assertEquals("java.lang.Object@toString()[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharsetObject_eFZf2_fid1() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("java.lang.Object@toString()[charsetName=java.nio.charset.Charset@...]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_lBkv0_fid1() {
        Hex hex = new Hex();
        byte[] data = new byte[]{1, 2, 3};
        char[] out = new char[6];
        int outOffset = 0;
        hex.encodeHex(data, 0, data.length, true, out, outOffset);
        String expected = "010203";
        String actual = new String(out, 0, outOffset);
        assertEquals(expected, actual);
    }
}