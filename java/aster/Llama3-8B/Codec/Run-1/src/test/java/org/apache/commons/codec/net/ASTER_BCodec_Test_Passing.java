/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_ajfQ0() {
        BCodec codec = new BCodec();
        assertEquals("B", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharset_UkBy1() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        assertEquals("B", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetAndPolicy_jpgo2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertEquals("B", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetName_vqVD3() {
        BCodec codec = new BCodec("UTF-8");
        assertEquals("B", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStrictDecodingTrue_CRKQ0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        boolean result = codec.isStrictDecoding();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStrictDecodingFalse_MpOo1() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        boolean result = codec.isStrictDecoding();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeOtherType_Ztts2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        try {
            codec.decode(new Object());
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be decoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullBytes_KFck0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        byte[] result = codec.doEncoding(null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_FDII2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        try {
            codec.encode(new Object());
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be encoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_SoqY0() {
        BCodec codec = new BCodec("UTF-8");
        assertEquals("UTF-8", codec.getCharset().name());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetObject_nQDC1() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        assertEquals("UTF-8", codec.getCharset().name());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetObjectAndDecodingPolicy_gRCY2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertEquals("UTF-8", codec.getCharset().name());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithOnlyCharsetObject_QCJa3() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertEquals("UTF-8", codec.getCharset().name());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_byrc0() {
        BCodec codec = new BCodec();
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharset_zTgl1() {
        BCodec codec = new BCodec(Charset.forName("UTF-16"));
        assertEquals("UTF-16", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharsetAndPolicy_vJCs2() {
        BCodec codec = new BCodec(Charset.forName("UTF-32"), CodecPolicy.STRICT);
        assertEquals("UTF-32", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextNull_Lzss0() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText(null);
            assertNull(result);
        } catch (DecoderException | UnsupportedEncodingException e) {
            fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextInvalidFormat_pMVP1() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("invalid format");
            fail();
        } catch (DecoderException e) {
        } catch (UnsupportedEncodingException e) {
            fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextInvalidCharset_VKpE2() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("invalid charset");
            fail();
        } catch (DecoderException e) {
        } catch (UnsupportedEncodingException e) {
            fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextInvalidEncoding_GHCe3() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("invalid encoding");
            fail();
        } catch (DecoderException e) {
        } catch (UnsupportedEncodingException e) {
            fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidFormat_tGWM4() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("=?UTF-8?q?Hello_World?=");
            assertEquals("Hello World", result);
        } catch (DecoderException | UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidCharset_ETaU5() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("=?UTF-16?q?Hello_World?=");
            assertEquals("Hello World", result);
        } catch (DecoderException | UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidEncoding_aSLI6() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("=?ISO-8859-1?q?Hello_World?=");
            assertEquals("Hello World", result);
        } catch (DecoderException | UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextUnsupportedEncodingException_wrXW7() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        try {
            String result = codec.decodeText("=?UnsupportedEncodingException?q?Hello_World?=");
            fail();
        } catch (DecoderException e) {
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_LJWJ0() throws EncoderException {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String text = "Hello World";
        String result = codec.encodeText(text, Charset.forName("UTF-8"));
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithBytes_smRo1_LgpB0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        byte[] bytes = "Hello, World!".getBytes(Charset.forName("UTF-8"));
        byte[] result = codec.doEncoding(bytes);
        assert new String(result, Charset.forName("UTF-8")).equals("SGVsbG8sIFdvcmxkIQ==");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_miOv0_Nxyl0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String value = "Hello World";
        try {
            String result = codec.encodeText(value, Charset.forName("UTF-8"));
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_JQTb1_yFoi0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        try {
            String result = codec.encodeText(null, Charset.forName("UTF-8"));
            assertNull(result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown unexpectedly");
        }
    }
}