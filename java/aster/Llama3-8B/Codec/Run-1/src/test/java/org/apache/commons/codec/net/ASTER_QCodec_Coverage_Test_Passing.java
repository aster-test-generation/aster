/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Coverage_Test_Passing {
    private static final byte SPACE = (byte) ' ';
    private static final byte UNDERSCORE = (byte) '_';
    private boolean encodeBlanks;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithDecoderException_yrlm1() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "test";
        DecoderException decoderException = new DecoderException("Decoder exception");
        try {
            throw new DecoderException("Decoder exception", decoderException);
        } catch (DecoderException e) {
            assertEquals("Decoder exception", e.getMessage());
            assertEquals(decoderException, e.getCause());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_TyNA0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object obj = null;
        Object result = qCodec.decode(obj);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonString_xULz3() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object obj = new Integer(1);
        try {
            qCodec.decode(obj);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_NazQ0() throws EncoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonNull_YJJX1() throws EncoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.encode("Hello");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNullInput_YyYy0() {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingEmptyInput_SXQF1() {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(new byte[0]);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEncodeBlanks_YLqO2() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] input = "Hello World".getBytes();
        byte[] result = qCodec.doEncoding(input);
        byte[] expected = "Hello_World".getBytes();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithoutEncodeBlanks_TVpR3() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        byte[] input = "Hello World".getBytes();
        byte[] result = qCodec.doEncoding(input);
        byte[] expected = "Hello World".getBytes();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setEncodeBlanks(boolean encodeBlanks) {
        this.encodeBlanks = encodeBlanks;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithoutUnderscores_uhFz1() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{(byte) 0x68, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x77, (byte) 0x6f, (byte) 0x72, (byte) 0x6c, (byte) 0x64};
        byte[] expected = new byte[]{(byte) 0x68, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x77, (byte) 0x6f, (byte) 0x72, (byte) 0x6c, (byte) 0x64};
        byte[] result = qCodec.doDecoding(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingNullInput_vMMo2() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] result = qCodec.doDecoding(bytes);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedCharset_dOPj0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "UnsupportedCharset";
        try {
            qCodec.encode(sourceStr, sourceCharset);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("UnsupportedCharset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_AWWB0() {
        QCodec qCodec = new QCodec();
        String defaultCharset = qCodec.getDefaultCharset();
        assertEquals("UTF-8", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharset_dTrt1() {
        QCodec qCodec = new QCodec("UTF-8");
        String defaultCharset = qCodec.getDefaultCharset();
        assertEquals("UTF-8", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharsetObject_kgdZ2() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String defaultCharset = qCodec.getDefaultCharset();
        assertEquals("UTF-8", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextNullText_hvYG1() throws EncoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String text = null;
        String result = qCodec.encodeText(text, StandardCharsets.UTF_8);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextEmptyText_ghxS3() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "";
        String charsetName = "UTF-8";
        String result = qCodec.encodeText(text, charsetName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextValidCharsetName_AXhX6() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello, World!";
        String charsetName = "UTF-16";
        String result = qCodec.encodeText(text, charsetName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SBll0_CDRv0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String expected = "=?UTF-8?Q?Hello, World!?=";
        String actual = qCodec.encodeText(sourceStr, Charset.forName("UTF-8"));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_LRNT0_gmYC0() {
        QCodec qCodec = new QCodec();
        String str = "test";
        try {
            qCodec.decode(str);
            fail("DecoderException was expected");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }
}