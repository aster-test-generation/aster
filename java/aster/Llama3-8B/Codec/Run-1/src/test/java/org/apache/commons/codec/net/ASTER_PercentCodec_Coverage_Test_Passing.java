/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_BThC0() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        Object obj = null;
        Object result = codec.decode(obj);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_gPYM2() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        byte[] byteArray = new byte[0];
        Object obj = byteArray;
        Object result = codec.decode(obj);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonByteArray_BVTn3() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        Object obj = new Integer(1);
        try {
            codec.decode(obj);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullInput_Ffno0() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        Object result = codec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsciiChar_iMUg0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] expected = new byte[]{'a'};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncodingNeeded_JaqQ5() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] expected = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullInput_YuSX6() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        byte[] result = codec.encode(null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullBytes_UTRd0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonSpaceBytes_GQrx1() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "hello".getBytes();
        byte[] result = codec.encode(bytes);
        assert Arrays.equals(result, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytesWithoutPlusForSpace_apNN4() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "hello world".getBytes();
        byte[] result = codec.encode(bytes);
        assert Arrays.equals(result, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsciiChar_VKuU0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{0}, false);
        byte[] bytes = codec.encode(new byte[]{(byte) 'a'});
        assertArrayEquals(new byte[]{(byte) 'a'}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeChar_UFSW2() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0, (byte) 1}, false);
        byte[] bytes = codec.encode(new byte[]{(byte) 0});
        assertArrayEquals(new byte[]{(byte) '%', (byte) '0', (byte) '0'}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsciiCharWithPlusForSpace_waAh4() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{0}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 'a'});
        assertArrayEquals(new byte[]{(byte) 'a'}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeCharWithPlusForSpace_aGne6() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0, (byte) 1}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 0});
        assertArrayEquals(new byte[]{(byte) '%', (byte) '0', (byte) '0'}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiChar_hIIO1_BBFD0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        byte[] bytes = new byte[]{(byte) 128};
        byte[] expected = new byte[]{(byte) '%', (byte) '8', (byte) '0'};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpaceBytes_oDYk2_gqPC0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{'h', 'e', 'l', 'l', 'o'}, true);
        byte[] bytes = "hello world".getBytes();
        byte[] result = codec.encode(bytes);
        assert result.length > bytes.length;
    }
}