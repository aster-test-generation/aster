/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DoubleMetaphone_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_FrzX0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        Object result = doubleMetaphone.encode("Hello");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_miVL1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        try {
            doubleMetaphone.encode(123);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("DoubleMetaphone encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_HARAC_iAjR0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("HARAC", false);
        assertEquals("HRK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsValueIndex4_Angz0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILLINOIS";
        boolean result = doubleMetaphone.contains(value, 5, 4, "ILLO", "ILLA", "ALLE");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsValueIndex5_KuOE1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILLINOIS";
        boolean result = doubleMetaphone.contains(value, 6, 4, "ILLO", "ILLA", "ALLE");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsValueIndex6_iELt2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILLINOIS";
        boolean result = doubleMetaphone.contains(value, 7, 4, "ILLO", "ILLA", "ALLE");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionCH1_SWXG0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Vanchur";
        String expected = "FNXR";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionCH1Sch_oRjf1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Schatz";
        String expected = "XTS";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionCH1Orchid_HdXS2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Orchid";
        String expected = "ARKT";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionCH1Space_qejB3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hans Space";
        String expected = "HNSS";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionCH1End_NQbY4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hans";
        String expected = "HNS";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMc_dEgh0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("McDonald", false);
        assertEquals("MKTN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneK_LTmL1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Kirk", false);
        assertEquals("KRK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMc_MTZf0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("McClelland", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneK_yBTU1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("K", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMc_Rxdq0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("McDonald", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneK_GnpB1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Khan", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaesar_dQgN0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SSR", doubleMetaphone.doubleMetaphone("Caesar", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMcClelland_Kkpe1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("MKLL", doubleMetaphone.doubleMetaphone("McClelland", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleCC_mAez2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("PKPK", doubleMetaphone.doubleMetaphone("Backpack", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleCCNotMc_YwwJ3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("KKK", doubleMetaphone.doubleMetaphone("Kuckuck", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCIA_hIfC4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("FKX", doubleMetaphone.doubleMetaphone("Focaccia", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCZ_MUav5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SRN", doubleMetaphone.doubleMetaphone("Czerny", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCXKCGCQ_Iwgv6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("XK", doubleMetaphone.doubleMetaphone("Check", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCI_dMlo7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Ciao", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCIO_KBri8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Cio", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCAndSpace_aacb9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("MKFR", doubleMetaphone.doubleMetaphone("Mac Caffrey", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCia_lJfi3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Cia", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneFocus_OGKU5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("FKS", doubleMetaphone.doubleMetaphone("Focus", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMcGregor_vYjP6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("MKRK", doubleMetaphone.doubleMetaphone("McGregor", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneDoubleCC_nAfX7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("KKK", doubleMetaphone.doubleMetaphone("Kockock", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCCNotMac_RVFG8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("KK", doubleMetaphone.doubleMetaphone("Kock", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_OgWx0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("BACHER", false);
        assertEquals("PKR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_FZLa1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("focaccia", false);
        assertEquals("FKX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone5_BFsi4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CIA", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone6_oKjy5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CHIA", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone7_odCH6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CIO", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone8_xgmk7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CIA", true);
        assertEquals("X", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone9_nrKN8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CH", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone10_SwBh9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CZ", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCaesar_nrnr0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CAESAR", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneFocus_xwIC2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("focaccia", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCio_ldnw3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Cio", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCia_LWLT4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Cia", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCzerny_corv5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Czerny", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneDoubleCC_umcx6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Mcclelland", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMacCaffrey_CRPr7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Mac Caffrey", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMacGregor_mMPQ8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Mac Gregor", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneNoCC_baDh9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("McGill", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleCC_qrVn1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Macclelland", false);
        assertEquals("MKLL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleCCNotMcClelland_BgEI2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("hacc", false);
        assertEquals("HK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCQ_MaEm4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CQ", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCI_ccBJ5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CI", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCK_slMT6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CK", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCG_bbXF7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CG", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCQAndCE_EFdp9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CQCE", false);
        assertEquals("KS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithCAndSpace_ABjm10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("C MacGregor", false);
        assertEquals("KMKR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithConditionL0True_FOEw0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Llama";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithConditionL0False_sOKq1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Llano";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneL0_TqFc0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Lillo", false);
        assertEquals("LL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneLL1_YxvA1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("LLalla", false);
        assertEquals("LL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMcCauley_fdYO1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("McCauley", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneDoubleCC_WDPG5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("MacClelland", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCWithCKCGCQ_hrFe7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("check", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCWithCI_UttF8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Ciao", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_McClelland_ttQj1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("McClelland", false);
        assertEquals("MKLL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_doubleCC_PrlE3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("bellocchio", false);
        assertEquals("PLX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_accident_QCBl4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("accident", false);
        assertEquals("AKST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_bacci_qpOr5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("bacci", false);
        assertEquals("PX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_MacCaffrey_dpnA6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("MacCaffrey", false);
        assertEquals("MKFR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_MacGregor_sJIk7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("MacGregor", false);
        assertEquals("MKRK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_noCCAlternate_mpbR9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("hello", true);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCaesar_aNux0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SSR", doubleMetaphone.doubleMetaphone("CAESAR", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithDoubleCC_FNGP2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("MKLN", doubleMetaphone.doubleMetaphone("McKelland", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCIA_JsHh3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("FKX", doubleMetaphone.doubleMetaphone("focaccia", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCH_iuEJ5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("XRX", doubleMetaphone.doubleMetaphone("church", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCXK_OXKJk6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("XK", doubleMetaphone.doubleMetaphone("check", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCQ_qsmp7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("CQ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCG_jBun8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("CG", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCIO_bFTT9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("CIO", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCIE_HCtS10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("CIE", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCIA_BtJa11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("CIA", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCQG_OgCV12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("KK", doubleMetaphone.doubleMetaphone("CQG", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCQGAlternate_HDYb13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("KK", doubleMetaphone.doubleMetaphone("CQG", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_lgjc1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("bacchus", false);
        assertEquals("PKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone4_AYnP3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("accede", false);
        assertEquals("AKST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone5_TYfZ4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("succeed", false);
        assertEquals("SKST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone6_dwjA5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Czerny", false);
        assertEquals("SRN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithH_Mllw0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Phoebe", false);
        assertEquals("FP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithPH_oSSW1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Philip", false);
        assertEquals("FLP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithBP_vKUs2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Bobbie", false);
        assertEquals("PP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneIE_uggY0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("FE", true);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMEAndMA_EYth1_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ME", true);
        result = doubleMetaphone.doubleMetaphone("MA", true);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneR_viqb2_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("R", true);
        result = doubleMetaphone.doubleMetaphone("Ra", true);
        result = doubleMetaphone.doubleMetaphone("Rae", true);
        assertEquals("R", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWR_iiEb0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Write", true);
        assertEquals("RT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWRInMiddle_Jdmc1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Writers", true);
        assertEquals("RTRS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneSCH_EZix2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Schenck", true);
        assertEquals("SKNK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWRAndSCH_RmVU3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("SchenckWrite", true);
        assertEquals("SKNK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithTH_qWbI0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("thomas", false);
        assertEquals("TMS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithVFN_fkia1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("van", false);
        assertEquals("FN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSCH_dERM3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("SCHmidt", false);
        assertEquals("XMT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithTAndD_hoDj4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Tend", false);
        assertEquals("TNT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZo_ukSA0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Zoology", false);
        assertEquals("SLJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSi_JrSV1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Si", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSa_iprS2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Sa", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanic_rPOf3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Zo", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithoutSlavoGermanic_tXcB4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("So", true);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG1_vcwS0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Hannah", false);
        assertEquals("HN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG2_hrAt1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Nancy", false);
        assertEquals("NNS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG3_aQEt2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("LLily", false);
        assertEquals("LL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG4_BdDd3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Knee", false);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG5_xZUF4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Yancy", false);
        assertEquals("ANS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG6_sAYU5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Gery", false);
        assertEquals("KR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG7_GMtr6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Danger", false);
        assertEquals("TNJR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG8_dHFX7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Ranger", false);
        assertEquals("RNJR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG9_WaUz8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Manger", false);
        assertEquals("MNJR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG10_yoUx9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Aggie", false);
        assertEquals("AJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG11_MKaq10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Vanity", false);
        assertEquals("FNT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG12_fsSX11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Schie", false);
        assertEquals("X", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG13_btpU12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Eiger", false);
        assertEquals("AJR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG14_BtHb13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Geyer", false);
        assertEquals("KR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG16_UCpG15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Knee", true);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG17_OaZR16() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Yancy", true);
        assertEquals("ANS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG1_GPvz0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hanger";
        boolean slavoGermanic = false;
        assertEquals("HNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG2_rALJ1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Nanger";
        boolean slavoGermanic = false;
        assertEquals("NNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG3_ZkPJ2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Linger";
        boolean slavoGermanic = false;
        assertEquals("LNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG4_XppZ3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Ginger";
        boolean slavoGermanic = false;
        assertEquals("KNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG5_JMPi4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = true;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG6_KtSN5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = false;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG7_XMjM6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knead";
        boolean slavoGermanic = false;
        assertEquals("NT", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG8_FnGq7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knee";
        boolean slavoGermanic = false;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG9_XADQ8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knead";
        boolean slavoGermanic = true;
        assertEquals("NT", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG10_aPLJ9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knee";
        boolean slavoGermanic = true;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG11_zhOW10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = false;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG12_ifze11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = true;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG13_VZTz12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knead";
        boolean slavoGermanic = false;
        assertEquals("NT", doubleMetaphone.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG14_xlfn13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knee";
        boolean slavoGermanic = false;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG15_PDUa14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knead";
        boolean slavoGermanic = true;
        assertEquals("NT", doubleMetaphone.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Jose_ycHK0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("HS", doubleMetaphone.doubleMetaphone("Jose", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SanJacinto_waJr1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SNHS", doubleMetaphone.doubleMetaphone("San Jacinto", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SanWithoutSpace_kBbs3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SN", doubleMetaphone.doubleMetaphone("San", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JWithoutVowelBefore_eras4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("J", doubleMetaphone.doubleMetaphone("J", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JWithVowelBeforeAndAAfter_fQLk5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("J", doubleMetaphone.doubleMetaphone("Ja", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JWithVowelBeforeAndOAfter_WuPs6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("J", doubleMetaphone.doubleMetaphone("Jo", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JWithFollowingJ_tNBw9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("J", doubleMetaphone.doubleMetaphone("JJ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JKWithFollowingNonVowelConsonant_gwLS10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("JK", doubleMetaphone.doubleMetaphone("JKk", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_S_xtks0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("S", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_A_QAaP3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.doubleMetaphone("aux", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_A_index_2_srNO4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.doubleMetaphone("eau", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_A_index_3_AYjh5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.doubleMetaphone("ou", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AKS_index_4_oDOa6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("AKS", doubleMetaphone.doubleMetaphone("auxx", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_A_index_5_tWgg7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.doubleMetaphone("eauu", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH1_HCNb0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("HUGH", false);
        assertEquals("H", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH2_KqCl1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("laugh", false);
        assertEquals("LF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH3_xEpn2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("cough", false);
        assertEquals("KF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH4_ylHi3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("gough", false);
        assertEquals("KF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH5_pnhk4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("rough", false);
        assertEquals("RF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH6_SWqP5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("tough", false);
        assertEquals("TF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG1_sWex6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ger", false);
        assertEquals("KR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG2_ZuGi7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("gy", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG3_ebrk8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("german", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG4_nqTw9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germany", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG5_fsZh10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanic", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG6_FVFO11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanic", true);
        assertEquals("JRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSWithISL_JYkE0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("island", false);
        assertEquals("ALNT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSWithYAL_INto1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ysle", false);
        assertEquals("AL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSWithSUGAR_LwxS2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("sugar", false);
        assertEquals("XKR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSWithSH_DCCN3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("sheim", false);
        assertEquals("SM", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSWithSC_LPvK5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("schermerhorn", false);
        assertEquals("XRMR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSWithHAndOOER_UusSKL6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("school", false);
        assertEquals("SKL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSWithHAndEN_NfQu8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("schenker", false);
        assertEquals("XNKR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSWithHAndNotVowel_jaRQ9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("hsiao", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCZAndWITZ_xllN0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CZIT", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneCZ_XkId1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CZAR", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWITZ_FmfN2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("WITZEL", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneOtherCases_XMMY3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Hello", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneNullInput_ZwPR4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneEmptyInput_fkIz5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneSingleCharacterInput_LxeP6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMultiCharacterInput_ZEKi7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("HelloWorld", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSN_ANTT7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SN", doubleMetaphone.doubleMetaphone("SN", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSHwithZ_RFaH8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("XS", doubleMetaphone.doubleMetaphone("SHZ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSIOwithZ_vrTJ9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SS", doubleMetaphone.doubleMetaphone("SIZ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSIANwithZ_DhqP11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SNS", doubleMetaphone.doubleMetaphone("SIANZ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAlternateSH_qKiv12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("X", doubleMetaphone.doubleMetaphone("SH", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAlternateSIO_NagW13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("X", doubleMetaphone.doubleMetaphone("SIO", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAlternateSIA_zLGf14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("X", doubleMetaphone.doubleMetaphone("SIA", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAlternateSIAN_YZZn15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("XN", doubleMetaphone.doubleMetaphone("SIAN", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSIO_ecay5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("SIO", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSIA_qNDz6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("SIA", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ1_wuGt9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z1", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ2_jGIz10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z2", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ3_MUPw11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z3", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ4_UUPT12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z4", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ5_uxSQ13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z5", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ6_vPVv14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z6", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ7_Advo15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z7", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ8_nuTG16() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z8", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ9_cglm17() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z9", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ10_HKWB18() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z10", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZ11_GGap19() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Z11", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionC0_XvLW0_HqJn0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHIA";
        doubleMetaphone.setMaxCodeLen(0);
        boolean result = doubleMetaphone.getMaxCodeLen() == 0;
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionC0_Negative_QSJF1_FYst0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(1);
        String value = "ABC";
        boolean result = doubleMetaphone.getMaxCodeLen() > 0;
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMEAndMA_EYth1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ME", true);
        assertEquals("M", result);
        result = doubleMetaphone.doubleMetaphone("MA", true);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneR_viqb2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("R", true);
        assertEquals("R", result);
        result = doubleMetaphone.doubleMetaphone("Ra", true);
        assertEquals("R", result);
        result = doubleMetaphone.doubleMetaphone("Rae", true);
        assertEquals("R", result);
    }
}