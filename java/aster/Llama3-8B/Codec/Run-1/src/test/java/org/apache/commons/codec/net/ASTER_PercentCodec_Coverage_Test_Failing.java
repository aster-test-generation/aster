/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNotNull_odKk1() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        Object obj = new Object();
        Object result = codec.decode(obj);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonByteArrayInput_kSqm1() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        Object result = codec.encode("test");
        fail("Expected EncoderException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArrayInput_yZrC2() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        byte[] input = new byte[]{1, 2, 3};
        Object result = codec.encode(input);
        fail("Expected EncoderException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArrayInputWithEncode_fhzJ3() throws EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b'}, false);
        byte[] input = new byte[]{1, 2, 3};
        Object result = codec.encode(input);
        fail("Expected EncoderException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytesWithAlwaysEncodeChars_CYFf5() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec("abc".getBytes(), true);
        byte[] bytes = "hello".getBytes();
        byte[] result = codec.encode(bytes);
        assert result.length > bytes.length;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytesWithPlusForSpaceAndAlwaysEncodeChars_emLV7() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec("abc".getBytes(), true);
        byte[] bytes = "hello world".getBytes();
        byte[] result = codec.encode(bytes);
        assert result.length > bytes.length;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiChar_rQXI1() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{0}, false);
        byte[] bytes = codec.encode(new byte[]{(byte) 128});
        assertArrayEquals(new byte[]{(byte) '%', (byte) 'x', (byte) 2, (byte) 0}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeCharWithSpace_cgrJ3() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0, (byte) 1}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 32});
        assertArrayEquals(new byte[]{(byte) '%', (byte) '2', (byte) '0'}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiCharWithPlusForSpace_EDKy5() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{0}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 128});
        assertArrayEquals(new byte[]{(byte) '%', (byte) 'x', (byte) 2, (byte) 0}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiCharWithAlwaysEncodeChars_tYSk11() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0, (byte) 1}, false);
        byte[] bytes = codec.encode(new byte[]{(byte) 128});
        assertArrayEquals(new byte[]{(byte) '%', (byte) 'x', (byte) 2, (byte) 0}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeChars_LkJg0_oBUR0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0x20, (byte) 0x7F}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 0x20, (byte) 0x7F});
        byte[] expected = new byte[]{(byte) '%', (byte) '2', (byte) '0'};
        assertArrayEquals(expected, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeChar_TDMy2_rcfF0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0, (byte) 1, (byte) 2}, false);
        byte[] bytes = new byte[]{(byte) 0};
        byte[] expected = new byte[]{(byte) '%', (byte) '0'};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeCharNotInArray_elZQ3_PjhP0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0, (byte) 1}, false);
        byte[] bytes = new byte[]{(byte) 2};
        byte[] expected = new byte[]{(byte) '%', (byte) '2'};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpace_EROz4_JLqN0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) ' '};
        byte[] expected = new byte[]{(byte) '%', (byte) '2', (byte) '0'};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpace_EROz4_JLqN0_fid1() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) ' '};
        byte[] expected = new byte[]{(byte) '%', (byte) '2', (byte) '0'};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, Arrays.copyOf(result, expected.length));
    }
}