/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BinaryCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_oapS0() {
        byte[] raw = new byte[]{(byte) 72, (byte) 101, (byte) 108, (byte) 108, (byte) 111};
        String expected = "0110111101101100011011000110010101001000";
        String result = BinaryCodec.toAsciiString(raw);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiEmptyArray_ICFm0() {
        byte[] result = BinaryCodec.fromAscii(new char[0]);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsEmptyArray_oVKa0() {
        char[] result = BinaryCodec.toAsciiChars(new byte[0]);
        assertArrayEquals(new char[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArrayNull_Qals1() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] result = binaryCodec.toByteArray(null);
        byte[] expected = new byte[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiEmptyArray_LUZv0() {
        byte[] ascii = new byte[0];
        byte[] result = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiAsciiWithNonBinaryValues_GtBT4() {
        byte[] ascii = new byte[]{(byte) 'a'};
        byte[] result = BinaryCodec.fromAscii(ascii);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyNullArray_AhVb0() {
        boolean result = BinaryCodec.isEmpty(null);
        assertSame(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyEmptyArray_qbXC1() {
        boolean result = BinaryCodec.isEmpty(new byte[0]);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyNonEmptyArray_VudV2() {
        boolean result = BinaryCodec.isEmpty(new byte[1]);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_fJTs1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] ascii = new byte[]{1, 2, 3};
        Object result = codec.decode(ascii);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_lZqs4() {
        BinaryCodec codec = new BinaryCodec();
        Integer ascii = 123;
        try {
            codec.decode(ascii);
            assertEquals(false, true);
        } catch (DecoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesEmptyArray_YCHK0() {
        byte[] raw = new byte[0];
        byte[] expected = new byte[0];
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesNullArray_Tsxy4() {
        byte[] raw = null;
        byte[] expected = new byte[0];
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiNullArray_KVsC1_JbmU0() {
        byte[] result = BinaryCodec.toAsciiBytes(null);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_FxtG0_Klci0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = codec.toAsciiBytes(null);
        assertArrayEquals(new byte[0], result);
    }
}