/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_GUeQ0() {
        URLCodec codec = new URLCodec("UTF-8");
        String encoding = codec.getEncoding();
        assertEquals("UTF-8", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_TACv0() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlNullInput_tlmC0() throws DecoderException {
        byte[] bytes = null;
        byte[] result = URLCodec.decodeUrl(bytes);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEmptyInput_xVFy1() throws DecoderException {
        byte[] bytes = new byte[0];
        byte[] result = URLCodec.decodeUrl(bytes);
        assert result.length == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlSingleByteInput_gsFu2() throws DecoderException {
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] result = URLCodec.decodeUrl(bytes);
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        buffer.write('a');
        assert Arrays.equals(result, buffer.toByteArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlPlusInput_ZyWn4() throws DecoderException {
        byte[] bytes = new byte[]{(byte) '+'};
        byte[] result = URLCodec.decodeUrl(bytes);
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        buffer.write(' ');
        assert Arrays.equals(result, buffer.toByteArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_ishV3() {
        URLCodec codec = new URLCodec();
        Object obj = new Object();
        try {
            codec.decode(obj);
            Assertions.fail("DecoderException expected");
        } catch (DecoderException e) {
            Assertions.assertEquals("Objects of type " + obj.getClass().getName() + " cannot be URL decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_EWBJ1() {
        URLCodec urlCodec = new URLCodec();
        byte[] byteArray = new byte[]{1, 2, 3};
        Object result = urlCodec.encode(byteArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeObject_RDZj3() {
        URLCodec urlCodec = new URLCodec();
        Object obj = new Object();
        try {
            urlCodec.encode(obj);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNullBytes_jZVI0() {
        byte[] bytes = null;
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlUrlSafeByte_vLFk5() {
        byte[] bytes = new byte[1];
        bytes[0] = ' ';
        BitSet urlsafe = new BitSet();
        urlsafe.set(' ');
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result != null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        buffer.write('+');
        byte[] expected = buffer.toByteArray();
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_QXoN1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode(null, "UTF-8");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNonUrlSafeByte_wsrl6_Ciwd0() {
        byte[] bytes = new byte[1];
        bytes[0] = 'x';
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result != null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        buffer.write(URLCodec.ESCAPE_CHAR);
        char hex1 = Utils.hexDigit((byte) (bytes[0] >> 4));
        char hex2 = Utils.hexDigit((byte) (bytes[0]));
        buffer.write((int) hex1);
        buffer.write((int) hex2);
        byte[] expected = buffer.toByteArray();
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNonUrlSafeByte2_BGmz7_OYpo0() {
        byte[] bytes = new byte[1];
        bytes[0] = -1;
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result != null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        buffer.write('%'); // Assuming ESCAPE_CHAR is '%'
        char hex1 = Utils.hexDigit((byte) ((bytes[0] + 256) >> 4));
        char hex2 = Utils.hexDigit((byte) ((bytes[0] + 256)));
        buffer.write(hex1);
        buffer.write(hex2);
        byte[] expected = buffer.toByteArray();
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNullString_pkCf0_Aaqw0() {
        URLCodec urlCodec = new URLCodec();
        try {
            String result = urlCodec.encode(null, "UTF-8");
            assert result == null;
        } catch (UnsupportedEncodingException e) {
            fail("decode should not throw an exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeValid_JoSh1_kHpn0() {
        URLCodec codec = new URLCodec();
        try {
            String result = codec.encode("Hello World", "UTF-8");
            Assertions.assertEquals("Hello+World", result);
        } catch (UnsupportedEncodingException e) {
            Assertions.fail("Unexpected exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_nuyZ1_DjIv0() {
        URLCodec codec = new URLCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        try {
            byte[] result = codec.decode(bytes);
            Assertions.assertArrayEquals(bytes, result);
        } catch (DecoderException e) {
            Assertions.fail("DecoderException was expected to be thrown but wasn't");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_bSKz1_kwUI0() {
        URLCodec urlCodec = new URLCodec();
        try {
            String result = urlCodec.encode("Hello, World!", "UTF-8");
            assertEquals("Hello%2C+World%21", result);
        } catch (UnsupportedEncodingException e) {
            fail("Unexpected exception");
        }
    }
}