/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_UnixCrypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_yjXU0() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("L0pWr7Fgq31Pw", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithNullKey_GLMk7() {
        byte[] original = null;
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_WJMc0() {
        String original = "HelloWorld";
        String result = UnixCrypt.crypt(original.getBytes(), null);
        assertEquals("U4uFekFihQw/I", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_OTLZ0() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("aSt9IU/wQKWM2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_aMfs1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "Invalid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_EAZN2() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "Valid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_ocFg3() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "Valid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKey_NsBd4() {
        byte[] original = new byte[16];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "Valid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortKey_HWtN5() {
        byte[] original = new byte[4];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "Valid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithEmptyKey_SOZH6() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "Valid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithNullKey_ciiH7() {
        byte[] original = null;
        String result = UnixCrypt.crypt(original, "Valid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_yZQh0() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("daS0keuySWUDg", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_qXqt0() {
        byte[] original = new byte[0];
        String salt = null;
        assertEquals("srlqgYdmR2.XQ", UnixCrypt.crypt(original, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_epSB1() {
        byte[] original = new byte[0];
        String salt = "InvalidSalt";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_eLyA0() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("eLRwCzPECQo2A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongOriginalDataAndNullSalt_LELw8() {
        byte[] original = new byte[10];
        for (int i = 0; i < 10; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, null);
        assertEquals("CH9J2kBNRMkX.", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_qCOU0() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("F9ezOSgk56dEU", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithOriginalAndNegativeLength_CDkT6() {
        byte[] original = new byte[-1];
        try {
            UnixCrypt.crypt(original, "ValidSalt");
            assertEquals(false, true);
        } catch (ArrayIndexOutOfBoundsException e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_egIt0() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("1bTB8THYRhlbo", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_fDWU1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "Invalid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithNullOriginalData_AHSc7() {
        byte[] original = null;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_tmFe0() {
        String original = "pVH51lRjLoTvU";
        String result = UnixCrypt.crypt(original.getBytes(), null);
        assertEquals("pVH51lRjLoTvU", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_yvfv2() {
        String original = "VadlrJCY/LcCo";
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("VadlrJCY/LcCo", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_ROeM3() {
        String original = "Vaf99KOfJJAJk";
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("Vaf99KOfJJAJk", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_HnYO4() {
        String original = "VaUqp6CxNpbP6";
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("VaUqp6CxNpbP6", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_pOvl0() {
        byte[] original = "test".getBytes();
        String result = UnixCrypt.crypt(original);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_yjXU0_fid1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_UPdK1_fid1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "InvalidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_pDOv2_fid1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_eUTd3_fid1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKey_xZHc4_fid1() {
        byte[] original = new byte[16];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortKey_Qupv5_fid1() {
        byte[] original = new byte[4];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithEmptyKey_CPby6_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndSalt_QjMc8_fid1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSaltWithKey");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_WJMc0_fid1() {
        String original = "HelloWorld";
        String result = UnixCrypt.crypt(original.getBytes(), null);
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_bQpC1_fid1() {
        String original = "HelloWorld";
        String result = UnixCrypt.crypt(original.getBytes(), "InvalidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_dvkJ2_fid1() {
        String original = "HelloWorld";
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_MmcV3_fid1() {
        String original = "HelloWorld";
        byte[] key = new byte[8];
        Arrays.fill(key, (byte) 0);
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndSchedule_ZxOP4_fid1() {
        String original = "HelloWorld";
        byte[] key = new byte[8];
        Arrays.fill(key, (byte) 0);
        int[] schedule = new int[32];
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndOut_nCjF5_fid1() {
        String original = "HelloWorld";
        byte[] key = new byte[8];
        Arrays.fill(key, (byte) 0);
        int[] schedule = new int[32];
        int[] out = new int[2];
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndOutAndB_MYfD6_fid1() {
        String original = "HelloWorld";
        byte[] key = new byte[8];
        Arrays.fill(key, (byte) 0);
        int[] schedule = new int[32];
        int[] out = new int[2];
        byte[] b = new byte[9];
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndOutAndBAndI_cNEa7_fid1() {
        String original = "HelloWorld";
        byte[] key = new byte[8];
        Arrays.fill(key, (byte) 0);
        int[] schedule = new int[32];
        int[] out = new int[2];
        byte[] b = new byte[9];
        int i = 2;
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndOutAndBAndIAndY_UUkf8_fid1() {
        String original = "HelloWorld";
        byte[] key = new byte[8];
        Arrays.fill(key, (byte) 0);
        int[] schedule = new int[32];
        int[] out = new int[2];
        byte[] b = new byte[9];
        int i = 2;
        int y = 0;
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndOutAndBAndIAndYAndU_wpvm9_fid1() {
        String original = "HelloWorld";
        byte[] key = new byte[8];
        Arrays.fill(key, (byte) 0);
        int[] schedule = new int[32];
        int[] out = new int[2];
        byte[] b = new byte[9];
        int i = 2;
        int y = 0;
        int u = 128;
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_qXqt0_fid1() {
        byte[] original = new byte[0];
        String salt = null;
        assertEquals("             ", UnixCrypt.crypt(original, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_bhyj2_fid1() {
        byte[] original = new byte[0];
        String salt = "ValidSalt";
        assertEquals("             ", UnixCrypt.crypt(original, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_AOPw3_fid1() {
        byte[] original = new byte[]{1, 2, 3, 4};
        String salt = "ValidSalt";
        assertEquals("             ", UnixCrypt.crypt(original, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKey_DVEY4_fid1() {
        byte[] original = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String salt = "ValidSalt";
        assertEquals("             ", UnixCrypt.crypt(original, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortKey_gLQp5_fid1() {
        byte[] original = new byte[]{1, 2};
        String salt = "ValidSalt";
        assertEquals("             ", UnixCrypt.crypt(original, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongOriginal_fkMC8_fid1() {
        byte[] original = new byte[16];
        String salt = "ValidSalt";
        assertEquals("             ", UnixCrypt.crypt(original, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortOriginal_OQVf9_fid1() {
        byte[] original = new byte[1];
        String salt = "ValidSalt";
        assertEquals("             ", UnixCrypt.crypt(original, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_eLyA0_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_cKsP1_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "InvalidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithOriginalData_ALEJ3_fid1() {
        byte[] original = new byte[]{(byte) 1, (byte) 2, (byte) 3, (byte) 4};
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongOriginalData_IWaP4_fid1() {
        byte[] original = new byte[10];
        for (int i = 0; i < 10; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortOriginalData_eFvs7_fid1() {
        byte[] original = new byte[5];
        for (int i = 0; i < 5; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongOriginalDataAndNullSalt_LELw8_fid1() {
        byte[] original = new byte[10];
        for (int i = 0; i < 10; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, null);
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongOriginalDataAndInvalidSalt_ajOa9_fid1() {
        byte[] original = new byte[10];
        for (int i = 0; i < 10; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "InvalidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithOriginalAndDifferentLength_tZcr4_fid1() {
        byte[] original = new byte[10];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_JObN2_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithOriginalData_mSFC3_fid1() {
        byte[] original = new byte[]{1, 2, 3, 4};
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongOriginalData_snCK4_fid1() {
        byte[] original = new byte[10];
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortOriginalData_DCvf5_fid1() {
        byte[] original = new byte[5];
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortSalt_wavZ9_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "sa");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_tmFe0_fid1() {
        String original = "Hello";
        String result = UnixCrypt.crypt(original.getBytes(), null);
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_PBgF1_fid1() {
        String original = "Hello";
        String result = UnixCrypt.crypt(original.getBytes(), "InvalidSalt");
        assertEquals("Invalid salt value: InvalidSalt", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_yvfv2_fid1() {
        String original = "Hello";
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_ROeM3_fid1() {
        String original = "He";
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("He", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_HnYO4_fid1() {
        String original = "HelloWorld";
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("HelloWorld", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_aUvd5() {
        String original = "";
        String result = UnixCrypt.crypt(original.getBytes(), "ValidSalt");
        assertEquals("", result);
    }
}