/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Sha2Crypt_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptNullSalt_yZuL0() {
        byte[] keyBytes = new byte[32];
        String result = Sha2Crypt.sha256Crypt(keyBytes, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSaltWithRounds_GrpB3() {
        byte[] keyBytes = new byte[32];
        String salt = "$5$rounds=10000$salt";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSaltWithRoundsCustomAndLongSalt_AaAH5() {
        byte[] keyBytes = new byte[32];
        String salt = "$5$rounds=10000$salt$salt$salt";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSaltWithRoundsCustomAndLongSaltAndSpecialChars_pKRs6() {
        byte[] keyBytes = new byte[32];
        String salt = "$5$rounds=10000$salt$salt$salt!@#$%^&*()";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSaltWithRoundsCustomAndLongSaltAndSpecialCharsAndWhitespaceAndNewline_fFTQ8() {
        byte[] keyBytes = new byte[32];
        String salt = "$5$rounds=10000$salt$salt$salt !@#$%^&*()\n";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSaltWithRoundsCustomAndLongSaltAndSpecialCharsAndWhitespaceAndNewlineAndTab_njnw9() {
        byte[] keyBytes = new byte[32];
        String salt = "$5$rounds=10000$salt$salt$salt !@#$%^&*()\n\t";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSaltWithRoundsCustomAndLongSaltAndSpecialCharsAndWhitespaceAndNewlineAndTabAndBackslash_dRKq10() {
        byte[] keyBytes = new byte[32];
        String salt = "$5$rounds=10000$salt$salt$salt !@#$%^&*()\n\t\\";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSaltWithRoundsCustomAndLongSaltAndSpecialCharsAndWhitespaceAndNewlineAndTabAndBackslashAndQuotes_rjcN11() {
        byte[] keyBytes = new byte[32];
        String salt = "$5$rounds=10000$salt$salt$salt !@#$%^&*()\n\t\\\"";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }
}