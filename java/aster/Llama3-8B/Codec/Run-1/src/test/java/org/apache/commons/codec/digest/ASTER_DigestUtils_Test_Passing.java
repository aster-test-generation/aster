/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_Gezq0() {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assert messageDigest == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigestWithName_bQfD2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest result = digestUtils.getMessageDigest();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_nVFw1() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
        assertEquals("SHA-1", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_nCzU0() {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_bQsn0() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertNotNull(result);
        assertArrayEquals(messageDigest.digest(data), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_FJSM0() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_nrOg0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] expected = messageDigest.digest(data.array());
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNullMessageDigest_zGAH1() {
        try {
            DigestUtils.digest(null, ByteBuffer.wrap("Hello, World!".getBytes()));
            assert false;
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_sGGm0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = messageDigest.digest(data);
            byte[] result = DigestUtils.sha(data);
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_csSD0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-512");
            byte[] data = "Test String".getBytes();
            byte[] result = DigestUtils.sha3_512(data);
            assert Arrays.equals(digest.digest(data), result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_aUSy0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = messageDigest.digest(data);
            byte[] result = DigestUtils.sha512(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_kNTt0() {
        DigestUtils digestUtils = new DigestUtils();
        boolean result = digestUtils.isAvailable("SHA-256");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotAvailable_Nvox1() {
        DigestUtils digestUtils = new DigestUtils();
        boolean result = digestUtils.isAvailable("InvalidAlgorithm");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_lIKm0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA3-224");
            byte[] data = "test".getBytes();
            byte[] result = DigestUtils.sha3_224(data);
            assert Arrays.equals(digest.digest(data), result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_lHWz0() {
        try {
            MessageDigest md = MessageDigest.getInstance("MD2");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = DigestUtils.md2(data);
            assert Arrays.equals(md.digest(data), result);
        } catch (NoSuchAlgorithmException e) {
            assert false;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_hrSw0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-512");
            String data = "Hello, World!";
            String result = DigestUtils.sha3_512Hex(data);
            String expected = Hex.encodeHexString(digest.digest(data.getBytes()));
            assert result.equals(expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_UTOj0() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assert digest != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_KHoA1() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assert digest.getAlgorithm().equals(MessageDigestAlgorithms.SHA_512_224);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_mCHp0() {
        MessageDigest digest = DigestUtils.getDigest("SHA-256", null);
        Assertions.assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_isJT3() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] expected = digestUtils.digest("Hello, World!".getBytes());
        assertNotNull(expected);
        byte[] actual = MessageDigest.getInstance("SHA-256").digest("Hello, World!".getBytes());
        assertArrayEquals(actual, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestEmptyString_OCOW5() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] expected = digestUtils.digest(new byte[0]);
        assertNotNull(expected);
        byte[] actual = MessageDigest.getInstance("SHA-256").digest(new byte[0]);
        assertArrayEquals(actual, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_bZyb0() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_cGZv0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-384");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = DigestUtils.sha384(data);
            assert Arrays.equals(digest.digest(data), result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_pMJG0_1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, World!";
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        byte[] expected = messageDigest.digest(StringUtils.getBytesUtf8(valueToDigest));
        byte[] actual = result.digest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigestAndRandomAccessFile_EkGc2() throws IOException {
        MessageDigest messageDigest = null;
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        try {
            DigestUtils.digest(messageDigest, data);
            assert false;
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_aHPJ0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-512");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = digest.digest(data);
            String expected = "2c26b46b68ffc68ff99b453c1d324ab91f3f8027e68d0f83a5d3ec30b4d0c5d3";
            assertEquals(expected, DigestUtils.sha3_512Hex(result));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_yRqR0() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_qFcQ0() {
        MessageDigest digest = DigestUtils.getSha1Digest();
        assert digest != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_FPvr1() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] result = digestUtils.digest(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNull_KVCB2() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = null;
        try {
            digestUtils.digest(data);
            assert false;
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_RxLP0() {
        try {
            MessageDigest digest = DigestUtils.getDigest("SHA-256");
            assertNotNull(digest);
        } catch (IllegalArgumentException e) {
            fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_nVFw1_1() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_nVFw1_2() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertEquals("SHA-1", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_bQsn0_1() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_bQsn0_2() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(messageDigest.digest(data), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_isJT3_1() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] expected = digestUtils.digest("Hello, World!".getBytes());
        byte[] actual = MessageDigest.getInstance("SHA-256").digest("Hello, World!".getBytes());
        assertNotNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_isJT3_2() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] expected = digestUtils.digest("Hello, World!".getBytes());
        byte[] actual = MessageDigest.getInstance("SHA-256").digest("Hello, World!".getBytes());
        assertArrayEquals(actual, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestEmptyString_OCOW5_1() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] expected = digestUtils.digest(new byte[0]);
        byte[] actual = MessageDigest.getInstance("SHA-256").digest(new byte[0]);
        assertNotNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestEmptyString_OCOW5_2() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] expected = digestUtils.digest(new byte[0]);
        byte[] actual = MessageDigest.getInstance("SHA-256").digest(new byte[0]);
        assertArrayEquals(actual, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_ZMVr0_1() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = "HelloWorld".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotNull(updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_mfsE0() {
        MessageDigest expected = DigestUtils.getSha512_256Digest();
        MessageDigest result = expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_pMJG0_NFiB0() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        String valueToDigest = "Hello, World!";
        messageDigest.update(valueToDigest.getBytes());
        byte[] actual = messageDigest.digest();
        byte[] expected = actual;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_csII1() {
        MessageDigest expected = DigestUtils.getSha512_256Digest();
        assertNotNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_sHZF0() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        byte[] actual = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigestAndRandomAccessFileNull_xzPw1_rDwa0() throws IOException {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        RandomAccessFile data = null;
        try {
            DigestUtils.digest(messageDigest, data);
            assert false;
        } catch (NullPointerException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_XUiR0_THlc0() {
        byte[] data = "Hello, World!".getBytes();
        MessageDigest sha256Digest = DigestUtils.getSha256Digest();
        byte[] expected = sha256Digest.digest(data);
        byte[] result = DigestUtils.getSha256Digest().digest(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithEmptyData_VmnP3_RtHL0() throws IOException {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        File file = new File("test.txt");
        RandomAccessFile data = new RandomAccessFile(file, "r");
        data.seek(0);
        byte[] buffer = new byte[(int) file.length()];
        data.read(buffer);
        MessageDigest result = digest;
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
        digest.update(buffer);
        byte[] digestBytes = digest.digest();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_pJlN0() throws Exception {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        byte[] data = "test".getBytes("UTF-8");
        byte[] result = digest.digest(data);
        byte[] expected = result;
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_MtcK0_UlsU0() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        File file = new File("path_to_your_file"); // replace with your actual file path
        byte[] expectedDigest = digestUtils.getSha512_256Digest().digest();
        assertNotEquals(null, expectedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_qFcQ0_wTql1() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assert(digest != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_FPvr1_UQwt1() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        byte[] data = "Hello, World!".getBytes();
        byte[] result = digest.digest(data);
        assertNotEquals(null, result);
    }

    @Test
    public void testGetDigest_RxLP0_RvYa0() {
        try {
            MessageDigest digest = DigestUtils.getSha512_256Digest();
            assertNotNull(digest);
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNullData_RfaG2_AheI0() {
        try {
            DigestUtils.getSha512_256Digest().digest(null);
            assert false;
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_t_kDQq0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        MessageDigest sha3_384Digest = DigestUtils.getSha3_384Digest();
        byte[] result = DigestUtils.sha3_384(data);
        byte[] expected = sha3_384Digest.digest(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithName_ejWX2_QTZO1() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-512/256");
        String data = "path_to_your_file"; // replace with your actual file path
        String result = digestUtils.digestAsHex(data);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestEmpty_oQUz2_jmvP0_1() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        InputStream data = new java.io.ByteArrayInputStream(new byte[0]);
        byte[] expected = digestUtils.getSha512_256Digest().digest();
        byte[] actual = MessageDigest.getInstance("SHA-512/256").digest();
        assertNotNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestEmpty_oQUz2_jmvP0_2() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        InputStream data = new java.io.ByteArrayInputStream(new byte[0]);
        byte[] expected = digestUtils.getSha512_256Digest().digest();
        byte[] actual = MessageDigest.getInstance("SHA-512/256").digest();
        assertArrayEquals(actual, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_sFQF1() throws Exception {
        MessageDigest actual = DigestUtils.getSha512_256Digest();
        MessageDigest expected = MessageDigest.getInstance("SHA-512/256");
        assertEquals(expected.getAlgorithm(), actual.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_QpvG0_Fuvo0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        byte[] expected = DigestUtils.getSha512_256Digest().digest(data);
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_ktGY0_Iwmw0() throws Exception {
        byte[] data = "Hello World".getBytes();
        MessageDigest digest = MessageDigest.getInstance("SHA-512/256");
        byte[] expected = digest.digest(data);
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_FyzV0_ZGVE0() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/256");
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = digest.digest(data);
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigestWithDigest_gWXv1_KnaI0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            DigestUtils digestUtils = new DigestUtils(messageDigest);
            MessageDigest result = digestUtils.getSha512_256Digest();
            assert result != null;
        } catch (NoSuchAlgorithmException e) {
            assert false;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_NGWg0_wEPQ0() {
        try {
            MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
            ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
            MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
            assertSame(messageDigest, result);
            assertNotNull(result);
        } catch (Exception e) {
            fail("Should not throw an exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_bkpk0_TFEO0() {
        DigestUtils digestUtils = new DigestUtils();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
            digestUtils = new DigestUtils(messageDigest);
            messageDigest = MessageDigest.getInstance(MessageDigestAlgorithms.SHA_512_256);
            byte[] result = digestUtils.getSha512_256Digest().digest("Hello, World!".getBytes());
            byte[] expected = messageDigest.digest("Hello, World!".getBytes());
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_jNCo0_FjIB0() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertNotNull(digest);
        try {
            assertEquals(MessageDigest.getInstance("SHA-512/256").getAlgorithm(), digest.getAlgorithm());
        } catch (NoSuchAlgorithmException e) {
            fail("Unexpected exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_aKJy0_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        DigestUtils digestUtils = new DigestUtils(digest);
        String result = DigestUtils.shaHex("Hello World");
        assertEquals("0a4d55a8d778e5022fab701977c5d840bbc486d0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_efGu0_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        String expected = "e1933cb49d9b81cd8148b89f98d70070";
        assertEquals(expected, DigestUtils.md2Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_BJmI0_fid2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "5485cc9b3365b4305dfb4e8337e0a598a574f8242bf17289e0dd6c20a3cd44a089de16ab4ab308f63e44b1170eb5f515";
        String result = DigestUtils.sha384Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_FesU0_fid2() {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        String expected = "826df068457df5dd195b437ab7e7739ff75d2672183f02bb8e1089fabcf97bd9dc80110cf42dbc7cff41c78ecb68d8ba78abe6b5178dea3984df8c55541bf949";
        String actual = DigestUtils.sha512Hex(messageDigest.digest());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_JSuU0_fid2() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        byte[] hashBytes = messageDigest.digest(data);
        String expected = "5a20dd2421f633d21da85b8911f9f37677f212d5";
        assertEquals(expected, DigestUtils.sha1Hex(hashBytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_Kkbg0_fid2() throws NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        String result = digestUtils.md5Hex("Hello, World!");
        assertEquals("65a8e27d8879283831b664bd8b7f0ad4", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_qVtX0_fid2() throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] data = "Hello World".getBytes();
        byte[] digest = md.digest(data);
        String expected = "7b976cc68452e003eec7cb0eb631a19a";
        String result = DigestUtils.md5Hex(digest);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithDigest_Pqse1_fid2() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        String expected = "74f81fe167d99b4cb41d6d0ccda82278caee9f3e2f25d5e5a3936ff3dcec60d0";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithName_ppGJ2_fid2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        String expected = "74f81fe167d99b4cb41d6d0ccda82278caee9f3e2f25d5e5a3936ff3dcec60d0";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_XBKy0_fid2() throws NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        String expected = "374d794a95cdcfd8b35993185fef9ba368f160d8daf432d08ba9f1ed1e5abe6cc69291e0fa2fe0006a52570ef18c19def4e617c33ce52ef0a6e5fbe318cb0387";
        String result = digestUtils.sha512Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_rFyN0_fid2() {
        byte[] data = "HelloWorld".getBytes();
        String expected = "293cd96eb25228a6fb09bfa86b9148ab69940e68903cbc0527a4fb150eec1ebe0f1ffce0bc5e3df312377e0a68f1950a";
        assertEquals(expected, DigestUtils.sha384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithName_PsXJ2_fid2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        assertEquals(expected, digestUtils.digestAsHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_mwrO0_fid2() {
        byte[] data = "HelloWorld".getBytes();
        String expected = "d4572351d359a300cc8a27113611f81c71cac6e6f1c45a37257e051175bad4c0";
        assertEquals(expected, DigestUtils.sha512_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_UbVY0_fid2() {
        String data = "Hello World";
        String expected = "e167f68d6563d75bb25f3aa49c29ef612d41352dc00606de7cbd630bb2665f51";
        String result = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MIqB0_fid2() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA3-224");
        DigestUtils digestUtils = new DigestUtils(digest);
        byte[] data = "Test String".getBytes();
        String expected = "81224444afc72477da81eb1340c54643dfb17513982ecd80a91211e2"; // replace with the expected hash
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_UImP0_upyp0_fid2() throws Exception {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        byte[] hash = digest.digest("Hello, World!".getBytes("UTF-8"));
        String actual = Hex.encodeHexString(hash);
        String expected = "0686f0a605973dc1bf035d1e2b9bad1985a0bff712ddd88abd8d2593e5f99030";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_aHPJ0_hbmF0_fid2() {
        try {
            MessageDigest digest = DigestUtils.getSha512_256Digest();
            byte[] data = "Hello, World!".getBytes("UTF-8");
            byte[] result = digest.digest(data);
            String expected = DigestUtils.sha512Hex(result);
        } catch (Exception e) {
            fail("Should not throw an exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_gDpT0_KDTF1_fid2() throws Exception {
        byte[] expected = new byte[]{1, 2, 3};
        MessageDigest md = DigestUtils.getSha512_256Digest();
        byte[] result = md.digest(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_DHCL0_TJky0_fid2() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        byte[] data = "hello".getBytes();
        String result = DigestUtils.getSha512_256Digest().digest(data).toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_gEIr0_Ccez0_fid2() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = "Hello World".getBytes();
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = DigestUtils.sha256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_BeSj0_McYx0_fid2() throws IOException {
        String expected = "d4572351d359a300cc8a27113611f81c71cac6e6f1c45a37257e051175bad4c0";
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        byte[] bytes = "HelloWorld".getBytes();
        byte[] hashBytes = digest.digest(bytes);
        String actual = Hex.encodeHexString(hashBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_jsAk0_URtU0_fid2() {
        String data = "Hello";
        String expected = "aaf4c61ddcc5e8a2ecf9dcbbaut1";
        try {
            String result = DigestUtils.md2Hex(data);
        } catch (Exception e) {
            fail("Unexpected exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_qEBT1_mAvi0_fid2() {
        try {
            MessageDigest expectedDigest = MessageDigest.getInstance("SHA-512");
            MessageDigest actualDigest = DigestUtils.getSha512Digest();
            assertEquals(expectedDigest.getAlgorithm(), actualDigest.getAlgorithm());
        } catch (NoSuchAlgorithmException e) {
            fail("Failed to get SHA-512 digest");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithDigest_RkKE1_zKId0_fid2() {
        try {
            DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
            byte[] data = "Hello, World!".getBytes();
            String expected = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
            assertEquals(expected, digestUtils.digestAsHex(data));
        } catch (NoSuchAlgorithmException e) {
            fail("Unexpected exception");
        }
    }
}