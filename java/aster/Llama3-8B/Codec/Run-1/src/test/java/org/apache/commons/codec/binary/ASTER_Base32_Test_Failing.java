/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetValidByte_QuVF0() {
        Base32 base32 = new Base32(5, new byte[]{0}, true, (byte) 0, CodecPolicy.STRICT);
        boolean result = base32.isInAlphabet((byte) 0);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetInvalidByte_DIId1() {
        Base32 base32 = new Base32(5, new byte[]{0}, true, (byte) 0, CodecPolicy.STRICT);
        boolean result = base32.isInAlphabet((byte) 128);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetDecodeTableMinusOne_Nefa3() {
        Base32 base32 = new Base32(5, new byte[]{0}, true, (byte) 0, CodecPolicy.STRICT);
        boolean result = base32.isInAlphabet((byte) -1);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_dmvA0() {
        Base32 base32 = new Base32(8, new byte[]{0x0A}, true, (byte) 0x00, CodecPolicy.STRICT);
        byte[] pArray = new byte[10];
        long result = base32.getEncodedLength(pArray);
        long expected = (pArray.length + 3 - 1) / 3 * 4 + (4 + 8 - 1) / 8 * 1;
        assert result == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength2_jtRW1() {
        Base32 base32 = new Base32(4, new byte[]{0x0A}, false);
        byte[] pArray = new byte[12];
        long result = base32.getEncodedLength(pArray);
        long expected = (pArray.length + 3 - 1) / 3 * 4 + (4 + 4 - 1) / 4 * 1;
        assert result == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonEmptyArray_eUwO1() {
        Base32 base32 = new Base32();
        byte[] array = new byte[]{1, 2, 3, 4, 5};
        byte[] result = base32.encode(array);
        assertArrayEquals(array, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_dFrC0() throws DecoderException {
        Base32 base32 = new Base32(8, new byte[]{0x0A}, true, (byte) 0x20, CodecPolicy.STRICT);
        Object obj = base32.decode(new byte[]{0x68, 0x65, 0x6c, 0x6c, 0x6f});
        assertEquals("hello", obj);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_ePdX1() throws DecoderException {
        Base32 base32 = new Base32(8, new byte[]{0x0A}, true, (byte) 0x20, CodecPolicy.STRICT);
        Object obj = base32.decode("SGVsbG8=");
        assertEquals("hello", obj);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CYFR0() {
        Base32 base32 = new Base32(5, new byte[]{0x0A}, true, (byte) 0x20, CodecPolicy.STRICT);
        byte[] result = base32.encode(new byte[]{1, 2, 3, 4, 5}, 0, 5);
        byte[] expected = new byte[]{0x31, 0x2b, 0x2f, 0x20, 0x31};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_anIA0() {
        Base32 base32 = new Base32(5, new byte[]{10}, true, (byte) 0, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05};
        byte[] result = base32.decode(pArray);
        byte[] expected = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode1_GDWd0_iAhn0() {
        Base32 base32 = new Base32(5, new byte[]{10, 11, 12, 13, 14}, true, (byte) 0, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
        base32.decode(input, 0, input.length, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode4_eZfF3_xgix0() {
        Base32 base32 = new Base32(5, new byte[]{0x0A}, true, (byte) 0x20, CodecPolicy.STRICT);
        byte[] input = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode6_nZgB5_BOrj0() {
        Base32 base32 = new Base32(5, new byte[]{0x0A}, true, (byte) 0x20, CodecPolicy.STRICT);
        byte[] input = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
        base32.encode(input, 0, input.length, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode8_FoJL7_ykhO0() {
        Base32 base32 = new Base32(5, new byte[]{0x0A}, true, (byte) 0x20, CodecPolicy.STRICT);
        byte[] input = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B};
        boolean result = base32.containsAlphabetOrPad(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResultsWithAvailableData_gWWY0_YWiV0() {
        Base32 base32 = new Base32(10, new byte[]{0x0A}, true, (byte) 0x20, CodecPolicy.STRICT);
        byte[] b = new byte[20];
        int bPos = 0;
        int bAvail = 20;
        base32.readResults(b, bPos, bAvail, null);
        assertEquals(10, bPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResultsNoData_xdua3_QVeQ0() {
        Base32 base32 = new Base32(10, new byte[]{0x0A}, true, (byte) 0x20, CodecPolicy.STRICT);
        byte[] b = new byte[20];
        boolean result = base32.containsAlphabetOrPad(b);
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_ejwu0_mFpg0() {
        Base32 base32 = new Base32(5, new byte[]{10, 11, 12}, true, (byte) 0, CodecPolicy.STRICT);
        byte[] result = base32.decode("MTIzNDU2Nzg5Mw==");
        assert Arrays.equals(result, new byte[]{49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable_jTji0_sLxz0() {
        Base32 base32 = new Base32(10, new byte[0], false, (byte) 0, CodecPolicy.STRICT);
        assertEquals(true, base32.containsAlphabetOrPad(new byte[]{}));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnsureBufferSizeNullBuffer_NXKA0_rlaF0() {
        Base32 base32 = new Base32();
        byte[] result = base32.ensureBufferSize(10, null);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnsureBufferSizeNoResizeBuffer_OAzC2_lilY0() {
        Base32 base32 = new Base32();
        byte[] result = base32.ensureBufferSize(5, null);
        assert result.length == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_DcQB2() {
        Base32 base32 = new Base32();
        byte[] result = base32.getLineSeparator();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_lWjg0_fid2() {
        Base32 base32 = new Base32(5, new byte[]{10}, true, (byte) 0, CodecPolicy.STRICT);
        String result = base32.encodeAsString(new byte[]{1, 2, 3, 4, 5});
        assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ23456789", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_FWrl0_fid2() {
        Base32 base32 = new Base32(5, new byte[]{(byte) 0x0A}, true, (byte) 0x00, CodecPolicy.STRICT);
        assertTrue(base32.isInAlphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidInput_FGPy0_fid2() throws EncoderException {
        Base32 base32 = new Base32(5, new byte[]{0x0A}, true, (byte) 0x00, CodecPolicy.STRICT);
        Object result = base32.encode(new byte[]{0x00, 0x01, 0x02, 0x03, 0x04});
        assertEquals("AAAAAA==", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize_OaoC0_fid2() {
        Base32 base32 = new Base32();
        assertEquals(1024, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_Otct0_fid2() {
        Base32 base32 = new Base32(5, new byte[]{10}, true, (byte) 0, CodecPolicy.STRICT);
        String result = base32.encodeToString(new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56});
        assertEquals("MNO", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable_jTji0_sLxz0_fid2() {
        Base32 base32 = new Base32(10, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        assertEquals(true, base32.containsAlphabetOrPad(new byte[]{}));
    }
}