/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingBlankInput_Ruta3() {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello World".replace(" ", "_").getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_BDYU0() {
        QCodec qCodec = new QCodec();
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharset_CfTZ1() {
        QCodec qCodec = new QCodec("UTF-8");
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharsetObject_wQSQ2() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_bMvN0() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            String result = qCodec.encode("Hello, World!", "UTF-8");
            System.out.println("qCodec.encode(\"Hello, World!\" , \"UTF-8\")");
            assert result.equals("SGVsbG8sIFdvcmxkIQ==");
        } catch (EncoderException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetDefault_Unsw2() {
        QCodec qCodec = new QCodec();
        assertEquals(null, qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidInputDifferentCharset_UDgI6() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-16"));
        String text = "=?UTF-16?q?Hello_World?=";
        String result = qCodec.decodeText(text);
        Assertions.assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_fNNb0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String result = qCodec.encodeText("Hello, World!", qCodec.getCharset());
        assertEquals("PREFIXUTF-8SEPISO-8859-1SEPHello, World!POSTFIX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingBlankInputWithEncodingBlanks_WrmS4_nanV0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello World".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        byte[] expected = "Hello_World".getBytes();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_ZeZB0_gyCR0() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            String result = qCodec.encodeText("Hello", Charset.forName("UTF-8"));
            assertEquals("Hello", result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown but not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_cXds1_HLCz1() {
        QCodec qCodec = new QCodec();
        try {
            String result = qCodec.decode(null);
            fail("DecoderException was expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_ZeZB0_gyCR0_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            String result = qCodec.encodeText("=?UTF-8?Q?Hello?=", Charset.forName("UTF-8"));
            assertEquals("=?UTF-8?Q?Hello?=", result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown but not expected");
        }
    }
}