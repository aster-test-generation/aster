/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CharSequenceUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_bThK0() {
        assertTrue(CharSequenceUtils.regionMatches("Hello", true, 0, "Hello", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_False_Obqa1() {
        assertFalse(CharSequenceUtils.regionMatches("Hello", true, 0, "World", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_IgnoreCaseFalse_tUHA2() {
        assertFalse(CharSequenceUtils.regionMatches("Hello", false, 0, "hello", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_IgnoreCaseTrue_lBqJ3() {
        assertTrue(CharSequenceUtils.regionMatches("Hello", true, 0, "hello", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_TudG4() {
        assertTrue(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), true, 0, new StringBuilder("Hello"), 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_False_ZcfB5() {
        assertFalse(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), true, 0, new StringBuilder("World"), 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_IgnoreCaseFalse_kBxS6() {
        assertFalse(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), false, 0, new StringBuilder("hello"), 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_IgnoreCaseTrue_lUEl7() {
        assertTrue(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), true, 0, new StringBuilder("hello"), 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_StartIndex1_HklC13() {
        assertTrue(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), true, 1, new StringBuilder("Hello"), 1, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_Length0_hjBF14() {
        assertTrue(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), true, 0, new StringBuilder("Hello"), 0, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_Length1_XeBs15() {
        assertTrue(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), true, 0, new StringBuilder("Hello"), 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_Length2_ojox16() {
        assertTrue(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), true, 0, new StringBuilder("Hello"), 0, 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_Length3_srZU17() {
        assertTrue(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), true, 0, new StringBuilder("Hello"), 0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharSequence_CharSequence_Length4_KUlN18() {
        assertTrue(CharSequenceUtils.regionMatches(new StringBuilder("Hello"), true, 0, new StringBuilder("Hello"), 0, 4));
    }
}