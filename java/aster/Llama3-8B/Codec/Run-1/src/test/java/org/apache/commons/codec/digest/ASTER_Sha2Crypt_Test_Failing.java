/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Sha2Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_NgjT0() {
        byte[] keyBytes = "password".getBytes();
        String salt = "salt";
        String expected = "5$rounds=5000$hash$";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptNullSalt_TSRd1() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String expected = "$5$hORx3d/0$N5QPxxqsOUY62iDT18TvgzessYW6PZOuEzyeLLXoYgC";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_ZwDD0() {
        byte[] keyBytes = "password".getBytes();
        String salt = "salt";
        String expected = "5$eN[...]";
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptNullSalt_KXwN1() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String expected = "$6$GYLTchUQ$43hd2Ohe0UMh.31W/SegSxuEgT9FgmCQtPGWTbr1lJzOPIN79n0scxVUEWEPJ6vkaJPbEQmCzG45qJ5FN6mdt/";
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptNullSalt_TSRd1_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String expected = "5$rounds=5000$hash$";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptNullSalt_KXwN1_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String expected = "5$eN[...]";
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assertEquals(expected, result);
    }
}