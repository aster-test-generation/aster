/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Soundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNull_lFSu0() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmpty_SyXT1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSingleCharacter_JnNB2() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("A");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_Qgyk0() {
        Soundex soundex = new Soundex();
        int maxLength = soundex.getMaxLength();
        assert maxLength == 4;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMapping_zbtN1() {
        Soundex soundex = new Soundex("mapping");
        int maxLength = soundex.getMaxLength();
        assert maxLength == 4;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithSpecialCaseHW_FNoL2() {
        Soundex soundex = new Soundex("mapping", true);
        int maxLength = soundex.getMaxLength();
        assert maxLength == 4;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithCharArray_Ddtc3() {
        Soundex soundex = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        int maxLength = soundex.getMaxLength();
        assert maxLength == 4;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidString_OsFS0() {
        Soundex soundex = new Soundex();
        Object result = soundex.encode("Smith");
        assertEquals("S530", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInvalidObject_bkaZ1() {
        Soundex soundex = new Soundex();
        try {
            soundex.encode(123);
            assertEquals(false, true);
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Soundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_nUPD0() {
        Soundex soundex = new Soundex();
        soundex.setMaxLength(5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLengthWithMapping_XEIV1() {
        Soundex soundex = new Soundex("mapping");
        soundex.setMaxLength(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLengthWithSpecialCaseHW_hVdX2() {
        Soundex soundex = new Soundex("mapping", true);
        soundex.setMaxLength(15);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLengthWithCharArray_szOJ3() {
        char[] mapping = {'a', 'b', 'c'};
        Soundex soundex = new Soundex(mapping);
        soundex.setMaxLength(20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexTwoCharacters_fkfr3_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AB");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexThreeCharacters_Ltzi4_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABC");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexFourCharacters_LxsW5_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCD");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexFiveCharacters_FwPh6_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDE");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSixCharacters_ZLJC7_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEF");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSevenCharacters_Tmka8_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFG");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEightCharacters_MEEH9_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGH");
        assertEquals("A123", result);
    }
}