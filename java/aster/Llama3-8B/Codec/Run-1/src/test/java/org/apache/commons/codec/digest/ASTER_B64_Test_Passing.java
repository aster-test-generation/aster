/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.security.SecureRandom;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_B64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_eOKY0() {
        SecureRandom random = new SecureRandom();
        String result = B64.getRandomSalt(10, random);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_BBrv0() {
        Random random = new Random();
        String result = B64.getRandomSalt(5, random);
        assert result.length() == 5;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt2_DCLB1() {
        Random random = new Random();
        String result = B64.getRandomSalt(10, random);
        assert result.length() == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bit1_hvbZ0() {
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit((byte) 0x12, (byte) 0x34, (byte) 0x56, 6, buffer);
        assertEquals("KFX2..", buffer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bit2_wLWR1() {
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit((byte) 0x78, (byte) 0x90, (byte) 0xAB, 4, buffer);
        assertEquals("f07S", buffer.toString());
    }
}