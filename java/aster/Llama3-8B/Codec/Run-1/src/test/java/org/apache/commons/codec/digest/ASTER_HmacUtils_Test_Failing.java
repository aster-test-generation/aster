/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_YVSZ0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        File file = new File("path_to_your_file");
        byte[] expected = hmacUtils.hmac(file);
        byte[] actual = hmacUtils.hmac(file);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac2_YgFM1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "key");
        File file = new File("path_to_your_file");
        byte[] expected = hmacUtils.hmac(file);
        byte[] actual = hmacUtils.hmac(file);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac4_sBVZ3() throws IOException {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "key".getBytes());
        File file = new File("path_to_your_file");
        byte[] expected = hmacUtils.hmac(file);
        byte[] actual = hmacUtils.hmac(file);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidAlgorithm_IiAH6() {
        boolean result = HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_HmacSha1_OEIU1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        assertEquals(hmacUtils, mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacValidInput_Zlrq0() {
        byte[] key = "key".getBytes();
        Mac mac = HmacUtils.getInitializedMac("HMAC_SHA_256", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex2_aghg1_mKfX0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals("expectedHmacHexResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_mAUg0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedHexResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SYDD0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "mykey".getBytes());
        String result = hmacUtils.hmacHex("Hello, World!");
        assertEquals("a4a5a5a5a5a5a5a5a5a5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_oLNu0() {
        try {
            HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
            byte[] key = "key".getBytes();
            SecretKeySpec secretKey = new SecretKeySpec(key, algorithm.toString());
            Mac mac = Mac.getInstance(algorithm.toString());
            mac.init(secretKey);
            byte[] valueToDigest = "valueToDigest".getBytes();
            Mac result = HmacUtils.updateHmac(mac, valueToDigest);
            assertNotNull(result);
            byte[] expected = mac.doFinal();
            byte[] actual = result.doFinal();
            assertArrayEquals(expected, actual);
        } catch (InvalidKeyException | NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_ssHK0_fid1() {
        String key = "mykey";
        String valueToDigest = "myvalue";
        String expected = "a5bcde";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_rNxO0_fid1() {
        String key = "myKey";
        String valueToDigest = "myValue";
        String expected = "expectedHash";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_oJVx0_fid1() {
        String key = "mykey";
        byte[] valueToDigest = "myvalue".getBytes();
        String expected = "d41d8cd9..."; // expected hash value
        String actual = HmacUtils.hmacSha1Hex(key.getBytes(), valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_pzUf0_fid1() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals("expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_clLO0_fid1() {
        String key = "myKey";
        String valueToDigest = "myValue";
        String expected = "someExpectedHash";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_EMXQ0_fid1() {
        String key = "key";
        byte[] keyBytes = key.getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "expectedHmacSha384Hex";
        String actual = HmacUtils.hmacSha384Hex(keyBytes, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_BJQP0_fid1() {
        String key = "mykey";
        String valueToDigest = "myvalue";
        String expected = "a5ebd6f7c7a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5";
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_bwAI0_fid1() {
        String key = "myKey";
        String valueToDigest = "myValue";
        String expectedResult = "someExpectedResult";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_dAHP0_fid1() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        Assertions.assertEquals("expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_ulnb2_LDpr0_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("valueToDigest".getBytes());
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals("expectedHmacHexResult", result);
    }
}