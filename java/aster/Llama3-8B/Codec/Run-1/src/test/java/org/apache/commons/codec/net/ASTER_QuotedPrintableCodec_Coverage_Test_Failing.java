/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_MdUF2() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        Object obj = bytes;
        Object result = codec.decode(obj);
        assertEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeOtherObjectNull_bPDO5() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object obj = null;
        try {
            codec.decode(obj);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type " + obj.getClass().getName() + " cannot be quoted-printable decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_nqrT0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{(byte) 0x3D, (byte) 0x61, (byte) 0x2B, (byte) 0x30, (byte) 0x31, (byte) 0x30};
        byte[] expected = new byte[]{(byte) 0x61, (byte) 0x2B, (byte) 0x30, (byte) 0x31, (byte) 0x30};
        assertArrayEquals(expected, QuotedPrintableCodec.decodeQuotedPrintable(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithCR_IPQc1() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{(byte) 0x3D, (byte) 0x61, (byte) 0x2B, (byte) 0x30, (byte) 0x31, (byte) 0x30, (byte) 0x0D};
        byte[] expected = new byte[]{(byte) 0x61, (byte) 0x2B, (byte) 0x30, (byte) 0x31, (byte) 0x30};
        assertArrayEquals(expected, QuotedPrintableCodec.decodeQuotedPrintable(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithLF_eAbx2() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{(byte) 0x3D, (byte) 0x61, (byte) 0x2B, (byte) 0x30, (byte) 0x31, (byte) 0x30, (byte) 0x0A};
        byte[] expected = new byte[]{(byte) 0x61, (byte) 0x2B, (byte) 0x30, (byte) 0x31, (byte) 0x30};
        assertArrayEquals(expected, QuotedPrintableCodec.decodeQuotedPrintable(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNonPrintableCharacter_wXxw2() {
        BitSet printable = new BitSet();
        printable.set(0, 128);
        byte[] bytes = new byte[]{(byte) 0x7F};
        byte[] expected = new byte[]{(byte) 0x3D, (byte) 0x3D, (byte) 0x3F};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNonPrintableCharacter2_xtYg3() {
        BitSet printable = new BitSet();
        printable.set(0, 128);
        byte[] bytes = new byte[]{(byte) 0x80};
        byte[] expected = new byte[]{(byte) 0x3D, (byte) 0x3D, (byte) 0x3F};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNonPrintableCharacter2WithoutStrict_vfsu6() {
        BitSet printable = new BitSet();
        printable.set(0, 128);
        byte[] bytes = new byte[]{(byte) 0x80};
        byte[] expected = new byte[]{(byte) 0x80};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithShortBytes_RYRY7() {
        BitSet printable = new BitSet();
        printable.set(0, 128);
        byte[] bytes = new byte[]{(byte) 0x20};
        byte[] expected = new byte[]{(byte) 0x20};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }
}