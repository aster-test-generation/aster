/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_ZfOg0() {
        Base64 base64 = new Base64(true);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeFalse_gvYi1() {
        Base64 base64 = new Base64(false);
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_KfKp0() {
        byte[] pArray = Base64.decodeBase64("AQIDBA==".getBytes());
        BigInteger result = Base64.decodeInteger(pArray);
        assertEquals(new BigInteger("0"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_yiem0() {
        byte[] binaryData = "Hello World".getBytes();
        String encodedString = Base64.encodeBase64String(binaryData);
        assert encodedString.equals("SGVsbG8gV29ybGQ=");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_OjAN0() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, true, CodecPolicy.STRICT);
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_BnXp0() {
        byte[] binaryData = "HelloWorld".getBytes();
        byte[] result = Base64.encodeBase64Chunked(binaryData);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_khAG0() {
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] result = Base64.encodeBase64(binaryData);
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        assert Arrays.equals(result, expected.getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64Valid_SVKV0() {
        assertTrue(Base64.isBase64("SGVsbG8gd29ybGQ="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64Invalid_IGxj1() {
        assertTrue(Base64.isBase64("InvalidBase64"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64Empty_Rkhb3() {
        assertTrue(Base64.isBase64(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetStrict_TaSR0() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.STRICT);
        boolean result = base64.isInAlphabet((byte) 0);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLenient_lfXr1() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.LENIENT);
        boolean result = base64.isInAlphabet((byte) 0);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetNotInAlphabet_wXLB2() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.STRICT);
        boolean result = base64.isInAlphabet((byte) 128);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64False_wSsk1() {
        byte[] arrayOctet = new byte[]{(byte) 1, (byte) 2, (byte) 3};
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_PadDefault_ReturnsTrue_libw0() {
        boolean result = Base64.isBase64(Base64.PAD_DEFAULT);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_Dhyn0_1() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_Dhyn0_2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_BYsx1_1() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_BYsx1_2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet4_kfQN3() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet5_wUFH4() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet16_oxnG15() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStrict_zyXE0() throws EncoderException {
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.STRICT);
        Object result = base64.encode(new byte[]{1, 2, 3});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeLenient_FrFk1() throws EncoderException {
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.LENIENT);
        Object result = base64.encode(new byte[]{1, 2, 3});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_Hjne0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        long result = base64.getEncodedLength(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
        assertEquals(18, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength2_ldms1() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        long result = base64.getEncodedLength(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
        assertEquals(18, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyArray_DjgU0() {
        Base64 base64 = new Base64();
        byte[] result = base64.encode(new byte[0]);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonEmptyArray_MrdH1() {
        Base64 base64 = new Base64();
        byte[] array = new byte[]{1, 2, 3, 4, 5};
        byte[] result = base64.encode(array);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize_MIIW8192() {
        Base64 base64 = new Base64();
        int result = base64.getDefaultBufferSize();
        assertEquals(8192, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLength_XbKk1() {
        Base64 base64 = new Base64(8192);
        int result = base64.getDefaultBufferSize();
        assertEquals(8192, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparator_wroY2() {
        Base64 base64 = new Base64(8192, new byte[1]);
        int result = base64.getDefaultBufferSize();
        assertEquals(8192, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithUrlSafe_GugZ3() {
        Base64 base64 = new Base64(true);
        int result = base64.getDefaultBufferSize();
        assertEquals(8192, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparatorAndUrlSafe_kJOy4() {
        Base64 base64 = new Base64(8192, new byte[1], true);
        int result = base64.getDefaultBufferSize();
        assertEquals(8192, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparatorAndUrlSafeAndDecodingPolicy_zFQI5() {
        Base64 base64 = new Base64(8192, new byte[1], true, CodecPolicy.STRICT);
        int result = base64.getDefaultBufferSize();
        assertEquals(8192, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLenient_IHiH1() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.LENIENT);
        byte[] arrayOctet = new byte[]{65, 66, 67};
        boolean allowWSPad = false;
        boolean result = base64.isInAlphabet(arrayOctet, allowWSPad);
        assert (result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetAllowWSPad_eEvn2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{32, 65, 66, 67};
        boolean allowWSPad = true;
        boolean result = base64.isInAlphabet(arrayOctet, allowWSPad);
        assert (result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_OLka0_1() {
        assertTrue(Base64.isWhiteSpace((byte) ' '));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_OLka0_2() {
        assertTrue(Base64.isWhiteSpace((byte) '\t'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_OLka0_3() {
        assertTrue(Base64.isWhiteSpace((byte) '\n'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_OLka0_4() {
        assertTrue(Base64.isWhiteSpace((byte) '\r'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_OLka0_5() {
        assertFalse(Base64.isWhiteSpace((byte) 'a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingStrict_WXRz0() {
        Base64 base64 = new Base64(0, null, true, CodecPolicy.STRICT);
        boolean result = base64.isStrictDecoding();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingLenient_KAVY1() {
        Base64 base64 = new Base64(0, null, true, CodecPolicy.LENIENT);
        boolean result = base64.isStrictDecoding();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_ArmW0() throws DecoderException {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        Object obj = new byte[]{(byte) 65, (byte) 66, (byte) 67};
        try {
            Object result = base64.decode(obj);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_VgTA1() throws DecoderException {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        Object obj = "ABC";
        try {
            Object result = base64.decode(obj);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidObject_NEGG2() throws DecoderException {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        Object obj = new Integer(1);
        try {
            base64.decode(obj);
            fail("DecoderException was not thrown");
        } catch (DecoderException e) {
            assertEquals("Parameter supplied to Base-N decode is not a byte[] or a String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyArray_xbrP1() {
        Base64 base64 = new Base64();
        byte[] result = base64.encode(new byte[0], 0, 0);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_KiNw0() {
        Base64 base64 = new Base64(10, new byte[0], true, CodecPolicy.STRICT);
        CodecPolicy codecPolicy = base64.getCodecPolicy();
        assertEquals(CodecPolicy.STRICT, codecPolicy);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy1_tuLR1() {
        Base64 base64 = new Base64(10, new byte[0]);
        CodecPolicy codecPolicy = base64.getCodecPolicy();
        assertEquals(CodecPolicy.LENIENT, codecPolicy);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy2_IZKv2() {
        Base64 base64 = new Base64(true);
        CodecPolicy codecPolicy = base64.getCodecPolicy();
        assertEquals(CodecPolicy.LENIENT, codecPolicy);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy3_rPRK3() {
        Base64 base64 = new Base64();
        CodecPolicy codecPolicy = base64.getCodecPolicy();
        assertEquals(CodecPolicy.LENIENT, codecPolicy);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy4_dcwg4() {
        Base64 base64 = new Base64(10, new byte[0], true, CodecPolicy.LENIENT);
        CodecPolicy codecPolicy = base64.getCodecPolicy();
        assertEquals(CodecPolicy.LENIENT, codecPolicy);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyArray_apwh0() {
        Base64 base64 = new Base64();
        byte[] result = base64.decode(new byte[0]);
        assert Arrays.equals(result, new byte[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad1_mUEb0() {
        Base64 base64 = new Base64(10, new byte[]{10, 11, 12}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67};
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad2_XhFi1() {
        Base64 base64 = new Base64(10, new byte[]{10, 11, 12}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67, 72};
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad3_Yact2() {
        Base64 base64 = new Base64(10, new byte[]{10, 11, 12}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67, 72, 61};
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad4_Xoyq3() {
        Base64 base64 = new Base64(10, new byte[]{10, 11, 12}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67, 72, 61, 62};
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad5_Ctvx4() {
        Base64 base64 = new Base64(10, new byte[]{10, 11, 12}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67, 72, 61, 62, 63};
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLenientPolicy_CDLw9_Lihd0() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, true, CodecPolicy.LENIENT);
        byte[] in = new byte[]{0, 1, 2, 3};
        base64.containsAlphabetOrPad(in);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithZeroLineLength_AjSO10_nZPF0() {
        Base64 base64 = new Base64(0);
        byte[] in = new byte[]{0, 1, 2, 3};
        base64.containsAlphabetOrPad(in);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_NvXm0_JcPX0() {
        byte[] binaryData = "Hello, World!".getBytes();
        boolean isChunked = false;
        boolean urlSafe = true;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        String expected = "SGVsbG8sIFdvcmxkIQ==";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStrict_omze0_SHKQ0() {
        Base64 base64 = new Base64(76, new byte[0], true, CodecPolicy.STRICT);
        byte[] input = new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02};
        base64.containsAlphabetOrPad(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNullInput_DPxf3_LQCZ0() {
        Base64 base64 = new Base64(76, new byte[0], true, CodecPolicy.STRICT);
        try {
            base64.containsAlphabetOrPad(null);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_oTrT0_ynvJ0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        Base64 base64 = new Base64(maxResultSize, new byte[0], urlSafe, CodecPolicy.STRICT);
        boolean result = base64.containsAlphabetOrPad(binaryData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64EmptyData_ZVEH3_ymfW0() {
        byte[] binaryData = new byte[0];
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        Base64 base64 = new Base64(maxResultSize, new byte[0], urlSafe, CodecPolicy.LENIENT);
        boolean result = base64.containsAlphabetOrPad(binaryData);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnsureBufferSizeNullBuffer_jPsY0_AoFI0() {
        Base64 base64 = new Base64();
        byte[] result = base64.encode(new byte[0]);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasDataTrue_xIhX0_duPU0() {
        Base64 base64 = new Base64(10, new byte[0], true, CodecPolicy.STRICT);
        boolean result = base64.containsAlphabetOrPad(new byte[0]);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePositiveCapacityPositiveInput_pJiE0_BtRw0() {
        assertEquals(0, CodecPolicy.STRICT.ordinal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparator_HwFi0_InbU1() {
        byte[] expected = Base64.CHUNK_SEPARATOR;
        byte[] actual = expected.clone();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_OLka0() {
        assertTrue(Base64.isWhiteSpace((byte) ' '));
        assertTrue(Base64.isWhiteSpace((byte) '\t'));
        assertTrue(Base64.isWhiteSpace((byte) '\n'));
        assertTrue(Base64.isWhiteSpace((byte) '\r'));
        assertFalse(Base64.isWhiteSpace((byte) 'a'));
    }
}