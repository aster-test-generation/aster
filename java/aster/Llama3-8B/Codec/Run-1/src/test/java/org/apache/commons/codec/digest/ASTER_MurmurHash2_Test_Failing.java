/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash2_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_XJES0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long result = MurmurHash2.hash64(data, data.length);
        assertEquals(0x123456789abcdefL, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_rydM0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int length = 4;
        int expected = 0x12345678;
        int result = MurmurHash2.hash32(data, length);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emCj0_fid2() {
        assertEquals(12345, MurmurHash2.hash32("HelloWorld", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_TByi0_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = 10;
        int seed = 123;
        int expected = 123456789;
        int result = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLessThan4Bytes_NVnR1_fid2() {
        byte[] data = new byte[]{1, 2, 3};
        int length = 3;
        int seed = 123;
        int expected = 123456789;
        int result = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_wCom0_fid2() {
        assertEquals(1234567890123456789L, MurmurHash2.hash64("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_QhbO0_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long result = MurmurHash2.hash64(data, data.length, 0);
        Assertions.assertEquals(result, 1234567890L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithLessThan8Bytes_XQDU1_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4};
        long result = MurmurHash2.hash64(data, data.length, 0);
        Assertions.assertEquals(result, 1234567890L);
    }
}