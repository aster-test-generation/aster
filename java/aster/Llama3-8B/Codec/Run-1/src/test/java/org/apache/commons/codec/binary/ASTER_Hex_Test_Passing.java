/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexOddLength_OHaG1() {
        char[] data = "12345".toCharArray();
        byte[] out = new byte[6];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            assert false;
        } catch (DecoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexOutputNotLargeEnough_leTi2() {
        char[] data = "123456".toCharArray();
        byte[] out = new byte[2];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            assert false;
        } catch (DecoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_SAzV0() {
        byte[] data = new byte[]{0x12, 0x34, 0x56, 0x78};
        char[] result = Hex.encodeHex(data, 0, data.length, true);
        String expected = "12345678";
        assert Arrays.equals(expected.toCharArray(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexEmptyData_XtYX1() {
        byte[] data = new byte[0];
        char[] toDigits = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        char[] expected = new char[0];
        char[] result = Hex.encodeHex(data, toDigits);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_yPXZ0() {
        ByteBuffer data = ByteBuffer.wrap(new byte[]{0x12, 0x34, 0x56});
        String result = Hex.encodeHexString(data, true);
        assert result.equals("123456");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithCharsetObject_AijP0() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithCharsetName_vxin1() {
        Hex hex = new Hex("UTF-8");
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithNoArgument_WEDc2() {
        Hex hex = new Hex();
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_XGGw0() {
        Hex hex = new Hex();
        String result = hex.encodeHexString(new byte[]{1, 2, 3, 4, 5});
        assertEquals("0102030405", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_McSm0() {
        Hex hex = new Hex();
        String result = hex.encodeHexString(ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5}));
        assertEquals("0102030405", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_zTam0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        String result = Hex.encodeHexString(data, true);
        assertEquals("12345678", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_lBkv0() {
        Hex hex = new Hex();
        byte[] data = new byte[]{1, 2, 3};
        char[] out = new char[6];
        int outOffset = 0;
        hex.encodeHex(data, 0, data.length, true, out, outOffset);
        String expected = "";
        String actual = new String(out, 0, outOffset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_RLFW0() {
        byte[] data = new byte[]{0x12, 0x34, 0x56, 0x78};
        char[] toDigits = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        char[] out = new char[8];
        Hex.encodeHex(data, 0, 4, true, out, 0);
        String expected = "12345678";
        String actual = new String(out);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexLowerCaseFalse_kTfc1() {
        byte[] data = new byte[]{0x12, 0x34, 0x56, 0x78};
        char[] toDigits = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] out = new char[8];
        Hex.encodeHex(data, 0, 4, false, out, 0);
        String expected = "12345678";
        String actual = new String(out);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetObject_bAkp2() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        Charset charset = hex.getCharset();
        assert charset.name().equals("UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetString_Cmzr3() {
        Hex hex = new Hex("UTF-8");
        Charset charset = hex.getCharset();
        assert charset.name().equals("UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_JsVc0_QFbZ0() {
        char[] data = "123456".toCharArray();
        byte[] out = new byte[6];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            byte[] expected = {0x12, 0x34, 0x56};
            assertArrayEquals(expected, java.util.Arrays.copyOfRange(out, outOffset, outOffset + result));
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_LvqM0_lOXO0() {
        try {
            int result = Hex.toDigit('a', 0);
            Assertions.assertEquals(10, result);
        } catch (DecoderException e) {
            Assertions.fail("DecoderException was thrown unexpectedly");
        }
    }
}