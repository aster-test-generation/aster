/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_ZvMH0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int length = 4;
        int seed = 123;
        int expected = 0x12345678;
        int result = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_oqfd0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int result = MurmurHash3.hash32x86(data);
        assertEquals(0x12345678, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_YAaC0() {
        long result = MurmurHash3.hash64(0x12345678);
        long expected = 0x12345678;
        assert result == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64Negative_dHRt1() {
        long result = MurmurHash3.hash64(-0x12345678);
        long expected = 0x12345678;
        assert result == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64Large_sAcM2() {
        long result = MurmurHash3.hash64(0x1234567890123456L);
        long expected = 0x1234567890123456L;
        assert result == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_YKLI0() {
        String data = "test";
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_piCi1() {
        byte[] data = "test".getBytes();
        long result = MurmurHash3.hash64(data);
        assertEquals(0x4a7f3a4a, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_fNff0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int result = MurmurHash3.hash32(data);
        assertEquals(0x12345678, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_UOzY0() {
        long data = 1234567890L;
        long expected = 1234567890L;
        long result = MurmurHash3.hash64(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64Negative_xlBq1() {
        long data = -1234567890L;
        long expected = -1234567890L;
        long result = MurmurHash3.hash64(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64Large_ARvJ2() {
        long data = Long.MAX_VALUE;
        long expected = Long.MAX_VALUE;
        long result = MurmurHash3.hash64(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_OGac0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithShortData_auDR1() {
        byte[] data = new byte[]{1, 2};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLongData_LxzZ2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithZeroLength_osrO3() {
        byte[] data = new byte[]{};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeLength_vKGt4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = -5;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeOffset_gVGH5() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = -5;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeSeed_cCTM6() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = -123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNullData_IGzR7() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_gJBT0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithShortData_XlWX1() {
        byte[] data = new byte[]{(byte) 0x12};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithZeroData_fpcp2() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeLength_exkm3() {
        byte[] data = new byte[]{(byte) 0x12};
        int offset = 0;
        int length = -1;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeOffset_lOXa4() {
        byte[] data = new byte[]{(byte) 0x12};
        int offset = -1;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLargeData_ibKz5() {
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLargeDataAndOffset_cIGS6() {
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        int offset = 512;
        int length = 512;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_ebDd0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Tail_VtMz1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        int offset = 0;
        int length = 8;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64LongData_joSm2() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        int offset = 0;
        int length = 16;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64ShortData_bjij3() {
        byte[] data = new byte[]{(byte) 0x12};
        int offset = 0;
        int length = 1;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64ZeroData_HRCg4() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64NullData_lVfr5() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_FfVv0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithOffset_tDYg1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 1;
        int length = data.length - offset;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSeed_JkDU2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = data.length;
        int seed = 456;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithAllParameters_bYHR3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 2;
        int length = data.length - offset;
        int seed = 789;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_DkHu0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        int offset = 0;
        int length = data.length;
        int seed = 0;
        long[] expected = new long[]{0x1234567890abcdefL, 0x1234567890abcdefL};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithOffset_gSac1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        int offset = 4;
        int length = data.length - offset;
        int seed = 0;
        long[] expected = new long[]{0x1234567890abcdefL, 0x1234567890abcdefL};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSeed_JFhE2() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        int offset = 0;
        int length = data.length;
        int seed = 1234567890;
        long[] expected = new long[]{0x1234567890abcdefL, 0x1234567890abcdefL};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_xXyR0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSmallData_NYDM1() {
        byte[] data = new byte[]{1, 2, 3};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLargeData_vpOk2() {
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithZeroLength_WVpX3() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNegativeLength_BrZu4() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = -5;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullData_NCIB5() {
        byte[] data = null;
        int offset = 0;
        int length = 10;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullDataAndZeroLength_iZog6() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullDataAndNegativeLength_GTHh7() {
        byte[] data = null;
        int offset = 0;
        int length = -5;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullDataAndLargeLength_ffnP8() {
        byte[] data = null;
        int offset = 0;
        int length = 1024;
        int seed = 123;
        long[] expected = new long[]{1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_pOqJ0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long hash = MurmurHash3.hash64(data, 0, data.length, 123456789);
        Assertions.assertEquals(hash, 123456789);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithOffset_SYdB1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long hash = MurmurHash3.hash64(data, 2, 4, 123456789);
        Assertions.assertEquals(hash, 123456789);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_WUpW0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long result = MurmurHash3.hash64(data, 0, data.length);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_xxDi0() {
        assertEquals(0x1234567890abcdefL, MurmurHash3.hash64((short) 0x1234));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_zJUJ0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 5;
        int seed = 123;
        int expected = 123;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_ZVxq1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 123;
        int expected = 123;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lHBd0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int expected = 123456789;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_MdXe1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int offset = 0;
        int length = 5;
        int seed = 0;
        int expected = 987654321;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_Gvhb0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long[] expected = new long[]{0x123456789abcdefL, 0x987654321fedcbaL};
        long[] result = MurmurHash3.hash128(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_OfYb1() {
        assertEquals(123, MurmurHash3.hash32(123456789L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_WYHB0() {
        int result = MurmurHash3.hash32(0x1234567890L, 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeed_yASe1() {
        int result = MurmurHash3.hash32(0x1234567890L, 1);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_gyFP0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int expected = 0x12345678;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithLessThan4Bytes_wivC1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34};
        int offset = 0;
        int length = 2;
        int seed = 0;
        int expected = 0x1234;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_GgXS0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_ncHG1() {
        assertEquals(123456789, MurmurHash3.hash32("Hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_CaqC0() {
        int result = MurmurHash3.hash32(1L, 2L, 3);
        assertEquals(123, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_vXUw1() {
        int result = MurmurHash3.hash32(3L, 4L, 5);
        assertEquals(456, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSameData_WCUr2() {
        int result = MurmurHash3.hash32(1L, 1L, 3);
        assertEquals(123, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_AouV3() {
        int result = MurmurHash3.hash32(1L, 2L, 6);
        assertEquals(789, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_pmKV0() {
        assertEquals(123, MurmurHash3.hash32(1L, 2L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Negative_ZoMZ1() {
        assertEquals(-456, MurmurHash3.hash32(-1L, -2L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Zero_IXWm2() {
        assertEquals(0, MurmurHash3.hash32(0L, 0L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xNFf0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = 5;
        int expected = 12345;
        int result = MurmurHash3.hash32(data, length);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLargeData_MVOB2_myHc0() {
        int result = MurmurHash3.hash32(new byte[0], 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLargeDataAndSeed_XUxR3_vYMw0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int result = MurmurHash3.hash32(data, data.length);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithRemainingBytes_XxUX1_QrBs0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int offset = 0;
        int length = 5;
        int seed = 0;
        long expected = 0x1234567890L;
        int result = MurmurHash3.hash32(data, length);
        assertEquals((int) (expected % Integer.MAX_VALUE), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Eqir0_QvNr0() {
        long data = 1234567890L;
        int seed = 123;
        int result = MurmurHash3.hash32(data, seed);
        assertEquals(result, MurmurHash3.hash32(new byte[]{(byte) (data >>> 24), (byte) (data >>> 16), (byte) (data >>> 8), (byte) data}, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_UOzY0_fid1() {
        long data = -286461308899903857L;
        long expected = -286461308899903857L;
        long result = MurmurHash3.hash64(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64Negative_xlBq1_fid1() {
        long data = -2477286992411320140L;
        long expected = -2477286992411320140L;
        long result = MurmurHash3.hash64(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_OGac0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{-9010541079697045188L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithShortData_auDR1_fid1() {
        byte[] data = new byte[]{1, 2};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{3049124861549478054L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLongData_LxzZ2_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{-5448124698954277283L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithZeroLength_osrO3_fid1() {
        byte[] data = new byte[]{};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{-9122149783931627152L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeSeed_cCTM6_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = -123;
        long[] expected = new long[]{6072305608992691797L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNullData_IGzR7_fid1() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[]{-9122149783931627152L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_FfVv0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{4891110179456080002L, 9876543210L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithOffset_tDYg1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 1;
        int length = data.length - offset;
        int seed = 123;
        long[] expected = new long[]{-1464676071068292960L, 9876543210L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSeed_JkDU2_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = data.length;
        int seed = 456;
        long[] expected = new long[]{-7653426866365202869L, 9876543210L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithAllParameters_bYHR3_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 2;
        int length = data.length - offset;
        int seed = 789;
        long[] expected = new long[]{-7760707517558121175L, 9876543210L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_xXyR0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{-9010541079697045188L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSmallData_NYDM1_fid1() {
        byte[] data = new byte[]{1, 2, 3};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{-4259476502464459373L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLargeData_vpOk2_fid1() {
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{4763908930924225530L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithZeroLength_WVpX3_fid1() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{-9122149783931627152L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullDataAndZeroLength_iZog6_fid1() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[]{-9122149783931627152L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_zJUJ0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 5;
        int seed = -1989770587;
        int expected = -1989770587;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_ZVxq1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = -659558267;
        int expected = -659558267;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_OfYb1_fid1() {
        assertEquals(610756109, MurmurHash3.hash32(610756109456789L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_WYHB0_fid1() {
        int result = MurmurHash3.hash32(0x1234567890L, -1687024896);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Zero_IXWm2_fid1() {
        assertEquals(0, MurmurHash3.hash32(0L, 348300725L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLargeData_MVOB2_myHc0_fid1() {
        int result = MurmurHash3.hash32(new byte[0], -965378730);
        assertEquals(0, result);
    }
}