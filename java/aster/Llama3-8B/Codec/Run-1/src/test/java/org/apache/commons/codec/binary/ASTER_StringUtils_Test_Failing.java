/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_StringUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsStringAndStringWithDifferentCase_IqsD4() {
        assertTrue(StringUtils.equals("Test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUncheckedNullString_PFrZ0() {
        assertThrows(NullPointerException.class, () -> StringUtils.getBytesUnchecked(null, "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8EmptyInput_dgyF2() {
        byte[] result = StringUtils.getBytesUtf8("");
        assert result == new byte[0];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16BeEmptyBytes_VdHZ1_yOXJ0() {
        byte[] bytes = new byte[0];
        String result = StringUtils.newStringUsAscii(bytes);
        assert result == "";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16BeValidBytes_afFA2_njSW0() {
        byte[] bytes = "Hello".getBytes(StandardCharsets.UTF_16BE);
        String result = StringUtils.newStringUsAscii(bytes);
        assert result.equals("Hello");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringInvalidCharset_DEVk1_ZsXu0() {
        byte[] bytes = "Hello, World!".getBytes();
        String charsetName = "InvalidCharset";
        try {
            String result = StringUtils.newString(bytes, charsetName);
            fail("Expected UnsupportedEncodingException");
        } catch (Exception e) {
            assertEquals("java.nio.charset.UnrecognizedCharsetException: InvalidCharset", e.getMessage());
        }
    }
}