/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_XXHash32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateEmptyArray_heOd0() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.update(new byte[0], 0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateSmallArray_hrae1() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.update(new byte[]{1, 2, 3}, 0, 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLargeArray_zgRI2() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.update(new byte[1024], 0, 1024);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateArrayWithOffset_HZuN3() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.update(new byte[]{1, 2, 3, 4, 5}, 1, 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateArrayWithLengthZero_PmAo4() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.update(new byte[]{1, 2, 3}, 0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateArrayWithLengthGreaterThanBufferSize_PIKD5() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.update(new byte[2048], 0, 2048);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_samk0() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.update(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_FHgz46947589() {
        XXHash32 xxHash32 = new XXHash32();
        long result = xxHash32.getValue();
        assertEquals(46947589, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithBuffer_guxm1_WVbF0_fid2() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.update(0);
        xxHash32.update(0);
        xxHash32.update(0);
        xxHash32.update(0);
        long result = xxHash32.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithStateUpdated_qXXZ2_Aomz0_fid2() {
        XXHash32 xxHash32 = new XXHash32(1);
        xxHash32.update(0);
        byte[] buffer = new byte[4];
        xxHash32.update(buffer, 0, 4);
        long result = xxHash32.getValue();
    }
}