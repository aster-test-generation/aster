/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_hwFa0() {
        String base64String = "SGVsbG8gd29ybGQ=";
        byte[] expected = new byte[]{104, 111, 111, 108, 101, 32, 100, 101, 110, 99, 97, 108, 108, 111};
        byte[] result = Base64.decodeBase64(base64String);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_YdMd0() {
        byte[] binaryData = "Hello, World!".getBytes();
        String result = Base64.encodeBase64URLSafeString(binaryData);
        assert result.equals("SGVsbG8sIFdvcmxkIQ==");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_MwJv0() {
        BigInteger bigInteger = new BigInteger("12345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] result = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_FbmC0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{(byte) 'A', (byte) 'Q', (byte) 'g', (byte) 'w', (byte) '8', (byte) '9', (byte) 'A', (byte) 'Q', (byte) 'g', (byte) 'w', (byte) '8', (byte) '9'};
        byte[] result = Base64.encodeBase64(binaryData, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvalidBase64_hNrJ1() {
        byte[] arrayOctet = "HelloWorld".getBytes();
        assert !Base64.isBase64(arrayOctet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBase64WithNonBase64Character_lOPI3() {
        byte[] arrayOctet = "HelloWorld123".getBytes();
        assert !Base64.isBase64(arrayOctet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_COrC0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        byte[] result = Base64.encodeBase64URLSafe(binaryData);
        byte[] expected = new byte[]{43, 65, 51, 68, 32, 84, 20, 72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_zYJu0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        String pArray = "SGVsbG8gd29ybGQ=";
        byte[] result = base64.decode(pArray);
        assert result.length == 12;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_twBF0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        String result = base64.encodeAsString("Hello World".getBytes());
        assertEquals("SGVsbG8gV29ybGQ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetStrict_vnqW0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67};
        boolean allowWSPad = false;
        boolean result = base64.isInAlphabet(arrayOctet, allowWSPad);
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetPad_FIAc4() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{61};
        boolean allowWSPad = false;
        boolean result = base64.isInAlphabet(arrayOctet, allowWSPad);
        assert (result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_upgp0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        String result = base64.encodeToString(new byte[]{1, 2, 3, 4, 5});
        assertEquals("AQIDBAU", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ggcB0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte[] result = base64.encode(new byte[]{1, 2, 3}, 0, 3);
        byte[] expected = new byte[]{65, 66, 67};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonEmptyArray_erpm1() {
        Base64 base64 = new Base64();
        byte[] array = new byte[]{(byte) 65, (byte) 66, (byte) 67};
        byte[] result = base64.decode(array);
        byte[] expected = new byte[]{65, 66, 67};
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_fisH0_YxVd0() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x01, (byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89, (byte) 0x0a, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_vzNW1_OHrq0() {
        BigInteger bigInt = new BigInteger("123456789012345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes3_pQzl2_JkMH0() {
        BigInteger bigInt = new BigInteger("1234567890123456789012345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes4_wOse3_ejVQ0() {
        BigInteger bigInt = new BigInteger("12345678901234567890123456789012345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLineSeparator_NNbS2_XvtE0() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3});
        byte[] in = new byte[]{0, 1, 2, 3};
        base64.encode(in, 0, 4, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithZeroLineSeparator_wXlq11_UGbK0() {
        Base64 base64 = new Base64(10, new byte[]{0});
        byte[] in = new byte[]{0, 1, 2, 3};
        base64.encode(in, 0, 4, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidInput_tJlD4_uDHQ0() {
        Base64 base64 = new Base64(76, new byte[0], true, CodecPolicy.STRICT);
        byte[] input = new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x03};
        base64.decode(input, 0, input.length, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64LargeData_EWTQ2_rdcb0() {
        byte[] binaryData = new byte[10000];
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        Base64 base64 = new Base64(maxResultSize, new byte[0], urlSafe, CodecPolicy.STRICT);
        try {
            base64.containsAlphabetOrPad(binaryData);
            assert false;
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResultsWithAvailableData_AGiY0_wSWD0() {
        Base64 base64 = new Base64(64, new byte[0], false, CodecPolicy.STRICT);
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 10;
        int result = base64.readResults(b, bPos, bAvail, null);
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableLenient_CjUr1_RNMZ0() {
        Base64 base64 = new Base64(10, new byte[0], false, CodecPolicy.LENIENT);
        assertEquals(true, base64.containsAlphabetOrPad(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnsureBufferSizeNoResizeBuffer_qPrp2_FmdW0() {
        Base64 base64 = new Base64();
        byte[] result = base64.ensureBufferSize(10, null);
        byte[] expected = new byte[15];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_KfKp0_fid2() {
        byte[] pArray = Base64.decodeBase64("AQIDBA==".getBytes());
        BigInteger result = Base64.decodeInteger(pArray);
        assertEquals(new BigInteger("123"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64Invalid_IGxj1_fid2() {
        assertFalse(Base64.isBase64("InvalidBase64"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64Empty_Rkhb3_fid2() {
        assertFalse(Base64.isBase64(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetStrict_TaSR0_fid2() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.STRICT);
        boolean result = base64.isInAlphabet((byte) 0);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLenient_lfXr1_fid2() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.LENIENT);
        boolean result = base64.isInAlphabet((byte) 0);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_twBF0_fid2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        String result = base64.encodeAsString("Hello World".getBytes());
        assertEquals("SGVsbG8gV29ybGQh", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_Dhyn0_2_fid2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_BYsx1_2_fid2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet4_kfQN3_fid2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet5_wUFH4_fid2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStrict_zyXE0_fid2() throws EncoderException {
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.STRICT);
        Object result = base64.encode(new byte[]{1, 2, 3});
        assertEquals("AAAAAg==", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeLenient_FrFk1_fid2() throws EncoderException {
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.LENIENT);
        Object result = base64.encode(new byte[]{1, 2, 3});
        assertEquals("AAAAAg==", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_Hjne0_fid2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        long result = base64.getEncodedLength(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
        assertEquals(84, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength2_ldms1_fid2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        long result = base64.getEncodedLength(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
        assertEquals(84, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize_MIIW0() {
        Base64 base64 = new Base64();
        int result = base64.getDefaultBufferSize();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLength_XbKk1_fid2() {
        Base64 base64 = new Base64(10);
        int result = base64.getDefaultBufferSize();
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparator_wroY2_fid2() {
        Base64 base64 = new Base64(10, new byte[1]);
        int result = base64.getDefaultBufferSize();
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithUrlSafe_GugZ3_fid2() {
        Base64 base64 = new Base64(true);
        int result = base64.getDefaultBufferSize();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparatorAndUrlSafe_kJOy4_fid2() {
        Base64 base64 = new Base64(10, new byte[1], true);
        int result = base64.getDefaultBufferSize();
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparatorAndUrlSafeAndDecodingPolicy_zFQI5_fid2() {
        Base64 base64 = new Base64(10, new byte[1], true, CodecPolicy.STRICT);
        int result = base64.getDefaultBufferSize();
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_upgp0_fid2() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        String result = base64.encodeToString(new byte[]{1, 2, 3, 4, 5});
        assertEquals("AQIDBA==", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_ArmW0_fid2() throws DecoderException {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        Object obj = new byte[]{(byte) 65, (byte) 66, (byte) 67};
        try {
            Object result = base64.decode(obj);
            assertEquals("ABC", result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_VgTA1_fid2() throws DecoderException {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        Object obj = "ABC";
        try {
            Object result = base64.decode(obj);
            assertEquals("ABC", result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_oTrT0_ynvJ0_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        Base64 base64 = new Base64(maxResultSize, new byte[0], urlSafe, CodecPolicy.STRICT);
        boolean result = base64.containsAlphabetOrPad(binaryData);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableLenient_CjUr1_RNMZ0_fid2() {
        Base64 base64 = new Base64(10, new byte[0], true, CodecPolicy.LENIENT);
        assertEquals(true, base64.containsAlphabetOrPad(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasDataTrue_xIhX0_duPU0_fid2() {
        Base64 base64 = new Base64(10, new byte[0], true, CodecPolicy.STRICT);
        boolean result = base64.containsAlphabetOrPad(new byte[0]);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_Dhyn0() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"));
        assertFalse(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_BYsx1() {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"));
        assertFalse(base64.isInAlphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-"));
    }
}