/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyArray_hseS0() {
        Base32 base32 = new Base32();
        byte[] result = base32.encode(new byte[0]);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonEmptyArray_bXuL1() {
        Base32 base32 = new Base32();
        byte[] array = new byte[]{1, 2, 3, 4, 5};
        byte[] result = base32.encode(array);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_gdsP0() throws DecoderException {
        Base32 base32 = new Base32(5, new byte[]{10, 11, 12}, true, (byte) 0, CodecPolicy.STRICT);
        Object result = base32.decode(new byte[]{1, 2, 3, 4, 5});
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_AZyO2() throws DecoderException {
        Base32 base32 = new Base32(5, new byte[]{10, 11, 12}, true, (byte) 0, CodecPolicy.STRICT);
        Object result = base32.decode("Hello");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_Vrtz0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        assertFalse(base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPadNull_DaoU1() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = null;
        assertFalse(base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyArray_UpQV0() {
        Base32 base32 = new Base32();
        byte[] result = base32.decode(new byte[0]);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Eof_MsmW0_bZAB1() {
        Base32 base32 = new Base32();
        CodecPolicy policy = CodecPolicy.STRICT;
        byte[] input = new byte[0];
        base32.containsAlphabetOrPad(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Modulus3_LuxC8_ZBCJ0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{(byte) 0x03};
        base32.containsAlphabetOrPad(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Modulus6_LineLength6_Returns_teEG8_Kajn1() {
        Base32 base32 = new Base32(6, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        base32.containsAlphabetOrPad(new byte[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_UATp6_ZUkZ0() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{0x01, 0x02, 0x03, 0x04};
        boolean result = base32.containsAlphabetOrPad(pArray);
        assertFalse(result);
    }
}