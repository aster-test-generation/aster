/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_WhOQ0() {
        Base64 base64 = new Base64();
        boolean result = base64.isInAlphabet((byte) 0);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64WithNullArray_qHXB5() {
        byte[] arrayOctet = null;
        assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_wIyR0() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_GbSj1() {
        BigInteger bigInt = new BigInteger("123456789012345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes3_LxDK2() {
        BigInteger bigInt = new BigInteger("1234567890123456789012345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes4_muFw3() {
        BigInteger bigInt = new BigInteger("12345678901234567890123456789012345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes5_vCrA4() {
        BigInteger bigInt = new BigInteger("123456789012345678901234567890123456789012345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes6_oodz5() {
        BigInteger bigInt = new BigInteger("1234567890123456789012345678901234567890123456789012345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength1_zVzW0() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.STRICT);
        byte[] pArray = new byte[16];
        long result = base64.getEncodedLength(pArray);
        assertEquals(16, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength3_KfDV2() {
        Base64 base64 = new Base64(16, null, false, CodecPolicy.STRICT);
        byte[] pArray = new byte[16];
        long result = base64.getEncodedLength(pArray);
        assertEquals(16, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingNull_uNOS2() {
        Base64 base64 = new Base64(0, new byte[0], true, null);
        assertFalse(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoLeftovers_tPpu1_rNYr1() {
        Base64 base64 = new Base64();
        base64.encode(new byte[0], 0, 0, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeImpossibleModulus_PMyt5_mPPg1() {
        Base64 base64 = new Base64();
        try {
            base64.encode(new byte[0], 0, 0, null);
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64WithNonBase64Character_iOyC1_fid1() {
        byte[] arrayOctet = new byte[]{(byte) 65, (byte) 66, (byte) 67, (byte) 68};
        assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64WithNonBase64AndNonWhitespaceCharacter_URmH3_fid1() {
        byte[] arrayOctet = new byte[]{(byte) 65, (byte) 66, (byte) 67, (byte) 69};
        assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_validOctet_NXIP1_fid1() {
        byte octet = 0;
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_DECODE_TABLE_index_yVAi4_fid1() {
        byte octet = 0;
        int index = 0;
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength1_zVzW0_fid1() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.STRICT);
        byte[] pArray = new byte[10];
        long result = base64.getEncodedLength(pArray);
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength2_iEzm1_fid1() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.STRICT);
        byte[] pArray = new byte[11];
        long result = base64.getEncodedLength(pArray);
        assertEquals(12, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength3_KfDV2_fid1() {
        Base64 base64 = new Base64(10, null, false, CodecPolicy.STRICT);
        byte[] pArray = new byte[10];
        long result = base64.getEncodedLength(pArray);
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength4_Ymww3_fid1() {
        Base64 base64 = new Base64(10, null, false, CodecPolicy.STRICT);
        byte[] pArray = new byte[11];
        long result = base64.getEncodedLength(pArray);
        assertEquals(12, result);
    }
}