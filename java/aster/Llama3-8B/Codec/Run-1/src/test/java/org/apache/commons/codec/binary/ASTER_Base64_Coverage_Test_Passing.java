/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_tttk0() {
        byte[] arrayOctet = new byte[]{(byte) 65, (byte) 66, (byte) 67};
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64WithNonBase64Character_iOyC1() {
        byte[] arrayOctet = new byte[]{(byte) 65, (byte) 66, (byte) 67, (byte) 68};
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64WithNonBase64AndWhitespaceCharacter_bAEv2() {
        byte[] arrayOctet = new byte[]{(byte) 65, (byte) 66, (byte) 67, (byte) 32};
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64WithNonBase64AndNonWhitespaceCharacter_URmH3() {
        byte[] arrayOctet = new byte[]{(byte) 65, (byte) 66, (byte) 67, (byte) 69};
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64WithEmptyArray_OPBX4() {
        byte[] arrayOctet = new byte[0];
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_PAD_DEFAULT_uomd0() {
        byte octet = Base64.PAD_DEFAULT;
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_validOctet_NXIP1() {
        byte octet = 0;
        boolean result = Base64.isBase64(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_DECODE_TABLE_index_yVAi4() {
        byte octet = 0;
        int index = 0;
        boolean result = Base64.isBase64(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_DECODE_TABLE_value_equals_minus_one_BYuy6() {
        byte octet = 0;
        int value = -1;
        boolean result = Base64.isBase64(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength2_iEzm1() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.STRICT);
        byte[] pArray = new byte[11];
        long result = base64.getEncodedLength(pArray);
        assertEquals(16, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength4_Ymww3() {
        Base64 base64 = new Base64(10, null, false, CodecPolicy.STRICT);
        byte[] pArray = new byte[11];
        long result = base64.getEncodedLength(pArray);
        assertEquals(16, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingStrict_sCgj0() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertTrue(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingLenient_HHmw1() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertFalse(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingNoPolicy_Thcw3() {
        Base64 base64 = new Base64(0, new byte[0], true);
        assertFalse(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyInput_myTG0_BJYj1() {
        byte[] binaryData = new byte[0];
        Base64 base64 = new Base64(1024);
        byte[] result = base64.encode(binaryData);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonEmptyInput_Vfai1_hZbI1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        Base64 base64 = new Base64(1024);
        byte[] result = base64.encodeBase64(binaryData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeLineSeparatorLength_SDWj11_uCzK0() {
        Base64 base64 = new Base64();
        byte[] context = new byte[3];
        base64.containsAlphabetOrPad(context);
    }
}