/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Rule_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NonSingleton_LangSet_ezXK1() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1", "lang2")));
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.GENERIC, RuleType.RULES, langs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NonSingleton_AnyLang_IMco3() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1", "lang2")));
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, langs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Singleton_EmptyLangSet_GBFo4() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>());
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.GENERIC, RuleType.RULES, langs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NonSingleton_EmptyLangSet_fReq5() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>());
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.SEPHARDIC, RuleType.APPROX, langs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Generic_Exact_EmptyLangs_EPZc2_sppq0() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Rules_EmptyLangs_QTqb3_lnlo0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Rules_MultipleLangs_YIpG6_ALsi0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.RULES;
        Set<String> langs = new HashSet<>();
        langs.add("lang9");
        langs.add("lang10");
        langs.add("lang11");
        LanguageSet langsObj = LanguageSet.from(langs);
        List<Rule> result = Rule.getInstanceMap(nameType, rt, langsObj).get(nameType.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Approx_EmptyLangs_WWBz7_siMq0() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langs);
    }
}