/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Utils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigit16InvalidDigit_LFid1() {
        try {
            Utils.digit16((byte) 'g');
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Invalid URL encoding: not a valid digit (radix 16): 103", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_1() {
        assertEquals('0', Utils.hexDigit(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_2() {
        assertEquals('1', Utils.hexDigit(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_3() {
        assertEquals('2', Utils.hexDigit(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_4() {
        assertEquals('3', Utils.hexDigit(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_5() {
        assertEquals('4', Utils.hexDigit(4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_6() {
        assertEquals('5', Utils.hexDigit(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_7() {
        assertEquals('6', Utils.hexDigit(6));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_8() {
        assertEquals('7', Utils.hexDigit(7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_9() {
        assertEquals('8', Utils.hexDigit(8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_10() {
        assertEquals('9', Utils.hexDigit(9));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_11() {
        assertEquals('A', Utils.hexDigit(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_12() {
        assertEquals('B', Utils.hexDigit(11));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_13() {
        assertEquals('C', Utils.hexDigit(12));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_14() {
        assertEquals('D', Utils.hexDigit(13));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_15() {
        assertEquals('E', Utils.hexDigit(14));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0_16() {
        assertEquals('F', Utils.hexDigit(15));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigit16ValidDigit_YvWU0_uaJK0() {
        try {
            assertEquals('0', (char) Utils.hexDigit((byte) 0));
            assertEquals('1', (char) Utils.hexDigit((byte) 1));
            assertEquals('2', (char) Utils.hexDigit((byte) 2));
            assertEquals('3', (char) Utils.hexDigit((byte) 3));
            assertEquals('4', (char) Utils.hexDigit((byte) 4));
            assertEquals('5', (char) Utils.hexDigit((byte) 5));
            assertEquals('6', (char) Utils.hexDigit((byte) 6));
            assertEquals('7', (char) Utils.hexDigit((byte) 7));
            assertEquals('8', (char) Utils.hexDigit((byte) 8));
            assertEquals('9', (char) Utils.hexDigit((byte) 9));
            assertEquals('A', (char) Utils.hexDigit((byte) 10));
            assertEquals('B', (char) Utils.hexDigit((byte) 11));
            assertEquals('C', (char) Utils.hexDigit((byte) 12));
            assertEquals('D', (char) Utils.hexDigit((byte) 13));
            assertEquals('E', (char) Utils.hexDigit((byte) 14));
            assertEquals('F', (char) Utils.hexDigit((byte) 15));
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHexDigit_Bysu0() {
        assertEquals('0', Utils.hexDigit(0));
        assertEquals('1', Utils.hexDigit(1));
        assertEquals('2', Utils.hexDigit(2));
        assertEquals('3', Utils.hexDigit(3));
        assertEquals('4', Utils.hexDigit(4));
        assertEquals('5', Utils.hexDigit(5));
        assertEquals('6', Utils.hexDigit(6));
        assertEquals('7', Utils.hexDigit(7));
        assertEquals('8', Utils.hexDigit(8));
        assertEquals('9', Utils.hexDigit(9));
        assertEquals('A', Utils.hexDigit(10));
        assertEquals('B', Utils.hexDigit(11));
        assertEquals('C', Utils.hexDigit(12));
        assertEquals('D', Utils.hexDigit(13));
        assertEquals('E', Utils.hexDigit(14));
        assertEquals('F', Utils.hexDigit(15));
    }
}