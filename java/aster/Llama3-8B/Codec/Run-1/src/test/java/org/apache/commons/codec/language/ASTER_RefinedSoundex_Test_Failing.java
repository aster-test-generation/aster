/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSingleChar_Dtps2() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("a");
        Assertions.assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMultipleChars_oVVy3() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("smith");
        Assertions.assertEquals("S550", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexConsecutiveSameChars_sDCc4() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("mississippi");
        Assertions.assertEquals("M240", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexConsecutiveDifferentChars_PDRY5() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("smithson");
        Assertions.assertEquals("S550N250", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_gQnk0() {
        RefinedSoundex soundex = new RefinedSoundex();
        Object result = soundex.encode("Hello");
        Assertions.assertEquals("H000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EqwH0() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.encode("John");
        assertEquals("J000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_XXIa1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.encode("Smith");
        assertEquals("S530", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference2_gYMY1_vWPB0_fid2() {
        RefinedSoundex soundex = new RefinedSoundex();
        try {
            assertEquals('1', soundex.getMappingCode('a'));
        } catch (Exception e) {
            fail("Unexpected exception");
        }
    }
}