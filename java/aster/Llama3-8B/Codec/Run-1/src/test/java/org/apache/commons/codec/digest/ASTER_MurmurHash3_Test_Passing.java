/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_zCPO0_zWGf0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int result = MurmurHash3.hash32(data, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_iLea1_DduR0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int offset = 0;
        int length = 5;
        int seed = 0;
        int result = MurmurHash3.hash32(data, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lHBd0_fid1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int expected = -1742926701;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_MdXe1_fid1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int offset = 0;
        int length = 5;
        int seed = 0;
        int expected = 76634239;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = -877611763, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeed_yASe1_fid1() {
        int result = MurmurHash3.hash32(0x1234567890L, -877611763);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_ncHG1_fid1() {
        assertEquals(-1985658254, MurmurHash3.hash32("Hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_CaqC0_fid1() {
        int result = MurmurHash3.hash32(1L, 2L, 3);
        assertEquals(792474334, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_vXUw1_fid1() {
        int result = MurmurHash3.hash32(3L, 4L, 5);
        assertEquals(-1340819041, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSameData_WCUr2_fid1() {
        int result = MurmurHash3.hash32(1L, 1L, 3);
        assertEquals(-785241815, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_AouV3_fid1() {
        int result = MurmurHash3.hash32(1L, 2L, 6);
        assertEquals(-444804485, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_pmKV0_fid1() {
        assertEquals(695282569, MurmurHash3.hash32(1L, 2L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Negative_ZoMZ1_fid1() {
        assertEquals(672019934, MurmurHash3.hash32(-1L, -2L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xNFf0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = 5;
        int expected = 616850763;
        int result = MurmurHash3.hash32(data, length);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLargeDataAndSeed_XUxR3_vYMw0_fid1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int result = MurmurHash3.hash32(data, data.length);
    }
}