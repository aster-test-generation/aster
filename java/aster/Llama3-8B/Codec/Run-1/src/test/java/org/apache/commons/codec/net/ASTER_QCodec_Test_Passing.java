/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_jFFb0() {
        QCodec qCodec = new QCodec();
        String str = "Hello World";
        try {
            String result = qCodec.decode(str);
            assert result.equals("Hello World");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_zVsi0() {
        QCodec qCodec = new QCodec();
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharset_IfQn1() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetInstance_YXDl2() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeObject_sUMp2() {
        QCodec qCodec = new QCodec();
        try {
            qCodec.decode(new Object());
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be decoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNullInput_NVta0() {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingEmptyInput_HfQD1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[0];
        byte[] result = qCodec.doEncoding(bytes);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNonBlankInput_Pxlh2() {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello World".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_Gmvr2() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.encode(new Object());
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be encoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetObject_URQn0() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertEquals(Charset.forName("UTF-8"), qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithString_pmNC1() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_HYBZ0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello, World!";
        String charsetName = "UTF-8";
        String result = qCodec.encodeText(text, charsetName);
        System.out.println("qCodec.encodeText(text, charsetName)");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextNull_WgwK1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = null;
        String charsetName = "UTF-8";
        String result = qCodec.encodeText(text, charsetName);
        System.out.println("qCodec.encodeText(text, charsetName)");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_hghL0() {
        QCodec qCodec = new QCodec();
        String result = qCodec.getDefaultCharset();
        assertEquals("UTF-8", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharset_uSeH1() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String result = qCodec.getDefaultCharset();
        assertEquals("UTF-8", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharsetName_QyIH2() {
        QCodec qCodec = new QCodec("UTF-8");
        String result = qCodec.getDefaultCharset();
        assertEquals("UTF-8", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextNullInput_xgpE0() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String result = qCodec.decodeText(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextInvalidFormat_IJMK1() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "invalid format";
        try {
            qCodec.decodeText(text);
            Assertions.fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextInvalidCharset_XjVW2() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "invalid charset";
        try {
            qCodec.decodeText(text);
            Assertions.fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextInvalidEncoding_Zpoy3() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "invalid encoding";
        try {
            qCodec.decodeText(text);
            Assertions.fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidInput_iVVK4() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "=?utf-8?q?Hello_World?=";
        String result = qCodec.decodeText(text);
        Assertions.assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidInputDifferentEncoding_fSyu5() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec("ISO-8859-1");
        String text = "=?ISO-8859-1?q?Hello_World?=";
        String result = qCodec.decodeText(text);
        Assertions.assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextUnsupportedEncodingException_nJyK7() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "=?unsupported-encoding?q?Hello_World?=";
        try {
            qCodec.decodeText(text);
            Assertions.fail("UnsupportedEncodingException expected");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanksFalse_eXPX1_lHya0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        assert !qCodec.isEncodeBlanks();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingNullInput_zjsr0_QRcP1() {
        QCodec qCodec = new QCodec();
        try {
            byte[] result = qCodec.doDecoding(null);
            assert result == null;
        } catch (DecoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_yMqT1_pygb0() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            String result = qCodec.encodeText(null, Charset.forName("UTF-8"));
            assertNull(result);
        } catch (EncoderException e) {
            fail("Should not throw EncoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SZLa0_NsHS0() {
        QCodec qCodec = new QCodec();
        try {
            String result = qCodec.encodeText("Hello, World!", StandardCharsets.UTF_8);
            System.out.println("qCodec.encodeText(\"Hello, World!\", StandardCharsets.UTF_8);");
            assert result != null;
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_BDYU0_fid1() {
        QCodec qCodec = new QCodec();
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharset_CfTZ1_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharsetObject_wQSQ2_fid1() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetDefault_Unsw2_fid1() {
        QCodec qCodec = new QCodec();
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextValidInputDifferentCharset_UDgI6_fid1() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-16"));
        String text = "=?UTF-16?q?Hello_World?=";
        String result = qCodec.decodeText(text);
        Assertions.assertEquals("䡥汬漠坯牬�", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_fNNb0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String result = qCodec.encodeText("Hello, World!", qCodec.getCharset());
        assertEquals("=?UTF-8?Q?Hello, World!?=", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingBlankInputWithEncodingBlanks_WrmS4_nanV0_fid1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello World".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        byte[] expected = "Hello_World".getBytes();
    }
}