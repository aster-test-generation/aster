/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Metaphone_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_AREG0() throws EncoderException {
        Metaphone metaphone = new Metaphone();
        String input = "hello";
        Object result = metaphone.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_zSaf1() throws org.apache.commons.codec.EncoderException {
        Metaphone metaphone = new Metaphone();
        Object obj = new Integer(1);
        try {
            metaphone.encode(obj);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Metaphone encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchTrue_QcQu0_VxFa0() {
        Metaphone metaphone = new Metaphone();
        StringBuilder string = new StringBuilder("abcdefg");
        int index = 0;
        String test = "abc";
        boolean result = metaphone.encode(string.toString()).equals(test);
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchFalse_Gqsc1_OBaL0() {
        Metaphone metaphone = new Metaphone();
        StringBuilder string = new StringBuilder("abcdefg");
        int index = 0;
        String test = "xyz";
        boolean result = metaphone.encode(string.toString()).equals(test);
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchTestLengthOutOfRange_WMYA3_rOcI0() {
        Metaphone metaphone = new Metaphone();
        StringBuilder string = new StringBuilder("abcdefg");
        int index = 0;
        String test = "abcd";
        String result = metaphone.encode(string.toString());
        assertEquals(false, metaphone.metaphone(result).equals(test));
    }
}