/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Blake3_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeyedHash_wATT0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        byte[] data = new byte[]{6, 7, 8, 9, 10};
        byte[] expected = new byte[]{11, 12, 13, 14, 15};
        byte[] result = Blake3.keyedHash(key, data);
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizePositiveBytes_NEhv0_QOYH1() {
        byte[] result = Blake3.hash(new byte[10]);
        assert result.length == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashValidKey_gKBy0_paDA0() {
        byte[] key = new byte[64]; // Assuming KEY_LEN is 64
        for (int i = 0; i < 64; i++) {
            key[i] = (byte) i;
        }
        Blake3 result = Blake3.initKeyedHash(key);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalize_MYBe0_tHos1() {
        byte[] result = Blake3.hash(new byte[0]);
        byte[] out = new byte[10];
        assert Arrays.equals(result, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction2_HCVS1_rnEx0() {
        byte[] kdfContext = new byte[]{11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        int[] expected = new int[]{111111111, 222222222};
        int[] actual = new int[2];
        System.arraycopy(result.hash(kdfContext), 0, actual, 0, 2);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_sYdK0_ggRW0_1() {
        byte[] kdfContext = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        int[] expectedInts = new int[]{0x01020304, 0x05060708, 0x0a0b0c0d};
        byte[] expectedKey = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09, (byte) 0x0a, (byte) 0x0b, (byte) 0x0c, (byte) 0x0d};
        assertArrayEquals(expectedKey, result.hash(expectedKey));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_eXkD0_oPFm0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x9a, (byte) 0xbc, (byte) 0xde, (byte) 0xf0};
        byte[] result = Blake3.hash(data);
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_CCav0_vezQ1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] result = Blake3.hash(data);
        assert result.length == 12;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_OaEw0_ZHqP1_fid1() {
        byte[] blake3 = Blake3.hash(new byte[10]);
        assertArrayEquals(new byte[0], blake3);
    }
}