/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone2_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_vVfx0() throws EncoderException {
        Caverphone2 caverphone2 = new Caverphone2();
        boolean result = caverphone2.isEncodeEqual("hello", "hello");
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_wlQp1_tITR1() throws EncoderException {
        Caverphone2 caverphone2 = new Caverphone2();
        try {
            caverphone2.encode(new Object());
            fail("EncoderException expected");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_hhrG0_egix1() {
        Caverphone2 caverphone2 = new Caverphone2();
        try {
            Object result = caverphone2.encode("test");
            assertNotNull(result);
        } catch (Exception e) {
            fail("EncoderException should not be thrown");
        }
    }
}