/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonByteArray_mFlW2() {
        PercentCodec codec = new PercentCodec();
        Object obj = "test";
        try {
            codec.decode(obj);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.String cannot be Percent decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeObject_AZdm2() {
        PercentCodec codec = new PercentCodec();
        Object obj = new Object();
        try {
            codec.encode(obj);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_ObxF0_xMso0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = null;
        try {
            byte[] result = codec.decode(bytes);
            assertEquals(null, result);
        } catch (DecoderException e) {
            fail("DecoderException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_wvAS0_YQqP0() {
        PercentCodec codec = new PercentCodec();
        try {
            Object result = codec.decode(null);
            assertEquals(null, result);
        } catch (DecoderException e) {
            fail("DecoderException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_wtNL1_ZCIi0() {
        byte[] bytes = new byte[]{1, 2, 3};
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.encode(bytes);
        } catch (EncoderException e) {
            fail("EncoderException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_uHyB0_Axzq0() {
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.decode(null);
            Assertions.assertNull(result);
        } catch (DecoderException e) {
            Assertions.fail("DecoderException was expected to be thrown but was not");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_cWtu1_tdug1() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[0];
        try {
            byte[] result = codec.encode(bytes);
            Assertions.assertArrayEquals(bytes, result);
        } catch (EncoderException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultiByte_kJTK3_bpOd0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'};
        try {
            byte[] result = codec.encode(bytes);
            Assertions.assertArrayEquals(bytes, result);
        } catch (EncoderException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialChars_BeVA5_ePoB0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) '%'}, true);
        byte[] bytes = new byte[]{(byte) 'a', (byte) '%', (byte) 'b'};
        try {
            byte[] result = codec.encode(bytes);
            Assertions.assertArrayEquals(new byte[]{(byte) 'a', (byte) '%', (byte) '2', (byte) '5', (byte) 'b'}, result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAscii_Etom3_FBrc0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "Hello World!".getBytes();
        try {
            byte[] result = codec.encode(bytes);
            Assertions.assertArrayEquals(bytes, result);
        } catch (EncoderException e) {
            throw new AssertionError(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_HENh1_HXDK0() {
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.encode(new byte[0]);
            Assertions.assertArrayEquals(new byte[0], result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown unexpectedly");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAscii_OCHS2_FztL0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "abc".getBytes();
        try {
            byte[] result = codec.decode(bytes);
            Assertions.assertArrayEquals(bytes, result);
        } catch (DecoderException e) {
            Assertions.fail("DecoderException was thrown but not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAscii_KLbv3_mTWn0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "abc".getBytes();
        bytes[0] = (byte) 0x80;
        try {
            byte[] result = codec.encode(bytes);
        } catch (EncoderException e) {
            fail("EncoderException was thrown, but it should not be");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_NzXF1_fiVt0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[0];
        try {
            byte[] result = codec.encode(bytes);
            assert result == bytes;
        } catch (EncoderException e) {
            fail("EncoderException was thrown unexpectedly");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleByte_hUbG2_CmWh0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 65};
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, bytes);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultiByte_xmCz3_UPns0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 65, (byte) 66, (byte) 67};
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, bytes);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_rhvS4_ExoY0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 65}, true);
        byte[] bytes = new byte[]{(byte) 65};
        try {
            byte[] result = codec.encode(bytes);
            assert result.length == 3;
        } catch (EncoderException e) {
            fail("EncoderException was thrown but not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEncode_rdWA3_SCoM0() {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b'}, true);
        byte[] bytes = "abc".getBytes();
        try {
            byte[] result = codec.decode(bytes);
            Assertions.assertArrayEquals(new byte[]{'a', 'b', 'c'}, result);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_kumQ1_xtWW0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[0];
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, bytes);
        } catch (EncoderException e) {
            fail("EncoderException was thrown unexpectedly");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleByte_gfpy2_iOMU0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x20};
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, bytes);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultiByte_HzBl3_trOu0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x20, (byte) 0x30};
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, bytes);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_weoB1_MLIX0() {
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.encode(new byte[0]);
            assert result.length == 0;
        } catch (EncoderException e) {
            fail("EncoderException was thrown unexpectedly");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleByte_GmFf2_TZuP0() {
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.encode(new byte[]{(byte) 'a'});
            assert Arrays.equals(result, new byte[]{(byte) 'a'});
        } catch (EncoderException e) {
            fail("EncoderException was thrown but not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultiByte_mwZZ3_ymZx0() {
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.encode(new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'});
            assert Arrays.equals(result, new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'});
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleByte_iqJO2_uvzP0() {
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.encode(new byte[]{(byte) 0});
            assert Arrays.equals(result, new byte[]{(byte) 0});
        } catch (EncoderException e) {
            fail("EncoderException was thrown unexpectedly");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultipleBytes_wcPV5_TaLs0() {
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.encode(new byte[]{(byte) 0, (byte) 1, (byte) 2});
            assert Arrays.equals(result, new byte[]{(byte) 0, (byte) 1, (byte) 2});
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultiByte_Bomz3_JFbC0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x20, (byte) 0x20, (byte) 0x20};
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, bytes);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_WLYi5_JQTQ0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0x20, (byte) 0x21}, true);
        byte[] bytes = new byte[]{(byte) 0x20, (byte) 0x21};
        try {
            byte[] result = codec.encode(bytes);
            assert Arrays.equals(result, new byte[]{(byte) '%', (byte) '2', (byte) '0', (byte) '%', (byte) '2', (byte) '1'});
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeSingleByte_Sogl1_CSyc0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 'a'};
        try {
            byte[] result = codec.decode(bytes);
            assert result.length == 1;
            assert result[0] == (byte) 'a';
        } catch (DecoderException e) {
            fail("DecoderException was thrown, but it should not");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodePlusForSpace_EavC3_ASzQ0() {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) '+'}, true);
        byte[] bytes = new byte[]{(byte) '+'};
        try {
            byte[] result = codec.decode(bytes);
            assert result.length == 1;
            assert result[0] == (byte) ' ';
        } catch (DecoderException e) {
            fail("DecoderException was not thrown but expected");
        }
    }
}