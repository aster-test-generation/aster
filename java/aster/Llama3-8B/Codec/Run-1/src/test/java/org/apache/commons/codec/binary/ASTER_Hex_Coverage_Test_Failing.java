/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_oiPm0_2() throws EncoderException {
        Hex hex = new Hex();
        String str = "Hello";
        byte[] expected = str.getBytes(hex.getCharset());
        Object result = hex.encode(str);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteBuffer_ROOW1_2() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[]{1, 2, 3});
        Object result = hex.encode(byteBuffer);
        byte[] expected = new byte[]{1, 2, 3};
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_SBwp2_2() throws EncoderException {
        Hex hex = new Hex();
        byte[] byteArray = new byte[]{1, 2, 3};
        Object result = hex.encode(byteArray);
        assertEquals(byteArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteBufferWithoutArray_kNIt4_2() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer byteBuffer = ByteBuffer.allocate(3);
        byteBuffer.put(new byte[]{1, 2, 3});
        byteBuffer.flip();
        Object result = hex.encode(byteBuffer);
        byte[] expected = new byte[]{1, 2, 3};
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_ypEW0() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        String str = "Hello";
        Object object = str;
        Object result = hex.decode(object);
        assertEquals("Hello", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_rdOW1() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        byte[] bytes = "Hello".getBytes();
        Object object = bytes;
        Object result = hex.decode(object);
        assertEquals("Hello", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteBuffer_PljY2() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap("Hello".getBytes());
        Object object = buffer;
        Object result = hex.decode(object);
        assertEquals("Hello", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharArray_Ubwm3() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        char[] chars = "Hello".toCharArray();
        Object object = chars;
        Object result = hex.decode(object);
        assertEquals("Hello", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_abtH5() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        Object object = null;
        try {
            hex.decode(object);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_bHeo0() throws DecoderException {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        byte[] array = new byte[]{(byte) 0x12, (byte) 0x34};
        byte[] result = hex.decode(array);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_lNCT5_uKWa0() throws EncoderException {
        Hex hex = new Hex();
        Object result = hex.encode(new byte[0]);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_oiPm0() throws EncoderException {
        Hex hex = new Hex();
        String str = "Hello";
        byte[] expected = str.getBytes(hex.getCharset());
        Object result = hex.encode(str);
        assertNotNull(result);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteBuffer_ROOW1() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[]{1, 2, 3});
        Object result = hex.encode(byteBuffer);
        assertNotNull(result);
        byte[] expected = new byte[]{1, 2, 3};
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_SBwp2() throws EncoderException {
        Hex hex = new Hex();
        byte[] byteArray = new byte[]{1, 2, 3};
        Object result = hex.encode(byteArray);
        assertNotNull(result);
        assertEquals(byteArray, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteBufferWithoutArray_kNIt4() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer byteBuffer = ByteBuffer.allocate(3);
        byteBuffer.put(new byte[]{1, 2, 3});
        byteBuffer.flip();
        Object result = hex.encode(byteBuffer);
        assertNotNull(result);
        byte[] expected = new byte[]{1, 2, 3};
        assertEquals(expected, result);
    }
}