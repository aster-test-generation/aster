/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Lang_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguageSingleton_MjnC0_ylhD0() {
        Lang lang = Lang.loadFromResource("some language rules resource name", Languages.getInstance("some languages resource name"));
        String result = lang.guessLanguage("some text");
        assertEquals("some language", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguageMultiLanguage_Xevi1_vjdB0() {
        Lang lang = Lang.loadFromResource("languageRulesResourceName", Languages.getInstance("languagesResourceName"));
        String result = lang.guessLanguage("some other text");
        assertEquals("ANY", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoadFromResource_MalformedLine_ERTX4_pUFh0() {
        final String languageRulesResourceName = "malformed_line_resource";
        final Languages languages = Languages.getInstance("language");
        try {
            Lang.loadFromResource(languageRulesResourceName, languages);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoadFromResource_NullResourceName_ymVf7_XAax0() {
        final String languageRulesResourceName = null;
        final Languages languages = Languages.getInstance("language");
        try {
            Lang.loadFromResource(languageRulesResourceName, languages);
            fail("Expected NullPointerException");
        } catch (final NullPointerException e) {
            assertEquals("Expected NullPointerException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoadFromResource_NullResourceName_ymVf7_XAax0_fid3() {
        final String languageRulesResourceName = null;
        final Languages languages = Languages.getInstance("language");
        try {
            Lang.loadFromResource(languageRulesResourceName, languages);
            fail("Expected NullPointerException");
        } catch (final NullPointerException e) {
        }
    }
}