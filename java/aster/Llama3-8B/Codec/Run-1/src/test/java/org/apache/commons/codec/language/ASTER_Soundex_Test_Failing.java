/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Soundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexTwoCharacters_fkfr3() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AB");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexThreeCharacters_Ltzi4() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABC");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexFourCharacters_LxsW5() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCD");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexFiveCharacters_FwPh6() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDE");
        assertEquals("A0000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSixCharacters_ZLJC7() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEF");
        assertEquals("A0000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSevenCharacters_Tmka8() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFG");
        assertEquals("A0000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEightCharacters_MEEH9() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGH");
        assertEquals("A0000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSpecialCaseHW_WrhQ10() {
        Soundex soundex = new Soundex("mapping", true);
        String result = soundex.soundex("Helen");
        assertEquals("H450", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_kOOm1() {
        Soundex soundex = new Soundex("mapping");
        String result = soundex.encode("hello");
        assertEquals("h000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_IrHC2() {
        Soundex soundex = new Soundex("mapping", true);
        String result = soundex.encode("harrison");
        assertEquals("H6550", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_OJeR3() {
        Soundex soundex = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        String result = soundex.encode("mapping");
        assertEquals("M000", result);
    }
}