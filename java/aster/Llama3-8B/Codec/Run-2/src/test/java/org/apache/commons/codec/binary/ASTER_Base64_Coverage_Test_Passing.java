/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base64_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesBitLengthNotMultipleOf8_FbPX0() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] expectedBytes = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] actualBytes = Base64.toIntegerBytes(bigInt);
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expectedBytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesBitLengthMultipleOf8_muTU1() {
        BigInteger bigInt = new BigInteger("1234567890123456788");
        byte[] expectedBytes = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        byte[] actualBytes = Base64.toIntegerBytes(bigInt);
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expectedBytes, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_KpRs0() {
        Base64 base64 = new Base64();
        boolean result = base64.isInAlphabet((byte) 0);
        assert(result);
    }

}