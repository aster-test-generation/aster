/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Md5Crypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_Fazs0() {
        byte[] keyBytes = new byte[16];
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidSalt_lQgN0() {
        String salt = "mySalt";
        String expected = "$apr1$mySalt$nzt3Y9Savbwk1RT13XUUf0";
        String result = Md5Crypt.apr1Crypt("myKey".getBytes(), salt);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_nuls0() {
        byte[] keyBytes = new byte[16];
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt(keyBytes, random);
        assert true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptInvalidSalt_YcMj2() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "invalid";
        String prefix = "$1$";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid salt value: invalid", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptyKey_HJvd3() {
        byte[] keyBytes = "".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = "$1$";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Invalid salt value: salt", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptySalt_dHGH5() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "";
        String prefix = "$1$";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Invalid salt value: ", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptyPrefix_JTkT7() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = "";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(true, true);
        } catch (Exception e) {
            assertEquals("Prefix cannot be empty", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptNullRandom_NYVN8() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = "$1$";
        Random random = null;
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Invalid salt value: salt", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptyRandom_miSK9() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = "$1$";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, new Random());
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Invalid salt value: salt", e.getMessage());
        }
    }
}