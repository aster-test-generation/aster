/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import java.util.Arrays;
import java.util.HashSet;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.HashSet;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PhoneticEngine_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HsTh0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true);
        String result = engine.encode("Hello");
        assertEquals("Hello", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_Rules_ORUl0_hHxc0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 10);
    String result = engine.encode("d'Avraham", Languages.LanguageSet.from(new HashSet<>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("(Avraham)-", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_Rules_cKDg1_DSNt0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 10);
    String result = engine.encode("Avraham", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("Avraham", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_Rules_fyrv2_afbV0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, true, 10);
    String result = engine.encode("Avraham", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("Avraham", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_NoRules_Rwhv3_xFjk0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
    String result = engine.encode("d'Avraham", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("d'Avraham", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_NoRules_neKR4_GLAF0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 10);
    String result = engine.encode("Avraham", Languages.LanguageSet.from(new HashSet<>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("Avraham", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_NoRules_WhCe5_tAus0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
    String result = engine.encode("Avraham", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("Avraham", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_Concatenate_cmBH6_aurY0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 10);
    String result = engine.encode("Avraham ben Yitzchak", Languages.LanguageSet.from(new HashSet<>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("(Avraham ben Yitzchak)-", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_Concatenate_MsPN8_fCmG0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, true, 10);
    String result = engine.encode("Avraham ben Yitzchak", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("Avraham ben Yitzchak", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_Concatenate_YIzp7_PRSU0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 10);
    String result = engine.encode("Avraham ben Yitzchak", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("Avraham ben Yitzchak", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_EmptyInput_xCZr9_HwzX0() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 10);
    String result = engine.encode("", LanguageSet.from(new HashSet<>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HsTh0_fid2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true);
        String result = engine.encode("Ylo|ilo|izo|xilo");
        assertEquals("Ylo|ilo|izo|xilo", result);
    }
}