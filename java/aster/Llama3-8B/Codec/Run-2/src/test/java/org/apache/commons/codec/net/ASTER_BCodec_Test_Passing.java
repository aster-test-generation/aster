/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_PHog0() {
        BCodec codec = new BCodec();
        assertEquals("B", codec.getEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharset_HNVK1() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        assertEquals("B", codec.getEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetAndDecodingPolicy_QVbx2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertEquals("B", codec.getEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetName_UmVF3() {
        BCodec codec = new BCodec("UTF-8");
        assertEquals("B", codec.getEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStrictDecodingStrictPolicy_OTIi0() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    boolean result = codec.isStrictDecoding();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStrictDecodingLenientPolicy_PKwe1() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
    boolean result = codec.isStrictDecoding();
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullBytes_cjcq0() {
        BCodec codec = new BCodec();
        byte[] result = codec.doEncoding(null);
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_MOZw2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        try {
            codec.encode(new Object());
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be encoded using BCodec", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonStringStrictPolicy_RHyN2() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        Object value = new Object();
        try {
            codec.decode(value);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type " + value.getClass().getName() + " cannot be decoded using BCodec", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNullStrictPolicy_wqGZ1_PIKf0() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    try {
        Object result = codec.decode(null);
        assertNull(result);
    } catch (DecoderException e) {
        assertEquals("Cannot decode null value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_oXOg1_hRtM0() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    try {
        Object result = codec.encode(null);
        assertNull(result);
    } catch (EncoderException e) {
        fail("EncoderException was thrown unexpectedly");
    }
}
}