/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.math.BigInteger;
import java.util.Arrays;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base64_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_yAmo0() {
        byte[] pArray = Base64.decodeBase64("AQIDBA==".getBytes());
        BigInteger result = Base64.decodeInteger(pArray);
        assertEquals(BigInteger.valueOf(0), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_xFLG0() {
        byte[] binaryData = "Hello, World!".getBytes();
        String encodedString = Base64.encodeBase64String(binaryData);
        assert encodedString.equals("SGVsbG8sIFdvcmxkIQ==");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_lkDR0() {
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] result = Base64.encodeBase64Chunked(binaryData);
        assert result.length > 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_nivO0() {
        byte[] binaryData = new byte[] {1, 2, 3, 4, 5};
        String expected = "AQIDBAU";
        assertEquals(expected, Base64.encodeBase64URLSafeString(binaryData));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_Jslj0() {
        BigInteger bigInteger = new BigInteger("12345678901234567890");
        byte[] expected = Base64.encodeBase64(Base64.toIntegerBytes(bigInteger), false);
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64Valid_QsAy0() {
        assertTrue(Base64.isBase64("SGVsbG8gd29ybGQ="));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64Invalid_SIUe1() {
        assertTrue(Base64.isBase64("InvalidBase64"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64Empty_QBzI3() {
        assertTrue(Base64.isBase64(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_ijRk0() {
        Base64 base64 = new Base64();
        boolean result = base64.isInAlphabet((byte) 0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_sAqW1() {
        Base64 base64 = new Base64();
        boolean result = base64.isInAlphabet((byte) 123);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet3_cTJe2() {
        Base64 base64 = new Base64();
        boolean result = base64.isInAlphabet((byte) 62);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet4_yNyQ3() {
        Base64 base64 = new Base64();
        boolean result = base64.isInAlphabet((byte) 128);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_IKyE0() {
        byte[] arrayOctet = "SGVsbG8gd29ybGQ=".getBytes();
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64NotBase64_hnAA1() {
        byte[] arrayOctet = "Hello World".getBytes();
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64Empty_hWFo3() {
        byte[] arrayOctet = new byte[0];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_yYAk1() {
        Base64 base64 = new Base64(10, new byte[] {1, 2, 3});
        byte[] expected = new byte[] {1, 2, 3};
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_YrNc2() {
        Base64 base64 = new Base64(10, new byte[] {1, 2, 3}, true);
        byte[] expected = new byte[] {1, 2, 3};
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_XqIq6() {
        Base64 base64 = new Base64(10, new byte[] {1, 2, 3}, true, CodecPolicy.STRICT);
        byte[] expected = new byte[] {1, 2, 3};
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator10_idJT9() {
        Base64 base64 = new Base64(10, new byte[] {1, 2, 3}, true, CodecPolicy.LENIENT);
        byte[] expected = new byte[] {1, 2, 3};
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvalidBase64_fEOb1() {
        byte[] arrayOctet = "HelloWorld".getBytes();
        assertTrue(Base64.isBase64(arrayOctet));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_Glmo0() {
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] expected = Base64.encodeBase64URLSafe(binaryData);
        byte[] actual = Base64.encodeBase64(binaryData, false, true);
        assert Arrays.equals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_PadDefault_ReturnsTrue_aHXj0() {
    boolean result = Base64.isBase64(Base64.PAD_DEFAULT);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_ZjaQ0() {
        Base64 base64 = new Base64(true);
        assertEquals(true, base64.isUrlSafe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe2_IRNK1() {
        Base64 base64 = new Base64(false);
        assertEquals(false, base64.isUrlSafe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_ValidOctet_ReturnsTrue_pNIE1_nzMh0() {
    boolean result = Base64.isBase64(new byte[]{(byte) 65});
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_InvalidOctet_ReturnsFalse_BvJR2_ohww0() {
    boolean result = Base64.isBase64(new byte[] {(byte) 256});
    assert !result;
}
}