/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.BitSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuotedPrintableCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_iOde0() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[] {(byte) 0x61, (byte) 0x62, (byte) 0x63};
        byte[] expected = new byte[] {(byte) 0x61, (byte) 0x62, (byte) 0x63};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_uIbZ0() throws DecoderException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = codec.decode(new byte[] {(byte) 0x68, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x6f});
        byte[] expected = new byte[] {(byte) 72, (byte) 101, (byte) 108, (byte) 108, (byte) 111};
        assert java.util.Arrays.equals(expected, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStrict_xLnE1() throws DecoderException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8, true);
        byte[] bytes = codec.decode(new byte[] {(byte) 0x68, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x6f});
        byte[] expected = new byte[] {(byte) 72, (byte) 101, (byte) 108, (byte) 108, (byte) 111};
        assert java.util.Arrays.equals(expected, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharset_qKjr2() throws DecoderException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        byte[] bytes = codec.decode(new byte[] {(byte) 0x68, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x6f});
        byte[] expected = new byte[] {(byte) 72, (byte) 101, (byte) 108, (byte) 108, (byte) 111};
        assert java.util.Arrays.equals(expected, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableNullPrintable_jffX1() {
    BitSet printable = null;
    byte[] bytes = new byte[1];
    boolean strict = true;
    byte[] result =QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableMultipleBytes_KGGM4() {
    byte[] bytes = new byte[] {(byte) 0x20, (byte) 0x21, (byte) 0x22};
    BitSet printable = new BitSet();
    printable.set(0x20);
    boolean strict = true;
    byte[] result =QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assert result.length == 7;
    assert result[0] == 0x20;
    assert result[1] == 0x20;
    assert result[2] == 0x21;
    assert result[3] == 0x20;
    assert result[4] == 0x22;
    assert result[5] == 0x20;
    assert result[6] == 0x20;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableSingleNonPrintableByte_KfpB5() {
    byte[] bytes = new byte[] {(byte) 0x7F};
    BitSet printable = new BitSet();
    boolean strict = true;
    byte[] result =QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assert result.length == 5;
    assert result[0] == 0x3D;
    assert result[1] == 0x3F;
    assert result[2] == 0x20;
    assert result[3] == 0x20;
    assert result[4] == 0x20;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableMultipleNonPrintableBytes_uwmS6() {
    byte[] bytes = new byte[] {(byte) 0x7F, (byte) 0x80, (byte) 0x81};
    BitSet printable = new BitSet();
    boolean strict = true;
    byte[] result =QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assert result.length == 11;
    assert result[0] == 0x3D;
    assert result[1] == 0x3F;
    assert result[2] == 0x20;
    assert result[3] == 0x20;
    assert result[4] == 0x20;
    assert result[5] == 0x3D;
    assert result[6] == 0x3F;
    assert result[7] == 0x20;
    assert result[8] == 0x20;
    assert result[9] == 0x20;
    assert result[10] == 0x20;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableStrictFalse_eTUQ7() {
    byte[] bytes = new byte[] {(byte) 0x7F, (byte) 0x80, (byte) 0x81};
    BitSet printable = new BitSet();
    boolean strict = false;
    byte[] result =QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assert result.length == 7;
    assert result[0] == 0x3D;
    assert result[1] == 0x3F;
    assert result[2] == 0x20;
    assert result[3] == 0x7F;
    assert result[4] == 0x20;
    assert result[5] == 0x80;
    assert result[6] == 0x81;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_otog0_HnKd0() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] result = codec.encodeQuotedPrintable(null, new byte[0], false);
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_UTeo0_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals("default", codec.getDefaultCharset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithStrict_mhrG4_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        assertEquals("default", codec.getDefaultCharset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableEmptyBytes_oiyc2_fid1() {
    byte[] bytes = new byte[0];
    BitSet printable = new BitSet();
    boolean strict = true;
    byte[] result =QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assert result.length == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableSingleByte_mCPV3() {
    byte[] bytes = new byte[] {(byte) 0x20};
    BitSet printable = new BitSet();
    printable.set(0x20);
    boolean strict = true;
    byte[] result =QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assert result.length == 1;
    assert result[0] == 0x20;
}
}