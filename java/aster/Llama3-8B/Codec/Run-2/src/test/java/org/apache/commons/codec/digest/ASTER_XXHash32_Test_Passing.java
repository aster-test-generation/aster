/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XXHash32_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_pnWK0() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.update(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEmptyArray_PsNo0() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.update(new byte[0], 0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateSmallArray_YEbR1() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.update(new byte[] {1, 2, 3}, 0, 3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLargeArray_rnXZ2() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.update(new byte[1024], 0, 1024);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateArrayWithOffset_SjRK3() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.update(new byte[] {1, 2, 3, 4, 5}, 1, 3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateArrayWithLengthZero_masY4() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.update(new byte[1024], 0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateArrayWithLengthGreaterThanBufferSize_DjhY5() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.update(new byte[2048], 0, 2048);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_aHTy0() {
        XXHash32 xxHash32 = new XXHash32(123);
        xxHash32.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetWithSeed_tyIy1() {
        XXHash32 xxHash32 = new XXHash32();
        xxHash32.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEmpty_OEIE0_AeQf0() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.reset();
    xxHash32.update(new byte[0], 0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdatePartial_wnZi4_emxs0() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.update(new byte[1024], 0, 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLargePartial_uruf5_QrYd0() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.update(new byte[2048], 0, 1024);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateSmall_sBpn1_XKQv0() {
    XXHash32 xxHash32 = new XXHash32();
    xxHash32.update(new byte[4], 0, 4);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_pjHU0_kucn0_fid2() {
    XXHash32 xxHash32 = new XXHash32();
    byte[] buffer = new byte[4];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
    buffer[3] = 4;
    xxHash32.reset();
    xxHash32.update(buffer, 0, 4);
    long result = xxHash32.getValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithSingleByte_BRzF3_ACUP0_fid2() {
    XXHash32 xxHash32 = new XXHash32();
    byte[] buffer = new byte[1];
    buffer[0] = 1;
    xxHash32.reset();
    xxHash32.update(buffer, 0, 1);
    long result = xxHash32.getValue();
}
}