/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base32_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_QZxU0() {
        Base32 base32 = new Base32(0, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        byte octet = 0;
        assertFalse(base32.isInAlphabet(octet));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_pzes1() {
        Base32 base32 = new Base32(0, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        byte octet = 1;
        assertFalse(base32.isInAlphabet(octet));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_YIcO0() {
        Base32 base32 = new Base32(10, new byte[] {1, 2, 3}, true, (byte) 4, CodecPolicy.STRICT);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {1, 2, 3}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_arbJ1() {
        Base32 base32 = new Base32(10, new byte[] {1, 2, 3}, true);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {1, 2, 3}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_kTUh2() {
        Base32 base32 = new Base32(10, new byte[] {1, 2, 3});
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {1, 2, 3}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator9_doJq8() {
        Base32 base32 = new Base32(10, new byte[] {1, 2, 3}, true, (byte) 4);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {1, 2, 3}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator10_zMpA9() {
        Base32 base32 = new Base32(10, new byte[] {1, 2, 3}, true, (byte) 4, CodecPolicy.LENIENT);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {1, 2, 3}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuilder_HhWv0_hfMY0() {
    Base32 builder = new Base32();
    assertNotNull(builder);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet3_DXnd2_Zgke0() {
    Base32 base32 = new Base32(0, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
    byte octet = (byte) 128; // cast int to byte
    assertFalse(base32.isInAlphabet(octet));
}
}