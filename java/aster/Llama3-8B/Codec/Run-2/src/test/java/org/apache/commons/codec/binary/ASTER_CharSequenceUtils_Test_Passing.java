/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CharSequenceUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesSameString_ancv0() {
        assertTrue(CharSequenceUtils.regionMatches("Hello", true, 0, "Hello", 0, 5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesDifferentString_nFZU1() {
        assertFalse(CharSequenceUtils.regionMatches("Hello", true, 0, "World", 0, 5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesSameStringIgnoreCase_drTz2() {
        assertTrue(CharSequenceUtils.regionMatches("Hello", true, 0, "hEllo", 0, 5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesNullString_YxPk4() {
        try {
            CharSequenceUtils.regionMatches(null, true, 0, "Hello", 0, 5);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesNullSubstring_YRvi5() {
        try {
            CharSequenceUtils.regionMatches("Hello", true, 0, null, 0, 5);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesEmptyString_Dybr6() {
        assertTrue(CharSequenceUtils.regionMatches("", true, 0, "", 0, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesEmptySubstring_EXeH7() {
        assertTrue(CharSequenceUtils.regionMatches("Hello", true, 0, "", 0, 0));
    }
}