/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Soundex_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpecialCaseHW_ZVjL1() {
        Soundex soundex = new Soundex("mapping", true);
        Object result = soundex.encode("Harrison");
        assertEquals("H652", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_YxNH0() {
        Soundex soundex = new Soundex();
        String result = soundex.encode("Smith");
        assert result.equals("M000");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_Kymb1() {
        Soundex soundex = new Soundex("mapping");
        String result = soundex.encode("Smith");
        assert result.equals("M000");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_Cdtk2() {
        Soundex soundex = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        String result = soundex.encode("Smith");
        assert result.equals("M000");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexMultiCharacterInput_usfQ3() {
    Soundex soundex = new Soundex();
    String result = soundex.soundex("Smith");
    assertEquals("S135", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexSpecialCaseHW_Nyql4() {
    Soundex soundex = new Soundex("", true);
    String result = soundex.soundex("Helen");
    assertEquals("H450", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexMapIndexOutOfRange_iNMQ7_JzfQ0() {
    Soundex soundex = new Soundex("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    String result = soundex.soundex("test");
    assertEquals("T000", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference_NTPc0_UNQG0() {
    Soundex soundex = new Soundex("mapping");
    try {
        String result = soundex.soundex("abc");
        assertEquals("abc", result);
    } catch (Exception e) {
        fail("Expected no exception, but got " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference2_Ptpf1_trNn0() {
    Soundex soundex = new Soundex("mapping", true);
    try {
        String result = soundex.soundex("abc");
        assertEquals("abc", result);
    } catch (Exception e) {
        fail("Expected no exception, but got " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference_NTPc0_UNQG0_fid1() {
    Soundex soundex = new Soundex("mapping");
    try {
        String result = soundex.soundex("Aap0");
        assertEquals("Aap0", result);
    } catch (Exception e) {
        fail("Expected no exception, but got " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference2_Ptpf1_trNn0_fid1() {
    Soundex soundex = new Soundex("mapping", true);
    try {
        String result = soundex.soundex("Aap0");
        assertEquals("Aap0", result);
    } catch (Exception e) {
        fail("Expected no exception, but got " + e.getMessage());
    }
}
}