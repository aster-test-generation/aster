/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Blake3_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeyedHash_uXka0() {
        byte[] key = new byte[] {1, 2, 3, 4, 5};
        byte[] data = new byte[] {6, 7, 8, 9, 10};
        byte[] expected = new byte[] {11, 12, 13, 14, 15};
        byte[] result = Blake3.keyedHash(key, data);
        assert Arrays.equals(result, expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_gAEr0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        byte[] expected = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] result = Blake3.hash(data);
        assert Arrays.equals(result, expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoFinalize_Cycy0_BZpg0_1() {
    byte[] out = new byte[10];
    byte[] data = new byte[10];
    Blake3 blake3 = Blake3.initKeyDerivationFunction(data);
    blake3.doFinalize(out,-25, out.length);
    assertArrayEquals(data, out);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoFinalize_Cycy0_BZpg0_1_fid1() {
    byte[] out = new byte[10];
    byte[] data = new byte[10];
    Blake3 blake3 = Blake3.initKeyDerivationFunction(data);
    blake3.doFinalize(out, 0, out.length);
    assertArrayEquals(data, out);}
}