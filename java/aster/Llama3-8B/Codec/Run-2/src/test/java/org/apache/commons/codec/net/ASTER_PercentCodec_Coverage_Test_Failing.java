/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PercentCodec_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArrayInput_YLSe2() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec(new byte[0], false);
        byte[] input = new byte[] {(byte) 0x61, (byte) 0x62};
        Object result = codec.decode(input);
        assertEquals(input, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNotNull_UIpN1() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], false);
        Object result = percentCodec.encode("test");
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpaceInput_sCiU3_4() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = "hello world".getBytes();
        byte[] result = codec.encode(input);
        for (byte b : result) {
            if (b == ' ') {
                break;
            }
        }
                assertTrue(result[result.length - 2] == '0');}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEscapeChar_bKxy0() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec(new byte[] { '%' }, true);
        byte[] bytes = codec.decode(new byte[] { (byte) '%' });
        byte[] expected = new byte[] { (byte) '%' };
        assertArrayEquals(expected, bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEscapeCharAndThreeDigits_srwy2() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec(new byte[] { '%' }, true);
        byte[] bytes = codec.decode(new byte[] { (byte) '%', (byte) '1', (byte) '2', (byte) '3' });
        byte[] expected = new byte[] { (byte) 0x123 };
        assertArrayEquals(expected, bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpaceInput_sCiU3_1_fid1() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = "hello world".getBytes();
        byte[] result = codec.encode(input);
        for (byte b : result) {
            if (b == ' ') {
                break;
            }
        }
        assertTrue(result.length > input.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpaceInput_sCiU3_3_fid1() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = "hello world".getBytes();
        byte[] result = codec.encode(input);
        for (byte b : result) {
            if (b == ' ') {
                break;
            }
        }
                assertTrue(result[result.length - 1] == '2');}
}