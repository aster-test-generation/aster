/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash3_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_EnkS0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[] {123456789123456789L, 987654321987654321L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Tail_TRXn1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[] {123456789123456789L, 987654321987654321L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64ShortTail_bnHy2() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[] {123456789123456789L, 987654321987654321L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64VeryShortTail_gptM3() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[] {123456789123456789L, 987654321987654321L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64VeryVeryShortTail_kPGZ4() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[] {123456789123456789L, 987654321987654321L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64ZeroLength_GNkv5() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[] {123456789123456789L, 987654321987654321L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_wbRq0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        int offset = 0;
        int length = 16;
        int seed = 123456789;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Tail_lfpg1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
        int offset = 0;
        int length = 14;
        int seed = 123456789;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64SmallTail_DpQx2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
        int offset = 0;
        int length = 13;
        int seed = 123456789;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64VerySmallTail_toaZ3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        int offset = 0;
        int length = 12;
        int seed = 123456789;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64SingleByteTail_gEKc4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = 1;
        int seed = 123456789;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64EmptyData_ZCIb5() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 123456789;
        long[] expected = new long[]{0x0L, 0x0L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64NullData_HDRF6() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123456789;
        long[] expected = new long[]{0x0L, 0x0L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
}