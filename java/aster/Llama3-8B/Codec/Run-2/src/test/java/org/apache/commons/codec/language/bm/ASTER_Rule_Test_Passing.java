/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Rule_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NonSingleton_LanguageSet_lhtY1() {
    LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1", "lang2")));
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, langs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NonSingleton_GenericNameType_wMXd3() {
    LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1", "lang2")));
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.GENERIC, RuleType.EXACT, langs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NonSingleton_SephardicNameType_qzZj5() {
    LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1", "lang2")));
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.SEPHARDIC, RuleType.EXACT, langs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_NonSingleton_ApproxRuleType_Vhgd7() {
    LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1", "lang2")));
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.APPROX, langs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Generic_Exact_Langs_yFke2_CLrg0() {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    Set<String> langs = new HashSet<>();
    langs.add("lang5");
    langs.add("lang6");
    LanguageSet langsObject = LanguageSet.from(langs);
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langsObject);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Rules_Langs_uwQG3_rjjd0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.RULES;
    Set<String> langs = new HashSet<>();
    langs.add("lang7");
    langs.add("lang8");
    LanguageSet langsObj = LanguageSet.from(langs);
    List<Rule> result = Rule.getInstanceMap(nameType, rt, langsObj).get(nameType.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Generic_Langs_gJSQ0_HWPP0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.EXACT; 
    Set<String> langs = new HashSet<>();
    langs.add("lang1");
    langs.add("lang2");
    LanguageSet langsSet = LanguageSet.from(langs);
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langsSet);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_Approx_Langs_FnBv6_cPRr0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    Set<String> langs = new HashSet<>();
    langs.add("lang13");
    langs.add("lang14");
    LanguageSet langsObj = LanguageSet.from(langs);
    List<Rule> result = Rule.getInstanceMap(nameType, rt, langsObj).get(nameType.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Empty_Langs_gwVk9_bbPy17() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX; 
    Set<String> langs = new HashSet<>();
    LanguageSet langsObj = LanguageSet.from(langs);
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langsObj);
    assertEquals(17, result.size());
}
}