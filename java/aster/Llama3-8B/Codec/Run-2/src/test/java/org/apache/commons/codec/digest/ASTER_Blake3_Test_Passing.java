/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Blake3_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitHash_UvvT0() {
        Blake3 result = Blake3.initHash();
        assertEquals(Blake3.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInitKeyedHashValidKey_VTxB0() {
    byte[] key = new byte[32];
    Blake3 blake3 = Blake3.initKeyedHash(key);
    assertEquals(Blake3.class, blake3.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInitKeyedHashInvalidKey_XtOv1() {
    byte[] key = new byte[31];
    try {
        Blake3 blake3 = Blake3.initKeyedHash(key);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Blake3 keys must be 32 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInitKeyedHashValidInput_GgQF0() {
    byte[] key = new byte[32];
    Blake3 result = Blake3.initKeyedHash(key);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInitKeyedHashInvalidInput_noKc1() {
    byte[] key = new byte[31];
    try {
        Blake3 result = Blake3.initKeyedHash(key);
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_yLil0() {
        byte[] kdfContext = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_TSfZ0_ydHL0() {
    Blake3 blake3 = Blake3.initKeyDerivationFunction(new byte[0]);
    byte[] data = new byte[10];
    blake3.update(data, 0, 10);
    assertSame(blake3, blake3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_tzjP0_HEGV1() {
    byte[] result = Blake3.hash(new byte[]{1, 2, 3, 4, 5});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoFinalize_TpPE0_hiBR0() {
    byte[] kdfContext = new byte[16];
    Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
    byte[] out = new byte[16];
    Blake3 result = blake3.doFinalize(out);
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_dkhL0_TdoJ0() {
    Blake3 blake3 = Blake3.initKeyDerivationFunction(new byte[0]);
    blake3.reset();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoFinalize_Cycy0_BZpg0_2() {
    byte[] out = new byte[10];
    byte[] data = new byte[10];
    Blake3 blake3 = Blake3.initKeyDerivationFunction(data);
    blake3.doFinalize(out, 0, out.length);
    assertSame(blake3, blake3);}
}