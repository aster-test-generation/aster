/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base32_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator5_nyvy4() {
        Base32 base32 = new Base32(10);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet1_QZxU0_fid2() {
        Base32 base32 = new Base32(0, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        byte octet = 0;
        assertTrue(base32.isInAlphabet(octet));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_pzes1_fid2() {
        Base32 base32 = new Base32(0, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        byte octet = 1;
        assertTrue(base32.isInAlphabet(octet));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_KynT3() {
        Base32 base32 = new Base32(true);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator6_ghtt5() {
        Base32 base32 = new Base32((byte) 1);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_WlGs6() {
        Base32 base32 = new Base32(true, (byte) 1);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator8_IMUz7() {
        Base32 base32 = new Base32();
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[] {}, result);
    }
}