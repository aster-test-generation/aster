/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.security.MessageDigest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DigestUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_pYjT0_1() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_pYjT0_2() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertSame(digest, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_khXV0_esgP0_1() throws IOException {
    String data = "Hello, World!";
    byte[] result = DigestUtils.getSha512_256Digest().digest(data.getBytes());
    byte[] expected = DigestUtils.getSha512_256Digest().digest(data.getBytes());
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_khXV0_esgP0_2() throws IOException {
    String data = "Hello, World!";
    byte[] result = DigestUtils.getSha512_256Digest().digest(data.getBytes());
    byte[] expected = DigestUtils.getSha512_256Digest().digest(data.getBytes());
    assertArrayEquals(expected, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testShaHex_Roxp0_lfSN1() throws IOException {
    String expected = "0a0a9f2a6772942557ab5355d76af442f8f65e01";
    byte[] data = "Hello, World!".getBytes();
    String result = DigestUtils.shaHex(data);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_pYjT0() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
        assertSame(digest, result);
    }
}