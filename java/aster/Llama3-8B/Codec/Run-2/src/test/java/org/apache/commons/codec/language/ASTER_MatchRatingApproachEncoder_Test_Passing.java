/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MatchRatingApproachEncoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_sfRl0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeVowels("Hello World");
        assertEquals("Hello World", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowelsWithVowelAsFirstLetter_auWX1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeVowels("Aloha");
        assertEquals("Aloha", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants1_gwlf0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeDoubleConsonants("Hello World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants2_ZnoE1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeDoubleConsonants("Aa");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants3_Zqjk2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeDoubleConsonants("BBbb");
    Assertions.assertEquals("BB", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_dyMW0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.cleanName("John Smith");
        Assertions.assertEquals("JOHNSMITH", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanNameWithSpecialChars_YShu1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.cleanName("Jhn-Smi&th");
        Assertions.assertEquals("JHNSMITH", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccentsNullInput_ySYO0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeAccents(null);
        Assertions.assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccentsEmptyInput_VtEM1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeAccents("");
        Assertions.assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing1_yCDd6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = "abc";
        String name2 = "abc";
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
        Assertions.assertEquals(6, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing2_JTjl1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = "abc";
        String name2 = "def";
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
        Assertions.assertEquals(3, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing6_VCAK5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = "abcd";
        String name2 = "abcd";
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
        Assertions.assertEquals(6, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFirst3Last3ForNameWithLessThan6Characters_BPFs1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.getFirst3Last3("abc");
        assert result.equals("abc");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInvalidObject_klDn1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    Integer invalidObject = 123;
    try {
        encoder.encode(invalidObject);
        fail("EncoderException was not thrown");
    } catch (EncoderException e) {
        assertEquals("Parameter supplied to Match Rating Approach encoder is not of type java.lang.String", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_E_ElkM0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("E");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_a_uXSX1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("a");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_o_syti2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("o");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_i_cyUZ3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("i");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_u_alDs4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("u");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_consonant_zbHa5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("b");
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRatingForSumLengthLessThanOrEqualTo4_MRqm0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int sumLength = 3;
        int result = encoder.getMinRating(sumLength);
        assertEquals(5, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRatingForSumLengthLessThanOrEqualTo7_RzoY1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int sumLength = 6;
        int result = encoder.getMinRating(sumLength);
        assertEquals(4, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRatingForSumLengthLessThanOrEqualTo11_CstW2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int sumLength = 10;
        int result = encoder.getMinRating(sumLength);
        assertEquals(3, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRatingForSumLengthEqualTo12_oOiL3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int sumLength = 12;
        int result = encoder.getMinRating(sumLength);
        assertEquals(2, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRatingForSumLengthGreaterThan12_ypSG4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int sumLength = 15;
        int result = encoder.getMinRating(sumLength);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsNullNames_jlAN0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals(null, null);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsEmptyNames_bBkB1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("", "");
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsSingleCharacterNames_ZIkD2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("a", "a");
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsEqualNames_gpaU3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("abc", "abc");
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsDifferentNames_DQiO4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("abc", "def");
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsSameNamesAfterCleaning_kZNl5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("Abc", "abc");
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsSameNamesAfterRemovingVowels_XnaW6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("Hello", "Hll");
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsSameNamesAfterRemovingDoubleConsonants_yror7() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("bookkeeper", "bkpr");
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsSameNamesAfterGettingFirstAndLastThree_iNDz8() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("abcdefg", "abcd");
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsSameNamesAfterLeftToRightThenRightToLeftProcessing_HCcq10() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("abc", "cba");
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_epaF0() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode(null);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeEmpty_Zhfo1() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeSingleCharacter_WyOk2() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("a");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeValidName_LEJi4() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("John");
    assertEquals("JHN", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNameWithEVowels_Apfe5() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("Eve");
    assertEquals("EV", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNameWithDoubleConsonants_CRrD6() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("Hello");
    assertEquals("HL", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNameWithAVowelsAndDoubleConsonants_iOJI7() {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("Ava");
    assertEquals("AV", result);
}
}