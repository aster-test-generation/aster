/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sha2Crypt_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptRounds_wPuW6() {
        byte[] keyBytes = new byte[32];
        String salt = "mySalt$1000";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(1000, Integer.parseInt(result.substring(9, 13)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptSaltLength_rVzr7() {
        byte[] keyBytes = new byte[32];
        String salt = "mySalt";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(salt.length(), result.length() - 9);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptBase64_mAOi8() {
        byte[] keyBytes = new byte[32];
        String salt = "mySalt";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        Pattern pattern = Pattern.compile("[A-Za-z0-9+/=]{86}");
        Matcher matcher = pattern.matcher(result);
        assertTrue(matcher.matches());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptSaltWithRounds_UAGe3_fqqb1() {
    byte[] keyBytes = new byte[32];
    String salt = "mySalt$1000";
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
    assertEquals("$5$mySalt$1000$", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptBlocksize_SYcS4_SAAx0() {
    byte[] keyBytes = new byte[32];
    String salt = "mySalt";
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
    assertEquals(64, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptValidSalt_Qmbj2_cZYU1() {
    byte[] keyBytes = new byte[32];
    String salt = "mySalt";
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
    assertEquals("$6$" + salt + "$", result.substring(0, 9));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptWhileLoop1_odmg9_yFqL0() {
    byte[] keyBytes = new byte[32];
    String salt = "mySalt";
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
    int cnt = 0;
    for (char c : result.toCharArray()) {
        if (c == '=') {
            cnt++;
        }
    }
    assertEquals(2, cnt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptKeyLength_ENNr5_rvAl0() {
    byte[] keyBytes = new byte[32];
    String salt = "mySalt";
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
    assertEquals(keyBytes.length, (result.length() + 1) / 64);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptWhileLoop2_NieK10_PAgu0() {
    byte[] keyBytes = new byte[32];
    String salt = "mySalt";
    String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
    int cp = 0;
    for (char c : result.toCharArray()) {
        if (c == '=') {
            cp++;
        }
    }
    assertEquals(2, cp);
}
}