/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.DecoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Hex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHexValidInput_HoPb0() {
    char[] data = new char[]{'1', '2', '3', '4', '5', '6'};
    byte[] out = new byte[3];
    int outOffset = 0;
    try {
        int result = Hex.decodeHex(data, out, outOffset);
        assert result == 3;
    } catch (DecoderException e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHexOddNumberCharacters_mXQf1() {
    char[] data = new char[]{'1', '2', '3', '4', '5'};
    byte[] out = new byte[3];
    int outOffset = 0;
    try {
        Hex.decodeHex(data, out, outOffset);
        assert false;
    } catch (DecoderException e) {
        assert e.getMessage().equals("Odd number of characters.");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHexOutputArrayNotLargeEnough_OGmz2() {
    char[] data = new char[]{'1', '2', '3', '4', '5', '6'};
    byte[] out = new byte[2];
    int outOffset = 0;
    try {
        Hex.decodeHex(data, out, outOffset);
        assert false;
    } catch (DecoderException e) {
        assert e.getMessage().equals("Output array is not large enough to accommodate decoded data.");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_QgVr0() {
    Hex hex = new Hex();
    byte[] data = new byte[] {0x12, 0x34, 0x56, 0x78};
    char[] toDigits = new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    char[] result = hex.encodeHex(data, toDigits);
    String expected = "12345678";
    String actual = new String(result);
    Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_aQkx0() {
        String result = Hex.encodeHexString(ByteBuffer.wrap(new byte[]{1, 2, 3}), true);
        assertEquals("010203", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_XYtR0() {
    Hex hex = new Hex();
    byte[] array = new byte[] {1, 2, 3};
    byte[] result = hex.encode(array);
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithCharset_dIdB1() {
    Hex hex = new Hex(Charset.forName("UTF-8"));
    byte[] array = new byte[] {1, 2, 3};
    byte[] result = hex.encode(array);
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithCharsetName_EnIe2() {
    Hex hex = new Hex("UTF-8");
    byte[] array = new byte[] {1, 2, 3};
    byte[] result = hex.encode(array);
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithCharset_xjak0() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("UTF-8", hex.getCharsetName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithString_ivhZ1() {
        Hex hex = new Hex("UTF-8");
        assertEquals("UTF-8", hex.getCharsetName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameDefault_fyat2() {
        Hex hex = new Hex();
        assertEquals("UTF-8", hex.getCharsetName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_mFna0() {
        Hex hex = new Hex();
        String result = hex.encodeHexString(new byte[] {0x12, 0x34, 0x56});
        assertEquals("123456", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_sEji0() {
        Hex hex = new Hex();
        String result = hex.encodeHexString(ByteBuffer.wrap(new byte[]{1, 2, 3}));
        assertEquals("010203", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharset_uJzG0() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        String result = hex.toString();
        assert result.contains("[charsetName=UTF-8]");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharsetName_VoOy1() {
        Hex hex = new Hex("UTF-8");
        String result = hex.toString();
        assert result.contains("[charsetName=UTF-8]");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_HMgz0() {
        byte[] data = "Hello".getBytes(StandardCharsets.UTF_8);
        String result = Hex.encodeHexString(data, true);
        assert result.equals("48656c6c6f");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_biop0() {
    Hex hex = new Hex();
    byte[] data = new byte[] {1, 2, 3};
    char[] out = new char[6];
    int outOffset = 0;
    hex.encodeHex(data, 0, data.length, true, out, outOffset);
    String expected = "010203";
    String actual = new String(out, 0, outOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_cRQk0() {
    byte[] data = new byte[] {0x12, 0x34, 0x56, 0x78};
    char[] toDigits = new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    char[] out = new char[8];
   Hex.encodeHex(data, 0, 4, true, out, 0);
    String expected = "12345678";
    String actual = new String(out);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_Wype0() {
        Hex hex = new Hex();
    assertNull(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharset_Oxbb1() {
        Hex hex = new Hex("UTF-8");
        assertEquals(Charset.forName("UTF-8"), hex.getCharset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetObject_gGer2() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals(Charset.forName("UTF-8"), hex.getCharset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDigitValidCharacter_zVvP0_HaOD0() {
    try {
        int result = Hex.toDigit('a', 0);
        assert result == 10;
    } catch (DecoderException e) {
        assert false;
    }
}
}