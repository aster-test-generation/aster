/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BeiderMorseEncoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxPhonemes_EYFy0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setMaxPhonemes(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType_LLaA0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.APPROX);
        assertEquals(RuleType.APPROX, encoder.getRuleType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleTypeExact_JDZD1() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.EXACT);
        assertEquals(RuleType.EXACT, encoder.getRuleType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_msQP0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        boolean result = encoder.isConcat();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType_xBbl0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        NameType result = beiderMorseEncoder.getNameType();
        assertEquals(NameType.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConcat_boGz0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setConcat(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConcatFalse_UKEH1() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setConcat(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_UnDw0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            Object result = encoder.encode("Hello");
            assertNotNull(result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_Gedw1() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            Object result = encoder.encode(123);
            fail("EncoderException was not thrown");
        } catch (EncoderException e) {
            assertEquals("BeiderMorseEncoder encode parameter is not of type String", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNullSource_TJvt0_WwON0() {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    try {
        String result = encoder.encode(null);
        assertEquals(null, result);
    } catch (EncoderException e) {
        assertEquals("BeiderMorseEncoder encode parameter is not of type String", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeValidSource_LXTE1_HFQn0() {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    String source = "Hello";
    try {
        String result = encoder.encode(source);
    } catch (EncoderException e) {
        fail("EncoderException was thrown but it should not be");
    }
}
}