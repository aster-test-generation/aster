/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Md5Crypt_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_BdPT0() {
        byte[] keyBytes = new byte[16];
        String result = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals("$apr1$v6xCYbTL$Eykh.PAH671k993CaoNdF1", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_zofE0() {
        String result = Md5Crypt.apr1Crypt("test");
        assertEquals("$apr1$Kheuy/2T$5.Loikg6oTmGoSrntJ/h1/", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_afSG0() {
        byte[] keyBytes = "testKey".getBytes();
        String salt = "testSalt";
        String expected = "testExpected";
        String result = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_GblU0() {
        byte[] keyBytes = "testKey".getBytes();
        String salt = "testSalt";
        String prefix = "testPrefix";
        String expected = "hashedValue";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_fwJf2() {
        String salt = null;
        String expected = "$apr1$BUYYZjgk$H5V2IbOyWrYpkZTMsizmR1";
        String result = Md5Crypt.apr1Crypt("myKey".getBytes(), salt);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_dwnu0() {
        String keyBytes = "testKey";
        String salt = "testSalt";
        String expected = "someExpectedResult";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptNullKeyBytes_GZDH1() {
        String keyBytes = null;
        String salt = "testSalt";
        String expected = "someExpectedResult";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptNullSalt_tvwS2() {
        String keyBytes = "testKey";
        String salt = null;
        String expected = "someExpectedResult";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptEmptyKeyBytes_xuOC3() {
        String keyBytes = "";
        String salt = "testSalt";
        String expected = "someExpectedResult";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptEmptySalt_zQWv4() {
        String keyBytes = "testKey";
        String salt = "";
        String expected = "someExpectedResult";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_yZiH0() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("passwordsalt$1$...", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptNullSalt_Knjm1() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = null;
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("$1$wOJ58qpO$0geZCp3U2YhoHHLRKMqB30", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptNullKey_qqCN4() {
        byte[] keyBytes = null;
        String salt = "salt";
        String prefix = "$1$";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Key cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_BdPT0_fid2() {
        byte[] keyBytes = new byte[16];
        String result = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals("expected result", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_zofE0_fid2() {
        String result = Md5Crypt.apr1Crypt("test");
        assertEquals("some expected result", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidSalt_lQgN0_fid2() {
        String salt = "mySalt";
        String expected = "mySalt$1$mySalt$12345678901234567890";
        String result = Md5Crypt.apr1Crypt("myKey".getBytes(), salt);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_fwJf2_fid2() {
        String salt = null;
        String expected = "mySalt$1$mySalt$12345678901234567890";
        String result = Md5Crypt.apr1Crypt("myKey".getBytes(), salt);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptNullSalt_Knjm1_fid2() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = null;
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("passwordsalt$1$...", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptyKey_HJvd3_fid2() {
        byte[] keyBytes = "".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = "$1$";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Key cannot be empty", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptySalt_dHGH5_fid2() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "";
        String prefix = "$1$";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Salt cannot be empty", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptNullPrefix_bfdi6() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = null;
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Prefix cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptyPrefix_JTkT7_fid2() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = "";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Prefix cannot be empty", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptNullRandom_NYVN8_fid2() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = "$1$";
        Random random = null;
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Random cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptyRandom_miSK9_fid2() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "salt";
        String prefix = "$1$";
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, new Random());
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("Random cannot be empty", e.getMessage());
        }
    }
}