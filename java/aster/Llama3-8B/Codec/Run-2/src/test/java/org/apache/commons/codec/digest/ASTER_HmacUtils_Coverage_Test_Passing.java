/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HmacUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_jlkQ0() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        InputStream inputStream = new ByteArrayInputStream(valueToDigest);
        byte[] expectedResult =HmacUtils.hmacSha384(key, inputStream);
        byte[] actualResult =HmacUtils.hmacSha384(key, inputStream);
        assertArrayEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_jmMz0() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        ByteArrayInputStream inputStream = new ByteArrayInputStream(valueToDigest);
        String expected = "digest";
        String actual = HmacUtils.hmacMd5Hex(key, inputStream);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_qksf0() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        InputStream inputStream = new ByteArrayInputStream(valueToDigest);
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_MD5, key).hmac(inputStream);
        byte[] actual = HmacUtils.hmacMd5(key, inputStream);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_esyE0() throws IOException {
        byte[] key = new byte[] {1, 2, 3, 4, 5};
        InputStream valueToDigest = new ByteArrayInputStream(new byte[] {1, 2, 3, 4, 5});
        String expected = "5eb63bbbe01eeed093cb22bb8f5acdc3";
        String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_gsiI0() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        ByteArrayInputStream inputStream = new ByteArrayInputStream(valueToDigest);
        String expected = "expectedHmacSha256Hex";
        String hmacSha256Hex = HmacUtils.hmacSha256Hex(key, inputStream);
        assertEquals(expected, hmacSha256Hex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_zTJF0_1() throws IOException {
        byte[] key = "key".getBytes();
        InputStream valueToDigest = new ByteArrayInputStream("valueToDigest".getBytes());
        byte[] expected =HmacUtils.hmacSha256(key, valueToDigest);
        assertNotNull(expected);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_zTJF0_2() throws IOException {
        byte[] key = "key".getBytes();
        InputStream valueToDigest = new ByteArrayInputStream("valueToDigest".getBytes());
        byte[] expected =HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expected,HmacUtils.hmacSha256(key, valueToDigest));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_OddZ0() throws Exception {
        String key = "myKey";
        String valueToDigest = "myValue";
        byte[] expectedResult =HmacUtils.hmacSha512(key, valueToDigest);
        byte[] actualResult =HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_jPvG0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        InputStream inputStream = new ByteArrayInputStream("valueToDigest".getBytes());
        byte[] result = hmacUtils.hmac(inputStream);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithEmptyInputStream_seeQ2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        byte[] result = hmacUtils.hmac(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithLargeInputStream_iEsA3() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        InputStream inputStream = new ByteArrayInputStream(new byte[1024 * 1024]);
        byte[] result = hmacUtils.hmac(inputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HmacMd5_ueNq0() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HmacSha512_Cxvp1() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HmacAlgorithmNotAvailable_MoGX2() {
        assertFalse(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5)); // This test case will throw NoSuchAlgorithmException
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_kURj0() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        InputStream inputStream = new ByteArrayInputStream(valueToDigest);
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(inputStream);
        byte[] actual = HmacUtils.hmacSha512(key, inputStream);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_coPA0() throws Exception {
        String key = "myKey";
        String valueToDigest = "myValue";
        byte[] expected =HmacUtils.hmacSha256(key, valueToDigest);
        byte[] actual =HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_jRUz0() throws Exception {
        String key = "myKey";
        String valueToDigest = "myValue";
        byte[] expected =HmacUtils.hmacMd5(key, valueToDigest);
        byte[] actual =HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_ywUZ0() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        InputStream inputStream = new ByteArrayInputStream(valueToDigest);
        byte[] expected =HmacUtils.hmacSha1(key, inputStream);
        byte[] actual =HmacUtils.hmacSha1(key, inputStream);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmacNullMac_OgAy0() throws java.io.IOException {
        assertThrows(NullPointerException.class, () -> HmacUtils.updateHmac(null, new ByteArrayInputStream(new byte[0])));
}

}