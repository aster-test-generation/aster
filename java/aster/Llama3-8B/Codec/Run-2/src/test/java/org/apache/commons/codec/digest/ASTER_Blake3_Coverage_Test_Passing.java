///**
// * Generated by Aster
// */
//package org.apache.commons.codec.digest;
//import java.util.Arrays;
//import java.util.Objects;
//import org.apache.commons.codec.language.SoundexUtils;
//import org.apache.commons.codec.language.Caverphone2;
//import org.apache.commons.codec.cli.Digest;
//import org.apache.commons.codec.language.Nysiis;
//import org.apache.commons.codec.Decoder;
//import org.apache.commons.codec.CodecPolicy;
//import org.apache.commons.codec.language.Caverphone;
//import org.apache.commons.codec.language.Metaphone;
//import org.apache.commons.codec.net.BCodec;
//
//import org.apache.commons.codec.digest.DigestUtils;
//import org.apache.commons.codec.StringEncoder;
//import org.apache.commons.codec.binary.Base16InputStream;
//import org.apache.commons.codec.binary.BinaryCodec;
//import org.apache.commons.codec.digest.Md5Crypt;
//import org.apache.commons.codec.net.PercentCodec;
//import org.apache.commons.codec.language.bm.Rule;
//import org.apache.commons.codec.binary.Base64OutputStream;
//import org.apache.commons.codec.BinaryEncoder;
//import org.apache.commons.codec.digest.XXHash32;
//import org.apache.commons.codec.binary.Base16OutputStream;
//import org.apache.commons.codec.net.URLCodec;
//import org.apache.commons.codec.binary.CharSequenceUtils;
//import org.apache.commons.codec.binary.BaseNCodecInputStream;
//import org.apache.commons.codec.binary.BaseNCodecOutputStream;
//import org.apache.commons.codec.digest.PureJavaCrc32;
//import org.apache.commons.codec.language.Soundex;
//import org.apache.commons.codec.net.QuotedPrintableCodec;
//import org.apache.commons.codec.language.bm.PhoneticEngine;
//import org.apache.commons.codec.binary.Base32OutputStream;
//import org.apache.commons.codec.binary.Base64InputStream;
//import org.apache.commons.codec.binary.BaseNCodec;
//import org.apache.commons.codec.digest.HmacAlgorithms;
//import org.apache.commons.codec.digest.Sha2Crypt;
//import org.apache.commons.codec.binary.Base32InputStream;
//import org.apache.commons.codec.language.RefinedSoundex;
//import org.apache.commons.codec.net.Utils;
//import org.apache.commons.codec.BinaryDecoder;
//import org.apache.commons.codec.binary.Base32;
//import org.apache.commons.codec.binary.Base16;
//import org.apache.commons.codec.digest.MurmurHash3;
//import org.apache.commons.codec.language.Caverphone1;
//import org.apache.commons.codec.StringDecoder;
//import org.apache.commons.codec.language.DoubleMetaphone;
//import org.apache.commons.codec.binary.Base64;
//import org.apache.commons.codec.digest.UnixCrypt;
//import org.apache.commons.codec.digest.HmacUtils;
//import org.apache.commons.codec.CharEncoding;
//import org.apache.commons.codec.EncoderException;
//import org.apache.commons.codec.binary.Hex;
//import org.apache.commons.codec.digest.B64;
//import org.apache.commons.codec.StringEncoderComparator;
//import org.apache.commons.codec.language.ColognePhonetic;
//import org.apache.commons.codec.language.bm.Lang;
//import org.apache.commons.codec.language.MatchRatingApproachEncoder;
//import org.apache.commons.codec.language.bm.Languages;
//import org.apache.commons.codec.language.bm.NameType;
//import org.apache.commons.codec.digest.Crypt;
//import org.apache.commons.codec.digest.MessageDigestAlgorithms;
//import org.apache.commons.codec.Charsets;
//import org.apache.commons.codec.language.bm.RuleType;
//import org.apache.commons.codec.net.QCodec;
//import org.apache.commons.codec.Resources;
//import org.apache.commons.codec.language.DaitchMokotoffSoundex;
//import org.apache.commons.codec.digest.MurmurHash2;
//import org.apache.commons.codec.language.bm.ResourceConstants;
//import org.apache.commons.codec.DecoderException;
//import org.apache.commons.codec.Encoder;
//import org.apache.commons.codec.language.bm.BeiderMorseEncoder;
//import org.apache.commons.codec.digest.PureJavaCrc32C;
//import org.apache.commons.codec.digest.Blake3;
//import org.apache.commons.codec.binary.StringUtils;
//import org.apache.commons.codec.language.AbstractCaverphone;
//import static org.junit.jupiter.api.Assertions.*;
//import java.util.*;
//import org.junit.jupiter.api.*;
//import java.util.concurrent.TimeUnit;
//import static org.mockito.Mockito.when;
//import static org.mockito.Mockito.*;
//import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
//import static org.junit.jupiter.api.Assertions.*;
//import java.util.*;
//import org.junit.jupiter.api.*;
//import java.util.concurrent.TimeUnit;
//import static org.mockito.Mockito.when;
//import static org.mockito.Mockito.*;
//import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
//public class Aster_Blake3_Coverage_Test_Passing {
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testDoFinalizeNegativeBytes_Xhig0() {
//        Blake3 blake3 = new Blake3();
//        try {
//            blake3.doFinalize(-1);
//            fail("Expected IllegalArgumentException");
//        } catch (IllegalArgumentException e) {
//            assertEquals("Requested bytes must be non-negative", e.getMessage());
//        }
//}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testDoFinalizePositiveBytes_qouj1_1() {
//        Blake3 blake3 = new Blake3();
//        byte[] hash = blake3.doFinalize(10);
//        assertNotNull(hash);}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testDoFinalizePositiveBytes_qouj1_2() {
//        Blake3 blake3 = new Blake3();
//        byte[] hash = blake3.doFinalize(10);
//        assertEquals(10, hash.length);}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testUpdateNegativeLength_fekf0() {
//        Blake3 blake3 = new Blake3();
//        byte[] in = new byte[10];
//        blake3.update(in, 0, -1);
//        fail("Expected IndexOutOfBoundsException");
//}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testUpdateLengthGreaterThanBufferLength_rMlz1() {
//        Blake3 blake3 = new Blake3();
//        byte[] in = new byte[10];
//        blake3.update(in, 0, 11);
//        fail("Expected IndexOutOfBoundsException");
//}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testUpdateOffsetGreaterThanBufferLength_ugHk2() {
//        Blake3 blake3 = new Blake3();
//        byte[] in = new byte[10];
//        blake3.update(in, 10, 1);
//        fail("Expected IndexOutOfBoundsException");
//}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testUpdateValidInput_LhiY3() {
//        Blake3 blake3 = new Blake3();
//        byte[] in = new byte[10];
//        blake3.update(in, 0, 5);
//        assertSame(blake3, blake3);
//    }
//}