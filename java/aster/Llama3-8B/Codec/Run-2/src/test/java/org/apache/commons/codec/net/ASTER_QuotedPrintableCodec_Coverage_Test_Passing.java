/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.io.UnsupportedEncodingException;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuotedPrintableCodec_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArrayInput_OHsY1() throws org.apache.commons.codec.EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] byteArray = new byte[] {1, 2, 3};
        Object result = codec.encode(byteArray);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringInput_XPBP2() throws org.apache.commons.codec.EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String str = "Hello, World!";
        Object result = codec.encode(str);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonStringNonByteArrayInput_YGrH3() throws org.apache.commons.codec.EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Integer obj = 123;
        try {
            codec.encode(obj);
            assert false; // This line should be reached
        } catch (EncoderException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonStringNonByteArrayInput2_bJnS4() throws org.apache.commons.codec.EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Double obj = 3.14;
        try {
            codec.encode(obj);
            assert false; // This line should be reached
        } catch (EncoderException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonStringNonByteArrayInput3_sTjy5() throws org.apache.commons.codec.EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Float obj = 3.14f;
        try {
            codec.encode(obj);
            assert false; // This line should be reached
        } catch (EncoderException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullSourceStr_SkXI0() throws java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode(null, "UTF-8");
        assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptySourceStr_mJXt1() throws java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode("", "UTF-8");
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidSourceStr_ukxk2() throws java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String result = codec.encode(sourceStr, "UTF-8");
        assertEquals("Hello, World!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableNullInput_gcBR0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = null;
        byte[] expected = null;
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableEmptyInput_psse1() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableSingleByte_xZcL2() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[] {(byte) 0x61};
        byte[] expected = new byte[] {(byte) 0x61};
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableEscapeCharTwoDigits_Zajn6() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[] {(byte) 0x3D, (byte) 0x31, (byte) 0x32};
        byte[] expected = new byte[] {(byte) 0x12};
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSourceStrWithNonAsciiChars_UGgn3_fid1() throws java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, ";
        String result = codec.encode(sourceStr, "UTF-8");
        assertEquals("Hello, ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSourceStrWithNonAsciiCharsAndSpecialChars_EHnd5_fid1() throws java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, !@#";
        String result = codec.encode(sourceStr, "UTF-8");
        assertEquals("Hello, !@#", result);
    }
}