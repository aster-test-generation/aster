/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash2_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_RAAs0() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        long result = MurmurHash2.hash64(data, data.length);
        assertEquals(0x1234567890abcdefL, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_QAVD0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        int length = data.length;
        int expected = 0x12345678;
        int result = MurmurHash2.hash32(data, length);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_XURU0() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int length = 4;
        int seed = 0;
        int expected = 0x12345678;
        assertEquals(expected, MurmurHash2.hash32(data, length, seed));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32WithRemainingBytes_IJlq1_mFJl0() {
    byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
    int length = 5;
    int seed = 0;
    int expected = 0x12345678;
    assertEquals(expected, MurmurHash2.hash32(data, length, seed));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_hwPE1_fid1() {
        assertEquals(12345, MurmurHash2.hash32("HelloWorld", 0, 5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_NUno0_fid1() {
        assertEquals(1234567890L, MurmurHash2.hash64("HelloWorld", 0, 5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_BgRt1_fid1() {
        assertEquals(123456789, MurmurHash2.hash32("HelloWorld"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_Efwt0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        long result = MurmurHash2.hash64(data, data.length, 0);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithRemainingBytes_DueR1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        long result = MurmurHash2.hash64(data, data.length, 0);
        assertEquals(0, result);
    }
}