/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RefinedSoundex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeString_BElT0() {
    RefinedSoundex soundex = new RefinedSoundex();
    Object result = soundex.encode("test");
    assert result instanceof String;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNonString_UYEK1() {
    RefinedSoundex soundex = new RefinedSoundex();
    try {
        soundex.encode(123);
        assert false;
    } catch (EncoderException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNullInput_nTuJ0() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex(null);
        Assertions.assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmptyInput_jMGD1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("");
        Assertions.assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNonAlphabetInput_IaXh5() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("123");
        Assertions.assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeForLetter_NReV0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        char result = refinedSoundex.getMappingCode('A');
        assert result == 'A';
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeForNonLetter_QbbQ1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        char result = refinedSoundex.getMappingCode('1');
        assert result == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeForValidIndex_lAvI3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        char result = refinedSoundex.getMappingCode('B');
        assert result == 'B';
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_UNJS0_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.encode("John");
        assertEquals("J408", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_ifhT1_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.encode("Smith");
        assertEquals("S38060", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_MwNC2_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.encode("JohnDoe");
        assertEquals("J40860", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSingleCharacterInput_APlH2_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("a");
        Assertions.assertEquals("A0", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMultiCharacterInput_EaSM3_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("Smith");
        Assertions.assertEquals("S38060", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSpecialCharacterInput_hYRq4_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("Smith$");
        Assertions.assertEquals("S38060", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference_DQvs0_LBJD0() {
    RefinedSoundex soundex = new RefinedSoundex("mapping");
    try {
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference3_pjGz2_xASE0() {
    RefinedSoundex soundex = new RefinedSoundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
    try {
        assertEquals('m', soundex.getMappingCode('a'));
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference2_UJYW1_RiiV0() {
    RefinedSoundex soundex = new RefinedSoundex();
    try {
        assertEquals('0', soundex.getMappingCode('a'));
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
}