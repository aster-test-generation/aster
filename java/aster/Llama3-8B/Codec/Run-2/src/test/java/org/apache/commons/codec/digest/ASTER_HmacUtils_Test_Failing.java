/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.nio.ByteBuffer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HmacUtils_Test_Failing {
private static String bytesToHex(byte[] bytes) {
    StringBuilder result = new StringBuilder();
    for (byte b : bytes) {
        result.append(String.format("%02x", b));
    }
    return result.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_uJqH0() {
        String key = "testKey";
        String valueToDigest = "testValue";
        byte[] expected = new byte[] {1, 2, 3, 4, 5};
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex2_MTdx1() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "myKey");
        String result = hmacUtils.hmacHex("Hello, World!");
        assertEquals("aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex4_cWlE3() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "myKey".getBytes());
        String result = hmacUtils.hmacHex("Hello, World!");
        assertEquals("aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac_IuEQ0_dBCF0() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "myKey".getBytes());
    ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[16]);
    byteBuffer.putShort((short) 1);
    byteBuffer.putShort((short) 2);
    byteBuffer.putShort((short) 3);
    byteBuffer.putShort((short) 4);
    byteBuffer.putShort((short) 5);
    byteBuffer.putShort((short) 6);
    byteBuffer.putShort((short) 7);
    byteBuffer.putShort((short) 8);
    byteBuffer.putShort((short) 9);
    byteBuffer.putShort((short) 10);
    byteBuffer.putShort((short) 11);
    byteBuffer.putShort((short) 12);
    byteBuffer.putShort((short) 13);
    byteBuffer.putShort((short) 14);
    byteBuffer.putShort((short) 15);
    byteBuffer.putShort((short) 16);
    byteBuffer.flip();
    byte[] hmac = hmacUtils.hmac(byteBuffer.array());
    assert hmac.length == 32;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac3_sMoi2_eeYO0_2() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "myKey".getBytes());
    byte[] hmac = hmacUtils.hmac("Hello, World!".getBytes());
    byte[] expectedHmac = DigestUtils.sha256("Hello, World!".getBytes());
    assertArrayEquals(expectedHmac, hmac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_QRVC0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedHexResult", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNotAvailableHmacNone_plJh6_fid1() {
    boolean result = HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_RLXa0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "myKey".getBytes());
        String result = hmacUtils.hmacHex("Hello, World!");
        assertEquals("aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_iokq2_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "myKey");
        String result = hmacUtils.hmacHex("Hello, World!");
        assertEquals("aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_alWa0_fid1() {
    String key = "myKey";
    String valueToDigest = "myValue";
    String expectedResult = "9f86d081..."; // expected result
    String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    assertEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_uGSp0_fid1() {
    String key = "myKey";
    String valueToDigest = "myValue";
    String expected = "expectedHash";
    String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1Hex_dAjO0_fid1() {
    String key = "mykey";
    byte[] valueToDigest = "myvalue".getBytes();
    String expected = "a5fb5dc1f7a4f5e5a5f5e5a5f5e5a5f5e5a5f5e5a5f5e5a";
    String result = HmacUtils.hmacSha1Hex(key.getBytes(), valueToDigest);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_SVxW0_fid1() {
        String result = HmacUtils.hmacMd5Hex("key".getBytes(), "valueToDigest".getBytes());
        assertEquals("expectedHexResult", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1Hex_QCBW0_fid1() {
    String key = "myKey";
    String valueToDigest = "myValue";
    String expected = "someExpectedHash";
    String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_RefQ0_fid1() {
    byte[] key = "key".getBytes();
    byte[] valueToDigest = "value".getBytes();
    String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
    assertEquals("expected result", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_MRwG0_fid1() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        String expected = "digest";
        String result = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_hfbX0_fid1() {
        String key = "mykey";
        String valueToDigest = "myvalue";
        String expected = "someexpectedhash";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_kgnK0_fid1() {
        String key = "myKey";
        String valueToDigest = "myValue";
        String expected = "someExpectedHash";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512Hex_QEJG0_fid1() {
    byte[] key = new byte[] {1, 2, 3, 4, 5};
    byte[] valueToDigest = new byte[] {6, 7, 8, 9, 10};
    String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
    assertEquals("some expected result", result);
}
}