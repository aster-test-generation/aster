/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.binary.StringUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DigestUtils_Test_Failing {
    private byte[] getExpectedSha3_512() throws IOException, NoSuchAlgorithmException {
        return new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    }
    private byte[] getExpectedSha3_256() {
        return new byte[] {1, 2, 3, 4, 5};
    }
    private MessageDigest getExpectedSha512_224Digest() throws NoSuchAlgorithmException {
        return MessageDigest.getInstance("SHA-512/224");
    }
    private byte[] getExpectedMd2(byte[] data) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD2");
        return md.digest(data);
    }
    private MessageDigest getMd2Digest() throws NoSuchAlgorithmException {
        return MessageDigest.getInstance("MD2");
    }
    private byte[] sha3_512(MessageDigest digest, byte[] data) {
        digest.update(data);
        return digest.digest();
    }
    private byte[] digest(MessageDigest digest, byte[] data) throws IOException {
        digest.update(data);
        byte[] hashBytes = digest.digest();
        return hashBytes;
    }
    private byte[] getExpectedSha3_224() {
        return new byte[0];
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_nvLI0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        File data = new File("path_to_your_file");
        byte[] expectedDigest = messageDigest.digest();
        byte[] actualDigest = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expectedDigest, actualDigest);
        assertNotNull(actualDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_hcuS0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, World!";
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotNull(result);
        byte[] expected = messageDigest.digest(StringUtils.getBytesUtf8(valueToDigest));
        byte[] actual = result.digest();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_dsIS0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        DigestUtils digestUtils = new DigestUtils(digest);
        String result = DigestUtils.sha1Hex("Hello World");
        assertEquals("aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_cZgF0() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] result = digestUtils.digest(new File("path_to_your_file"));
        assertNotNull(result);
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDigest_olaO0() throws NoSuchAlgorithmException {
    String algorithm = "SHA-256";
    MessageDigest result = DigestUtils.getDigest(algorithm);
    MessageDigest expected = MessageDigest.getInstance(algorithm);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_KSzc0() {
        MessageDigest expected = DigestUtils.getSha1Digest();
        MessageDigest actual = DigestUtils.getShaDigest();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_MPPs0() {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNull_zEOg2() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = null;
        byte[] result = digestUtils.digest(data);
        assertNotNull(result);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestEmpty_WJcr3() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.wrap(new byte[0]);
        byte[] result = digestUtils.digest(data);
        assertNotNull(result);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_qVtK0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-1");
            byte[] data = digest.digest("Hello, World!".getBytes());
            String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
            String result = DigestUtils.shaHex(data);
            assert result.equals(expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateDigestWithNullDigest_ifju1() throws IOException {
    RandomAccessFile data = new RandomAccessFile("test.txt", "r");
    try {
        DigestUtils.updateDigest(null, data);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("digest", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_pWhp0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = DigestUtils.shaHex(data);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_ajti0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        String expected = "a2a2";
        assertEquals(expected, DigestUtils.md2Hex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_xXgD0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA3-384");
            byte[] data = digest.digest("Hello, World!".getBytes());
            String result = DigestUtils.sha3_384Hex(data);
            System.out.println("sha3_384Hex(" + Hex.encodeHexString(data) + ")");
            assert result.equals(Hex.encodeHexString(data));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_JAwE0() {
        try {
            MessageDigest md = MessageDigest.getInstance("MD2");
            String data = "Hello";
            String expected = "90eab5736e4d7d3e";
            String result = DigestUtils.md2Hex(data);
            assertEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_peTq0() {
        String data = "Hello, World!";
        String expected = "a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4";
        assertEquals(expected, DigestUtils.sha512_256Hex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_HAQu0() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        DigestUtils digestUtils = new DigestUtils(digest);
        String result = DigestUtils.sha384Hex("Test String");
        assertEquals("e4d909c290d0fb1ca068ffaddf22cbd0", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_tfzH0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-512");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = DigestUtils.sha512_224(data);
            byte[] expected = digest.digest(data);
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_EXvL0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = "Hello World".getBytes();
        byte[] hash = digest.digest(data);
        String expected = "e4d909c290d0fb1ca068ffaddf22cbd50d74e1ad81e72ea1a9" +
                "9f92bf5f9309015dfe09d9f76e6f7d2f6e35746a43a6bd" +
                "8ac1fcbb71bea0312ed156b227f7f6bc1e619f680dc13" +
                "8dfa08a1b77f00d2b17d4c69b5f4c5a9d6f6e9b2f98" +
                "9d8eef93b6c6fcd6e99f0feef0f72f8e1b93b4ea7f5" +
                "9f93b6c6fcd6e99f0feef0f72f8e1b93b4ea7f5";
        String result = DigestUtils.sha512Hex(data);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_AoCA0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = DigestUtils.sha3_256(data);
            assert Arrays.equals(digest.digest(data), result);
        } catch (NoSuchAlgorithmException e) {
            assert false;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_Eoni0() throws NoSuchAlgorithmException {
        String data = "Hello World";
        String expected = "5d41402abc4b2a76b9719d911017c592";
        String result = DigestUtils.md5Hex(data);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_BCSt0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        byte[] digest = messageDigest.digest(data);
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        assertEquals(expected, DigestUtils.sha1Hex(digest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_DndU0() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        byte[] data = "Hello, World!".getBytes();
        String expected = "5d41402abc4b2a76b9719d911017c592";
        assertEquals(expected, DigestUtils.md5Hex(messageDigest.digest(data)));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_qGdB0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-512");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = digest.digest(data);
            byte[] result = DigestUtils.sha512_256(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDigest_BHrW0() throws NoSuchAlgorithmException {
    MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
    MessageDigest actual = DigestUtils.getDigest("SHA-256", defaultMessageDigest);
    assertEquals(actual, defaultMessageDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_wQWb0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        digestUtils = new DigestUtils(messageDigest);
        ByteBuffer data = ByteBuffer.wrap(new byte[] {1, 2, 3, 4, 5});
        String expected = "31a9f6c7a5a4a3b2a1";
        assertEquals(expected, digestUtils.digestAsHex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex2_HoNX1() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.wrap(new byte[] {1, 2, 3, 4, 5});
        String expected = "31a9f6c7a5a4a3b2a1";
        assertEquals(expected, digestUtils.digestAsHex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex3_hxpB2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.wrap(new byte[] {1, 2, 3, 4, 5});
        String expected = "31a9f6c7a5a4a3b2a1";
        assertEquals(expected, digestUtils.digestAsHex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_cwRs0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-384");
            byte[] data = "Test String".getBytes();
            byte[] digest = messageDigest.digest(data);
            String expected = "e4d909c290d0fb1ca068ffaddf22cbd50dfe2342e8a270d660133f4f1a61afa7d";
            assertEquals(expected, DigestUtils.sha384Hex(digest));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_RgOP0() {
        String data = "Hello, World!";
        String expected = "30e4a5c9f4e4a5c9f4e4a5c9f4e4a5c9";
        String result = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_CHjg0() {
        DigestUtils digestUtils = new DigestUtils();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            byte[] data = "Hello World".getBytes();
            byte[] digest = messageDigest.digest(data);
            String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
            assertEquals(expected, digestUtils.digestAsHex(digest));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithDigestUtils_sdmj2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "Hello World".getBytes();
        byte[] digest = digestUtils.digest(data);
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        assertEquals(expected, digestUtils.digestAsHex(digest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_ZtcH0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA3-224");
        byte[] data = "Hello, World!".getBytes();
        String expected = "9f86d08184c7d659a2feaa0c55ad9a1a";
        String result = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Null_wCaI2() {
        InputStream data = null;
        try {
            DigestUtils.sha3_384(data);
        } catch (IOException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_nvLI0_1() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        File data = new File("path_to_your_file");
        byte[] expectedDigest = messageDigest.digest();
        byte[] actualDigest = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expectedDigest, actualDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_nvLI0_2() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        File data = new File("path_to_your_file");
        byte[] expectedDigest = messageDigest.digest();
        byte[] actualDigest = DigestUtils.digest(messageDigest, data);
        assertNotNull(actualDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_hcuS0_2() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, World!";
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        byte[] expected = messageDigest.digest(StringUtils.getBytesUtf8(valueToDigest));
        byte[] actual = result.digest();
        assertArrayEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_cZgF0_1() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] result = digestUtils.digest(new File("path_to_your_file"));
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_cZgF0_2() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] result = digestUtils.digest(new File("path_to_your_file"));
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        assertArrayEquals(expected, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNull_zEOg2_1() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = null;
        byte[] result = digestUtils.digest(data);
        byte[] expected = new byte[0];
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestNull_zEOg2_2() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = null;
        byte[] result = digestUtils.digest(data);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestEmpty_WJcr3_1() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.wrap(new byte[0]);
        byte[] result = digestUtils.digest(data);
        byte[] expected = new byte[0];
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestEmpty_WJcr3_2() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.wrap(new byte[0]);
        byte[] result = digestUtils.digest(data);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224Hex_KANq0_bUVs0() {
    try {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        digest.update("Test String".getBytes());
        byte[] hashBytes = digest.digest();
        String expected = Hex.encodeHexString(hashBytes);
        assertEquals(expected, DigestUtils.sha1Hex("Test String"));
    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Null_uinI1_GqRW1() {
    String data = null;
    try {
        DigestUtils.sha256(data);
        assert false;
    } catch (NullPointerException e) {
        assert e != null;
        fail("Expected NullPointerException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256Hex_uYZP0_moWN0() {
    try {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        digest.update("Hello, World!".getBytes());
        byte[] data = digest.digest();
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        assertEquals(expected, Hex.encodeHexString(data));
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateDigestWithInvalidDigestAlgorithm_qJiU5_uzoX0() throws IOException {
    String algorithm = "InvalidAlgorithm";
    try {
        MessageDigest digest = MessageDigest.getInstance(algorithm);
        DigestUtils.digest(digest, new FileInputStream("test.txt"));
        fail("Expected NoSuchAlgorithmException");
    } catch (NoSuchAlgorithmException e) {
        assertEquals(algorithm, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateDigestWithInvalidDigestAlgorithm_qJiU5_uzoX0_fid2() throws IOException {
    String algorithm = "InvalidAlgorithm MessageDigest not available";
    try {
        MessageDigest digest = MessageDigest.getInstance(algorithm);
        DigestUtils.digest(digest, new FileInputStream("test.txt"));
        fail("Expected NoSuchAlgorithmException");
    } catch (NoSuchAlgorithmException e) {
        assertEquals(algorithm, e.getMessage());
    }
}
}