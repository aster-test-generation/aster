/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import java.util.Arrays;
import java.util.HashSet;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.HashSet;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PhoneticEngine_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLang_qDfu0() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        Lang lang = phoneticEngine.getLang();
        assertEquals(phoneticEngine.getLang(), lang);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_WlzQ0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.EXACT;
        boolean concatenate = true;
        int maxPhonemes = 10;
        PhoneticEngine phoneticEngine = new PhoneticEngine(nameType, ruleType, concatenate, maxPhonemes);
        RuleType result = phoneticEngine.getRuleType();
        assert result == RuleType.EXACT;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleTypeWithoutMaxPhonemes_nSMu1() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.APPROX;
        boolean concatenate = false;
        PhoneticEngine phoneticEngine = new PhoneticEngine(nameType, ruleType, concatenate);
        RuleType result = phoneticEngine.getRuleType();
        assert result == RuleType.APPROX;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes_Phuk0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 5);
        assertEquals(5, engine.getMaxPhonemes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_upNz0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        boolean result = engine.isConcat();
        assert result == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType_OhwA0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 10);
        assertEquals(NameType.ASHKENAZI, engine.getNameType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Sephardic_NoRules_Rwhv3_xFjk0_fid2() {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
    String result = engine.encode("", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Ashkenazi_NoRules_neKR4_GLAF0_fid2() {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 10);
    String result = engine.encode("", Languages.LanguageSet.from(new HashSet<>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Generic_NoRules_WhCe5_tAus0_fid2() {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true, 10);
    String result = engine.encode("", LanguageSet.from(new HashSet<String>(Arrays.asList("hebrew"))));
    Assertions.assertEquals("", result);
}
}