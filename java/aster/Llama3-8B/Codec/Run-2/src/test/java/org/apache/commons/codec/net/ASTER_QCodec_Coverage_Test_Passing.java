/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.DecoderException;
import java.io.UnsupportedEncodingException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QCodec_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_DCaf0() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "testString";
        UnsupportedEncodingException e = new UnsupportedEncodingException("test exception");
        try {
            qCodec.decode(str);
            fail("DecoderException should be thrown");
        } catch (DecoderException ex) {
            assertEquals("test exception", ex.getMessage());
            assertEquals(e, ex.getCause());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithoutUnsupportedEncodingException_yyQq1() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "testString";
        String result = qCodec.decode(str);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithSpace_IgbO0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[] {(byte) 32}; // ASCII value of space
        byte[] expected = new byte[] {(byte) 5}; // ASCII value of underscore
        byte[] result = qCodec.doEncoding(bytes);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_pqCi0() throws DecoderException {
        QCodec qCodec = new QCodec();
        Object obj = null;
        Object result = qCodec.decode(obj);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonString_QLeP1() throws DecoderException {
        QCodec qCodec = new QCodec();
        Object obj = new Object();
        try {
            qCodec.decode(obj);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type " + obj.getClass().getName() + " cannot be decoded using Q codec", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_tSBY2() throws DecoderException {
        QCodec qCodec = new QCodec();
        String obj = "test";
        Object result = qCodec.decode(obj);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyString_DSGA3() throws DecoderException {
        QCodec qCodec = new QCodec();
        String obj = "";
        Object result = qCodec.decode(obj);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_VMWF0() throws EncoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.encode(null);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_RCdC1() throws EncoderException {
        QCodec qCodec = new QCodec();
        Object obj = new Object();
        try {
            qCodec.encode(obj);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type " + obj.getClass().getName() + " cannot be encoded using Q codec", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_rCYx2() throws EncoderException {
        QCodec qCodec = new QCodec();
        String str = "Hello, World!";
        Object result = qCodec.encode(str);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_FHqa0() throws EncoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String result = qCodec.encode(sourceStr);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedCharset_CYIf0() throws EncoderException {
        QCodec qCodec = new QCodec();
        try {
            qCodec.encode("test", "unsupported-charset");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Unsupported charset: unsupported-charset", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedCharsetWithMessage_nSBz1() throws EncoderException {
        QCodec qCodec = new QCodec();
        try {
            qCodec.encode("test", "unsupported-charset-with-message");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Unsupported charset: unsupported-charset-with-message", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullInput_Kuxx0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doDecoding(null);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyInput_oojC1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doDecoding(new byte[0]);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNoUnderscores_Pjgl2() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] input = new byte[] {1, 2, 3};
        byte[] result = qCodec.doDecoding(input);
        byte[] expected = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOneByteInput_fWKw11() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] input = new byte[] {1};
        byte[] result = qCodec.doDecoding(input);
        byte[] expected = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
    }
}