/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Crypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_teBh0() {
        byte[] keyBytes = new byte[0];
        String result = Crypt.crypt(keyBytes);
    assertNull(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_OWGn0() {
        String key = "testKey";
        String salt = "testSalt";
        String result = Crypt.crypt(key, salt);
        System.out.println("Crypt.crypt(key, salt)");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithSha512Salt_ZEnS1() {
        byte[] keyBytes = new byte[16];
        String salt = Sha2Crypt.SHA512_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertEquals(Sha2Crypt.sha512Crypt(keyBytes, salt), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSha256Salt_EhdN2() {
        byte[] keyBytes = new byte[16];
        String salt = Sha2Crypt.SHA256_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertEquals(Sha2Crypt.sha256Crypt(keyBytes, salt), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithMd5Salt_gsGK3() {
        byte[] keyBytes = new byte[16];
        String salt = Md5Crypt.MD5_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertEquals(Md5Crypt.md5Crypt(keyBytes, salt), result);
    }
}