/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Rule_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_yNcW0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.EXACT;
    String lang = "en";
    List<Rule> result =Rule.getInstance(nameType, rt, lang);
    assertEquals(result.size(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Ashkenazi_Generic_Hebrew_OeGX0() {
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, "Hebrew");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Sephardic_Approx_Yiddish_fLMc1() {
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.SEPHARDIC, RuleType.APPROX, "Yiddish");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Singleton_LanguageSet_GIhA0() {
    LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1")));
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, langs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Singleton_GenericNameType_zzxk2() {
    LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1")));
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.GENERIC, RuleType.EXACT, langs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Singleton_SephardicNameType_VDKE4() {
    LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1")));
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.SEPHARDIC, RuleType.EXACT, langs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Singleton_ApproxRuleType_Kvcm6() {
    LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("lang1")));
    Map<String, List<Rule>> result =Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.APPROX, langs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Empty_Langs_gwVk9_bbPy0() {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX; 
    Set<String> langs = new HashSet<>();
    LanguageSet langsObj = LanguageSet.from(langs);
    Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, rt, langsObj);
    assertEquals(0, result.size());
}
}