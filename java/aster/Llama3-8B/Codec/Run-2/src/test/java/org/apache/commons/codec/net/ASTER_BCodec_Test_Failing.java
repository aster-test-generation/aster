/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_xULH0_kFYW0() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    String value = "Hello World";
    try {
        String result = codec.decode(value);
        assertEquals(value, result);
    } catch (DecoderException e) {
        fail("DecoderException was thrown but not expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MEBX0_yZLf0() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"));
    try {
        String result = codec.encode("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", "UTF-8");
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", result);
    } catch (EncoderException e) {
        fail("EncoderException was thrown unexpectedly");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeString_YEdk0_CDvQ0() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    try {
        Object result = codec.encode("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=");
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", result);
    } catch (EncoderException e) {
        fail("EncoderException was thrown unexpectedly");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeStringStrictPolicy_ugII0_vhca0() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    String value = "Hello World";
    try {
        Object result = codec.decode(value);
        assertEquals(value, result);
    } catch (DecoderException e) {
        fail("DecoderException was thrown but not expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_zXHO0_eclR0() {
    BCodec codec = new BCodec("UTF-8");
    try {
        String result = codec.encode("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=");
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", result);
    } catch (EncoderException e) {
        fail("EncoderException was thrown unexpectedly");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MEBX0_yZLf0_fid2() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"));
    try {
        String result = codec.encode("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", result);
    } catch (EncoderException e) {
        fail("EncoderException was thrown unexpectedly");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeString_YEdk0_CDvQ0_fid2() {
    BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
    try {
        Object result = codec.encode("Hello, World!");
        assertEquals("Hello, World!", result);
    } catch (EncoderException e) {
        fail("EncoderException was thrown unexpectedly");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_zXHO0_eclR0_fid2() {
    BCodec codec = new BCodec("UTF-8");
    try {
        String result = codec.encode("Hello, World!");
        assertEquals("Hello, World!", result);
    } catch (EncoderException e) {
        fail("EncoderException was thrown unexpectedly");
    }
}
}