/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import javax.crypto.Mac;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HmacUtils_Test_Passing {
private static String bytesToHex(byte[] bytes) {
    StringBuilder result = new StringBuilder();
    for (byte b : bytes) {
        result.append(String.format("%02x", b));
    }
    return result.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha256_jnLi0() {
    byte[] key = new byte[] {1, 2, 3, 4, 5};
    Mac hmac = HmacUtils.getHmacSha256(key);
    assertNotNull(hmac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacMd5_NfNu0() {
    boolean result = HmacUtils.isAvailable("HmacMD5");
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha1_KbqF1() {
    boolean result = HmacUtils.isAvailable("HmacSHA1");
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha224_BgTf2() {
    boolean result = HmacUtils.isAvailable("HmacSHA224");
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha256_eGbX3() {
    boolean result = HmacUtils.isAvailable("HmacSHA256");
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha384_vZxE4() {
    boolean result = HmacUtils.isAvailable("HmacSHA384");
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha512_XIQI5() {
    boolean result = HmacUtils.isAvailable("HmacSHA512");
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableInvalidAlgorithm_APyw6() {
    boolean result = HmacUtils.isAvailable("InvalidAlgorithm");
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512_BOIx0() {
    byte[] key = "key".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
    assert result.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_QRVC0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_abdk0() {
    byte[] key = "key".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha384(key, valueToDigest);
    assert result.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha384_vciV0() {
    byte[] key = new byte[] {1, 2, 3, 4, 5, 6};
    Mac hmac = HmacUtils.getHmacSha384(key);
    assertNotNull(hmac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacMd5_UEWb0() {
    boolean result = HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha1_knPI1() {
    boolean result = HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_1);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha224_MiUt2() {
    boolean result = HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_224);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha256_mgYC3() {
    boolean result = HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha384_yfao4() {
    boolean result = HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_384);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableHmacSha512_YBku5() {
    boolean result = HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_SqRM0() {
    String key = "testKey";
    String valueToDigest = "testValue";
    byte[] expected =HmacUtils.hmacSha384(key, valueToDigest);
    assert Arrays.equals(expected, expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_RLXa0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "myKey".getBytes());
        String result = hmacUtils.hmacHex("Hello, World!");
        assertEquals("2c400ee5ce2190ebe2080130e40ef48291b8934b1ee481225660eea7b93aaa61", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_iokq2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "myKey");
        String result = hmacUtils.hmacHex("Hello, World!");
        assertEquals("2c400ee5ce2190ebe2080130e40ef48291b8934b1ee481225660eea7b93aaa61", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_alWa0() {
    String key = "myKey";
    String valueToDigest = "myValue";
    String expectedResult = "9f86d081..."; // expected result
    String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha1_WhcM1() {
    byte[] key = new byte[] {1, 2, 3, 4, 5};
    Mac hmac = HmacUtils.getHmacSha1(key);
    assertNotNull(hmac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_uGSp0() {
    String key = "myKey";
    String valueToDigest = "myValue";
    String expected = "fc83f5087956214a0c98831ae615c060345b21f3e9c6a36aaf7e34ad4e6bbfc116edaf6f120d0e7a7e73d31ed57b0012";
    String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha512_qloj0() {
    byte[] key = new byte[] {1, 2, 3, 4, 5};
    Mac hmac = HmacUtils.getHmacSha512(key);
    assertNotNull(hmac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1Hex_dAjO0() {
    String key = "mykey";
    byte[] valueToDigest = "myvalue".getBytes();
    String expected = "e54cd0b1d624548a5cde6926f53eafd6458a4b67";
    String result = HmacUtils.hmacSha1Hex(key.getBytes(), valueToDigest);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_SVxW0() {
        String result = HmacUtils.hmacMd5Hex("key".getBytes(), "valueToDigest".getBytes());
        assertEquals("05e7be9b69af4228bf184965ba4d9cca", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1Hex_QCBW0() {
    String key = "myKey";
    String valueToDigest = "myValue";
    String expected = "someExpectedHash";
    String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_RefQ0() {
    byte[] key = "key".getBytes();
    byte[] valueToDigest = "value".getBytes();
    String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_MRwG0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        String expected = "90fbfcf15e74a36b89dbdb2a721d9aecffdfdddc5c83e27f7592594f71932481";
        String result = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMac_HmacMd5_ByteArray_ZcKi0() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, new byte[] {1, 2, 3});
    Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_MD5, new byte[] {1, 2, 3});
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_Lqrz0() {
    byte[] key = "key".getBytes();
    byte[] valueToDigest = "valueToDigest".getBytes();
    byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_hfbX0() {
        String key = "mykey";
        String valueToDigest = "myvalue";
        String expected = "a2cd0f8daeda188672614ef0b4eef92614b1916554437a2fb16735150a352ea45f5702f88eb480649c880dcebaf31d312dc8a99ea78bc1719715c09830042525";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacMd5_qmGh0() {
    byte[] key = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
    Mac hmac = HmacUtils.getHmacMd5(key);
    assertNotNull(hmac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_kgnK0() {
        String key = "myKey";
        String valueToDigest = "myValue";
        String expected = "bb7dc468984a17a1b2258e1041577bf145da345e80ffb61caa805faabec091e4";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_emhJ0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected =HmacUtils.hmacMd5(key, valueToDigest);
        byte[] actual = HmacUtils.hmacMd5(key, valueToDigest);
        assert Arrays.equals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithValidParameters_lHGC0() {
    byte[] key = "key".getBytes();
    String algorithm = "HmacSHA256";
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithNullKey_cetY1() {
    String algorithm = "HmacSHA256";
    try {
        HmacUtils.getInitializedMac(algorithm, null);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Null key", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha512Hex_QEJG0() {
    byte[] key = new byte[] {1, 2, 3, 4, 5};
    byte[] valueToDigest = new byte[] {6, 7, 8, 9, 10};
    String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmac3_sMoi2_eeYO0_1() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "myKey".getBytes());
    byte[] hmac = hmacUtils.hmac("Hello, World!".getBytes());
    byte[] expectedHmac = DigestUtils.sha256("Hello, World!".getBytes());
    assertNotNull(hmac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_FFpb0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected =HmacUtils.hmacSha256(key, valueToDigest);
        byte[] actual = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }
}