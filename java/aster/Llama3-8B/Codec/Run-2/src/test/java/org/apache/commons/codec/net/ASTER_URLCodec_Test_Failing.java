/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.util.BitSet;
import org.apache.commons.codec.DecoderException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.BitSet;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_URLCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_wkKX1() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] bytes = null;
        byte[] result = urlCodec.encode(bytes);
        byte[] expected = new byte[0];
        assert Arrays.equals(result, expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlSingleByte_XPiL3() {
        byte[] bytes = new byte[1];
        bytes[0] = 'a';
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result.length == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlMultipleBytes_pTOl4() {
        byte[] bytes = new byte[2];
        bytes[0] = 'a';
        bytes[1] = 'b';
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result.length == 4;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlUrlSafeByte_wlwa6() {
        byte[] bytes = new byte[1];
        bytes[0] = ' ';
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assert result.length == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_DcaD0_arnV1() {
    URLCodec urlCodec = new URLCodec();
    byte[] result = urlCodec.encodeUrl(null, new byte[0]);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_fFBy0_Yzig0() {
    URLCodec urlCodec = new URLCodec("UTF-8");
    byte[] bytes = "Hello World".getBytes();
    byte[] result = urlCodec.encodeUrl(null, bytes);
    byte[] expected = new byte[]{(byte) 72, (byte) 101, (byte) 108, (byte) 108, (byte) 111, (byte) 32, (byte) 87, (byte) 111, (byte) 114, (byte) 108, (byte) 100};
    assert Arrays.equals(result, expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeUrlNonUrlSafeByte_Dxhb5_XUBr0() {
    byte[] bytes = new byte[1];
    bytes[0] = (byte)0x80;
    BitSet urlsafe = new BitSet();
    byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
    assert result.length == 5;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeUrlEncodedInput_CgsB3_DvLg0() {
    try {
        byte[] result = URLCodec.encodeUrl(null, new byte[] {(byte) '%', (byte) '2', (byte) '3', (byte) '4'});
        assertArrayEquals(new byte[] {(byte) '2', (byte) '3', (byte) '4'}, result);
    } catch (Exception e) {
        fail("DecoderException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingDefault_NuiV1() {
        URLCodec codec = new URLCodec();
        String encoding = codec.getEncoding();
        assertEquals("", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetNoParam_XaTg1() {
        URLCodec codec = new URLCodec();
        String result = codec.getDefaultCharset();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_PVlz0_udTJ1_fid1() {
    URLCodec urlCodec = new URLCodec();
    byte[] result = URLCodec.encodeUrl(null, new byte[0]);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeUrlNullInput_NJJy0_TwXS0() {
    try {
        byte[] result = URLCodec.decodeUrl(null);
        assertArrayEquals(new byte[0], result);
    } catch (DecoderException e) {
        assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(null));
    }
}
}