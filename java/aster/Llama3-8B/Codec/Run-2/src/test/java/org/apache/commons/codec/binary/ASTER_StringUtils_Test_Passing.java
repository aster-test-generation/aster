/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_StringUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8NullBytes_DIfT0() {
        String result = StringUtils.newStringUtf8(null);
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16NullInput_zAgF0() {
        byte[] result = StringUtils.getBytesUtf16(null);
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16NonNullInput_BzFV1() {
        byte[] result = StringUtils.getBytesUtf16("Test String");
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16EmptyInput_Ggjn2() {
        byte[] result = StringUtils.getBytesUtf16("");
        assert result.length == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_wYpk0() {
        String string = "Hello, World!";
        byte[] result = StringUtils.getBytesIso8859_1(string);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_oiix0() {
        byte[] result = StringUtils.getBytesUtf16Le("test");
        byte[] expected = "test".getBytes(StandardCharsets.UTF_16LE);
        assert Arrays.equals(result, expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16NullBytes_pflG0() {
        String result = StringUtils.newStringUtf16(null);
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteBufferUtf8NullInput_ZTLN0() {
    String string = null;
    ByteBuffer result = StringUtils.getByteBufferUtf8(string);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteBufferUtf8NonNullInput_OcNb1() {
    String string = "Hello, World!";
    ByteBuffer result = StringUtils.getByteBufferUtf8(string);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_HJfY0() {
        String string = "Hello, World!";
        byte[] result = StringUtils.getBytesUtf16Be(string);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16BeNull_xNEK1() {
        String string = null;
        byte[] result = StringUtils.getBytesUtf16Be(string);
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16BeEmpty_XmQv2() {
        String string = "";
        byte[] result = StringUtils.getBytesUtf16Be(string);
        assert result.length == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_flXi0() {
        byte[] bytes = "Hello, World!".getBytes();
        String result = StringUtils.newStringIso8859_1(bytes);
        assert result.equals("Hello, World!");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNullAndNull_Dwvo0() {
        assertTrue(StringUtils.equals(null, null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNullAndNonNull_AhyE1() {
        assertFalse(StringUtils.equals(null, "test"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNonNullAndNull_GQoi2() {
        assertFalse(StringUtils.equals("test", null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameString_FlQe3() {
        assertTrue(StringUtils.equals("test", "test"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentString_qSgZ4() {
        assertFalse(StringUtils.equals("test", "different"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameCharSequence_LYyP5() {
        assertTrue(StringUtils.equals(new StringBuilder("test"), new StringBuilder("test")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentCharSequence_duQG6() {
        assertFalse(StringUtils.equals(new StringBuilder("test"), new StringBuilder("different")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameCharSequenceWithDifferentImplementation_aHTr7() {
        assertTrue(StringUtils.equals(new StringBuilder("test"), new String("test")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentCharSequenceWithDifferentImplementation_BLnH8() {
        assertFalse(StringUtils.equals(new StringBuilder("test"), new String("different")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_aOkg0() {
        String input = "Hello";
        byte[] expected = "Hello".getBytes(StandardCharsets.US_ASCII);
        byte[] result = StringUtils.getBytesUsAscii(input);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringValidInput_YJRe0() {
    byte[] bytes = "Hello".getBytes();
    String charsetName = "UTF-8";
    String result = StringUtils.newString(bytes, charsetName);
    assertEquals("Hello", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUncheckedNullString_oybQ0() {
    String string = null;
    String charsetName = "UTF-8";
    byte[] result = StringUtils.getBytesUnchecked(string, charsetName);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUncheckedValidString_BqQs1() {
    String string = "Hello, World!";
    String charsetName = "UTF-8";
    byte[] result = StringUtils.getBytesUnchecked(string, charsetName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_Plpd0() {
        String string = "Hello, World!";
        byte[] result = StringUtils.getBytesUtf8(string);
        byte[] expected = string.getBytes(StandardCharsets.UTF_8);
        assert Arrays.equals(result, expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8Null_rHzM1() {
        String string = null;
        byte[] result = StringUtils.getBytesUtf8(string);
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_UJPy0() {
        byte[] bytes = "Hello".getBytes();
        String result = StringUtils.newStringUsAscii(bytes);
        assertEquals("Hello", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAsciiNull_qHaD1() {
        byte[] bytes = null;
        String result = StringUtils.newStringUsAscii(bytes);
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16BeNull_OjIS1() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf16Be(bytes);
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16BeEmpty_aIkq2() {
        byte[] bytes = new byte[0];
        String result = StringUtils.newStringUtf16Be(bytes);
        assertEquals("", result);
    }
}