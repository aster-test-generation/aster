/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash3_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128NegativeOffset_IVsV6() {
        byte[] data = new byte[] {(byte) 0x12};
        int offset = -1;
        int length = data.length;
        int seed = 12345;
        try {
            MurmurHash3.hash128(data, offset, length, seed);
            assert false;
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32NullString_INod2_rygE0() {
    assertEquals(0, MurmurHash3.hash128(null, 0, 0, 0)[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_pmKn0_fid1() {
        byte[] data = "test".getBytes();
        int length = data.length;
        int seed = 123;
        int result = MurmurHash3.hash32(data, length, seed);
        assertEquals(293269098, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_doGj1_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        int result = MurmurHash3.hash32(data);
        assertEquals(616850763, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_mLbk0_fid1() {
        assertEquals(652013681, MurmurHash3.hash32("HelloWorld"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32EmptyString_llpo1_fid1() {
        assertEquals(-965378730, MurmurHash3.hash32(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_cPGa0_fid1() {
        assertEquals(695282569, MurmurHash3.hash32(1L, 2L));
    }
}