/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnixCrypt_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_fTmj0() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03};
        String expected = "01 02 03";
        String result = UnixCrypt.crypt(original);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_Eoyp0() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_Tssm1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "Invalid salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_fbdJ2() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_cUku3() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKey_IkMu4() {
        byte[] original = new byte[16];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortKey_LdqL5() {
        byte[] original = new byte[4];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithEmptyKey_gnZK6() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithNullKey_VPok7() {
        byte[] original = null;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndSalt_gfLA8() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt123");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptNullSalt_haLe0() {
    byte[] original = new byte[0];
    String result = UnixCrypt.crypt(original, null);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptInvalidSalt_nMJc1() {
    byte[] original = new byte[0];
    String result = UnixCrypt.crypt(original, "invalid");
    assertEquals("Invalid salt value: invalid", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_sAgI1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "InvalidSalt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_sUQg2() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_wRqX3() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKey_qYRD4() {
        byte[] original = new byte[16];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortKey_HxxW5() {
        byte[] original = new byte[4];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithEmptyKey_bSEt6() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithNullKey_ZAfI7() {
        byte[] original = null;
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithZeroKey_gVvI8() {
        byte[] original = new byte[0];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) 0;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_aFdn1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "Invalid salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt2_efvb3() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt2");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt3_bJJf4() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt3");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt4_DEVn5() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt4");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt5_ORMQ6() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt5");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt6_mSmi7() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt6");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt7_OanT8() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt7");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt8_GcVc9() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt8");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_mpLP0() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, null);
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_iGwj1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "Invalid salt");
        assertEquals("Invalid salt value: Invalid salt", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_oyTa2() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt2_Vizy3() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt2");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt3_mvvY4() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt3");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt4_vvDP5() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt4");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt5_UNyN6() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt5");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt6_JTuP7() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt6");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt7_ESGf8() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt7");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt8_qOzQ9() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt8");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt9_snAm10() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt9");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_inHS0() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String salt = "salt";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_nHoI1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String actual = UnixCrypt.crypt(original, null);
        assertEquals("             ", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_iBvX2() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String salt = "invalid";
        try {
            UnixCrypt.crypt(original, salt);
            assertEquals(false, true);
        } catch (IllegalArgumentException e) {
            assertEquals(true, true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_iYSB3() {
        byte[] original = new byte[0];
        String salt = "salt";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_eNQN4() {
        byte[] original = new byte[] {(byte) 0x01};
        String salt = "salt";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_ofuB5() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        String salt = "salt";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndSchedule_jzIN4() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswap_lPMB5() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswapAndOut_dqeX6() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        int[] out = new int[2];
        for (int i = 0; i < out.length; i++) {
            out[i] = i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswapAndOutAndB_rClP7() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        int[] out = new int[2];
        for (int i = 0; i < out.length; i++) {
            out[i] = i;
        }
        byte[] b = new byte[9];
        for (int i = 0; i < b.length; i++) {
            b[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_CFaH0() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String salt = "salt";
        String expected = "             ";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_OiNp3() {
        byte[] original = new byte[0];
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_uSzV4() {
        byte[] original = new byte[] {(byte) 0x01};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_XRdo5() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithNull_aufq6() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x00, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithZero_ARZe7() {
        byte[] original = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithOne_ZnoH8() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithAll_Dilo9() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09, (byte) 0x0a, (byte) 0x0b, (byte) 0x0c, (byte) 0x0d, (byte) 0x0e, (byte) 0x0f};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("             ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_fTmj0_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03};
        String expected = "rNFCG5NAudRyA";
        String result = UnixCrypt.crypt(original);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_Eoyp0_fid1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("rYYU3nHJe/OtM", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_mpLP0_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, null);
        assertEquals("QIQopY7hGsJVo", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_nHoI1_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String actual = UnixCrypt.crypt(original, null);
        assertEquals("XAIBsEAzux9bs", actual);
    }
}