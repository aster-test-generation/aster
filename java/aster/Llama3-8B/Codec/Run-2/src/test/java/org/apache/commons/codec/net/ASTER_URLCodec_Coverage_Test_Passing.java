/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.io.UnsupportedEncodingException;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_URLCodec_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNullString_sLVc0() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode(null, "UTF-8");
        Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyString_fNeh1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("", "UTF-8");
        Assertions.assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeValidString_xHNF2() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("Hello, World!", "UTF-8");
        Assertions.assertEquals("Hello, World!", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeValidString_DSab2() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("Hello World");
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonStringNonByteArrayInput_TBcV1() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        Object obj = new Object();
        try {
            urlCodec.encode(obj);
            Assertions.fail("Expected EncoderException");
        } catch (EncoderException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArrayInput_jtlO2() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] byteArray = new byte[] {1, 2, 3};
        Object result = urlCodec.encode(byteArray);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringInput_eBHM3() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World!";
        Object result = urlCodec.encode(str);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullString_ahHs0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode(null, "UTF-8");
        assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidString_SpWM1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World!";
        String result = urlCodec.encode(str, "UTF-8");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyString_xTkM1() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode("");
        Assertions.assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidString_hgbl2() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode("Hello, World!");
        Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_RGWO0() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        Object obj = null;
        Object result = urlCodec.decode(obj);
        Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_dAQx2() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] byteArray = new byte[] {1, 2, 3};
        Object obj = byteArray;
        Object result = urlCodec.decode(obj);
        Assertions.assertArrayEquals(byteArray, (byte[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_nnDv3() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String str = "Hello, World!";
        Object obj = str;
        Object result = urlCodec.decode(obj);
        Assertions.assertEquals(str, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlNullInput_RpHo0() throws DecoderException {
        byte[] bytes = null;
        byte[] expected = null;
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEmptyInput_ckQH1() throws DecoderException {
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlSingleByteInput_RdcG2() throws DecoderException {
        byte[] bytes = new byte[] {(byte) 'a'};
        byte[] expected = new byte[] {(byte) 'a'};
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlPlusInput_jpPV3() throws DecoderException {
        byte[] bytes = new byte[] {(byte) '+'};
        byte[] expected = new byte[] {(byte) ' '};
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlMultipleBytesInput_cBKa6() throws DecoderException {
        byte[] bytes = new byte[] {(byte) 'a', (byte) 'b', (byte) '+'};
        byte[] expected = new byte[] {(byte) 'a', (byte) 'b', (byte) ' '};
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullInput_jxmh0_eEnb1() throws UnsupportedEncodingException {
    URLCodec urlCodec = new URLCodec();
    String result = urlCodec.encode(null, "UTF-8");
    Assertions.assertNull(result);
}
}