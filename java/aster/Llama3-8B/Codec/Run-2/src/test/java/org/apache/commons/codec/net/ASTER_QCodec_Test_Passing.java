/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_ZoNy0() {
        QCodec qCodec = new QCodec();
        String encoding = qCodec.getEncoding();
        assertEquals("Q", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharset_tuBt1() {
        QCodec qCodec = new QCodec("UTF-8");
        String encoding = qCodec.getEncoding();
        assertEquals("Q", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetInstance_VgUE2() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String encoding = qCodec.getEncoding();
        assertEquals("Q", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_AcmW2() {
        QCodec qCodec = new QCodec();
        try {
            qCodec.decode(new Object());
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be decoded using Q codec", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeObject_QlGg2() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.encode(new Object());
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be encoded using Q codec", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanksTrue_DSYC0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        assertTrue(qCodec.isEncodeBlanks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanksFalse_Vkmp1() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        assertFalse(qCodec.isEncodeBlanks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNullBytes_hWbM0() {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(null);
        assertArrayEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingEmptyBytes_pCAw1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[0];
        byte[] result = qCodec.doEncoding(bytes);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithBlanks_pCjZ4() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[] {(byte) 32};
        byte[] result = qCodec.doEncoding(bytes);
        byte[] expected = new byte[] {(byte) 95};
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_BfUv0_nxbi0() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = "Hello, World!";
    String result = qCodec.encode(sourceStr, StandardCharsets.UTF_8);
    System.out.println("qCodec.encode(sourceStr) {\n" +
            "    return new QCodec().encode(sourceStr, getCharset());\n" +
            "}");
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_KANT1_RqCv0() {
    QCodec qCodec = new QCodec("UTF-8");
    try {
        String result = qCodec.encode(null, "UTF-8");
        assertNull(result);
    } catch (EncoderException e) {
        fail("Should not throw EncoderException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingSingleByte_TRtR2_fid1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[] {(byte) 65};
        byte[] result = qCodec.doEncoding(bytes);
        byte[] expected = new byte[] {(byte)65};
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_Losy0_fid1() {
        QCodec qCodec = new QCodec();
        assertFalse(qCodec.isEncodeBlanks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharset_YEJC1_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        assertFalse(qCodec.isEncodeBlanks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharsetObject_Nohe2_fid1() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertFalse(qCodec.isEncodeBlanks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_mONj0_yCJG0_fid1() throws EncoderException {
    QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
    String result = qCodec.encode("Hello, World!", Charset.forName("UTF-8"));
    System.out.println("qCodec.encode(\"Hello, World!\", Charset.forName(\"UTF-8\"))");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_LcSv0_eHLM0_fid1() {
    QCodec qCodec = new QCodec("UTF-8");
    try {
        String result = qCodec.encode("Hello, World!", "UTF-8");
    } catch (EncoderException e) {
        fail("EncoderException should not be thrown");
    }
}
}