/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Languages_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Ashkenazi_xcIH0() {
    Languages languages = Languages.getInstance(NameType.ASHKENAZI);
    assertEquals(Languages.class, languages.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Generic_hBnb1() {
    Languages languages = Languages.getInstance(NameType.GENERIC);
    assertEquals(Languages.class, languages.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_Sephardic_JfBe2() {
    Languages languages = Languages.getInstance(NameType.SEPHARDIC);
    assertEquals(Languages.class, languages.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNullResourceName_aOLQ1() {
        final String languagesResourceName = null;
        try {
            Languages.getInstance(languagesResourceName);
            assert false;
        } catch (NullPointerException e) {
    assertNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceWithInvalidResourceName_ymVc3_Gffq0() {
    final String languagesResourceName = "invalidResourceName";
    try {
        Languages.getInstance(languagesResourceName);
        assert false;
    } catch (Exception e) {
        assertEquals("Unable to resolve required resource: invalidResourceName", e.getMessage());
    }
}
}