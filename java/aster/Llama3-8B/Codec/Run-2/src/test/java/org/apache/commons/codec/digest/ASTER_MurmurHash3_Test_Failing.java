/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash3_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_pmKn0() {
        byte[] data = "test".getBytes();
        int length = data.length;
        int seed = 123;
        int result = MurmurHash3.hash32(data, length, seed);
        assertEquals(123456789, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_FLUI0() {
        byte[] data = new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78};
        int result = MurmurHash3.hash32x86(data);
        assertEquals(0x12345678, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_daQU0() {
        String data = "test";
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] actual = MurmurHash3.hash128(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_EpxO1() {
        byte[] data = "test".getBytes();
        long expected = 0x1234567890abcdefL;
        long result = MurmurHash3.hash64(data);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_doGj1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        int result = MurmurHash3.hash32(data);
        assertEquals(123456789, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_KuhF0() {
        long data = 1234567890L;
        long expected = 1234567890L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNegativeData_swYL1() {
        long data = -1234567890L;
        long expected = -1234567890L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithZeroData_DUQs2() {
        long data = 0L;
        long expected = 0L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithLargeData_ZgvO3() {
        long data = Long.MAX_VALUE;
        long expected = Long.MAX_VALUE;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_TNBT1() {
        byte[] data = "HelloWorld".getBytes();
        long result = MurmurHash3.hash64(data, 0, data.length);
        assertEquals(0x7a9a7a9aL, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_SLyz0() {
        assertEquals(0x1234567890abcdefL, MurmurHash3.hash64((short) 0x12));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithMaxValue_dHFo1() {
        assertEquals(0xabcdef1234567890L, MurmurHash3.hash64((short) 0xff));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_tAbB0() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        int offset = 0;
        int length = 8;
        int seed = 123;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Tail_Mhwg1() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef, (byte) 0x10, (byte) 0x20};
        int offset = 8;
        int length = 2;
        int seed = 123;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_TOGj0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 5;
        int seed = 123;
        int expected = 123;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_XTOF1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 123;
        int expected = 123;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_pwhZ0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128(data);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_SJXC0() {
        byte[] data = new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78, (byte)0x90, (byte)0xab, (byte)0xcd, (byte)0xef};
        int offset = 0;
        int length = 8;
        int seed = 123;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Tail_iKYo1() {
        byte[] data = new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78, (byte)0x90, (byte)0xab, (byte)0xcd, (byte)0xef};
        int offset = 4;
        int length = 4;
        int seed = 123;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Small_QQnl2() {
        byte[] data = new byte[] {(byte)0x12};
        int offset = 0;
        int length = 1;
        int seed = 123;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_KYAZ0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 8;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentData_mlcQ1() {
        byte[] data = new byte[] {9, 8, 7, 6, 5, 4, 3, 2};
        int offset = 0;
        int length = 8;
        int seed = 456;
        long[] expected = new long[] {7890123456L, 3456789012L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentOffset_ghUI2() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 4;
        int length = 4;
        int seed = 789;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentLength_IjAg3() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 4;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentSeed_mGPp4() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 8;
        int seed = 321;
        long[] expected = new long[] {9012345678L, 7654321098L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_oRMp1() {
        assertEquals(123, MurmurHash3.hash32(1234567890L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_QSBV0() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 123;
        int expected = 123;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_QRVG1() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int offset = 0;
        int length = 5;
        int seed = 123;
        int expected = 123;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nkuO0() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_myEM1() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int offset = 0;
        int length = 5;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Lvvo0() {
        assertEquals(123456789, MurmurHash3.hash32(123456789L, 123456789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Negative_aink1() {
        assertEquals(-123456789, MurmurHash3.hash32(-123456789L, 123456789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Zero_yvMR2() {
        assertEquals(0, MurmurHash3.hash32(0L, 123456789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Large_tRwy3() {
        assertEquals(1234567890123456789L, MurmurHash3.hash32(1234567890123456789L, 123456789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32LargeNegative_MbwF4() {
        assertEquals(-1234567890123456789L, MurmurHash3.hash32(-1234567890123456789L, 123456789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_nKiR0() {
        byte[] data = "HelloWorld".getBytes();
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_YZlG0() {
        int result = MurmurHash3.hash32(1234567890123456789L, 12345);
        assertEquals(12345, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeData_iRmp1() {
        int result = MurmurHash3.hash32(-1234567890123456789L, 12345);
        assertEquals(12345, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_gfpS2() {
        int result = MurmurHash3.hash32(0L, 12345);
        assertEquals(12345, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeedZero_aoFF3() {
        int result = MurmurHash3.hash32(1234567890123456789L, 0);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_USMN0() {
        byte[] data = new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int expected = 0x12345678;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_mLbk0() {
        assertEquals(123456789, MurmurHash3.hash32("HelloWorld"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32EmptyString_llpo1() {
        assertEquals(0, MurmurHash3.hash32(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_grxk0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSmallData_hmht1() {
        byte[] data = new byte[] {1, 2, 3};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLargeData_dGwR2() {
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithZeroLength_OqHw3() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNegativeLength_lMsX4() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = -1;
        int seed = 123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNegativeOffset_XnhQ5() {
        byte[] data = new byte[10];
        int offset = -1;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNegativeSeed_RerW6() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = data.length;
        int seed = -123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullData_Lhcm7() {
        byte[] data = null;
        int offset = 0;
        int length = 10;
        int seed = 123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullDataAndNegativeLength_NWCW8() {
        byte[] data = null;
        int offset = 0;
        int length = -1;
        int seed = 123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullDataAndNegativeOffset_wAht9() {
        byte[] data = null;
        int offset = -1;
        int length = 10;
        int seed = 123;
        long[] expected = new long[] {123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_iTKj0() {
        int result = MurmurHash3.hash32(1L, 2L, 3);
        assert result == 123;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Long_EMZb1() {
        int result = MurmurHash3.hash32(1L, 2L, 4);
        assert result == 456;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Seed_VPRu2() {
        int result = MurmurHash3.hash32(1L, 2L, 5);
        assert result == 789;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_nIjg0() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLongData_ULNr1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        int offset = 0;
        int length = 15;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithShortData_jQcQ2() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        int offset = 0;
        int length = 5;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithEmptyData_CNrX3() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullData_PTPy4() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNegativeLength_MAJl5() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        int offset = 0;
        int length = -5;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNegativeOffset_FOtB6() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        int offset = -1;
        int length = 5;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLargeData_Bgzr7() {
        byte[] data = new byte[10000];
        for (int i = 0; i < 10000; i++) {
            data[i] = (byte) i;
        }
        int offset = 0;
        int length = 10000;
        int seed = 123;
        long[] expected = new long[] {1234567890L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_WCzH0() {
        byte[] data = new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int expected = 0x12345678;
        int actual = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_cPGa0() {
        assertEquals(123, MurmurHash3.hash32(1L, 2L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_KiKq0() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int length = 4;
        int expected = 0x12345678;
        int result = MurmurHash3.hash32(data, length);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_qHDb0() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int seed = 12345;
        int expected = 1234567890;
        int result = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_IwVF0() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = data.length;
        int seed = 12345;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128LongData_zdUG1() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        int offset = 0;
        int length = data.length;
        int seed = 12345;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128ShortData_BIbS2() {
        byte[] data = new byte[] {(byte) 0x12};
        int offset = 0;
        int length = data.length;
        int seed = 12345;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128EmptyData_zWdm3() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = data.length;
        int seed = 12345;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128NullData_dogJ4() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 12345;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        try {
            MurmurHash3.hash128(data, offset, length, seed);
            assert false;
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128NegativeLength_MBmh5() {
        byte[] data = new byte[] {(byte) 0x12};
        int offset = 0;
        int length = -1;
        int seed = 12345;
        try {
            MurmurHash3.hash128(data, offset, length, seed);
            assert false;
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128LargeSeed_tFiJ7() {
        byte[] data = new byte[] {(byte) 0x12};
        int offset = 0;
        int length = data.length;
        int seed = Integer.MAX_VALUE;
        long[] expected = new long[] {0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_nSHB0_CBhv0_1() {
    long[] result = MurmurHash3.hash128(new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78, (byte)0x90, (byte)0xab, (byte)0xcd, (byte)0xef}, 0, 8, 0);
    assertEquals(0x1234567890abcdefL, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_nSHB0_CBhv0_2() {
    long[] result = MurmurHash3.hash128(new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78, (byte)0x90, (byte)0xab, (byte)0xcd, (byte)0xef}, 0, 8, 0);
    assertEquals(0x1234567890abcdefL, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86WithRemainingBytes_YTAc1_mJAM0_1() {
    byte[] data = new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78, (byte)0x90};
    int offset = 0;
    int length = 5;
    int seed = 0;
    long[] expected = MurmurHash3.hash128(data, offset, length, seed);
    assertEquals(expected[0], 0x1234567890000000L);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86WithRemainingBytes_YTAc1_mJAM0_2() {
    byte[] data = new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78, (byte)0x90};
    int offset = 0;
    int length = 5;
    int seed = 0;
    long[] expected = MurmurHash3.hash128(data, offset, length, seed);
    assertEquals(expected[1], 0x1234567891000000L);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86WithRemainingBytes_bPRm1_VDQc0_2() {
    byte[] data = new byte[] {(byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78, (byte)0x90};
    int offset = 0;
    int length = 5;
    int seed = 0;
    long[] expected = MurmurHash3.hash128(data, offset, length, seed);
    assertEquals(expected[1], 0x1234567890000000L);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_KuhF0_fid1() {
        long data =-286461308899903857L;
        long expected =-286461308899903857L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNegativeData_swYL1_fid1() {
        long data =-2477286992411320140L;
        long expected =-2477286992411320140L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithZeroData_DUQs2_fid1() {
        long data =-8620514229188030809L;
        long expected =-8620514229188030809L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_TOGj0_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 5;
        int seed =-1989770587;
        int expected =-1989770587;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_XTOF1_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed =-659558267;
        int expected =-659558267;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_KYAZ0_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 8;
        int seed = 123;
        long[] expected = new long[] {1482936447897991137L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentData_mlcQ1_fid1() {
        byte[] data = new byte[] {9, 8, 7, 6, 5, 4, 3, 2};
        int offset = 0;
        int length = 8;
        int seed = 456;
        long[] expected = new long[] {7143079467081769414L, 3456789012L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentOffset_ghUI2_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 4;
        int length = 4;
        int seed = 789;
        long[] expected = new long[] {-6012811452351701974L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentLength_IjAg3_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 4;
        int seed = 123;
        long[] expected = new long[] {703486896261260593L, 9876543210L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentSeed_mGPp4_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 8;
        int seed = 321;
        long[] expected = new long[] {1070104076646973105L, 7654321098L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_oRMp1_fid1() {
        assertEquals(885956927, MurmurHash3.hash32(8859569274567890L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_QSBV0_fid1() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed =897096734;
        int expected =897096734;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_QRVG1_fid1() {
        byte[] data = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int offset = 0;
        int length = 5;
        int seed =-117124134;
        int expected =-117124134;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Lvvo0_fid1() {
        assertEquals(123456789, MurmurHash3.hash32(123456789L,874110409));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Negative_aink1_fid1() {
        assertEquals(-406197036, MurmurHash3.hash32(-406197036L, 123456789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Zero_yvMR2_fid1() {
        assertEquals(-1402413366, MurmurHash3.hash32(-1402413366L, 123456789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Large_tRwy3_fid1() {
        assertEquals(-1183508958L, MurmurHash3.hash32(-1183508958L, 123456789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32LargeNegative_MbwF4_fid1() {
        assertEquals(844891161L, MurmurHash3.hash32(844891161L, 123456789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_YZlG0_fid1() {
        int result = MurmurHash3.hash32(1234567890123456789L,1711472599);
        assertEquals(12345, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeData_iRmp1_fid1() {
        int result = MurmurHash3.hash32(-1234567890123456789L,271949345);
        assertEquals(12345, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_gfpS2_fid1() {
        int result = MurmurHash3.hash32(0L,2074948481);
        assertEquals(12345, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeedZero_aoFF3_fid1() {
        int result = MurmurHash3.hash32(1234567890123456789L,-411921454);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_nIjg0_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123;
        long[] expected = new long[] {-9010541079697045188L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLongData_ULNr1_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        int offset = 0;
        int length = 15;
        int seed = 123;
        long[] expected = new long[] {2609255016735849522L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithShortData_jQcQ2_fid1() {
        byte[] data = new byte[] {1, 2, 3, 4, 5};
        int offset = 0;
        int length = 5;
        int seed = 123;
        long[] expected = new long[] {4891110179456080002L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithEmptyData_CNrX3_fid1() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[] {-9122149783931627152L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullData_PTPy4_fid1() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[] {-9122149783931627152L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLargeData_Bgzr7_fid1() {
        byte[] data = new byte[10000];
        for (int i = 0; i < 10000; i++) {
            data[i] = (byte) i;
        }
        int offset = 0;
        int length = 10000;
        int seed = 123;
        long[] expected = new long[] {3610878375899670785L, 9876543210L};
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_qHDb0_fid1() {
        long data1 =-763929806L;
        long data2 = 9876543210L;
        int seed = 12345;
        int expected =-763929806;
        int result = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expected, result);
    }
}