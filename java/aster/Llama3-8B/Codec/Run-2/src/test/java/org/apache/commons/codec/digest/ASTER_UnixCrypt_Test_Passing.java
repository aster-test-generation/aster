/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnixCrypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_tKnB0() {
        String original = "test";
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_pZRr1() {
        String original = "test";
        String encrypted = UnixCrypt.crypt(original);
        assert encrypted != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptValidSalt_HxLU2() {
    byte[] original = new byte[0];
    String result = UnixCrypt.crypt(original, "salt");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptOriginalLengthLessThan8_neNM3() {
    byte[] original = new byte[7];
    String result = UnixCrypt.crypt(original, "salt");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptOriginalLength8_YePW4() {
    byte[] original = new byte[8];
    String result = UnixCrypt.crypt(original, "salt");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptOriginalLengthMoreThan8_pHue5() {
    byte[] original = new byte[9];
    String result = UnixCrypt.crypt(original, "salt");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptSaltLength2_FRWM6() {
    byte[] original = new byte[0];
    String result = UnixCrypt.crypt(original, "sa");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptSaltLength3_nibX7() {
    byte[] original = new byte[0];
    String result = UnixCrypt.crypt(original, "sal");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswapAndOutAndBAndY_Aioo8() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        int[] out = new int[2];
        for (int i = 0; i < out.length; i++) {
            out[i] = i;
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_fbdJ2_fid1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_cUku3_fid1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("saGcFich1ppsI", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKey_IkMu4_fid1() {
        byte[] original = new byte[16];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("saGcFich1ppsI", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortKey_LdqL5_fid1() {
        byte[] original = new byte[4];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("sa7JkdUVApjKU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithEmptyKey_gnZK6_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndSalt_gfLA8_fid1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt123");
        assertEquals("saGcFich1ppsI", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptInvalidSalt_nMJc1_fid1() {
    byte[] original = new byte[0];
    String result = UnixCrypt.crypt(original, "invalid");
    assertEquals("inWSYLbKCoLko", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_sAgI1_fid1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "InvalidSalt");
        assertEquals("InwYRMMnZrlAQ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_sUQg2_fid1() {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("VakRFTsfOFlzA", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_wRqX3_fid1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("VadF7C.8wo8iM", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKey_qYRD4_fid1() {
        byte[] original = new byte[16];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("VadF7C.8wo8iM", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortKey_HxxW5_fid1() {
        byte[] original = new byte[4];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("VaAfl.QT7jTsE", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithEmptyKey_bSEt6_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("VakRFTsfOFlzA", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithZeroKey_gVvI8_fid1() {
        byte[] original = new byte[0];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) 0;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("VakRFTsfOFlzA", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt2_efvb3_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt2");
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt3_bJJf4_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt3");
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt4_DEVn5_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt4");
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt5_ORMQ6_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt5");
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt6_mSmi7_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt6");
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt7_OanT8_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt7");
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt8_GcVc9_fid1() {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt8");
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_oyTa2_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("sanMgaSDi4MSU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt2_Vizy3_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt2");
        assertEquals("sanMgaSDi4MSU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt3_mvvY4_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt3");
        assertEquals("sanMgaSDi4MSU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt4_vvDP5_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt4");
        assertEquals("sanMgaSDi4MSU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt5_UNyN6_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt5");
        assertEquals("sanMgaSDi4MSU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt6_JTuP7_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt6");
        assertEquals("sanMgaSDi4MSU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt7_ESGf8_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt7");
        assertEquals("sanMgaSDi4MSU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt8_qOzQ9_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt8");
        assertEquals("sanMgaSDi4MSU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt9_snAm10_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String result = UnixCrypt.crypt(original, "salt9");
        assertEquals("sanMgaSDi4MSU", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_inHS0_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String salt = "salt";
        String expected = "sanMgaSDi4MSU";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_iBvX2_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String salt = "invalid";
        try {
            UnixCrypt.crypt(original, salt);
            assertEquals(true, true);
        } catch (IllegalArgumentException e) {
            assertEquals(true, true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_iYSB3_fid1() {
        byte[] original = new byte[0];
        String salt = "salt";
        String expected = "saFLGt/QKS6yw";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_eNQN4_fid1() {
        byte[] original = new byte[] {(byte) 0x01};
        String salt = "salt";
        String expected = "sawJDSMRDrWeA";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_ofuB5_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        String salt = "salt";
        String expected = "sacnBs5JkA0dI";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndSchedule_jzIN4_fid1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("saGcFich1ppsI", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswap_lPMB5_fid1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("saGcFich1ppsI", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswapAndOut_dqeX6_fid1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        int[] out = new int[2];
        for (int i = 0; i < out.length; i++) {
            out[i] = i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("saGcFich1ppsI", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswapAndOutAndB_rClP7_fid1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        int[] out = new int[2];
        for (int i = 0; i < out.length; i++) {
            out[i] = i;
        }
        byte[] b = new byte[9];
        for (int i = 0; i < b.length; i++) {
            b[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("saGcFich1ppsI", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_CFaH0_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String salt = "salt";
        String expected = "sanMgaSDi4MSU";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_OiNp3_fid1() {
        byte[] original = new byte[0];
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_uSzV4_fid1() {
        byte[] original = new byte[] {(byte) 0x01};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("sawJDSMRDrWeA", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_XRdo5_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("sacnBs5JkA0dI", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithNull_aufq6_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x00, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("sat0YCko9XV2Q", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithZero_ARZe7_fid1() {
        byte[] original = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("saFLGt/QKS6yw", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithOne_ZnoH8_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("sapRiFBHvIxDs", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOriginalWithAll_Dilo9_fid1() {
        byte[] original = new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09, (byte) 0x0a, (byte) 0x0b, (byte) 0x0c, (byte) 0x0d, (byte) 0x0e, (byte) 0x0f};
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("sacnBs5JkA0dI", result);
    }
}