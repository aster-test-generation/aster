/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DaitchMokotoffSoundex_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex1_BLfg0() {
    DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(true);
    String result = dms.soundex("Katz");
    assertEquals("K000", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex2_cISh1() {
    DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(true);
    String result = dms.soundex("Smith");
    assertEquals("S531", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex3_uzGa2() {
    DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(true);
    String result = dms.soundex("Kohn");
    assertEquals("K500", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_CeSG0() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String result = soundex.encode("Katz");
    Assertions.assertEquals("K000", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_jthz1() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(false);
    String result = soundex.encode("Katz");
    Assertions.assertEquals("K000", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeValidString_ftcf0() {
    DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
    String input = "Katz";
    Object result = daitchMokotoffSoundex.encode(input);
    assertEquals("K000", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithValidInput_hqDa0() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(false);
    String result = soundex.encode("Katz");
    assertEquals("K000", result);
}
}