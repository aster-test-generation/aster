/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_rSCe0() throws Exception {
        QCodec qCodec = new QCodec();
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharset_XUAT1() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetInstance_LOlS2() throws Exception {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_seYR0() throws Exception {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String result = qCodec.encode("Hello, World!", StandardCharsets.UTF_8);
        System.out.println("qCodec.encode(\"Hello, World!\", StandardCharsets.UTF_8)");
        assert result.equals("Hello, World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_yBfw0() throws Exception {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String result = (String) qCodec.decode("Hello");
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_KcFp1() throws Exception {
        QCodec qCodec = new QCodec();
        Object result = qCodec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeObject_mYQd2() throws Exception {
        QCodec qCodec = new QCodec();
        try {
            qCodec.decode(new Object());
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanksTrue_eCcz0() throws Exception {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        assertEquals(true, qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_ADbp0() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "Hello, World!";
        Object result = qCodec.encode(str);
        assertEquals(str, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_cEeW1() throws Exception {
        QCodec qCodec = new QCodec();
        Object obj = null;
        Object result = qCodec.encode(obj);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeObject_WjtO2() throws Exception {
        QCodec qCodec = new QCodec();
        Object obj = new Object();
        try {
            qCodec.encode(obj);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type " + obj.getClass().getName() + " cannot be encoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_BpRq0() throws Exception {
        QCodec qCodec = new QCodec();
        String result = qCodec.encode("Hello, World!");
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_wsVE0() throws Exception {
        QCodec qCodec = new QCodec();
        assertTrue(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharset_BYYG1() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        assertTrue(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharsetInstance_eRob2() throws Exception {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertTrue(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNullBytes_nzNs0() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingEmptyBytes_mkXm1() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[0];
        byte[] result = qCodec.doEncoding(bytes);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingSingleByte_coCJ2() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{(byte) 65};
        byte[] result = qCodec.doEncoding(bytes);
        byte[] expected = new byte[]{(byte) 67};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingMultipleBytes_hAku3() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{(byte) 65, (byte) 66, (byte) 67};
        byte[] result = qCodec.doEncoding(bytes);
        byte[] expected = new byte[]{(byte) 67, (byte) 68, (byte) 69};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingBlanks_fbJK4() throws Exception {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{(byte) 32, (byte) 65, (byte) 66, (byte) 67};
        byte[] result = qCodec.doEncoding(bytes);
        byte[] expected = new byte[]{(byte) 95, (byte) 65, (byte) 66, (byte) 67};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MlfD0() throws Exception {
        QCodec qCodec = new QCodec();
        String result = qCodec.encode("Hello, World!", "UTF-8");
        assert result.equals("SGVsbG8sIFdvcmxkIQ==");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullSourceStr_yRwW2() throws Exception {
        QCodec qCodec = new QCodec();
        try {
            qCodec.encode(null, "UTF-8");
        } catch (EncoderException e) {
            assert e.getMessage().equals("Source string is null");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingNullInput_KqPA0() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doDecoding(null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingNoUnderscores_OqhF1() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello World".getBytes();
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = "Hello World".getBytes();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithUnderscores_hbjq2() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello_World".getBytes();
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = "Hello World".getBytes();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithMultipleUnderscores_FecS3() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello_World_This_Is_Test".getBytes();
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = "Hello World This Is Test".getBytes();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNonAsciiCharacters_DMgq4() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello_Wrld".getBytes();
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = "Hello Wrld".getBytes();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithSpecialCharacters_UQTP5() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello_World!@#".getBytes();
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = "Hello World!".getBytes();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithLongString_CVWx6() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = "Hello_World_This_Is_A_Long_String".getBytes();
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = "Hello World This Is A Long String".getBytes();
        assertArrayEquals(expected, result);
    }
}