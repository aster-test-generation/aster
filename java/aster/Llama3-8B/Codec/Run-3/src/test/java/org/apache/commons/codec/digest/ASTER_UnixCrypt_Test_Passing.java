/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnixCrypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_LkzZ0() throws Exception {
        String original = "test";
        String salt = "salt";
        String expected = "someExpectedResult";
        String result = UnixCrypt.crypt(original, salt);
        assert result.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_rDyy0() throws Exception {
        byte[] original = new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03};
        String expected = "AQAAAAAAAEAAA==";
        String actual = UnixCrypt.crypt(original);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_Otpm0() throws Exception {
        String original = "Hello World";
        String result = UnixCrypt.crypt(original);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_KNRy0() throws Exception {
        String original = "Hello";
        String result = UnixCrypt.crypt(original.getBytes(), null);
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_Mnja1() throws Exception {
        String original = "Hello";
        String result = UnixCrypt.crypt(original.getBytes(), "InvalidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_nYIY2() throws Exception {
        String original = "Hello";
        String result = UnixCrypt.crypt(original.getBytes(), "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptShortOriginal_nXtH3() throws Exception {
        String original = "He";
        String result = UnixCrypt.crypt(original.getBytes(), "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptLongOriginal_nazA4() throws Exception {
        String original = "HelloWorld";
        String result = UnixCrypt.crypt(original.getBytes(), "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_RvsB5() throws Exception {
        String original = "";
        String result = UnixCrypt.crypt(original.getBytes(), "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_tDrY0() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_EkaU1() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "Invalid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_rTSn2() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt2_Pejs3() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt2");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt3_PZCE4() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt3");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt4_gJvS5() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt4");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt5_VFIP6() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt5");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt6_JEtK7() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt6");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt7_VJxZ8() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt7");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt8_qrSo9() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "salt8");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_rvHW1() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "InvalidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_YVmy2() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_HDGx3() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKey_sgji4() throws Exception {
        byte[] original = new byte[16];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortKey_ZdLE5() throws Exception {
        byte[] original = new byte[4];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithEmptyKey_qrTi6() throws Exception {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithNullKey_oMmJ7() throws Exception {
        byte[] original = null;
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyWithNull_fSrC8() throws Exception {
        byte[] original = new byte[8];
        original[0] = (byte) 0;
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithOriginal_JgLd3() throws Exception {
        byte[] original = new byte[8];
        original[0] = 1;
        original[1] = 2;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongOriginal_HJWW4() throws Exception {
        byte[] original = new byte[16];
        original[0] = 1;
        original[1] = 2;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithShortOriginal_HLRi5() throws Exception {
        byte[] original = new byte[4];
        original[0] = 1;
        original[1] = 2;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithEmptyOriginal_vRGm7() throws Exception {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLargeOriginal_wrrS8() throws Exception {
        byte[] original = new byte[1024];
        original[0] = 1;
        original[1] = 2;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_rzId0() throws Exception {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_oJaM1() throws Exception {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "Invalid salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_FkCu3() throws Exception {
        byte[] original = new byte[1];
        original[0] = 1;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKey_CyUV4() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < 8; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKeyAndNonZeroLastByte_Vjcd5() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < 7; i++) {
            original[i] = (byte) i;
        }
        original[7] = 1;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKeyAndZeroLastByte_uACl6() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < 7; i++) {
            original[i] = (byte) i;
        }
        original[7] = 0;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKeyAndNonZeroLastByteAndNonZeroSecondLastByte_uxlE7() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < 6; i++) {
            original[i] = (byte) i;
        }
        original[7] = 1;
        original[6] = 1;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKeyAndZeroLastByteAndNonZeroSecondLastByte_sddM8() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < 6; i++) {
            original[i] = (byte) i;
        }
        original[7] = 0;
        original[6] = 1;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithLongKeyAndNonZeroLastByteAndZeroSecondLastByte_SYod9() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < 6; i++) {
            original[i] = (byte) i;
        }
        original[7] = 1;
        original[6] = 0;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_pXUF0() throws Exception {
        String salt = "a1";
        byte[] original = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String expected = "             ";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_YzaS1() throws Exception {
        String salt = "invalid";
        byte[] original = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        try {
            UnixCrypt.crypt(original, salt);
            assertEquals(false, true);
        } catch (IllegalArgumentException e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_XSZN2() throws Exception {
        String salt = null;
        byte[] original = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String expected = "             ";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_NlUL3() throws Exception {
        String salt = "a1";
        byte[] original = new byte[0];
        String expected = "             ";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithShortOriginal_RRHI4() throws Exception {
        String salt = "a1";
        byte[] original = new byte[]{(byte) 0x01};
        String expected = "             ";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_UNfP5() throws Exception {
        String salt = "a1";
        byte[] original = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        String expected = "             ";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullOriginal_MHOI6() throws Exception {
        String salt = "a1";
        byte[] original = null;
        try {
            UnixCrypt.crypt(original, salt);
            assertEquals(false, true);
        } catch (NullPointerException e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltAndNullOriginal_CkGn7() throws Exception {
        String salt = null;
        byte[] original = null;
        try {
            UnixCrypt.crypt(original, salt);
            assertEquals(false, true);
        } catch (NullPointerException e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltAndEmptyOriginal_sLSA8() throws Exception {
        String salt = null;
        byte[] original = new byte[0];
        String expected = "             ";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltAndShortOriginal_uMmd9() throws Exception {
        String salt = null;
        byte[] original = new byte[]{(byte) 0x01};
        String expected = "             ";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltAndLongOriginal_gjOy10() throws Exception {
        String salt = null;
        byte[] original = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        String expected = "             ";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKey_cICa3() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndSchedule_lCmW4() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswap_OpQb5() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswapAndOut_xTji6() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        int[] out = new int[2];
        for (int i = 0; i < out.length; i++) {
            out[i] = i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswapAndOutAndB_TaRq7() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        int[] out = new int[2];
        for (int i = 0; i < out.length; i++) {
            out[i] = i;
        }
        byte[] b = new byte[9];
        for (int i = 0; i < b.length; i++) {
            b[i] = (byte) i;
        }
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSaltWithKeyAndScheduleAndEswapAndOutAndBAndI_iaCg8() throws Exception {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) i;
        }
        int[] schedule = new int[32];
        for (int i = 0; i < schedule.length; i++) {
            schedule[i] = i;
        }
        int eSwap0 = 0;
        int eSwap1 = 0;
        int[] out = new int[2];
        for (int i = 0; i < out.length; i++) {
            out[i] = i;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_JEgi0() throws Exception {
        byte[] original = new byte[8];
        Random randomGenerator = new Random();
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) randomGenerator.nextInt(256);
        }
        String result = UnixCrypt.crypt(original, null);
        assertEquals("             ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_azII1() throws Exception {
        byte[] original = new byte[8];
        Random randomGenerator = new Random();
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) randomGenerator.nextInt(256);
        }
        String result = UnixCrypt.crypt(original, "InvalidSalt");
        assertEquals("Invalid salt value: InvalidSalt", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_SRWM2() throws Exception {
        byte[] original = new byte[8];
        Random randomGenerator = new Random();
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) randomGenerator.nextInt(256);
        }
        String result = UnixCrypt.crypt(original, "ValidSalt");
        assertEquals("             ", result);
    }
}