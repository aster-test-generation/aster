/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_ZEfB0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int length = 4;
        int seed = 0;
        int expected = 0x12345678;
        int result = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNullData_PFIo4() {
        byte[] data = null;
        int length = 4;
        int seed = 0;
        long expected = 0L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNegativeLength_nDZX6() {
        byte[] data = new byte[]{1, 2, 3, 4};
        int length = -4;
        int seed = 0;
        long expected = 0L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_WTFY0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int length = 8;
        int seed = 0;
        long expected = 1234567890L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithLessThan8Bytes_thRC1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4};
        int length = 4;
        int seed = 0;
        long expected = 1234567890L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithMoreThan8Bytes_WJHb2_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = 10;
        int seed = 0;
        long expected = 1234567890L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSeed_sHQf3_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4};
        int length = 4;
        int seed = 1234567890;
        long expected = 9876543210L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNegativeSeed_VOfE7_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4};
        int length = 4;
        int seed = -1234567890;
        long expected = 9876543210L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithLargeSeed_mcjJ8_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4};
        int length = 4;
        int seed = 2147483647;
        long expected = 9876543210L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithLargeData_NdiS9_fid1() {
        byte[] data = new byte[100];
        for (int i = 0; i < 100; i++) {
            data[i] = (byte) i;
        }
        int length = 100;
        int seed = 0;
        long expected = 1234567890L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithLargeDataAndSeed_Lvpg10_fid1() {
        byte[] data = new byte[100];
        for (int i = 0; i < 100; i++) {
            data[i] = (byte) i;
        }
        int length = 100;
        int seed = 1234567890;
        long expected = 9876543210L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_hXvP1_eqtl0_fid1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int length = 5;
        int seed = 0;
        long expected = 0x123456789000000L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }
}