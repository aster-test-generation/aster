/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidString_ZOxy3() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        try {
            urlCodec.decode("Invalid String");
        } catch (DecoderException e) {
            assertEquals("Invalid String", e.getMessage());
            return;
        }
        fail("DecoderException not thrown");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlValidInput_lSNm0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = "+Hello%20World!".getBytes();
        byte[] expected = "+Hello World!".getBytes();
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlInvalidEscapeSequenceWithArrayIndexOutOfBoundsException_mGCT2() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = "+Hello%20World!!".getBytes();
        DecoderException exception = assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(bytes));
        assert exception.getMessage().equals("Invalid URL encoding: ");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNullUrlSafe_KRiL0() {
        byte[] bytes = new byte[]{(byte) 0, (byte) 1, (byte) 2};
        byte[] result = URLCodec.encodeUrl(null, bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNegativeByte_driX2() {
        byte[] bytes = new byte[]{(byte) -1, (byte) 1, (byte) 2};
        byte[] result = URLCodec.encodeUrl(new BitSet(), bytes);
        byte[] expected = new byte[]{(byte) '+', (byte) '8', (byte) '8'};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNonUrlSafeByte_rWag3() {
        byte[] bytes = new byte[]{(byte) 128, (byte) 1, (byte) 2};
        byte[] result = URLCodec.encodeUrl(new BitSet(), bytes);
        byte[] expected = new byte[]{(byte) '%', (byte) '0', (byte) '0', (byte) '8'};
        assertArrayEquals(expected, result);
    }
}