/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_RlJR0() throws Exception {
        Hex hex = new Hex();
        byte[] data = {1, 2, 3, 4, 5};
        char[] expected = {'1', '2', '3', '4', '5'};
        char[] result = hex.encodeHex(data);
        assert Arrays.equals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_pOZk0() throws Exception {
        char[] result = Hex.encodeHex(new byte[]{0x12, 0x34, 0x56}, 0, 3, true);
        char[] expected = new char[]{'1', '2', '3', '4', '5', '6'};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_oFxf0() throws Exception {
        Hex hex = new Hex();
        ByteBuffer array = ByteBuffer.wrap(new byte[]{1, 2, 3});
        byte[] result = hex.encode(array);
        assert Arrays.equals(result, new byte[]{34, 31, 32, 33});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_ajTH0() throws Exception {
        char[] toDigits = "0123456789abcdef".toCharArray();
        byte[] data = new byte[]{0x12, 0x34, 0x56, 0x78};
        char[] expected = new char[]{'1', '2', '3', '4', '5', '6', '7', '8'};
        char[] result = Hex.encodeHex(data, toDigits);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_pcHM0() throws Exception {
        Hex hex = new Hex();
        byte[] data = new byte[]{1, 2, 3};
        char[] result = hex.encodeHex(data, 0, data.length, true);
        assert Arrays.equals(result, new char[]{'1', '2', '3'});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexNullData_UGXl2() throws Exception {
        Hex hex = new Hex();
        byte[] data = null;
        try {
            hex.encodeHex(data, 0, 0, true);
            assert false;
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_OIYn0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        char[] expected = new char[]{'1', '2', '3', '4', '5'};
        char[] result = Hex.encodeHex(data, true);
        assert Arrays.equals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_ZpQw0() throws Exception {
        char[] data = new char[]{'1', '2', '3', '4', '5', '6'};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6};
        byte[] result = Hex.decodeHex(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_clbp0() throws Exception {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        String object = "Hello";
        Object result = hex.encode(object);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteBuffer_fwva1() throws Exception {
        Hex hex = new Hex();
        ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[]{1, 2, 3});
        Object result = hex.encode(byteBuffer);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_rPSA2() throws Exception {
        Hex hex = new Hex();
        byte[] byteArray = new byte[]{1, 2, 3};
        Object result = hex.encode(byteArray);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexValidInput_GYxA0() throws Exception {
        char[] data = new char[]{'1', '2', '3', '4', '5', '6'};
        byte[] out = new byte[6];
        int outOffset = 0;
        assertEquals(3, Hex.decodeHex(data, out, outOffset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexOddNumberCharacters_eYSo1() throws Exception {
        char[] data = new char[]{'1', '2', '3', '4', '5'};
        byte[] out = new byte[5];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexOutputArrayNotLargeEnough_oipL2() throws Exception {
        char[] data = new char[]{'1', '2', '3', '4', '5', '6'};
        byte[] out = new byte[3];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexNullInput_psXu3() throws Exception {
        char[] data = null;
        byte[] out = new byte[6];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ppEq0() throws Exception {
        Hex hex = new Hex();
        byte[] array = new byte[]{(byte) 0x12, (byte) 0x34};
        byte[] result = hex.encode(array);
        String expected = "1234";
        String actual = new String(result);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_aRAg0() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x48, 0x65, 0x78});
        byte[] result = hex.decode(buffer);
        assert result.length == 3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithCharset_SydP0() throws Exception {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithString_gsAJ1() throws Exception {
        Hex hex = new Hex("UTF-8");
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameDefault_vxFW2() throws Exception {
        Hex hex = new Hex();
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_XVjm0() throws Exception {
        Hex hex = new Hex();
        String result = hex.encodeHexString(new byte[]{0x12, 0x34, 0x56});
        assertEquals("123456", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_jnIo0() throws Exception {
        Hex hex = new Hex();
        String result = hex.encodeHexString(new byte[]{0x12, 0x34, 0x56}, true);
        Assertions.assertEquals("123456", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharset_DFZW0() throws Exception {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("java.lang.Object@toString()[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharsetName_uYjS1() throws Exception {
        Hex hex = new Hex("UTF-8");
        assertEquals("java.lang.Object@toString()[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithoutCharset_pMFb2() throws Exception {
        Hex hex = new Hex();
        assertEquals("java.lang.Object@toString()", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_TKsz1() throws Exception {
        String result = Hex.encodeHexString(ByteBuffer.wrap(new byte[]{0x12, 0x34, 0x56}));
        assertEquals("123456", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_qNUq0() throws Exception {
        byte[] data = new byte[]{1, 2, 3};
        char[] out = new char[6];
        Hex.encodeHex(data, 0, 3, true, out, 0);
        String expected = "010203";
        String actual = new String(out, 0, 6);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetObject_YQDm0() throws Exception {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals(Charset.forName("UTF-8"), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithString_sOfE1() throws Exception {
        Hex hex = new Hex("UTF-8");
        assertEquals(Charset.forName("UTF-8"), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetDefault_Bdmb2() throws Exception {
        Hex hex = new Hex();
        assertEquals(null, hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_1() throws Exception {
        assertEquals(0, Hex.toDigit('0', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_2() throws Exception {
        assertEquals(1, Hex.toDigit('1', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_3() throws Exception {
        assertEquals(2, Hex.toDigit('2', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_4() throws Exception {
        assertEquals(3, Hex.toDigit('3', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_5() throws Exception {
        assertEquals(4, Hex.toDigit('4', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_6() throws Exception {
        assertEquals(5, Hex.toDigit('5', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_7() throws Exception {
        assertEquals(6, Hex.toDigit('6', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_8() throws Exception {
        assertEquals(7, Hex.toDigit('7', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_9() throws Exception {
        assertEquals(8, Hex.toDigit('8', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_10() throws Exception {
        assertEquals(9, Hex.toDigit('9', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_11() throws Exception {
        assertEquals(10, Hex.toDigit('a', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_12() throws Exception {
        assertEquals(11, Hex.toDigit('b', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_13() throws Exception {
        assertEquals(12, Hex.toDigit('c', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_14() throws Exception {
        assertEquals(13, Hex.toDigit('d', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_15() throws Exception {
        assertEquals(14, Hex.toDigit('e', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_16() throws Exception {
        assertEquals(15, Hex.toDigit('f', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0_17() throws Exception {
        assertEquals(15, Hex.toDigit('F', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitInvalidCharacter_Pxaz1_1() throws Exception {
        assertThrows(DecoderException.class, () -> Hex.toDigit('g', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitInvalidCharacter_Pxaz1_2() throws Exception {
        assertThrows(DecoderException.class, () -> Hex.toDigit('G', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitInvalidCharacter_Pxaz1_3() throws Exception {
        assertThrows(DecoderException.class, () -> Hex.toDigit(' ', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitInvalidCharacter_Pxaz1_4() throws Exception {
        assertThrows(DecoderException.class, () -> Hex.toDigit('\n', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitInvalidCharacter_Pxaz1_5() throws Exception {
        assertThrows(DecoderException.class, () -> Hex.toDigit('\t', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_twsV0() throws Exception {
        Hex hex = new Hex();
        byte[] array = new byte[]{(byte) 0x48, (byte) 0x65, (byte) 0x78};
        byte[] result = hex.decode(array);
        assert result.length == 3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_ldVt0() throws Exception {
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34};
        byte[] actual = Hex.decodeHex("1234");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_Llvq0() throws Exception {
        Hex hex = new Hex();
        String string = "Hello";
        Object result = hex.decode(string);
        assertEquals("Hello", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_feYq1() throws Exception {
        Hex hex = new Hex();
        byte[] bytes = "Hello".getBytes();
        Object result = hex.decode(bytes);
        assertEquals("Hello", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteBuffer_PFjc2() throws Exception {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap("Hello".getBytes());
        Object result = hex.decode(buffer);
        assertEquals("Hello", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharArray_YBAn3() throws Exception {
        Hex hex = new Hex();
        char[] chars = "Hello".toCharArray();
        Object result = hex.decode(chars);
        assertEquals("Hello", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitValidCharacter_MDIe0() throws Exception {
        assertEquals(0, Hex.toDigit('0', 0));
        assertEquals(1, Hex.toDigit('1', 0));
        assertEquals(2, Hex.toDigit('2', 0));
        assertEquals(3, Hex.toDigit('3', 0));
        assertEquals(4, Hex.toDigit('4', 0));
        assertEquals(5, Hex.toDigit('5', 0));
        assertEquals(6, Hex.toDigit('6', 0));
        assertEquals(7, Hex.toDigit('7', 0));
        assertEquals(8, Hex.toDigit('8', 0));
        assertEquals(9, Hex.toDigit('9', 0));
        assertEquals(10, Hex.toDigit('a', 0));
        assertEquals(11, Hex.toDigit('b', 0));
        assertEquals(12, Hex.toDigit('c', 0));
        assertEquals(13, Hex.toDigit('d', 0));
        assertEquals(14, Hex.toDigit('e', 0));
        assertEquals(15, Hex.toDigit('f', 0));
        assertEquals(15, Hex.toDigit('F', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitInvalidCharacter_Pxaz1() throws Exception {
        assertThrows(DecoderException.class, () -> Hex.toDigit('g', 0));
        assertThrows(DecoderException.class, () -> Hex.toDigit('G', 0));
        assertThrows(DecoderException.class, () -> Hex.toDigit(' ', 0));
        assertThrows(DecoderException.class, () -> Hex.toDigit('\n', 0));
        assertThrows(DecoderException.class, () -> Hex.toDigit('\t', 0));
    }
}