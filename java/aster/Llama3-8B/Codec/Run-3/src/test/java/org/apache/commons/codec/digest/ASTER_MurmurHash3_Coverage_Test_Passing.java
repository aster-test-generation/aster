/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_XjTy0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 12345;
        int expectedHash = -880779571;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86LastBytes_pWgO1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56};
        int offset = 0;
        int length = 3;
        int seed = 12345;
        int expectedHash = -2054164004;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Internal_Switch_Case13_WYBC2_lJal0() {
        byte[] data = new byte[16];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        data[5] = 6;
        data[6] = 7;
        data[7] = 8;
        data[8] = 9;
        data[9] = 10;
        data[10] = 11;
        data[11] = 12;
        data[12] = 13;
        data[13] = 14;
        long[] expected = new long[]{0, 0};
        long result = MurmurHash3.hash32(data, 16);
        expected[0] = result;
        expected[1] = result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Internal_Switch_Case15_Qowf0_OWLI0() {
        byte[] data = new byte[16];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        data[5] = 6;
        data[6] = 7;
        data[7] = 8;
        data[8] = 9;
        data[9] = 10;
        data[10] = 11;
        data[11] = 12;
        data[12] = 13;
        data[13] = 14;
        data[14] = 15;
        data[15] = 16;
        long[] expected = new long[]{0, 0};
        expected[0] = MurmurHash3.hash32(data, 16);
        expected[1] = MurmurHash3.hash32(data, 16);
        assertArrayEquals(expected, new long[]{MurmurHash3.hash32(data, 16), MurmurHash3.hash32(data, 16)});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Internal_Switch_Case12_ayXL3_sPXV0() {
        byte[] data = new byte[16];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        data[5] = 6;
        data[6] = 7;
        data[7] = 8;
        data[8] = 9;
        data[9] = 10;
        data[10] = 11;
        data[11] = 12;
        data[12] = 13;
        long[] expected = new long[]{0, 0};
        long result = MurmurHash3.hash32(data, 16);
        long[] actual = new long[]{result, result};
    }
}