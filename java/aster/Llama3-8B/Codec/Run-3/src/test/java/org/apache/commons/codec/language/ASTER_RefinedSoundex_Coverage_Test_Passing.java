/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_Spek1() throws Exception {
        RefinedSoundex soundex = new RefinedSoundex();
        try {
            soundex.encode(123);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to RefinedSoundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonLetterCharacter_cmrg0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals(0, refinedSoundex.getMappingCode('!'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_sNBo0() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("Smith");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithNonZeroCode_vaQA1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("Smiths");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithNullInput_LViF3() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex(null);
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithEmptyInput_ZUXt4() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSpecialCharacters_MOln5() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("Smith$");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveSameCodes_IZcA7() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("Smithss");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveDifferentCodes_dGBM8() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("Smithst");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveSameCodesAtStart_Krlg9() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("ssmith");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveSameCodesAtEnd_DjSl10() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("smithss");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveSameCodesInTheMiddle_lvrR11() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("smithssmith");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveDifferentCodesAtStart_DlPe12() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("stsmith");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveDifferentCodesAtEnd_WMDl13() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("smithst");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveDifferentCodesInTheMiddle_wkIf14() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("smithstsmith");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveSameCodesInTheMiddleAndAtStart_otLc15() {
        RefinedSoundex soundex = new RefinedSoundex();
        String result = soundex.soundex("ssmithssmith");
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleConsecutiveSameCodesInTheMiddleAndAtEnd_RCsm16() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLetterCharacter_rmlK1_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals('0', refinedSoundex.getMappingCode('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOutOfRange_qpBC2_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals(53, refinedSoundex.getMappingCode('Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidIndex_qLXj3_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals('1', refinedSoundex.getMappingCode('b'));
    }
}