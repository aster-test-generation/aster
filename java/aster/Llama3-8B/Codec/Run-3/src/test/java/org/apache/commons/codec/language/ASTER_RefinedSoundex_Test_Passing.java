/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_Oodg0() throws Exception {
        RefinedSoundex soundex = new RefinedSoundex("mapping");
        assertEquals(0, soundex.difference("abc", "abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_rfjy0() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.encode("John");
        assertEquals("J000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_oFeL0() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        Object result = refinedSoundex.encode("hello");
        assertEquals("H000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_IXVZ1() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        try {
            refinedSoundex.encode(123);
            assertEquals(false, true); // This will never be reached
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to RefinedSoundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNull_lZLq0() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals(null, refinedSoundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmptyString_jcfp1() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("", refinedSoundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSingleCharacter_pclF2() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("A", refinedSoundex.soundex("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMultipleCharacters_xPxW3() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("A100", refinedSoundex.soundex("Albert"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexConsecutiveSameCode_pMKV4() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("A1", refinedSoundex.soundex("Anna"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexConsecutiveDifferentCode_sZIL5() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("A1B", refinedSoundex.soundex("AnnaBell"));
    }
}