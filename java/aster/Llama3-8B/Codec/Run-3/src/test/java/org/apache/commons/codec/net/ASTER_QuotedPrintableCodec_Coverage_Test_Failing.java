/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidInput_NgcZ3() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String result = codec.decode(sourceStr, "InvalidCharset");
        assertEquals(sourceStr, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64Input_dgxR4() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "SGVsbG8sIFdvcmxkIQ==";
        String result = codec.decode(sourceStr, StandardCharsets.UTF_8.name());
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableInput_RnDy5() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!   =20";
        String result = codec.decode(sourceStr, StandardCharsets.UTF_8.name());
        assertEquals("Hello, World!  ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeMixedInput_rFJY6() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World! =20SGVsbG8sIFdvcmxkIQ==";
        String result = codec.decode(sourceStr, StandardCharsets.UTF_8.name());
        assertEquals("Hello, World! Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableCR_uBAU0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{(byte) 0x3D, (byte) 0x0D, (byte) 0x0A};
        byte[] expected = new byte[]{(byte) 0x20};
        assertArrayEquals(expected, QuotedPrintableCodec.decodeQuotedPrintable(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableLF_iEpK1() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{(byte) 0x3D, (byte) 0x0A};
        byte[] expected = new byte[]{(byte) 0x0A};
        assertArrayEquals(expected, QuotedPrintableCodec.decodeQuotedPrintable(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableNonCRNonLF_txFj3() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{(byte) 0x3D, (byte) 0x20};
        byte[] expected = new byte[]{(byte) 0x20};
        assertArrayEquals(expected, QuotedPrintableCodec.decodeQuotedPrintable(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNonPrintableByteStrictFalse_hZEM3() {
        BitSet printable = new BitSet();
        printable.set(0);
        byte[] bytes = new byte[]{(byte) 128};
        byte[] expected = new byte[]{(byte) 0, '='};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNegativeByteStrictFalse_EaaF5() {
        BitSet printable = new BitSet();
        printable.set(0);
        byte[] bytes = new byte[]{-1};
        byte[] expected = new byte[]{(byte) 0, '='};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableInvalidEncoding_gTqk2_rGoB0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{(byte) 0x3D, (byte) 0x0D, (byte) 0x0A, (byte) 0x0D};
        try {
            QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Invalid quoted-printable encoding", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithShortBytes_WwwR4() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{(byte) 0x20};
        byte[] expected = new byte[]{(byte) 0x20};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithEmptyBytes_TNOX5() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNegativeByte_bITd0() {
        BitSet printable = new BitSet();
        printable.set(0);
        byte[] bytes = new byte[]{-1};
        byte[] expected = new byte[]{(byte) 0, '='};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNonPrintableByte_NnyK1() {
        BitSet printable = new BitSet();
        printable.set(0);
        byte[] bytes = new byte[]{(byte) 128};
        byte[] expected = new byte[]{(byte) 128};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableByte_GRDW2() {
        BitSet printable = new BitSet();
        printable.set(0);
        byte[] bytes = new byte[]{(byte) 0};
        byte[] expected = new byte[]{(byte) 0};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNonPrintableByteStrictTrue_rGfH6() {
        BitSet printable = new BitSet();
        printable.set(0);
        byte[] bytes = new byte[]{(byte) 128};
        byte[] expected = new byte[]{(byte) 0, '='};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }
}