/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_GptE0() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int length = 4;
        int seed = 0;
        int expected = 0x12345678;
        int result = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_krfU0() throws Exception {
        byte[] data = "test".getBytes();
        int result = MurmurHash3.hash32x86(data);
        assertEquals(0x5c5c5c5c, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_ZNXa0() throws Exception {
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128("test");
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nSaG0() throws Exception {
        byte[] data = "test".getBytes();
        long result = MurmurHash3.hash64(data);
        assertEquals(0x1234567890abcdefL, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_xSgo0() throws Exception {
        long result = MurmurHash3.hash64(0x12345678);
        long expected = 0x12345678L;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64Negative_QmOA1() throws Exception {
        long result = MurmurHash3.hash64(-0x12345678);
        long expected = 0x12345678L;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64Large_OGYO2() throws Exception {
        long result = MurmurHash3.hash64(Integer.MAX_VALUE);
        long expected = 0x12345678L;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64Small_dcjY3() throws Exception {
        long result = MurmurHash3.hash64(Integer.MIN_VALUE);
        long expected = 0x12345678L;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_YTQw0() throws Exception {
        byte[] data = "test".getBytes();
        int result = MurmurHash3.hash32(data);
        assertEquals(0x12345678, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_SpRA0() throws Exception {
        long data = 1234567890L;
        long expected = 1234567890L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_ZfKp0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long[] result = MurmurHash3.hash128(data, 0, data.length, 123);
        assert result[0] == 1234567890L && result[1] == 9876543210L;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_sinR0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long result = MurmurHash3.hash64(data, 0, data.length);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_dZnn0() throws Exception {
        byte[] data = new byte[]{(byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5};
        long hash = MurmurHash3.hash64(data, 0, data.length, 123456789);
        Assertions.assertEquals(hash, 123456789);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithOffsetAndLength_NRaz1() throws Exception {
        byte[] data = new byte[]{(byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5};
        long hash = MurmurHash3.hash64(data, 1, 3, 123456789);
        Assertions.assertEquals(hash, 123456789);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_khAF1() throws Exception {
        assertEquals(0x1234567890abcdefL, MurmurHash3.hash64((short) 0x1234));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_pejT0() throws Exception {
        byte[] data = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05};
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64EmptyData_uOGS1() throws Exception {
        byte[] data = new byte[0];
        int offset = 0;
        int length = data.length;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64NullData_MjgW2() throws Exception {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        try {
            MurmurHash3.hash128x64(data, offset, length, seed);
            assert false;
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MtZk0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 8;
        int seed = 0;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32ShortLength_qIgX1() throws Exception {
        byte[] data = new byte[]{1, 2, 3};
        int offset = 0;
        int length = 3;
        int seed = 0;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_JDRW0() throws Exception {
        byte[] data = "test".getBytes();
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_qxlH1() throws Exception {
        assertEquals(123, MurmurHash3.hash32(123456789L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_DyQc0() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int expected = 123456789;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32SmallLength_GoYJ1() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34};
        int offset = 0;
        int length = 2;
        int seed = 0;
        int expected = 123456789;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_iFql0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long[] result = MurmurHash3.hash128x64(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_RnLB0() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int expected = 0x12345678;
        int result = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Jiae1() throws Exception {
        assertEquals(123456789, MurmurHash3.hash32("HelloWorld"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_XswF0() throws Exception {
        assertEquals(123456789, MurmurHash3.hash32(123456789L, 123456789));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Negative_DRHv1() throws Exception {
        assertEquals(-123456789, MurmurHash3.hash32(-123456789L, 123456789));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32Zero_jcjk2() throws Exception {
        assertEquals(0, MurmurHash3.hash32(0L, 123456789));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32LongMax_Gokg3() throws Exception {
        assertEquals(Integer.MAX_VALUE, MurmurHash3.hash32(Long.MAX_VALUE, 123456789));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32LongMin_Towp4() throws Exception {
        assertEquals(Integer.MIN_VALUE, MurmurHash3.hash32(Long.MIN_VALUE, 123456789));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_OmCW0() throws Exception {
        int result = MurmurHash3.hash32(1L, 2L, 3);
        assertEquals(123, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bYQK0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = 5;
        int expected = 12345;
        int result = MurmurHash3.hash32(data, length);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_FSbJ0() throws Exception {
        int result = MurmurHash3.hash32(1L, 2L);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_jPSU0() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 12345;
        int expected = 123456789;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86SmallLength_WelS1() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34};
        int offset = 0;
        int length = 2;
        int seed = 12345;
        int expected = 123456789;
        int result = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_uhQm0() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        int offset = 0;
        int length = data.length;
        int seed = 0x12345678;
        long[] expected = new long[]{0x1234567890123456L, 0x7890123456789012L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64SmallData_ZKCQ1() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34};
        int offset = 0;
        int length = data.length;
        int seed = 0x12345678;
        long[] expected = new long[]{0x1234567890123456L, 0x7890123456789012L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64LargeData_LhGj2() throws Exception {
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        int offset = 0;
        int length = data.length;
        int seed = 0x12345678;
        long[] expected = new long[]{0x1234567890123456L, 0x7890123456789012L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64EmptyData_qJbr3() throws Exception {
        byte[] data = new byte[0];
        int offset = 0;
        int length = data.length;
        int seed = 0x12345678;
        long[] expected = new long[]{0x1234567890123456L, 0x7890123456789012L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64NullData_eujP4() throws Exception {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 0x12345678;
        long[] expected = new long[]{0x1234567890123456L, 0x7890123456789012L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64NegativeLength_LJVD5() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34};
        int offset = 0;
        int length = -1;
        int seed = 0x12345678;
        long[] expected = new long[]{0x1234567890123456L, 0x7890123456789012L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64NegativeOffset_UcoE6() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34};
        int offset = -1;
        int length = data.length;
        int seed = 0x12345678;
        long[] expected = new long[]{0x1234567890123456L, 0x7890123456789012L};
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_UmoN1_SfGQ0_1() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int offset = 0;
        int length = 5;
        int seed = 0;
        long[] expected = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[0], 0x1234567890000000L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_UmoN1_SfGQ0_2() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int offset = 0;
        int length = 5;
        int seed = 0;
        long[] expected = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[1], 0x1234567890000000L);
    }
}