/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Test_Passing {
    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_alyc0() throws Exception {
        byte[] raw = new byte[]{(byte) 0x48, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x6f};
        String expected = "Hello";
        String result = BinaryCodec.toAsciiString(raw);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray_RWgl0() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] result = binaryCodec.toByteArray("Hello");
        byte[] expected = new byte[]{72, 101, 108, 108, 111};
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullByteArray_RFFa1() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] result = binaryCodec.toByteArray(null);
        byte[] expected = new byte[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyArray_wXeu0() throws Exception {
        byte[] array = new byte[0];
        assertTrue(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullArray_Lgkp1() throws Exception {
        byte[] array = null;
        assertTrue(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonEmptyArray_YVXI2() throws Exception {
        byte[] array = new byte[1];
        assertFalse(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_RpEv0() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] raw = {1, 2, 3};
        byte[] expected = {49, 50, 51};
        byte[] result = binaryCodec.encode(raw);
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyAscii_yevu1() throws Exception {
        byte[] result = BinaryCodec.fromAscii(new char[0]);
        assert Arrays.equals(result, new byte[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSingleAscii_IoNs2() throws Exception {
        byte[] result = BinaryCodec.fromAscii(new char[]{'1'});
        assert Arrays.equals(result, new byte[]{(byte) 0x80});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultipleAscii_HqNq3() throws Exception {
        byte[] result = BinaryCodec.fromAscii(new char[]{'1', '1', '0', '1'});
        assert Arrays.equals(result, new byte[]{(byte) 0xc0, (byte) 0x80});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsciiWithLeadingZeros_uswv4() throws Exception {
        byte[] result = BinaryCodec.fromAscii(new char[]{'0', '0', '1', '1'});
        assert Arrays.equals(result, new byte[]{(byte) 0x80});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsciiWithTrailingZeros_QjYG5() throws Exception {
        byte[] result = BinaryCodec.fromAscii(new char[]{'1', '1', '1', '0', '0', '0'});
        assert Arrays.equals(result, new byte[]{(byte) 0xc0});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidInput_dGkX0() throws Exception {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = {1, 2, 3};
        Object result = codec.encode(input);
        assertEquals("123", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInvalidInput_lbpG1() throws Exception {
        BinaryCodec codec = new BinaryCodec();
        String input = "test";
        try {
            codec.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyAscii_NNtU0() throws Exception {
        byte[] ascii = new byte[0];
        byte[] result = BinaryCodec.fromAscii(ascii);
        assert Arrays.equals(result, new byte[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSingleByteAscii_nEFs1() throws Exception {
        byte[] ascii = new byte[]{(byte) 0x80};
        byte[] result = BinaryCodec.fromAscii(ascii);
        assert Arrays.equals(result, new byte[]{(byte) 0x80});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultipleByteAscii_UJMb2() throws Exception {
        byte[] ascii = new byte[]{(byte) 0x80, (byte) 0x40};
        byte[] result = BinaryCodec.fromAscii(ascii);
        assert Arrays.equals(result, new byte[]{(byte) 0xC0});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsciiWithMultipleBits_ocMk3() throws Exception {
        byte[] ascii = new byte[]{(byte) 0x80, (byte) 0x40, (byte) 0x20};
        byte[] result = BinaryCodec.fromAscii(ascii);
        assert Arrays.equals(result, new byte[]{(byte) 0xE0});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsciiWithAllBits_rKLB4() throws Exception {
        byte[] ascii = new byte[]{(byte) 0x80, (byte) 0x40, (byte) 0x20, (byte) 0x10};
        byte[] result = BinaryCodec.fromAscii(ascii);
        assert Arrays.equals(result, new byte[]{(byte) 0xF0});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyInput_nYAM0() throws Exception {
        char[] result = BinaryCodec.toAsciiChars(new byte[0]);
        assertArrayEquals(new char[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSingleByteInput_kBxC1() throws Exception {
        char[] result = BinaryCodec.toAsciiChars(new byte[]{0x01});
        assertArrayEquals(new char[]{'1', '0', '0', '0', '0', '0', '0', '0'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiByteInput_jgBq2() throws Exception {
        char[] result = BinaryCodec.toAsciiChars(new byte[]{0x01, 0x02});
        assertArrayEquals(new char[]{'1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInputWithLeadingZeros_FKKv3() throws Exception {
        char[] result = BinaryCodec.toAsciiChars(new byte[]{0x00, 0x01});
        assertArrayEquals(new char[]{'0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInputWithTrailingZeros_FdmX4() throws Exception {
        char[] result = BinaryCodec.toAsciiChars(new byte[]{0x01, 0x00, 0x00});
        assertArrayEquals(new char[]{'1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_QKah1() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = new byte[]{1, 2, 3};
        Object result = binaryCodec.decode(ascii);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharArray_UJyD2() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        char[] ascii = new char[]{'a', 'b', 'c'};
        Object result = binaryCodec.decode(ascii);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_AEKI3() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        String ascii = "abc";
        Object result = binaryCodec.decode(ascii);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_bgLu4() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        Object ascii = new Integer(1);
        try {
            binaryCodec.decode(ascii);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyInput_lOly0() throws Exception {
        byte[] raw = new byte[0];
        byte[] expected = new byte[0];
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSingleByteInput_rhHh1() throws Exception {
        byte[] raw = new byte[]{(byte) 0x01};
        byte[] expected = new byte[]{'1'};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiByteInput_MaMB2() throws Exception {
        byte[] raw = new byte[]{(byte) 0x01, (byte) 0x02};
        byte[] expected = new byte[]{'1', '0', '1', '0'};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargeInput_jqsU3() throws Exception {
        byte[] raw = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        byte[] expected = new byte[]{'1', '0', '1', '0', '1', '0', '1', '0'};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargeInputWithZero_aotu4() throws Exception {
        byte[] raw = new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        byte[] expected = new byte[]{'0', '0', '0', '0', '1', '0', '1', '0'};
        byte[] result = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, result);
    }
}