/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8NullBytes_cSdg0() throws Exception {
        String result = StringUtils.newStringUtf8(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8Bytes_RJmP1() throws Exception {
        byte[] bytes = "Hello, World!".getBytes();
        String result = StringUtils.newStringUtf8(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_ZePb0() throws Exception {
        byte[] result = StringUtils.getBytesUtf16Le("Hello");
        byte[] expected = new byte[]{0x48, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x6f};
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_SMiC0() throws Exception {
        byte[] bytes = new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03};
        String result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_dpui0() throws Exception {
        String string = "Hello, World!";
        byte[] expected = StringUtils.getBytesIso8859_1(string);
        byte[] actual = string.getBytes(StandardCharsets.ISO_8859_1);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_UkHc0() throws Exception {
        byte[] bytes = new byte[]{(byte) 0x44, (byte) 0x65, (byte) 0x63, (byte) 0x6f, (byte) 0x64};
        String result = StringUtils.newStringUtf16(bytes);
        assert Arrays.equals(result.getBytes(StandardCharsets.UTF_16), bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8NullString_yvwM0() throws Exception {
        ByteBuffer result = StringUtils.getByteBufferUtf8(null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8ValidString_mMht1() throws Exception {
        ByteBuffer result = StringUtils.getByteBufferUtf8("Test String");
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_rVlt0() throws Exception {
        byte[] bytes = "Hello, World!".getBytes();
        String result = StringUtils.newStringIso8859_1(bytes);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNullAndNull_SahK0() throws Exception {
        assertTrue(StringUtils.equals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNullAndString_ZUbG1() throws Exception {
        assertFalse(StringUtils.equals(null, "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsStringAndNull_dbHz2() throws Exception {
        assertFalse(StringUtils.equals("test", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsTwoNull_OJIn3() throws Exception {
        assertFalse(StringUtils.equals(null, "test2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsTwoString_iedc4() throws Exception {
        assertTrue(StringUtils.equals("test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsTwoDifferentString_FpOh5() throws Exception {
        assertFalse(StringUtils.equals("test", "test2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsTwoSameStringWithSpace_dIKT7() throws Exception {
        assertTrue(StringUtils.equals("test test", "test test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUncheckedNullString_xPmZ0() throws Exception {
        byte[] result = StringUtils.getBytesUnchecked(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUncheckedValidString_HaMv1() throws Exception {
        byte[] result = StringUtils.getBytesUnchecked("Hello, World!", "UTF-8");
        byte[] expected = "Hello, World!".getBytes("UTF-8");
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Be_VxpZ0() throws Exception {
        byte[] bytes = {(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03};
        String result = StringUtils.newStringUtf16Be(bytes);
        assertEquals("\u0000\u0001\u0002\u0003", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_Zubd0() throws Exception {
        byte[] bytes = "Hello World".getBytes();
        String result = StringUtils.newStringUsAscii(bytes);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringBytesNull_NyRd0() throws Exception {
        String result = StringUtils.newString(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringBytesValid_XUqk1() throws Exception {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        String result = StringUtils.newString(bytes, "UTF-8");
        assertEquals("Hello, World!", result);
    }
}