/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Passing {
    private static MessageDigest updateDigest(MessageDigest messageDigest, File data) throws IOException {
        return messageDigest;
    }

    private static byte[] sha1(InputStream data) throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] buffer = new byte[1024];
        int len;
        while ((len = data.read(buffer)) != -1) {
            digest.update(buffer, 0, len);
        }
        return digest.digest();
    }

    private MessageDigest getSha3_384Digest() throws NoSuchAlgorithmException {
        return MessageDigest.getInstance("SHA-384");
    }

    private byte[] getExpectedSha3_224() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA3-224");
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = digest.digest(data);
        return expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_yxPm0() throws IOException, NoSuchAlgorithmException {
        File data = new File("path_to_your_file");
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] expected = DigestUtils.digest(messageDigest, data);
        byte[] actual = updateDigest(messageDigest, data).digest();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_FSyI0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-384");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = digest.digest(data);
            byte[] result = DigestUtils.sha384(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_dlCB0_1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, World!";
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_dlCB0_2() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, World!";
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertSame(messageDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_pOEa0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = DigestUtils.sha1(data);
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_LEGI0_1() throws Exception {
        MessageDigest digest = DigestUtils.getSha384Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_undl0_1() throws Exception {
        MessageDigest md = DigestUtils.getMd2Digest();
        assertNotNull(md);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_undl0_2() throws Exception {
        MessageDigest md = DigestUtils.getMd2Digest();
        assertEquals(MessageDigest.getInstance("MD2"), md);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_dmlS0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        String expected = "c0a4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4";
        assertEquals(expected, DigestUtils.sha3_512Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexNull_sXlN1() throws NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        String data = null;
        try {
            digestUtils.digestAsHex(data);
            assert false;
        } catch (NullPointerException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_Socb0() throws Exception {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = md.digest(data);
            byte[] result = DigestUtils.sha256(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_MwKJ0() throws Exception {
        MessageDigest messageDigest = DigestUtils.getSha3_512Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512DigestThrowsException_xWpB1() throws Exception {
        assertThrows(NoSuchAlgorithmException.class, () -> DigestUtils.getSha3_512Digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_sWsx0() throws Exception {
        String data = "Hello, World!";
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = DigestUtils.sha1Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_WEEZ0() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        File file = new File("path_to_your_file");
        byte[] expectedDigest = digestUtils.digest(file);
        assertNotNull(expectedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_aCwD0_1() throws Exception {
        MessageDigest digest = DigestUtils.getSha1Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Null_gygM3() throws Exception {
        InputStream data = null;
        try {
            DigestUtils.md2(data);
        } catch (IOException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_KbeL0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getDigest("SHA-256");
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_llMO0() throws Exception {
        MessageDigest shaDigest = DigestUtils.getShaDigest();
        assertEquals(MessageDigest.getInstance("SHA-1"), shaDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_cNMx0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigestWithDigest_scOK1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        MessageDigest result = digestUtils.getMessageDigest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigestWithName_jwcp2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest result = digestUtils.getMessageDigest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_LlbL0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        byte[] result = digestUtils.digest(data);
        byte[] expected = messageDigest.digest(data.array());
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_LlbL0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        byte[] result = digestUtils.digest(data);
        byte[] expected = messageDigest.digest(data.array());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_LlbL0_3() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        byte[] result = digestUtils.digest(data);
        byte[] expected = messageDigest.digest(data.array());
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithName_bkmh2_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        byte[] result = digestUtils.digest(data);
        byte[] expected = messageDigest.digest(data.array());
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithName_bkmh2_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        byte[] result = digestUtils.digest(data);
        byte[] expected = messageDigest.digest(data.array());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithName_bkmh2_3() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        byte[] result = digestUtils.digest(data);
        byte[] expected = messageDigest.digest(data.array());
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_Szir0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestEmptyData_grui3() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("empty.txt", "r");
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestLargeData_AeAd4() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("large.txt", "r");
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestMultipleCalls_YsDz5() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        byte[] result1 = DigestUtils.digest(messageDigest, data);
        byte[] result2 = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestDifferentAlgorithms_fEOs6() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigestSHA256 = MessageDigest.getInstance("SHA-256");
        MessageDigest messageDigestSHA512 = MessageDigest.getInstance("SHA-512");
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        byte[] resultSHA256 = DigestUtils.digest(messageDigestSHA256, data);
        byte[] resultSHA512 = DigestUtils.digest(messageDigestSHA512, data);
        assertNotEquals(resultSHA256, resultSHA512);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestDifferentData_AoTg7() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data1 = new RandomAccessFile("test1.txt", "r");
        RandomAccessFile data2 = new RandomAccessFile("test2.txt", "r");
        byte[] result1 = DigestUtils.digest(messageDigest, data1);
        byte[] result2 = DigestUtils.digest(messageDigest, data2);
        assertNotEquals(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestSameDataSameSize_sVPw9() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data1 = new RandomAccessFile("test.txt", "r");
        RandomAccessFile data2 = new RandomAccessFile("test.txt", "r");
        byte[] result1 = DigestUtils.digest(messageDigest, data1);
        byte[] result2 = DigestUtils.digest(messageDigest, data2);
        assertArrayEquals(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_GSzv0_1() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = messageDigest.digest(data);
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_GSzv0_2() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = messageDigest.digest(data);
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384NullInputStream_UvXY3() throws Exception {
        InputStream data = null;
        try {
            DigestUtils.sha384(data);
        } catch (IOException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_vxMd0_1() throws Exception {
        MessageDigest result = DigestUtils.getSha3_224Digest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_vxMd0_2() throws Exception {
        MessageDigest result = DigestUtils.getSha3_224Digest();
        assertSame(MessageDigest.getInstance("SHA3-224"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_kRoo0() throws Exception {
        String data = "Hello World";
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        assertEquals(expected, DigestUtils.sha256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_DJUm0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-1");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = digest.digest(data);
            byte[] result = DigestUtils.sha(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_NCbV1() throws IOException {
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        try {
            DigestUtils.updateDigest(null, data);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("digest is null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_dpLJ0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-512");
            byte[] data = "Test String".getBytes();
            byte[] result = DigestUtils.sha3_512(data);
            byte[] expected = digest.digest(data);
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_uxcN0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] expected = messageDigest.digest(data.array());
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_OnJt2() throws Exception {
        try {
            DigestUtils.digest(null, ByteBuffer.wrap("Hello, World!".getBytes()));
            assert false;
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_CBxb0() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA3-384");
        byte[] data = digest.digest("Hello, World!".getBytes());
        String result = DigestUtils.sha3_384Hex(data);
        assert result.equals("e1d4a5f5e3a4b5c6d7e8f9g0h1i2j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z9a0b1c2d3e4f5g6h7i8j9k0l1m2n3o4p5q6r7s8t9u0v1w2x3y4z5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_DpBM0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        String expected = "a2f4e";
        String result = DigestUtils.md2Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_rMqr0() throws Exception {
        try {
            MessageDigest md = MessageDigest.getInstance("MD2");
            String data = "Hello";
            String expected = "90e611e3e5d4f1f4";
            String result = DigestUtils.md2Hex(data);
            assertEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_jrOg0() throws Exception {
        MessageDigest actual = DigestUtils.getSha512Digest();
        assertEquals(MessageDigest.getInstance("SHA-512"), actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_jJTV0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "5a5f7f5a5f7f5a5f7f5a5f7f5a5f7f5a5f7f";
        String result = DigestUtils.sha384Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_UjiT0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-512");
            byte[] data = "Test String".getBytes();
            byte[] expected = digest.digest(data);
            byte[] result = DigestUtils.sha512_224(data);
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_qQqA0_1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("HelloWorld".getBytes());
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_qQqA0_2() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("HelloWorld".getBytes());
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertSame(messageDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_eGDv0() throws Exception {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = messageDigest.digest(data);
            byte[] result = DigestUtils.sha512(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithValidAlgorithm_QNsx0() throws Exception {
        String messageDigestAlgorithm = "SHA-256";
        boolean result = DigestUtils.isAvailable(messageDigestAlgorithm);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithInvalidAlgorithm_xdps1() throws Exception {
        String messageDigestAlgorithm = "InvalidAlgorithm";
        boolean result = DigestUtils.isAvailable(messageDigestAlgorithm);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_Uesd0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-384");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = digest.digest(data);
            byte[] result = DigestUtils.sha3_384(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_YkvP0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA3-224");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = DigestUtils.sha3_224(data);
            assert Arrays.equals(digest.digest(data), result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_bSen0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = DigestUtils.sha3_256(data);
            byte[] expected = digest.digest(data);
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            assert false;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_XGWh0() throws Exception {
        try {
            MessageDigest md = MessageDigest.getInstance("MD2");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = md.digest(data);
            byte[] result = DigestUtils.md2(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_cqvj0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
            byte[] data = "Test String".getBytes();
            byte[] hash = digest.digest(data);
            String expected = "a5bbd5a8a6e5a5a5a5a5a5a5a5a5a5a5a5a5a5";
            assertEquals(expected, DigestUtils.sha3_256Hex(hash));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Null_mXut1() throws Exception {
        InputStream data = null;
        try {
            DigestUtils.md5(data);
        } catch (IOException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_yLDK0() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello World".getBytes();
        byte[] hash = messageDigest.digest(data);
        assertEquals("aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d", DigestUtils.sha1Hex(hash));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_jnNC0() throws Exception {
        String data = "Hello World";
        String result = DigestUtils.md5Hex(data);
        String expected = "5d41402abc4b2a76b9719d911017c592";
        assert result.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_fsAJ0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-512");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = digest.digest(data);
            byte[] result = DigestUtils.sha512_256(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_dtWK0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-3-512");
        String data = "Hello, World!";
        String expected = "9f86d08184c7d659a2feaa0c55ad34ab";
        String result = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_OQth0() throws Exception {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_bzpK0_1() throws Exception {
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest result = DigestUtils.getDigest("SHA-256", defaultMessageDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_bzpK0_2() throws Exception {
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest result = DigestUtils.getDigest("SHA-256", defaultMessageDigest);
        assertEquals("SHA-256", result.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestException_NWSj1_1() throws Exception {
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest result = DigestUtils.getDigest("InvalidAlgorithm", defaultMessageDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestException_NWSj1_2() throws Exception {
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest result = DigestUtils.getDigest("InvalidAlgorithm", defaultMessageDigest);
        assertEquals("SHA-256", result.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_MWTE0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = DigestUtils.sha512Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_EWWM0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        String expected = "a2f4d7f5";
        String result = digestUtils.digestAsHex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithMessageDigest_LFyA1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        String expected = "a2f4d7f5";
        String result = digestUtils.digestAsHex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithName_OkpP2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.wrap(new byte[]{1, 2, 3, 4, 5});
        String expected = "a2f4d7f5";
        String result = digestUtils.digestAsHex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_afEd0() throws Exception {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD2");
            byte[] result = DigestUtils.md2("Hello, World!");
            assertNotNull(result);
            assertArrayEquals(digest.digest(StringUtils.getBytesUtf8("Hello, World!")), result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_FMps0() throws Exception {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] data = "Hello, World!".getBytes();
            byte[] result = DigestUtils.md5(data);
            byte[] expected = md.digest(data);
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_CIFK0() throws Exception {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_uZyF0() throws Exception {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_vnzM0() throws Exception {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
            byte[] data = "Hello, World!".getBytes();
            byte[] expected = messageDigest.digest(data);
            byte[] result = DigestUtils.sha1(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_ZILs0_1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        String data = "Hello, World!";
        byte[] expected = digestUtils.digest(data).clone();
        byte[] actual = messageDigest.digest(data.getBytes());
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_ZILs0_2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        String data = "Hello, World!";
        byte[] expected = digestUtils.digest(data).clone();
        byte[] actual = messageDigest.digest(data.getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_snaJ1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        String data = "Hello, World!";
        byte[] expected = digestUtils.digest(data).clone();
        byte[] actual = messageDigest.digest(data.getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithName_FsAk2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello, World!";
        byte[] expected = digestUtils.digest(data).clone();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        byte[] actual = messageDigest.digest(data.getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_Kqzn0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            byte[] result = digestUtils.digest(messageDigest.digest("HelloWorld".getBytes()));
            byte[] expected = messageDigest.digest("HelloWorld".getBytes());
            assert Arrays.equals(result, expected);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDigestUtils_wgXa1() throws Exception {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        byte[] result = digestUtils.digest("HelloWorld".getBytes());
        byte[] expected = MessageDigest.getInstance("SHA-256").digest("HelloWorld".getBytes());
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDigestUtilsName_VUCj2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] result = digestUtils.digest("HelloWorld".getBytes());
        byte[] expected = MessageDigest.getInstance("SHA-256").digest("HelloWorld".getBytes());
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_LtBO0() throws Exception {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_ZKrx1_1() throws Exception {
        MessageDigest md = DigestUtils.getMd5Digest();
        assertNotNull(md);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_ZKrx1_2() throws Exception {
        MessageDigest md = DigestUtils.getMd5Digest();
        assertSame(MessageDigest.getInstance("MD5"), md);
    }
}