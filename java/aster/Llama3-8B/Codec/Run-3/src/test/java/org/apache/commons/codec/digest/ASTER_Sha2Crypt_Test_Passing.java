/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.nio.charset.StandardCharsets;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Sha2Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_BbRu0() throws Exception {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "your expected hash";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_CLqI0() throws Exception {
        byte[] keyBytes = "password".getBytes();
        String salt = "salt";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptNullSalt_foNC1() throws Exception {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_HIeY0() throws Exception {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "your expected result";
        String result = Sha2Crypt.sha512Crypt(keyBytes);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_koYA0() throws Exception {
        byte[] keyBytes = "testKey".getBytes();
        String salt = "testSalt";
        Random random = new Random();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
        System.out.println("Sha2Crypt.sha256Crypt(keyBytes, salt, random) = " + result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptNullSalt_SeZf1() throws Exception {
        byte[] keyBytes = "testKey".getBytes();
        String salt = null;
        Random random = new Random();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
        System.out.println("Sha2Crypt.sha256Crypt(keyBytes, salt, random) = " + result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_dLYO0() throws Exception {
        byte[] keyBytes = "testKey".getBytes(StandardCharsets.UTF_8);
        String salt = "testSalt";
        String expected = "$6$testSalt$..."; // actual hash value
        String actual = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptNullSalt_drvl1() throws Exception {
        byte[] keyBytes = "testKey".getBytes(StandardCharsets.UTF_8);
        String actual = Sha2Crypt.sha512Crypt(keyBytes, null);
        String expected = "$6$...$..."; // actual hash value
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_NvYO0() throws Exception {
        byte[] keyBytes = "testKey".getBytes();
        String salt = "testSalt";
        Random random = new Random();
        String expected = "expectedHash";
        String actual = Sha2Crypt.sha512Crypt(keyBytes, salt, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptNullSalt_GLgy1() throws Exception {
        byte[] keyBytes = "testKey".getBytes();
        Random random = new Random();
        String expected = "expectedHash";
        String actual = Sha2Crypt.sha512Crypt(keyBytes, null, random);
        assertEquals(expected, actual);
    }
}