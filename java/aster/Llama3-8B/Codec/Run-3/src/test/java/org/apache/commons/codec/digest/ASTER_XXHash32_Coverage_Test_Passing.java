/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_XXHash32_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_lFso0() {
        XXHash32 xxHash32 = new XXHash32();
        byte[] b = new byte[16];
        b[0] = 1;
        b[1] = 2;
        b[2] = 3;
        b[3] = 4;
        b[4] = 5;
        b[5] = 6;
        b[6] = 7;
        b[7] = 8;
        b[8] = 9;
        b[9] = 10;
        b[10] = 11;
        b[11] = 12;
        b[12] = 13;
        b[13] = 14;
        b[14] = 15;
        b[15] = 16;
        xxHash32.update(b, 0, 16);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithOffset_ftZa1() {
        XXHash32 xxHash32 = new XXHash32();
        byte[] b = new byte[16];
        b[0] = 1;
        b[1] = 2;
        b[2] = 3;
        b[3] = 4;
        b[4] = 5;
        b[5] = 6;
        b[6] = 7;
        b[7] = 8;
        b[8] = 9;
        b[9] = 10;
        b[10] = 11;
        b[11] = 12;
        b[12] = 13;
        b[13] = 14;
        b[14] = 15;
        b[15] = 16;
        xxHash32.update(b, 4, 12);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithLengthZero_UjLV2() {
        XXHash32 xxHash32 = new XXHash32();
        byte[] b = new byte[16];
        xxHash32.update(b, 0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithLengthNegative_XWBy3() {
        XXHash32 xxHash32 = new XXHash32();
        byte[] b = new byte[16];
        xxHash32.update(b, 0, -1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithBuffer_LhvZ4() {
        XXHash32 xxHash32 = new XXHash32();
        byte[] b = new byte[16];
        b[0] = 1;
        b[1] = 2;
        b[2] = 3;
        b[3] = 4;
        xxHash32.update(b, 0, 4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithBufferAndOffset_ytmD5() {
        XXHash32 xxHash32 = new XXHash32();
        byte[] b = new byte[16];
        b[0] = 1;
        b[1] = 2;
        b[2] = 3;
        b[3] = 4;
        xxHash32.update(b, 2, 4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_StateUpdated_qGuj0_Ncjf0() {
        XXHash32 xxHash32 = new XXHash32(123);
        xxHash32.update(1);
        xxHash32.update(2);
        xxHash32.update(3);
        xxHash32.update(4);
        xxHash32.update(5);
        xxHash32.update(6);
        xxHash32.update(7);
        xxHash32.update(8);
        xxHash32.update(9);
        xxHash32.update(10);
        long result = xxHash32.getValue();
    }
}