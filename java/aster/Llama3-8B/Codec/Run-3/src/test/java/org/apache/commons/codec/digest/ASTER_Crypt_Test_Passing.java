/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ZGTs0() throws Exception {
        String result = Crypt.crypt("key");
        assertEquals("expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_YqhQ0() throws Exception {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5};
        String result = Crypt.crypt(keyBytes);
        assertEquals("Expected result", null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_PWwI0() throws Exception {
        byte[] keyBytes = new byte[16];
        String result = Crypt.crypt(keyBytes, null);
        assertEquals(Sha2Crypt.sha512Crypt(keyBytes), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithSalt_MTIb1() throws Exception {
        byte[] keyBytes = new byte[16];
        String salt = Sha2Crypt.SHA512_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertEquals(Sha2Crypt.sha512Crypt(keyBytes, salt), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_MOlD2() throws Exception {
        byte[] keyBytes = new byte[16];
        String result = Crypt.crypt(keyBytes, Sha2Crypt.SHA256_PREFIX + "salt");
        assertEquals(Sha2Crypt.sha256Crypt(keyBytes, Sha2Crypt.SHA256_PREFIX + "salt"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_ROFS3() throws Exception {
        byte[] keyBytes = new byte[16];
        String result = Crypt.crypt(keyBytes, Md5Crypt.MD5_PREFIX + "salt");
        assertEquals(Md5Crypt.md5Crypt(keyBytes, Md5Crypt.MD5_PREFIX + "salt"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixCrypt_XkYf4() throws Exception {
        byte[] keyBytes = new byte[16];
        String result = Crypt.crypt(keyBytes, "salt");
        assertEquals(UnixCrypt.crypt(keyBytes, "salt"), result);
    }
}