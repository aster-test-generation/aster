/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_sYhH0() throws Exception {
        byte[] pArray = Base64.decodeBase64("AQIDBA==".getBytes());
        BigInteger result = Base64.decodeInteger(pArray);
        assertEquals(new BigInteger("123"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_EPyp0() throws Exception {
        String base64String = "SGVsbG8gd29ybGQ=";
        byte[] expected = new byte[]{104, 111, 111, 108, 101, 32, 100, 101, 110, 97, 108, 108, 111};
        byte[] result = Base64.decodeBase64(base64String);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_PjlU0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        String expected = "AQIDBA==";
        String result = Base64.encodeBase64String(binaryData);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_bUOI0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        String expected = "YWJjZA==";
        String result = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_LUIK0() throws Exception {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{(byte) 0x42, (byte) 0x6d, (byte) 0x6f};
        byte[] result = Base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_cZmx0() throws Exception {
        BigInteger bigInteger = new BigInteger("12345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] result = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_Tivq0() throws Exception {
        Base64 base64 = new Base64(true);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeFalse_XKFM1() throws Exception {
        Base64 base64 = new Base64(false);
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeDefault_Fjev2() throws Exception {
        Base64 base64 = new Base64();
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeWithLineLength_lMtt3() throws Exception {
        Base64 base64 = new Base64(10);
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeWithLineLengthAndSeparator_lxvy4() throws Exception {
        Base64 base64 = new Base64(10, new byte[0]);
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeWithLineLengthAndSeparatorAndUrlSafe_wsAF5() throws Exception {
        Base64 base64 = new Base64(10, new byte[0], true);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeWithLineLengthAndSeparatorAndPolicy_czeT6() throws Exception {
        Base64 base64 = new Base64(10, new byte[0], false, CodecPolicy.STRICT);
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_tIPr0() throws Exception {
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] result = Base64.encodeBase64(binaryData, true);
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        assert Arrays.equals(result, expected.getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidBase64_eAef0() throws Exception {
        assertTrue(Base64.isBase64("SGVsbG8gd29ybGQ="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvalidBase64_jxkG1() throws Exception {
        assertFalse(Base64.isBase64("SGVsbG8d29ybGQ="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyBase64_EFri2() throws Exception {
        assertFalse(Base64.isBase64(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonBase64_URsn4() throws Exception {
        assertFalse(Base64.isBase64("Hello World"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_CPrU0() throws Exception {
        byte[] arrayOctet = Base64.encodeBase64("Hello World".getBytes());
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64NotBase64_Rbyl1() throws Exception {
        byte[] arrayOctet = "Hello World".getBytes();
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64Null_zzJz2() throws Exception {
        byte[] arrayOctet = null;
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64Empty_dRsO3() throws Exception {
        byte[] arrayOctet = new byte[0];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_sluK0() throws Exception {
        byte[] binaryData = "Hello, World!".getBytes();
        byte[] expected = Base64.encodeBase64URLSafe(binaryData);
        byte[] actual = Base64.encodeBase64(binaryData, false, true);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvalidBase64_coES1() throws Exception {
        byte[] arrayOctet = "SGVsbG8gd29ybGQ=".getBytes();
        assert !Base64.isBase64(arrayOctet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullBase64_nTay2() throws Exception {
        byte[] arrayOctet = null;
        assert !Base64.isBase64(arrayOctet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyBase64_oYfI3() throws Exception {
        byte[] arrayOctet = new byte[0];
        assert Base64.isBase64(arrayOctet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBase64_Rhfl0() throws Exception {
        assertTrue(Base64.isBase64(Base64.PAD_DEFAULT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetStrict_bKZP0() throws Exception {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte octet = 0;
        assertTrue(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetDecodeTable_gnzj2() throws Exception {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte octet = 65;
        assertTrue(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetDecodeTableNegative_OgVG3() throws Exception {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true, CodecPolicy.STRICT);
        byte octet = -1;
        assertFalse(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_LOIt0() throws Exception {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_sByQ1() throws Exception {
        BigInteger bigInt = new BigInteger("123456789012345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes3_RcXq2() throws Exception {
        BigInteger bigInt = new BigInteger("1234567890123456789012345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes4_Hcmf3() throws Exception {
        BigInteger bigInt = new BigInteger("12345678901234567890123456789012345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56};
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_XVuU0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] result = Base64.encodeBase64(binaryData, false, false, 1024);
        byte[] expected = new byte[]{(byte) 'A', (byte) 'Q', (byte) 'g'};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_eUZZ1() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6};
        byte[] result = Base64.encodeBase64(binaryData, true, false, 1024);
        byte[] expected = new byte[]{(byte) 'A', (byte) 'Q', (byte) 'g', (byte) 'w'};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_kNYp6_hWWX0() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, true, CodecPolicy.STRICT);
        byte[] result = base64.getLineSeparator();
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, result);
    }

    @Test
    public void testGetLineSeparator2_vSmD1_HPtP0() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3});
        byte[] result = base64.getLineSeparator();
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, result);
    }

    @Test
    public void testGetLineSeparator8_CkQr7_cEBl0() throws Exception {
        CodecPolicy codecPolicy = CodecPolicy.LENIENT;
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, true, codecPolicy);
        byte[] result = base64.getLineSeparator();
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator10_UGMH9_NTRA0() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, false, CodecPolicy.LENIENT);
        byte[] result = base64.getLineSeparator();
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, result);
    }
}