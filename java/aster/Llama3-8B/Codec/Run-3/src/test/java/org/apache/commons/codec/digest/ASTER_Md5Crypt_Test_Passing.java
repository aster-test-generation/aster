/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Md5Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ULeu0() throws Exception {
        String result = Md5Crypt.apr1Crypt("key".getBytes());
        assert result.startsWith("apr1:");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_KplR0() throws Exception {
        byte[] keyBytes = "testKey".getBytes();
        String salt = "testSalt";
        String expected = "md5$rounds=1000$testSalt$9f86d0816f7b4d7a8a2f4d2d9e6c2a";
        String result = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_CmUR0() throws Exception {
        String keyBytes = "testKey";
        String expected = "$apr1$testKey$";
        String result = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_UtwN0() throws Exception {
        byte[] keyBytes = "test".getBytes();
        String result = Md5Crypt.md5Crypt(keyBytes);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_OGGj0() throws Exception {
        byte[] keyBytes = new byte[16];
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        System.out.println(Md5Crypt.md5Crypt(keyBytes, random));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_pNBX0() throws Exception {
        byte[] keyBytes = new byte[16];
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt(keyBytes, random);
        assert true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ymCU0() throws Exception {
        String keyBytes = "testKey";
        String salt = "testSalt";
        String expected = "testExpected";
        String result = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidSalt_cWoZ0() throws Exception {
        String salt = "salt";
        byte[] keyBytes = new byte[]{(byte) 1, (byte) 2, (byte) 3, (byte) 4};
        String result = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals("some expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidSalt_badi2() throws Exception {
        String salt = "invalid";
        byte[] keyBytes = new byte[]{(byte) 1, (byte) 2, (byte) 3, (byte) 4};
        String result = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals("some expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_OyUn0() throws Exception {
        String salt = "12345678";
        String prefix = "$1$";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("$1$12345678$...", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptNullSalt_mxgw1() throws Exception {
        String salt = null;
        String prefix = "$1$";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("$1$...$...", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptInvalidSalt_AeZF2() throws Exception {
        String salt = "invalid";
        String prefix = "$1$";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (IllegalArgumentException e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptyKeyBytes_Kwje3() throws Exception {
        String salt = "12345678";
        String prefix = "$1$";
        byte[] keyBytes = new byte[0];
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptNullKeyBytes_rrgQ4() throws Exception {
        String salt = "12345678";
        String prefix = "$1$";
        byte[] keyBytes = null;
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptEmptyPrefix_ipfs5() throws Exception {
        String salt = "12345678";
        String prefix = "";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("$...$...", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptNullPrefix_WdDT6() throws Exception {
        String salt = "12345678";
        String prefix = null;
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        try {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptRandomSalt_VIsT7() throws Exception {
        String salt = "randomsalt";
        String prefix = "$1$";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("$1$randomsalt$...", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptMultipleCalls_aDfx8() throws Exception {
        String salt = "12345678";
        String prefix = "$1$";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result1 = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        String result2 = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptDifferentKeyBytes_AfnJ9() throws Exception {
        String salt = "12345678";
        String prefix = "$1$";
        byte[] keyBytes1 = "password".getBytes();
        byte[] keyBytes2 = "newpassword".getBytes();
        Random random = new Random();
        String result1 = Md5Crypt.md5Crypt(keyBytes1, salt, prefix, random);
        String result2 = Md5Crypt.md5Crypt(keyBytes2, salt, prefix, random);
        assertEquals(!result1.equals(result2), true);
    }
}