/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyString_HDQY1() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeValidString_JEty2() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("Hello, World!");
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlInvalidEscapeSequence_sIHZ1() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = "+Hello%20World!%".getBytes();
        DecoderException exception = assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(bytes));
        assert exception.getMessage().equals("Invalid URL encoding: ");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlNullInput_zxOr3() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = null;
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlEmptyInput_pqYP4() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[0];
        byte[] result = URLCodec.decodeUrl(bytes);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArrayInput_ImpH2() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] byteArray = new byte[]{1, 2, 3};
        Object result = urlCodec.encode(byteArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringInput_yNuE3() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String str = "Hello World";
        Object result = urlCodec.encode(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testObjectInput_EmqT4() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        Object obj = new Object();
        try {
            urlCodec.encode(obj);
        } catch (EncoderException e) {
            assertEquals("Objects of type " + obj.getClass().getName() + " cannot be URL encoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyString_kvhd1() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidString_aVNQ2() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlNotNullUrlSafe_apcV1() {
        byte[] bytes = new byte[]{(byte) 0, (byte) 1, (byte) 2};
        byte[] result = URLCodec.encodeUrl(new BitSet(), bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullInput_pmNH0_gIJH1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String result = urlCodec.encode(null, "UTF-8");
        assertNull(result);
    }
}