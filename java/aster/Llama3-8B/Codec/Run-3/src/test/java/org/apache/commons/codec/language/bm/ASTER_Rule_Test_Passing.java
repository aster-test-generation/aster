/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Rule_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_IefI0() throws Exception {
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, "English");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMapNull_jeRR1() throws Exception {
        try {
            Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, "NonExistingLanguage");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("No rules found for ASHKENAZI, EXACT, NonExistingLanguage.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceAshkenaziExactHebrew_dguo0() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        String lang = "he";
        List<Rule> result = Rule.getInstance(nameType, rt, lang);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceSephardicApproxEnglish_iuDP1() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.APPROX;
        String lang = "en";
        List<Rule> result = Rule.getInstance(nameType, rt, lang);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceGenericRulesFrench_OHsr2() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.RULES;
        String lang = "fr";
        List<Rule> result = Rule.getInstance(nameType, rt, lang);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Approx_EmptyLanguageSet_okfz0() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Generic_Exact_NonEmptyLanguageSet_GAZQ1_1() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Generic_Exact_NonEmptyLanguageSet_GAZQ1_2() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Rules_NonEmptyLanguageSet_JFch2_1() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Rules_NonEmptyLanguageSet_JFch2_2() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Approx_NonEmptyLanguageSet_EGXg3_1() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Approx_NonEmptyLanguageSet_EGXg3_2() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Generic_Approx_EmptyLanguageSet_dkFM4() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Exact_NonEmptyLanguageSet_fEPB5_1() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Exact_NonEmptyLanguageSet_fEPB5_2() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Rules_NonEmptyLanguageSet_fePy6_1() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Rules_NonEmptyLanguageSet_fePy6_2() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Generic_Rules_EmptyLanguageSet_RWeq7() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Approx_NonEmptyLanguageSet_Lkyo8_1() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Sephardic_Approx_NonEmptyLanguageSet_Lkyo8_2() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("lang1", "lang2")));
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertNotEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Ashkenazi_Exact_EmptyLanguageSet_oYZh9() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, rt, langs);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Singleton_LanguageSet_Null_ZLTX6() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = null;
        try {
            Rule.getInstanceMap(nameType, rt, langs);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_NonSingleton_LanguageSet_Null_UlNC7() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = null;
        try {
            Rule.getInstanceMap(nameType, rt, langs);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Singleton_EmptyLanguageSet_Null_bNHL8() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = null;
        try {
            Rule.getInstanceMap(nameType, rt, langs);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
}