/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_lzNc0() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        byte[] data = "Hello, World!".getBytes();
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = DigestUtils.shaHex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_epuY0() {
        String data = "Hello, World!";
        String expected = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = DigestUtils.shaHex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_fouI0_jxIl0_1() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_fouI0_jxIl0_2() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertSame(digest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_kMmA0_QpIb0() throws IOException {
        String expected = "SHA-1 hash";
        byte[] data = "Test data".getBytes();
        String result = DigestUtils.shaHex(data);
        assertEquals(expected, result);
    }
}