/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingStrictDecodingPolicy_Gccl0() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertTrue(codec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingLenientDecodingPolicy_ClHf1() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertFalse(codec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_yOGB0() throws Exception {
        BCodec codec = new BCodec();
        assertEquals("B", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharset_kzXr1() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        assertEquals("B", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetAndDecodingPolicy_RNpL2() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertEquals("B", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetName_mwVk3() throws Exception {
        BCodec codec = new BCodec("UTF-8");
        assertEquals("B", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullBytes_DPui1() throws Exception {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        byte[] result = codec.doEncoding(null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringStrictPolicy_Pzyx0() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        Object result = codec.decode("Hello");
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_lMCC1() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        Object result = codec.decode(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonStringObject_FEWP2() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        assertThrows(DecoderException.class, () -> codec.decode(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vWWB0() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String result = codec.encode("Hello, World!", Charset.forName("UTF-8"));
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStrict_kvxY0() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String value = "Hello, World!";
        String result = codec.decode(value);
        assert result.equals(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeLenient_THZm1() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String value = "Hello, World!";
        String result = codec.decode(value);
        assert result.equals(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_KCqj2() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String value = null;
        try {
            String result = codec.decode(value);
            assert false;
        } catch (DecoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmpty_LfYz3() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String value = "";
        String result = codec.decode(value);
        assert result.equals(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalid_NAiW4() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String value = "Invalid";
        try {
            String result = codec.decode(value);
            assert false;
        } catch (DecoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_gBUx0() throws Exception {
        BCodec codec = new BCodec();
        Object result = codec.encode(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_MYUX1() throws Exception {
        BCodec codec = new BCodec();
        String value = "Hello";
        Object result = codec.encode(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_ZGru2() throws Exception {
        BCodec codec = new BCodec();
        Object value = new Object();
        try {
            codec.encode(value);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_DKjo0() throws Exception {
        BCodec codec = new BCodec("UTF-8");
        String result = codec.encode("Hello, World!", "UTF-8");
        assert result.equals("SGVsbG8sIFdvcmxkIQ==");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_bIed0() throws Exception {
        BCodec codec = new BCodec("UTF-8");
        String result = codec.encode("Hello, World!");
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_zKft1() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String result = codec.encode("Hello, World!");
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndPolicy_CROe2() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String result = codec.encode("Hello, World!");
        assertEquals("Hello, World!", result);
    }
}