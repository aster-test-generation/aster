/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonStringParameter_FHHm0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        Object obj = new Integer(1);
        try {
            doubleMetaphone.encode(obj);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("DoubleMetaphone encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidStringParameter_NEiW1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String obj = "test";
        Object result = doubleMetaphone.encode(obj);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaccia_qKfx2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Caccia", false);
        assertEquals("KX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCio_eYJw2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Cio", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCia_yBMu3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Cia", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneK_zdpE1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Kirk", false);
        assertEquals("KRK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsVanOrVon_Basu0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Vander";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsSch_lbqP1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Schenck";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsOrchesOrArchitOrOrchid_JymT2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Orchid";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsTOrS_ASXk3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Torch";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsTRNMbHfVwSpace_MmIF4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Train";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMc_FQIn0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("McDonald", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneK_eFmW1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Kirk", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithQ_BEjG3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CQ", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithSpace_MoLG1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone(" C", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQWithSpace_QbUd2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone(" Q", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGWithSpace_uQZD3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone(" G", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCeAndCi_kEho4_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Ce", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCeAndCi_kEho4_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Ci", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsValueFalse_Eqdv3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILL";
        boolean result = doubleMetaphone.contains(value, 0, 4, "ILLO", "ILLA", "ALLE");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithConditionL0True_mvxX0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Llama", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneL0_sMTu0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Lillo", false);
        assertEquals("LL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMA_tiqM1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Mae", true);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithHAfterP_AWeN0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Phoe", false);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithoutSlavoGermanic_YsLI2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Test", true);
        assertEquals("TST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_FnBC3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Test", false);
        assertEquals("TST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_xedQ4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, true);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndNotEREN_LWCG2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("school", false);
        assertEquals("SKL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithI_djNo3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("sci", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithNotI_IwYD4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("sck", false);
        assertEquals("SK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneIndexZero_aExb0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "S";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsHEIM_OMaX0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "HEIM";
        boolean slavoGermanic = true;
        assertEquals("HM", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsHOEK_gozX1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "HOEK";
        boolean slavoGermanic = true;
        assertEquals("HK", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSlavoGermanicSIO_FjIN4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIO";
        boolean slavoGermanic = true;
        assertEquals("S", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSlavoGermanicSIA_pOHq5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIA";
        boolean slavoGermanic = true;
        assertEquals("S", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsZ_yNhl10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SZ";
        boolean slavoGermanic = true;
        assertEquals("S", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG13_Dyyx12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Kneeless";
        boolean slavoGermanic = false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH2_Tdze1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("laugh", false);
        assertEquals("LF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH3_vpKE2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("cough", false);
        assertEquals("KF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH4_VEAo3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("gough", false);
        assertEquals("KF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH5_ZDRS4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("rough", false);
        assertEquals("RF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH6_KkNB5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("tough", false);
        assertEquals("TF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG10_LiZm17() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionC0_False_knxA1_uVcD0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHIE";
        doubleMetaphone.setMaxCodeLen(1);
        boolean result = doubleMetaphone.getMaxCodeLen() > 0;
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionC0_AfterACH_KzXF3_nrdB0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "BACHER";
        doubleMetaphone.setMaxCodeLen(0);
        boolean result = doubleMetaphone.getMaxCodeLen() == 0;
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionC0_NotACH_adDE5_lEKx0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHIC";
        doubleMetaphone.setMaxCodeLen(0);
        boolean result = doubleMetaphone.getMaxCodeLen() == 0;
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG1_PdHg0_LAyT0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hank";
        boolean slavoGermanic = false;
        doubleMetaphone.setMaxCodeLen(7);
        String result = doubleMetaphone.doubleMetaphone(value, slavoGermanic);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG3_gvqc2_tdXm0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knoll";
        boolean slavoGermanic = false;
        doubleMetaphone.setMaxCodeLen(4);
        String result = doubleMetaphone.doubleMetaphone(value, slavoGermanic);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG5_SvrS4_gKCb0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knee";
        boolean slavoGermanic = false;
        doubleMetaphone.setMaxCodeLen(7);
        String result = doubleMetaphone.doubleMetaphone(value, slavoGermanic);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG11_DzwL10_yiCb0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Kneeled";
        boolean slavoGermanic = false;
        doubleMetaphone.setMaxCodeLen(7);
        String result = doubleMetaphone.doubleMetaphone(value, slavoGermanic);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCeAndCi_kEho4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("Ce", false));
        assertEquals("S", doubleMetaphone.doubleMetaphone("Ci", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithHaris_UnSO0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("HARIS", false);
        assertEquals("HRS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithChore_BrcE1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CHORE", false);
        assertEquals("XR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWicz_ZJZl0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Wicz", false);
        assertEquals("AKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFocus_LREm1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Focus", false);
        assertEquals("FKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWicz_vrcQ0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Wicz", true);
        assertEquals("FKTS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMc_PumR0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("McDonald", false);
        assertEquals("MKTN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMacGregor_uTJO1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("MacGregor", false);
        assertEquals("MKRK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithC_IDGH3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CWithC", false);
        assertEquals("K0K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneHU_uVhb0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Huch", false);
        assertEquals("HK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneA_EUja1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Accident", false);
        assertEquals("AKST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneB_cOXM2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Bacci", false);
        assertEquals("PX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithSpace_HRMd1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(" Mac Caffrey", false);
        assertEquals("MKFR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWicz_kuWP0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("AKS", doubleMetaphone.doubleMetaphone("Wicz", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsValue_IqUR0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILLINOIS";
        boolean result = doubleMetaphone.contains(value, 0, 4, "ILLO", "ILLA", "ALLE");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Gsxw4_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILLINOIS";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        Assertions.assertEquals("ALN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAlternate_YHed5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILLINOIS";
        String result = doubleMetaphone.doubleMetaphone(value, true);
        Assertions.assertEquals("ALNS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneLL1_yyxl1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("LLalla", false);
        assertEquals("LL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneIEAndME_tbKY0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Rie", true);
        assertEquals("R", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneIEAndAlternateR_wYfX2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Rie", false);
        assertEquals("R", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsTion_fmIC0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "action";
        String expected = "AKXN";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsFNan_khmo2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "van";
        String expected = "FN";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZo_LnSN0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Zoe", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZi_AXPf1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Zita", false);
        assertEquals("ST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZa_cfzK2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Zara", false);
        assertEquals("SR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanic_LLHY3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Tzatziki", true);
        assertEquals("TSTS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCZAndWITZ_uhwJ0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CZIT", true);
        assertEquals("XT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanic_JcFN1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("WITZ", true);
        assertEquals("FTS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_pXzX5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndER_YtHU0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("schermerhorn", false);
        assertEquals("XRMR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndEN_oYyq1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("schenker", false);
        assertEquals("XNKR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndNotI_GaPU5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("sch", false);
        assertEquals("X", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndNotIAndNotEREN_xVfs6_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("sche", false);
        assertEquals("X", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndNotIAndEREN_ZMVv7_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("scher", false);
        assertEquals("XR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone1_ogAV0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("HM", doubleMetaphone.doubleMetaphone("heim", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_ldJX1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("sio", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone3_zptr2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SN", doubleMetaphone.doubleMetaphone("sian", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone6_SSAa5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("z", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAppendKS_IzmR2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "breau";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("PR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAppendKS2_sZJB3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "breaux";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("PR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAppendKS3_VhDi4_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "breauX";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("PR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAppendKS4_MtKh5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "breauC";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("PRK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEnd_bwwA3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("ARN", doubleMetaphone.doubleMetaphone("Arnow", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWICZ_XYzz4_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("FLPT", doubleMetaphone.doubleMetaphone("Filipowicz", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWITZ_rMPn5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("ATS", doubleMetaphone.doubleMetaphone("Witz", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithEWSKI_ecbm8_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("ASK", doubleMetaphone.doubleMetaphone("Ewski", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithEWSKY_hghU9_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("ASK", doubleMetaphone.doubleMetaphone("Ewsky", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithOWSKI_Yxhv10_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("ASK", doubleMetaphone.doubleMetaphone("Owski", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithOWSKY_zMASKY11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("ASK", doubleMetaphone.doubleMetaphone("Owsky", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithSCH_fVtJ12_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("X", doubleMetaphone.doubleMetaphone("Sche", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsHOLM_UsQo2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "HOLM";
        boolean slavoGermanic = true;
        assertEquals("HLM", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsHOLZ_Zfxa3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "HOLZ";
        boolean slavoGermanic = true;
        assertEquals("HLS", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSlavoGermanicSIAN_IJBu6_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIAN";
        boolean slavoGermanic = true;
        assertEquals("SN", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonSlavoGermanicSIO_xMND7_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIO";
        boolean slavoGermanic = false;
        assertEquals("S", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonSlavoGermanicSIA_QBbe8_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIA";
        boolean slavoGermanic = false;
        assertEquals("S", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonSlavoGermanicSIAN_fkpc9_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIAN";
        boolean slavoGermanic = false;
        assertEquals("SN", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAlternateS_mlMh11_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "RESNAIS";
        boolean alternate = true;
        assertEquals("RSNS", doubleMetaphone.doubleMetaphone(value, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG1_ZUGj0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hanger";
        boolean slavoGermanic = false;
        assertEquals("HNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG2_jPpO1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hanger";
        boolean slavoGermanic = true;
        assertEquals("HNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG3_fhlK2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Nanger";
        boolean slavoGermanic = false;
        assertEquals("NNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG4_kdba3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Nanger";
        boolean slavoGermanic = true;
        assertEquals("NNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG5_JwNZ4_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Linger";
        boolean slavoGermanic = false;
        assertEquals("LNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG6_MAeK5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Linger";
        boolean slavoGermanic = true;
        assertEquals("LNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG7_krrW6_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Ginger";
        boolean slavoGermanic = false;
        assertEquals("KNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG8_QJrs7_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Ginger";
        boolean slavoGermanic = true;
        assertEquals("KNKR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG9_HPkQ8_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = false;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG10_MFVv9_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = true;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG11_rDZB10_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = false;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG12_JNXJ11_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = true;
        assertEquals("N", doubleMetaphone.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH1_TCaC0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("HUGH", false);
        assertEquals("H", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH7_tcxL6_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ger", false);
        assertEquals("KR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH8_etRG7_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("gy", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG1_YTYL8_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("german", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG2_TstP9_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germany", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG3_lUqx10_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanic", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG4_RAHR11_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanica", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG5_ZOEv12_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanicize", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG6_zMkF13_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanization", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG7_JOpb14_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanize", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG8_fSTB15_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanizer", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG9_Ukci16_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanizers", false);
        assertEquals("KRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Jose_nhIR0_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jose", false);
        assertEquals("HS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_San_AFkB1_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("San", false);
        assertEquals("SN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Jose4_CoGX3_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jose4", false);
        assertEquals("JS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseSan_lSOK4_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("JoseSan", false);
        assertEquals("JSSN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseSanSpace_rvbA5_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jose San", false);
        assertEquals("HSSN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseSan4_Htva6_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("JoseSan4", false);
        assertEquals("JSSN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseVowelBefore_vswA7_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("eJose", false);
        assertEquals("AJS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseVowelAfter_EHnV8_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Josea", false);
        assertEquals("JS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseVowelAfter2_gLVC9_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Joseo", false);
        assertEquals("JS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelBefore_jsPI10_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("tJose", false);
        assertEquals("TJS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter_XHgd11_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Josek", false);
        assertEquals("JSK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter2_DNPz12_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Josez", false);
        assertEquals("JSS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseAtEnd_kLdr13_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Joses", false);
        assertEquals("JSS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter3_MAYl14_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Joseb", false);
        assertEquals("JSP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter4_EJHn15_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jone", false);
        assertEquals("JN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter5_yRYv16_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jonek", false);
        assertEquals("JNK", result);
    }
}