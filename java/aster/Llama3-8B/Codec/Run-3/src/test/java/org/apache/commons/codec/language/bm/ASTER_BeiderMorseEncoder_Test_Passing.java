/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeiderMorseEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleTypeApprox_exDT0() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.APPROX);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleTypeExact_PMoa1() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.EXACT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleTypeRules_WIBM2() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.RULES);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_iRes0() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType ruleType = encoder.getRuleType();
        assertEquals(RuleType.class, ruleType.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_vHGm0() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        boolean result = encoder.isConcat();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType_XItF0() throws Exception {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        NameType result = beiderMorseEncoder.getNameType();
        assertEquals(NameType.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_OAvf0() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            Object result = encoder.encode("Hello");
            assertNotNull(result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_FQkZ1() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            encoder.encode(123);
            fail("EncoderException was not thrown");
        } catch (EncoderException e) {
            assertEquals("BeiderMorseEncoder encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_QeDy0() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String result = encoder.encode(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidString_wgRd1() throws Exception {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "Hello";
        String result = encoder.encode(source);
    }
}