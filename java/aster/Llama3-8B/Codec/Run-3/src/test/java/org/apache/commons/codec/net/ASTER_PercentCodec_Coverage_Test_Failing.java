/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonByteArrayInput_qutw1() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], false);
        Object result = percentCodec.encode("test");
        assert (result instanceof EncoderException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiChar_pGHo1() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], false);
        byte[] bytes = new byte[]{(byte) 0x80};
        byte[] expected = new byte[]{(byte) '%', (byte) 'x', (byte) 0x80};
        assertArrayEquals(expected, percentCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeChar_qybY2() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 'a', (byte) 'b'}, false);
        byte[] bytes = new byte[]{(byte) 'a'};
        byte[] expected = new byte[]{(byte) '%', (byte) 'x', (byte) 'a'};
        assertArrayEquals(expected, percentCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpace_cCrX3() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{(byte) ' '};
        byte[] expected = new byte[]{(byte) '%', (byte) '2', (byte) '0'};
        assertArrayEquals(expected, percentCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytesWithoutSpaceAndNeedToEncode_ZWEm3() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = "hello%20world".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiChar_ArDY1() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{}, false);
        byte[] bytes = "".getBytes();
        byte[] expected = "%C3%A4".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeChar_FgPX2() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x80, (byte) 0x81}, false);
        byte[] bytes = "a".getBytes();
        byte[] expected = "%80a".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeCharWithPlusForSpace_dPrX3() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x80, (byte) 0x81}, true);
        byte[] bytes = "a ".getBytes();
        byte[] expected = "%80+a%20".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_dJaJ5() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{}, true);
        byte[] bytes = "a ".getBytes();
        byte[] expected = "+a+".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpaceAndAlwaysEncodeChars_PMCN6() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x80, (byte) 0x81}, true);
        byte[] bytes = "a ".getBytes();
        byte[] expected = "+%80+a+".getBytes();
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsciiChar_GtJs0() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{0, 1, 2}, true);
        byte[] bytes = codec.encode(new byte[]{0, 1, 2});
        assertArrayEquals(new byte[]{0, 1, 2}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiChar_HhLE1() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{0, 1, 2}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 128});
        assertArrayEquals(new byte[]{(byte) '%', (byte) '2', (byte) '8'}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeChar_Enal2() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0, (byte) 1}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 0});
        assertArrayEquals(new byte[]{(byte) '%', (byte) '0'}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeCharWithSpace_PLFW3() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 0, (byte) 1}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 32});
        assertArrayEquals(new byte[]{(byte) '%', (byte) '2', (byte) '5'}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncodingNeeded_wuMk5() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{0, 1, 2}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 0, (byte) 1, (byte) 2});
        assertArrayEquals(new byte[]{(byte) 0, (byte) 1, (byte) 2}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncodingNeededWithSpace_onCy6() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{0, 1, 2}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 0, (byte) 1, (byte) 32, (byte) 2});
        assertArrayEquals(new byte[]{(byte) 0, (byte) 1, (byte) 32, (byte) 2}, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncodingNeededWithPlusForSpace_UREf7() throws org.apache.commons.codec.EncoderException {
        PercentCodec codec = new PercentCodec(new byte[]{0, 1, 2}, true);
        byte[] bytes = codec.encode(new byte[]{(byte) 0, (byte) 1, (byte) 32, (byte) 2});
        assertArrayEquals(new byte[]{(byte) 0, (byte) 1, (byte) '+', (byte) 2}, bytes);
    }
}