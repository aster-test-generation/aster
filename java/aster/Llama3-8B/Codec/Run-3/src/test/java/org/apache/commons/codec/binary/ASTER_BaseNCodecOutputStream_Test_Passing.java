/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.io.OutputStream;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.binary.BaseNCodec.Context;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BaseNCodecOutputStream_Test_Passing {
    @Mock
    private BaseNCodec baseNCodec;
    @Mock
    private BaseNCodecOutputStream baseNCodecOutputStream;
    @Mock
    private OutputStream outputStream;
    @Mock
    private Base32 base32;
    private BaseNCodecOutputStream basencodecoutputstream;
    private Context context = new Context();
    private boolean doEncode;
    private byte[] singleByte = new byte[1];
    @Mock
    private BaseNCodec baseNCodecMock;
    @Mock
    private Context contextMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEofEncode_CEeH0() throws Exception {
        BaseNCodecOutputStream baseNCodecOutputStream = new BaseNCodecOutputStream(new java.io.ByteArrayOutputStream(), new Base32(8, new byte[0], true, (byte) 0, CodecPolicy.STRICT), true);
        baseNCodecOutputStream.eof();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEofDecode_rsFl1() throws Exception {
        BaseNCodecOutputStream baseNCodecOutputStream = new BaseNCodecOutputStream(new java.io.ByteArrayOutputStream(), new Base32(8, new byte[0], true, (byte) 0, CodecPolicy.STRICT), false);
        baseNCodecOutputStream.eof();
    }
}