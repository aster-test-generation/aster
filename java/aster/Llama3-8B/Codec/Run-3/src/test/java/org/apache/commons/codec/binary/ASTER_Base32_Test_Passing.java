/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetTrue_zYTt0() throws Exception {
        Base32 base32 = new Base32(5, new byte[]{1, 2, 3, 4, 5}, true, (byte) 0, CodecPolicy.STRICT);
        byte octet = 0;
        assertTrue(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetFalse_pCQl1() throws Exception {
        Base32 base32 = new Base32(5, new byte[]{1, 2, 3, 4, 5}, true, (byte) 0, CodecPolicy.STRICT);
        byte octet = 100;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetDecodeTableMinusOne_mwBo3() throws Exception {
        Base32 base32 = new Base32(5, new byte[]{1, 2, 3, 4, 5}, true, (byte) 0, CodecPolicy.STRICT);
        byte octet = -1;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_Ttwy0() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3});
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_Fpbo1() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_zjiV2() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true, (byte) 4, CodecPolicy.STRICT);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_wRoc3() throws Exception {
        Base32 base32 = new Base32(true);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator5_HEFj4() throws Exception {
        Base32 base32 = new Base32(10);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator6_YghF5() throws Exception {
        Base32 base32 = new Base32((byte) 1);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_jHyE6() throws Exception {
        Base32 base32 = new Base32(true, (byte) 2);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator8_lIdm7() throws Exception {
        Base32 base32 = new Base32();
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator9_iAfC8() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true, (byte) 4);
        byte[] result = base32.getLineSeparator();
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }
}