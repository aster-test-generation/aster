/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BaseNCodecInputStream_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipSmallLength_qCDG2() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        long result = baseNCodecInputStream.skip(10);
        assert result == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipLargeLength_WsEn3() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        long result = baseNCodecInputStream.skip(10000);
        assert result == 10000;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipLargeLengthWithRead_ESFN4() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        byte[] b = new byte[512];
        long todo = 10000;
        long totalRead = 0;
        while (todo > 0) {
            int len = (int) Math.min(b.length, todo);
            len = baseNCodecInputStream.read(b, 0, len);
            if (len == 0) {
                break;
            }
            totalRead += len;
            todo -= len;
        }
        long result = baseNCodecInputStream.skip(10000 - totalRead);
        assert result == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipEOF_vMSM5() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        baseNCodecInputStream.read(new byte[0], 0, 0);
        long result = baseNCodecInputStream.skip(10);
        assert result == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipEOFWithRead_JknV6() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        byte[] b = new byte[512];
        long todo = 10;
        long totalRead = 0;
        while (todo > 0) {
            int len = (int) Math.min(b.length, todo);
            len = baseNCodecInputStream.read(b, 0, len);
            if (len == 0) {
                break;
            }
            totalRead += len;
            todo -= len;
        }
        long result = baseNCodecInputStream.skip(0);
        assert result == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipLargeLengthWithReadAndEOFAndBreak_QUsW8() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        byte[] b = new byte[512];
        long todo = 10000;
        long totalRead = 0;
        while (todo > 0) {
            int len = (int) Math.min(b.length, todo);
            len = baseNCodecInputStream.read(b, 0, len);
            if (len == 0) {
                break;
            }
            totalRead += len;
            todo -= len;
            if (totalRead >= 10000) {
                break;
            }
        }
        long result = baseNCodecInputStream.skip(0);
        assert result == 0;
    }
}