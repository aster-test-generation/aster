/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_FuqG0() throws Exception {
        PercentCodec codec = new PercentCodec();
        Object obj = null;
        Object result = codec.decode(obj);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_jiTM1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        Object obj = bytes;
        Object result = codec.decode(obj);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_fScs2() throws Exception {
        PercentCodec codec = new PercentCodec();
        Object obj = new Object();
        try {
            codec.decode(obj);
            Assertions.fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_gOvc0() throws Exception {
        PercentCodec codec = new PercentCodec();
        Object result = codec.encode(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_BzdB1() throws Exception {
        byte[] bytes = new byte[]{1, 2, 3};
        PercentCodec codec = new PercentCodec();
        Object result = codec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeObject_MLwt2() throws Exception {
        Object obj = new Object();
        PercentCodec codec = new PercentCodec();
        try {
            codec.encode(obj);
            Assertions.fail("Expected EncoderException");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_WNcW0() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_oAyf1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[0];
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAscii_XHgO2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "Hello World".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAscii_nVHI3() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "Hello Worl\u00d4d".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_pMXI4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{}, true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_JYEo5() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{0x20, 0x21}, false);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_Lyxq1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(new byte[0]);
        Assertions.assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleByte_iTAL2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 65};
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultipleBytes_bICv3() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 65, (byte) 66, (byte) 67};
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpace_aKys4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{0x20}, true);
        byte[] bytes = new byte[]{(byte) 0x20};
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(new byte[]{37, 37, 32}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEncodedBytes_xniu5() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 65, (byte) 0x20, (byte) 66, (byte) 67};
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(new byte[]{37, 65, 37, 32, 37, 66, 37, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAscii_UNBo2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "hello".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAscii_ZEgu3() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "hello world".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpace_Lbru4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'}, true);
        byte[] bytes = "hello world".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAlwaysEncodeChars_btNn5() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) 'a', (byte) 'b', (byte) 'c'}, true);
        byte[] bytes = "abc".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_CFXX0() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_Birl1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[0];
        byte[] result = codec.encode(bytes);
        assert Arrays.equals(result, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleByte_AhXT2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x20};
        byte[] result = codec.encode(bytes);
        assert Arrays.equals(result, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultipleBytes_hUiI3() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x20, (byte) 0x20, (byte) 0x20};
        byte[] result = codec.encode(bytes);
        assert Arrays.equals(result, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_TWen4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b'}, true);
        byte[] bytes = new byte[]{(byte) 0x20};
        byte[] result = codec.encode(bytes);
        assert Arrays.equals(result, new byte[]{'+'});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEscape_oCBi5() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b'}, false);
        byte[] bytes = new byte[]{(byte) 0x25};
        byte[] result = codec.encode(bytes);
        assert Arrays.equals(result, new byte[]{(byte) 0x25, (byte) '2', (byte) '5'});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEncode_kXax3() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b'}, true);
        byte[] bytes = "hello world".getBytes();
        byte[] result = codec.encode(bytes);
        byte[] expected = "hello%20world".getBytes();
        Assertions.assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEncodeSpace_QnTv4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b'}, true);
        byte[] bytes = "hello ".getBytes();
        byte[] result = codec.encode(bytes);
        byte[] expected = "hello%20".getBytes();
        Assertions.assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEncodeAlways_xtHt5() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{'a', 'b'}, false);
        byte[] bytes = "hello world".getBytes();
        byte[] result = codec.encode(bytes);
        byte[] expected = "hello%20world".getBytes();
        Assertions.assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_OBvd0() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.decode(null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmpty_Vxqr1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.decode(new byte[0]);
        assert result.length == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeSingleByte_yQaw2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.decode(new byte[]{(byte) 'a'});
        assert Arrays.equals(result, new byte[]{(byte) 'a'});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEscapeChar_ZhGg3() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.decode(new byte[]{(byte) '%', (byte) '2', (byte) '3'});
        assert Arrays.equals(result, new byte[]{(byte) 0x23});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodePlusForSpace_SCPH4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{(byte) '+'}, true);
        byte[] result = codec.decode(new byte[]{(byte) '+'});
        assert Arrays.equals(result, new byte[]{(byte) ' '});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeMultipleBytes_Pqxh5() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.decode(new byte[]{(byte) 'h', (byte) '%', (byte) '2', (byte) '3', (byte) 'e', (byte) 'l', (byte) 'l', (byte) 'o'});
        assert Arrays.equals(result, new byte[]{(byte) 'h', (byte) 0x23, (byte) 'e', (byte) 'l', (byte) 'l', (byte) 'o'});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAscii_SyLw2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = "abc".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpace_ZDiB4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{0x20}, true);
        byte[] bytes = "abc ".getBytes();
        byte[] result = codec.encode(bytes);
        Assertions.assertArrayEquals("abc%20".getBytes(), result);
    }
}