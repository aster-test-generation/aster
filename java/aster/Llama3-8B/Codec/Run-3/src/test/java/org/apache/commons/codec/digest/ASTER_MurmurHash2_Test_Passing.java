/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_Aalc0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long result = MurmurHash2.hash64(data, data.length);
        assertEquals(0xe17a1465L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_TjNS1() throws Exception {
        assertEquals(123, MurmurHash2.hash32("HelloWorld", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_iAXO0() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int length = 4;
        int expected = 0x12345678;
        int result = MurmurHash2.hash32(data, length);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_eMMZ1() throws Exception {
        assertEquals(1234567890123456789L, MurmurHash2.hash64("HelloWorld", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_orsc1() throws Exception {
        assertEquals(0x1234567890abcdefL, MurmurHash2.hash64("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_quEl0() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int length = 4;
        int seed = 123;
        int result = MurmurHash2.hash32(data, length, seed);
        assert result == 123456789;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRemainingBytes_gGFC1() throws Exception {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        int length = 5;
        int seed = 123;
        int result = MurmurHash2.hash32(data, length, seed);
        assert result == 123456789;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Tcol1() throws Exception {
        assertEquals(123456789, MurmurHash2.hash32("HelloWorld"));
    }
}