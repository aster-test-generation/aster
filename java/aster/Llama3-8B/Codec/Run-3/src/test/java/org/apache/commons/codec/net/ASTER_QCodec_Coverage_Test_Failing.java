/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_dyIJ0() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "testString";
        UnsupportedEncodingException e = new UnsupportedEncodingException("RFC 1522 violation: malformed encoded content");
        try {
            qCodec.decode(str);
            fail("DecoderException was not thrown");
        } catch (DecoderException ex) {
            assertEquals(e.getMessage(), ex.getMessage());
            assertEquals(e, ex.getCause());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithoutUnsupportedEncodingException_tpuk1() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "testString";
        String result = qCodec.decode(str);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_OEVc0_2() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String input = "=?UTF-8?Q?Hello, World!?=";
        Object output = qCodec.encode(input);
        assertEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNotNull_eSKQ1() throws DecoderException {
        QCodec qCodec = new QCodec();
        Object obj = new Object();
        Object result = qCodec.decode(obj);
        assertEquals(obj, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_DMrR2() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "Hello";
        Object result = qCodec.decode(str);
        assertEquals(str, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEncoderException_dXor1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        EncoderException encoderException = new EncoderException("test-charset");
        try {
            qCodec.encode("test", "test-charset");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("test-charset", e.getMessage());
            assertEquals(encoderException, e.getCause());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_dyIJ0_fid1() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "testString";
        UnsupportedEncodingException e = new UnsupportedEncodingException("Test Exception");
        try {
            qCodec.decode(str);
            fail("DecoderException was not thrown");
        } catch (DecoderException ex) {
            assertEquals(e.getMessage(), ex.getMessage());
            assertEquals(e, ex.getCause());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_OEVc0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String input = "Hello, World!";
        Object output = qCodec.encode(input);
        assertNotNull(output);
        assertEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedCharset_aFsd0_fid1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        try {
            qCodec.encode("test", "unsupported-charset");
            fail("Expected UnsupportedCharsetException");
        } catch (EncoderException e) {
            assertEquals("Unsupported charset: unsupported-charset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEncoderException_dXor1_fid1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        EncoderException encoderException = new EncoderException("Test Exception");
        try {
            qCodec.encode("test", "test-charset");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Test Exception", e.getMessage());
            assertEquals(encoderException, e.getCause());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_OEVc0_2_fid3() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String input = "Hello, World!";
        Object output = qCodec.encode(input);
        assertEquals(input, output);
    }
}