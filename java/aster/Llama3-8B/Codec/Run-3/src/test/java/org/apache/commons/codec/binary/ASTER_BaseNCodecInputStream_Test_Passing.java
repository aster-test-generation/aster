/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.binary.BaseNCodec.Context;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BaseNCodecInputStream_Test_Passing {
    private Context context = new Context();
    @Mock
    private InputStream inputStream;
    @Mock
    private Base32 base32;
    private BaseNCodecInputStream basencodecinputstream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testavailable() throws Exception {
        basencodecinputstream = new BaseNCodecInputStream(inputStream, base32, false);
        // Given
        boolean eof = true;
        when(context.eof).thenReturn(eof);
        // When
        int available = basencodecinputstream.available();
        // Then
        assertEquals(eof ? 0 : 1, available);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMark() throws Exception {
        basencodecinputstream = new BaseNCodecInputStream(inputStream, base32, true);
        // Given
        int readLimit = 10;
        // When
        basencodecinputstream.mark(readLimit);
        // Then
        verify(inputStream, times(1)).mark(readLimit);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws IOException {
        basencodecinputstream = new BaseNCodecInputStream(inputStream, base32, true);
        // Arrange
        IOException exception = new IOException("mark/reset not supported");
        // Act
        try {
            basencodecinputstream.reset();
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals(exception.getMessage(), e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported() throws Exception {
        inputStream = mock(InputStream.class);
        base32 = mock(Base32.class);
        basencodecinputstream = new BaseNCodecInputStream(inputStream, base32, true);
        // Act and Assert
        assertFalse(basencodecinputstream.markSupported());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported_QtKc0() throws Exception {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(new java.io.ByteArrayInputStream(new byte[0]), new Base32(5, new byte[0], true, (byte) 0, CodecPolicy.STRICT), true);
        boolean result = baseNCodecInputStream.markSupported();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingStrict_hCDR0() throws Exception {
        Base32 base32 = new Base32(8, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(new java.io.ByteArrayInputStream(new byte[0]), base32, true);
        boolean result = baseNCodecInputStream.isStrictDecoding();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingLenient_SsKQ1() throws Exception {
        Base32 base32 = new Base32(8, new byte[0], true, (byte) 0, CodecPolicy.LENIENT);
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(new java.io.ByteArrayInputStream(new byte[0]), base32, true);
        boolean result = baseNCodecInputStream.isStrictDecoding();
        assert result == false;
    }
}