/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeed_IJoH3_xFDc0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int hash = MurmurHash3.hash32(data, data.length);
        assertEquals(hash, 0x12345678);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Internal_Switch_Case15_KHCv0_JSRV0() {
        byte[] data = new byte[16];
        data[0] = 0x01;
        data[1] = 0x02;
        data[2] = 0x03;
        data[3] = 0x04;
        data[4] = 0x05;
        data[5] = 0x06;
        data[6] = 0x07;
        data[7] = 0x08;
        data[8] = 0x09;
        data[9] = 0x10;
        data[10] = 0x11;
        data[11] = 0x12;
        data[12] = 0x13;
        data[13] = 0x14;
        data[14] = 0x15;
        data[15] = 0x16;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long result = MurmurHash3.hash32(data, 16);
        assertArrayEquals(expected, new long[]{result, result});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Internal_Switch_Case14_hJLq1_sSGj0() {
        byte[] data = new byte[16];
        data[0] = 0x01;
        data[1] = 0x02;
        data[2] = 0x03;
        data[3] = 0x04;
        data[4] = 0x05;
        data[5] = 0x06;
        data[6] = 0x07;
        data[7] = 0x08;
        data[8] = 0x09;
        data[9] = 0x10;
        data[10] = 0x11;
        data[11] = 0x12;
        data[12] = 0x13;
        data[13] = 0x14;
        data[14] = 0x15;
        data[15] = 0x17;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long result = MurmurHash3.hash32(data, 16);
        assertArrayEquals(new long[]{result}, new long[]{expected[0]});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLastBlockAndRemainingBytes_oedg6_udfP0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xA2, (byte) 0xB4, (byte) 0xC6, (byte) 0xD8, (byte) 0xEA};
        int hash = MurmurHash3.hash32(data, data.length);
        assertEquals(0x1234567893L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Internal_Switch_Case13_BTPP2_rLQo0() {
        byte[] data = new byte[16];
        data[0] = 0x01;
        data[1] = 0x02;
        data[2] = 0x03;
        data[3] = 0x04;
        data[4] = 0x05;
        data[5] = 0x06;
        data[6] = 0x07;
        data[7] = 0x08;
        data[8] = 0x09;
        data[9] = 0x10;
        data[10] = 0x11;
        data[11] = 0x12;
        data[12] = 0x13;
        data[13] = 0x15;
        data[14] = 0x16;
        data[15] = 0x17;
        long[] expected = new long[]{0x1234567890abcdefL, 0x9876543210fedcbaL};
        long result = MurmurHash3.hash32(data, 16);
        assertArrayEquals(expected, new long[]{result, result});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLastBlockAndRemainingBytesAndMasking_pAHL7_KGuy0() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xA2, (byte) 0xB4, (byte) 0xC6, (byte) 0xD8, (byte) 0xEA, (byte) 0xF0};
        int hash = MurmurHash3.hash32(data, data.length);
        assertEquals(0x1234567894L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_XjTy0_fid1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        int offset = 0;
        int length = 4;
        int seed = 12345;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86LastBytes_pWgO1_fid1() {
        byte[] data = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56};
        int offset = 0;
        int length = 3;
        int seed = 12345;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64Internal_Switch_Case12_ayXL3_sPXV0_fid1() {
        byte[] data = new byte[16];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        data[5] = 6;
        data[6] = 7;
        data[7] = 8;
        data[8] = 9;
        data[9] = 10;
        data[10] = 11;
        data[11] = 12;
        data[12] = 13;
        long[] expected = new long[]{0, 0};
        long result = MurmurHash3.hash32(data, 16);
        long[] actual = new long[]{result, result};
        assertArrayEquals(expected, actual);
    }
}