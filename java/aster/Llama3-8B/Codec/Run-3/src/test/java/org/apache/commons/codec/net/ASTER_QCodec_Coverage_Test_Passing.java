/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_OEVc0_1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String input = "Hello, World!";
        Object output = qCodec.encode(input);
        assertNotNull(output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_rWEl1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        Integer input = 123;
        try {
            qCodec.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be encoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_ZuZa0() throws DecoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedCharset_aFsd0() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        try {
            qCodec.encode("test", "unsupported-charset");
            fail("Expected UnsupportedCharsetException");
        } catch (EncoderException e) {
            assertEquals("unsupported-charset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonString_QZpi3_eERp0() throws DecoderException {
        QCodec qCodec = new QCodec();
        Object obj = new Integer(1);
        try {
            qCodec.decode(obj);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type " + obj.getClass().getName() + " cannot be decoded using Q codec", e.getMessage());
        }
    }
}