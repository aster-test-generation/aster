/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_ClmE0() throws Exception {
        try {
            Mac hmac = HmacUtils.getHmacSha256(new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04});
            assertNotNull(hmac);
        } catch (Exception e) {
            assertThrows(NoSuchAlgorithmException.class, () -> HmacUtils.getHmacSha256(new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04}));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_lPdg0() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        String key = "myKey";
        String valueToDigest = "myValue";
        try {
            Mac mac = Mac.getInstance(algorithm.toString());
            mac.init(new SecretKeySpec(key.getBytes(), algorithm.toString()));
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            Assertions.assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacMd5_dscj0() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacMD5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha1_eSFI1() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha224_MGga2() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA224"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha256_FNVL3() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha384_kPQE4() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA384"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha512_ymPF5() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA512"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableInvalidAlgorithm_VyPx6() throws Exception {
        assertFalse(HmacUtils.isAvailable("InvalidAlgorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_LHUJ0() throws Exception {
        String key = "myKey";
        String valueToDigest = "myValue";
        byte[] expected = HmacUtils.hmacSha1(key, valueToDigest);
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_TaNV0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = HmacUtils.hmacSha512(key, valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_gEbq0() throws Exception {
        String key = "mykey";
        String valueToDigest = "myvalue";
        byte[] expected = HmacUtils.hmacSha512(key, valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_BvMa0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedHexResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_tOln0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        File file = new File("path_to_your_file");
        byte[] result = hmacUtils.hmac(file);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384_PSwD0() throws Exception {
        byte[] key = "key".getBytes();
        Mac hmac = HmacUtils.getHmacSha384(key);
        assertNotNull(hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_xqYJ0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = HmacUtils.hmacSha384(key, valueToDigest);
        byte[] actual = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_DVYN0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = HmacUtils.hmacSha256(key, valueToDigest);
        byte[] actual = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_QluY0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        byte[] expected = new byte[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_URkC1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        byte[] expected = new byte[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha224_tBWr2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        byte[] expected = new byte[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_rrfk3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        byte[] expected = new byte[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_ZjwY4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        byte[] expected = new byte[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_dseu5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
        byte[] expected = new byte[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_CJzs0() throws Exception {
        String key = "myKey";
        String valueToDigest = "myValue";
        String expected = "a5bc5e11a5bc5e11";
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_Gyku0() throws Exception {
        String key = "mykey";
        String valueToDigest = "myvalue";
        String expected = "your expected hmacSha384Hex value";
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_ZFMU0() throws Exception {
        try {
            Mac mac = Mac.getInstance("HMAC_SHA_256");
            mac.init(new SecretKeySpec("key".getBytes(), "HMAC_SHA_256"));
            Mac updatedMac = HmacUtils.updateHmac(mac, "valueToDigest".getBytes());
            assert updatedMac != null;
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_Yrkx0() throws Exception {
        byte[] key = "key".getBytes();
        Mac hmac = HmacUtils.getHmacSha1(key);
        assertNotNull(hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512_sZVy0() throws Exception {
        try {
            Mac hmac = HmacUtils.getHmacSha512("key".getBytes());
            assertNotNull(hmac);
        } catch (Exception e) {
            assertThrows(NoSuchAlgorithmException.class, () -> HmacUtils.getHmacSha512("key".getBytes()));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacMd5_gEqH0() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha1_WrQg1() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha224_mwTz2() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_224));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha256_rgwH3() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha384_iqIl4() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_384));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableHmacSha512_oitP5() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableInvalidAlgorithm_eaSo6() throws Exception {
        assertFalse(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_Gbmj0() throws Exception {
        String expected = "a5bdcc5a8e6f3a5f7a5b5a5b5a5b5a5b5a5b5a5b5a5b";
        String actual = HmacUtils.hmacSha1Hex("key".getBytes(), "valueToDigest".getBytes());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_ZYjz0() throws Exception {
        String key = "myKey";
        String valueToDigest = "myValue";
        String expected = "someExpectedHash";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_Uinb0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        byte[] expected = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_gtKV1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        byte[] expected = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha224_JBXM2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        byte[] expected = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_PBUa3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        byte[] expected = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_JozB4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        byte[] expected = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_NTpl5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        byte[] expected = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_eRNW0() throws Exception {
        String key = "your_key";
        byte[] keyBytes = key.getBytes();
        byte[] valueToDigest = "your_value_to_digest".getBytes();
        String expected = "your_expected_hash";
        String actual = HmacUtils.hmacSha384Hex(keyBytes, valueToDigest);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_HMAC_MD5_lZDY0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("expectedHexResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_HMAC_SHA_1_FscE1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("expectedHexResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_HMAC_SHA_224_pmiC2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("expectedHexResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_HMAC_SHA_256_ChdF3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("expectedHexResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_HMAC_SHA_384_vtfr4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("expectedHexResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_HMAC_SHA_512_zMuj5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("expectedHexResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_LENm0() throws Exception {
        String expected = "a5bdcc5a6dfb5f4f7a2fbc5f5a5f4f5a5f5a5f";
        String actual = HmacUtils.hmacSha256Hex("key".getBytes(), "valueToDigest".getBytes());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_AzzW0() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        byte[] key = "key".getBytes();
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assert mac != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_hqRK0() throws Exception {
        String key = "myKey";
        String valueToDigest = "myValue";
        String expected = "someExpectedHash";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_pNtR0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = HmacUtils.hmacSha1(key, valueToDigest);
        byte[] actual = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacValidInput_ZxDP0() throws Exception {
        byte[] key = "mykey".getBytes();
        Mac mac = HmacUtils.getInitializedMac("HMAC_SHA_256", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacNullKey_UsRr1() throws Exception {
        try {
            HmacUtils.getInitializedMac("HMAC_SHA_256", null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_GWSu0() throws Exception {
        String key = "myKey";
        String valueToDigest = "myValue";
        String expected = "someExpectedHash";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_FhtU0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        byte[] expected = new byte[16];
        System.arraycopy(result, 0, expected, 0, 16);
        assert Arrays.equals(expected, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_gfNw0() throws Exception {
        try {
            Mac hmac = HmacUtils.getHmacMd5(new byte[]{(byte) 0x12, (byte) 0x34});
            assertNotNull(hmac);
        } catch (Exception e) {
            assertThrows(NoSuchAlgorithmException.class, () -> HmacUtils.getHmacMd5(new byte[]{(byte) 0x12, (byte) 0x34}));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_epYG0() throws Exception {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "expectedHmacSha512Hex";
        String actual = HmacUtils.hmacSha512Hex(key.getBytes(), valueToDigest.getBytes());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_PWOk0_1() throws Exception {
        String key = "mykey";
        String valueToDigest = "myvalue";
        byte[] expected = HmacUtils.hmacSha256(key, valueToDigest);
        assertNotNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_PWOk0_2() throws Exception {
        String key = "mykey";
        String valueToDigest = "myvalue";
        byte[] expected = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expected, HmacUtils.hmacSha256(key, valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_IzUY0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertNotNull(hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_VleR1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertNotNull(hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha224_iZef2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertNotNull(hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_SzLg3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertNotNull(hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_ayFH4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertNotNull(hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_xfmj5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertNotNull(hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacStringKey_wQJm6() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertNotNull(hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_PWOk0() throws Exception {
        String key = "mykey";
        String valueToDigest = "myvalue";
        byte[] expected = HmacUtils.hmacSha256(key, valueToDigest);
        assertNotNull(expected);
        assertArrayEquals(expected, HmacUtils.hmacSha256(key, valueToDigest));
    }
}