/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithHaris_UnSO0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("HARIS", false);
        assertEquals("HRIS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithChore_BrcE1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CHORE", false);
        assertEquals("KOR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionM0True_nKgu0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MOM";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionM0False_eJCU1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "UMB";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionM0False2_ZLOs2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "UMBRELLA";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWicz_ZJZl0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Wicz", false);
        assertEquals("VX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFocus_LREm1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Focus", false);
        assertEquals("FX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCiara_Fqjq3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Ciara", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWicz_vrcQ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Wicz", true);
        assertEquals("V", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMacGregor_dRfw1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("MacGregor", true);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCeCi_aFQg2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CeCi", true);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithSpace_IAwT3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("C MacGregor", true);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMc_PumR0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("McDonald", false);
        assertEquals("MKDNL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWicz_xmiJ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Wicz", false);
        assertEquals("V", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMacGregor_uTJO1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("MacGregor", false);
        assertEquals("MCKR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCeCi_GCEx2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CeCi", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithC_IDGH3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CWithC", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneMc_whMD0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("MacGregor", false);
        assertEquals("MCKGR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneK_oozP1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Kirk", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneHU_uVhb0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Huch", false);
        assertEquals("HKX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneA_EUja1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Accident", false);
        assertEquals("AKSNT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneB_cOXM2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Bacci", false);
        assertEquals("PKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithSpace_HRMd1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(" Mac Caffrey", false);
        assertEquals("M K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWicz_kuWP0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("Wicz", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsValue_IqUR0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILLINOIS";
        boolean result = doubleMetaphone.contains(value, 0, 4, "ILLO", "ILLA", "ALLE");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Gsxw4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILLINOIS";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        Assertions.assertEquals("ELN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAlternate_YHed5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ILLINOIS";
        String result = doubleMetaphone.doubleMetaphone(value, true);
        Assertions.assertEquals("ELNS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneL1_yyxl1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Lalla", false);
        assertEquals("L", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneIEAndME_tbKY0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Rie", true);
        assertEquals("ER", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneIEAndAlternateR_wYfX2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Rie", false);
        assertEquals("ER", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithBP_iiak2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("BPhoe", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithBPNext_zkcd3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("BPoe", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsTion_fmIC0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "action";
        String expected = "X";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsTh_xDhw1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "thomas";
        String expected = "T";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsVan_khmo2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "van";
        String expected = "V";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsSch_EkNb3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sche";
        String expected = "S";
        assertEquals(expected, doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZo_LnSN0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Zoe", false);
        assertEquals("ZO1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZi_AXPf1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Zita", false);
        assertEquals("ZI1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZa_cfzK2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Zara", false);
        assertEquals("ZA1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanic_LLHY3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Tzatziki", true);
        assertEquals("TS1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_GKRZ5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Haha";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assert result.equals("HA");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCZAndWITZ_uhwJ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CZIT", true);
        assertEquals("TZIT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanic_JcFN1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("WITZ", true);
        assertEquals("ITS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_pXzX5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", true);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DoubleMetaphone_cESa6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "focaccia";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assert result.equals("FOK");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DoubleMetaphone_Alternate_anNK7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "focaccia";
        String result = doubleMetaphone.doubleMetaphone(value, true);
        assert result.equals("FOX");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DoubleMetaphone_SlavoGermanic_BvRW8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Krzysztof";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assert result.equals("KRZSHTOF");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DoubleMetaphone_SlavoGermanic_Alternate_ikSE9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Krzysztof";
        String result = doubleMetaphone.doubleMetaphone(value, true);
        assert result.equals("KRSHTF");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DoubleMetaphone_ConditionC0_Coverage_qFJy10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHIA";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assert result.equals("CH");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DoubleMetaphone_ConditionC0_Coverage_Alternate_YFWB11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHIA";
        String result = doubleMetaphone.doubleMetaphone(value, true);
        assert result.equals("X");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DoubleMetaphone_ConditionC0_Coverage_False_nydi12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHIE";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assert result.equals("CH");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndER_YtHU0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("schermerhorn", false);
        assertEquals("SKERMRHN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndEN_oYyq1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("schenker", false);
        assertEquals("SKNKR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndNotI_GaPU5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("sch", false);
        assertEquals("SK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndNotIAndNotEREN_xVfs6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("sche", false);
        assertEquals("SK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSCWithHAndNotIAndEREN_ZMVv7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("scher", false);
        assertEquals("SK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone1_ogAV0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("X", doubleMetaphone.doubleMetaphone("heim", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_ldJX1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SXS", doubleMetaphone.doubleMetaphone("sio", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone3_zptr2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SXS", doubleMetaphone.doubleMetaphone("sian", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone4_hNxz3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("sugar", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone5_hVFI4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("sugar", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone6_SSAa5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("X", doubleMetaphone.doubleMetaphone("z", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone7_rdIp6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("island", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone8_PEeA7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("isle", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone9_HmEr8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("carlisle", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone10_pzDs9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("carlysle", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone11_Xliu10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("S", doubleMetaphone.doubleMetaphone("resnais", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAppendKS_IzmR2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "breau";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("BKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAppendKS2_sZJB3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "breaux";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("BKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAppendKS3_VhDi4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "breauX";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("BKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAppendKS4_MtKh5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "breauC";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("BKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWR_AwKD0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("R", doubleMetaphone.doubleMetaphone("Write", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtBeginning_WyQm1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.doubleMetaphone("Wasserman", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtBeginningWithVowel_bVyL2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.doubleMetaphone("Womo", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEnd_bwwA3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("F", doubleMetaphone.doubleMetaphone("Arnow", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWICZ_XYzz4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("TSFX", doubleMetaphone.doubleMetaphone("Filipowicz", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWITZ_rMPn5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("TSFX", doubleMetaphone.doubleMetaphone("Witz", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWRAtBeginning_LGuC6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("R", doubleMetaphone.doubleMetaphone("Wright", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtBeginningWithWH_idba7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.doubleMetaphone("Whome", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithEWSKI_ecbm8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("F", doubleMetaphone.doubleMetaphone("Ewski", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithEWSKY_hghU9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("F", doubleMetaphone.doubleMetaphone("Ewsky", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithOWSKI_Yxhv10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("F", doubleMetaphone.doubleMetaphone("Owski", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithOWSKY_zMFY11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("F", doubleMetaphone.doubleMetaphone("Owsky", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithSCH_fVtJ12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("F", doubleMetaphone.doubleMetaphone("Sche", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWAtEndWithNoMatch_CmRL13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("W", doubleMetaphone.doubleMetaphone("Wang", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsHOLM_UsQo2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "HOLM";
        boolean slavoGermanic = true;
        assertEquals("HL", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsHOLZ_Zfxa3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "HOLZ";
        boolean slavoGermanic = true;
        assertEquals("HL", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSlavoGermanicSIAN_IJBu6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIAN";
        boolean slavoGermanic = true;
        assertEquals("SX", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonSlavoGermanicSIO_xMND7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIO";
        boolean slavoGermanic = false;
        assertEquals("SX", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonSlavoGermanicSIA_QBbe8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIA";
        boolean slavoGermanic = false;
        assertEquals("SX", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonSlavoGermanicSIAN_fkpc9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SIAN";
        boolean slavoGermanic = false;
        assertEquals("SX", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAlternateS_mlMh11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "RESNAIS";
        boolean alternate = true;
        assertEquals("RNFS", doubleMetaphone.doubleMetaphone(value, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG1_ZUGj0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hanger";
        boolean slavoGermanic = false;
        assertEquals("HNJ", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG2_jPpO1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hanger";
        boolean slavoGermanic = true;
        assertEquals("HNJ", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG3_fhlK2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Nanger";
        boolean slavoGermanic = false;
        assertEquals("NKNJ", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG4_kdba3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Nanger";
        boolean slavoGermanic = true;
        assertEquals("NKNJ", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG5_JwNZ4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Linger";
        boolean slavoGermanic = false;
        assertEquals("LNL", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG6_MAeK5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Linger";
        boolean slavoGermanic = true;
        assertEquals("LNL", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG7_krrW6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Ginger";
        boolean slavoGermanic = false;
        assertEquals("JNJR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG8_QJrs7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Ginger";
        boolean slavoGermanic = true;
        assertEquals("JNJR", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG9_HPkQ8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = false;
        assertEquals("KN", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG10_MFVv9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = true;
        assertEquals("KN", doubleMetaphone.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG11_rDZB10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = false;
        assertEquals("KN", doubleMetaphone.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG12_JNXJ11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Knie";
        boolean slavoGermanic = true;
        assertEquals("KN", doubleMetaphone.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH1_TCaC0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("HUGH", false);
        assertEquals("HWG", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH7_tcxL6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ger", false);
        assertEquals("JER", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH8_etRG7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("gy", false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG1_YTYL8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("german", false);
        assertEquals("JRMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG2_TstP9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germany", false);
        assertEquals("JRMNY", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG3_lUqx10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanic", false);
        assertEquals("JRMNKC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG4_RAHR11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanica", false);
        assertEquals("JRMNKC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG5_ZOEv12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanicize", false);
        assertEquals("JRMNKCZ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG6_zMkF13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanization", false);
        assertEquals("JRMNKCZN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG7_JOpb14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanize", false);
        assertEquals("JRMNKZ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG8_fSTB15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanizer", false);
        assertEquals("JRMNKZR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG9_Ukci16() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("germanizers", false);
        assertEquals("JRMNKZRS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Jose_nhIR0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jose", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_San_AFkB1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("San", false);
        assertEquals("HN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Jose4_CoGX3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jose4", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseSan_lSOK4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("JoseSan", false);
        assertEquals("HOSEN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseSan4_Htva6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("JoseSan4", false);
        assertEquals("HOSEN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseVowelBefore_vswA7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("eJose", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseVowelAfter_EHnV8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Josea", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseVowelAfter2_gLVC9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Joseo", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelBefore_jsPI10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("tJose", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter_XHgd11() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Josek", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter2_DNPz12() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Josez", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseAtEnd_kLdr13() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Joses", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter3_MAYl14() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Joseb", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter4_EJHn15() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jone", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JoseNotVowelAfter5_yRYv16() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jonek", false);
        assertEquals("HOSE", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCWithSpace_IAwT3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("CKMKRacGregor", true);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneKRK_oozP1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("KRKirk", false);
        assertEquals("KRK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testANKAtEndANKithNoMatch_CmRL13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("ANK", doubleMetaphone.doubleMetaphone("ANKang", false));
    }
}