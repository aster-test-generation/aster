/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Blake3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitHash_QNIk0() throws Exception {
        Blake3 result = Blake3.initHash();
        assert result instanceof Blake3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeyedHash_SJth0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] data = "data".getBytes();
        byte[] expected = "expectedHash".getBytes();
        byte[] result = Blake3.keyedHash(key, data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashValidKey_CGrA0() throws Exception {
        byte[] key = new byte[32];
        Blake3 blake3 = Blake3.initKeyedHash(key);
        assert true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashInvalidKey_jwfE1() throws Exception {
        byte[] key = new byte[31];
        try {
            Blake3 blake3 = Blake3.initKeyedHash(key);
            assert false;
        } catch (IllegalArgumentException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_RaQP0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{0x1, 0x2, 0x3, 0x4, 0x5};
        byte[] result = Blake3.hash(data);
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_lfMX0() throws Exception {
        byte[] kdfContext = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }
}