/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_QYZj0() {
        String key = "myKey";
        String valueToDigest = "myValue";
        byte[] expected = HmacUtils.hmacSha384(key, valueToDigest);
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HmacMd5_gkIO0() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HmacNotAvailable_dByU1_zwSd0() {
        try {
            HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512);
        } catch (AssertionError e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_jAzH0_bIja0_1() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        byte[] expected = HmacUtils.hmacSha512(key, valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_jAzH0_bIja0_2() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        byte[] expected = HmacUtils.hmacSha512(key, valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_iEgI0_DAdG0_1() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        byte[] expectedResult = HmacUtils.hmacSha1(key, valueToDigest);
        assertNotNull(expectedResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_iEgI0_DAdG0_2() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        byte[] expectedResult = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expectedResult, HmacUtils.hmacSha1(key, valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_ihut0_fid1() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        String expected = "01433efd5f16327ea4b31144572c67f6";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_xlyg0_MNiU0_fid1() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        String expected = "some expected hmac sha512 hex value";
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_fsyo0_txkN0_fid1() throws IOException {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "value".getBytes();
        String expected = "expectedHmacSha1Hex";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_gjnH0_vTux0_fid1() throws IOException {
        byte[] key = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] valueToDigest = new byte[]{11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        String expected = "your expected hmacSha512Hex result";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_FYMc0_PBUJ0_fid1() throws IOException {
        byte[] key = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        byte[] valueToDigest = new byte[]{(byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        String expectedResult = "20205e09c612a5a1a23f72e22668fb650ecbf0d3b86ffcc7c3c58c8ed3902b6d40305462d152ff1f9c9c6826c268c5cae4bdd38130b899f1ef9e61c0cb3d9a3c";
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_aGyN0_HVoR0_fid1() throws IOException {
        byte[] key = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        byte[] valueToDigest = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        String expectedResult = "a6a5a4a3a2a1a0a1a2a3a4a5a6";
        String actualResult = HmacUtils.hmacSha384Hex(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmacWithNullMac_QRjG1_yrlC0_fid1() throws java.io.IOException {
        byte[] valueToDigest = "valueToDigest".getBytes();
    }
}