/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.Attribute;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributePointer_Test_Passing {
JDOMAttributePointer jdomattributepointer;
private Attribute attr;
@Mock
private Attribute attribute;
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_1() throws Exception {
        jdomattributepointer = Mockito.mock(JDOMAttributePointer.class);
        NodePointer nodePointer1 = Mockito.mock(NodePointer.class);
        NodePointer nodePointer2 = Mockito.mock(NodePointer.class);
        Mockito.when(nodePointer1.compareTo(nodePointer2)).thenReturn(1);
        Mockito.when(nodePointer2.compareTo(nodePointer1)).thenReturn(-1);
        assertEquals(1, jdomattributepointer.compareChildNodePointers(nodePointer1, nodePointer2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_2() throws Exception {
        jdomattributepointer = Mockito.mock(JDOMAttributePointer.class);
        NodePointer nodePointer1 = Mockito.mock(NodePointer.class);
        NodePointer nodePointer2 = Mockito.mock(NodePointer.class);
        Mockito.when(nodePointer1.compareTo(nodePointer2)).thenReturn(1);
        Mockito.when(nodePointer2.compareTo(nodePointer1)).thenReturn(0);
        assertEquals(0, jdomattributepointer.compareChildNodePointers(nodePointer2, nodePointer1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_NullParent_dwEz0() {
    JDOMAttributePointer pointer = new JDOMAttributePointer(null, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_EmptyParent_MqTR1() {
    JDOMAttributePointer pointer = new JDOMAttributePointer(new DOMNodePointer(null, null, null), null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_GaAf0() throws Exception {
    DOMNodePointer parent = new DOMNodePointer(null, null, null);
    Attribute attr = mock(Attribute.class);
    JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(parent, attr);
    String expectedPrefix = "prefix";
    String expectedLocalName = "localName";
    when(JDOMNodePointer.getPrefix(attr)).thenReturn(expectedPrefix);
    when(JDOMNodePointer.getLocalName(attr)).thenReturn(expectedLocalName);
    QName actual = jdomattributepointer.getName();
    assertEquals(new QName(expectedPrefix, expectedLocalName), actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_FkgL0() {
    DOMNodePointer parent = new DOMNodePointer(null, null, null);
    Attribute attr = new Attribute("attr", "attrValue");
    JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(parent, attr);
    boolean result = jdomattributepointer.isLeaf();
    assertEquals(true, result);
}
}