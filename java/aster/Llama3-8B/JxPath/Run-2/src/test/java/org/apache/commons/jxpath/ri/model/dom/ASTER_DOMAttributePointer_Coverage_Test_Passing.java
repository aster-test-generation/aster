/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.QName;
import org.w3c.dom.Attr;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMAttributePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullNode_JjrG0() {
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
    boolean result = domAttributePointer.testNode(null);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullValue_MTVW0() {
        DOMAttributePointer pointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        Object result = pointer.getValue();
        assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyValue_TpcE1() {
        DOMAttributePointer pointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("");
        pointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), attr);
        Object result = pointer.getValue();
        assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NonEmptyValue_EoHF2() {
        DOMAttributePointer pointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("TestValue");
        pointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), attr);
        Object result = pointer.getValue();
        assert result.equals("TestValue");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_SpecifiedAttr_HYlT3() {
        DOMAttributePointer pointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("TestValue");
        when(attr.getSpecified()).thenReturn(true);
        pointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), attr);
        Object result = pointer.getValue();
        assert result.equals("TestValue");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_UnspecifiedAttr_wxcL4() {
        DOMAttributePointer pointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("TestValue");
        when(attr.getSpecified()).thenReturn(false);
        pointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), attr);
        Object result = pointer.getValue();
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_LCtJ0() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        Attr attr = mock(Attr.class);
        when(domNodePointer.getPrefix(attr)).thenReturn("prefix");
        when(domNodePointer.getLocalName(attr)).thenReturn("localName");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        QName result = domAttributePointer.getName();
        assertEquals(new QName("prefix", "localName"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameNull_DGQD1() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        try {
            domAttributePointer.getName();
            assertEquals(false, true);
        } catch (NullPointerException e) {
            assertEquals(true, true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIAttrIsNull_wzIJ0() {
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        Attr attr = null;
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        String namespaceURI = domAttributePointer.getNamespaceURI();
        assertNull(namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_NullParent_VcvE0() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, null);
        assertEquals("@", pointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_EmptyParent_qOiH1() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, null);
        assertEquals("@", pointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_NonEmptyParent_EtXf2() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        parent.asPath();
        DOMAttributePointer pointer = new DOMAttributePointer(parent, null);
        assertEquals("/@", pointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_Name_RTwh3() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, null);
        pointer.getName();
        assertEquals("@name", pointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeTypeNode_NcvL1_dUWB0() {
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
    boolean result = domAttributePointer.isLeaf();
    Assertions.assertTrue(result);
}
}