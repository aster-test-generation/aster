/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AncestorContext_Test_Passing {
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private SelfContext selfContext;
@Mock
    private AncestorContext ancestorContext;
@Mock
    private Object superObject;
private boolean setStarted = false;
@Mock
    private NodePointer nodePointer;
@Mock
    private NodeTypeTest nodeTest;
    private NodePointer currentNodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDocumentOrder_aDhE0_RdCZ0() {
    NodeTypeTest nodeTest = new NodeTypeTest(0);
    SelfContext selfContext = new SelfContext(null, nodeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
    AncestorContext ancestorContext = new AncestorContext(namespaceContext, false, nodeTest);
    int result = selfContext.getDocumentOrder();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_UdBB0_xILE0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    AncestorContext ancestorContext = new AncestorContext(null, true, nodeTypeTest);
    SelfContext selfContext = new SelfContext(ancestorContext, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    NodePointer result = namespaceContext.getCurrentNodePointer();
    assertEquals(result, result);
}
}