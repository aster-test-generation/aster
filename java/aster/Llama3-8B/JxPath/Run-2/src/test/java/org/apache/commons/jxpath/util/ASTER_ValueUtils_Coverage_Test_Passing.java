/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ValueUtils_Coverage_Test_Passing {
        private Object value;
    private Method getAccessibleMethod(Method method) {
        return method;
    }
   
    private Object createObject() throws Exception {
        return new Object();
    }
    private JXPathException createJXPathException(String message) {
        return new JXPathException(message);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_raMC0() throws Exception {
        Object array = new Integer[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, 1);
        assertEquals(2, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_OutOfBounds_UqsC1() throws Exception {
        Object array = new Integer[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, 4);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_IBNR2() throws Exception {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object value = ValueUtils.getValue(list, 1);
        assertEquals(2, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_OutOfBounds_ioJq3() throws Exception {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object value = ValueUtils.getValue(list, 4);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Collection_HgDF4() throws Exception {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Object value = ValueUtils.getValue(collection, 1);
        assertEquals(2, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Collection_OutOfBounds_Ydto5() throws Exception {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Object value = ValueUtils.getValue(collection, 4);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullCollection_DAHP6() throws Exception {
        Object collection = null;
        Object value = ValueUtils.getValue(collection, 0);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyArray_tVtb7() throws Exception {
        Object array = new Integer[0];
        Object value = ValueUtils.getValue(array, 0);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyList_pBPi8() throws Exception {
        List<Integer> list = new ArrayList<>();
        Object value = ValueUtils.getValue(list, 0);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyCollection_LOnI9() throws Exception {
        Collection<Integer> collection = new ArrayList<>();
        Object value = ValueUtils.getValue(collection, 0);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NegativeIndex_Array_flzb10() throws Exception {
        Object array = new Integer[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, -1);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NegativeIndex_List_tzYQ11() throws Exception {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object value = ValueUtils.getValue(list, -1);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NegativeIndex_Collection_qtMz12() throws Exception {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Object value = ValueUtils.getValue(collection, -1);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullValue_gVfU13() throws Exception {
        Object collection = new Integer[]{1, 2, 3};
        Object value = ValueUtils.getValue(collection, 1);
        assertEquals(2, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_LastElement_Array_oDGr14() throws Exception {
        Object array = new Integer[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, 2);
        assertEquals(3, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_LastElement_List_QAtv15() throws Exception {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object value = ValueUtils.getValue(list, 2);
        assertEquals(3, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_LastElement_Collection_exIU16() throws Exception {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Object value = ValueUtils.getValue(collection, 2);
        assertEquals(3, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InstanceOfPropertyDescriptor_ReturnsValue_NSoc6() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("property", bean.getClass());
        Object result = ValueUtils.getValue(bean, propertyDescriptor, 0);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullBean_ReturnsNull_MNGP8() throws Exception {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("property", Object.class);
        Object result = ValueUtils.getValue(bean, propertyDescriptor, 0);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullPropertyDescriptor_ReturnsNull_LzmM9() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        Object result = ValueUtils.getValue(bean, propertyDescriptor, 0);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLength_ReadMethodNotNull_ebXp0() throws Exception {
        IndexedPropertyDescriptor pd = mock(IndexedPropertyDescriptor.class);
        when(pd.getReadMethod()).thenReturn(mock(Method.class));
        Object object = mock(Object.class);
        int result = ValueUtils.getIndexedPropertyLength(object, pd);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLength_ReadMethodNotNull_Value_AaET1() throws Exception {
        IndexedPropertyDescriptor pd = mock(IndexedPropertyDescriptor.class);
        when(pd.getReadMethod()).thenReturn(mock(Method.class));
        Object object = mock(Object.class);
        when(ValueUtils.getValue(object, pd)).thenReturn("some value");
        int result = ValueUtils.getIndexedPropertyLength(object, pd);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLength_ReadMethodNotNull_Length_TLSL2() throws Exception {
        IndexedPropertyDescriptor pd = mock(IndexedPropertyDescriptor.class);
        when(pd.getReadMethod()).thenReturn(mock(Method.class));
        Object object = mock(Object.class);
        when(ValueUtils.getValue(object, pd)).thenReturn("some value");
        when(ValueUtils.getLength("some value")).thenReturn(10);
        int result = ValueUtils.getIndexedPropertyLength(object, pd);
        assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLength_ReadMethodNull_qzAt3() throws Exception {
        IndexedPropertyDescriptor pd = mock(IndexedPropertyDescriptor.class);
        when(pd.getIndexedReadMethod()).thenReturn(null);
        Object object = mock(Object.class);
        try {
            ValueUtils.getIndexedPropertyLength(object, pd);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No indexed read method for property " + pd.getName(), e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLength_ReadMethodNull_Invoke_TjTz4() throws Exception {
        IndexedPropertyDescriptor pd = mock(IndexedPropertyDescriptor.class);
        when(pd.getIndexedReadMethod()).thenReturn(mock(Method.class));
        Object object = mock(Object.class);
        try {
            ValueUtils.getIndexedPropertyLength(object, pd);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot determine the length of the indexed property " + pd.getName(), e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_CatchException_YyCU0() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("property", bean.getClass());
        int index = 0;
        Object value = new Object();
        Exception ex = new Exception("Test exception");
        try {
            ValueUtils.setValue(bean, propertyDescriptor, index, value);
            fail("Expected exception");
        } catch (Exception e) {
            assertEquals(ex.getMessage(), e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_JXPathException_sPhJ1() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("property", bean.getClass());
        int index = 0;
        Object value = null;
        try {
            ValueUtils.setValue(bean, propertyDescriptor, index, value);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ConvertValue_Hinp2() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("property", bean.getClass());
        int index = 0;
        Object value = new Integer(1);
        Class type = Integer.class;
        ValueUtils.setValue(bean, propertyDescriptor, index, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Array_ljaT0() throws Exception {
        Object array = new int[5];
       ValueUtils.setValue(array, 0, 10);
        assertTrue(((int[]) array)[0] == 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_List_zXsl1() throws Exception {
        List<String> list = new ArrayList<>();
        list.add("Hello");
       ValueUtils.setValue(list, 0, "World");
        assertTrue(list.get(0).equals("World"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Collection_ThrowsException_ZJED2() throws Exception {
        Collection<String> collection = new HashSet<>();
        collection.add("Hello");
        assertThrows(UnsupportedOperationException.class, () ->ValueUtils.setValue(collection, 0, "World"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNullCollection_Rmad0() throws Exception {
        Object collection = null;
        Object result = ValueUtils.remove(collection, 0);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithNoElements_gWLc1_1() throws Exception {
        List<String> collection = new ArrayList<>();
        Object result = ValueUtils.remove(collection, 0);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithNoElements_gWLc1_2() throws Exception {
        List<String> collection = new ArrayList<>();
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(collection, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithOneElement_nNBX2_1() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        Object result = ValueUtils.remove(collection, 0);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithOneElement_nNBX2_2() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(1, collection.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithOneElement_nNBX2_3() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        Object result = ValueUtils.remove(collection, 0);
        assertEquals("Hello", collection.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithMultipleElements_DTko3_1() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Object result = ValueUtils.remove(collection, 0);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithMultipleElements_DTko3_2() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(1, collection.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithMultipleElements_DTko3_3() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Object result = ValueUtils.remove(collection, 0);
        assertEquals("World", collection.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithArray_aBEA4_1() throws Exception {
        Object[] collection = new Object[] {"Hello", "World"};
        Object result = ValueUtils.remove(collection, 0);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithArray_aBEA4_2() throws Exception {
        Object[] collection = new Object[] {"Hello", "World"};
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(1, Array.getLength(result));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithArray_aBEA4_3() throws Exception {
        Object[] collection = new Object[] {"Hello", "World"};
        Object result = ValueUtils.remove(collection, 0);
        assertEquals("World", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithArrayAndIndexOutOfRange_CqXi5() throws Exception {
        Object[] collection = new Object[] {"Hello", "World"};
        try {
            ValueUtils.remove(collection, 2);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No such element at index 2", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithCollectionAndIndexOutOfRange_Kiow7() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        try {
            ValueUtils.remove(collection, 2);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot remove java.util.ArrayList[2]", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithCollectionAndIndexOne_VJAT9_1() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Object result = ValueUtils.remove(collection, 1);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithCollectionAndIndexOne_VJAT9_2() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Object result = ValueUtils.remove(collection, 1);
        assertEquals(1, collection.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithCollectionAndIndexOne_VJAT9_3() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Object result = ValueUtils.remove(collection, 1);
        assertEquals("Hello", collection.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithCollectionAndIndexGreaterThanSize_Iuxx10() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        try {
            ValueUtils.remove(collection, 1);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No such element at index 1", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithAccessibleMethod_yWDF0() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("property", bean.getClass());
        Method method = getAccessibleMethod(propertyDescriptor.getReadMethod());
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
        assertNotNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullBean_AZPN2() throws Exception {
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("property", Object.class);
        Object value = ValueUtils.getValue(null, propertyDescriptor);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullPropertyDescriptor_CdXH3() throws Exception {
        Object bean = new Object();
        Object value = ValueUtils.getValue(bean, null);
        assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithValidBeanAndPropertyDescriptor_oTsE0() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("propertyName", bean.getClass());
        Object value = "value";
        ValueUtils.setValue(bean, propertyDescriptor, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullBean_Mkjq1() throws Exception {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("propertyName", new Object().getClass());
        Object value = "value";
        try {
            ValueUtils.setValue(bean, propertyDescriptor, value);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("Cannot modify property: null.propertyName", ex.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullPropertyDescriptor_DlTo2() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        Object value = "value";
        try {
            ValueUtils.setValue(bean, propertyDescriptor, value);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("No write method", ex.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithInvalidPropertyDescriptor_GHgW3() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("invalidProperty", bean.getClass());
        Object value = "value";
        try {
            ValueUtils.setValue(bean, propertyDescriptor, value);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("No write method", ex.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullValue_bmUa4() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("propertyName", bean.getClass());
        Object value = null;
        try {
            ValueUtils.setValue(bean, propertyDescriptor, value);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("Cannot modify property: " + bean.getClass().getName() + ".propertyName", ex.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithConvertFailure_WogE5() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("propertyName", bean.getClass());
        Object value = new Object();
        try {
            ValueUtils.setValue(bean, propertyDescriptor, value);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("Cannot modify property: " + bean.getClass().getName() + ".propertyName", ex.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithException_wpJC7() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("propertyName", bean.getClass());
        Object value = "value";
        try {
            ValueUtils.setValue(bean, propertyDescriptor, value);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("Cannot modify property: " + bean.getClass().getName() + ".propertyName", ex.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethodWithValidMethod_OQKN9() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("propertyName", bean.getClass());
        Method method = ValueUtils.getAccessibleMethod(propertyDescriptor.getWriteMethod());
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethodWithNullMethod_JYwm10() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("propertyName", bean.getClass());
        Method method = ValueUtils.getAccessibleMethod(null);
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertWithValidValue_Gljo11() throws Exception {
        Object value = "value";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_JHHM0_1() throws Exception {
        Object collection = new Integer[3];
        Object result = ValueUtils.expandCollection(collection, 5);
        for (int i = 0; i < 3; i++) {
        }
        for (int i = 3; i < 5; i++) {
        }
        assertEquals(5, Array.getLength(result));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_beLK1_1() throws Exception {
        List<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(5, ((List) result).size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_beLK1_2() throws Exception {
        List<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(1, ((List) result).get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_beLK1_3() throws Exception {
        List<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(2, ((List) result).get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_beLK1_4() throws Exception {
        List<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(null, ((List) result).get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_beLK1_5() throws Exception {
        List<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(null, ((List) result).get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_beLK1_6() throws Exception {
        List<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(null, ((List) result).get(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethodNullMethod_UEHQ0() throws Exception {
        Method method = null;
        Method result = ValueUtils.getAccessibleMethod(method);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithoutAccessibleMethod_lIqB1_WgeN0() throws Exception {
    Object bean = new Object();
    PropertyDescriptor propertyDescriptor = new PropertyDescriptor("nonExistingProperty", bean.getClass());
    try {
        ValueUtils.expandCollection(bean, 10);
        fail("Expected JXPathException");
    } catch (JXPathException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_MjqM0_LMOw1() throws Exception {
    Map<String, Object> container = new HashMap<>();
    container.put("value", "Hello");
    Object result = ValueUtils.expandCollection(container, 1);
    assertEquals("Hello", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_InstanceOfIndexedPropertyDescriptor_ReturnsValue_QWUL0_hmml0() throws Exception {
    Object bean = new Object();
    PropertyDescriptor propertyDescriptor = new PropertyDescriptor("property", bean.getClass());
    Method method = propertyDescriptor.getReadMethod();
    method.setAccessible(true);
    method.invoke(bean);
    Object result = ValueUtils.expandCollection(method.invoke(bean), 0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_NullIndex_ReturnsNull_Qbte10_GaaW1() throws Exception {
    Object bean = new Object();
    Object result = ValueUtils.expandCollection(bean, 0);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexedPropertyLength_ReadMethodNull_Invoke_Count_ZggF5_pZrm0() throws Exception {
    IndexedPropertyDescriptor pd = mock(IndexedPropertyDescriptor.class);
    when(pd.getIndexedReadMethod()).thenReturn(mock(Method.class));
    Object object = mock(Object.class);
    for (int i = 0; i < Integer.MAX_VALUE; i++) {
        try {
            when(mock(Method.class).invoke(object, Integer.valueOf(i))).thenReturn(null);
        } catch (final Throwable t) {
            fail("Expected JXPathException");
        }
    }
    try {
        ValueUtils.getIndexedPropertyLength(object, pd);
        fail("Expected JXPathException");
    } catch (JXPathException e) {
        assertEquals("Cannot determine the length of the indexed property " + pd.getName(), e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexedPropertyLength_ReadMethodNull_Invoke_Count_Return_XaDR6_pBRw0() throws Exception {
    IndexedPropertyDescriptor pd = mock(IndexedPropertyDescriptor.class);
    when(pd.getIndexedReadMethod()).thenReturn(mock(Method.class));
    Object object = mock(Object.class);
    int UNKNOWN_LENGTH_MAX_COUNT = 100; // declare the variable
    int result = ValueUtils.getIndexedPropertyLength(object, pd);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithMethodInvokeFailure_EPhs6_OLgm0() throws Exception {
    Object bean = new Object();
    PropertyDescriptor propertyDescriptor = new PropertyDescriptor("propertyName", bean.getClass());
    Object value = "value";
    try {
        Method method = bean.getClass().getMethod("methodName", String.class);
        ValueUtils.setValue(bean, propertyDescriptor, value);
        fail("Expected JXPathException");
    } catch (JXPathException ex) {
        assertEquals("Cannot modify property: " + bean.getClass().getName() + ".propertyName", ex.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithNoElements_gWLc1() throws Exception {
        List<String> collection = new ArrayList<>();
        Object result = ValueUtils.remove(collection, 0);
        assertNotNull(result);
        assertEquals(collection, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithOneElement_nNBX2() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        Object result = ValueUtils.remove(collection, 0);
        assertNotNull(result);
        assertEquals(1, collection.size());
        assertEquals("Hello", collection.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithMultipleElements_DTko3() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Object result = ValueUtils.remove(collection, 0);
        assertNotNull(result);
        assertEquals(1, collection.size());
        assertEquals("World", collection.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithArray_aBEA4() throws Exception {
        Object[] collection = new Object[] {"Hello", "World"};
        Object result = ValueUtils.remove(collection, 0);
        assertNotNull(result);
        assertEquals(1, Array.getLength(result));
        assertEquals("World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionWithCollectionAndIndexOne_VJAT9() throws Exception {
        List<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Object result = ValueUtils.remove(collection, 1);
        assertNotNull(result);
        assertEquals(1, collection.size());
        assertEquals("Hello", collection.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_JHHM0() throws Exception {
        Object collection = new Integer[3];
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(5, Array.getLength(result));
        for (int i = 0; i < 3; i++) {
            assertEquals(((Integer[]) collection)[i], ((Integer[]) result)[i]);
        }
        for (int i = 3; i < 5; i++) {
            assertEquals(null, ((Integer[]) result)[i]);
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_beLK1() throws Exception {
        List<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(5, ((List) result).size());
        assertEquals(1, ((List) result).get(0));
        assertEquals(2, ((List) result).get(1));
        assertEquals(null, ((List) result).get(2));
        assertEquals(null, ((List) result).get(3));
        assertEquals(null, ((List) result).get(4));
    }
}