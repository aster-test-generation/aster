/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPropertyPointer_Test_Failing {
@Mock
    private DynamicPropertyHandler handler;
@Mock
    private ValueUtils valueUtils;
@Mock
    private PageContextHandler pageContextHandler;
@Mock
    private DOMNodePointer domNodePointer;
private DynamicPropertyPointer dynamicPropertyPointer;
private String[] names = new String[]{"prop1", "prop2", "prop3"};
private String name;
@Mock
    private JXPathContext jxpathContext;
@Mock
    private NodePointer nodePointer;
@Mock
    private DynamicPropertyHandler dynamicPropertyHandler;
@Mock
    private AbstractFactory abstractFactory;
@Mock
    private JXPathContext jXPathContext;
@Mock
    private DynamicPropertyPointer dynamicpropertypointer;
@Mock
    private VariablePointer variablePointer;
@Mock
    private QName qName;
@Mock
    private DOMNodePointer parent;
@Mock
    private DOMNodePointer immediateParentPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertynameNullName_bYuq0() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(new DOMNodePointer(null, Locale.US, "id"), new PageContextHandler());
    String propertyName = dynamicPropertyPointer.getPropertyName();
    Assertions.assertEquals("*", propertyName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathNullCollection_bgBJ0() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(new DOMNodePointer(null, Locale.US, "id"), new PageContextHandler());
    JXPathContext context = JXPathContext.newContext(null, null);
    dynamicPropertyPointer.createPath(context);
    assertEquals(null, dynamicPropertyPointer.getBaseValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        dynamicpropertypointer = new DynamicPropertyPointer(immediateParentPointer, handler);
        // Arrange
        String expectedPath = "/.[@name='someProperty']";
        // Act
        String actualPath = dynamicpropertypointer.asPath();
        // Assert
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_EmptyParentPointer_LsvS0() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(new DOMNodePointer(null, Locale.US, "id"), new PageContextHandler());
    assertEquals("/.[@name='']]", dynamicPropertyPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNamesNullHandler_Pojt0() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, new PageContextHandler());
    String[] result = dynamicPropertyPointer.getPropertyNames();
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyIndex_2() throws Exception{
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        int initialIndex = 0;
        dynamicpropertypointer.setPropertyIndex(initialIndex);
        int newIndex = 1;
        dynamicpropertypointer.setPropertyIndex(newIndex);
        Assertions.assertNull(dynamicpropertypointer.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathIndex_JgJd2_wXrP0() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(new DOMNodePointer(null, Locale.US, "id"), new PageContextHandler());
    JXPathContext context = JXPathContext.newContext(null, null);
    dynamicPropertyPointer.createPath(context);
    assertEquals(0, dynamicPropertyPointer.getPropertyCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_sNXx0() throws Exception {
    dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
    when(handler.getProperty(any(), any())).thenReturn("some value");
    when(domNodePointer.getParent()).thenReturn(variablePointer);
    QName qName = new QName("some prefix", "some local name");
    when(variablePointer.getName()).thenReturn(qName);
    Object immediateNode = dynamicPropertyPointer.getImmediateNode();
    assertEquals("some value", immediateNode);
    verify(handler, times(1)).getProperty(any(), any());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testasPath_OmlH0() throws Exception {
    DynamicPropertyPointer dynamicpropertypointer = new DynamicPropertyPointer(null, null);
    String expectedPath = "/.[@name='someProperty']";
    String actualPath = dynamicpropertypointer.asPath();
    assertEquals(expectedPath, actualPath);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_WkZp0_1() throws Exception {
    names = new String[0];
    String requiredPropertyName = "requiredProperty"; // fixed error
    dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
    String[] allNames = new String[]{"name1", "name2", "name3"};
    when(handler.getPropertyNames(any())).thenReturn(allNames);
    String[] result = dynamicpropertypointer.getPropertyNames();
    for (int i = 0; i < allNames.length; i++) {
    }
    when(handler.getPropertyNames(any())).thenReturn(new String[0]);
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    assertEquals(allNames.length, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_WkZp0_3() throws Exception {
    names = new String[0];
    String requiredPropertyName = "requiredProperty"; // fixed error
    dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
    String[] allNames = new String[]{"name1", "name2", "name3"};
    when(handler.getPropertyNames(any())).thenReturn(allNames);
    String[] result = dynamicpropertypointer.getPropertyNames();
    for (int i = 0; i < allNames.length; i++) {
    }
    when(handler.getPropertyNames(any())).thenReturn(new String[0]);
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    assertEquals(0, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_WkZp0_4() throws Exception {
    names = new String[0];
    String requiredPropertyName = "requiredProperty"; // fixed error
    dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
    String[] allNames = new String[]{"name1", "name2", "name3"};
    when(handler.getPropertyNames(any())).thenReturn(allNames);
    String[] result = dynamicpropertypointer.getPropertyNames();
    for (int i = 0; i < allNames.length; i++) {
    }
    when(handler.getPropertyNames(any())).thenReturn(new String[0]);
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_WkZp0_5() throws Exception {
    names = new String[0];
    String requiredPropertyName = "requiredProperty"; // fixed error
    dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
    String[] allNames = new String[]{"name1", "name2", "name3"};
    when(handler.getPropertyNames(any())).thenReturn(allNames);
    String[] result = dynamicpropertypointer.getPropertyNames();
    for (int i = 0; i < allNames.length; i++) {
    }
    when(handler.getPropertyNames(any())).thenReturn(new String[0]);
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    assertEquals("name1", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_WkZp0_6() throws Exception {
    names = new String[0];
    String requiredPropertyName = "requiredProperty"; // fixed error
    dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
    String[] allNames = new String[]{"name1", "name2", "name3"};
    when(handler.getPropertyNames(any())).thenReturn(allNames);
    String[] result = dynamicpropertypointer.getPropertyNames();
    for (int i = 0; i < allNames.length; i++) {
    }
    when(handler.getPropertyNames(any())).thenReturn(new String[0]);
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_WkZp0_8() throws Exception {
    names = new String[0];
    String requiredPropertyName = "requiredProperty"; // fixed error
    dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
    String[] allNames = new String[]{"name1", "name2", "name3"};
    when(handler.getPropertyNames(any())).thenReturn(allNames);
    String[] result = dynamicpropertypointer.getPropertyNames();
    for (int i = 0; i < allNames.length; i++) {
    }
    when(handler.getPropertyNames(any())).thenReturn(new String[0]);
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    assertEquals("name2", result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_WkZp0_9() throws Exception {
    names = new String[0];
    String requiredPropertyName = "requiredProperty"; // fixed error
    dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
    String[] allNames = new String[]{"name1", "name2", "name3"};
    when(handler.getPropertyNames(any())).thenReturn(allNames);
    String[] result = dynamicpropertypointer.getPropertyNames();
    for (int i = 0; i < allNames.length; i++) {
    }
    when(handler.getPropertyNames(any())).thenReturn(new String[0]);
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2"});
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"name1", "name2", "name3"});
    result = dynamicpropertypointer.getPropertyNames();
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPropertyIndex_zkgF0_2() throws Exception{
    PageContextHandler pageContextHandler = new PageContextHandler();
    DynamicPropertyPointer dynamicpropertypointer = new DynamicPropertyPointer(null, pageContextHandler);
    int initialIndex = 0;
    dynamicpropertypointer.setPropertyIndex(initialIndex);
    int newIndex = 1;
    dynamicpropertypointer.setPropertyIndex(newIndex);
    Assertions.assertNull(dynamicpropertypointer.getName());}
}