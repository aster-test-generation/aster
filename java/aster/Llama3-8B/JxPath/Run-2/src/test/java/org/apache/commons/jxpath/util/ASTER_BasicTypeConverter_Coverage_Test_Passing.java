/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.jxpath.JXPathTypeConversionException;
import org.apache.commons.jxpath.Pointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicTypeConverter_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForConcreteClass_ciIc0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForAbstractClass_FlBW1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(AbstractCollection.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForInterface_bdmw2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(List.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForNonInstantiableClass_GJcf3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(Object.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForInstantiableClass_OYXs4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Integer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForCollectionTypes_Pbsu5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Collection.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForCollectionTypes_Pbsu5_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Set.class));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForNonCollectionTypes_NtPa6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForNonInstantiableCollectionTypes_Grpj7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(AbstractList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_WiaD0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.0);
        Assertions.assertEquals(Byte.valueOf((byte) 10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_taGh1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.0);
        Assertions.assertEquals(Short.valueOf((short) 10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_qzLc2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.0);
        Assertions.assertEquals(Integer.valueOf((int) 10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_OJjD3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.0);
        Assertions.assertEquals(Long.valueOf((long) 10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_tyPG4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.0);
        Assertions.assertEquals(Float.valueOf((float) 10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_smmw5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.0);
        Assertions.assertEquals(Double.valueOf(10.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_rBTZ6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.0);
        Assertions.assertEquals(BigInteger.valueOf((long) 10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_KIBd7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.0);
        Assertions.assertEquals(new BigDecimal(10.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberException_nlfV10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.allocateNumber(Object.class, 10.0);
            Assertions.fail("Expected JXPathTypeConversionException");
        } catch (JXPathTypeConversionException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrimitiveType_clhn1_yNtS0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.convertStringToPrimitive("true", Boolean.class) != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberType_QEbU3_bIRk0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.convertStringToPrimitive("1", Integer.class) != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberToString_usCe5_PmqA1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.convertStringToPrimitive("1", Integer.class) instanceof Integer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray_qBMD6_yiJx0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object[] array = new Object[] {"1", "2", "3"};
    assertTrue(converter.canConvert(array, Object[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollection_EBqv7_jjUp0() {
    Collection collection = new ArrayList<>();
    collection.add(1);
    collection.add(2);
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert(collection, collection.getClass()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeSet_Vxub8_eIVV0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("hello", String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayToCollection_llPG11_yoyA0() {
    Object[] array = new Object[] {1, 2, 3};
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive(String.valueOf(array), Collection.class);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayToArray_tiDJ13_zQkD0() {
    Object[] array1 = new Object[] {1, 2, 3};
    Object[] array2 = new Object[] {4, 5, 6};
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive(array1.toString(), Object[].class);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayToPointer_NTzp18_gGPQ1() {
    Object[] array = new Object[] {"hello", "world"};
    BasicTypeConverter converter = new BasicTypeConverter();
    assertFalse(converter.canConvert(array, Pointer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayToCollectionOfBoolean_vmil21_fdQs0() {
    Object[] array = new Object[] {true, false};
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter instanceof BasicTypeConverter);
    Collection collection = (Collection) converter.convert(array, Collection.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayToCollectionOfInteger_VCVd23_GGyj0() {
    Object[] array = new Object[] {"1", "2"};
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<Integer> result = (Collection<Integer>) converter.convertStringToPrimitive(array, Collection.class);
    assertTrue(result != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionForConcreteClass_heMn0_RwlQ0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection result = (Collection) converter.convertStringToPrimitive("123", ArrayList.class);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionForConcreteClass_heMn0_RwlQ0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection result = (Collection) converter.convertStringToPrimitive("123", ArrayList.class);
    assertTrue(result instanceof ArrayList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionForInterface_nMOi1_uGWq0() {
    try {
        BasicTypeConverter converter = new BasicTypeConverter();
        converter.convertStringToPrimitive("123", Integer.class);
        fail("Expected JXPathInvalidAccessException");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionForExceptionWithMessage_cXeh9_ELwl0() {
    try {
        BasicTypeConverter converter = new BasicTypeConverter();
        converter.convertStringToPrimitive("123", Integer.class);
        fail("Expected JXPathInvalidAccessException");
    } catch (Exception e) {
        assertEquals("Cannot convert string to primitive", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateNumberAtomicInteger_tJgv8_WBwD0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("10", Integer.class);
    Assertions.assertEquals(Integer.valueOf(10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableList_ambJ0_oJlM0() {
    List<String> list = new ArrayList<>();
    list.add("Hello");
    list.add("World");
    Collection<String> unmodifiableList = Collections.unmodifiableCollection(list);
    assert !list.equals(unmodifiableList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableSortedSet_tYuU1_nVlB0() {
    SortedSet<String> sortedSet = new TreeSet<>();
    sortedSet.add("Hello");
    sortedSet.add("World");
    Collection<String> unmodifiableSortedSet = Collections.unmodifiableCollection(sortedSet);
    assert !sortedSet.equals(unmodifiableSortedSet);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableSet_nsbs2_YTwi0() {
    Set<String> set = new HashSet<>();
    set.add("Hello");
    set.add("World");
    Collection<String> unmodifiableSet = Collections.unmodifiableCollection(set);
    assert !set.equals(unmodifiableSet);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollection_pZZG3_MIby0() {
    Collection<String> collection = new ArrayList<>();
    collection.add("Hello");
    collection.add("World");
    Collection<?> unmodifiableCollection = Collections.unmodifiableCollection(collection);
    assert !collection.equals(unmodifiableCollection);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertPointer_qoIV3_kuDA0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object pointer = "value";
    Object result = converter.convertStringToPrimitive(pointer, String.class);
    Assertions.assertEquals(pointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive_PUBy10_NjzE0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("10", int.class);
    Assertions.assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive3_yUlT12_OMVf0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("0.0", double.class);
    Assertions.assertEquals(0.0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive4_bqTl13_Djev0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("0.0", float.class);
    Assertions.assertEquals(0.0f, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive5_zLRG14_mJxs1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("0", long.class);
    Assertions.assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive6_WRgs15_SWzq0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("0", short.class);
    Assertions.assertEquals((short) 0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitive11_gRjm20_Xjnj0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("0", double.class);
    Assertions.assertEquals(0.0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAnnotationOnConstructor_ZmXJ22_tnPw0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive(null, Integer.class);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForCollectionTypes_Pbsu5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(List.class));
        assertTrue(converter.canCreateCollection(Collection.class));
        assertTrue(converter.canCreateCollection(Set.class));
}
}