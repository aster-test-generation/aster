/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Failing {
@Mock
    private PageContextHandler pageContextHandler;
@Mock
    private Locale locale;
@Mock
    private QName name;
@Mock
    private Object bean;
@Mock
    private PageContextHandler handler;
private DynamicPointer dynamicpointer;
@Mock
    private PropertyPointer propertyPointer;
@Mock
    private DynamicPointer parent;
@Mock
    private Object node;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameBeanAndName_Aaau5() {
    DynamicPointer dp1 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
    DynamicPointer dp2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
    boolean result = dp1.equals(dp2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        // Arrange
        when(name.hashCode()).thenReturn(123);
        when(bean).thenReturn("bean");
        // Act
        int result = dynamicpointer.hashCode();
        // Assert
        assertEquals(123 + System.identityHashCode("bean"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator() throws Exception {
        name = new QName("testName");
        dynamicpointer = new DynamicPointer(name, null, null, null);
        QName expectedName = new QName("expectedName");
        NodeIterator nodeIterator = dynamicpointer.attributeIterator(expectedName);
        Mockito.verify(dynamicpointer, Mockito.times(1)).attributeIterator(expectedName);
        Mockito.verifyNoMoreInteractions(dynamicpointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() {
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Arrange
        String expectedName = "expectedName";
        // Act
        QName actualName = dynamicpointer.getName();
        // Assert
    assertNull(expectedName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_EQYT0() {
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("testPrefix", "testLocalName"), bean, handler, locale);
        QName result = dynamicPointer.getName();
        assert result.getName().equals("testName");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        // Test with same object
        assertEquals(dynamicpointer, dynamicpointer);
        // Test with different object
        DynamicPointer other = new DynamicPointer(name, bean, handler, locale);
        assertNotEquals(dynamicpointer, other);
        // Test with different bean
        other = new DynamicPointer(name, new Object(), handler, locale);
        assertNotEquals(dynamicpointer, other);
        // Test with different name
        other = new DynamicPointer(new QName("newName"), bean, handler, locale);
        assertNotEquals(dynamicpointer, other);
        // Test with null bean
        other = new DynamicPointer(name, null, handler, locale);
        assertNotEquals(dynamicpointer, other);
        // Test with null name
        other = new DynamicPointer(null, bean, handler, locale);
        assertNotEquals(dynamicpointer, other);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_fid1() {
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Arrange
        String expectedName = "expectedName";
        // Act
        QName actualName = dynamicpointer.getName();
        // Assert
        assertEquals(expectedName, actualName.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_iTAk0_fid2() throws Exception{
    DynamicPointer dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
    PropertyPointer result = dynamicpointer.getPropertyPointer();
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisDynamicPropertyDeclarationSupported_I_QPgb0_fid2() {
    DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), pageContextHandler, locale);
    DynamicPointer otherDynamicPointer = new DynamicPointer(new QName("name"), new Object(), pageContextHandler, locale);
    boolean result = otherDynamicPointer.isLeaf();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisCollection_E_GaGS0_fid2() throws Exception{
    QName qname = new QName("name");
    Object obj = new Object();
    PageContextHandler pageContextHandler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicpointer = new DynamicPointer(qname, obj, pageContextHandler, locale);
    boolean result = dynamicpointer.isLeaf();
    Assertions.assertTrue(result);
}
}