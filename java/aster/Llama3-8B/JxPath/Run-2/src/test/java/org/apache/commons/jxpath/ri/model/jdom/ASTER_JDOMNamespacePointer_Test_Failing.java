/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespacePointer_Test_Failing {
@Mock
    private JDOMNamespacePointer jdomnamespacepointer;
private String prefix;
@Mock
    private DOMNodePointer parent;
@Mock
    private QName name;
private String namespaceURI;
@Mock
    private JDOMNamespacePointer mockJDOMNamespacePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Arrange
        Object value = "testValue";
        // Act
        jdomnamespacepointer.setValue(value);
        // Assert
        verify(parent, never()).setValue(value);
        verifyNoMoreInteractions(parent);
        verifyNoMoreInteractions(name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception{
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Arrange
        when(jdomnamespacepointer.isCollection()).thenReturn(true);
        // Act
        boolean result = jdomnamespacepointer.isCollection();
        // Assert
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception{
        jdomnamespacepointer = Mockito.mock(JDOMNamespacePointer.class);
        // Arrange
        Mockito.when(jdomnamespacepointer.getNamespaceURI()).thenReturn("namespaceURI");
        // Act
        Object immediateNode = jdomnamespacepointer.getImmediateNode();
        // Assert
        Assertions.assertEquals("namespaceURI", immediateNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_mlNb0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(parent, "prefix");
        QName result = jdomNamespacePointer.getName();
        assert result.getPrefix().equals("prefix");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_NonNullParent_komq1() {
        JDOMNamespacePointer parent = new JDOMNamespacePointer(null, "parentPrefix");
        JDOMNamespacePointer jdom = new JDOMNamespacePointer(parent, "prefix");
        String result = jdom.asPath();
        assert result.equals("parentPrefix/namespace::prefix");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_NullPrefix_ayhc3() {
        JDOMNamespacePointer jdom = new JDOMNamespacePointer(null, null);
        try {
            jdom.asPath();
            assert false;
        } catch (NullPointerException e) {
            assert true;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception{
        MockitoAnnotations.initMocks(this);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Arrange
        Mockito.when(parent.getBaseValue()).thenReturn("expectedValue");
        // Act
        Object result = jdomnamespacepointer.getBaseValue();
        // Assert
        assertEquals("expectedValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Arrange
        when(mockJDOMNamespacePointer.isLeaf()).thenReturn(false);
        // Act
        boolean result = jdomnamespacepointer.isLeaf();
        // Assert
        assertEquals(false, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_wnuu0_2() throws Exception {
    prefix = "testPrefix";
    JDOMNamespacePointer jdomnamespacepointer = Mockito.mock(JDOMNamespacePointer.class);
    JDOMNamespacePointer jdomnamespacepointer1 = new JDOMNamespacePointer(null, prefix);
    JDOMNamespacePointer jdomnamespacepointer2 = new JDOMNamespacePointer(null, prefix);
    jdomnamespacepointer1 = new JDOMNamespacePointer(null, "otherPrefix");
    jdomnamespacepointer1 = new JDOMNamespacePointer(null, prefix);
    jdomnamespacepointer2 = new JDOMNamespacePointer(null, prefix);
    jdomnamespacepointer1 = new JDOMNamespacePointer(null, "otherPrefix");
    jdomnamespacepointer2 = new JDOMNamespacePointer(null, "otherPrefix");
    assertNotEquals(jdomnamespacepointer1, jdomnamespacepointer2);}
}