/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.math.BigDecimal;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicTypeConverter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullObject_KjLK0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(null, Integer.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimitiveType_pdnd1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(1, Integer.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringType_GIpc2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert("hello", String.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanType_wyHR3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(true, Boolean.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberType_oJIS4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(1.0, Double.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_VhJh5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Integer[]{1, 2, 3}, Integer[].class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollection_LlHe6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Arrays.asList(1, 2, 3), List.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForConcreteClass_gJSv0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForAbstractClass_iJlT1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(AbstractCollection.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForList_OLpU3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(List.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForCollection_Vlgy4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Collection.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForSet_XEBI5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Set.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_ienY0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(null, int.class);
        Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToPrimitive_AUUt1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = new Object();
        Object result = converter.convert(object, int.class);
        Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_NIdG2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "123";
        Object result = converter.convert(object, int.class);
        Assertions.assertEquals(123, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToPrimitive_OfhJ3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = true;
        Object result = converter.convert(object, boolean.class);
        Assertions.assertTrue((boolean) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToPrimitive_FhAg4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = 123.45;
        Object result = converter.convert(object, double.class);
        Assertions.assertEquals(123.45, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToCollection_sfiz6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add(1);
        collection.add(2);
        Object result = converter.convert(collection, List.class);
        Assertions.assertTrue(result instanceof List);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToCollection_QBQn8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object array = new int[]{1, 2};
        Object result = converter.convert(array, List.class);
        Assertions.assertTrue(result instanceof List);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToString_RjQq13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "123";
        Object result = converter.convert(object, String.class);
        Assertions.assertEquals("123", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToObject_WoJx14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = new Object();
        Object result = converter.convert(object, Object.class);
        Assertions.assertEquals(object, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToObject_bYSm15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add(1);
        collection.add(2);
        Object result = converter.convert(collection, Object.class);
        Assertions.assertEquals(collection, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToObject_lGRY16() {
        BasicTypeConverter converter = new BasicTypeConverter();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateByte_JLia0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Number result = converter.allocateNumber(Byte.class, 10.0);
    Assertions.assertEquals(Byte.valueOf((byte) 10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateShort_UxWc1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Number result = converter.allocateNumber(Short.class, 10.0);
    Assertions.assertEquals(Short.valueOf((short) 10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateInteger_dFSL2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Number result = converter.allocateNumber(Integer.class, 10.0);
    Assertions.assertEquals(Integer.valueOf(10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateLong_pfTe3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Number result = converter.allocateNumber(Long.class, 10.0);
    Assertions.assertEquals(Long.valueOf(10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateFloat_iQaB4() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Number result = converter.allocateNumber(Float.class, 10.0);
    Assertions.assertEquals(Float.valueOf(10.0f), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateDouble_duzK5() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Number result = converter.allocateNumber(Double.class, 10.0);
    Assertions.assertEquals(Double.valueOf(10.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateBigInteger_HiCG6() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Number result = converter.allocateNumber(BigInteger.class, 10.0);
    Assertions.assertEquals(BigInteger.valueOf(10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateBigDecimal_rute7() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Number result = converter.allocateNumber(BigDecimal.class, 10.0);
    Assertions.assertEquals(new BigDecimal(10.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToBoolean_fUzK0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToBoolean_fUzK0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertEquals(true, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToCharacter_Nwkv1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("a", Character.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToCharacter_Nwkv1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("a", Character.class);
        assertEquals('a', (char) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToByte_qvYd2_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Byte.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToByte_qvYd2_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Byte.class);
        assertEquals((byte) 1, (byte) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToShort_Sxdk3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Short.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToShort_Sxdk3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Short.class);
        assertEquals((short) 1, (short) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInt_evNX4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Integer.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInt_evNX4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Integer.class);
        assertEquals(1, (int) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToLong_FUel5_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Long.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToLong_FUel5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Long.class);
        assertEquals(1L, (long) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToFloat_YIxP6_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.0", Float.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToFloat_YIxP6_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.0", Float.class);
        assertEquals(1.0f, (float) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToDouble_bDbc7_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.0", Double.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToDouble_bDbc7_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.0", Double.class);
        assertEquals(1.0, (double) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionForInterface_yqJR1_vtNj0() {
    try {
        BasicTypeConverter converter = new BasicTypeConverter();
        converter.convertStringToPrimitive("123", Integer.class);
        assert true;
    } catch (Exception e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertCollectionToArray_VVkQ5_qmEw0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection collection = new ArrayList();
    collection.add(1);
    collection.add(2);
    Object result = converter.convert(collection, Integer[].class);
    Assertions.assertArrayEquals(new Integer[]{1, 2}, (Integer[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertArrayToArray_Nrke7_aUEw0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object array = new Integer[]{1, 2};
    Object result = converter.convert(array, int[].class);
    Assertions.assertArrayEquals(new int[]{1, 2}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertPointerToArray_zXNF11_mCxT0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object[] array = new Object[]{1, 2};
    Object result = converter.convert(array, int[].class);
    Assertions.assertArrayEquals(new int[]{1, 2}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertPointerToCollection_mxwq12_erbq0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<Integer> list = new ArrayList<>();
    list.add(1);
    list.add(2);
    Object result = converter.convert(list, List.class);
    Assertions.assertTrue(result instanceof List);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateAtomicInteger_PPev8_hATF1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("10", Integer.class);
    Assertions.assertEquals(Integer.valueOf(10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateAtomicLong_UaCo9_YZKt0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("10", Long.class);
    Assertions.assertEquals(Long.valueOf(10), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateInvalidValue_leeS11_hphV1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    try {
        converter.convertStringToPrimitive("ten", Integer.class);
        Assertions.fail("Expected JXPathTypeConversionException");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrongType_NIMO9_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(1, String.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrongArray_Stzr10_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Object[]{1, 2, 3}, Integer[].class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrongCollection_fafb11_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Arrays.asList("1", "2", "3"), List.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrongPointer_VJVn13_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert("1", Integer.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullArray_AmhG14_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(null, Integer[].class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullCollection_uMVd15_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(null, List.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyArray_Nfeb18_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Integer[0], Integer[].class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyCollection_bTkJ19_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Collections.emptyList(), List.class);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateInvalidType_SCSX10_fid1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    try {
        converter.convertStringToPrimitive("10.0", Integer.class);
        Assertions.fail("Expected JXPathTypeConversionException");
    } catch (Exception e) {
        // Expected JXPathTypeConversionException
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionForSet_GOSq4_xAlE1_fid1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection collection = (Collection) converter.convertStringToPrimitive("test", Object.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableList_rXCL0_tziG0_fid1() {
    List<String> list = new ArrayList<>();
    list.add("Hello");
    list.add("World");
    Collection<String> unmodifiableList = Collections.unmodifiableCollection(list);
    assert unmodifiableList instanceof Collection;
    try {
        Collections.addAll((Collection<String>) unmodifiableList, "New");
        assert false;
    } catch (UnsupportedOperationException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToBoolean_fUzK0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertNotNull(result);
        assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToCharacter_Nwkv1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("a", Character.class);
        assertNotNull(result);
        assertEquals('a', (char) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToByte_qvYd2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Byte.class);
        assertNotNull(result);
        assertEquals((byte) 1, (byte) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToShort_Sxdk3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Short.class);
        assertNotNull(result);
        assertEquals((short) 1, (short) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInt_evNX4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Integer.class);
        assertNotNull(result);
        assertEquals(1, (int) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToLong_FUel5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Long.class);
        assertNotNull(result);
        assertEquals(1L, (long) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToFloat_YIxP6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.0", Float.class);
        assertNotNull(result);
        assertEquals(1.0f, (float) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToDouble_bDbc7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.0", Double.class);
        assertNotNull(result);
        assertEquals(1.0, (double) result);
}
}