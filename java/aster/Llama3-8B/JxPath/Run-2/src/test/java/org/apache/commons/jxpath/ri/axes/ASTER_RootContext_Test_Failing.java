/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Failing {
@Mock
    private JXPathContextReferenceImpl jxpathContext;
@Mock
    private DOMNodePointer pointer;
@Mock
    private QName name;
@Mock
    private VariablePointer variablePointer;
@Mock
    private JXPathContext jxpathContextObject;
private RootContext rootcontext;
@Mock
    private EvalContext evalContext;
@Mock
    private NodePointer nodePointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qName;
@Mock
    private NodeSet nodeSet;
@Mock
    private RootContext rootContext;
@Mock
    private QName qname;
@Mock
    private Function function;
private static int MAX_REGISTER = 4;
private int availableRegister = 0;
private Object[] registers;
@Mock
    private Object value;
@Mock
    private JXPathContext jxpathContextReference;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception{
        rootcontext = new RootContext(jxpathContext, pointer);
        // Arrange
        int position = 1;
        // Act
        rootcontext.setPosition(position);
        // Assert
        verify(rootcontext, times(1)).setPosition(position);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoString() throws Exception{
        when(pointer.asPath()).thenReturn("path");
        rootcontext = new RootContext(jxpathContext, pointer);
        String expected = "toString():" + "path";
        String actual = rootcontext.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVariableContext() throws Exception{
        MockitoAnnotations.initMocks(this);
        rootcontext = new RootContext(jxpathContext, jxpathContext.getVariablePointer(qname));
        // Arrange
        QName variableName = Mockito.mock(QName.class);
        EvalContext expected = Mockito.mock(EvalContext.class);
        // Act
        EvalContext actual = rootcontext.getVariableContext(variableName);
        // Assert
        Mockito.verify(rootcontext).getVariableContext(variableName);
        Mockito.verifyNoMoreInteractions(rootcontext);
        Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_2() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(null, null);
        // Act
        int result = rootcontext.setRegisteredValue(value);
        // Assert
    assertNull(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJXPathContext_fid2() throws Exception{
        rootcontext = new RootContext(jxpathContext, pointer);
        // Act
        JXPathContext result = rootcontext.getJXPathContext();
        // Assert
        Assertions.assertEquals(jxpathContextObject, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_2_fid2() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(null, null);
        // Act
        int result = rootcontext.setRegisteredValue(value);
        // Assert
        assertEquals(value, registers[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_3() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(null, null);
        // Act
        int result = rootcontext.setRegisteredValue(value);
        // Assert
        assertEquals(1, availableRegister);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValueAlreadyFull_2() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(null, null);
        // Act
        for (int i = 0; i < MAX_REGISTER; i++) {
            rootcontext.setRegisteredValue(value);
        }
        // Assert
        assertEquals(MAX_REGISTER, availableRegister);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer() throws Exception{
        MockitoAnnotations.initMocks(this);
        rootcontext = new RootContext(jxpathContext, pointer);
        // Act
        NodePointer actual = rootcontext.getCurrentNodePointer();
        // Assert
        Mockito.verify(pointer).getImmediateParentPointer();
        Mockito.verifyNoMoreInteractions(pointer);
        assertEquals(pointer, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetRegisteredValue_poPV0_1() throws Exception{
    Object[] registers = new Object[MAX_REGISTER];
    for (int i = 0; i < MAX_REGISTER; i++) {
        registers[i] = "registered value " + i;
    }
    RootContext rootcontext = new RootContext(jxpathContext, pointer);
    if (registers == null) {
    }
    assertEquals("registered value 0", rootcontext.getRegisteredValue(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetRegisteredValue_poPV0_2() throws Exception{
    Object[] registers = new Object[MAX_REGISTER];
    for (int i = 0; i < MAX_REGISTER; i++) {
        registers[i] = "registered value " + i;
    }
    RootContext rootcontext = new RootContext(jxpathContext, pointer);
    if (registers == null) {
    }
    assertEquals("registered value 1", rootcontext.getRegisteredValue(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetRegisteredValue_poPV0_3() throws Exception{
    Object[] registers = new Object[MAX_REGISTER];
    for (int i = 0; i < MAX_REGISTER; i++) {
        registers[i] = "registered value " + i;
    }
    RootContext rootcontext = new RootContext(jxpathContext, pointer);
    if (registers == null) {
    }
    assertEquals("registered value 2", rootcontext.getRegisteredValue(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetRegisteredValue_poPV0_4() throws Exception{
    Object[] registers = new Object[MAX_REGISTER];
    for (int i = 0; i < MAX_REGISTER; i++) {
        registers[i] = "registered value " + i;
    }
    RootContext rootcontext = new RootContext(jxpathContext, pointer);
    if (registers == null) {
    }
    assertEquals("registered value 3", rootcontext.getRegisteredValue(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(null, null);
        // Act
        int result = rootcontext.setRegisteredValue(value);
        // Assert
        assertEquals(0, result);
        assertEquals(value, registers[0]);
        assertEquals(1, availableRegister);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValueAlreadyFull() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(null, null);
        // Act
        for (int i = 0; i < MAX_REGISTER; i++) {
            rootcontext.setRegisteredValue(value);
        }
        // Assert
        assertEquals(-1, rootcontext.setRegisteredValue(value));
        assertEquals(MAX_REGISTER, availableRegister);
    }
}