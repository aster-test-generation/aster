/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreFunction_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLastFunctionName_uISN0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[0]);
        assertEquals("last", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionFunctionName_mlDd1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, new Expression[0]);
        assertEquals("position", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountFunctionName_BFBn2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, new Expression[0]);
        assertEquals("count", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIdFunctionName_eEKi3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, new Expression[0]);
        assertEquals("id", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalNameFunctionName_FqdH4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, new Expression[0]);
        assertEquals("local-name", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceUriFunctionName_WOBv5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, new Expression[0]);
        assertEquals("namespace-uri", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNameFunctionName_BjOc6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, new Expression[0]);
        assertEquals("name", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringFunctionName_nfmx7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, new Expression[0]);
        assertEquals("string", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConcatFunctionName_BIKg8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, new Expression[0]);
        assertEquals("concat", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStartsWithFunctionName_IwsQ9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, new Expression[0]);
        assertEquals("starts-with", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArguments_kpUD0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        String result = coreFunction.toString();
        assertEquals("functionName()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArguments_oFDZ3() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        String result = coreFunction.toString();
        assertEquals("functionName()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullStringBuilder_OafO8() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        coreFunction.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_SuperComputeContextDependent_ReturnsTrue_LTQS0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ReturnsTrue_jPkP1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ReturnsFalse_uegy2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ReturnsTrue_WithNullArgs_Gjtg3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        boolean result = coreFunction.computeContextDependent();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ReturnsTrue_WithEmptyArgs_TEXo4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ReturnsTrue_WithTwoArgs_xeJN5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, new Expression[2]);
        boolean result = coreFunction.computeContextDependent();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBefore_ArgCount1_ccxx0_RRJE1() {
    CoreFunction coreFunction = new CoreFunction(1, new Expression[1]);
    EvalContext context = mock(EvalContext.class);
    assertThrows(IllegalArgumentException.class, () -> coreFunction.functionSubstring(context));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArgumentCountNullArgs_DCYy0_oGVP0() {
    CoreFunction coreFunction = new CoreFunction(1, null);
    int result = coreFunction.getArgumentCount();
    org.junit.Assert.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArgumentCountEmptyArgs_cHOj1_Gofq0() {
    CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
    int result = coreFunction.getArgumentCount();
    org.junit.Assert.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNotWithNull_rlMG2_MHlW0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    try {
        coreFunction.functionSubstring(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionName_ArgumentCountZero_ReturnsNodeName_wEbh0_UmSk0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    assertEquals("functionSubstring", coreFunction.functionName(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionEndsWithTrue_PFYA1_eWZk0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
    EvalContext context = mock(EvalContext.class);
    when(context.getPosition()).thenReturn(1);
    Object result = coreFunction.functionSubstring(context);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithFunctionName_boIo5_SLeT0() {
    CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
    coreFunction.toString(); // No need to set function name
    String result = coreFunction.toString();
    assertEquals("CoreFunction(1, [Expression[0]])", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoFunctionName_cFIG6_xTln0() {
    CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
    String result = coreFunction.toString();
    assertEquals("() ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionFloorWithZeroInput_yOOV3_hkzQ0() {
    CoreFunction coreFunction = new CoreFunction(1, new Expression[1]);
    EvalContext context = mock(EvalContext.class);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionRound_NullArg_ZkMq4_UyCo0() {
    CoreFunction coreFunction = new CoreFunction(1, new Expression[1]);
    try {
        coreFunction.functionSubstring(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSumNullArgument_kUsW0_fGRd0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    Object result = coreFunction.functionSubstring(null);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_ArgRangeError_Spzh2_hKuC0() {
    CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
    try {
        coreFunction.functionSubstring(null);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_ArgCountError_cKIK3_wFWp0() {
    CoreFunction coreFunction = new CoreFunction(1, new Expression[1]);
    try {
        coreFunction.functionSubstring(null);
    } catch (Exception e) {
        assert e instanceof org.apache.commons.jxpath.JXPathException;
    }
}
}