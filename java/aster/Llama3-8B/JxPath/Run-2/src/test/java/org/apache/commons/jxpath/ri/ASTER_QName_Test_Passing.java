/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QName_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_pUzs0() {
    QName qName1 = new QName("prefix", "localName");
    QName qName2 = qName1;
    boolean result = qName1.equals(qName2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_AJIO1() {
    QName qName1 = new QName("prefix", "localName");
    QName qName2 = new QName("prefix", "localName");
    boolean result = qName1.equals(qName2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_xFCU2() {
    QName qName = new QName("prefix", "localName");
    boolean result = qName.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_QualifiedName_fIrh0() {
        QName qName = new QName("qualifiedName");
        assertEquals("qualifiedName", qName.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Prefix_LocalName_OWNc1() {
        QName qName = new QName("prefix", "localName");
        assertEquals("localName", qName.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_QualifiedName_yvUN0() {
        QName qName = new QName("prefix", "localName");
        String prefix = qName.getPrefix();
        assertEquals("prefix", prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_PrefixAndLocalName_bUEf1() {
        QName qName = new QName("qualifiedName");
        String prefix = qName.getPrefix();
    assertNull(prefix);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithQualifiedName_tMlp0() {
        QName qName = new QName("qualifiedName");
        String result = qName.toString();
        assert result.equals("qualifiedName");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPrefixAndLocalName_PplH1() {
        QName qName = new QName("prefix", "localName");
        String result = qName.toString();
        assert result.equals("prefix:localName");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_QualifiedName_UTYl0() {
        QName qName = new QName("qualifiedName");
        int result = qName.hashCode();
        assertEquals(result, qName.getName().hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_Prefix_LocalName_Bhmk1() {
        QName qName = new QName("prefix", "localName");
        int result = qName.hashCode();
        assertEquals(result, qName.getName().hashCode());
    }
}