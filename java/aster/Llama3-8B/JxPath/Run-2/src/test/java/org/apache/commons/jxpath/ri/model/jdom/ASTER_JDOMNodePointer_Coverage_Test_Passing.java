/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JDOMNodePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersEqual_RxPX0() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Element("node1"), Locale.US);
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Element("node1"), Locale.US);
        assertEquals(0, nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersAttributes_FZMh3() {
        Element element = new Element("node");
        element.setAttribute("attr1", "value1");
        element.setAttribute("attr2", "value2");
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(element.getAttribute("attr1"), Locale.US);
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(element.getAttribute("attr2"), Locale.US);
        assertEquals(-1, nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersSameAttribute_xytt7() {
        Element element = new Element("node");
        element.setAttribute("attr", "value");
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(element.getAttribute("attr"), Locale.US);
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(element.getAttribute("attr"), Locale.US);
        assertEquals(0, nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_ElementWithPrefix_kGJv0() {
        Element element = new Element("namespace", "http://example.com");
        String prefix = JDOMNodePointer.getPrefix(element);
        assertEquals("namespace", prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_ElementWithoutPrefix_oRlU1() {
        Element element = new Element("tag", "");
        String prefix = JDOMNodePointer.getPrefix(element);
        assertNull(prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_AttributeWithPrefix_mlTl2() {
        Attribute attribute = new Attribute("namespace", "http://example.com");
        String prefix = JDOMNodePointer.getPrefix(attribute);
        assertEquals("namespace", prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_AttributeWithoutPrefix_Xrtb3() {
        Attribute attribute = new Attribute("tag", "");
        String prefix = JDOMNodePointer.getPrefix(attribute);
        assertNull(prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_OtherNode_lMWA4() {
        Object node = new Object();
        String prefix = JDOMNodePointer.getPrefix(node);
        assertNull(prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafDocument_afEf0() throws Exception {
        JDOMNodePointer jdn = new JDOMNodePointer(new Document(), Locale.US);
        assertTrue(jdn.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithParent_jchD0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        jdn.remove();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguageNotNull_mCbM1() {
    JDOMNodePointer jdn = new JDOMNodePointer("en", Locale.US);
    boolean result = jdn.isLanguage("en");
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguageNotMatch_ZaGQ2() {
    JDOMNodePointer jdn = new JDOMNodePointer("fr", Locale.US);
    boolean result = jdn.isLanguage("en");
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NodeIsElement_Lcrm0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        Object result = jdn.getValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NodeIsComment_hXNZ1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Comment("comment"), Locale.US);
        Object result = jdn.getValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NodeIsText_jprc2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("text"), Locale.US);
        Object result = jdn.getValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NodeIsProcessingInstruction_LEEf3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new ProcessingInstruction("pi", "data"), Locale.US);
        Object result = jdn.getValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullResult_xMHm8() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text(""), Locale.US);
        Object result = jdn.getValue();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullTest_hwoa0() {
        boolean result = JDOMNodePointer.testNode(null, null, null);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_zMoT10() {
        ProcessingInstructionTest test = new ProcessingInstructionTest("testTarget");
        boolean result = JDOMNodePointer.testNode(null, null, test);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestMatch_Lyft11() {
        ProcessingInstructionTest test = new ProcessingInstructionTest("testTarget");
        ProcessingInstruction node = new ProcessingInstruction("testTarget", "testData");
        boolean result = JDOMNodePointer.testNode(null, node, test);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestMismatch_BOQj12() {
        ProcessingInstructionTest test = new ProcessingInstructionTest("testTarget");
        ProcessingInstruction node = new ProcessingInstruction("wrongTarget", "testData");
        boolean result = JDOMNodePointer.testNode(null, node, test);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_DocumentNode_IqAk0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Document(), Locale.US);
        String result = jdn.getNamespaceURI("xml");
        assertEquals(Namespace.XML_NAMESPACE.getURI(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNonNullId_HLFC1() {
        JDOMNodePointer jdn = new JDOMNodePointer(null, Locale.US, "id");
        assertEquals("id('id')", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathElement_ntfK4() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("name"), Locale.US);
        assertEquals("/node()", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathElementWithNamespace_NQkC5() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("name", "http://namespace.com"), Locale.US);
        assertEquals("ns:name[node()[1]]", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathText_hZec6() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("text"), Locale.US);
        assertEquals("/text()[1]", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathCDATA_LzKL7() {
        JDOMNodePointer jdn = new JDOMNodePointer(new CDATA("cdata"), Locale.US);
        assertEquals("/text()[1]", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathProcessingInstruction_rlzE8() {
        JDOMNodePointer jdn = new JDOMNodePointer(new ProcessingInstruction("target", "data"), Locale.US);
        assertEquals("/processing-instruction('target')[1]", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathElementWithRelativePositionByQName_vMAd9() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("name"), Locale.US);
        assertEquals("/node()[1]", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathElementWithNamespaceAndNoPrefix_Khpl14() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("name", "http://namespace.com"), Locale.US);
        assertEquals("node()[1]", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointersNotAttributeAndAttribute_qJqQ2_yduJ0() {
    JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Element("node1"), Locale.US);
    JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Element("node2"), Locale.US);
    assertEquals(0, nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNullIndex_sUWu5_RTVA0() {
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("prefix", "localName");
    int index = -1; 
    JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US); 
    try {
        jdn.createChild(context, name, index);
        fail("Expected JXPathAbstractFactoryException");
    } catch (JXPathAbstractFactoryException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_NullNode_zxzL3_yYcC0() {
    JDOMNodePointer jdn = new JDOMNodePointer(null, Locale.US, null);
    QName result = jdn.getName();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguageNull_TKop0_AEFo0() {
    JDOMNodePointer jdn = new JDOMNodePointer(null, Locale.US, null);
    boolean result = jdn.isLanguage("en");
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttribute_NodeIsElement_fTRg1_FOIp0() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Element("test"), Locale.US);
    JXPathContext context = JXPathContext.newContext(jdn.getNode());
    QName name = new QName("test");
    NodePointer result = jdn.createAttribute(context, name);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttribute_PrefixIsNotNull_mZng2_zxoo0() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Element("test"), Locale.US);
    JXPathContext context = JXPathContext.newContext(jdn.getNode());
    QName name = new QName("test", "prefix");
    NodePointer result = jdn.createAttribute(context, name);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_NullElement_bvuA2_EIub0() {
    JDOMNodePointer jdn = new JDOMNodePointer(null, Locale.US, null);
    String result = jdn.getNamespaceURI("xml");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathNullId_rcJq0_bJip0() {
    JDOMNodePointer jdn = new JDOMNodePointer(null, Locale.US, null);
    assertEquals("/node()", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathParentNotNull_btsY3_qexM0() {
    DOMNodePointer parent = new DOMNodePointer(null, Locale.US, null);
    JDOMNodePointer jdn = new JDOMNodePointer(parent, Locale.US, null);
    assertEquals("/parent/node()", jdn.asPath());
}
}