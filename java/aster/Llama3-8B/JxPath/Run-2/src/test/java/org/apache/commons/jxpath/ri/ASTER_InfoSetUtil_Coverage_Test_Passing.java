/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.JXPathContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_InfoSetUtil_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberString_qZbu4() {
        assertEquals(1.0, InfoSetUtil.number("1.0").doubleValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Number_MTTY0() {
        assertEquals(10.0, InfoSetUtil.doubleValue(10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Boolean_gTsO1() {
        assertEquals(0.0, InfoSetUtil.doubleValue(true));
        assertEquals(1.0, InfoSetUtil.doubleValue(false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_wkfJ2() {
        assertEquals(10.0, InfoSetUtil.doubleValue("10"));
        assertEquals(0.0, InfoSetUtil.doubleValue(""));
        assertEquals(Double.NaN, InfoSetUtil.doubleValue("abc"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NumberValue_IxUz0() {
        assertEquals(true, InfoSetUtil.booleanValue(1.0));
        assertEquals(true, InfoSetUtil.booleanValue(-1.0));
        assertEquals(true, InfoSetUtil.booleanValue(0.0));
        assertEquals(false, InfoSetUtil.booleanValue(Double.NaN));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_BooleanValue_bTIB1() {
        assertEquals(true, InfoSetUtil.booleanValue(true));
        assertEquals(false, InfoSetUtil.booleanValue(false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_StringValue_HMcI3() {
        assertEquals(true, InfoSetUtil.booleanValue("Hello"));
        assertEquals(false, InfoSetUtil.booleanValue(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Null_uYHX6() {
        assertEquals(false, InfoSetUtil.booleanValue(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NegativeZero_cBOM7() {
        assertEquals(true, InfoSetUtil.booleanValue(-0.0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NaN_OxNY8() {
        assertEquals(false, InfoSetUtil.booleanValue(Double.NaN));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Zero_jLQO9() {
        assertEquals(true, InfoSetUtil.booleanValue(0.0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NonZero_wSUK10() {
        assertEquals(true, InfoSetUtil.booleanValue(1.0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_EmptyString_KGRk11() {
        assertEquals(false, InfoSetUtil.booleanValue(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NonEmptyString_FkpU12() {
        assertEquals(true, InfoSetUtil.booleanValue("Hello"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Boolean_gTsO1_1() {
        assertEquals(0.0, InfoSetUtil.doubleValue(true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Boolean_gTsO1_2() {
        assertEquals(1.0, InfoSetUtil.doubleValue(false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_wkfJ2_1() {
        assertEquals(10.0, InfoSetUtil.doubleValue("10"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_wkfJ2_2() {
        assertEquals(0.0, InfoSetUtil.doubleValue(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_wkfJ2_3() {
        assertEquals(Double.NaN, InfoSetUtil.doubleValue("abc"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NumberValue_IxUz0_2() {
        assertEquals(true, InfoSetUtil.booleanValue(-1.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_BooleanValue_bTIB1_1() {
        assertEquals(true, InfoSetUtil.booleanValue(true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_BooleanValue_bTIB1_2() {
        assertEquals(false, InfoSetUtil.booleanValue(false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberEvalContext_DhmN0_oLrY0() {
    JXPathContext context = JXPathContext.newContext(new HashMap());
    assertEquals("", InfoSetUtil.stringValue(context));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberNodePointer_Grjm2_CrPR0() {
    NodePointer nodePointer = mock(NodePointer.class);
    assertEquals("", InfoSetUtil.stringValue(nodePointer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberStringNumberFormatException_zpXk5_GrNg0() {
    assertEquals("not a number", InfoSetUtil.stringValue("not a number"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleValue_NodePointer_YwPy3_eATM1() {
    NodePointer nodePointer = mock(NodePointer.class);
    when(nodePointer.getValue()).thenReturn(10);
    assertEquals("10", InfoSetUtil.stringValue(nodePointer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBooleanValue_NodePointer_IhWT4_zXXs1() {
    NodePointer pointer = mock(NodePointer.class);
    when(pointer.getValue()).thenReturn(true);
    assertEquals("true", InfoSetUtil.stringValue(pointer));
}
}