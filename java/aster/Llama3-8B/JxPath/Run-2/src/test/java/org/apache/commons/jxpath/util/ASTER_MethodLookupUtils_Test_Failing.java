/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.Arrays;
import org.apache.commons.jxpath.ExpressionContext;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MethodLookupUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorNoMatch_cbQO1() {
    Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[] { 1, 2, 3 });
    assertNull(constructor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorNullParameter_GKWq3() {
    Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[] { null });
    assertNull(constructor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorMultipleNullParameters_pSex4() {
    Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[] { null, null });
    assertNull(constructor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorPrimitiveTypes_GEDA5() {
    Constructor constructor = MethodLookupUtils.lookupConstructor(int.class, new Object[] { 1 });
    assertEquals(Constructor.class, constructor.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorArrayTypes_fjkX6() {
    Constructor constructor = MethodLookupUtils.lookupConstructor(int[].class, new Object[] { new int[] { 1, 2 } });
    assertEquals(Constructor.class, constructor.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorGenericTypes_kMdW7() {
    Constructor constructor = MethodLookupUtils.lookupConstructor(List.class, new Object[] { Arrays.asList("hello", "world") });
    assertEquals(Constructor.class, constructor.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorInterfaceTypes_VYVt8() {
    Constructor constructor = MethodLookupUtils.lookupConstructor(ExpressionContext.class, new Object[] { new Object() });
    assertEquals(Constructor.class, constructor.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorApproximateMatch_oTCl1() {
    Constructor constructor =MethodLookupUtils.lookupConstructor(String.class, new Object[] {"hello", null});
    assertEquals(Constructor.class, constructor.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorNoMatch_axnb2() {
    Constructor constructor =MethodLookupUtils.lookupConstructor(String.class, new Object[] {"hello", "world", null});
    assertNull(constructor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorMultipleParameters_wWrc7() {
    Constructor constructor =MethodLookupUtils.lookupConstructor(String.class, new Object[] {"hello", "world"});
    assertEquals(Constructor.class, constructor.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorMixedParameters_iSPX8() {
    Constructor constructor =MethodLookupUtils.lookupConstructor(String.class, new Object[] {"hello", null, "world"});
    assertEquals(Constructor.class, constructor.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorNullTargetClass_RUMB9() {
    try {
       MethodLookupUtils.lookupConstructor(null, new Object[] {"hello"});
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("targetClass", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorNullParameters_WeUF10() {
    Constructor constructor =MethodLookupUtils.lookupConstructor(String.class, null);
    assertNull(constructor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodSingleParameter_jsgG2() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getMethod", new Object[] { Integer.valueOf(1) });
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMultipleParameters_TKRk3() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getMethod", new Object[] { Integer.valueOf(1), String.valueOf("test") });
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNonMatchingParameter_txGV4() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getMethod", new Object[] { Integer.valueOf(1), String.valueOf("test"), Integer.valueOf(2) });
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodAmbiguousMatch_xWNl6() {
        try {
            MethodLookupUtils.lookupMethod(Class.class, "getMethod", new Object[] { Integer.valueOf(1), String.valueOf("test"), Integer.valueOf(2) });
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodStaticMethod_NUkW8() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "forName", new Object[] { String.valueOf("java.lang.String") });
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodPrivateMethod_Wxvf9() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getDeclaredFields", new Object[] { });
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodProtectedMethod_ErDa10() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getDeclaredField", new Object[] { String.valueOf("test") });
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodPublicMethod_fDpQ11() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getDeclaredMethod", new Object[] { String.valueOf("test") });
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodPrimitiveType_YzeQ14() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getPrimitiveType", new Object[] { Integer.valueOf(1) });
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodArray_qHOO15() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getComponentType", new Object[] { Integer.valueOf(1) });
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodVoidMethod_mAcS16() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getDeclaredMethod", new Object[] { });
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithReturnAndParameters_vhGs19() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getDeclaredMethod", new Object[] { String.valueOf("test"), Integer.valueOf(1) });
        assertNotNull(method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorPrivateConstructor_ChCZ10_Bqyu0() {
    try {
        MethodLookupUtils.lookupMethod(Constructor.class, "newInstance", new Object[0]);
        fail("Expected NoSuchMethodException");
    } catch (SecurityException e) {
        fail("Expected NoSuchMethodException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorNullParameter_GKWq3_fid1() {
    Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[] { null });
    assertNotNull(constructor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorInterfaceTypes_VYVt8_fid1() {
    Method constructor = MethodLookupUtils.lookupMethod(ExpressionContext.class, "<init>", new Object[] { new Object() });
    assertEquals(Method.class, constructor.getClass());
}
}