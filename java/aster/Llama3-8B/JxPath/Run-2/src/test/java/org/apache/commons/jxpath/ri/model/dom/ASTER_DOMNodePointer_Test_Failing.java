/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.TypeUtils;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ProcessingInstruction;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.AbstractFactory;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Failing {
private Node node;
private DOMNodePointer domnodepointer;
private NodePointer nodepointer;
private NamedNodeMap namednodemap;
private NodeTest nodeTest;
private Attr attr;
private NodeList nodelist;
private Document document;
private JXPathContext jxpathcontext;
private QName qname;
private AbstractFactory abstractFactory;
private Locale locale;
@Mock
    private Element element;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private DOMAttributeIterator iterator;
@Mock
    private VariablePointer variablePointer;
@Mock
    private QName qName;
@Mock
    private VariablePointer parent;
private DOMNodePointer anotherDomnodepointer;
private Node parentNode;
private String id;
private Object value;
@Mock
    private NamespaceResolver superNamespaceResolver;
@Mock
    private NamespaceResolver localNamespaceResolver;
@Mock
    private Pointer namespaceContextPointer;
    private String defaultNamespace;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_TextNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node).setNodeValue("value");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_TextNode_EmptyValue() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("");
        domnodepointer.setValue("");
        verify(node).setNodeValue("");
        verify(node).getParentNode().removeChild(node);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementNode_NullValue() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        domnodepointer.setValue(null);
        verify(node, never()).appendChild(any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_StringValue() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node).appendChild(document.createTextNode("value"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindEnclosingAttribute() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = mock(DOMNodePointer.class);
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttribute("attrName")).thenReturn("attributeValue");
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        assertEquals("attributeValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_ProcessingInstructionNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
        QName expected = new QName(null, "target");
        QName actual = domnodepointer.getName();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_OtherNodeType() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        QName expected = new QName(null, null);
        QName actual = domnodepointer.getName();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", domnodepointer.getNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() throws Exception {
        DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US);
        // Arrange
        NodeIterator expectedIterator = mock(NodeIterator.class);
        when(domnodepointer.childIterator(nodeTest, false, null)).thenReturn(expectedIterator);
        // Act
        NodeIterator actualIterator = domnodepointer.childIterator(nodeTest, false, null);
        // Assert
        assertEquals(expectedIterator, actualIterator);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception{
        MockitoAnnotations.initMocks(this);
        DOMNodePointer domnodepointer = new DOMNodePointer(variablePointer, node);
        // Arrange
        int expectedLength = 1;
        // Act
        int actualLength = domnodepointer.getLength();
        // Assert
        Mockito.verify(domnodepointer).getLength();
        assertEquals(expectedLength, actualLength);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() throws Exception {
        MockitoAnnotations.initMocks(this);
        domnodepointer = new DOMNodePointer(node, locale, "id");
        NodeIterator expected = Mockito.mock(NodeIterator.class);
        Mockito.when(domnodepointer.namespaceIterator()).thenReturn(expected);
        NodeIterator actual = domnodepointer.namespaceIterator();
        Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_1() {
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test when node has no child nodes
        when(node.hasChildNodes()).thenReturn(false);
        // Test when node has child nodes
        when(node.hasChildNodes()).thenReturn(true);
        assertTrue(domnodepointer.isLeaf());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_2() {
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test when node has no child nodes
        when(node.hasChildNodes()).thenReturn(false);
        // Test when node has child nodes
        when(node.hasChildNodes()).thenReturn(true);
        assertFalse(domnodepointer.isLeaf());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        anotherDomnodepointer = new DOMNodePointer(node, Locale.US, "id");
        assertNotEquals(domnodepointer, anotherDomnodepointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentNode() throws Exception {
        anotherDomnodepointer = new DOMNodePointer(mock(Node.class), Locale.US, "id");
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        anotherDomnodepointer = new DOMNodePointer(node, Locale.US, "id");
        assertNotEquals(domnodepointer, anotherDomnodepointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_AttributeNotFound() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        parentNode = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(parentNode);
        when(parentNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        String result = DOMNodePointer.getNamespaceURI(node);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_CommentNode() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        nodelist = mock(NodeList.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(((Comment) node).getData()).thenReturn("   comment text   ");
        assertEquals("comment text", domnodepointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_OtherNodeType() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        nodelist = mock(NodeList.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        assertEquals(null, domnodepointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI_1() {
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(node);
        when(node instanceof Document).thenReturn(true);
        when(node instanceof Element).thenReturn(false);
        // Test when default namespace is present
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        // Test when default namespace is not present
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        // Test when node is not an element
        when(node instanceof Document).thenReturn(true);
        when(node instanceof Element).thenReturn(false);
        assertEquals("http://example.com", domnodepointer.getDefaultNamespaceURI());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI_2() {
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(node);
        when(node instanceof Document).thenReturn(true);
        when(node instanceof Element).thenReturn(false);
        // Test when default namespace is present
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        // Test when default namespace is not present
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        // Test when node is not an element
        when(node instanceof Document).thenReturn(true);
        when(node instanceof Element).thenReturn(false);
        assertEquals("", domnodepointer.getDefaultNamespaceURI());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove() throws Exception {
        node = mock(Node.class);
        parentNode = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(parentNode);
        doNothing().when(parentNode).removeChild(node);
        domNodePointer.remove();
        verify(parentNode, times(1)).removeChild(node);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_NullLanguage_ReturnsSuperIsLanguage() {
        domNodePointer = new DOMNodePointer(variablePointer, node);
        // Arrange
        String lang = null;
        // Act
        boolean result = domNodePointer.isLanguage(lang);
        // Assert
        verify(domNodePointer).isLanguage(lang);
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_EmptyLanguage_ReturnsSuperIsLanguage() {
        domNodePointer = new DOMNodePointer(variablePointer, node);
        // Arrange
        String lang = "";
        // Act
        boolean result = domNodePointer.isLanguage(lang);
        // Assert
        verify(domNodePointer).isLanguage(lang);
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_LanguageMatches_ReturnsTrue() {
        domNodePointer = new DOMNodePointer(variablePointer, node);
        // Arrange
        String lang = "en-US";
        // Act
        boolean result = domNodePointer.isLanguage(lang);
        // Assert
        verify(domNodePointer).getLanguage();
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_LanguageDoesNotMatch_ReturnsFalse() {
        domNodePointer = new DOMNodePointer(variablePointer, node);
        // Arrange
        String lang = "fr-FR";
        // Act
        boolean result = domNodePointer.isLanguage(lang);
        // Assert
        verify(domNodePointer).getLanguage();
        assertEquals(false, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_1() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        String prefix = "prefix";
        // Act
        NodePointer result = domnodepointer.namespacePointer(prefix);
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).namespacePointer(prefix);
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_2() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        String prefix = "prefix";
        // Act
        NodePointer result = domnodepointer.namespacePointer(prefix);
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).namespacePointer(prefix);
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Assertions.assertTrue(result instanceof NamespacePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeNullNodeTest_Klog9() {
    Node node = null;
    NodeTest test = new NodeNameTest(new QName("test", "test"));
    boolean result =DOMNodePointer.testNode(node, test);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefix() {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(node);
        when(((Element) node).getAttributeNode("xmlns:custom")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://custom.uri");
        String namespace = domnodepointer.getNamespaceURI("custom");
        assertEquals("http://custom.uri", namespace);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_JdUD0_fwnX0() {
    QName name = new QName("prefix", "localName");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US);
    NodeIterator nodeIterator = domNodePointer.attributeIterator(name);
    assert nodeIterator instanceof DOMAttributeIterator;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcreateAttribute_tIPK0() throws Exception {
    element = mock(Element.class);
    domnodepointer = new DOMNodePointer(element, Locale.US);
    jxpathcontext = mock(JXPathContext.class);
    qname = new QName("prefix", "name");
    when(element instanceof Element).thenReturn(true);
    NamespaceResolver namespaceResolver = domnodepointer.getNamespaceResolver();
    when(namespaceResolver.getNamespaceURI("prefix")).thenReturn("namespaceURI");
    NodePointer result = domnodepointer.createAttribute(jxpathcontext, qname);
    verify(element).setAttributeNS("namespaceURI", qname.toString(), "");
    assertEquals(result, domnodepointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNamespaceURI_NullURI_stky0() throws Exception {
    Element element = mock(Element.class);
    Node node = mock(Node.class);
    Node parentNode = mock(Node.class);
    Attr attr = mock(Attr.class);
    DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US, "id");
    when(node instanceof Document).thenReturn(true);
    Document document = mock(Document.class);
    when(node.getOwnerDocument()).thenReturn(document);
    String result = domnodepointer.getNamespaceURI(node);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ElementNode_wGfc0() throws Exception {
    Node node = mock(Node.class);
    Element element = mock(Element.class);
    NodeList nodelist = mock(NodeList.class);
    DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US, "id");
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node).thenReturn(element);
    when(element.getTextContent()).thenReturn("element text");
    assertEquals("element text", domnodepointer.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueCommentNode_Cuun0_TXfP0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    Comment node = document.createComment("comment");
    DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
    Object result = domNodePointer.getValue();
    assertEquals("comment", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_EyUk0_CxhN0() {
    JXPathContext context = JXPathContext.newContext(null);
    QName name = new QName("prefix", "localName");
    DOMNodePointer ptr = new DOMNodePointer(null, null, null);
    NodePointer result = ptr.createChild(context, name, 0, "value");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_2_fid1() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = new DOMNodePointer(node, Locale.US);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        int result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getNextSibling()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getFirstChild()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getFirstChild()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getFirstChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getFirstChild()).thenReturn(mock(Node.class));
        when(node.getNextSibling()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(-1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_1_fid1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test with local name
        when(node.getLocalName()).thenReturn("localName");
        // Test with qualified name
        when(node.getNodeName()).thenReturn("prefix:localName");
        // Test with null local name
        when(node.getLocalName()).thenReturn(null);
        when(node.getNodeName()).thenReturn("qualifiedName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_TextNode_fid1() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        nodelist = mock(NodeList.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(node.getTextContent()).thenReturn("text node text");
        assertEquals("text node text", domnodepointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultNamespaceURI_ElementNode_noParent_afly6_fid1() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
    String result = domNodePointer.getDefaultNamespaceURI();
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has a prefix
        when(node.getPrefix()).thenReturn("prefix");
        // Test case 2: Node does not have a prefix
        when(node.getPrefix()).thenReturn(null);
        // Test case 3: Node has a colon in its name
        when(node.getNodeName()).thenReturn("namespace:localName");
        // Test case 4: Node does not have a colon in its name
        when(node.getNodeName()).thenReturn("localName");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_2() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has a prefix
        when(node.getPrefix()).thenReturn("prefix");
        // Test case 2: Node does not have a prefix
        when(node.getPrefix()).thenReturn(null);
        // Test case 3: Node has a colon in its name
        when(node.getNodeName()).thenReturn("namespace:localName");
        // Test case 4: Node does not have a colon in its name
        when(node.getNodeName()).thenReturn("localName");
        assertEquals("namespace", DOMNodePointer.getPrefix(node));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_CustomPrefix_onbO4_fid1() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    String result = domNodePointer.getNamespaceURI("custom");
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_CustomPrefixWithoutNamespace_tpmG6_fid1() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    String result = domNodePointer.getNamespaceURI("custom");
    Assertions.assertEquals(NodePointer.UNKNOWN_NAMESPACE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildNullNode_oVbs5_EyfI0_fid1() {
    DOMNodePointer nodePointer = null;
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("prefix", "localName");
    try {
        nodePointer.createChild(context, name, 1);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("node", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTestNode_NodeTypeTest_CommentNode_FiKA0_fid1() throws Exception {
    node = mock(Node.class);
    attr = mock(Attr.class);
    domnodepointer = new DOMNodePointer(node, Locale.US, "id");
    NodeTypeTest nodeTypeTest = new NodeTypeTest(Node.COMMENT_NODE);
    boolean result = DOMNodePointer.testNode(node, nodeTypeTest);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTestNode_ProcessingInstructionTest_IedA0_fid1() throws Exception {
    node = mock(Node.class);
    attr = mock(Attr.class);
    domnodepointer = new DOMNodePointer(node, Locale.US, "id");
    ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target");
    boolean result = DOMNodePointer.testNode(node, processingInstructionTest);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_XMLNSPrefix_HlWv0_fid1() {
    node = mock(Node.class);
    attr = mock(Attr.class);
    domnodepointer = new DOMNodePointer(node, Locale.US, "id");
    when(node.getParentNode()).thenReturn(node);
    String namespace = domnodepointer.getNamespaceResolver().getNamespaceURI("xmlns");
    assertEquals("http://www.w3.org/XML/1998/namespace", namespace);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = new DOMNodePointer(node, Locale.US);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        int result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(0, result);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(-1, result);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getNextSibling()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(1, result);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getFirstChild()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(0, result);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getFirstChild()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(-1, result);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getFirstChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(1, result);
        when(nodepointer.getBaseValue()).thenReturn(mock(Node.class));
        when(node.getFirstChild()).thenReturn(mock(Node.class));
        when(node.getNextSibling()).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test when node has no child nodes
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domnodepointer.isLeaf());
        // Test when node has child nodes
        when(node.hasChildNodes()).thenReturn(true);
        assertFalse(domnodepointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI() {
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(node);
        when(node instanceof Document).thenReturn(true);
        when(node instanceof Element).thenReturn(false);
        // Test when default namespace is present
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        assertEquals("http://example.com", domnodepointer.getDefaultNamespaceURI());
        // Test when default namespace is not present
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        assertEquals("", domnodepointer.getDefaultNamespaceURI());
        // Test when node is not an element
        when(node instanceof Document).thenReturn(true);
        when(node instanceof Element).thenReturn(false);
        assertEquals("", domnodepointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has a prefix
        when(node.getPrefix()).thenReturn("prefix");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));
        // Test case 2: Node does not have a prefix
        when(node.getPrefix()).thenReturn(null);
        assertEquals("namespace", DOMNodePointer.getPrefix(node));
        // Test case 3: Node has a colon in its name
        when(node.getNodeName()).thenReturn("namespace:localName");
        assertEquals("namespace", DOMNodePointer.getPrefix(node));
        // Test case 4: Node does not have a colon in its name
        when(node.getNodeName()).thenReturn("localName");
        assertEquals(null, DOMNodePointer.getPrefix(node));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        String prefix = "prefix";
        // Act
        NodePointer result = domnodepointer.namespacePointer(prefix);
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).namespacePointer(prefix);
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result instanceof NamespacePointer);
    }
}