/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import java.util.Stack;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Stack;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrecedingOrFollowingContext_Test_Failing {
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private SelfContext selfContext;
private PrecedingOrFollowingContext precedingorfollowingcontext;
private boolean reverse;
@Mock
    private Object superObject;
@Mock
    private NodePointer nodePointer;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private Stack stack;
@Mock
    private NodeIterator nodeIterator;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodePointer currentRootLocation;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception{
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
        // Arrange
        precedingorfollowingcontext.setPosition(5);
        // Act
        precedingorfollowingcontext.setPosition(3);
        // Assert
        verify(precedingorfollowingcontext, times(1)).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, reverse);
        // Set the reverse flag to true
        reverse = true;
        // Mock the getDocumentOrder method to return -1
        when(precedingorfollowingcontext.getDocumentOrder()).thenReturn(-1);
        // Call the getDocumentOrder method
        int result = precedingorfollowingcontext.getDocumentOrder();
        // Assert the result
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrderFalse() {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, reverse);
        // Set the reverse flag to false
        reverse = false;
        // Mock the getDocumentOrder method to return 1
        when(precedingorfollowingcontext.getDocumentOrder()).thenReturn(1);
        // Call the getDocumentOrder method
        int result = precedingorfollowingcontext.getDocumentOrder();
        // Assert the result
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_iPMW0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTest), nodeTest), nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(parentContext, nodeTest, false);
        NodePointer result = context.getCurrentNodePointer();
        assertEquals(NodePointer.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception{
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTest, true);
        // Set up mock objects
        when(namespaceContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getParent()).thenReturn(nodePointer);
        when(nodePointer.isRoot()).thenReturn(false);
        when(nodePointer.isLeaf()).thenReturn(false);
        when(nodePointer.testNode(nodeTest)).thenReturn(true);
        when(stack.isEmpty()).thenReturn(false);
        when(stack.peek()).thenReturn(nodeIterator);
        when(nodeIterator.setPosition(anyInt())).thenReturn(true);
        when(nodeIterator.getNodePointer()).thenReturn(nodePointer);
        // Call the method under test
        boolean result = precedingorfollowingcontext.nextNode();
        // Verify the result
        assertTrue(result);
        // Verify the mock objects
        verify(namespaceContext, times(1)).getCurrentNodePointer();
        verify(nodePointer, times(1)).getParent();
        verify(nodePointer, times(1)).isRoot();
        verify(nodePointer, times(1)).isLeaf();
        verify(nodePointer, times(1)).testNode(nodeTest);
        verify(stack, times(1)).isEmpty();
        verify(stack, times(1)).peek();
        verify(nodeIterator, times(1)).setPosition(anyInt());
        verify(nodeIterator, times(1)).getNodePointer();
    }
}