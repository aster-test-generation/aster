/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ValueUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArrayAtStartAndEnd_Jpqt4() {
        Object array = new int[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 0);
        result = ValueUtils.remove(result, 4);
        assertArrayEquals(new int[]{2, 3, 4}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArrayAtStartAndMiddle_dOES6() {
        Object array = new int[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 0);
        result = ValueUtils.remove(result, 1);
        assertArrayEquals(new int[]{2, 3, 4}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArrayAtMiddleAndMiddle_RUdq7() {
        Object array = new int[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        result = ValueUtils.remove(result, 2);
        assertArrayEquals(new int[]{1, 2, 4}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArrayAtEndAndEnd_XFmG8() {
        Object array = new int[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 4);
        result = ValueUtils.remove(result, 4);
        assertArrayEquals(new int[]{1, 2, 3, 4}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArrayAtStartAndStart_WylL9() {
        Object array = new int[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 0);
        result = ValueUtils.remove(result, 0);
        assertArrayEquals(new int[]{2, 3, 4, 5}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArrayAtMiddleAndStart_kdIs10() {
        Object array = new int[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        result = ValueUtils.remove(result, 0);
        assertArrayEquals(new int[]{2, 3, 4}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterface_Kiuc3() {
        assertEquals(0, ValueUtils.getCollectionHint(List.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonCollectionNonArrayNonPrimitiveNonInterfaceNonFinalClass_zsqz5() {
        assertEquals(0, ValueUtils.getCollectionHint(String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueCollection_ESYo2() {
    Collection<Integer> collection = new ArrayList<>();
    collection.add(1);
    try {
       ValueUtils.setValue(collection, 0, 10);
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueNullCollection_vJnT3() {
    Object collection = null;
    try {
       ValueUtils.setValue(collection, 0, 10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueNonArrayCollection_rNId4() {
    Map<String, Integer> map = new HashMap<>();
    map.put("key", 1);
    try {
       ValueUtils.setValue(map, 0, 10);
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithNullPropertyDescriptor_HfvB2() {
    ValueUtils valueUtils = new ValueUtils();
    Object bean = new Object();
    PropertyDescriptor propertyDescriptor = null;
    try {
        valueUtils.getValue(bean, propertyDescriptor);
        fail("Expected JXPathException");
    } catch (JXPathException ex) {
        assertEquals("No read method", ex.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandler_ajVi0() {
        Class clazz = DynamicPropertyHandler.class;
        DynamicPropertyHandler dynamicPropertyHandler = ValueUtils.getDynamicPropertyHandler(clazz);
        assertNotNull(dynamicPropertyHandler);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_vtCX1() {
        Object[] array = new Object[] {1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertSame(new Object[] {1, 2, 3, null, null}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollectionNotEnoughElements_lmCp3() {
        Collection collection = new ArrayList();
        collection.add(1);
        assertThrows(JXPathException.class, () -> ValueUtils.expandCollection(collection, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionNotEnoughSize_zcti5() {
        Object array = new Object[] {1, 2};
        assertThrows(JXPathException.class, () -> ValueUtils.expandCollection(array, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessibleMethod_PrivateMethod_aNfH1_GosO0() {
    try {
        Method method = new Object().getClass().getDeclaredMethod("getClass", null);
        Method result = ValueUtils.getAccessibleMethod(method);
        Assertions.assertNull(result);
    } catch (NoSuchMethodException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArrayAtStartAndMiddle_dOES6_fid2() {
        Object array = new int[]{1, 2,4, 4, 5};
        Object result = ValueUtils.remove(array, 0);
        result = ValueUtils.remove(result, 1);
        assertArrayEquals(new int[]{2,4, 4}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArrayAtMiddleAndStart_kdIs10_fid2() {
        Object array = new int[]{1, 2,4, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        result = ValueUtils.remove(result, 0);
        assertArrayEquals(new int[]{2,4, 4}, (int[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueNullCollection_vJnT3_fid2() {
    Object collection = null;
    try {
       ValueUtils.expandCollection(collection, 0);
        fail("Expected NullPointerException");
    } catch (JXPathException e) {
    }
}
}