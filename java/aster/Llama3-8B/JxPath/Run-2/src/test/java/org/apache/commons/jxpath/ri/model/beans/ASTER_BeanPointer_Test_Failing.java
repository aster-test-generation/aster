/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Failing {
@Mock
    private DOMNodePointer parent;
@Mock
    private QName otherName;
private Object bean;
private QName name;
private BeanPointer beanpointer;
@Mock
    private JXPathBeanInfo beanInfo;
@Mock
    private Object node;
@Mock
    private JXPathIntrospector jxpathIntrospector;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception{
        MockitoAnnotations.initMocks(this);
        beanpointer = new BeanPointer(name, null, null, null);
        // Arrange
        String expectedName = "expectedName";
        // Act
        QName actualName = beanpointer.getName();
        // Assert
        Mockito.verify(name).getName();
        assertEquals(expectedName, actualName.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() {
        bean = new Integer(10);
        beanpointer = new BeanPointer(null, bean, new JXPathBasicBeanInfo(Object.class, false), Locale.US);
        String path = beanpointer.asPath();
        assertEquals("/10", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafTrue_BCVQ0() {
    QName name = new QName("name");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass(), true);
    Locale locale = Locale.US;
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    boolean result = beanPointer.isLeaf();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafNull_VTCb2() {
    QName name = new QName("name");
    Object bean = null;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass());
    Locale locale = Locale.US;
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    boolean result = beanPointer.isLeaf();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception{
        beanpointer = new BeanPointer(name, null, null, null);
        // Arrange
        when(name.hashCode()).thenReturn(1);
        // Act
        int result = beanpointer.hashCode();
        // Assert
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentBean_ZWOk0() throws Exception {
    bean = new Object();
    name = new QName("testName");
    beanpointer = new BeanPointer(parent, name, bean, new JXPathBasicBeanInfo(beanpointer.getClass(), false));
    bean = new Object();
    QName otherName = new QName("otherName");
    BeanPointer otherBeanpointer = new BeanPointer(parent, otherName, bean, new JXPathBasicBeanInfo(beanpointer.getClass(), false));
    assertFalse(beanpointer.equals(otherBeanpointer));
}
}