/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.KeyManager;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ExceptionHandler;
import org.apache.commons.jxpath.Functions;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.NodeSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Failing {
@Mock
    private QName name;
private NullPointer nullpointer;
@Mock
    private JXPathContext jXPathContext;
@Mock
    private Object value;
@Mock
    private NodePointer nodePointer;
@Mock
    private AbstractFactory abstractFactory;
@Mock
    private Locale locale;
@Mock
    private QName qName;
@Mock
    private Variables variables;
@Mock
    private Pointer pointer;
@Mock
    private DOMNodePointer parent;
@Mock
    private NodeSet nodeSet;
@Mock
    private KeyManager keyManager;
@Mock
    private ExceptionHandler exceptionHandler;
@Mock
    private Functions functions;
@Mock
    private NamespaceResolver namespaceResolver;
private String id;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qname;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNullPointerDifferentName_kTdj3() {
    NullPointer nullPointer1 = new NullPointer(new Locale("en", "US"), "id");
    NullPointer nullPointer2 = new NullPointer(new Locale("en", "US"), "otherId");
    boolean result = nullPointer1.equals(nullPointer2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNullPointerDifferentLocale_jbuF5() {
    NullPointer nullPointer1 = new NullPointer(new Locale("en", "US"), "id");
    NullPointer nullPointer2 = new NullPointer(new Locale("fr", "FR"), "id");
    boolean result = nullPointer1.equals(nullPointer2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_uUxT0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("name");
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        NodePointer nodePointer = nullPointer.createChild(context, name, 0);
        assert nodePointer != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild2_QaqT1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("name");
        NullPointer nullPointer = new NullPointer(name, new Locale("en", "US"));
        NodePointer nodePointer = nullPointer.createChild(context, name, 0);
        assert nodePointer != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ycaD0() {
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        QName result = nullPointer.getName();
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_DdsK0() {
        JXPathContext context = JXPathContext.newContext(null, null);
        QName name = new QName("name");
        int index = 0;
        Object value = "value";
        NullPointer nullPointer = new NullPointer(null, "id");
        NodePointer nodePointer = nullPointer.createChild(context, name, index, value);
        assert nodePointer != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() {
        NullPointer nullpointer = new NullPointer(locale, "id");
        Mockito.when(nullpointer.isActual()).thenReturn(true);
        boolean actual = nullpointer.isActual();
        Assertions.assertTrue(actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithParent_lvYd0_wWWp0() {
    JXPathContext context = JXPathContext.newContext(new Object());
    NullPointer parent = new NullPointer(Locale.US, "id");
    NodePointer result = parent.createPath(context, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithoutParent_bTbI1_jziX0() {
    JXPathContext context = JXPathContext.newContext(null);
    NullPointer parent = null;
    try {
        parent.createPath(context, null);
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithParent_CXPw0_OXVU0() {
    JXPathContext context = JXPathContext.newContext(new Object());
    NullPointer parent = new NullPointer(null, new QName("prefix", "localName"));
    NodePointer result = parent.createPath(context);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithoutParent_IgVb1_Isdi0() {
    JXPathContext context = JXPathContext.newContext(null);
    NullPointer parent = null;
    try {
        parent.createPath(context);
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
        assertEquals("Cannot create the root object: ", e.getMessage());
    }
}
}