/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceContext_Test_Failing {
@Mock
    private SelfContext selfContext;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodeIterator iterator;
private NamespaceContext namespacecontext;
@Mock
    private NodePointer nodePointer;
private NodePointer currentNodePointer;
private NodeTest nodeTest;
private boolean setStarted = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        MockitoAnnotations.initMocks(this);
        Mockito.when(parentContext.getCurrentPosition()).thenReturn(0);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeTypeTest);
        Mockito.when(parentContext.nextNode()).thenReturn(true);
        Mockito.when(parentContext.getCurrentPosition()).thenReturn(1);
        boolean result = namespaceContext.setPosition(1);
        Mockito.verify(parentContext, Mockito.times(1)).reset();
        Mockito.verify(parentContext, Mockito.times(1)).nextNode();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionGreaterThanCurrentPosition_xirZ2() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), new NodeTypeTest(0));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
        namespaceContext.setPosition(5);
        boolean result = namespaceContext.setPosition(10);
        assert (result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_DsRm0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        NodePointer result = namespaceContext.getCurrentNodePointer();
        assertEquals(NodePointer.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_setStartedFalse_nodeTestInstanceOfNodeNameTest_IMCL1() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        QName testName = new QName("testName");
        NodeNameTest nodeNameTest = new NodeNameTest(testName);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assert (!result);
    }
}