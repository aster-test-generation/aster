/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import java.util.Iterator;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Failing {
private Expression expression;
private String xpath;
@Mock
    private JXPathContext jxpathcontext;
@Mock
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
@Mock
    private NodePointer nodepointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void remove_Wsfh1() {
            throw new UnsupportedOperationException();
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetValue_MxGD0() throws Exception{
    Expression expression = mock(Expression.class);
    String xpath = "xpath";
    JXPathCompiledExpression jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
    Object value = "value";
    jxpathcompiledexpression.iterate(jxpathcontext);
    verify(jxpathcontextreferenceimpl).iterate(xpath, expression);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetPointer_uplD0() throws Exception{
    Expression expression = mock(Expression.class);
    String xpath = "xpath";
    JXPathCompiledExpression jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
    when(jxpathcontextreferenceimpl.iteratePointers(anyString())).thenReturn(mock(Iterator.class));
    Iterator pointer = jxpathcompiledexpression.iterate(jxpathcontext);
    verify(jxpathcontextreferenceimpl).iteratePointers(xpath);
    assertEquals(mock(Iterator.class), pointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testiteratePointers_pBgc0() throws Exception{
    JXPathCompiledExpression expression = new JXPathCompiledExpression("expression", new Constant("expression"));
    String xpath = "xpath";
    JXPathCompiledExpression jxpathcompiledexpression = expression;
    Iterator iterator = mock(Iterator.class);
    when(((JXPathContextReferenceImpl) jxpathcontext).iteratePointers(xpath)).thenReturn(iterator);
    Iterator result = jxpathcompiledexpression.iterate(jxpathcontext);
    assertEquals(iterator, result);
}
}