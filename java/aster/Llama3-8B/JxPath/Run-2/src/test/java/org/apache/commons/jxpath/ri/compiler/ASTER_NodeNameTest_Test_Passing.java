/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NodeNameTest_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_QNameWithNamespaceURI_Euxk0() {
    QName qname = new QName("prefix", "localName");
    NodeNameTest nodeNameTest = new NodeNameTest(qname, "namespaceURI");
    assertEquals("namespaceURI", nodeNameTest.getNamespaceURI());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_QNameWithoutNamespaceURI_VWfZ1() {
    QName qname = new QName("prefix", "localName");
    NodeNameTest nodeNameTest = new NodeNameTest(qname);
    assertEquals(null, nodeNameTest.getNamespaceURI());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameOnly_Kgqf0() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        String result = nodeNameTest.toString();
        assert result.equals(qname.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameWithNamespaceURI_TVev1() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "namespaceURI");
        String result = nodeNameTest.toString();
        assert result.equals(qname.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeName_kjOE0() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        QName result = nodeNameTest.getNodeName();
        assertEquals(qname, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeNameWithNamespaceURI_pNDu1() {
        QName qname = new QName("prefix", "localName");
        String namespaceURI = "namespaceURI";
        NodeNameTest nodeNameTest = new NodeNameTest(qname, namespaceURI);
        QName result = nodeNameTest.getNodeName();
        assertEquals(qname, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsWildcard_UWED0() {
    QName qname = new QName("*");
    NodeNameTest nodeNameTest = new NodeNameTest(qname);
    boolean result = nodeNameTest.isWildcard();
    assert(result);
}
}