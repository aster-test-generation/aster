/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.util.Collections;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Collections;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassFunctions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionWithNullNamespace_ukXP1() {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction(null, "methodName", new Object[] { "param1", "param2" });
    assertNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionWithDifferentNamespace_oyjr2() {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("differentNamespace", "methodName", new Object[] { "param1", "param2" });
    assertNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionWithInvalidMethod_ZMMm7() {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("namespace", "invalidMethod", new Object[] { "param1", "param2" });
    assertNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_XCNR0() {
        Class functionClass = String.class;
        String namespace = "testNamespace";
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Set<String> usedNamespaces = classFunctions.getUsedNamespaces();
        Set<String> expected = Collections.singleton(namespace);
        assert usedNamespaces.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionWithValidNamespaceAndNameAndParameters_nIUN0_fid1() {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("namespace", "methodName", new Object[] { "param1", "param2" });
}
}