/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicNodeSet_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWhenValuesIsNull_bGIt0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getValues();
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWhenValuesIsNotNull_gKnz1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        basicNodeSet.getValues(); // call getValues to set values
        List result = basicNodeSet.getValues();
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWhenPointersIsEmpty_SPwK2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getValues();
        assert result.isEmpty();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Moos0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        String expected = "[]";
        assertEquals(expected, basicNodeSet.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodesWhenNodesIsNull_Fbmg0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getNodes();
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodesWhenNodesIsNotNull_DlrD1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        basicNodeSet.getNodes(); // initialize nodes
        List result = basicNodeSet.getNodes();
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodesWhenNodesIsUnmodifiable_wNRf2_XJDQ0() {
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    basicNodeSet.getNodes(); // initialize nodes
    List result = basicNodeSet.getNodes();
    try {
        result.add(new Object()); // should throw exception
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemovePointer_SoMi0_IpxI1() {
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    assertTrue(true);
}
}