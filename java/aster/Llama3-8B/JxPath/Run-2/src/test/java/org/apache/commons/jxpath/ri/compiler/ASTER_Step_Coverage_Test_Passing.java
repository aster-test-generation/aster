/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Step_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_NullPredicates_hoSH0() {
        Step step = new Step(0, new NodeTypeTest(0), null);
        assertFalse(step.isContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_EmptyPredicates_AptN1() {
        Step step = new Step(0, new NodeTypeTest(0), new Expression[0]);
        assertFalse(step.isContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AxisChild_UZzX0() {
        Step step = new Step(Compiler.AXIS_CHILD, new NodeTypeTest(1), null);
        assertEquals("NodeTypeTest{nodeType=1}", step.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AxisAttribute_bfeb1() {
        Step step = new Step(Compiler.AXIS_ATTRIBUTE, new NodeTypeTest(1), null);
        assertEquals("@NodeTypeTest{nodeType=1}", step.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AxisSelf_lbrX2() {
        Step step = new Step(Compiler.AXIS_SELF, new NodeTypeTest(1), null);
        assertEquals(".", step.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AxisParent_fMOV3() {
        Step step = new Step(Compiler.AXIS_PARENT, new NodeTypeTest(1), null);
        assertEquals("..", step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringSelf_JokH0() {
        String result = Step.axisToString(Compiler.AXIS_SELF);
        assertEquals("self", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringChild_EGYq1() {
        String result = Step.axisToString(Compiler.AXIS_CHILD);
        assertEquals("child", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringParent_koRK2() {
        String result = Step.axisToString(Compiler.AXIS_PARENT);
        assertEquals("parent", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAncestor_LaQe3() {
        String result = Step.axisToString(Compiler.AXIS_ANCESTOR);
        assertEquals("ancestor", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAttribute_LkFt4() {
        String result = Step.axisToString(Compiler.AXIS_ATTRIBUTE);
        assertEquals("attribute", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringNamespace_RDGY5() {
        String result = Step.axisToString(Compiler.AXIS_NAMESPACE);
        assertEquals("namespace", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringPreceding_rhwD6() {
        String result = Step.axisToString(Compiler.AXIS_PRECEDING);
        assertEquals("preceding", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringFollowing_lakk7() {
        String result = Step.axisToString(Compiler.AXIS_FOLLOWING);
        assertEquals("following", result);
    }
}