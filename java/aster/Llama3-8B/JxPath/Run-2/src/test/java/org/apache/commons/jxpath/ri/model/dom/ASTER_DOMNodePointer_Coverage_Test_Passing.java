/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.w3c.dom.Node;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_WlMf0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean result = domNodePointer.isCollection();
        assert(result == false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNodeHavingNoChildNodes_EVDH0() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(false);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        boolean result = domNodePointer.isLeaf();
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNodeHavingChildNodes_zmXG1() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(true);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        boolean result = domNodePointer.isLeaf();
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNodeHavingNoChildNodesButParentIsNotLeaf_tfOS3() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(false);
        VariablePointer parent = mock(VariablePointer.class);
        when(parent.isLeaf()).thenReturn(false);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        boolean result = domNodePointer.isLeaf();
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNodeHavingChildNodesButParentIsLeaf_dWKb4() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(true);
        VariablePointer parent = mock(VariablePointer.class);
        when(parent.isLeaf()).thenReturn(true);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        boolean result = domNodePointer.isLeaf();
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNodeHavingChildNodesButParentIsNull_KEgF6() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(true);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals(false, domNodePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguageNull_QSyu0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
    boolean result = domNodePointer.isLanguage("en");
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURINodeLocaleParentNodeID_AtMg9() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithNullContext_spQk1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        QName name = new QName("test", "name");
        int index = 0;
        Object value = "testValue";
        try {
            domNodePointer.createChild(null, name, index, value);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_EmptyPrefix_beNc1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("");
        assertEquals(domNodePointer.getDefaultNamespaceURI(), namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullNamespace_gDht4() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("prefix");
        assertNull(namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNullTest_AaNl1() {
        boolean result = DOMNodePointer.testNode(null, null);
        Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNullName_Rqoa2_WhhE0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(null);
    int index = 0;
    Object value = "testValue";
    try {
        domNodePointer.createChild(context, null, index, value);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_XMLPrefix_CbqL2_AGyB0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    String namespaceURI = domNodePointer.getNamespaceURI("xml");
    assertEquals("http://www.w3.org/XML/1998/namespace", namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_XMLNSPrefix_Enuy3_TufZ0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    String namespaceURI = domNodePointer.getNamespaceURI("xmlns");
    assertEquals("http://www.w3.org/2000/xmlns/", namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_NullNode_Hibl10_kVFa1() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    String namespaceURI = domNodePointer.getNamespaceResolver().getNamespaceURI("prefix");
    assertNull(namespaceURI);
}
}