/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Passing {
@Mock
    private JXPathContextReferenceImpl jxpathContext;
@Mock
    private DOMNodePointer pointer;
@Mock
    private QName name;
@Mock
    private VariablePointer variablePointer;
@Mock
    private JXPathContext jxpathContextObject;
private RootContext rootcontext;
@Mock
    private EvalContext evalContext;
@Mock
    private NodePointer nodePointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qName;
@Mock
    private NodeSet nodeSet;
@Mock
    private RootContext rootContext;
@Mock
    private QName qname;
@Mock
    private Function function;
private static int MAX_REGISTER = 4;
private int availableRegister = 0;
private Object[] registers;
@Mock
    private Object value;
@Mock
    private JXPathContext jxpathContextReference;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJXPathContext() throws Exception{
        rootcontext = new RootContext(jxpathContext, pointer);
        // Act
        JXPathContext result = rootcontext.getJXPathContext();
        // Assert
        Assertions.assertEquals(jxpathContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAbsoluteRootContext() {
        rootcontext = new RootContext(jxpathContext, nodePointer);
        // Arrange
        when(jxpathContext.getAbsoluteRootContext()).thenReturn(evalContext);
        // Act
        EvalContext actual = rootcontext.getAbsoluteRootContext();
        // Assert
        assertEquals(evalContext, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_1() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(null, null);
        // Act
        int result = rootcontext.setRegisteredValue(value);
        // Assert
        assertEquals(0, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValueAlreadyFull_1() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(null, null);
        // Act
        for (int i = 0; i < MAX_REGISTER; i++) {
            rootcontext.setRegisteredValue(value);
        }
        // Assert
        assertEquals(-1, rootcontext.setRegisteredValue(value));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetRegisteredValue_poPV0_5() throws Exception{
    Object[] registers = new Object[MAX_REGISTER];
    for (int i = 0; i < MAX_REGISTER; i++) {
        registers[i] = "registered value " + i;
    }
    RootContext rootcontext = new RootContext(jxpathContext, pointer);
    if (registers == null) {
    }
    assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(-1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetRegisteredValue_poPV0_6() throws Exception{
    Object[] registers = new Object[MAX_REGISTER];
    for (int i = 0; i < MAX_REGISTER; i++) {
        registers[i] = "registered value " + i;
    }
    RootContext rootcontext = new RootContext(jxpathContext, pointer);
    if (registers == null) {
    }
    assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(MAX_REGISTER));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetRegisteredValue_poPV0_7() throws Exception{
    Object[] registers = new Object[MAX_REGISTER];
    for (int i = 0; i < MAX_REGISTER; i++) {
        registers[i] = "registered value " + i;
    }
    RootContext rootcontext = new RootContext(jxpathContext, pointer);
    if (registers == null) {
    }
        assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(0));}
}