/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import java.util.Locale;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
private QName name;
private DynaBean dynaBean;
private DynaBeanPointer dynabeanpointer;
@Mock
    private QName mockName;
@Mock
    private DynaBean mockDynaBean;
@Mock
    private Locale mockLocale;
@Mock
    private DynaBeanPointer mockDynaBeanPointer;
@Mock
    private DOMNodePointer mockDOMNodePointer;
@Mock
    private DOMNodePointer parent;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_1() throws Exception {
        name = new QName("testName");
        dynaBean = Mockito.mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.US);
        // Test equals with same object
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.US);
        // Test equals with null object
        // Test equals with object of different class
        assertEquals(dynabeanpointer, dynabeanpointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_3() throws Exception {
        name = new QName("testName");
        dynaBean = Mockito.mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.US);
        // Test equals with same object
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.US);
        // Test equals with null object
        // Test equals with object of different class
        assertNotEquals(dynabeanpointer, null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_4() throws Exception {
        name = new QName("testName");
        dynaBean = Mockito.mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.US);
        // Test equals with same object
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.US);
        // Test equals with null object
        // Test equals with object of different class
        assertNotEquals(dynabeanpointer, new Object());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() {
        dynabeanpointer = new DynaBeanPointer(null, dynaBean, null);
        // Arrange
        Object expected = dynaBean;
        // Act
        Object actual = dynabeanpointer.getImmediateNode();
        // Assert
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNotNullName_NGDk1() {
    QName name = new QName("test");
    DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(name, null, null);
    int result = dynaBeanPointer.hashCode();
    assertEquals(name.hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        dynabeanpointer = new DynaBeanPointer(null, dynaBean, null);
        // Arrange
        int expectedLength = 1;
        // Act
        int actualLength = dynabeanpointer.getLength();
        // Assert
        assertEquals(expectedLength, actualLength);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        dynaBean = mock(DynaBean.class);
        DynaBeanPointer dynabeanpointer = new DynaBeanPointer(null, dynaBean, null);
        Object baseValue = dynabeanpointer.getBaseValue();
        assertEquals(dynaBean, baseValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisLeaf_gqRv0() throws Exception{
    DynaBean dynaBean = mock(DynaBean.class);
    QName qName = new QName("name");
    DynaBeanPointer dynabeanpointer = new DynaBeanPointer(qName, dynaBean, Locale.US);
    boolean result = dynabeanpointer.isLeaf();
    Assertions.assertFalse(result);
}
}