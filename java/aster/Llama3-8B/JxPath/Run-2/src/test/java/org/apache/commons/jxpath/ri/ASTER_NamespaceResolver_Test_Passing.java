/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import java.util.HashMap;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
@Mock
    private NamespaceResolver parent;
private boolean sealed;
@Mock
    private NodePointer nodePointer;
private NamespaceResolver namespaceResolver;
@Mock
    private Map<String, String> namespaceMap;
@Mock
    private Map<String, String> reverseMap;
private NamespaceResolver namespaceresolver;
@Mock
    private NamespaceResolver pointer;
@Mock
    private Object mockObject;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWhenParentIsNull_gpaI0() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.seal();
        assertTrue(resolver.isSealed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWhenParentIsNotNull_vOls1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertTrue(resolver.isSealed());
        assertTrue(parent.isSealed());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredPrefix_foundPrefix() throws Exception {
        namespaceResolver = new NamespaceResolver(parent);
        namespaceResolver = new NamespaceResolver(parent);
        // Given
        String namespaceURI = "http://example.com";
        String prefix = "prefix";
        when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(prefix);
        // When
        String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        // Then
        assertEquals(prefix, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredPrefix_notFoundPrefix() throws Exception {
        namespaceResolver = new NamespaceResolver(parent);
        // Given
        String namespaceURI = "http://example.com";
        String prefix = null;
        // When
        String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        // Then
        assertEquals(prefix, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredPrefixNullReverseMap_dfkY0() {
    NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
    String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredPrefixReverseMap_jFqS1() {
    NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
    namespaceResolver.reverseMap.put("http://example.com", "prefix");
    String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
    Assertions.assertEquals("prefix", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredPrefixParent_cLHu2() {
    NamespaceResolver parent = new NamespaceResolver(null);
    parent.reverseMap.put("http://example.com", "prefix");
    NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
    String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
    Assertions.assertEquals("prefix", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespace_JDUd0() {
    NamespaceResolver namespaceResolver = new NamespaceResolver();
    namespaceResolver.registerNamespace("prefix", "namespaceURI");
    assertEquals("namespaceURI", namespaceResolver.getNamespaceURI("prefix"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_NullPrefix_XkXc0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String result = namespaceResolver.getExternallyRegisteredNamespaceURI(null);
        assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_EmptyPrefix_IBOc1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String result = namespaceResolver.getExternallyRegisteredNamespaceURI("");
        assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixExternallyRegisteredPrefixNotNull() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        String namespaceURI = "testNamespace";
        String prefix = "testPrefix";
        when(namespaceresolver.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(prefix);
        assertEquals(prefix, namespaceresolver.getPrefix(namespaceURI));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixExternallyRegisteredPrefixNull_xbJD1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String namespaceURI = "namespaceURI";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        Assertions.assertNull(prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURINullParent() {
        namespaceresolver = new NamespaceResolver(parent);
        String prefix = "prefix";
        String uri = null;
        when(parent.getNamespaceURI(prefix)).thenReturn(null);
        String result = namespaceresolver.getNamespaceURI(prefix);
        assertEquals(pointer.getNamespaceURI(prefix), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIExternallyRegisteredNamespaceURINull_Tnmu1() {
    NamespaceResolver namespaceResolver = new NamespaceResolver(null);
    String uri = namespaceResolver.getNamespaceURI("prefix");
    assert uri == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceContextPointerWhenPointerIsNullAndParentIsNotNull_WcSA0() {
    NamespaceResolver namespaceResolver = new NamespaceResolver(null);
    Pointer pointer = namespaceResolver.getNamespaceContextPointer();
    Assertions.assertEquals(pointer, namespaceResolver.getNamespaceContextPointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceContextPointerWhenPointerIsNullAndParentIsNull_iwQb2() {
    NamespaceResolver namespaceResolver = new NamespaceResolver(null);
    Pointer pointer = namespaceResolver.getNamespaceContextPointer();
    Assertions.assertNull(pointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_UGiH0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        boolean result = namespaceResolver.isSealed();
        assert (!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWhenParentIsNotNull_vOls1_1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertTrue(resolver.isSealed());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWhenParentIsNotNull_vOls1_2() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertTrue(parent.isSealed());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNamespaceContextPointer_JSYO0() {
    namespaceResolver = new NamespaceResolver();
    namespaceResolver.setNamespaceContextPointer(nodePointer);
    assertEquals(nodePointer, namespaceResolver.getNamespaceContextPointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetExternallyRegisteredNamespaceURI_notFoundInMap_notFoundInParent_uxIW0() throws Exception {
    NamespaceResolver namespaceresolver = new NamespaceResolver(null);
    String prefix = "prefix";
    assertNull(namespaceresolver.getExternallyRegisteredNamespaceURI(prefix));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixExternallyRegisteredPrefixNull_RWiF0() throws Exception {
    namespaceresolver = new NamespaceResolver(parent);
    String namespaceURI = "testNamespace";
    when(namespaceresolver.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(null);
    assertEquals(null, namespaceresolver.getPrefix(namespaceURI));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_jrKU0() throws CloneNotSupportedException {
    NamespaceResolver namespaceresolver = new NamespaceResolver();
    NamespaceResolver clone = (NamespaceResolver) namespaceresolver.clone();
    Assertions.assertNotNull(clone);
    Assertions.assertNotEquals(namespaceresolver, clone);
    try {
        Field field = NamespaceResolver.class.getDeclaredField("sealed");
        field.setAccessible(true);
        Assertions.assertFalse((boolean) field.get(clone));
    } catch (NoSuchFieldException | IllegalAccessException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_umfK0_YEON1() {
    NamespaceResolver namespaceResolver = new NamespaceResolver();
    NamespaceResolver clonedNamespaceResolver = (NamespaceResolver) namespaceResolver.clone();
    assert clonedNamespaceResolver != null;
    assert namespaceResolver != clonedNamespaceResolver;
}
}