/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import org.apache.commons.jxpath.JXPathTypeConversionException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicTypeConverter_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrongType_NIMO9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(1, String.class);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrongArray_Stzr10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Object[]{1, 2, 3}, Integer[].class);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrongCollection_fafb11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Arrays.asList("1", "2", "3"), List.class);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrongPointer_VJVn13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert("1", Integer.class);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullArray_AmhG14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(null, Integer[].class);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullCollection_uMVd15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(null, List.class);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullPointer_RAEI17() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(null, Integer.class);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyArray_Nfeb18() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Integer[0], Integer[].class);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyCollection_bTkJ19() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Collections.emptyList(), List.class);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForInterface_zGyz2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(List.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateInvalidType_SCSX10() {
    BasicTypeConverter converter = new BasicTypeConverter();
    try {
        converter.allocateNumber(String.class, 10.0);
        Assertions.fail("Expected JXPathTypeConversionException");
    } catch (JXPathTypeConversionException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInvalidType_mTXj8_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", String.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInvalidType_mTXj8_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", String.class);
        assertEquals("1", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionForSet_GOSq4_xAlE1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection collection = (Collection) converter.convertStringToPrimitive("test", Object.class);
    assert collection instanceof Set;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableList_rXCL0_tziG0() {
    List<String> list = new ArrayList<>();
    list.add("Hello");
    list.add("World");
    Collection<String> unmodifiableList = Collections.unmodifiableCollection(list);
    assert unmodifiableList instanceof Collection;
    assert !Collections.addAll((Collection<String>) unmodifiableList, "New");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollection_lFwd3_XWJL0() {
    Collection<String> collection = new ArrayList<>();
    collection.add("Hello");
    collection.add("World");
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<String> unmodifiableCollection = Collections.unmodifiableCollection(collection);
    assert unmodifiableCollection instanceof Collection;
    assert !((Collection) unmodifiableCollection).add("New");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInvalidType_mTXj8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", String.class);
        assertNotNull(result);
        assertEquals("1", result);
    }
}