/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodeIterator_Test_Passing {
@Mock
    private DOMNodePointer parent;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private DOMNodePointer startWith;
@Mock
    private QName name;
private JDOMNodeIterator jdomnodeiterator;
@Mock
    private boolean reverse;
@Mock
    private Object child;
    private int position = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, false, startWith);
        // Set the position to a specific value
        jdomnodeiterator.setPosition(5);
        // Verify that the getPosition method returns the expected value
        assertEquals(5, jdomnodeiterator.getPosition());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_NullChild_JRLN0() {
        JDOMNodeIterator iterator = new JDOMNodeIterator(new DOMNodePointer(null, Locale.US, "id"), new NodeTypeTest(1), false, new DOMNodePointer(null, Locale.US, "id"));
        NodePointer result = iterator.getNodePointer();
        assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_SetPositionFailed_Mqre1() {
        JDOMNodeIterator iterator = new JDOMNodeIterator(new DOMNodePointer(null, Locale.US, "id"), new NodeTypeTest(1), false, new DOMNodePointer(null, Locale.US, "id"));
        iterator.setPosition(1);
        NodePointer result = iterator.getNodePointer();
        assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_Success_Uync2() {
        JDOMNodeIterator iterator = new JDOMNodeIterator(new DOMNodePointer(null, Locale.US, "id"), new NodeTypeTest(1), false, new DOMNodePointer(null, Locale.US, "id"));
        iterator.setPosition(1);
        NodePointer result = iterator.getNodePointer();
        assert result instanceof NodePointer;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPosition_stZq0() throws Exception{
    MockitoAnnotations.initMocks(this);
    jdomnodeiterator = Mockito.mock(JDOMNodeIterator.class);
    NodePointer nodePointer = Mockito.mock(NodePointer.class);
    Mockito.when(jdomnodeiterator.getNodePointer()).thenReturn(nodePointer);
    jdomnodeiterator.setPosition(5);
    Mockito.verify(jdomnodeiterator, Mockito.times(1)).setPosition(5);
    Mockito.verify(jdomnodeiterator, Mockito.times(0)).getNodePointer();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNodePointer_VilE0() {
    jdomnodeiterator = new JDOMNodeIterator(parent, new NodeTypeTest(1), false, null);
    when(child).thenReturn("mock child");
    NodePointer result = jdomnodeiterator.getNodePointer();
    assertEquals(new JDOMNodePointer(parent, "mock child"), result);
}
}