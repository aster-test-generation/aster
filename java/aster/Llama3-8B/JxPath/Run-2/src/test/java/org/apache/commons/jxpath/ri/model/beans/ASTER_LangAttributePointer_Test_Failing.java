/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LangAttributePointer_Test_Failing {
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
private LangAttributePointer langAttributePointer;
LangAttributePointer langattributepointer;
LangAttributePointer anotherLangAttributePointer;
@Mock
    private DOMNodePointer parent;
@Mock
    private NodeTest nodeTest;
@Mock
    private Object mockRoot;
@Mock
    private QName qname;
@Mock
    private VariablePointer variablePointer;
@Mock
    private DOMNodePointer dOMNodePointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qName;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        langattributepointer = Mockito.mock(LangAttributePointer.class);
        anotherLangAttributePointer = Mockito.mock(LangAttributePointer.class);
        // Arrange
        Mockito.when(langattributepointer.equals(anotherLangAttributePointer)).thenReturn(true);
        // Act
        boolean result = langattributepointer.equals(anotherLangAttributePointer);
        // Assert
        Mockito.verify(langattributepointer, Mockito.times(1)).equals(anotherLangAttributePointer);
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        langAttributePointer = Mockito.mock(LangAttributePointer.class);
        // Act
        int result = langAttributePointer.hashCode();
        // Assert
        assertEquals(-1683944236, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_EmptyParent_oaXE1() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        LangAttributePointer langAttributePointer = new LangAttributePointer(parent);
        String result = langAttributePointer.asPath();
        assert result.equals("@xml:lang");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_fid2() throws Exception {
        langAttributePointer = Mockito.mock(LangAttributePointer.class);
        // Act
        int result = langAttributePointer.hashCode();
        // Assert
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_fid2() throws Exception{
        langattributepointer = new LangAttributePointer(parent);
        // Arrange
        when(parent.getNamespaceURI()).thenReturn("http://example.com");
        // Act
        String namespaceURI = langattributepointer.getNamespaceURI();
        // Assert
        assertEquals("http://example.com", namespaceURI);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_fid2() {
        langattributepointer = new LangAttributePointer(parent);
        // Arrange
        when(parent.asPath()).thenReturn("/root");
        // Act
        String result = langattributepointer.asPath();
        // Assert
        assertEquals("/root@xml:lang", result);
    }
}