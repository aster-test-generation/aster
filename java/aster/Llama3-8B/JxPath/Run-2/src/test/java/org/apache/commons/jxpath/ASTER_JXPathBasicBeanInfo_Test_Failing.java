/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.beans.PropertyDescriptor;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptor2_aSIn1_YENk0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
    PropertyDescriptor propertyDescriptor = beanInfo.getPropertyDescriptor("propertyName");
    assertNotNull(propertyDescriptor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithProperties_WMRB0_JVYu0() {
    try {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.forName("java.lang.String"), false);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        Assertions.assertNotNull(propertyDescriptors);
        Assertions.assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    } catch (ClassNotFoundException e) {
        throw new AssertionError(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithException_MDYQ4_uMto0() {
    try {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.forName("java.lang.Thread"), false);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        Assertions.assertNotNull(propertyDescriptors);
        Assertions.assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    } catch (ClassNotFoundException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptor1_qOLF0_tDtQ0_fid2() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
    PropertyDescriptor propertyDescriptor = beanInfo.getPropertyDescriptor("propertyName");
    assertNotNull(propertyDescriptor);
}
}