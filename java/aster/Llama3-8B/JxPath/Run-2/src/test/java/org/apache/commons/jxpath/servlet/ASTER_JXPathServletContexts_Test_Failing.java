/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockServletContext;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Failing {
private static JXPathContextFactory factory;
@Mock
    private ServletContext servletContext;
@Mock
    private JXPathContext jxpathContext;
@InjectMocks
    private JXPathServletContexts jxpathservletcontexts;
@Mock
    private JXPathContext parentContext;
@Mock
    private HttpSession session;
@Mock
    private HttpSessionAndServletContext handle;
@Mock
    private PageContext pageContext;
@Mock
    private ServletRequest request;
@Mock
    private HttpServletRequest httpServletRequest;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetApplicationContext() throws Exception{
        factory = Mockito.mock(JXPathContextFactory.class);
        Mockito.when(factory.newContext(null, servletContext)).thenReturn(jxpathContext);
        jxpathservletcontexts = new JXPathServletContexts();
        Mockito.when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = jxpathservletcontexts.getApplicationContext(servletContext);
        Mockito.verify(servletContext).setAttribute(Constants.JXPATH_CONTEXT, jxpathContext);
        Mockito.verify(factory).newContext(null, servletContext);
        Assertions.assertEquals(jxpathContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSessionContext() throws Exception{
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Given
        when(factory.newContext(parentContext, handle)).thenReturn(mock(JXPathContext.class));
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        // When
        JXPathContext context = JXPathServletContexts.getSessionContext(session, servletContext);
        // Then
        verify(factory).newContext(parentContext, handle);
        verify(session).setAttribute(Constants.JXPATH_CONTEXT, context);
        assertEquals(context, session.getAttribute(Constants.JXPATH_CONTEXT));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPageContextNull_dxpk1_cKrV0() {
    MockServletContext pageContext = new MockServletContext();
    pageContext.setAttribute(Constants.JXPATH_CONTEXT, null);
    JXPathContext context = JXPathServletContexts.getRequestContext(null, pageContext);
    assertNotNull(context);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetRequestContext_Qslb0() throws Exception{
    jxpathservletcontexts = new JXPathServletContexts();
    JXPathContext parentContext = mock(JXPathContext.class);
    ServletRequestAndContext handle = mock(ServletRequestAndContext.class);
    JXPathContext context = mock(JXPathContext.class);
    when(factory.newContext(parentContext, handle)).thenReturn(context);
    when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    when(session != null).thenReturn(true);
    when(httpServletRequest.getSession(false)).thenReturn(session);
    JXPathContext result = jxpathservletcontexts.getRequestContext(request, servletContext);
    verify(factory).newContext(parentContext, handle);
    verify(request).setAttribute(Constants.JXPATH_CONTEXT, context);
    assertEquals(context, result);
}
}