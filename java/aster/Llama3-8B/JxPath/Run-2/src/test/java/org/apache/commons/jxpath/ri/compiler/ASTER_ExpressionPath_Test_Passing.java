/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
@Mock
    EvalContext evalContext;
@Mock
    Constant constant;
@Mock
    Expression[] expressions;
@Mock
    Step[] steps;
ExpressionPath expressionpath;
private ExpressionPath expressionPath;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private SelfContext selfContext;
@Mock
    private Expression expression;
@Mock
    private Expression[] predicates;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringConstant_VJeB0() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertEquals("test", expressionPath.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringConstantWithPredicates_KtYA1() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[]{new Constant("predicate")};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertEquals("test[predicate]", expressionPath.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringExpressionPath_XSyN4() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertEquals("(test)", expressionPath.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringExpressionPathWithPredicates_vCOI5() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[]{new Constant("predicate")};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertEquals("(test)[predicate]", expressionPath.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception{
        expressionpath = new ExpressionPath(constant, expressions, steps);
        // Arrange
        when(evalContext.getPosition()).thenReturn(1);
        when(constant.toString()).thenReturn("constantValue");
        // Act
        Object result = expressionpath.computeValue(evalContext);
        // Assert
        assertEquals("constantValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_Fuot0() {
        Constant constant1 = new Constant("hello");
        Constant constant2 = new Constant(123);
        Expression[] predicates = new Expression[] {new Constant("hello"), new Constant(123)};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant1, predicates, steps);
        Expression[] result = expressionPath.getPredicates();
        assertArrayEquals(predicates, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependentConstantTrue_rNXQ0() {
    Constant constant = new Constant("string");
    Expression[] predicates = new Expression[0];
    Step[] steps = new Step[0];
    ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
    boolean result = expressionPath.computeContextDependent();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependentConstantFalse_sYeu1() {
    Constant constant = new Constant(1);
    Expression[] predicates = new Expression[0];
    Step[] steps = new Step[0];
    ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
    boolean result = expressionPath.computeContextDependent();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependentPredicateTrue_Rzay2() {
    Constant constant = new Constant("string");
    Expression[] predicates = new Expression[] {new Constant("string")};
    Step[] steps = new Step[0];
    ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
    boolean result = expressionPath.computeContextDependent();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependentPredicateFalse_fmmm3() {
    Constant constant = new Constant(1);
    Expression[] predicates = new Expression[] {new Constant(1)};
    Step[] steps = new Step[0];
    ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
    boolean result = expressionPath.computeContextDependent();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependentNoPredicates_hNdt4() {
    Constant constant = new Constant("string");
    Expression[] predicates = new Expression[0];
    Step[] steps = new Step[0];
    ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
    boolean result = expressionPath.computeContextDependent();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute() throws Exception {
        expressionPath = new ExpressionPath(constant, expressions, steps);
        // Given
        when(evalContext.getPosition()).thenReturn(1);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.nextNode()).thenReturn(true);
        // When
        Object result = expressionPath.compute(evalContext);
        // Then
        verify(evalContext, times(1)).getPosition();
        verify(evalContext, times(1)).hasNext();
        verify(evalContext, times(1)).nextNode();
        assertEquals(constant, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionConstantString_KwWw0() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression result = expressionPath.getExpression();
        assert result instanceof Constant;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionConstantNumber_nkrq1() {
        Constant constant = new Constant(1);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression result = expressionPath.getExpression();
        assert result instanceof Constant;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPathConstantExpression_joiP0() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertTrue(expressionPath.isSimpleExpressionPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPathNumberExpression_tCrX1() {
        Constant constant = new Constant(10);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertTrue(expressionPath.isSimpleExpressionPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpressionPath() throws Exception {
        expression = mock(Expression.class);
        predicates = new Expression[0];
        steps = new Step[0];
        expressionPath = new ExpressionPath(constant, predicates, steps);
        // Arrange
        when(constant.compute(evalContext)).thenReturn("InitialContext");
        when(evalContext.getRootContext()).thenReturn(mock(RootContext.class));
        when(evalContext.getSingleNodePointer()).thenReturn(mock(NodePointer.class));
        // Act
        Object result = expressionPath.expressionPath(evalContext, true);
        // Assert
        verify(evalContext, times(1)).getRootContext();
        verify(evalContext, times(1)).getSingleNodePointer();
        assertEquals("InitialContext", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSimpleExpressionPathNotBasic_vXMy2_YJsx0() {
    Constant constant = new Constant("test");
    Expression[] predicates = new Expression[0];
    Step[] steps = new Step[0];
    ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
    assertFalse(expressionPath.isSimpleExpressionPath());
}
}