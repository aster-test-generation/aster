/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExpressionPath_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentExpressionIsContextDependent_npzB0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), new Expression[0], new Step[0]);
        assertTrue(expressionPath.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentExpressionIsNotContextDependent_RGZE1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), new Expression[0], new Step[0]);
        assertFalse(expressionPath.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentPredicatesAreContextDependent_QEwe2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), new Expression[]{new Constant("test")}, new Step[0]);
        assertTrue(expressionPath.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentPredicatesAreNotContextDependent_pEDP3() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), new Expression[]{new Constant("test2")}, new Step[0]);
        assertFalse(expressionPath.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentPredicatesAreNull_fhOI4() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), null, new Step[0]);
        assertFalse(expressionPath.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_CoreOperation_onnd0() {
        Constant constant = new Constant("constant");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[0], new Step[0]);
        String result = expressionPath.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Predicates_wGVw4() {
        Constant constant = new Constant("constant");
        Expression[] predicates = new Expression[] {new Constant("predicate1"), new Constant("predicate2")};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MultiplePredicates_Hgeh5() {
        Constant constant = new Constant("constant");
        Expression[] predicates = new Expression[] {new Constant("predicate1"), new Constant("predicate2"), new Constant("predicate3")};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_CoreOperation_NoPredicates_NoSteps_eEYB11() {
        Constant constant = new Constant("constant");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ExpressionPath_NoPredicates_NoSteps_RhDA12() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSimpleExpressionPath_ReturnBasic_XORV2_gkmU1() {
    ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), new Expression[0], new Step[0]);
    assertTrue(expressionPath.isSimpleExpressionPath());
}
}