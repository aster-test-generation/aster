/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import java.util.Iterator;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.Constant;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PredicateContext_Test_Failing {
@Mock
    private Constant expressionConstant;
@Mock
    private Constant expression;
@Mock
    private SelfContext selfContext;
@Mock
    private Constant constant;
private boolean done = false;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private Number number;
private PredicateContext predicatecontext;
@Mock
    private Constant nameTestExpressionConstant;
@Mock
    private Iterator iterator;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodePointer nodePointer;
private Expression nameTestExpression;
private PropertyPointer dynamicPropertyPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_qjzl0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        Constant constant = new Constant("test");
        PredicateContext predicateContext = new PredicateContext(selfContext, constant);
        boolean result = predicateContext.nextSet();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_UpXr0_QAaC0() {
    SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
    NamespaceContext parentContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
    Constant expression = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(parentContext, expression);
    predicateContext.reset();
    assertEquals(false, predicateContext.nextSet());
}
}