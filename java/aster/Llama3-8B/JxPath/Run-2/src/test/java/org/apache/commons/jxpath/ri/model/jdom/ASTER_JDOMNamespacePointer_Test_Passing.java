/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespacePointer_Test_Passing {
@Mock
    private JDOMNamespacePointer jdomnamespacepointer;
private String prefix;
@Mock
    private DOMNodePointer parent;
@Mock
    private QName name;
private String namespaceURI;
@Mock
    private JDOMNamespacePointer mockJDOMNamespacePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception{
        prefix = "testPrefix";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        int expectedHashCode = prefix.hashCode();
        int actualHashCode = jdomnamespacepointer.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        prefix = "prefix";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        QName expected = new QName(prefix);
        QName actual = jdomnamespacepointer.getName();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception{
        namespaceURI = "http://example.com";
        prefix = "prefix";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        // Arrange
        when(parent.getNamespaceURI(prefix)).thenReturn(namespaceURI);
        // Act
        String result = jdomnamespacepointer.getNamespaceURI();
        // Assert
        assertEquals(namespaceURI, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() {
        prefix = "prefix";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        // Arrange
        when(parent.asPath()).thenReturn("parent/path");
        // Act
        String result = jdomnamespacepointer.asPath();
        // Assert
        assertEquals("parent/path/namespace::prefix", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_NullParent_prON0() {
        JDOMNamespacePointer jdom = new JDOMNamespacePointer(null, "prefix");
        String result = jdom.asPath();
        assert result.equals("namespace::prefix");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_EmptyPrefix_mxUE2() {
        JDOMNamespacePointer jdom = new JDOMNamespacePointer(null, "");
        String result = jdom.asPath();
        assert result.equals("namespace::");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Arrange
        int expectedLength = 1;
        // Act
        int actualLength = jdomnamespacepointer.getLength();
        // Assert
        assertEquals(expectedLength, actualLength);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid1() throws Exception{
        MockitoAnnotations.initMocks(this);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Arrange
        Mockito.when(parent.getBaseValue()).thenReturn("expectedValue");
        // Act
        Object result = jdomnamespacepointer.getBaseValue();
        // Assert
    assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_fid1() {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Arrange
        when(mockJDOMNamespacePointer.isLeaf()).thenReturn(true);
        // Act
        boolean result = jdomnamespacepointer.isLeaf();
        // Assert
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_wnuu0_1() throws Exception {
    prefix = "testPrefix";
    JDOMNamespacePointer jdomnamespacepointer = Mockito.mock(JDOMNamespacePointer.class);
    JDOMNamespacePointer jdomnamespacepointer1 = new JDOMNamespacePointer(null, prefix);
    JDOMNamespacePointer jdomnamespacepointer2 = new JDOMNamespacePointer(null, prefix);
    jdomnamespacepointer1 = new JDOMNamespacePointer(null, "otherPrefix");
    jdomnamespacepointer1 = new JDOMNamespacePointer(null, prefix);
    jdomnamespacepointer2 = new JDOMNamespacePointer(null, prefix);
    jdomnamespacepointer1 = new JDOMNamespacePointer(null, "otherPrefix");
    jdomnamespacepointer2 = new JDOMNamespacePointer(null, "otherPrefix");
    assertEquals(jdomnamespacepointer1, jdomnamespacepointer2);}
}