/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_InitialContext_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionNegativePosition_gqDm1() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.setPosition(-1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionZeroPosition_rQSE2() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.setPosition(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionOnePosition_MRWv3() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.setPosition(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionValidPosition_FQhj6() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.setPosition(2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_senX0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.nextNode();
        assert(result == true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_AJla0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        Object result = initialContext.getValue();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetNotStarted_vbtc0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        assertFalse(initialContext.nextSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetAlreadyStarted_kaVc1() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        initialContext.nextSet();
        assertFalse(initialContext.nextSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetStarted_oICS2() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        assertTrue(initialContext.nextSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetMultipleCalls_WMmq3() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        assertTrue(initialContext.nextSet());
        assertTrue(initialContext.nextSet());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPositionNullPosition_QmaJ0_NHQc0() {
    InitialContext initialContext = new InitialContext(null);
    boolean result = initialContext.nextSet();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPositionGreaterThanNodePointerLength_swIT4_ghjZ0() {
    InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
    boolean result = initialContext.nextSet();
}
}