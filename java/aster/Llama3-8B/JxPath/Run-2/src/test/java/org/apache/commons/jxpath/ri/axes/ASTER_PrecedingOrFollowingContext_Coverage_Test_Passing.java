/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PrecedingOrFollowingContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_currentNodePointerNotNull_yGEs8_Afph0() {
    NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(0));
    SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(0));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(parentContext, new NodeTypeTest(0), false);
    boolean result = context.nextNode();
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_nodeTestTrue_XkJh10_ipgf0() {
    SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
    NamespaceContext parentContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(parentContext, new NodeTypeTest(1), false);
    boolean result = context.nextNode();
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_nodeTestFalse_UYeC11_tbTs0() {
    SelfContext selfContext = new SelfContext(null, new NodeTypeTest(2));
    NamespaceContext parentContext = new NamespaceContext(selfContext, new NodeTypeTest(2));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(parentContext, new NodeTypeTest(2), false);
    boolean result = context.nextNode();
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_setPositionTrue_fTyk12_nxoS0() {
    NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
    SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(parentContext, new NodeTypeTest(1), false);
    context.setPosition(1);
    boolean result = context.nextNode();
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_setPositionFalse_LPPY13_TwoB0() {
    NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(0));
    SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(0));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(parentContext, new NodeTypeTest(0), false);
    context.setPosition(0);
    boolean result = context.nextNode();
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_stackPopFalse_oHVb15_eIrz0() {
    NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(0));
    SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(0));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(selfContext, new NodeTypeTest(0), false);
    boolean result = context.nextNode();
    assertEquals(false, result);
}
}