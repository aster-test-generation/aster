/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_VariablePointer_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueUndefinedVariable_aEJL0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setValue("value");
        assertEquals("value", variablePointer.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueUndefinedVariableWithNullValue_xtoT3() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setValue(null);
        assertEquals(null, variablePointer.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithValidIndex_sqqX0_2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(0);
        assertNull(variablePointer.getValuePointer());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithNegativeIndex_UpKK2_2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(-1);
        assertNull(variablePointer.getValuePointer());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_ijqt0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        NodeIterator result = variablePointer.namespaceIterator();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathTrue_VXTf0_HyfR0() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    boolean actual = true;
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createPath(context, "value");
    assertEquals(variablePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathFalse_smiC1_Oxch1() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    boolean actual = false;
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createPath(context, "value");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathSetValue_hCeB2_Htyl0() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    boolean actual = true;
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createPath(context, "value");
    assertEquals("value", result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValueUndefinedVariable_JPOS0_GhhT0() {
    VariablePointer variablePointer = new VariablePointer(new QName("test"));
    try {
        boolean actual = variablePointer.isActual();
        fail("Expected JXPathException");
    } catch (JXPathException e) {
        assertEquals("Undefined variable: test", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathCreatePath_egqI3_FjRh1() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    boolean actual = true;
    JXPathContext context = JXPathContext.newContext(new Object()); 
    NodePointer result = variablePointer.createPath(context, "value");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithValidIndex_sqqX0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(0);
        assertEquals(0, variablePointer.getIndex());
        assertNull(variablePointer.getValuePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithNegativeIndex_UpKK2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(-1);
        assertEquals(-1, variablePointer.getIndex());
        assertNull(variablePointer.getValuePointer());
    }
}