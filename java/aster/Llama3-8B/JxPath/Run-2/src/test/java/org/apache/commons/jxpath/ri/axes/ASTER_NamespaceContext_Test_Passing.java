/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceContext_Test_Passing {
@Mock
    private SelfContext selfContext;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodeIterator iterator;
private NamespaceContext namespacecontext;
@Mock
    private NodePointer nodePointer;
private NodePointer currentNodePointer;
private NodeTest nodeTest;
private boolean setStarted = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionLessThanCurrentPosition_bePP0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), new NodeTypeTest(0));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
        boolean result = namespaceContext.setPosition(5);
        assert (!result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionEqualToCurrentPosition_Qsuy1() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), new NodeTypeTest(0));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
        namespaceContext.setPosition(0);
        boolean result = namespaceContext.setPosition(0);
        assert (result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionFailed_racw3() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), new NodeTypeTest(0));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
        namespaceContext.setPosition(5);
        boolean result = namespaceContext.setPosition(15);
        assert (!result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_setStartedFalse_nodeTestNotInstanceOfNodeNameTest_KOoM0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        boolean result = namespaceContext.nextNode();
        assert (!result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_setStartedTrue_nodeTestNotInstanceOfNodeNameTest_aeOi2_opOZ0() {
    SelfContext selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
    namespaceContext.nextNode(); // Set setStarted to true inside nextNode method
    boolean result = namespaceContext.nextNode();
    assert (!result);
}
}