/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SimplePathInterpreter_Test_Passing {
@Mock
    private EvalContext evalContext;
@Mock
    private NodePointer parent;
@Mock
    private Step[] steps;
@Mock
    private NodePointer root;
private SimplePathInterpreter simplePathInterpreter;
@Mock
    private NodePointer nodePointer;
@Mock
    private Expression[] predicates;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcreateNullPointer_JJoj0() throws Exception {
    SimplePathInterpreter simplepathinterpreter = new SimplePathInterpreter();
    when(steps[0].getAxis()).thenReturn(Compiler.AXIS_CHILD);
    when(steps[0].getNodeTest()).thenReturn(new NodeNameTest(new QName("nodeName")));
    when(steps[0].getPredicates()).thenReturn(new Expression[0]);
    NodePointer result = simplepathinterpreter.interpretSimpleExpressionPath(evalContext, parent, new Expression[0], new Step[0]);
    assertEquals(parent, result);
}
}