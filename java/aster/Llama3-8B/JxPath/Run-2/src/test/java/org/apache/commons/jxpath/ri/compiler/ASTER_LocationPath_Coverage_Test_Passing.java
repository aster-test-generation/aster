/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocationPath_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NullSteps_uesK0() {
        LocationPath locationPath = new LocationPath(true, null);
        String result = locationPath.toString();
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_EmptySteps_acWJ1() {
        LocationPath locationPath = new LocationPath(true, new Step[0]);
        String result = locationPath.toString();
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_EmptySteps_RelativePath_HlMO7() {
        LocationPath locationPath = new LocationPath(false, new Step[0]);
        String result = locationPath.toString();
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NullSteps_RelativePath_ZuRA8() {
        LocationPath locationPath = new LocationPath(false, null);
        String result = locationPath.toString();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_fABp0_1() {
        LocationPath locationPath = new LocationPath(true, new Step[0]);
        locationPath = new LocationPath(false, new Step[0]);
        assertFalse(locationPath.computeContextDependent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_fABp0_2() {
        LocationPath locationPath = new LocationPath(true, new Step[0]);
        locationPath = new LocationPath(false, new Step[0]);
        assertTrue(locationPath.computeContextDependent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_fABp0() {
        LocationPath locationPath = new LocationPath(true, new Step[0]);
        assertFalse(locationPath.computeContextDependent());
        locationPath = new LocationPath(false, new Step[0]);
        assertTrue(locationPath.computeContextDependent());
    }
}