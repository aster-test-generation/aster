/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.KeyManager;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ExceptionHandler;
import org.apache.commons.jxpath.Functions;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.NodeSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Passing {
@Mock
    private QName name;
private NullPointer nullpointer;
@Mock
    private JXPathContext jXPathContext;
@Mock
    private Object value;
@Mock
    private NodePointer nodePointer;
@Mock
    private AbstractFactory abstractFactory;
@Mock
    private Locale locale;
@Mock
    private QName qName;
@Mock
    private Variables variables;
@Mock
    private Pointer pointer;
@Mock
    private DOMNodePointer parent;
@Mock
    private NodeSet nodeSet;
@Mock
    private KeyManager keyManager;
@Mock
    private ExceptionHandler exceptionHandler;
@Mock
    private Functions functions;
@Mock
    private NamespaceResolver namespaceResolver;
private String id;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qname;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNullPointerSameObject_xOWw0() {
    NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
    boolean result = nullPointer.equals(nullPointer);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNullPointerDifferentObject_XWMP1() {
    NullPointer nullPointer1 = new NullPointer(new Locale("en", "US"), "id");
    NullPointer nullPointer2 = new NullPointer(new Locale("en", "US"), "id");
    boolean result = nullPointer1.equals(nullPointer2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNullPointerNullObject_rCUU2() {
    NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
    boolean result = nullPointer.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception{
        MockitoAnnotations.initMocks(this);
        nullpointer = Mockito.mock(NullPointer.class);
        // Arrange
        Mockito.when(nullpointer.isCollection()).thenReturn(true);
        // Act
        boolean result = nullpointer.isCollection();
        // Assert
        Mockito.verify(nullpointer, Mockito.times(1)).isCollection();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNullName_jDEw0() {
    NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
    int result = nullPointer.hashCode();
    Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNotNullName_rjPO1() {
    QName name = new QName("prefix", "localName");
    NullPointer nullPointer = new NullPointer(name, new Locale("en", "US"));
    int result = nullPointer.hashCode();
    Assertions.assertEquals(name.hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName3_GsOf2() {
        NullPointer nullPointer = new NullPointer(new QName("name"), new Locale("en", "US"));
        QName result = nullPointer.getName();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_1() throws Exception {
        nullpointer = new NullPointer(locale, "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        Assertions.assertNotNull(propertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_2() throws Exception {
        nullpointer = new NullPointer(locale, "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        Assertions.assertTrue(propertyPointer instanceof NullPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_bWQH0() {
        Locale locale = new Locale("en", "US");
        String id = "testId";
        NullPointer nullPointer = new NullPointer(locale, id);
        PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
        assert propertyPointer instanceof NullPropertyPointer;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer3_CwHP2() {
        QName name = new QName("testQualifiedName");
        Locale locale = new Locale("en", "US");
        NullPointer nullPointer = new NullPointer(name, locale);
        PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
        assert propertyPointer instanceof NullPropertyPointer;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() {
        id = "testId";
        nullpointer = new NullPointer(locale, id);
        Mockito.when(parent.asPath()).thenReturn("parentPath");
        Mockito.when(locale.toString()).thenReturn("localeString");
        Mockito.when(name.toString()).thenReturn("nameString");
        Mockito.when(domNodePointer.asPath()).thenReturn("domNodePath");
        String result = nullpointer.asPath();
        assertEquals("id(testId)", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithId_hmZN0() {
    NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
    String result = nullPointer.asPath();
    Assertions.assertEquals("id(id)", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception{
        nullpointer = new NullPointer(locale, "id");
        // Arrange
        int expectedLength = 0;
        // Act
        int actualLength = nullpointer.getLength();
        // Assert
        assertEquals(expectedLength, actualLength);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_IgdM1() {
        Locale locale = new Locale("en", "US");
        QName qName = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(locale, "id");
        int length = nullPointer.getLength();
        assert length == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_ZuZU0() {
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        assertFalse(nullPointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() {
        nullpointer = Mockito.mock(NullPointer.class);
        Mockito.when(nullpointer.isLeaf()).thenReturn(true);
        boolean result = nullpointer.isLeaf();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_uxhQ0() {
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        boolean result = nullPointer.isLeaf();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollection_ZaFH1_SuWo0() {
    Locale locale = new Locale("en", "US");
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
    NullPointer nullPointer = new NullPointer(variablePointer, qName);
    boolean result = nullPointer.isLeaf();
    assert (result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithoutId_MpHy1_Gyzp0() {
    QName qName = new QName("name");
    NullPointer nullPointer = new NullPointer(null, qName);
    String result = nullPointer.asPath();
    Assertions.assertEquals("null()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        nullpointer = new NullPointer(locale, "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        Assertions.assertNotNull(propertyPointer);
        Assertions.assertTrue(propertyPointer instanceof NullPropertyPointer);
    }
}