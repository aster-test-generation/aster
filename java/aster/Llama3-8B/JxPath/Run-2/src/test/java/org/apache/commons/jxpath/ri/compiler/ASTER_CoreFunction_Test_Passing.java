/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import java.util.Collection;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreFunction_Test_Passing {
@Mock
    EvalContext evalContext;
@Mock
    JXPathContext jxpathContext;
@Mock
    NodePointer nodePointer;
private int functionCode;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private SelfContext selfContext;
@InjectMocks
    private CoreFunction corefunction;
@Mock
    Expression expression;
@Mock
    private Expression expression1;
@Mock
    private Expression expression2;
@Mock
    private EvalContext nextEvalContext;
private CoreFunction coreFunction;
@Mock
    private Expression[] args;
@Mock
    private Collection collection;
@Mock
    private InfoSetUtil infoSetUtil;
@Mock
    private BasicNodeSet basicNodeSet;
@Mock
    private NodeSetContext nodeSetContext;
private static Double ZERO = Double.valueOf(0);
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionLast() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_LAST;
        when(evalContext.nextNode()).thenReturn(true);
        when(evalContext.next()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionPosition() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_POSITION;
        when(evalContext.getPosition()).thenReturn(1);
        assertEquals(1, corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionCount() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_COUNT;
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.nextNode()).thenReturn(true);
        assertEquals(1, corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionID() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_ID;
        when(evalContext.getValue()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionLocalName() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_LOCAL_NAME;
        when(evalContext.getValue()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionNamespaceURI() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_NAMESPACE_URI;
        when(evalContext.getValue()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionName() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_NAME;
        when(evalContext.getValue()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionString() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_STRING;
        when(evalContext.getValue()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionConcat() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_CONCAT;
        when(evalContext.getValue()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionStartsWith() throws Exception{
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_STARTS_WITH;
        when(evalContext.getValue()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionSubstringBefore() throws Exception{
        corefunction = new CoreFunction(1, new Expression[]{expression1, expression2});
        // Arrange
        when(expression1.computeValue(evalContext)).thenReturn("HelloWorld");
        when(expression2.computeValue(evalContext)).thenReturn("World");
        // Act
        Object result = corefunction.functionSubstringBefore(evalContext);
        // Assert
        assertEquals("Hello", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionFalse() throws Exception {
        corefunction = new CoreFunction(0, new Expression[0]);
        // Set up the mock EvalContext
        when(evalContext.getPosition()).thenReturn(0);
        when(evalContext.hasNext()).thenReturn(false);
        // Call the functionFalse method
        Object result = corefunction.functionFalse(evalContext);
        // Assert the result
        assertEquals(Boolean.FALSE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionPosition() throws Exception {
        corefunction = new CoreFunction(0, new Expression[0]);
        // Arrange
        when(evalContext.getCurrentPosition()).thenReturn(10);
        // Act
        Object result = corefunction.functionPosition(evalContext);
        // Assert
        assertEquals(Integer.valueOf(10), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_qtvu0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assert functionName.equals("last");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionPosition_zqjl1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assert functionName.equals("position");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCount_rsnf2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assert functionName.equals("count");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionId_tmyw3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assert functionName.equals("id");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionUnknown_IPVu4() {
        CoreFunction coreFunction = new CoreFunction(100, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assert functionName.equals("unknownFunction100()");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLast() throws Exception {
        coreFunction = new CoreFunction(1, new Expression[0]);
        MockitoAnnotations.initMocks(this);
        // Set up the mock EvalContext
        Mockito.when(evalContext.getCurrentPosition()).thenReturn(0);
        Mockito.when(evalContext.nextNode()).thenReturn(true).thenReturn(false);
        Mockito.when(evalContext.getPosition()).thenReturn(1);
        // Call the functionLast method
        Object result = coreFunction.functionLast(evalContext);
        // Assert the result
        assertEquals(1.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArgumentCountWithNullArgs_bDaM0() {
    CoreFunction coreFunction = new CoreFunction(1, null);
    int argumentCount = coreFunction.getArgumentCount();
    assert argumentCount == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionStartsWith() throws Exception {
        corefunction = new CoreFunction(1, new Expression[]{expression1, expression2});
        // Arrange
        when(expression1.computeValue(evalContext)).thenReturn("Hello");
        when(expression2.computeValue(evalContext)).thenReturn("HelloWorld");
        // Act
        Object result = corefunction.functionStartsWith(evalContext);
        // Assert
        assertEquals(Boolean.TRUE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionNamespaceURI_1() throws Exception{
        coreFunction = new CoreFunction(1, new Expression[0]);
        when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
        // Test when getArgumentCount() == 0
        when(evalContext.hasNext()).thenReturn(true);
        when(nodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        // Test when getArgumentCount() > 0
        when(evalContext.hasNext()).thenReturn(false);
        when(evalContext.next()).thenReturn(nodePointer);
        when(nodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", coreFunction.functionNamespaceURI(evalContext));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionConcat() throws Exception{
        MockitoAnnotations.initMocks(this);
        CoreFunction corefunction = new CoreFunction(1, args);
        // Given
        when(evalContext.getPosition()).thenReturn(1);
        when(evalContext.getJXPathContext()).thenReturn(null);
        when(args[0].compute(evalContext)).thenReturn("Hello");
        when(args[1].compute(evalContext)).thenReturn("World");
        // When
        Object result = corefunction.functionConcat(evalContext);
        // Then
        assertEquals("HelloWorld", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionCount() throws Exception{
        corefunction = new CoreFunction(1, new Expression[]{expression});
        // Set up the mock objects
        when(expression.compute(evalContext)).thenReturn(nodePointer);
        when(nodePointer.getValue()).thenReturn(evalContext);
        when(evalContext.hasNext()).thenReturn(true).thenReturn(false);
        // Call the functionCount method
        Object result = corefunction.functionCount(evalContext);
        // Assert the result
        assertEquals(1.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionEndsWith() throws Exception{
        corefunction = new CoreFunction(1, new Expression[]{expression1, expression2});
        // Arrange
        when(expression1.computeValue(evalContext)).thenReturn("Hello");
        when(expression2.computeValue(evalContext)).thenReturn("lo");
        // Act
        Object result = corefunction.functionEndsWith(evalContext);
        // Assert
        assertEquals(Boolean.TRUE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArguments_CvcQ0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        String result = coreFunction.toString();
        assert result.equals("getFunctionName()");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArguments_XiaA3() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        String result = coreFunction.toString();
        assert result.equals("getFunctionName()");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionKey() throws Exception{
        corefunction = new CoreFunction(1, new Expression[2]);
        // Arrange
        when(evalContext.getJXPathContext()).thenReturn(jxpathContext);
        when(jxpathContext.getNodeSetByKey("key", "value")).thenReturn(basicNodeSet);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.next()).thenReturn(nodePointer);
        when(nodePointer.getValue()).thenReturn("value");
        // Act
        Object result = corefunction.functionKey(evalContext);
        // Assert
        verify(evalContext, times(1)).getJXPathContext();
        verify(jxpathContext, times(1)).getNodeSetByKey("key", "value");
        verify(evalContext, times(1)).hasNext();
        verify(evalContext, times(1)).next();
        verify(nodePointer, times(1)).getValue();
        assertEquals(nodeSetContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionLocalName_withoutArg() throws Exception{
        MockitoAnnotations.initMocks(this);
        when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
        assertEquals("", corefunction.functionLocalName(evalContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionTrue() {
        corefunction = new CoreFunction(1, new Expression[0]);
        // Arrange
        when(evalContext.getPosition()).thenReturn(0);
        when(evalContext.hasNext()).thenReturn(false);
        // Act
        Object result = corefunction.functionTrue(evalContext);
        // Assert
        assertEquals(Boolean.TRUE, result);
        verify(evalContext, times(1)).getPosition();
        verify(evalContext, times(1)).hasNext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionNull() throws Exception {
        corefunction = new CoreFunction(0, new Expression[0]);
        // Set up the mock EvalContext
        when(evalContext.getPosition()).thenReturn(0);
        when(evalContext.hasNext()).thenReturn(false);
        // Call the functionNull method
        Object result = corefunction.functionNull(evalContext);
        // Verify the result
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionSumNullArgument_OsJu0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        Object result = coreFunction.functionSum(null);
        assert result.equals(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionSubstringAfter() throws Exception {
        corefunction = new CoreFunction(1, new Expression[]{expression1, expression2});
        // Arrange
        when(expression1.computeValue(evalContext)).thenReturn("HelloWorld");
        when(expression2.computeValue(evalContext)).thenReturn("World");
        // Act
        Object result = corefunction.functionSubstringAfter(evalContext);
        // Assert
        assertEquals("Hello", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentSuperTrue_yvLS0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        assertTrue(coreFunction.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentFunctionLast_sYYN1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[0]);
        assertTrue(coreFunction.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentFunctionBoolean_ZHDs2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, new Expression[0]);
        assertTrue(coreFunction.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentFunctionCount_pjTQ4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, new Expression[0]);
        assertFalse(coreFunction.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentFunctionDefault_XzEO5() {
        CoreFunction coreFunction = new CoreFunction(100, new Expression[0]);
        assertFalse(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Given
        when(evalContext.getPosition()).thenReturn(1);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.nextNode()).thenReturn(true);
        // When
        Object result = corefunction.compute(evalContext);
        // Then
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_NWMW1() {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValueFunctionLang_PLyH0() throws Exception{
    MockitoAnnotations.initMocks(this);
    functionCode = Compiler.FUNCTION_LANG;
    JXPathContext jXPathContext = Mockito.mock(JXPathContext.class);
    when(evalContext.getJXPathContext()).thenReturn(jXPathContext);
    assertEquals(jXPathContext, corefunction.computeValue(evalContext));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBefore_OALV0_fXXb0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
    EvalContext evalContext = Mockito.mock(EvalContext.class);
    Object result = coreFunction.functionSubstring(evalContext);
    Assertions.assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testfunctionLang_QDGi0() throws Exception{
    MockitoAnnotations.initMocks(this);
    CoreFunction corefunction = new CoreFunction(1, new Expression[0]);
    when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
    when(nodePointer.isLanguage("someLanguage")).thenReturn(true);
    Object result = corefunction.functionSubstring(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionCount_Integer_EqRD4_TdTr0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext context = mock(EvalContext.class);
    when(context.getPosition()).thenReturn(0);
    Expression arg1 = mock(Expression.class);
    when(arg1.computeValue(context)).thenReturn("5");
    assertEquals("", coreFunction.functionSubstring(context));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testfunctionSubstring_gOop0() throws Exception{
    corefunction = new CoreFunction(1, new Expression[]{expression1, expression2});
    when(expression1.computeValue(evalContext)).thenReturn("Hello");
    when(expression2.computeValue(evalContext)).thenReturn("2");
    when(infoSetUtil.stringValue(any())).thenReturn("Hello");
    when(infoSetUtil.doubleValue(any())).thenReturn(2.0);
    Object result = corefunction.functionSubstring(evalContext);
    assertEquals("ll", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionCeilingWithInfiniteInput_Sswf2_oCWS0() {
    CoreFunction coreFunction = new CoreFunction(1, new Expression[1]);
    EvalContext evalContext = mock(EvalContext.class);
    Object result = coreFunction.functionSubstring(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testfunctionStringLength_mDJy0() throws Exception{
    corefunction = new CoreFunction(1, new Expression[0]);
    MockitoAnnotations.initMocks(this);
    Mockito.when(corefunction.getArgumentCount()).thenReturn(0);
    Mockito.when(evalContext.getCurrentNodePointer()).thenReturn((NodePointer) Mockito.mock(NodePointer.class));
    Object result = corefunction.functionSubstring(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringLengthWithNoArgument_RXgh0_VCdl1() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext evalContext = mock(EvalContext.class);
    Object result = coreFunction.functionSubstring(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNull_FrHK0_xSyf0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext context = mock(EvalContext.class);
    Object result = coreFunction.functionSubstring(context);
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSumNonEvalContextArgument_nHGD1_Vyqv0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    Object result = coreFunction.functionSubstring(null);
    assert result instanceof JXPathException;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testfunctionString_nYuu0() throws Exception {
    MockitoAnnotations.initMocks(this);
    CoreFunction corefunction = new CoreFunction(1, new Expression[0]);
    EvalContext evalContext = Mockito.mock(EvalContext.class);
    NodePointer nodePointer = Mockito.mock(NodePointer.class);
    when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.toString()).thenReturn("someNodePointer");
    InfoSetUtil infoSetUtil = Mockito.mock(InfoSetUtil.class);
    when(infoSetUtil.stringValue(anyString())).thenReturn("someStringValue");
    Object result = corefunction.functionSubstring(evalContext);
    assertEquals("someStringValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringWithNoArgument_tpdp0_NlfE0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext context = mock(EvalContext.class);
    Object result = coreFunction.functionString(context);
    assertEquals("Expected result", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringWithOneArgument_bsks1_uYQr0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    EvalContext context = mock(EvalContext.class);
    when(context.getPosition()).thenReturn(0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("Expected result", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependentFunctionFormatNumber_MbGF3_STVQ0() {
    CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, new Expression[0]);
    assertTrue(coreFunction.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionCode_HvgI0_QWIS0() {
    CoreFunction coreFunction = new CoreFunction(10, new Expression[0]);
    int functionCode = coreFunction.getFunctionCode();
    org.junit.Assert.assertEquals(10, functionCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionFloorValidInput_KHaE0_NfjW1() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    EvalContext evalContext = mock(EvalContext.class);
    when(evalContext.getPosition()).thenReturn(0);
    Object result = coreFunction.functionSubstring(evalContext);
    Assertions.assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionContains_WFdJ0_MXlV1() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
    EvalContext evalContext = mock(EvalContext.class);
    Object result = coreFunction.functionSubstring(evalContext);
    assert result instanceof String;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testfunctionNumber_KEBJ0() throws Exception{
    MockitoAnnotations.initMocks(this);
    CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
    when(evalContext.getCurrentNodePointer()).thenReturn(Mockito.mock(NodePointer.class));
    when(infoSetUtil.number(Mockito.mock(NodePointer.class))).thenReturn(1);
    Object result = coreFunction.functionNumber(evalContext);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNumberWithOneArgument_wLVq1_GFbN0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext context = mock(EvalContext.class);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionNamespaceURI() throws Exception{
        coreFunction = new CoreFunction(1, new Expression[0]);
        when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
        // Test when getArgumentCount() == 0
        when(evalContext.hasNext()).thenReturn(true);
        when(nodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", coreFunction.functionNamespaceURI(evalContext));
        // Test when getArgumentCount() > 0
        when(evalContext.hasNext()).thenReturn(false);
        when(evalContext.next()).thenReturn(nodePointer);
        when(nodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", coreFunction.functionNamespaceURI(evalContext));
    }
}