/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.Enumeration;
import java.util.HashSet;
import javax.servlet.ServletRequest;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Enumeration;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServletRequestHandler_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNullServletRequestAndContext_KvYz0() {
        ServletRequestHandler servletRequestHandler = new ServletRequestHandler();
        Object bean = null;
        String property = "testProperty";
        assertNull(servletRequestHandler.getProperty(bean, property));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNullServletRequestAndContextGetServletRequest_qnlf9() {
        ServletRequestHandler servletRequestHandler = new ServletRequestHandler();
        Object bean = new Object();
        String property = "testProperty";
        assertNull(servletRequestHandler.getProperty(bean, property));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSuperCollectPropertyNames_hYig0() {
        ServletRequestHandler servletRequestHandler = new ServletRequestHandler();
        HashSet set = new HashSet();
        Object bean = new Object();
        servletRequestHandler.collectPropertyNames(set, bean);
        verify(servletRequestHandler, times(1)).collectPropertyNames(set, bean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testServletRequestAttributeNamesNextElement_aSde5_sxxq0() {
    ServletRequestHandler servletRequestHandler = new ServletRequestHandler();
    HashSet set = new HashSet();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean instanceof ServletRequestAndContext).thenReturn(true);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration e = mock(Enumeration.class);
    when(servletRequest.getAttributeNames()).thenReturn(e);
    when(e.hasMoreElements()).thenReturn(true);
    when(e.nextElement()).thenReturn("attribute");
    servletRequestHandler.collectPropertyNames(set, bean);
    verify(set, times(1)).add("attribute");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testServletRequestParameterNamesNextElement_XHEh8_teHL0() {
    ServletRequestHandler servletRequestHandler = new ServletRequestHandler();
    HashSet set = new HashSet();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean instanceof ServletRequestAndContext).thenReturn(true);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration e = mock(Enumeration.class);
    when(servletRequest.getParameterNames()).thenReturn(e);
    when(e.hasMoreElements()).thenReturn(true);
    when(e.nextElement()).thenReturn("parameter");
    servletRequestHandler.collectPropertyNames(set, bean);
    verify(set, times(1)).add("parameter");
}
}