/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.Attribute;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.AbstractFactory;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Passing {
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
@Mock
    private Element element;
@Mock
    private Attribute attribute;
@Mock
    private List list;
@Mock
    private Object node1;
@Mock
    private Object node2;
private JDOMNodePointer jdomnodepointer;
@Mock
    private Text text;
@Mock
    private ProcessingInstruction pi;
@Mock
    private Comment comment;
private Object node;
@Mock
    private NodeTest nodeTest;
private JXPathContext jxpathcontext;
private AbstractFactory abstractFactory;
private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
private JXPathContext parentContext;
private Object contextBean;
private NodePointer nodePointer;
@Mock
    private QName qName;
@Mock
    private JDOMAttributeIterator attributeIterator;
@Mock
    private JDOMNamespaceIterator jdomNamespaceIterator;
@Mock
    private Document document;
private QName qname;
@Mock
    private NodeIterator nodeIterator;
@Mock
    private Locale locale;
@Mock
    private JDOMNamespacePointer jdomNamespacePointer;
@Mock
    private JXPathContext jxpathContext;
@Mock
    private DOMNodePointer parent;
@Mock
    private JDOMNodePointer jdomnodepointerParent;
@Mock
    private Namespace namespace;
@Mock
    private NamespaceResolver namespaceResolver;
    private String id;
    private NamespaceResolver localNamespaceResolver;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception{
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(element.getContent()).thenReturn(list);
        when(list.get(0)).thenReturn(node1);
        when(list.get(1)).thenReturn(node2);
        when(element.getAttributes()).thenReturn(list);
        when(list.get(0)).thenReturn(attribute);
        when(nodePointer1.getBaseValue()).thenReturn(node1);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        assertEquals(0, jdomnodepointer.compareChildNodePointers(nodePointer1, nodePointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueText() throws Exception {
        node = text;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        jdomnodepointer.setValue("Hello");
        verify(text).setText("Hello");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueText_DVuU0() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
    jdn.setValue("New Text");
    assertEquals("New Text", ((Text) jdn.getNode()).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueString_LAoX11() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text(""), Locale.US, "id");
        jdn.setValue("Hello");
        assertEquals("Hello", ((Text) jdn.getNode()).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildNullContext_LnuS3() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
    QName qname = new QName("test");
    try {
        jdn.createChild(null, qname, 1);
        Assertions.fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_mWPl0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = jdn.isCollection();
        assert (!result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Arrange
        // Act
        Object immediateNode = jdomnodepointer.getImmediateNode();
        // Assert
        assertEquals(node, immediateNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_tXVg0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName qname = new QName("prefix", "localName");
        NodeIterator result = jdn.attributeIterator(qname);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator2_FBVO1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US, "id");
        QName qname = new QName("prefix", "localName");
        NodeIterator result = jdn.attributeIterator(qname);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator4_akYL3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName qname = new QName("qualifiedName");
        NodeIterator result = jdn.attributeIterator(qname);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_Element_LWJp0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("test"), Locale.US);
    assertNull(jdn.getNamespaceURI());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_TextNode_MLUD1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("test"), Locale.US);
        assertEquals(null, jdn.getNamespaceURI());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Element() throws Exception{
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(element.getNamespacePrefix()).thenReturn("prefix");
        assertEquals("prefix", JDOMNodePointer.getPrefix(node));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Attribute() throws Exception{
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(attribute.getNamespacePrefix()).thenReturn("prefix");
        node = attribute;
        assertEquals("prefix", JDOMNodePointer.getPrefix(node));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Null() throws Exception{
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        node = null;
        assertNull(JDOMNodePointer.getPrefix(node));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixNullElement_wQMO2() {
    Element element = null;
    String prefix = JDOMNodePointer.getPrefix(element);
    Assertions.assertNull(prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixNullAttribute_ZErw3() {
    Attribute attribute = null;
    String prefix = JDOMNodePointer.getPrefix(attribute);
    Assertions.assertNull(prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixNonElementNonAttribute_LbMQ6() {
    Object object = new Object();
    String prefix = JDOMNodePointer.getPrefix(object);
    Assertions.assertNull(prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception{
        MockitoAnnotations.initMocks(this);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Act
        int length = jdomnodepointer.getLength();
        // Assert
        Assertions.assertEquals(1, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Act and Assert
        assertTrue(jdomnodepointer.equals(jdomnodepointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullObject_ReturnsFalse() {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Act and Assert
        assertFalse(jdomnodepointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObject_ReturnsFalse() {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Act and Assert
        assertFalse(jdomnodepointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_ReturnsTrue() {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Act and Assert
        assertTrue(jdomnodepointer.equals(new JDOMNodePointer(node, Locale.US)));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_ReturnsFalse() {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Act and Assert
        assertFalse(jdomnodepointer.equals(new JDOMNodePointer(new Object(), Locale.US)));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_tvfK0() {
    JDOMNodePointer obj = new JDOMNodePointer(new Object(), Locale.US);
    assertEquals(true, obj.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_Tsow1() {
    JDOMNodePointer obj = new JDOMNodePointer(new Object(), Locale.US);
    Object obj2 = new Object();
    assertEquals(false, obj.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeNullTest_ODIh0() {
    boolean result = JDOMNodePointer.testNode(null, null, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Element_sqXV0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        Object result = jdn.getValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Comment_akOG1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Comment("comment"), Locale.US);
        Object result = jdn.getValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Text_Hmnx2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("text"), Locale.US);
        Object result = jdn.getValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ProcessingInstruction_pcOH3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new ProcessingInstruction("instruction", "data"), Locale.US);
        Object result = jdn.getValue();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Element() {
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        String localName = JDOMNodePointer.getLocalName(node);
    assertNull(localName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Attribute() {
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        node = attribute;
        String localName = JDOMNodePointer.getLocalName(node);
    assertNull(localName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Null() {
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        node = null;
        String localName = JDOMNodePointer.getLocalName(node);
        assertNull(localName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalNameElement_RmxE0() {
    Element element = new Element("test");
    assertEquals("test", JDOMNodePointer.getLocalName(element));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalNameNull_xmTd2() {
    Object node = null;
    assertNull(JDOMNodePointer.getLocalName(node));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLanguage_exqk0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en"));
        String language = jdn.getLanguage();
    assertNull(language);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_IdNotNull_ovQk0() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US, "id");
    assertEquals("id('id')", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_IdNull_wecQ1() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
    assertEquals("", jdn.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIXml_Qkbv0() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Document(), Locale.US);
    String result = jdn.getNamespaceURI("xml");
    assertEquals(Namespace.XML_NAMESPACE.getURI(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_GrKn0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        Object result = jdn.getBaseValue();
        assertEquals(jdn.getBaseValue(), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_ElementWithAttribute_Mgdv0() {
    Element e = new Element("root", "http://example.com");
    e.setAttribute("attr", "value");
    String attr = JDOMNodePointer.findEnclosingAttribute(e, "attr", Namespace.getNamespace("http://example.com"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_ElementWithoutAttribute_cAGD1() {
    Element e = new Element("root", "http://example.com");
    String attr = JDOMNodePointer.findEnclosingAttribute(e, "attr", Namespace.getNamespace("http://example.com"));
    Assertions.assertNull(attr);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_TextNode_Fpsl2() {
    Text text = new Text("text");
    String attr = JDOMNodePointer.findEnclosingAttribute(text, "attr", Namespace.getNamespace("http://example.com"));
    Assertions.assertNull(attr);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_NullNode_ZQOL3() {
    String attr = JDOMNodePointer.findEnclosingAttribute(null, "attr", Namespace.getNamespace("http://example.com"));
    Assertions.assertNull(attr);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_hZjy0() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
    NamespaceResolver namespaceResolver = jdn.getNamespaceResolver();
    assertNotNull(namespaceResolver);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolverNull_jzbw1() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
    jdn.getNamespaceResolver();
    NamespaceResolver namespaceResolver = jdn.getNamespaceResolver();
    assertNotNull(namespaceResolver);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_Null_SORL4_cNNP0() {
    JDOMNodePointer jdn = new JDOMNodePointer(null, Locale.US, null);
    QName result = jdn.getName();
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentNode_ufRi2_IaIy0() {
    JDOMNodePointer obj = new JDOMNodePointer(new Object(), Locale.US);
    JDOMNodePointer obj2 = new JDOMNodePointer(new Object(), Locale.US);
    assertEquals(false, obj.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeNullTestName_patZ2_VovH0() {
    boolean result = JDOMNodePointer.testNode(null, "test", null);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_eONL1_KdTZ0() {
    JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
    NodePointer result = jdn.namespacePointer("prefix");
    assert result instanceof JDOMNamespacePointer;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURINodeNotDocument_VLyj5_SlbC0() {
    Element jdn = new Element("root");
    JDOMNodePointer jdnPointer = new JDOMNodePointer(jdn, Locale.US);
    String result = jdnPointer.getNamespaceURI("prefix");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_EmptyNode_JOFa4_ScFk0() {
    String attr = JDOMNodePointer.findEnclosingAttribute(node, "attr", Namespace.getNamespace("http://example.com"));
    Assertions.assertNull(attr);
}
}