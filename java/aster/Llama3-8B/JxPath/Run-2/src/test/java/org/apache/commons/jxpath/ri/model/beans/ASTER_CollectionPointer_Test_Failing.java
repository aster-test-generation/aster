/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Failing {
private NodePointer valuePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIteratorWholeCollection_AJaF0() {
    CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
    NodeIterator result = collectionPointer.attributeIterator(new QName("attributeName"));
    assertEquals(NodeIterator.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_qMvG0() {
        QName name = new QName("test");
        VariablePointer variablePointer = new VariablePointer(name);
        QName result = variablePointer.getName();
        assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_gRWQ0() {
        Locale locale = new Locale("en", "US");
        Object collection = new Object();
        CollectionPointer pointer = new CollectionPointer(collection, locale);
        int length = pointer.getLength();
        assertEquals(0, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParentAndIndex_ASjz1() {
        CollectionPointer collectionPointer = new CollectionPointer(null, 1);
        assertEquals("/.[" + 2 + "]", collectionPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_IRnp0_YmRj0() {
    JXPathContext context = JXPathContext.newContext(null, null);
    CollectionPointer collectionPointer = new CollectionPointer(context, null);
    NodePointer result = collectionPointer.createPath(context);
    assertEquals(NodePointer.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisCollection_RmQV0() throws Exception{
    CollectionPointer collectionpointer = new CollectionPointer(new Object(), Locale.US);
    boolean result = collectionpointer instanceof Collection;
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetImmediateNode_WHOLE_COLLECTION_yLiT0() throws Exception {
    List collection = new ArrayList<>();
    CollectionPointer collectionPointer = new CollectionPointer(collection, Locale.US);
    when(ValueUtils.getValue(collection)).thenReturn("expectedValue");
    Object result = collectionPointer.getImmediateNode();
    assertEquals("expectedValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetImmediateNode_SPECIFIC_INDEX_jJwY0() throws Exception {
    List collection = new ArrayList<>();
    CollectionPointer collectionPointer = new CollectionPointer(collection, Locale.US);
    when(ValueUtils.getValue(collection, 0)).thenReturn("expectedValue");
    Object result = collectionPointer.getImmediateNode();
    assertEquals("expectedValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_QlJq0() throws Exception {
    Object collection = new Object();
    Locale locale = Locale.US;
    int expectedHashCode = System.identityHashCode(collection);
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    assertEquals(expectedHashCode, collectionPointer.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_gFpA0_1() throws Exception {
    Collection collection = Mockito.mock(Collection.class);
    Locale locale = Locale.US;
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    Mockito.when(collectionPointer.equals(collectionPointer)).thenReturn(true);
    Collection collection2 = Mockito.mock(Collection.class);
    Locale locale2 = Locale.US;
    CollectionPointer otherCollectionPointer = new CollectionPointer(collection2, locale2);
    Mockito.when(collectionPointer.equals(otherCollectionPointer)).thenReturn(false);
    Assertions.assertTrue(collectionPointer.equals(collectionPointer));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_gFpA0_2() throws Exception {
    Collection collection = Mockito.mock(Collection.class);
    Locale locale = Locale.US;
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    Mockito.when(collectionPointer.equals(collectionPointer)).thenReturn(true);
    Collection collection2 = Mockito.mock(Collection.class);
    Locale locale2 = Locale.US;
    CollectionPointer otherCollectionPointer = new CollectionPointer(collection2, locale2);
    Mockito.when(collectionPointer.equals(otherCollectionPointer)).thenReturn(false);
    Assertions.assertFalse(collectionPointer.equals(otherCollectionPointer));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_gFpA0_3() throws Exception {
    Collection collection = Mockito.mock(Collection.class);
    Locale locale = Locale.US;
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    Mockito.when(collectionPointer.equals(collectionPointer)).thenReturn(true);
    Collection collection2 = Mockito.mock(Collection.class);
    Locale locale2 = Locale.US;
    CollectionPointer otherCollectionPointer = new CollectionPointer(collection2, locale2);
    Mockito.when(collectionPointer.equals(otherCollectionPointer)).thenReturn(false);
    Assertions.assertFalse(collectionPointer.equals(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParentAndIndex_ASjz1_fid2() {
        CollectionPointer collectionPointer = new CollectionPointer(null, 1);
        assertEquals("/.[2].[" + 2 + "]", collectionPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_gFpA0_1_fid2() throws Exception {
    Collection collection = Mockito.mock(Collection.class);
    Locale locale = Locale.US;
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    Collection collection2 = Mockito.mock(Collection.class);
    Locale locale2 = Locale.US;
    CollectionPointer otherCollectionPointer = new CollectionPointer(collection2, locale2);
    Mockito.when(collectionPointer.equals(otherCollectionPointer)).thenReturn(false);
    Assertions.assertTrue(collectionPointer.equals(collectionPointer));}
}