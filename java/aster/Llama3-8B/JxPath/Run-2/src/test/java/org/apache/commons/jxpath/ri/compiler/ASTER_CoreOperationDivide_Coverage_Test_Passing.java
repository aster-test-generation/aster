/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreOperationDivide_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_NvER0() {
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(new Constant("1"), new Constant("2"));
        assertEquals("div", coreOperationDivide.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_kTSc0() {
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(new Constant("1"), new Constant("2"));
        boolean result = coreOperationDivide.isSymmetric();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_QOBX5() {
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(new Constant("a"), new Constant("b"));
        int result = coreOperationDivide.getPrecedence();
        assertEquals(5, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValue_ZeroDivide_yesI2_axYl0() {
    CoreOperationDivide coreOperationDivide = new CoreOperationDivide(new Constant("10"), new Constant("0"));
    try {
        coreOperationDivide.getPrecedence();
        assertEquals(true, true); // This test will fail because of division by zero
    } catch (ArithmeticException e) {
        assertEquals(true, true);
    }
}
}