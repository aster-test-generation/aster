/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
    private NodePointer valuePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_ContextIsNull_RQRA0() {
    JXPathContext context = null;
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    variablePointer.findVariables(context);
    assertEquals(false, variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_NameOnly_fLEZ0() {
    QName name = new QName("variableName");
    VariablePointer variablePointer = new VariablePointer(name);
    String result = variablePointer.asPath();
    assertEquals("$variableName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_NameOnlyPrefix_Yzxw4() {
    QName name = new QName("prefix", "variableName");
    VariablePointer variablePointer = new VariablePointer(name);
    String result = variablePointer.asPath();
    assertEquals("$prefix:variableName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_VariablesAreNotDeclared_Sgqe2_ambZ0() {
    JXPathContext context = JXPathContext.newContext(new Object());
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    variablePointer.findVariables(context);
    assertEquals(false, variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_jNRS0_fid1() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        boolean actual = variablePointer.isActual();
        assertFalse(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual2_KLmG1_fid1() {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        boolean actual = variablePointer.isActual();
        assertFalse(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_VariablesAreDeclared_SQpz1_lkEm0_fid1() {
    JXPathContext context = JXPathContext.newContext(new Object());
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    variablePointer.findVariables(context);
}
}