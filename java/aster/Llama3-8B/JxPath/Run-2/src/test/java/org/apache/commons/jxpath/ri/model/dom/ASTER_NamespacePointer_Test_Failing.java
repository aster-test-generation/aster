/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Failing {
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
private String prefix;
@Mock
    private NamespacePointer namespacepointer;
@Mock
    private QName name;
@Mock
    private NodeTest nodeTest;
@Mock
    private Object mockGetNamespaceURI;
@Mock
    private DOMNodePointer parent;
private String namespaceURI;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qName;
@Mock
    private VariablePointer variablePointer;
@Mock
    private NamespacePointer namespacePointer;
@Mock
    private QName qname;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception{
        namespacepointer = new NamespacePointer(null, null);
        when(mockGetNamespaceURI).thenReturn(mockGetNamespaceURI);
        assertEquals(mockGetNamespaceURI, namespacepointer.getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_fid1() throws Exception{
        prefix = "test_prefix";
        namespacepointer = new NamespacePointer(parent, prefix);
        String expectedPath = "namespace::test_prefix";
        String actualPath = namespacepointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
}