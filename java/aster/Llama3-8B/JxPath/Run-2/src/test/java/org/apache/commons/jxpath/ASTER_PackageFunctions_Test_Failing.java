/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackageFunctions_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionMethod_eULZ4() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "methodName", new Object[] {new Object()});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionConstructor_ptPs5() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "new", new Object[0]);
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionStaticMethod_kPJI6() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "staticMethodName", new Object[0]);
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNonStaticMethod_PSCr7() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "nonStaticMethodName", new Object[0]);
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionMethodWithParameter_EeHe8() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "methodName", new Object[] {new Object(), new Object()});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionConstructorWithParameter_XQac9() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "new", new Object[] {new Object()});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionStaticMethodWithParameter_gOOI10() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "staticMethodName", new Object[] {new Object()});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNonStaticMethodWithParameter_ppQl11() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "nonStaticMethodName", new Object[] {new Object()});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionMethodWithMultipleParameters_bZLM12() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "methodName", new Object[] {new Object(), new Object(), new Object()});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionConstructorWithMultipleParameters_GpEy13() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "new", new Object[] {new Object(), new Object()});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionStaticMethodWithMultipleParameters_dBtu14() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "staticMethodName", new Object[] {new Object(), new Object()});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNonStaticMethodWithMultipleParameters_uglV15() {
    PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
    Function function = packageFunctions.getFunction("namespace", "nonStaticMethodName", new Object[] {new Object(), new Object()});
    Assertions.assertNotNull(function);
}
}