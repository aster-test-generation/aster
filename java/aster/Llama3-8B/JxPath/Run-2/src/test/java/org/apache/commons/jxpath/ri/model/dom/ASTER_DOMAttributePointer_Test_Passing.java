/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Attr;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Passing {
@Mock
    private DOMNodePointer parent;
@Mock
    private Attr attr;
private DOMAttributePointer domAttributePointer;
private DOMAttributePointer anotherDomAttributePointer;
@Mock
    private NodeTest nodeTest;
@Mock
    private DOMNodePointer domNodePointer;
private DOMAttributePointer domattributepointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        domattributepointer = new DOMAttributePointer(parent, attr);
        // Arrange
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        // Act
        int result = domattributepointer.compareChildNodePointers(pointer1, pointer2);
        // Assert
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject() {
        attr = mock(Attr.class);
        domAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), attr);
        anotherDomAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), mock(Attr.class));
        assertEquals(domAttributePointer, domAttributePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject() {
        attr = mock(Attr.class);
        domAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), attr);
        anotherDomAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), mock(Attr.class));
        assertNotEquals(domAttributePointer, anotherDomAttributePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObjectWithSameAttr() {
        attr = mock(Attr.class);
        domAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), attr);
        anotherDomAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), mock(Attr.class));
        assertEquals(domAttributePointer, new DOMAttributePointer(new DOMNodePointer(null, null, null), attr));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObjectWithDifferentAttr() {
        attr = mock(Attr.class);
        domAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), attr);
        anotherDomAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), mock(Attr.class));
        assertNotEquals(domAttributePointer, new DOMAttributePointer(new DOMNodePointer(null, null, null), mock(Attr.class)));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NullNodeTest_ReturnsTrue() {
        domAttributePointer = new DOMAttributePointer(null, null);
        boolean result = domAttributePointer.testNode(null);
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NodeTypeTest_ReturnsTrue() {
        domAttributePointer = new DOMAttributePointer(null, null);
        NodeTypeTest nodeTypeTest = Mockito.mock(NodeTypeTest.class);
        Mockito.when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        boolean result = domAttributePointer.testNode(nodeTypeTest);
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullValue() {
        domAttributePointer = new DOMAttributePointer(null, attr);
        when(attr.getValue()).thenReturn(null);
        assertEquals(null, domAttributePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Value() {
        domAttributePointer = new DOMAttributePointer(null, attr);
        when(attr.getValue()).thenReturn("Test Value");
        assertEquals("Test Value", domAttributePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        // Act
        Object immediateNode = domattributepointer.getImmediateNode();
        // Assert
        assertEquals(attr, immediateNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        domAttributePointer = new DOMAttributePointer(null, attr);
        // Arrange
        int expectedHashCode = System.identityHashCode(attr);
        // Act
        int actualHashCode = domAttributePointer.hashCode();
        // Assert
        assertEquals(expectedHashCode, actualHashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        domattributepointer = new DOMAttributePointer(parent, attr);
        // Act
        int length = domattributepointer.getLength();
        // Assert
        assertEquals(1, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() {
        attr = mock(Attr.class);
        domAttributePointer = new DOMAttributePointer(null, attr);
        // Act
        Object baseValue = domAttributePointer.getBaseValue();
        // Assert
        assertEquals(attr, baseValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() {
        domAttributePointer = new DOMAttributePointer(parent, attr);
        // Arrange
        when(parent.isActual()).thenReturn(true);
        // Act
        boolean actual = domAttributePointer.isActual();
        // Assert
        assertEquals(true, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        domAttributePointer = new DOMAttributePointer(parent, attr);
        // Arrange
        when(parent.isLeaf()).thenReturn(true);
        // Act
        boolean result = domAttributePointer.isLeaf();
        // Assert
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyValue_fid1() {
        domAttributePointer = new DOMAttributePointer(null, attr);
        when(attr.getValue()).thenReturn("");
    assertNull(domAttributePointer.getValue());
    }
}