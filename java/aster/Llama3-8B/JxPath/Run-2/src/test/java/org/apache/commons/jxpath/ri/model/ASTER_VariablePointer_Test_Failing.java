/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Failing {
    private NodePointer valuePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithActualAndIndexZero_yLfE0() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    JXPathContext context = JXPathContext.newContext(variablePointer);
    NodePointer result = variablePointer.createChild(context, new QName("name"), 0);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithActualAndIndexNotZero_tpqz1() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    JXPathContext context = JXPathContext.newContext(variablePointer);
    NodePointer result = variablePointer.createChild(context, new QName("name"), 1);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNullContext_zYVa4() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    NodePointer result = variablePointer.createChild(null, new QName("name"), 0);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_jNRS0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        boolean actual = variablePointer.isActual();
        assertTrue(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual2_KLmG1() {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        boolean actual = variablePointer.isActual();
        assertTrue(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_VariablesAreDeclared_SQpz1_lkEm0() {
    JXPathContext context = JXPathContext.newContext(new Object());
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    variablePointer.findVariables(context);
    assertEquals(true, variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathTrue_chqT0_rsvt0() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createPath(context);
    assertEquals(NodePointer.class, result.getClass());
}
}