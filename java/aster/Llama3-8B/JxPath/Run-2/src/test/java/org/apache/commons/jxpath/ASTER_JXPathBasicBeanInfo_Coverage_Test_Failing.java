/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.beans.PropertyDescriptor;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsReturnEmptyArray_asgn3() throws Exception {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        assertSame(new PropertyDescriptor[0], propertyDescriptors);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorExistingProperty_GlSc1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, true);
        beanInfo.getPropertyDescriptor("propertyName");
        PropertyDescriptor propertyDescriptor = beanInfo.getPropertyDescriptor("propertyName");
        assertNotNull(propertyDescriptor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsNull_dEkU8() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, true);
        assertNull(beanInfo.getPropertyDescriptors());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsEmpty_kEnc9() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, true);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        assertEquals(0, propertyDescriptors.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsNonEmpty_CyEK10() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, true);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(1, propertyDescriptors.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsNonExistingProperty_ijiG11() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, true);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(0, propertyDescriptors.length);
}
@Test
@Timeout(value =50, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsNonEmpty_CyEK10_2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, true);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        assertEquals(1, propertyDescriptors.length);}
}