/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TreeCompiler_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_bWmj0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[] {1, 2};
        Object result = treeCompiler.and(arguments);
        assertEquals(CoreOperationAnd.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_qbaE0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[0];
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathWithPredicates_IUXC1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[] {new Object()};
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathWithSteps_VRzc2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[0];
        Object[] steps = new Object[] {new Object()};
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathWithPredicatesAndSteps_boyT3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[] {new Object(), new Object()};
        Object[] steps = new Object[] {new Object(), new Object()};
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathNullExpression_PAEB4() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = null;
        Object[] predicates = new Object[0];
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathNullPredicates_Ujvu5() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = null;
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathNullSteps_wDeb6() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[0];
        Object[] steps = null;
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathArrayWithNull_iRAF8() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[] {null};
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathArrayWithNullAndNonNull_SXdq9() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[] {null, new Object()};
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathArrayWithNullAndNonNullAndSteps_NCRf10() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[] {null, new Object()};
        Object[] steps = new Object[] {new Object(), new Object()};
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathArrayWithNonNullAndNonNull_fjGG11() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[] {new Object(), new Object()};
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_zfKy0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{"1", "2", "3"};
        Object result = treeCompiler.union(arguments);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_pJLv0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.function(1, new Object[]{"arg1", "arg2"});
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_JgaJ0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[] {1, 2, 3};
        Object result = treeCompiler.sum(arguments);
        assertEquals(6, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_YXaw0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("test");
        Object result = treeCompiler.variableReference(qName);
        assertEquals("VariableReference(test)", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_ChLf0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] steps = new Object[]{"step1", "step2", "step3"};
        Object result = treeCompiler.locationPath(true, steps);
        assertEquals(LocationPath.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_LBDC0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.number("10.5");
        assertEquals(Double.valueOf("10.5"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_YQOR0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("name");
        Object[] args = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.function(qName, args);
        assertEquals("ExtensionFunction(name, [arg1, arg2])", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_cPgn0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("test");
        assertNotNull(result);
        assertEquals("ProcessingInstructionTest{instruction='test'}", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_YXaw0_fid1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("test");
        Object result = treeCompiler.variableReference(qName);
        assertEquals("$test", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQname_xqqG0_GFAC0() {
    TreeCompiler treeCompiler = new TreeCompiler();
    QName result = (QName) treeCompiler.processingInstructionTest("prefix:name");
    assertEquals("prefix:name", result.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStep_wxgG0_evAH0() {
    TreeCompiler treeCompiler = new TreeCompiler();
    Object result = treeCompiler.processingInstructionTest("processing-instruction('Step(1, NodeTest, [predicate1, predicate2])')");
    assertEquals("processing-instruction('Step(1, NodeTest, [predicate1, predicate2])')", result.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLessThan_vkwi0_pHOo0() {
    TreeCompiler treeCompiler = new TreeCompiler();
    Object left = "left"; // Replace abstract Expression with a concrete object
    Object right = "right"; // Replace abstract Expression with a concrete object
    Object result = treeCompiler.lessThan(left, right);
    assertEquals(CoreOperationLessThan.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_cPgn0_2_fid2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("test");
        assertEquals("ProcessingInstructionTest{instruction='test'}", result.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStep_wxgG0_evAH0_fid2() {
    TreeCompiler treeCompiler = new TreeCompiler();
    Object result = treeCompiler.processingInstructionTest("Step(1, NodeTest, [predicate1, predicate2])");
    assertEquals("Step(1, NodeTest, [predicate1, predicate2])", result.toString());
}
}