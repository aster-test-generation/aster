/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSuffix_IOqh0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("abcdefghijklmnopqrstuvwxyz"), 1, 1);
        stream.buffer = new char[100];
        stream.bufpos = 20;
        stream.bufsize = 50;
        for (int i = 0; i < 20; i++) {
            stream.buffer[i] = 'b';
        }
        for (int i = 20; i < 50; i++) {
            stream.buffer[i] = 'b';
        }
        char[] result = stream.GetSuffix(10);
        char[] expected = new char[]{'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b'};
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSuffix2_lnpK1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("abcdefghijklmnopqrstuvwxyz"), 1, 1);
        stream.buffer = new char[100];
        stream.bufpos = 80;
        stream.bufsize = 100;
        for (int i = 0; i < 80; i++) {
            stream.buffer[i] = 'a';
        }
        for (int i = 80; i < 100; i++) {
            stream.buffer[i] = 'b';
        }
        char[] result = stream.GetSuffix(20);
        char[] expected = new char[]{'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b'};
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn1_Bpdm0_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
    stream.adjustBeginLineColumn(2, 3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn2_XxbE1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
    stream.tokenBegin = 5;
    stream.bufpos = 5;
    stream.bufsize = 10;
    stream.bufline = new int[10];
    stream.bufcolumn = new int[10];
    stream.inBuf = 5;
    stream.line = 1;
    stream.column = 1;
    stream.adjustBeginLineColumn(2, 3);
    assertEquals(2, stream.getBeginLine());
    assertEquals(3, stream.getBeginColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit_FsqO0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.ByteArrayInputStream("Hello, World!".getBytes()), 1, 1);
        simpleCharStream.ReInit(new java.io.ByteArrayInputStream("Hello, World!".getBytes()), 2, 2, 4096);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit_YQdX0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        simpleCharStream.ReInit(new java.io.ByteArrayInputStream(new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithBufferSize_NxPI1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 4096);
        simpleCharStream.ReInit(new java.io.ByteArrayInputStream(new byte[0]));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit_eqUL0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.ReInit(new java.io.ByteArrayInputStream(new byte[0]), 2, 2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitInputStream_OLha2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.ReInit(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitInputStreamWithBufferSize_LJni3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 4096);
        stream.ReInit(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit_ZXVF0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
        stream.ReInit(new java.io.StringReader("new test"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit2_TQkf1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
        stream.ReInit(new java.io.StringReader("new test"), 2, 2, 4096);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit3_CuQD2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
        stream.ReInit(new java.io.StringReader("new test"), 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit4_CaSw3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
        stream.ReInit(new java.io.StringReader("new test"), 1, 1, 4096);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneReaderConstructor_JVgK0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.Done();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneInputStreamConstructor_jsbh1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.Done();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneReaderConstructorWithBufferSize_nAfE2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.Done();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneInputStreamConstructorWithBufferSize_DKXi3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 10);
        stream.Done();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn1_Bpdm0_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
    stream.adjustBeginLineColumn(2, 3);
    assertEquals(3, stream.getBeginColumn());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn2_XxbE1_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
    stream.tokenBegin = 5;
    stream.bufpos = 5;
    stream.bufsize = 10;
    stream.bufline = new int[10];
    stream.bufcolumn = new int[10];
    stream.inBuf = 5;
    stream.line = 1;
    stream.column = 1;
    stream.adjustBeginLineColumn(2, 3);
    assertEquals(2, stream.getBeginLine());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn2_XxbE1_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
    stream.tokenBegin = 5;
    stream.bufpos = 5;
    stream.bufsize = 10;
    stream.bufline = new int[10];
    stream.bufcolumn = new int[10];
    stream.inBuf = 5;
    stream.line = 1;
    stream.column = 1;
    stream.adjustBeginLineColumn(2, 3);
    assertEquals(3, stream.getBeginColumn());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitReader_VCRy2_qTgf0() {
    java.io.Reader reader = new java.io.StringReader("Hello World");
    SimpleCharStream simpleCharStream = new SimpleCharStream(reader, 1, 1, 10);
    simpleCharStream.ReInit(reader);
}
}