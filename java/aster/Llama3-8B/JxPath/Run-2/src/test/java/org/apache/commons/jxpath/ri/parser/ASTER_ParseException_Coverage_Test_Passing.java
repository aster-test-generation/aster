/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParseException_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtB_wSqd1() {
        ParseException token = new ParseException();
        String str = "\b";
        String result = token.add_escapes(str);
        assertEquals("\\b", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtT_jycK2() {
        ParseException token = new ParseException();
        String str = "\t";
        String result = token.add_escapes(str);
        assertEquals("\\t", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtN_OOVD3() {
        ParseException token = new ParseException();
        String str = "\n";
        String result = token.add_escapes(str);
        assertEquals("\\n", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtF_xRBD4() {
        ParseException token = new ParseException();
        String str = "\f";
        String result = token.add_escapes(str);
        assertEquals("\\f", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtR_FhgC5() {
        ParseException token = new ParseException();
        String str = "\r";
        String result = token.add_escapes(str);
        assertEquals("\\r", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtDoubleQuote_dQLQ6() {
        ParseException token = new ParseException();
        String str = "\"";
        String result = token.add_escapes(str);
        assertEquals("\\\"", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtSingleQuote_JpLC7() {
        ParseException token = new ParseException();
        String str = "'";
        String result = token.add_escapes(str);
        assertEquals("\\'", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtBackSlash_SKOZ8() {
        ParseException token = new ParseException();
        String str = "\\";
        String result = token.add_escapes(str);
        assertEquals("\\\\", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtLessThan20OrGreaterThan7E_bYdm9() {
        ParseException token = new ParseException();
        String str = (char) 0x1F + "";
        String result = token.add_escapes(str);
        assertEquals("\\u001f", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtLessThan20OrGreaterThan7E2_bdsV10() {
        ParseException token = new ParseException();
        String str = (char) 0x7F + "";
        String result = token.add_escapes(str);
        assertEquals("\\u007f", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStrCharAtLessThan20OrGreaterThan7E3_QsXo11() {
        ParseException token = new ParseException();
        String str = (char) 0x80 + "";
        String result = token.add_escapes(str);
        assertEquals("\\u0080", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSpecialConstructor_saZU0() {
        ParseException parseException = new ParseException("message");
        String message = parseException.getMessage();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testElementLength_Yrky3() {
        int[] element = new int[]{1, 2, 3, 4};
        int maxSize = 0;
        for (int i : element) {
            if (maxSize < i) {
                maxSize = i;
            }
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpected_MvzH4() {
        String expected = "";
        int maxSize = 0;
        for (int[] element : new int[][]{{1, 2, 3}, {4, 5, 6}}) {
            if (maxSize < element.length) {
                maxSize = element.length;
            }
            for (int element2 : element) {
                expected += "a ";
            }
            if (element[element.length - 1] != 0) {
                expected += "...";
            }
            expected += "    ";
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRetVal_hKYi5() {
        String retval = "Encountered \"";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTok_wtXV6() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForLoop_jiBZ7() {
        for (int i = 0; i < 5; i++) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBreakStatement_FYsr8() {
        for (int i = 0; i < 5; i++) {
            if (i == 3) {
                break;
            }
        }
}
}