/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Failing {
@Mock
    private NamespaceResolver parent;
private boolean sealed;
@Mock
    private NodePointer nodePointer;
private NamespaceResolver namespaceResolver;
@Mock
    private Map<String, String> namespaceMap;
@Mock
    private Map<String, String> reverseMap;
private NamespaceResolver namespaceresolver;
@Mock
    private NamespaceResolver pointer;
@Mock
    private Object mockObject;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix() throws Exception {
        nodePointer = Mockito.mock(NodePointer.class);
        String namespaceURI = "http://example.com";
        String prefix = "prefix";
        // Set up the mock nodePointer to return the expected namespaceURI and prefix
        Mockito.when(nodePointer.getNamespaceURI()).thenReturn(namespaceURI);
        Mockito.when(nodePointer.getName().getName()).thenReturn(prefix);
        // Call the getPrefix method
        String result = NamespaceResolver.getPrefix(nodePointer, namespaceURI);
        // Assert the result
        assertEquals(prefix, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespaceSealed_CQPH1() {
    NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver());
    try {
        namespaceResolver.registerNamespace("prefix", "namespaceURI");
        fail("Expected IllegalStateException");
    } catch (IllegalStateException e) {
        assertEquals("Cannot register namespaces on a sealed NamespaceResolver", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixExternallyRegisteredPrefixNotNull_BXUD0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        String namespaceURI = "namespaceURI";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        Assertions.assertNotNull(prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() {
        namespaceresolver = new NamespaceResolver(parent);
        String prefix = "prefix";
        String uri = "uri";
        when(parent.getNamespaceURI(prefix)).thenReturn(uri);
        String result = namespaceresolver.getNamespaceURI(prefix);
        assertEquals(uri, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURINullPointer() {
        namespaceresolver = new NamespaceResolver(parent);
        String prefix = "prefix";
        String uri = "uri";
        when(parent.getNamespaceURI(prefix)).thenReturn(uri);
        when(pointer.getNamespaceURI(prefix)).thenReturn(null);
        String result = namespaceresolver.getNamespaceURI(prefix);
        assertEquals(uri, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIExternallyRegisteredNamespaceURINotNull_ZqaQ0() {
    NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
    String uri = namespaceResolver.getNamespaceURI("prefix");
    assert uri != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_fid1() {
        namespaceresolver = new NamespaceResolver(parent);
        String prefix = "prefix";
        String uri = "uri";
        when(parent.getNamespaceURI(prefix)).thenReturn(uri);
        String result = namespaceresolver.getNamespaceURI(prefix);
    assertNull(uri);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURINullPointer_fid1() {
        namespaceresolver = new NamespaceResolver(parent);
        String prefix = "prefix";
        String uri = "uri";
        when(parent.getNamespaceURI(prefix)).thenReturn(uri);
        when(pointer.getNamespaceURI(prefix)).thenReturn(null);
        String result = namespaceresolver.getNamespaceURI(prefix);
    assertNull(uri);
    }
}