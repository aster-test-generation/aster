/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_VariablePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueUndefinedVariableWithJXPathException_OiJV2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        try {
            variablePointer.setValue("value");
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot set undefined variable: name", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithValidIndex_sqqX0_1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(0);
        assertEquals(0, variablePointer.getIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithNegativeIndex_UpKK2_1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(-1);
        assertEquals(-1, variablePointer.getIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_fRmY0_SIEY0() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    VariablePointer nodePointer1 = new VariablePointer(new QName("name"));
    VariablePointer nodePointer2 = new VariablePointer(new QName("name"));
    int result = variablePointer.compareChildNodePointers(nodePointer1, nodePointer2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexWithNullIndex_UmGB1_BcDo0_1() {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    variablePointer.setIndex(0); 
    assertEquals(false, variablePointer.isActual());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCollection_VQZX1_mgwU0() {
    QName qName = new QName("name");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    int index = 0;
    Object collection = ((org.apache.commons.jxpath.ri.model.VariablePointer) variablePointer).isActual();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_eCmd3_QkVV0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    NodePointer nodePointer = (NodePointer) variablePointer.clone();
}
}