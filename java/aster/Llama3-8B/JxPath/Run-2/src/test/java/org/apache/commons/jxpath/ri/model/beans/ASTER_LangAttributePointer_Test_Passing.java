/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LangAttributePointer_Test_Passing {
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
private LangAttributePointer langAttributePointer;
LangAttributePointer langattributepointer;
LangAttributePointer anotherLangAttributePointer;
@Mock
    private DOMNodePointer parent;
@Mock
    private NodeTest nodeTest;
@Mock
    private Object mockRoot;
@Mock
    private QName qname;
@Mock
    private VariablePointer variablePointer;
@Mock
    private DOMNodePointer dOMNodePointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qName;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        langAttributePointer = Mockito.mock(LangAttributePointer.class);
        // Arrange
        Mockito.when(langAttributePointer.isCollection()).thenReturn(true);
        // Act
        boolean result = langAttributePointer.isCollection();
        // Assert
        Mockito.verify(langAttributePointer, Mockito.times(1)).isCollection();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception{
        langattributepointer = new LangAttributePointer(parent);
        // Arrange
        when(parent.getNamespaceURI()).thenReturn("http://example.com");
        // Act
        String namespaceURI = langattributepointer.getNamespaceURI();
        // Assert
    assertNull(namespaceURI);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() {
        langattributepointer = new LangAttributePointer(parent);
        // Arrange
        when(parent.asPath()).thenReturn("/root");
        // Act
        String result = langattributepointer.asPath();
        // Assert
        assertEquals("/root/@xml:lang", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_NullParent_DZML0() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(null);
        String result = langAttributePointer.asPath();
        assert result.equals("@xml:lang");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        langAttributePointer = Mockito.mock(LangAttributePointer.class);
        // Arrange
        Mockito.when(langAttributePointer.getLength()).thenReturn(2);
        // Act
        int length = langAttributePointer.getLength();
        // Assert
        Mockito.verify(langAttributePointer, Mockito.times(1)).getLength();
        assertEquals(2, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception{
        langattributepointer = new LangAttributePointer(parent);
        // Arrange
        Locale locale = Locale.US;
        when(parent.getLocale()).thenReturn(locale);
        // Act
        Object baseValue = langattributepointer.getBaseValue();
        // Assert
        assertEquals(locale.toString().replace('_', '-'), baseValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        langAttributePointer = new LangAttributePointer(parent);
        // Arrange
        when(parent.isLeaf()).thenReturn(true);
        // Act
        boolean result = langAttributePointer.isLeaf();
        // Assert
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_QAxj0_EDXv0() {
    LangAttributePointer langAttributePointer = new LangAttributePointer(new DOMNodePointer(null, null, null));
    DOMNodePointer nodePointer1 = new DOMNodePointer(null, null, null);
    DOMNodePointer nodePointer2 = new DOMNodePointer(null, null, null);
    int result = langAttributePointer.compareChildNodePointers(nodePointer1, nodePointer2);
    assert result == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_uQCZ0_cAmw0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    LangAttributePointer langAttributePointer = new LangAttributePointer(new DOMNodePointer(null, Locale.US, null));
    int length = langAttributePointer.getLength();
    assert length == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength2_LqbU1_xrOC0() {
    QName qName = new QName("qualifiedName");
    VariablePointer variablePointer = new VariablePointer(qName);
    LangAttributePointer langAttributePointer = new LangAttributePointer(new DOMNodePointer(null, Locale.US, null));
    int length = langAttributePointer.getLength();
    assert length == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength4_siyb3_Rzyv0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    LangAttributePointer langAttributePointer = new LangAttributePointer(new DOMNodePointer(null, Locale.US, ""));
    int length = langAttributePointer.getLength();
    assert length == 1;
}
}