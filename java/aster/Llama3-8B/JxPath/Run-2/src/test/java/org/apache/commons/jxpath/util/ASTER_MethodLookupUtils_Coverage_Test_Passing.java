/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import org.apache.commons.jxpath.ExpressionContext;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MethodLookupUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExpressionContext_aBFX0() {
        Class targetClass = ExpressionContext.class;
        Object[] parameters = new Object[]{new Object()};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithNullParameter_aMGD1() {
        Class targetClass = Object.class;
        Object[] parameters = new Object[]{null};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithNoParameters_Ztrc2() {
        Class targetClass = Object.class;
        Object[] parameters = new Object[0];
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExpressionContext_YQwA0() {
        Class targetClass = ExpressionContext.class;
        Object[] parameters = new Object[]{null};
        Class[] types = new Class[]{ExpressionContext.class};
        types[0] = ExpressionContext.class;
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithMultipleParameters_NFPO2() {
        Class targetClass = Object.class;
        Object[] parameters = new Object[]{null, "Hello", 1};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullParameters_OGMb0() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", null);
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNonStaticMethod_VQtR1() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { "test" });
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatch_fVlD2_1() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { });
        assertNotNull(method);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatch_fVlD2_2() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { });
        assertEquals("getName", method.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatch_fVlD2_3() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { });
        assertTrue(Modifier.isStatic(method.getModifiers()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodAmbiguousMatch_KVQK3() {
        try {
            MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { });
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: getName", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullParameter_vHIO4() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { null });
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNonMatchingMethod_jofJ5() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getMethods", new Object[] { });
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatchWithParameters_nDyl9_1() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { "test" });
        assertNotNull(method);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatchWithParameters_nDyl9_2() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { "test" });
        assertEquals("getName", method.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatchWithParameters_nDyl9_3() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { "test" });
        assertTrue(Modifier.isStatic(method.getModifiers()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodAmbiguousMatchWithParameters_oWds10() {
        try {
            MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { "test" });
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: getName", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullParameterWithParameters_mGeD11() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { null, "test" });
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNonMatchingMethodWithParameters_yEdc12() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getMethods", new Object[] { "test" });
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNonStaticMethodWithMultipleParameters_kwqh15() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { "test", "test2" });
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatchWithMultipleParameters_ViSy16_1() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { "test", "test2" });
        assertNotNull(method);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatchWithMultipleParameters_ViSy16_2() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { "test", "test2" });
        assertEquals("getName", method.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatchWithMultipleParameters_ViSy16_3() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getName", new Object[] { "test", "test2" });
        assertTrue(Modifier.isStatic(method.getModifiers()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNullParameters_ARXC0() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", null);
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodEmptyParameters_OwrP1() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[0]);
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodSingleNullParameter_zyHc2() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{null});
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodSingleNonNullParameter_EqRJ3() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{"test"});
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMultipleParameters_qTvr4() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{"test", 1, "test2"});
        assertNotNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNoMatch_mqJL8() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{"test", 1, "test2"});
        assertNull(method);
}
}