/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Failing {
@Mock
    private Object superObject;
ParentContext parentcontext;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private SelfContext selfContext;
@Mock
    private ParentContext parentContext;
@Mock
    private NodePointer nodePointer;
@Mock
    private NodeTest nodeTest;
@Mock
    private NodePointer currentNodePointer;
    private boolean setStarted = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_SetStartedFalse_tKyJ0() {
    ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, null), null), null);
    boolean result = parentContext.nextNode();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_CurrentNodePointerNull_Sunf2_dyqG1() {
    ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), null);
    boolean result = parentContext.nextNode();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_CurrentNodePointerContainer_kEcd4_OZSO0() {
    ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), null);
    boolean result = parentContext.nextNode();
    Assertions.assertTrue(result);
}
}