/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ChildContext_Test_Failing {
@Mock
    private NodeIterator iterator;
@Mock
    private Object superObject;
private ChildContext childContext;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private SelfContext selfContext;
private ChildContext childcontext;
@Mock
    private NodePointer nodePointer;
@Mock
    private NodeTypeTest nodeTypeTest;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws Exception {
        childContext = new ChildContext((NamespaceContext) Mockito.mock(NamespaceContext.class), Mockito.mock(NodeTypeTest.class), true, true);
        Mockito.when(childContext.getClass().getSuperclass().getMethod("reset").invoke(childContext)).thenReturn(null);
        childContext.reset();
        Mockito.verify(childContext.getClass().getSuperclass().getMethod("reset").invoke(childContext));
        Mockito.verifyNoMoreInteractions(childContext);
        Mockito.verifyNoMoreInteractions(iterator);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_PositionNotZero_ReturnsNodePointer_Scas1() {
    ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, null), null), new NodeTypeTest(1), true, false);
    NodePointer result = childContext.getCurrentNodePointer();
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() throws Exception {
        childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        // Set up the mock objects
        when(childContext.getCurrentPosition()).thenReturn(0);
        // Call the method to test
        boolean result = childContext.nextNode();
        // Verify the result
        assertEquals(true, result);
        // Verify the position has been incremented
        verify(childContext).setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_Lktd0_PhBM0_fid2() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
    boolean result = childContext.nextNode();
    assert result;
}
}