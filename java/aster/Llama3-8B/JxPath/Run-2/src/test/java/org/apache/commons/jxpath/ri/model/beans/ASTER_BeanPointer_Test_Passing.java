/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
@Mock
    private DOMNodePointer parent;
@Mock
    private QName otherName;
private Object bean;
private QName name;
private BeanPointer beanpointer;
@Mock
    private JXPathBeanInfo beanInfo;
@Mock
    private Object node;
@Mock
    private JXPathIntrospector jxpathIntrospector;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPathNullBean() {
        bean = new Integer(10);
        beanpointer = new BeanPointer(null, bean, new JXPathBasicBeanInfo(Object.class, false), Locale.US);
        bean = null;
        beanpointer = new BeanPointer(null, bean, new JXPathBasicBeanInfo(Object.class, false), Locale.US);
        String path = beanpointer.asPath();
        assertEquals("null()", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPathBooleanBean() {
        bean = new Integer(10);
        beanpointer = new BeanPointer(null, bean, new JXPathBasicBeanInfo(Object.class, false), Locale.US);
        bean = Boolean.TRUE;
        beanpointer = new BeanPointer(null, bean, new JXPathBasicBeanInfo(Object.class, false), Locale.US);
        String path = beanpointer.asPath();
        assertEquals("true()", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPathStringBean() {
        bean = new Integer(10);
        beanpointer = new BeanPointer(null, bean, new JXPathBasicBeanInfo(Object.class, false), Locale.US);
        bean = "Hello";
        beanpointer = new BeanPointer(null, bean, new JXPathBasicBeanInfo(Object.class, false), Locale.US);
        String path = beanpointer.asPath();
        assertEquals("'Hello'", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullParent_klPK0() {
        BeanPointer beanPointer = new BeanPointer(null, new Object(), new JXPathBasicBeanInfo(Object.class), new Locale("en", "US"));
        assertEquals("/", beanPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullBean_barU1() {
        BeanPointer beanPointer = new BeanPointer(null, null, new JXPathBasicBeanInfo(Object.class), new Locale("en", "US"));
        assertEquals("null()", beanPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNumber_yRcY2() {
        BeanPointer beanPointer = new BeanPointer(null, 10, new JXPathBasicBeanInfo(Object.class), new Locale("en", "US"));
        assertEquals("10", beanPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNumberWithDecimal_CYFn3() {
        BeanPointer beanPointer = new BeanPointer(null, 10.5, new JXPathBasicBeanInfo(Object.class), new Locale("en", "US"));
        assertEquals("10.5", beanPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathBooleanTrue_ewgF4() {
        BeanPointer beanPointer = new BeanPointer(null, Boolean.TRUE, new JXPathBasicBeanInfo(Object.class), new Locale("en", "US"));
        assertEquals("true()", beanPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathBooleanFalse_buxX5() {
        BeanPointer beanPointer = new BeanPointer(null, Boolean.FALSE, new JXPathBasicBeanInfo(Object.class), new Locale("en", "US"));
        assertEquals("false()", beanPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathString_fool6() {
        BeanPointer beanPointer = new BeanPointer(null, "hello", new JXPathBasicBeanInfo(Object.class), new Locale("en", "US"));
        assertEquals("'hello'", beanPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathStringWithSpecialChars_GLSZ7() {
        BeanPointer beanPointer = new BeanPointer(null, "hello world", new JXPathBasicBeanInfo(Object.class), new Locale("en", "US"));
        assertEquals("'hello world'", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception{
        beanpointer = Mockito.mock(BeanPointer.class);
        // Arrange
        Mockito.when(beanpointer.getLength()).thenReturn(5);
        // Act
        int length = beanpointer.getLength();
        // Assert
        Mockito.verify(beanpointer, Mockito.times(1)).getLength();
        Assertions.assertEquals(5, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception{
        beanpointer = new BeanPointer(null, bean, null, null);
        // Arrange
        // Act
        Object result = beanpointer.getBaseValue();
        // Assert
        Assertions.assertEquals(bean, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        beanpointer = Mockito.mock(BeanPointer.class);
        // Arrange
        Mockito.when(beanpointer.isCollection()).thenReturn(true);
        // Act
        boolean result = beanpointer.isCollection();
        // Assert
        Mockito.verify(beanpointer, Mockito.times(1)).isCollection();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafFalse_EWCm1() {
    QName name = new QName("name");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass());
    Locale locale = Locale.US;
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    boolean result = beanPointer.isLeaf();
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_pXoE0() throws Exception {
    bean = new Object();
    name = new QName("testName");
    beanpointer = new BeanPointer(null, name, bean, new JXPathBasicBeanInfo(Object.class, false));
    assertTrue(beanpointer.equals(beanpointer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_WqTo0() throws Exception {
    bean = new Object();
    name = new QName("testName");
    beanpointer = new BeanPointer(parent, name, bean, new JXPathBasicBeanInfo(Object.class, false));
    assertFalse(beanpointer.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_PpJz0() throws Exception {
    bean = new Object();
    name = new QName("testName");
    beanpointer = new BeanPointer(parent, name, bean, new JXPathBasicBeanInfo(bean.getClass(), false));
    assertFalse(beanpointer.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_RCNl0_IqdB0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
    QName name = new QName("name");
    Object bean = new Object();
    Locale locale = new Locale("en", "US");
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
    assert propertyPointer instanceof BeanPropertyPointer;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NameNotNull_TJuA0_tSqz0() {
    QName name = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
    Locale locale = new Locale("en", "US");
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    int result = beanPointer.hashCode();
    assertEquals(name.hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NameNull_HzIH1_CGlP0() {
    QName name = null;
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
    Locale locale = new Locale("en", "US");
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    int result = beanPointer.hashCode();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_fid2() {
        bean = new Integer(10);
        beanpointer = new BeanPointer(null, bean, new JXPathBasicBeanInfo(Object.class, false), Locale.US);
        String path = beanpointer.asPath();
        assertEquals("10", path);
    }
}