/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Passing {
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
private String prefix;
@Mock
    private NamespacePointer namespacepointer;
@Mock
    private QName name;
@Mock
    private NodeTest nodeTest;
@Mock
    private Object mockGetNamespaceURI;
@Mock
    private DOMNodePointer parent;
private String namespaceURI;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qName;
@Mock
    private VariablePointer variablePointer;
@Mock
    private NamespacePointer namespacePointer;
@Mock
    private QName qname;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        nodePointer1 = mock(NodePointer.class);
        nodePointer2 = mock(NodePointer.class);
        // Arrange
        when(nodePointer1.getName()).thenReturn(new QName("name1"));
        when(nodePointer2.getName()).thenReturn(new QName("name2"));
        // Act
        int result = namespacepointer.compareChildNodePointers(nodePointer1, nodePointer2);
        // Assert
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        prefix = "prefix";
        namespacepointer = new NamespacePointer(null, prefix);
        // Create a new instance of NamespacePointer with the same prefix
        NamespacePointer other = new NamespacePointer(null, prefix);
        // Assert that the equals method returns true
        // Create a new instance of NamespacePointer with a different prefix
        String differentPrefix = "differentPrefix";
        NamespacePointer different = new NamespacePointer(null, differentPrefix);
        // Assert that the equals method returns false
        assertEquals(namespacepointer, other);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        prefix = "prefix";
        namespacepointer = new NamespacePointer(null, prefix);
        // Create a new instance of NamespacePointer with the same prefix
        NamespacePointer other = new NamespacePointer(null, prefix);
        // Assert that the equals method returns true
        // Create a new instance of NamespacePointer with a different prefix
        String differentPrefix = "differentPrefix";
        NamespacePointer different = new NamespacePointer(null, differentPrefix);
        // Assert that the equals method returns false
        assertNotEquals(namespacepointer, different);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNull_qpcm0() {
    boolean result = new NamespacePointer(null, "prefix").testNode(null);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception{
        namespacepointer = Mockito.mock(NamespacePointer.class);
        // Arrange
        Mockito.when(namespacepointer.isCollection()).thenReturn(true);
        // Act
        boolean result = namespacepointer.isCollection();
        // Assert
        Mockito.verify(namespacepointer, Mockito.times(1)).isCollection();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_oDOP0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        NamespacePointer namespacePointer = new NamespacePointer(parent, "prefix");
        Object result = namespacePointer.getImmediateNode();
        assertEquals(namespacePointer.getNamespaceURI(), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception{
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(parent, prefix);
        // Act
        int hashCode = namespacepointer.hashCode();
        // Assert
        assertEquals(prefix.hashCode(), hashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(parent, prefix);
        QName expected = new QName(prefix);
        QName actual = namespacepointer.getName();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() {
        namespaceURI = "http://example.com";
        prefix = "prefix";
        namespacepointer = new NamespacePointer(parent, prefix, namespaceURI);
        // Act
        String result = namespacepointer.getNamespaceURI();
        // Assert
        assertEquals(namespaceURI, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_NullNamespaceURI_lBuc0() {
    NamespacePointer namespacePointer = new NamespacePointer(new DOMNodePointer(null, Locale.US, "id"), "prefix");
    String namespaceURI = namespacePointer.getNamespaceURI();
    assertEquals(null, namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception{
        prefix = "test_prefix";
        namespacepointer = new NamespacePointer(parent, prefix);
        String expectedPath = "null/namespace::test_prefix";
        String actualPath = namespacepointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathNullParent_SYfR0() {
    NamespacePointer namespacePointer = new NamespacePointer(null, "prefix");
    String result = namespacePointer.asPath();
    Assertions.assertEquals("namespace::prefix", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        namespacepointer = Mockito.mock(NamespacePointer.class);
        // Arrange
        Mockito.when(namespacepointer.getLength()).thenReturn(1);
        // Act
        int length = namespacepointer.getLength();
        // Assert
        Mockito.verify(namespacepointer, Mockito.times(1)).getLength();
        Assertions.assertEquals(1, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception{
        namespacepointer = Mockito.mock(NamespacePointer.class);
        // Arrange
        Mockito.when(namespacepointer.isLeaf()).thenReturn(true);
        // Act
        boolean result = namespacepointer.isLeaf();
        // Assert
        Mockito.verify(namespacepointer, Mockito.times(1)).isLeaf();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullNodeTypeTest_HJFw3_fASt0() {
    boolean result = new NamespacePointer(null, "prefix").isLeaf();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_wImL0_Cmlo0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    NamespacePointer namespacePointer = new NamespacePointer(new DOMNodePointer(null, Locale.US), "prefix");
    Object result = namespacePointer.getBaseValue();
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        prefix = "prefix";
        namespacepointer = new NamespacePointer(null, prefix);
        // Create a new instance of NamespacePointer with the same prefix
        NamespacePointer other = new NamespacePointer(null, prefix);
        // Assert that the equals method returns true
        assertEquals(namespacepointer, other);
        // Create a new instance of NamespacePointer with a different prefix
        String differentPrefix = "differentPrefix";
        NamespacePointer different = new NamespacePointer(null, differentPrefix);
        // Assert that the equals method returns false
        assertNotEquals(namespacepointer, different);
    }
}