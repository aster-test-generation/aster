/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BeanPointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParent_aPqY1() {
        BeanPointer beanPointer = new BeanPointer(null, "testBean", null, null);
        String result = beanPointer.asPath();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNumber_dicZ2() {
        BeanPointer beanPointer = new BeanPointer(null, 10.0, null, null);
        String result = beanPointer.asPath();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithString_dCoI3() {
        BeanPointer beanPointer = new BeanPointer(null, "testString", null, null);
        String result = beanPointer.asPath();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_ZpgN4() {
    BeanPointer beanPointer = new BeanPointer(new QName("name", null), null, null, null);
    BeanPointer other = new BeanPointer(new QName("other", null), null, null, null);
    boolean result = beanPointer.equals(other);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_NAQe5() {
    BeanPointer beanPointer = new BeanPointer(new QName("name", null), null, null, null);
    BeanPointer other = new BeanPointer(new QName("name", null), null, null, null);
    boolean result = beanPointer.equals(other);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameBeanNumber_OQAM9() {
    BeanPointer beanPointer = new BeanPointer(null, null, 1, null);
    BeanPointer other = new BeanPointer(null, null, 1, null);
    boolean result = beanPointer.equals(other);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameBeanString_MhTf10() {
    BeanPointer beanPointer = new BeanPointer(null, null, "string", null);
    BeanPointer other = new BeanPointer(null, null, "string", null);
    boolean result = beanPointer.equals(other);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameBeanBoolean_OYrF11() {
    BeanPointer beanPointer = new BeanPointer(null, null, true, null);
    BeanPointer other = new BeanPointer(null, null, true, null);
    boolean result = beanPointer.equals(other);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentBean_IKTf12() {
    BeanPointer beanPointer = new BeanPointer(null, null, 1, null);
    BeanPointer other = new BeanPointer(null, null, "string", null);
    boolean result = beanPointer.equals(other);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithParent_VShA0_RCHH0() {
    BeanPointer beanPointer = new BeanPointer(null, null, null, Locale.US);
    String result = beanPointer.asPath();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_vJIO0_sOxZ0() {
    BeanPointer beanPointer = new BeanPointer(null, null, null, Locale.getDefault());
    boolean result = beanPointer.equals(beanPointer);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_xJcb1_LrMi0() {
    BeanPointer beanPointer = new BeanPointer(null, null, null, Locale.US);
    boolean result = beanPointer.equals(null);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_TUbo2_bTyE0() {
    BeanPointer beanPointer = new BeanPointer(null, null, null, Locale.US);
    Object object = new Object();
    boolean result = beanPointer.equals(object);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafNullValue_ZOzI0_sjbt0() {
    BeanPointer beanPointer = new BeanPointer(null, null, null, Locale.US);
    boolean result = beanPointer.isLeaf();
    assertTrue(result);
}
}