/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_goxn0() {
        QName name = new QName("prefix", "localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodeIterator result = domNodePointer.attributeIterator(name);
        assertEquals(DOMAttributeIterator.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_EtwN0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodeIterator result = domNodePointer.namespaceIterator();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildNullContext_nBSS2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JXPathContext context = null;
        QName name = new QName("prefix", "localName");
        int index = 1;
        try {
            domNodePointer.createChild(context, name, index);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNullNode_bgoZ2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
        assertEquals(false, domNodePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNodeHavingNoChildNodesButParentIsNull_AypR5() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(true);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals(true, domNodePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveRootNode_HCMg0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        try {
            domNodePointer.remove();
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot remove root DOM node", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullNamespaceURI_AEVD8() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("prefix");
        assertNotNull(namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_UnknownNamespace_CNdv9() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("prefix");
    assertNull(NodePointer.UNKNOWN_NAMESPACE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWholeCollection_MgmI0_Wios0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(null);
    QName name = new QName("prefix", "localName");
    int index = DOMNodePointer.WHOLE_COLLECTION;
    NodePointer result = domNodePointer.createChild(context, name, index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildNonWholeCollection_qPrr1_yOSb0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(null);
    QName name = new QName("prefix", "localName");
    int index = 1;
    NodePointer result = domNodePointer.createChild(context, name, index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildNullName_SXLw3_JITV0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(null);
    QName name = null;
    int index = 1;
    try {
        domNodePointer.createChild(context, name, index);
        fail("Expected JXPathAbstractFactoryException");
    } catch (JXPathAbstractFactoryException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildInvalidIndex_XgdT4_xSpq0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(null);
    QName name = new QName("prefix", "localName");
    int index = -1;
    try {
        domNodePointer.createChild(context, name, index);
        fail("Expected JXPathAbstractFactoryException");
    } catch (JXPathAbstractFactoryException e) {
        assertEquals("Invalid index", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttribute_NodeIsNotElement_lIir0_zKdM0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
    JXPathContext context = JXPathContext.newContext(null);
    QName name = new QName("prefix", "name");
    NodePointer result = domNodePointer.createAttribute(context, name);
    Assertions.assertEquals(result, domNodePointer.createAttribute(context, name));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_Puzx0_SeTY0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
    String namespaceURI = domNodePointer.getNamespaceURI();
    assertEquals("http://www.w3.org/1999/xhtml", namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_DocumentNode_spGY0_qjsE1() {
    DOMNodePointer pointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(null);
    Pointer result = pointer.getPointerByID(context, "id");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_VyoB0_PaHi0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(null);
    QName name = new QName("test", "name");
    int index = 0;
    Object value = "testValue";
    NodePointer result = domNodePointer.createChild(context, name, index, value);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_NodeIsDocument_TYzn6_NLQy0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    Node node = (Node) domNodePointer.getNode(); 
    Document document = (Document) node.getOwnerDocument();
    Element root = document.createElement("root");
    document.appendChild(root);
    String namespaceURI = domNodePointer.getNamespaceURI("prefix");
    assertNotNull(namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNodeHavingNoChildNodesButParentIsNotLeaf_tfOS3_fid1() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(false);
        VariablePointer parent = mock(VariablePointer.class);
        when(parent.isLeaf()).thenReturn(false);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        boolean result = domNodePointer.isLeaf();
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNodeHavingChildNodesButParentIsLeaf_dWKb4_fid1() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(true);
        VariablePointer parent = mock(VariablePointer.class);
        when(parent.isLeaf()).thenReturn(true);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        boolean result = domNodePointer.isLeaf();
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNodeHavingNoChildNodesButParentIsNull_AypR5_fid1() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(false);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals(false, domNodePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_UnknownNamespace_CNdv9_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("prefix");
        assertEquals(NodePointer.UNKNOWN_NAMESPACE, namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildInvalidIndex_XgdT4_xSpq0_fid1() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(null);
    QName name = new QName("prefix", "localName");
    int index = -1;
    try {
        domNodePointer.createChild(context, name, index);
        fail("Expected JXPathAbstractFactoryException");
    } catch (JXPathAbstractFactoryException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_Puzx0_SeTY0_fid1() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
    String namespaceURI = domNodePointer.getNamespaceURI();
    assertEquals("Expected namespace URI", namespaceURI, namespaceURI);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_DocumentNode_spGY0_qjsE1_fid1() {
    DOMNodePointer pointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(null);
    Pointer result = pointer.getPointerByID(context, "id");
    assertNotNull(result);
}
}