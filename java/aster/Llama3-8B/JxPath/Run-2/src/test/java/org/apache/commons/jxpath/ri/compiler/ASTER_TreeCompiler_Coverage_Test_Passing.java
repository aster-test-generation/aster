/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TreeCompiler_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrNullArray_NGdU0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = null;
        Object result = treeCompiler.or(arguments);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrNullArray_NGdU0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = null;
        Object result = treeCompiler.or(arguments);
        assertEquals(CoreOperationOr.class, result.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrEmptyArray_TXVu1_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[0];
        Object result = treeCompiler.or(arguments);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrEmptyArray_TXVu1_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[0];
        Object result = treeCompiler.or(arguments);
        assertEquals(CoreOperationOr.class, result.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_hpUY0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[] {1, 2, 3};
        Object result = treeCompiler.and(arguments);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathNullArray_moxz0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = null;
        Object[] steps = null;
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathNonNullArray_FlsL1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[1];
        Object[] steps = new Object[1];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathEmptyArray_zOci2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[0];
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathNonEmptyArray_ckqA3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[1];
        predicates[0] = new Object();
        Object[] steps = new Object[1];
        steps[0] = new Object();
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_yUBB0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[] {"a", "b", "c"};
        Object result = treeCompiler.union(arguments);
        assertEquals(CoreOperationUnion.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_gqlt0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] args = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.function(1, args);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqual_MKyt0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.notEqual(left, right);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_cFvY0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3};
        Object result = treeCompiler.sum(arguments);
        assertEquals(CoreOperationAdd.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDivide_BWJY0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.divide(left, right);
        assertEquals(CoreOperationDivide.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_zQIS0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("testName");
        Object[] args = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.function(qName, args);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_zQIS0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("testName");
        Object[] args = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.function(qName, args);
        assertEquals("ExtensionFunction", result.getClass().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMod_kXIM0_fjaX0() {
    TreeCompiler treeCompiler = new TreeCompiler();
    Object result = treeCompiler.processingInstructionTest("mod");
    assertEquals(Object.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMinus_tPMe0_EakH0() {
    TreeCompiler treeCompiler = new TreeCompiler();
    Object argument = new ProcessingInstructionTest("expression");
    Object result = treeCompiler.processingInstructionTest("minus");
    assertEquals(ProcessingInstructionTest.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLessThanOrEqual_iQtu0_NxBc0() {
    TreeCompiler treeCompiler = new TreeCompiler();
    Object left = treeCompiler.processingInstructionTest("1");
    Object right = treeCompiler.processingInstructionTest("2");
    Object result = treeCompiler.lessThanOrEqual(left, right);
    assertEquals("CoreOperationLessThanOrEqual(1, 2)", result.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrNullArray_NGdU0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = null;
        Object result = treeCompiler.or(arguments);
        assertNotNull(result);
        assertEquals(CoreOperationOr.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrEmptyArray_TXVu1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[0];
        Object result = treeCompiler.or(arguments);
        assertNotNull(result);
        assertEquals(CoreOperationOr.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_zQIS0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("testName");
        Object[] args = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.function(qName, args);
        assertNotNull(result);
        assertEquals("ExtensionFunction", result.getClass().getName());
    }
}