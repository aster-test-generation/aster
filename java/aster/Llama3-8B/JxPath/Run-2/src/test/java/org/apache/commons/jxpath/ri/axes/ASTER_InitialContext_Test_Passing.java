/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InitialContext_Test_Passing {
@Mock
    private NodePointer nodePointer;
private boolean collection;
private InitialContext initialContext;
@InjectMocks
    private InitialContext initialcontext;
private boolean started = false;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private SelfContext selfContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionValidPosition_kvTw0() {
    InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
    initialContext.setPosition(1);
    assertEquals(true, initialContext.setPosition(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionInvalidPosition_HNuE1() {
    InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
    initialContext.setPosition(5);
    assertEquals(false, initialContext.setPosition(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionValidPositionWithCollection_wKbE2() {
    InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
    initialContext.setPosition(2);
    assertEquals(true, initialContext.setPosition(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionInvalidPositionWithCollection_QYGr3() {
    InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
    initialContext.setPosition(6);
    assertEquals(false, initialContext.setPosition(6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionDefaultPosition_yQEK4() {
    InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
    initialContext.setPosition(0);
    assertEquals(true, initialContext.setPosition(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_PwlY0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        Pointer pointer = initialContext.getSingleNodePointer();
        assertNotNull(pointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_hddq0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        NodePointer nodePointer = initialContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception{
        initialcontext = Mockito.mock(InitialContext.class);
        Mockito.when(initialcontext.setPosition(Mockito.anyInt())).thenReturn(true);
        boolean result = initialcontext.nextNode();
        Mockito.verify(initialcontext).setPosition(Mockito.anyInt());
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_DOui0() {
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, nodeTest), nodeTest), nodeTest);
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, nodeTest), nodeTest));
        boolean result = initialContext.nextNode();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_XsjI0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
    InitialContext initialContext = new InitialContext(namespaceContext);
    Object result = initialContext.getValue();
    assertEquals("expected result", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet_1() {
        started = false;
        initialcontext = new InitialContext(namespaceContext);
        // Act
        boolean result = initialcontext.nextSet();
        // Assert
        Mockito.verify(initialcontext, Mockito.times(1)).nextSet();
        Assertions.assertTrue(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet_2() {
        started = false;
        initialcontext = new InitialContext(namespaceContext);
        // Act
        boolean result = initialcontext.nextSet();
        // Assert
        Mockito.verify(initialcontext, Mockito.times(1)).nextSet();
        Assertions.assertTrue(started);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSetWhenNotStarted_uqTl0() {
    InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
    boolean result = initialContext.nextSet();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSetWhenStarted_dhcv1() {
    InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
    initialContext.nextSet();
    boolean result = initialContext.nextSet();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet() {
        started = false;
        initialcontext = new InitialContext(namespaceContext);
        // Act
        boolean result = initialcontext.nextSet();
        // Assert
        Mockito.verify(initialcontext, Mockito.times(1)).nextSet();
        Assertions.assertTrue(result);
        Assertions.assertTrue(started);
    }
}