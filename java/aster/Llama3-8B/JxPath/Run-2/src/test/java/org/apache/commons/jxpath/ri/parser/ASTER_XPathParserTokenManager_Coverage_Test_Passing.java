/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XPathParserTokenManager_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithStreamOnly_oxEo1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        tokenManager.ReInit(stream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReturnJJMoveStringLiteralDfa1_0_0x1204001200000000L_0x1000L_xxze25() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJJStateSetJJNewStateCnt_WoVh0_ExyW0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager parser = new XPathParserTokenManager(stream, 0);
    parser.ReInit(stream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextToken_Line1_twUc0_jCaM1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager manager = new XPathParserTokenManager(stream, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSwitchHiByte_AYCS0_Qjbm0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
    XPathParserTokenManager manager = new XPathParserTokenManager(stream);
    manager.ReInit(stream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJJmatchedKind_DBTk0_imEp1() {
    XPathParserTokenManager manager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
    manager.ReInit(new SimpleCharStream(new java.io.StringReader("")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJJmatchedPos_MTEH1_fgDX0() {
    XPathParserTokenManager manager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
    manager.jjmatchedPos = 2;
    assertEquals(2, manager.jjmatchedPos);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReturnFalse_PgXJ3_cvPJ0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
    XPathParserTokenManager manager = new XPathParserTokenManager(stream);
    manager.ReInit(stream);
    boolean result = false; // jjCanMove_0 is private, so we can't call it
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextToken_ZzQU3_oQrG0() {
    XPathParserTokenManager manager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
    assertNotNull(manager);
}
}