/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtensionFunction_Coverage_Test_Passing {
    private Object computeValue(EvalContext context) {
        return null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_hLBP0() {
        ExtensionFunction extensionFunction = new ExtensionFunction(new QName("prefix", "localName"), new Expression[]{});
        boolean result = extensionFunction.computeContextDependent();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_EmptyArgs_KqDk0() {
        QName functionName = new QName("prefix", "localName");
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, new Expression[0]);
        String result = extensionFunction.toString();
        assertEquals("prefix:localName()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FunctionNameNull_LkSA3() {
        ExtensionFunction extensionFunction = new ExtensionFunction(null, new Expression[0]);
        String result = extensionFunction.toString();
        assertEquals("null()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FunctionNameEmpty_bPVB4() {
        QName functionName = new QName("", "localName");
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, new Expression[0]);
        String result = extensionFunction.toString();
        assertEquals(":localName()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ArgsNull_Xaxg5() {
        QName functionName = new QName("prefix", "localName");
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, null);
        String result = extensionFunction.toString();
        assertEquals("prefix:localName()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_Xwjx0_jcAX0() throws Exception {
    QName functionName = new QName("functionName");
    Expression[] args = new Expression[0];
    ExtensionFunction extensionfunction = new ExtensionFunction(functionName, args);
}
}