/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PropertyIterator_Test_Failing {
@Mock
    private BeanPointer beanPointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qName;
@Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
@Mock
    private VariablePointer variablePointer;
private PropertyIterator propertyIterator;
@Mock
    private NodePointer nodePointer;
@Mock
    private PropertyPointer propertyNodePointer;
@Mock
    private QName name;
private String propertyName = "propertyName";
private boolean includeStart = false;
private int startIndex = 0;
private boolean targetReady = false;
private boolean empty = false;
private boolean reverse = false;
private int startPropertyIndex = 0;
    private int position = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() {
        propertyIterator = new PropertyIterator(beanPointer, "name", false, domNodePointer);
        // Arrange
        propertyIterator.setPosition(5);
        // Act
        int actualPosition = propertyIterator.getPosition();
        // Assert
        assertEquals(5, actualPosition);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNodePointer_vlPD0() throws Exception {
    String name = "pname";
    int position = 0;
    boolean targetReady = true;
    boolean empty = true;
    NodePointer nodePointer = propertyIterator.getNodePointer();
    Mockito.verify(propertyNodePointer, Mockito.times(1)).getValuePointer();
    Mockito.verify(propertyNodePointer, Mockito.times(1)).handle(Mockito.any(Throwable.class));
    Mockito.verify(propertyNodePointer, Mockito.times(1)).getImmediateParentPointer();
    Mockito.verify(propertyNodePointer, Mockito.times(1)).getPropertyName();
    Mockito.verify(propertyNodePointer, Mockito.times(1)).getIndex();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionAllProperties_ITFp0_ChnD0() {
    Class<?> clazz = String.class;
    PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("name"), null, new JXPathBasicBeanInfo(clazz, true), Locale.US), "name", false, new DOMNodePointer(null, Locale.US, "id"));
    boolean result = propertyIterator.setPosition(1);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionAllProperties_Ekdm0_uaRO0() {
    PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("name"), null, new JXPathBasicBeanInfo(Class.class), Locale.US), "name", false, new DOMNodePointer(null, Locale.US, "id"));
    boolean result = propertyIterator.setPosition(1);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_NameNotNull_TargetReadyFalse_EmptyFalse_QlnO1_SXmy0_fid3() {
    PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("name"), null, new JXPathBasicBeanInfo(new Object().getClass(), false), Locale.US), "name", false, null);
    NodePointer nodePointer = propertyIterator.getNodePointer();
    Assertions.assertNotNull(nodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_NameNull_TargetReadyFalse_EmptyTrue_IWLV2_AeDk0_fid3() {
    PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("name"), null, new JXPathBasicBeanInfo(Class.class), Locale.US), null, false, null);
    NodePointer nodePointer = propertyIterator.getNodePointer();
    Assertions.assertNull(nodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_NameNull_TargetReadyFalse_EmptyFalse_rQvP5_TpBD0_fid3() {
    PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("name"), null, new JXPathBasicBeanInfo(new Object().getClass(), true), Locale.US), null, false, null);
    NodePointer nodePointer = propertyIterator.getNodePointer();
    Assertions.assertNotNull(nodePointer);
}
}