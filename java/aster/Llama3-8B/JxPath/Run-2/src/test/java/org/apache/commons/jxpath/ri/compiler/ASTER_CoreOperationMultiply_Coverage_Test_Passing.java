/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreOperationMultiply_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_pYqY0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("a"), new Constant("b"));
        String symbol = coreOperationMultiply.getSymbol();
        assertEquals("*", symbol);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_KcNv0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("1"), new Constant("1"));
        assertTrue(coreOperationMultiply.isSymmetric());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_pDCY0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("a"), new Constant("b"));
        int result = coreOperationMultiply.getPrecedence();
        assertEquals(CoreOperationMultiply.MULTIPLY_PRECEDENCE, result);
    }
}