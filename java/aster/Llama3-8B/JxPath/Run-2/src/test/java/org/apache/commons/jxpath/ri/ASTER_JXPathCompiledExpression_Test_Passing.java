/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import java.util.Iterator;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.model.NodePointer;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Passing {
private Expression expression;
private String xpath;
@Mock
    private JXPathContext jxpathcontext;
@Mock
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
@Mock
    private NodePointer nodepointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPath_fKUx0() {
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("string"));
        String result = expression.getXPath();
        assert result.equals("xpath");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPathNumber_Dmap1() {
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant(1));
        String result = expression.getXPath();
        assert result.equals("xpath");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_YjoJ0() {
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("string"));
        String result = expression.toString();
        assert result.equals("xpath");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNumber_VgOg1() {
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant(1));
        String result = expression.toString();
        assert result.equals("xpath");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionStringConstant_XJsd0() {
        JXPathCompiledExpression jxpath = new JXPathCompiledExpression("xpath", new Constant("string"));
        Expression expression = jxpath.getExpression();
        assert expression != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionNumberConstant_PnEb1() {
        JXPathCompiledExpression jxpath = new JXPathCompiledExpression("xpath", new Constant(1));
        Expression expression = jxpath.getExpression();
        assert expression != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_BFAH0_dUQW0() {
    JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("constant"));
    JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(null, new Object());
    JXPathContext context = JXPathContext.newContext(contextReference, new Object());
    expression.iterate(context);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIterate_YXEi0_dscH0() {
    JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("constant"));
    JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(null, new Object());
    JXPathContext context = JXPathContext.newContext(contextReference, new Object());
    Iterator result = expression.iterate(context);
}
}