/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.beans.PropertyDescriptor;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithoutProperties_YYax1_1() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotNull(propertyDescriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithoutProperties_YYax1_2() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithClassAndAtomic_UBdZ0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, true);
    String result = beanInfo.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithClass_ZrNS1() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class);
    String result = beanInfo.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtomic_MYAK0_STZi1() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
    boolean result = beanInfo.isAtomic();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtomic1_SoJi1_wRWa0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
    boolean result = beanInfo.isAtomic();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtomic2_AxUc2_ZuSk0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, null);
    boolean result = beanInfo.isDynamic();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDynamicPropertyHandlerClass_pQLI0_OFZI1() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
    boolean result = beanInfo.isDynamic();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDynamicPropertyHandlerClass2_BNyv2_Fchy0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, null);
    boolean result = beanInfo.isDynamic();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithClassAndDynamicPropertyHandlerClass_ZqYD2_OSbL0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, null);
    String result = beanInfo.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptor1_qOLF0_tDtQ0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
    PropertyDescriptor propertyDescriptor = beanInfo.getPropertyDescriptor("propertyName");
    assertNull(propertyDescriptor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicTrue_jfqf0_sMar0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
    boolean result = beanInfo.isDynamic();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicFalse_ODsD1_pYDL1() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
    boolean result = beanInfo.isDynamic();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithDynamicProperties_hJtT2_rPUf0() {
    try {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.forName("java.util.HashMap"), null);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        Assertions.assertNotNull(propertyDescriptors);
    } catch (ClassNotFoundException e) {
        throw new AssertionError("Class not found", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForInterface_zhYF3_cCEE0() {
    try {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.forName("java.io.Serializable"), false);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        Assertions.assertNotNull(propertyDescriptors);
        Assertions.assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    } catch (ClassNotFoundException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithoutProperties_YYax1() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotNull(propertyDescriptors);
    Assertions.assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
}
}