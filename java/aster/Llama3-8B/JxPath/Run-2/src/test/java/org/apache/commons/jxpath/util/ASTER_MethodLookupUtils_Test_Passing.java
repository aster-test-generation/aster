/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MethodLookupUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorExactMatch_AaPh0() {
    Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[] { "hello" });
    assertEquals(Constructor.class, constructor.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorAmbiguous_GJOX2() {
    try {
        MethodLookupUtils.lookupConstructor(String.class, new Object[] { "hello", "world" });
        fail("Expected JXPathException");
    } catch (JXPathException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorAmbiguous_rvvf3() {
    try {
       MethodLookupUtils.lookupConstructor(String.class, new Object[] {"hello", "world"});
        fail("Expected JXPathException");
    } catch (JXPathException e) {
        assertEquals("Ambiguous constructor [hello, world]", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorNoParameter_pryx5() {
    Constructor constructor =MethodLookupUtils.lookupConstructor(String.class, new Object[0]);
    assertEquals(Constructor.class, constructor.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNullParameters_Qnyd0() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getMethod", null);
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodEmptyParameters_BYbk1() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getMethod", new Object[0]);
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNoMatchingMethod_PHym7() {
        Method method = MethodLookupUtils.lookupMethod(Object.class, "nonExistingMethod", new Object[] { Integer.valueOf(1) });
        assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLookupConstructorNullTargetClass_RUMB9_fid1() {
    try {
       MethodLookupUtils.lookupConstructor(null, new Object[] {"hello"});
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
}