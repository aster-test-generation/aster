/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
private VariablePointer variablepointer;
@Mock
    private JXPathContext jXPathContext;
@Mock
    private AbstractFactory abstractFactory;
@Mock
    private NodePointer nodePointer;
private Variables variables;
private boolean actual;
private QName name;
private NodePointer valuePointer;
@Mock
    private Variables mockVariables;
@Mock
    private NodeTest nodeTest;
@Mock
    private Object object;
@Mock
    private KeywordVariables keywordVariables;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_0() throws Exception{
        variablepointer = new VariablePointer(new QName("prefix", "localName"));
        actual = true;
        // Arrange
        when(jXPathContext.createPath("xpath")).thenReturn(nodePointer);
        // Act
        NodePointer result = variablepointer.createPath(jXPathContext, object);
        // Assert
        assertEquals(nodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueUndefinedVariable_RKoM0() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        variablePointer.setValue(null);
        assertEquals(null, variablePointer.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueCollectionIndex_eIOM1() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        Object collection = new Object();
        variablePointer.setValue(collection);
        assertEquals(collection, variablePointer.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildNullContext_fZOG4() throws Exception {
    VariablePointer variablePointer = new VariablePointer(new QName("name"));
    try {
        variablePointer.createChild(null, new QName("name"), 0);
        Assertions.fail();
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariables_ContextIsNull_nTYS0() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("qualifiedName"));
        JXPathContext context = null;
        variablePointer.findVariables(context);
        assertEquals(true, variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionNullValue_jBwB0() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertFalse(variablePointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNodeWholeCollection_pxCD0() throws Exception {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    Object immediateNode = variablePointer.getImmediateNode();
    assertEquals(immediateNode, ValueUtils.getValue(variablePointer.getBaseValue()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNodeIndex_NHFI1() throws Exception {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    Object immediateNode = variablePointer.getImmediateNode();
    assertEquals(immediateNode, ValueUtils.getValue(variablePointer.getBaseValue(), 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_UFEV0() throws Exception {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NodeIterator nodeIterator = variablePointer.attributeIterator(qName);
        assertNotNull(nodeIterator);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithKeywordVariables_SWCA1() throws Exception {
        QName qName = new QName("prefix", "localName");
        KeywordVariables keywordVariables = new KeywordVariables("keyword", null);
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        NodeIterator nodeIterator = variablePointer.attributeIterator(qName);
        assertNotNull(nodeIterator);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_YoAF0() throws Exception {
        QName qName = new QName("prefix", "localName");
        KeywordVariables keywordVariables = new KeywordVariables("keyword", null);
        VariablePointer variablePointer = new VariablePointer(qName);
        variablePointer.setIndex(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_MrAt0() throws Exception {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        QName result = variablePointer.getName();
        assertEquals(qName, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameQName_ADbR1() throws Exception {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        QName result = variablePointer.getName();
        assertEquals(qName, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() throws Exception {
        nodePointer = mock(NodePointer.class);
        nodeTest = mock(NodeTest.class);
        // Arrange
        NodeIterator expectedNodeIterator = mock(NodeIterator.class);
        when(nodePointer.childIterator(nodeTest, false, null)).thenReturn(expectedNodeIterator);
        // Act
        NodeIterator actualNodeIterator = variablepointer.childIterator(nodeTest, false, nodePointer);
        // Assert
        assertEquals(expectedNodeIterator, actualNodeIterator);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthTrue_rhzN0() throws Exception {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        int length = variablePointer.getLength();
        assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthFalse_gMzF1() throws Exception {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        int length = variablePointer.getLength();
        assertEquals(0, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNullValue_Wkgw0() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("qname"));
        assertTrue(variablePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_bxns0() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        NodeIterator result = variablePointer.namespaceIterator();
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithKeywordVariables_siJY1() throws Exception {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", "object");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("prefix", "localName"));
        NodeIterator result = variablePointer.namespaceIterator();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_GrEy0() throws Exception {
    VariablePointer pointer = new VariablePointer(new QName("test", "test"));
    assertEquals(true, pointer.equals(pointer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_JVRI1() throws Exception {
    VariablePointer pointer = new VariablePointer(new QName("test", "test"));
    assertEquals(false, pointer.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_sKle2() throws Exception {
    VariablePointer pointer = new VariablePointer(new QName("test", "test"));
    assertEquals(false, pointer.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentVariables_fAvQ3() throws Exception {
    VariablePointer pointer1 = new VariablePointer(new QName("test", "test"));
    VariablePointer pointer2 = new VariablePointer(new KeywordVariables("test", "test"), new QName("test", "test"));
    assertEquals(false, pointer1.equals(pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_tZzE4() throws Exception {
    VariablePointer pointer1 = new VariablePointer(new QName("test", "test"));
    VariablePointer pointer2 = new VariablePointer(new QName("test2", "test"));
    assertEquals(false, pointer1.equals(pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObjectButDifferentState_IVYP5() throws Exception {
    VariablePointer pointer1 = new VariablePointer(new QName("test", "test"));
    VariablePointer pointer2 = new VariablePointer(new QName("test", "test"));
    assertEquals(true, pointer1.equals(pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveWholeCollection_HcEx0() throws Exception {
    VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
    variablePointer.remove();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_FnWF0() throws Exception {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertTrue(variablePointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer2_NPXz1() throws Exception {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertTrue(variablePointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer3_QFvp2() throws Exception {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", "object");
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertTrue(variablePointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer4_LkNV3() throws Exception {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", "object");
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertTrue(variablePointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer5_ARmU4() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertFalse(variablePointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer6_ZmAp5() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("qualifiedName"));
        assertFalse(variablePointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer7_DUit6() throws Exception {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", "object");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("prefix", "localName"));
        assertFalse(variablePointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer8_Hdpb7() throws Exception {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", "object");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("qualifiedName"));
        assertFalse(variablePointer.isContainer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWholeCollection_qRJV0() throws Exception {
    VariablePointer variablePointer = new VariablePointer(new QName("qualifiedName"));
    String result = variablePointer.asPath();
    assertEquals("$qualifiedName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithPrefixAndLocalName_WcnC4() throws Exception {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    String result = variablePointer.asPath();
    assertEquals("$prefix:localName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithKeywordVariables_Vara5() throws Exception {
    KeywordVariables keywordVariables = new KeywordVariables("keyword", "object");
    QName qName = new QName("qualifiedName");
    VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
    String result = variablePointer.asPath();
    assertEquals("$qualifiedName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_yPHX0() throws Exception {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualWithQName_ViCs1() throws Exception {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualWithKeywordVariables_BsQK2() throws Exception {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", "object");
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualWithNullQName_jhvN3() throws Exception {
        VariablePointer variablePointer = new VariablePointer(null);
        assertFalse(variablePointer.isActual());
    }
}