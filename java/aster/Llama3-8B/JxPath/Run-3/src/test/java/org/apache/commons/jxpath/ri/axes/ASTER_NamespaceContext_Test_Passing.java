/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceContext_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionLessThanCurrentPosition_JUvb0() throws Exception {
        NamespaceContext context = new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        context.setPosition(0);
        assertTrue(context.getPosition() == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionGreaterThanCurrentPosition_vQSw2() throws Exception {
        NamespaceContext context = new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        context.setPosition(1);
        assertTrue(context.getPosition() == 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionGreaterThanCurrentPositionAndReset_ddBk3() throws Exception {
        NamespaceContext context = new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        context.setPosition(2);
        assertTrue(context.getPosition() == 2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_DwVF0() throws Exception {
        SelfContext parentContext = new SelfContext(null, null);
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeTest);
        NodePointer result = namespaceContext.getCurrentNodePointer();
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_setStartedFalse_nodeTestNotInstanceOfNodeNameTest_pUSV0() throws Exception {
        SelfContext parentContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, new NodeTypeTest(1));
        boolean result = namespaceContext.nextNode();
        assertEquals(false, result);
}
}