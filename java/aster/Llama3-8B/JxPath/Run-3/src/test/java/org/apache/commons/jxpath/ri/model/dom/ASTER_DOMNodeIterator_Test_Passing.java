/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Node;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodeIterator_Test_Passing {
@Mock
    private Node node;
@Mock
    private NodePointer nodePointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private VariablePointer variablePointer;
@Mock
    private KeywordVariables keywordVariables;
@InjectMocks
    private DOMNodeIterator domNodeIterator;
private int position = 0;
private Node child = null;
private NodePointer parent;
private DOMNodeIterator domnodeiterator;
private NodePointer nodepointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPositionDefault() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Verify the default position
        assertEquals(0, domNodeIterator.getPosition());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_1() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(NodePointer.class);
        domNodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        keywordVariables = mock(KeywordVariables.class);
        variablePointer = mock(VariablePointer.class);
        domnodeiterator = new DOMNodeIterator(domNodePointer, nodeTypeTest, false, domNodePointer);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        // Test setPosition to a position that is within the range of the node's children
        domnodeiterator.setPosition(1);
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getNextSibling();
        verify(node, times(1)).getLastChild();
        verify(node, times(1)).getPreviousSibling();
        // Test setPosition to a position that is at the start of the node's children
        domnodeiterator.setPosition(0);
        verify(node, times(1)).getFirstChild();
        verify(node, times(0)).getNextSibling();
        verify(node, times(0)).getLastChild();
        verify(node, times(0)).getPreviousSibling();
        // Test setPosition to a position that is at the end of the node's children
        domnodeiterator.setPosition(1);
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getNextSibling();
        verify(node, times(1)).getLastChild();
        verify(node, times(1)).getPreviousSibling();
        // Test setPosition to a position that is beyond the range of the node's children
        domnodeiterator.setPosition(2);
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getNextSibling();
        verify(node, times(1)).getLastChild();
        verify(node, times(1)).getPreviousSibling();
        // Test setPosition to a position that is before the start of the node's children
        domnodeiterator.setPosition(-1);
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getNextSibling();
        verify(node, times(1)).getLastChild();
        verify(node, times(1)).getPreviousSibling();
        assertEquals(1, domnodeiterator.getPosition());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_2() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(NodePointer.class);
        domNodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        keywordVariables = mock(KeywordVariables.class);
        variablePointer = mock(VariablePointer.class);
        domnodeiterator = new DOMNodeIterator(domNodePointer, nodeTypeTest, false, domNodePointer);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        // Test setPosition to a position that is within the range of the node's children
        domnodeiterator.setPosition(1);
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getNextSibling();
        verify(node, times(1)).getLastChild();
        verify(node, times(1)).getPreviousSibling();
        // Test setPosition to a position that is at the start of the node's children
        domnodeiterator.setPosition(0);
        verify(node, times(1)).getFirstChild();
        verify(node, times(0)).getNextSibling();
        verify(node, times(0)).getLastChild();
        verify(node, times(0)).getPreviousSibling();
        // Test setPosition to a position that is at the end of the node's children
        domnodeiterator.setPosition(1);
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getNextSibling();
        verify(node, times(1)).getLastChild();
        verify(node, times(1)).getPreviousSibling();
        // Test setPosition to a position that is beyond the range of the node's children
        domnodeiterator.setPosition(2);
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getNextSibling();
        verify(node, times(1)).getLastChild();
        verify(node, times(1)).getPreviousSibling();
        // Test setPosition to a position that is before the start of the node's children
        domnodeiterator.setPosition(-1);
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getNextSibling();
        verify(node, times(1)).getLastChild();
        verify(node, times(1)).getPreviousSibling();
        assertEquals(0, domnodeiterator.getPosition());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointer() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        parent = mock(NodePointer.class);
        domnodeiterator = new DOMNodeIterator(parent, new NodeTypeTest(1), false, null);
        when(nodepointer.getNode()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getLastChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        NodePointer result = domnodeiterator.getNodePointer();
        assertEquals(new DOMNodePointer(parent, node), result);
    }
}