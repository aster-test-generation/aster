/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.jsp.PageContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PageScopeContext_Test_Passing {
PageContext pageContext;
PageScopeContext pageScopeContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttribute() throws Exception {
        pageContext = mock(PageContext.class);
        pageScopeContext = new PageScopeContext(pageContext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pageScopeContext, pageContext);
        // Arrange
        String attribute = "testAttribute";
        Object attributeValue = "testAttributeValue";
        when(pageContext.getAttribute(attribute, PageContext.PAGE_SCOPE)).thenReturn(attributeValue);
        // Act
        Object result = pageScopeContext.getAttribute(attribute);
        // Assert
        assertEquals(attributeValue, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttribute_bdng0() throws Exception {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttribute(anyString(), anyInt())).thenReturn("attributeValue");
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object attribute = pageScopeContext.getAttribute("attribute");
        assertEquals("attributeValue", attribute);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNull_PSmg1() throws Exception {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttribute(anyString(), anyInt())).thenReturn(null);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object attribute = pageScopeContext.getAttribute("attribute");
        assertNull(attribute);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAttribute() throws Exception {
        pageContext = mock(PageContext.class);
        pageScopeContext = new PageScopeContext(pageContext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pageScopeContext, pageContext);
        String attribute = "testAttribute";
        Object value = "testValue";
        pageScopeContext.setAttribute(attribute, value);
        verify(pageContext).setAttribute(eq(attribute), eq(value), eq(PageContext.PAGE_SCOPE));
    }
}