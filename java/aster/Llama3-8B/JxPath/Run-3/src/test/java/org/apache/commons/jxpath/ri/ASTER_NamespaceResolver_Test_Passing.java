/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import java.util.HashMap;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
@Mock
    private NamespaceResolver parent;
private boolean sealed;
NamespaceResolver namespaceResolver;
@Mock
    private NodePointer nodePointer;
@Mock
    private NodeIterator nodeIterator;
@Mock
    private Map<String, String> reverseMap;
private NamespaceResolver namespaceresolver;
@Mock
    private Map<String, String> namespaceMap;
@Mock
    private NamespaceResolver pointer;
@Mock
    private Object mockObject;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testseal() throws Exception{
        sealed = false;
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        Assertions.assertTrue(sealed);
        if (parent != null) {
            Mockito.verify(parent).seal();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetNamespaceContextPointer() throws Exception {
        namespaceResolver = new NamespaceResolver();
        // Create a mock object for NodePointer
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        // Set the namespace context pointer
        namespaceResolver.setNamespaceContextPointer(nodePointer);
        // Verify that the namespace context pointer has been set
        Mockito.verify(namespaceResolver).setNamespaceContextPointer(nodePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithParent_cGff0_1() throws Exception {
        NamespaceResolver parent = new NamespaceResolver(null);
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertEquals(true, resolver.isSealed());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithParent_cGff0_2() throws Exception {
        NamespaceResolver parent = new NamespaceResolver(null);
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertEquals(true, parent.isSealed());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithoutParent_zDEq1() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver(null);
        resolver.seal();
        assertEquals(true, resolver.isSealed());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Arrange
        String namespaceURI = "http://example.com";
        String expectedPrefix = "prefix";
        // Act
        String actualPrefix = NamespaceResolver.getPrefix(nodePointer, namespaceURI);
        // Assert
        Mockito.verify(nodePointer, Mockito.times(1)).namespaceIterator();
        Mockito.verify(nodeIterator, Mockito.times(1)).setPosition(Mockito.anyInt());
        Mockito.verify(nodePointer, Mockito.times(1)).getName();
        Mockito.verify(nodePointer, Mockito.times(1)).getNamespaceURI();
        Mockito.verify(nodePointer, Mockito.times(1)).getParent();
        Mockito.verifyNoMoreInteractions(nodePointer, nodeIterator);
        assertEquals(expectedPrefix, actualPrefix);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace() throws Exception {
        namespaceresolver = new NamespaceResolver();
        MockitoAnnotations.initMocks(this);
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        namespaceresolver.registerNamespace(prefix, namespaceURI);
        Mockito.verify(namespaceMap).put(prefix, namespaceURI);
        Mockito.verify(reverseMap).put(namespaceURI, prefix);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixNullPrefix_LxUx0() throws Exception {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixPrefixFound_WLEC1() throws Exception {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        namespaceResolver.reverseMap.put("http://example.com", "prefix");
        String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("prefix", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixPrefixNotFoundParent_jTOR2() throws Exception {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver());
        String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixNullPointer_uIFk0() throws Exception {
        assertNull(NamespaceResolver.getPrefix(null, "http://example.com"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_withExternallyRegisteredPrefix() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        String namespaceURI = "testNamespace";
        String prefix = "testPrefix";
        when(namespaceresolver.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(prefix);
        assertEquals(prefix, namespaceresolver.getPrefix(namespaceURI));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_withoutPointer() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        String namespaceURI = "testNamespace";
        String prefix = "testPrefix";
        when(namespaceresolver.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(null);
        assertNull(namespaceresolver.getPrefix(namespaceURI));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_PrefixFound_mrwm0() throws Exception {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        namespaceResolver.namespaceMap.put("prefix", "uri");
        assertEquals("uri", namespaceResolver.getExternallyRegisteredNamespaceURI("prefix"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_PrefixNotFound_OSgK1() throws Exception {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        assertEquals(null, namespaceResolver.getExternallyRegisteredNamespaceURI("prefix"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_PrefixFoundInParent_mqrj2() throws Exception {
        NamespaceResolver parent = new NamespaceResolver(null);
        parent.namespaceMap.put("prefix", "uri");
        NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
        assertEquals("uri", namespaceResolver.getExternallyRegisteredNamespaceURI("prefix"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_withExternallyRegisteredNamespaceURI() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        String prefix = "prefix";
        String uri = "uri";
        when(namespaceresolver.getExternallyRegisteredNamespaceURI(prefix)).thenReturn(uri);
        assertEquals(uri, namespaceresolver.getNamespaceURI(prefix));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_withoutExternallyRegisteredNamespaceURI() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        String prefix = "prefix";
        String uri = "uri";
        when(pointer.getNamespaceURI(prefix)).thenReturn(uri);
        assertEquals(uri, namespaceresolver.getNamespaceURI(prefix));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_withNullExternallyRegisteredNamespaceURI() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        String prefix = "prefix";
        when(namespaceresolver.getExternallyRegisteredNamespaceURI(prefix)).thenReturn(null);
        assertEquals(null, namespaceresolver.getNamespaceURI(prefix));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixExternallyRegisteredPrefixNotNull_bkRh0() throws Exception {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        String namespaceURI = "testNamespace";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        assertEquals(namespaceURI, prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixExternallyRegisteredPrefixNull_kHLk1() throws Exception {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String namespaceURI = "testNamespace";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        assertEquals(null, prefix);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIExternallyRegistered_TYmO0() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver(null));
        String uri = resolver.getNamespaceURI("prefix");
        assertEquals("externally registered uri", uri);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIPointer_DzfS1() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver(null);
        String uri = resolver.getNamespaceURI("prefix");
        assertEquals("pointer uri", uri);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURINull_vAPB2() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver(null);
        String uri = resolver.getNamespaceURI(null);
        assertEquals(null, uri);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointerNullPointer_wQyr0() throws Exception {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        Pointer result = namespaceResolver.getNamespaceContextPointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointerNotNullPointer_uMrB1() throws Exception {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        Pointer result = namespaceResolver.getNamespaceContextPointer();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_rrZk0() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver(null));
        assertFalse(resolver.isSealed());
    }
}