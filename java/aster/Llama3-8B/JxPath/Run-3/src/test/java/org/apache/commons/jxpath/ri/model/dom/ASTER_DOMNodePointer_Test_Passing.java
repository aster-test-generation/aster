/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.TypeUtils;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ProcessingInstruction;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.AbstractFactory;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Passing {
private Node node;
private DOMNodePointer domnodepointer;
private NodePointer nodepointer;
private NamedNodeMap namednodemap;
private NodeTest nodeTest;
private Attr attr;
private NodeList nodelist;
private Document document;
private JXPathContext jxpathcontext;
private QName qname;
private AbstractFactory abstractFactory;
@Mock
    private Locale locale;
@Mock
    private Element element;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private String id;
@Mock
    private QName qName;
private NodePointer nodePointer;
private NodeIterator nodeIterator;
private String defaultNamespace;
private Node parentNode;
private Node previousSibling;
private Node childNode;
private VariablePointer variablePointer;
private KeywordVariables keywordVariables;
@Mock
    private Node mockNode;
@Mock
    private NamespaceResolver superNamespaceResolver;
@Mock
    private NamespaceResolver localNamespaceResolver;
@Mock
    private Pointer namespaceContextPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_1() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = new DOMNodePointer(node, Locale.US);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(namednodemap.getLength()).thenReturn(2);
        when(namednodemap.item(0)).thenReturn(node);
        when(namednodemap.item(1)).thenReturn(node);
        int result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(namednodemap.item(0)).thenReturn(node);
        when(namednodemap.item(1)).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(namednodemap.item(0)).thenReturn(mock(Node.class));
        when(namednodemap.item(1)).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(0, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_2() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = new DOMNodePointer(node, Locale.US);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(namednodemap.getLength()).thenReturn(2);
        when(namednodemap.item(0)).thenReturn(node);
        when(namednodemap.item(1)).thenReturn(node);
        int result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(namednodemap.item(0)).thenReturn(node);
        when(namednodemap.item(1)).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(namednodemap.item(0)).thenReturn(mock(Node.class));
        when(namednodemap.item(1)).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(-1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_3() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = new DOMNodePointer(node, Locale.US);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(namednodemap.getLength()).thenReturn(2);
        when(namednodemap.item(0)).thenReturn(node);
        when(namednodemap.item(1)).thenReturn(node);
        int result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(namednodemap.item(0)).thenReturn(node);
        when(namednodemap.item(1)).thenReturn(mock(Node.class));
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(namednodemap.item(0)).thenReturn(mock(Node.class));
        when(namednodemap.item(1)).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_TextNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node).setNodeValue("value");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_CDATA_SECTION_NODE() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node).setNodeValue("value");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ElementNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node, times(1)).appendChild(any(Node.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_DocumentNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node, times(1)).appendChild(any(Node.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullValue() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        domnodepointer.setValue(null);
        verify(node, times(1)).getParentNode().removeChild(node);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_EmptyString() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("");
        domnodepointer.setValue("");
        verify(node, times(1)).getParentNode().removeChild(node);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Arrange
        Object expected = node;
        // Act
        Object actual = domnodepointer.getImmediateNode();
        // Assert
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_YxlS0() throws Exception {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        assertFalse(domNodePointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindEnclosingAttribute() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = mock(DOMNodePointer.class);
        // Arrange
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttribute("attrName")).thenReturn("attributeValue");
        // Act
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        // Assert
        assertEquals("attributeValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindEnclosingAttribute_NullNode() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = mock(DOMNodePointer.class);
        // Arrange
        when(node).thenReturn(null);
        // Act
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        // Assert
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindEnclosingAttribute_NodeNotElement() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = mock(DOMNodePointer.class);
        // Arrange
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        // Act
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        // Assert
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Act
        int hashCode = domnodepointer.hashCode();
        // Assert
        verify(node).hashCode();
        assertEquals(node.hashCode(), hashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttributeNullNode_dpry0() throws Exception {
    String result =DOMNodePointer.findEnclosingAttribute(null, "attrName");
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() throws Exception {
        MockitoAnnotations.initMocks(this);
        DOMNodePointer domnodepointer = new DOMNodePointer(node, locale, id);
        QName name = new QName("qualifiedName");
        NodeIterator expected = new DOMAttributeIterator(domnodepointer, name);
        NodeIterator actual = domnodepointer.attributeIterator(name);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ElementNode() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("prefix");
        when(node.getLocalName()).thenReturn("localName");
        QName expected = new QName("prefix", "localName");
        QName actual = domNodePointer.getName();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstructionNode() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
        QName expected = new QName(null, "target");
        QName actual = domNodePointer.getName();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_OtherNodeType() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        QName expected = null;
        QName actual = domNodePointer.getName();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Arrange
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        // Act
        String namespaceURI = domnodepointer.getNamespaceURI();
        // Assert
        assertEquals("namespaceURI", namespaceURI);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator() throws Exception {
        nodeTest = mock(NodeTest.class);
        nodePointer = mock(NodePointer.class);
        nodeIterator = mock(NodeIterator.class);
        domnodepointer = new DOMNodePointer(mock(Node.class), mock(Locale.class), "id");
        // Arrange
        when(nodePointer.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(nodePointer);
        when(domnodepointer.childIterator(nodeTest, true, nodePointer)).thenReturn(nodeIterator);
        // Act
        NodeIterator result = domnodepointer.childIterator(nodeTest, true, nodePointer);
        // Assert
        assertEquals(nodeIterator, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() throws Exception {
        MockitoAnnotations.initMocks(this);
        DOMNodePointer domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        NodeIterator expected = Mockito.mock(NodeIterator.class);
        Mockito.when(domnodepointer.namespaceIterator()).thenReturn(expected);
        // Act
        NodeIterator actual = domnodepointer.namespaceIterator();
        // Assert
        Mockito.verify(domnodepointer).namespaceIterator();
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_true() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // given
        when(node.hasChildNodes()).thenReturn(false);
        // when
        boolean result = domnodepointer.isLeaf();
        // then
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_false() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // given
        when(node.hasChildNodes()).thenReturn(true);
        // when
        boolean result = domnodepointer.isLeaf();
        // then
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateAttribute() throws Exception {
        element = mock(Element.class);
        domnodepointer = new DOMNodePointer(element, Locale.US, "id");
        jxpathcontext = mock(JXPathContext.class);
        qname = new QName("prefix", "localName");
        // Act
        NodePointer result = domnodepointer.createAttribute(jxpathcontext, qname);
        // Assert
        verify(element, times(1)).setAttribute(qname.getName(), "");
        verifyNoMoreInteractions(element);
        assertEquals(result, domnodepointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() throws Exception {
        MockitoAnnotations.initMocks(this);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        // Act and Assert
        assertEquals(domNodePointer, domNodePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullObject_ReturnsFalse() throws Exception {
        MockitoAnnotations.initMocks(this);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        // Act and Assert
        assertNotEquals(domNodePointer, null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObject_ReturnsFalse() throws Exception {
        MockitoAnnotations.initMocks(this);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        // Act and Assert
        DOMNodePointer anotherDomNodePointer = new DOMNodePointer(node, Locale.US, "id");
        assertNotEquals(domNodePointer, anotherDomNodePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_ReturnsTrue() throws Exception {
        MockitoAnnotations.initMocks(this);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        // Act and Assert
        DOMNodePointer sameDomNodePointer = new DOMNodePointer(node, Locale.US, "id");
        assertEquals(domNodePointer, sameDomNodePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_ReturnsFalse() throws Exception {
        MockitoAnnotations.initMocks(this);
        domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        // Act and Assert
        Node anotherNode = Mockito.mock(Node.class);
        DOMNodePointer anotherDomNodePointer = new DOMNodePointer(anotherNode, Locale.US, "id");
        assertNotEquals(domNodePointer, anotherDomNodePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_DocumentNode() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node instanceof Document).thenReturn(true);
        when(element.getNamespaceURI()).thenReturn("uri");
        assertEquals("uri", DOMNodePointer.getNamespaceURI(node));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_ElementNode() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node instanceof Element).thenReturn(true);
        when(element.getNamespaceURI()).thenReturn("uri");
        assertEquals("uri", DOMNodePointer.getNamespaceURI(node));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_ElementNode_NullNamespaceURI() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node instanceof Element).thenReturn(true);
        when(element.getNamespaceURI()).thenReturn(null);
        assertEquals(null, DOMNodePointer.getNamespaceURI(node));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_ElementNode_FoundAttr() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node instanceof Element).thenReturn(true);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("uri");
        assertEquals("uri", DOMNodePointer.getNamespaceURI(node));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_ElementNode_NotFoundAttr() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node instanceof Element).thenReturn(true);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        assertEquals(null, DOMNodePointer.getNamespaceURI(node));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has local name
        when(node.getLocalName()).thenReturn("localName");
        // Test case 2: Node does not have local name
        when(node.getLocalName()).thenReturn(null);
        // Test case 3: Node has colon in name
        when(node.getNodeName()).thenReturn("prefix:localName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_2() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has local name
        when(node.getLocalName()).thenReturn("localName");
        // Test case 2: Node does not have local name
        when(node.getLocalName()).thenReturn(null);
        // Test case 3: Node has colon in name
        when(node.getNodeName()).thenReturn("prefix:localName");
        assertEquals("nodeName", DOMNodePointer.getLocalName(node));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_CommentNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(((Comment) node).getData()).thenReturn("   comment text   ");
        assertEquals("comment text", domnodepointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ElementNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNodeName()).thenReturn("elementName");
        assertEquals("elementName", domnodepointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_TextNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(node.getNodeValue()).thenReturn("textValue");
        assertEquals("textValue", domnodepointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node).thenReturn(null);
        assertNull(domnodepointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI() throws Exception{
        node = mock(Node.class);
        defaultNamespace = "http://example.com";
        when(node.getParentNode()).thenReturn(node);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn(defaultNamespace);
        DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        assertEquals(defaultNamespace, domnodepointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI_Empty() throws Exception{
        node = mock(Node.class);
        defaultNamespace = "http://example.com";
        when(node.getParentNode()).thenReturn(node);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn(defaultNamespace);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(null);
        DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        assertNull(domnodepointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI_Null() throws Exception{
        node = mock(Node.class);
        defaultNamespace = "http://example.com";
        when(node.getParentNode()).thenReturn(node);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn(defaultNamespace);
        when(node.getParentNode()).thenReturn(null);
        DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        assertNull(domnodepointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_NullLanguage_ReturnsSuperIsLanguage() throws Exception {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        // Arrange
        String lang = null;
        // Act
        boolean result = domNodePointer.isLanguage(lang);
        // Assert
        verify(domNodePointer).isLanguage(lang);
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_EmptyLanguage_ReturnsSuperIsLanguage() throws Exception {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        // Arrange
        String lang = "";
        // Act
        boolean result = domNodePointer.isLanguage(lang);
        // Assert
        verify(domNodePointer).isLanguage(lang);
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_LanguageNotStartingWithLang_ReturnsFalse() throws Exception {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        // Arrange
        String lang = "en-US";
        // Act
        boolean result = domNodePointer.isLanguage(lang);
        // Assert
        verify(domNodePointer).isLanguage(lang);
        assertEquals(false, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_LanguageStartingWithLang_ReturnsTrue() throws Exception {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        // Arrange
        String lang = "en";
        // Act
        boolean result = domNodePointer.isLanguage(lang);
        // Assert
        verify(domNodePointer).isLanguage(lang);
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_Null_nRcU0() throws Exception {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getDefaultNamespaceURI();
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Test case 1: Node has a prefix
        String prefix = "prefix";
        when(node.getPrefix()).thenReturn(prefix);
        // Test case 2: Node does not have a prefix
        when(node.getPrefix()).thenReturn(null);
        // Test case 3: Node has a colon in its name
        String nodeName = "namespace:element";
        when(node.getNodeName()).thenReturn(nodeName);
        // Test case 4: Node does not have a colon in its name
        nodeName = "element";
        when(node.getNodeName()).thenReturn(nodeName);
        assertEquals(prefix, DOMNodePointer.getPrefix(node));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Test case 1: Node has a prefix
        String prefix = "prefix";
        when(node.getPrefix()).thenReturn(prefix);
        // Test case 2: Node does not have a prefix
        when(node.getPrefix()).thenReturn(null);
        // Test case 3: Node has a colon in its name
        String nodeName = "namespace:element";
        when(node.getNodeName()).thenReturn(nodeName);
        // Test case 4: Node does not have a colon in its name
        nodeName = "element";
        when(node.getNodeName()).thenReturn(nodeName);
        assertEquals(null, DOMNodePointer.getPrefix(node));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_3() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Test case 1: Node has a prefix
        String prefix = "prefix";
        when(node.getPrefix()).thenReturn(prefix);
        // Test case 2: Node does not have a prefix
        when(node.getPrefix()).thenReturn(null);
        // Test case 3: Node has a colon in its name
        String nodeName = "namespace:element";
        when(node.getNodeName()).thenReturn(nodeName);
        // Test case 4: Node does not have a colon in its name
        nodeName = "element";
        when(node.getNodeName()).thenReturn(nodeName);
        assertEquals("namespace", DOMNodePointer.getPrefix(node));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        String prefix = "prefix";
        NodePointer expected = new NamespacePointer(domnodepointer, prefix);
        NodePointer actual = domnodepointer.namespacePointer(prefix);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTest() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Arrange
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.getNodeName()).thenReturn(new QName("prefix", "localName"));
        when(nodeNameTest.getNamespaceURI()).thenReturn("namespaceURI");
        when(nodeNameTest.isWildcard()).thenReturn(true);
        // Act
        boolean result = DOMNodePointer.testNode(node, nodeNameTest);
        // Assert
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_ProcessingInstructionTest() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Arrange
        ProcessingInstructionTest processingInstructionTest = mock(ProcessingInstructionTest.class);
        when(processingInstructionTest.getTarget()).thenReturn("target");
        // Act
        boolean result = DOMNodePointer.testNode(node, processingInstructionTest);
        // Assert
        assertTrue(((ProcessingInstruction) node).getTarget().equals("target"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withId() throws Exception {
        node = mock(Node.class);
        parentNode = mock(Node.class);
        previousSibling = mock(Node.class);
        childNode = mock(Node.class);
        attr = mock(Attr.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        locale = mock(Locale.class);
        domnodepointer = new DOMNodePointer(node, locale, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        when(locale.toString()).thenReturn("locale");
        String expectedPath = "id('id')";
        String actualPath = domnodepointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withoutId() throws Exception {
        node = mock(Node.class);
        parentNode = mock(Node.class);
        previousSibling = mock(Node.class);
        childNode = mock(Node.class);
        attr = mock(Attr.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        locale = mock(Locale.class);
        domnodepointer = new DOMNodePointer(node, locale, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        when(locale.toString()).thenReturn("locale");
        String expectedPath = "/localName";
        String actualPath = domnodepointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_withParent() throws Exception {
        node = mock(Node.class);
        parentNode = mock(Node.class);
        previousSibling = mock(Node.class);
        childNode = mock(Node.class);
        attr = mock(Attr.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        locale = mock(Locale.class);
        domnodepointer = new DOMNodePointer(node, locale, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        when(locale.toString()).thenReturn("locale");
        DOMNodePointer parent = new DOMNodePointer(parentNode, locale, "parentId");
        when(domnodepointer.getParent()).thenReturn(parent);
        String expectedPath = "parentId/localName";
        String actualPath = domnodepointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeNullTest_IRSm0() throws Exception {
    boolean result =DOMNodePointer.testNode(null, null);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_EmptyPrefix() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        String namespace = domnodepointer.getNamespaceURI("");
        assertEquals(domnodepointer.getDefaultNamespaceURI(), namespace);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLPrefix() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xml")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com/xml");
        String namespace = domnodepointer.getNamespaceURI("xml");
        assertEquals("http://example.com/xml", namespace);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLNSPrefix() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com/xmlns");
        String namespace = domnodepointer.getNamespaceURI("xmlns");
        assertEquals("http://example.com/xmlns", namespace);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefix() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("custom")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com/custom");
        String namespace = domnodepointer.getNamespaceURI("custom");
        assertEquals("http://example.com/custom", namespace);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefixNotFound() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("custom")).thenReturn(null);
        String namespace = domnodepointer.getNamespaceURI("custom");
        assertEquals(NodePointer.UNKNOWN_NAMESPACE, namespace);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        node = mockNode;
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Act
        Object baseValue = domnodepointer.getBaseValue();
        // Assert
        assertEquals(node, baseValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_CustomPrefix_KImf4() throws Exception {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
    assertEquals("http://example.com", domNodePointer.getNamespaceURI("custom"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_CustomPrefix_UnknownNamespace_uklk5() throws Exception {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
    assertEquals(NodePointer.UNKNOWN_NAMESPACE, domNodePointer.getNamespaceURI("custom"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_CustomPrefix_NullNamespace_ehgo6() throws Exception {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
    assertEquals(null, domNodePointer.getNamespaceURI("custom"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_CustomPrefix_NamespaceFound_wixr7() throws Exception {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
    domNodePointer.getNamespaceURI("custom");
    assertEquals("http://example.com", domNodePointer.getNamespaceURI("custom"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualNull_KLFg2() throws Exception {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = null;
        boolean actual = domNodePointer.isActual();
        assertFalse(actual);
    }
}