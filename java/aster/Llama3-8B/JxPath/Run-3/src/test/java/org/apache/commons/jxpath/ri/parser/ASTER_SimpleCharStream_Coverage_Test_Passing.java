/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_XPjK0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        simpleCharStream.adjustBeginLineColumn(2, 3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImageBufposGreaterThanOrEqualToTokenBegin_RcYm0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.tokenBegin = 3;
        simpleCharStream.bufsize = 10;
        String result = simpleCharStream.GetImage();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImageBufposLessThanTokenBegin_vzsh1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 2;
        simpleCharStream.tokenBegin = 5;
        simpleCharStream.bufsize = 10;
        String result = simpleCharStream.GetImage();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountPositive_TLjQ0_1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.backup(5);
        assertEquals(5, simpleCharStream.inBuf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountZero_iPaZ2_1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.backup(0);
        assertEquals(0, simpleCharStream.inBuf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffNoWrapAround_FULv1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        simpleCharStream.ExpandBuff(false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffCatchBlock_lzIh10() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        try {
            simpleCharStream.ExpandBuff(true);
            fail("Expected exception");
        } catch (Error e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDone_BufferIsNull_vuvU0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.Done();
        assertNull(simpleCharStream.buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDone_BuflineIsNull_lwVP1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.Done();
        assertNull(simpleCharStream.bufline);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDone_BufcolumnIsNull_EdXY2() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.Done();
        assertNull(simpleCharStream.bufcolumn);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInit_BufferIsNotNull_BufferSizeIsDifferent_blHw1_zKNm0_1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    simpleCharStream.ReInit(new java.io.StringReader(""), 1, 1, 15);
    assertEquals(15, simpleCharStream.bufsize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInit_BufferIsNotNull_BufferSizeIsDifferent_blHw1_zKNm0_2() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    simpleCharStream.ReInit(new java.io.StringReader(""), 1, 1, 15);
    assertNotNull(simpleCharStream.buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInit_BufferIsNotNull_BufferSizeIsDifferent_blHw1_zKNm0_3() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    simpleCharStream.ReInit(new java.io.StringReader(""), 1, 1, 15);
    assertEquals(15, simpleCharStream.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInit_BufferIsNotNull_BufferSizeIsZero_EFJQ3_lQii0_1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    simpleCharStream.ReInit(new java.io.StringReader(""), 1, 1, 0);
    assertEquals(0, simpleCharStream.bufsize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnDefault_XvJL5_bnUx0_1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.bufpos = 0;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.bufline = new int[10];
    simpleCharStream.bufcolumn = new int[10];
    simpleCharStream.UpdateLineColumn('a');
    assertEquals(1, simpleCharStream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnDefault_XvJL5_bnUx0_2() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.bufpos = 0;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.bufline = new int[10];
    simpleCharStream.bufcolumn = new int[10];
    simpleCharStream.UpdateLineColumn('a');
    assertEquals(2, simpleCharStream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLFThenDefault_cSBQ6_Gpgn0_1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.bufpos = 0;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.UpdateLineColumn('\n');
    simpleCharStream.UpdateLineColumn('\f'); 
    simpleCharStream.UpdateLineColumn('\0'); // This line was missing
    assertEquals(2, simpleCharStream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLFThenDefault_cSBQ6_Gpgn0_4() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.bufpos = 0;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.UpdateLineColumn('\n');
    simpleCharStream.UpdateLineColumn('\f'); 
    simpleCharStream.UpdateLineColumn('\0'); // This line was missing
    assertEquals(2, simpleCharStream.column); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountPositive_TLjQ4090_2() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.backup(5);
        assertEquals(4090, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountNegative_jmFm1_2_fid1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.backup(-10);
        assertEquals(15, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountWrapAround_AkjY3_2_fid1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.backup(10);
        assertEquals(4091, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLF_fpGv0_xczI0_1_fid1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.bufpos = 0;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.UpdateLineColumn('\n');
    assertEquals(1, simpleCharStream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLFThenDefault_cSBQ6_Gpgn0_3_fid1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.bufpos = 0;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.UpdateLineColumn('\n');
    simpleCharStream.UpdateLineColumn('\f'); 
    simpleCharStream.UpdateLineColumn('\0'); // This line was missing
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDone_AllNull_yOMu3() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.Done();
        assertNull(simpleCharStream.buffer);
        assertNull(simpleCharStream.bufline);
        assertNull(simpleCharStream.bufcolumn);
    }
}