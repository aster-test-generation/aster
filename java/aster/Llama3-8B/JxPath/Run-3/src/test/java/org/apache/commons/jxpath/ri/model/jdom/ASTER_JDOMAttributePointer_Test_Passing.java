/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.TypeUtils;
import org.jdom.Attribute;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributePointer_Test_Passing {
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
private Attribute attr;
private JDOMAttributePointer jdomattributepointer;
@Mock
    private TypeUtils typeUtils;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private Attribute attribute;
private DOMNodePointer parent;
@Mock
    private DOMNodePointer jdomNodePointer;
private JDOMAttributePointer jdomAttributePointer;
@Mock
    private VariablePointer variablePointer;
@Mock
    private KeywordVariables keywordVariables;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Arrange
        String value = "testValue";
        String expectedValue = "testValue";
        // Act
        jdomattributepointer.setValue(value);
        // Assert
        verify(typeUtils).convert(value, String.class);
        verify(attr).setValue(expectedValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Arrange
        String expectedValue = "expectedValue";
        // Act
        when(attr.getValue()).thenReturn(expectedValue);
        // Assert
        assertEquals(expectedValue, jdomattributepointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(domNodePointer, attribute);
        // Arrange
        boolean expected = false;
        // Act
        boolean actual = jdomattributepointer.isCollection();
        // Assert
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Act
        Object immediateNode = jdomattributepointer.getImmediateNode();
        // Assert
        assertEquals(attr, immediateNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Arrange
        when(attr.hashCode()).thenReturn(123);
        // Act
        int result = jdomattributepointer.hashCode();
        // Assert
        assertEquals(123, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        jdomAttributePointer = new JDOMAttributePointer(jdomNodePointer, attr);
        // Arrange
        String expectedPrefix = "expectedPrefix";
        String expectedLocalName = "expectedLocalName";
        when(JDOMNodePointer.getPrefix(attr)).thenReturn(expectedPrefix);
        when(JDOMNodePointer.getLocalName(attr)).thenReturn(expectedLocalName);
        // Act
        QName actualName = jdomAttributePointer.getName();
        // Assert
        assertEquals(new QName(expectedPrefix, expectedLocalName), actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_Null() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Arrange
        when(attr.getNamespaceURI()).thenReturn(null);
        // Act
        String result = jdomattributepointer.getNamespaceURI();
        // Assert
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_Empty() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Arrange
        when(attr.getNamespaceURI()).thenReturn("");
        // Act
        String result = jdomattributepointer.getNamespaceURI();
        // Assert
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NotNull() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Arrange
        when(attr.getNamespaceURI()).thenReturn("http://example.com");
        // Act
        String result = jdomattributepointer.getNamespaceURI();
        // Assert
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_NullParent_BDLc0() throws Exception {
    JDOMAttributePointer pointer = new JDOMAttributePointer(null, null);
    String result = pointer.asPath();
    Assertions.assertEquals("@", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_EmptyParent_Qire1() throws Exception {
    JDOMAttributePointer pointer = new JDOMAttributePointer(new DOMNodePointer(null, Locale.US, "id"), null);
    String result = pointer.asPath();
    Assertions.assertEquals("@", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(mock(DOMNodePointer.class), attr);
        // Act
        Object baseValue = jdomattributepointer.getBaseValue();
        // Assert
        assertEquals(attr, baseValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception{
        JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(domNodePointer, attribute);
        jdomattributepointer = jdomattributepointer;
        // Arrange
        boolean expected = true;
        // Act
        boolean actual = jdomattributepointer.isActual();
        // Assert
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        boolean expected = true;
        // Act
        boolean actual = jdomattributepointer.isLeaf();
        // Assert
        assertEquals(expected, actual);
    }
}