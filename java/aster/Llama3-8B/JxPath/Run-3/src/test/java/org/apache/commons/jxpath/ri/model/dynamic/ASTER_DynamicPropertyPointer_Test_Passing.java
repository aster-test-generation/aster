/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPropertyPointer_Test_Passing {
@Mock
    private DynamicPropertyHandler handler;
@Mock
    private ValueUtils valueUtils;
@Mock
    private PageContextHandler pageContextHandler;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private VariablePointer variablePointer;
@Mock
    private KeywordVariables keywordVariables;
@Mock
    private QName qName;
@Mock
private String[] names;
private String name;
@Mock
    private JXPathContext jXPathContext;
@Mock
    private NodePointer nodePointer;
@Mock
    private AbstractFactory abstractFactory;
private String requiredPropertyName;
@Mock
    private Locale locale;
private DynamicPropertyPointer dynamicPropertyPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyName_NullName_kEru0() throws Exception {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, new PageContextHandler());
        String propertyName = dynamicPropertyPointer.getPropertyName();
        assertEquals("*", propertyName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyName_PropertyNamesEmpty_itwS1() throws Exception {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, new PageContextHandler());
        dynamicPropertyPointer.setPropertyIndex(-1);
        String propertyName = dynamicPropertyPointer.getPropertyName();
        assertEquals("*", propertyName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyName_PropertyNamesNotEmpty_dVoO2() throws Exception {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, new PageContextHandler());
        String[] propertyNames = new String[]{"property1", "property2"};
        dynamicPropertyPointer.setPropertyIndex(0);
        String propertyName = dynamicPropertyPointer.getPropertyName();
        assertEquals("property1", propertyName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyName_PropertyIndexOutOfRange_YTUM3() throws Exception {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, new PageContextHandler());
        dynamicPropertyPointer.setPropertyIndex(1);
        String propertyName = dynamicPropertyPointer.getPropertyName();
        assertEquals("*", propertyName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesNullHandler_Qmvx0() throws Exception {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        String[] result = dynamicPropertyPointer.getPropertyNames();
        assertArrayEquals(new String[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesEmptyNames_CQgw1() throws Exception {
        PageContextHandler handler = new PageContextHandler();
        String[] allNames = handler.getPropertyNames(null);
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, handler);
        String[] result = dynamicPropertyPointer.getPropertyNames();
        assertArrayEquals(allNames, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualProperty_ReturnsTrue() throws Exception {
        dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        // Act
        boolean result = dynamicPropertyPointer.isActualProperty();
        // Assert
        Assertions.assertTrue(result);
    }
}