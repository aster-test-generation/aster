/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.xml.DocumentContainer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ContainerPointer_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_ReturnsValueUtilsGetValueValue_bGWG0_Xbbp0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null));
    Object value = containerPointer.getImmediateNode();
    assertEquals(ValueUtils.getValue(value), value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_ReturnsValueUtilsGetValueValueWithIndex_MkkG1_FTQL1() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, Locale.US, null), new DocumentContainer(null));
    Object value = containerPointer.getImmediateNode();
    assertEquals(ValueUtils.getValue(value, 0), value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_ReturnsNull_WhenIndexIsNotValid_hbtj2_BPzQ0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null));
    Object value = containerPointer.getImmediateNode();
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_ReturnsNull_EXQA0_hCuI0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null));
    QName result = containerPointer.getName();
    assert(result == null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionNullValue_vOnj0_hpTo0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null));
    assertFalse(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionNotCollection_uzSR1_woZB0() {
    ContainerPointer containerPointer = new ContainerPointer(new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null)), null);
    Object value = new String("test");
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertFalse(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollection_iQbx2_bLGX0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null, null));
    Object value = new Integer[]{1, 2, 3};
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithNull_SrHH3_QZhV0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null));
    Object value = new Integer[]{1, 2, null, 3};
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithEmpty_FqQg4_zSbb0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null));
    Object value = new Integer[0];
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithTwoElements_MLpZ6_AkRU0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null));
    Object value = new Integer[]{1, 2};
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithFourElements_FEDF8_OeKt0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null));
    Object value = new Integer[]{1, 2, 3, 4};
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithFiveElements_axlp9_myxq0() {
    ContainerPointer containerPointer = new ContainerPointer(new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null)), null);
    Object value = new Integer[]{1, 2, 3, 4, 5};
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithSixElements_IFPS10_adyX0() {
    ContainerPointer containerPointer = new ContainerPointer(new ContainerPointer(null, new DocumentContainer(null)), null);
    Object value = new Integer[]{1, 2, 3, 4, 5, 6};
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithNineElements_sOIg13_OCIt0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null, null));
    Object value = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithTenElements_IlBv14_oAfD0() {
    ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null, null));
    Object value = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithSevenElements_dOWU11_xfyp0() {
    ContainerPointer containerPointer = new ContainerPointer(null, new DocumentContainer(null));
    Object value = new Integer[]{1, 2, 3, 4, 5, 6, 7};
    when(containerPointer.getBaseValue()).thenReturn(value);
    assertTrue(containerPointer.isCollection());
}
}