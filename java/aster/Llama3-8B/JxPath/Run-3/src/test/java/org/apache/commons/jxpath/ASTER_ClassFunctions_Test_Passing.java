/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassFunctions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNullNamespace_jiZy0() throws Exception {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction(null, "name", new Object[] {});
    Assertions.assertNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionDifferentNamespace_GqbB1() throws Exception {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("otherNamespace", "name", new Object[] {});
    Assertions.assertNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNullParameters_Ijab2() throws Exception {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("namespace", "name", null);
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNewMethod_KLHL3() throws Exception {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("namespace", "new", new Object[] {});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionStaticMethod_iZcv4() throws Exception {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("namespace", "method", new Object[] {});
    Assertions.assertNotNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNonExistingMethod_xUsk6() throws Exception {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("namespace", "nonExistingMethod", new Object[] {});
    Assertions.assertNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNullMethod_fGmq7() throws Exception {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("namespace", "method", null);
    Assertions.assertNull(function);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionEmptyParameters_LtLg8() throws Exception {
    ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
    Function function = classFunctions.getFunction("namespace", "method", new Object[0]);
    Assertions.assertNotNull(function);
}
}