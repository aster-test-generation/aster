/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Passing {
@Mock
    private JXPathContextReferenceImpl jxpathContextReferenceImpl;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private Locale locale;
@Mock
    private NodePointer nodePointer;
@Mock
    private KeywordVariables keywordVariables;
@Mock
    private QName qName;
@Mock
    private VariablePointer variablePointer;
RootContext rootcontext;
@Mock
    private JXPathContext jxpathContext;
@Mock
    private EvalContext evalContext;
@Mock
    private NodePointer pointer;
@Mock
    private NodeSet nodeSet;
@Mock
    private Function function;
private static int MAX_REGISTER = 4;
private int availableRegister = 0;
private Object[] registers;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception{
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Arrange
        int position = 1;
        // Act
        boolean result = rootcontext.setPosition(position);
        // Assert
        Mockito.verify(rootcontext, Mockito.times(1)).setPosition(position);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_1() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Test when register is available
        Object value = "Test Value";
        int result = rootcontext.setRegisteredValue(value);
        // Test when register is not available
        value = "Test Value 2";
        result = rootcontext.setRegisteredValue(value);
        // Test when register is available again
        value = "Test Value 3";
        result = rootcontext.setRegisteredValue(value);
        assertEquals(0, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_3() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Test when register is available
        Object value = "Test Value";
        int result = rootcontext.setRegisteredValue(value);
        // Test when register is not available
        value = "Test Value 2";
        result = rootcontext.setRegisteredValue(value);
        // Test when register is available again
        value = "Test Value 3";
        result = rootcontext.setRegisteredValue(value);
        assertEquals(-1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_4() throws Exception{
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Test when register is available
        Object value = "Test Value";
        int result = rootcontext.setRegisteredValue(value);
        // Test when register is not available
        value = "Test Value 2";
        result = rootcontext.setRegisteredValue(value);
        // Test when register is available again
        value = "Test Value 3";
        result = rootcontext.setRegisteredValue(value);
        assertEquals(1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_1() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = new Object();
        }
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        assertEquals(registers[0], rootcontext.getRegisteredValue(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_2() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = new Object();
        }
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        assertEquals(registers[1], rootcontext.getRegisteredValue(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_3() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = new Object();
        }
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        assertEquals(registers[2], rootcontext.getRegisteredValue(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_4() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = new Object();
        }
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        assertEquals(registers[3], rootcontext.getRegisteredValue(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_5() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = new Object();
        }
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_6() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0; i < MAX_REGISTER; i++) {
            registers[i] = new Object();
        }
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(-1));}
}