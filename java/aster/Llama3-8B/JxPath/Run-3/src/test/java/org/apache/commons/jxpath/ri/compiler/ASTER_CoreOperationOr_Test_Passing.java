/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationOr_Test_Passing {
@Mock
    private EvalContext evalContext;
@Mock
    private Expression[] args;
private CoreOperationOr coreOperationOr;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        coreOperationOr = new CoreOperationOr(args);
        // Arrange
        when(args[0].computeValue(evalContext)).thenReturn(true);
        when(args[1].computeValue(evalContext)).thenReturn(false);
        // Act
        Object result = coreOperationOr.computeValue(evalContext);
        // Assert
        assertEquals(Boolean.TRUE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_YqEb0() throws Exception {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[0]);
        assertEquals("or", coreOperationOr.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_UFyE0() throws Exception {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[]{});
        assertTrue(coreOperationOr.isSymmetric());
    }
}