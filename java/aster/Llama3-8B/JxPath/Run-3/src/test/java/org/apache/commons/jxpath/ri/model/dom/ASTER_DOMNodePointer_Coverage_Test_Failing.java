/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Attr;
import org.w3c.dom.Element;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_rDJE0() {
        QName name = new QName("qualifiedName");
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodeIterator result = domNodePointer.attributeIterator(name);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNode_rYHB0() {
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.US, "id");
        QName result = pointer.getName();
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_BHmD0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodeIterator nodeIterator = domNodePointer.namespaceIterator();
        assertNotNull(nodeIterator);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_qUSX0_2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodePointer result = domNodePointer.namespacePointer("prefix");
        assertEquals(NodePointer.class, result.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NamespaceNotFound_GTTN6() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getNamespaceURI("test");
    assertNull(domNodePointer.UNKNOWN_NAMESPACE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_NodeWithParentAndAttrNullParentAndChild_foiB16_fjSy0() {
    Element parent = null;
    Element child = null;
    Attr attr = null;
    String result = DOMNodePointer.getNamespaceURI(child);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveWithNullNode_gjNd2_SpjD0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, null);
    try {
        domNodePointer.remove();
        fail("Expected JXPathException");
    } catch (JXPathException e) {
        assertEquals("Cannot remove root DOM node", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_Fwvp0_xKyY0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(domNodePointer);
    QName name = new QName("test");
    int index = 0;
    Object value = "testValue";
    NodePointer result = domNodePointer.createChild(context, name, index, value);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithSetValue_XyrP1_ozwr0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(domNodePointer);
    QName name = new QName("test");
    int index = 0;
    Object value = "testValue";
    NodePointer result = domNodePointer.createChild(context, name, index);
    result.setValue(value);
    assertEquals(value, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithSetValueAndReturn_TPDj2_kNcy0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    JXPathContext context = JXPathContext.newContext(domNodePointer);
    QName name = new QName("test");
    int index = 0;
    Object value = "testValue";
    NodePointer result = domNodePointer.createChild(context, name, index, value);
    assertEquals(value, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NamespaceNotFound_GTTN6_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getNamespaceURI("test");
        assertEquals(domNodePointer.UNKNOWN_NAMESPACE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultNamespaceURI_EmptyDefaultNamespace_RwjS1_tvag0_fid1() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    String result = domNodePointer.getDefaultNamespaceURI();
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_qUSX0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodePointer result = domNodePointer.namespacePointer("prefix");
        assertNotNull(result);
        assertEquals(NodePointer.class, result.getClass());
    }
}