/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Node;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodeIterator_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_WWlq0_iMGx0() throws Exception {
    Node node = mock(Node.class);
    NodePointer nodePointer = mock(NodePointer.class);
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    DOMNodeIterator domNodeIterator = new DOMNodeIterator(domNodePointer, new NodeTypeTest(1), false, nodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPositionValidPosition_gEDr1_NEPf0() throws Exception {
    Node node = mock(Node.class);
    NodePointer nodepointer = mock(NodePointer.class);
    DOMNodeIterator domnodeiterator = new DOMNodeIterator(nodepointer, new NodeTypeTest(1), false, null);
    when(nodepointer.getNode()).thenReturn(node);
    when(node.getFirstChild()).thenReturn(null); 
    when(node.getNextSibling()).thenReturn(null); 
    domnodeiterator.getNodePointer(); 
    verify(nodepointer, times(1)).getNode();
    verify(node, times(1)).getFirstChild();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetPositionNext_IMzf4_GBlK0() throws Exception {
    Node node = mock(Node.class);
    NodePointer nodepointer = mock(NodePointer.class);
    DOMNodeIterator domnodeiterator = new DOMNodeIterator(nodepointer, new NodeTypeTest(1), false, nodepointer);
    when(nodepointer.getNode()).thenReturn(node);
    when(node.getFirstChild()).thenReturn(null); 
    when(node.getLastChild()).thenReturn(null);
    when(node.getNextSibling()).thenReturn(null);
    domnodeiterator.getNodePointer();
    domnodeiterator.setPosition(1);
    verify(nodepointer, times(1)).getNode();
    verify(node, times(1)).getFirstChild();
    verify(node, times(1)).getLastChild();
}
}