/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.jdom.Attribute;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JDOMAttributePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_BufferLengthIsZero_bKLT0() {
        JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(null, null);
        String result = jdomAttributePointer.asPath();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_EmptyURI_fJyq1() {
        Attribute attr = new Attribute("uri", "");
        JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(null, attr);
        String result = jdomAttributePointer.getNamespaceURI();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NonEmptyURI_YvwW2() {
        Attribute attr = new Attribute("uri", "http://example.com");
        JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(null, attr);
        String result = jdomAttributePointer.getNamespaceURI();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_WcUi0_MSKK0() {
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(null, null);
    DOMNodePointer nodePointer1 = new DOMNodePointer(null, null, null);
    DOMNodePointer nodePointer2 = new DOMNodePointer(null, null, null);
    assertEquals(0, jdomAttributePointer.compareChildNodePointers(nodePointer1, nodePointer2));
}
}