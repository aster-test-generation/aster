/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationAdd_Test_Passing {
@Mock
    private EvalContext evalContext;
@Mock
    private Expression[] expressions;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(expressions[0].computeValue(evalContext)).thenReturn(1.0);
        when(expressions[1].computeValue(evalContext)).thenReturn(2.0);
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(expressions);
        double result = (double) coreOperationAdd.computeValue(evalContext);
        assertEquals(3.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_MBYd0() throws Exception {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[0]);
        assertEquals("+", coreOperationAdd.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_cXNt0() throws Exception {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[0]);
        assertTrue(coreOperationAdd.isSymmetric());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotSymmetric_STqU1() throws Exception {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[0]);
        assertFalse(coreOperationAdd.isSymmetric());
    }
}