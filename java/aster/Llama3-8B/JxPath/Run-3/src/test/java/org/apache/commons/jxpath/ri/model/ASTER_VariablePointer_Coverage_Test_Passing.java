/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_VariablePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionCollectionWithNullAndOtherAndOtherAndOtherAndOtherAndOtherAndOtherAndOtherAndOtherAndOtherAndOther_ubhy13() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        Object[] array = new Object[]{null, "test", new Object(), new Object(), new Object(), new Object(), new Object(), new Object(), new Object(), new Object(), new Object()};
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_iZhe0_1() {
    QName name1 = new QName("prefix1", "localName1");
    QName name2 = new QName("prefix2", "localName2");
    KeywordVariables variables1 = new KeywordVariables("keyword1", "object1");
    KeywordVariables variables2 = new KeywordVariables("keyword2", "object2");
    VariablePointer pointer1 = new VariablePointer(name1);
    VariablePointer pointer2 = new VariablePointer(name2);
    VariablePointer pointer3 = new VariablePointer(variables1, name1);
    VariablePointer pointer4 = new VariablePointer(variables2, name2);
    assertEquals(true, pointer1.equals(pointer1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_iZhe0_2() {
    QName name1 = new QName("prefix1", "localName1");
    QName name2 = new QName("prefix2", "localName2");
    KeywordVariables variables1 = new KeywordVariables("keyword1", "object1");
    KeywordVariables variables2 = new KeywordVariables("keyword2", "object2");
    VariablePointer pointer1 = new VariablePointer(name1);
    VariablePointer pointer2 = new VariablePointer(name2);
    VariablePointer pointer3 = new VariablePointer(variables1, name1);
    VariablePointer pointer4 = new VariablePointer(variables2, name2);
    assertEquals(false, pointer1.equals(pointer2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_iZhe0_3() {
    QName name1 = new QName("prefix1", "localName1");
    QName name2 = new QName("prefix2", "localName2");
    KeywordVariables variables1 = new KeywordVariables("keyword1", "object1");
    KeywordVariables variables2 = new KeywordVariables("keyword2", "object2");
    VariablePointer pointer1 = new VariablePointer(name1);
    VariablePointer pointer2 = new VariablePointer(name2);
    VariablePointer pointer3 = new VariablePointer(variables1, name1);
    VariablePointer pointer4 = new VariablePointer(variables2, name2);
    assertEquals(false, pointer1.equals(pointer3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_iZhe0_4() {
    QName name1 = new QName("prefix1", "localName1");
    QName name2 = new QName("prefix2", "localName2");
    KeywordVariables variables1 = new KeywordVariables("keyword1", "object1");
    KeywordVariables variables2 = new KeywordVariables("keyword2", "object2");
    VariablePointer pointer1 = new VariablePointer(name1);
    VariablePointer pointer2 = new VariablePointer(name2);
    VariablePointer pointer3 = new VariablePointer(variables1, name1);
    VariablePointer pointer4 = new VariablePointer(variables2, name2);
    assertEquals(false, pointer1.equals(pointer4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_iZhe0_5() {
    QName name1 = new QName("prefix1", "localName1");
    QName name2 = new QName("prefix2", "localName2");
    KeywordVariables variables1 = new KeywordVariables("keyword1", "object1");
    KeywordVariables variables2 = new KeywordVariables("keyword2", "object2");
    VariablePointer pointer1 = new VariablePointer(name1);
    VariablePointer pointer2 = new VariablePointer(name2);
    VariablePointer pointer3 = new VariablePointer(variables1, name1);
    VariablePointer pointer4 = new VariablePointer(variables2, name2);
    assertEquals(false, pointer1.equals(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_NullValuePointer_dUAQ0() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        NodePointer nodePointer = variablePointer.getImmediateValuePointer();
        assertNotNull(nodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WHOLE_COLLECTION_CDGL0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        String result = variablePointer.asPath();
        assertEquals("$name", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_indexNotWholeCollection_ZrXs1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.index = 1;
        String result = variablePointer.asPath();
        assertEquals("$name[2]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_ContextIsNull_WTqx0_wYKl0() {
    VariablePointer variablePointer = new VariablePointer(new QName("qualifiedName"));
    JXPathContext context = null;
    variablePointer.findVariables(context);
    assertEquals(false, variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_VariablesIsNull_OjBH1_Tyee1() {
    VariablePointer variablePointer = new VariablePointer(new QName("qualifiedName"));
    JXPathContext context = JXPathContext.newContext(null);
    variablePointer.findVariables(context);
    assertEquals(false, variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithNullAndOtherAndOtherAndOtherAndOtherAndOtherAndOtherAndOther_jJSR10_SSva0() {
    VariablePointer variablePointer = new VariablePointer(new QName("test"));
    Object[] array = new Object[]{null, "test", new Object(), new Object(), new Object(), new Object(), new Object(), new Object()};
    variablePointer = new VariablePointer(new KeywordVariables("test", array), new QName("test"));
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionCollectionWithNullAndOtherAndOtherAndOtherAndOtherAndOtherAndOtherAndOtherAndOtherAndOther_LXiQ12_btHb0() {
    VariablePointer variablePointer = new VariablePointer(new QName("test"));
    Object[] array = new Object[]{null, "test", new Object(), new Object(), new Object(), new Object(), new Object(), new Object(), new Object(), new Object()};
    variablePointer = new VariablePointer(new KeywordVariables("test", array), new QName("test"));
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveIndexLessThanZero_uqQS3_xIyT1() {
    VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
    try {
        boolean actual = variablePointer.isActual();
        assert !actual;
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveValidIndex_GjXp4_kGQv0() {
    KeywordVariables variables = new KeywordVariables("keyword", null);
    QName name = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(variables, name);
    variablePointer.index = 1;
    boolean result = variablePointer.isActual();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafWhenNodeIsNotAtomic_BjnY2_wgnQ0_fid1() {
    VariablePointer variablePointer = new VariablePointer(new QName("test"));
    KeywordVariables variables = new KeywordVariables("test", new Object());
    variablePointer = new VariablePointer(variables, new QName("test"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveWholeCollection_HLau2_gLAQ0_fid1() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    variablePointer.index = VariablePointer.WHOLE_COLLECTION;
    KeywordVariables keywordVariables = new KeywordVariables("keyword", "object");
    VariablePointer variablePointer1 = new VariablePointer(keywordVariables, qName);
    boolean result = variablePointer.isActual();
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_iZhe0() {
    QName name1 = new QName("prefix1", "localName1");
    QName name2 = new QName("prefix2", "localName2");
    KeywordVariables variables1 = new KeywordVariables("keyword1", "object1");
    KeywordVariables variables2 = new KeywordVariables("keyword2", "object2");
    VariablePointer pointer1 = new VariablePointer(name1);
    VariablePointer pointer2 = new VariablePointer(name2);
    VariablePointer pointer3 = new VariablePointer(variables1, name1);
    VariablePointer pointer4 = new VariablePointer(variables2, name2);
    assertEquals(true, pointer1.equals(pointer1));
    assertEquals(false, pointer1.equals(pointer2));
    assertEquals(false, pointer1.equals(pointer3));
    assertEquals(false, pointer1.equals(pointer4));
    assertEquals(false, pointer1.equals(null));
}
}