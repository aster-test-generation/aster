/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationNegate_Test_Passing {
@Mock
    private EvalContext evalContext;
@Mock
    private Constant constant;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        CoreOperationNegate coreoperationnegate = new CoreOperationNegate(constant);
        // Given
        when(constant.computeValue(evalContext)).thenReturn(5.0);
        // When
        Object result = coreoperationnegate.computeValue(evalContext);
        // Then
        assertEquals(-5.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_Vkrj0() throws Exception {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant("a"));
        assertEquals("-", coreOperationNegate.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolNumber_VGgq1() throws Exception {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant(1));
        assertEquals("-", coreOperationNegate.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_FoVP0() throws Exception {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant("Hello"));
        assertTrue(coreOperationNegate.isSymmetric());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric2_Pqsj1() throws Exception {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant(123));
        assertFalse(coreOperationNegate.isSymmetric());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_pxiY0() throws Exception {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant("a"));
        assertEquals(0, coreOperationNegate.getPrecedence());
    }
}