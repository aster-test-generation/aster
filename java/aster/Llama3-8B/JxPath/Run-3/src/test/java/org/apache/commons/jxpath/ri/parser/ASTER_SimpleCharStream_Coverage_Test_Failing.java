/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSuffixWhenBufposPlusOneIsGreaterThanOrEqualToLen_zWEb0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("abcdefghijklmnopqrstuvwxyz"), 1, 1);
        simpleCharStream.bufpos = 10;
        simpleCharStream.bufsize = 20;
        char[] result = simpleCharStream.GetSuffix(15);
        char[] expected = new char[15];
        System.arraycopy("abcdefghijklmnopqrstuvwxyz".toCharArray(), 10, expected, 0, 15);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSuffixWhenBufposPlusOneIsLessThanLen_KQFg1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("abcdefghijklmnopqrstuvwxyz"), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.bufsize = 20;
        char[] result = simpleCharStream.GetSuffix(15);
        char[] expected = new char[15];
        System.arraycopy("abcdefghijklmnopqrstuvwxyz".toCharArray(), 0, expected, 0, 5);
        System.arraycopy("abcdefghijklmnopqrstuvwxyz".toCharArray(), 15, expected, 5, 10);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountPositive_TLjQ0_2() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.backup(5);
        assertEquals(0, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountNegative_jmFm1_1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.backup(-10);
        assertEquals(5, simpleCharStream.inBuf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountNegative_jmFm1_2() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.backup(-10);
        assertEquals(-5, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountZero_iPaZ2_2() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.backup(0);
        assertEquals(0, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountWrapAround_AkjY3_1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.backup(10);
        assertEquals(5, simpleCharStream.inBuf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountWrapAround_AkjY3_2() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.backup(10);
        assertEquals(-5, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLine_OHYD0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        assertEquals(1, simpleCharStream.getLine());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAround_scKM0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        simpleCharStream.ExpandBuff(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetColumn_FtEG0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        assertEquals(1, simpleCharStream.getColumn());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInit_BufferIsNotNull_BufferSizeIsZero_EFJQ3_lQii0_2() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    simpleCharStream.ReInit(new java.io.StringReader(""), 1, 1, 0);
    assertNull(simpleCharStream.buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnTab_LKRz4_FLcF0_1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.UpdateLineColumn('\t');
    assertEquals(1, simpleCharStream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnTab_LKRz4_FLcF0_2() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.UpdateLineColumn('\t');
    assertEquals(9, simpleCharStream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLF_fpGv0_xczI0_1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.bufpos = 0;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.UpdateLineColumn('\n');
    assertEquals(2, simpleCharStream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLF_fpGv0_xczI0_2() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.bufpos = 0;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.UpdateLineColumn('\n');
    assertEquals(1, simpleCharStream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnCR_ekXI1_Auff0_1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.prevCharIsCR = true;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.UpdateLineColumn('\r');
    assertEquals(1, simpleCharStream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnCR_ekXI1_Auff0_2() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.prevCharIsCR = true;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.UpdateLineColumn('\r');
    assertEquals(1, simpleCharStream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLFThenCR_DASK2_ZfCS0() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.prevCharIsLF = true;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.UpdateLineColumn('\n');
    simpleCharStream.UpdateLineColumn('\r');
    assertEquals(1, simpleCharStream.line);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnCRThenLF_jmYu3_OkxN0_1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.prevCharIsCR = true;
    simpleCharStream.UpdateLineColumn('\r');
    simpleCharStream.UpdateLineColumn('\n');
    assertEquals(1, simpleCharStream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnCRThenLF_jmYu3_OkxN0_2() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.prevCharIsCR = true;
    simpleCharStream.UpdateLineColumn('\r');
    simpleCharStream.UpdateLineColumn('\n');
    assertEquals(1, simpleCharStream.bufcolumn[simpleCharStream.bufpos]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnCRThenLF_jmYu3_OkxN0_3() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.prevCharIsCR = true;
    simpleCharStream.UpdateLineColumn('\r');
    simpleCharStream.UpdateLineColumn('\n');
    assertEquals(1, simpleCharStream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnCRThenDefault_jQdU7_uqpF0() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.prevCharIsCR = true;
    simpleCharStream.UpdateLineColumn('\r');
    simpleCharStream.UpdateLineColumn('a');
    assertEquals(1, simpleCharStream.line);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLFThenDefault_cSBQ6_Gpgn0_3() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.bufpos = 0;
    simpleCharStream.line = 1;
    simpleCharStream.column = 1;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.UpdateLineColumn('\n');
    simpleCharStream.UpdateLineColumn('\f'); 
    simpleCharStream.UpdateLineColumn('\0'); // This line was missing
    assertEquals(1, simpleCharStream.column); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnDefaultThenLF_KWli8_Jvbq0() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.UpdateLineColumn('a');
    simpleCharStream.UpdateLineColumn('\r');
    simpleCharStream.UpdateLineColumn('\n');
    assertEquals(2, simpleCharStream.line);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLFThenDefaultThenLF_caVw10_lABN0() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"), 1, 1);
    simpleCharStream.UpdateLineColumn('\f'); // Changed from '\n' to '\f'
    simpleCharStream.UpdateLineColumn('\r');
    simpleCharStream.UpdateLineColumn('\n');
    assertEquals(2, simpleCharStream.line);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSuffixWhenBufposPlusOneIsGreaterThanOrEqualToLen_zWEb0_fid1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("abcdefghij lmnopqrstuvwxyz"), 1, 1);
        simpleCharStream.bufpos = 10;
        simpleCharStream.bufsize = 20;
        char[] result = simpleCharStream.GetSuffix(15);
        char[] expected = new char[15];
        System.arraycopy("abcdefghij lmnopqrstuvwxyz".toCharArray(), 10, expected, 0, 15);
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountNegative_jmFm1_1_fid1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos =-10;
        simpleCharStream.backup(-10);
        assertEquals(5, simpleCharStream.inBuf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountZero_iPaZ2_2_fid1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.backup(4095);
        assertEquals(4095, simpleCharStream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountWrapAround_AkjY3_1_fid1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos =10;
        simpleCharStream.backup(10);
        assertEquals(5, simpleCharStream.inBuf);}
@Test
@Timeout(value =2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateLineColumnLF_fpGv0_xczI0_2_fid1() {
    SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader("a"),2,2);
    simpleCharStream.bufpos = 0;
    simpleCharStream.prevCharIsLF = false;
    simpleCharStream.prevCharIsCR = false;
    simpleCharStream.line =2;
    simpleCharStream.column =2;
    simpleCharStream.UpdateLineColumn('\n');
    assertEquals(1, simpleCharStream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountPositive_TLjQ0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.backup(5);
        assertEquals(5, simpleCharStream.inBuf);
        assertEquals(0, simpleCharStream.bufpos);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountNegative_jmFm1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.backup(-10);
        assertEquals(5, simpleCharStream.inBuf);
        assertEquals(-5, simpleCharStream.bufpos);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountZero_iPaZ2() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.backup(0);
        assertEquals(0, simpleCharStream.inBuf);
        assertEquals(0, simpleCharStream.bufpos);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupAmountWrapAround_AkjY3() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        simpleCharStream.bufpos = 5;
        simpleCharStream.backup(10);
        assertEquals(5, simpleCharStream.inBuf);
        assertEquals(-5, simpleCharStream.bufpos);
    }
}