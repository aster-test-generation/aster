/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Attr;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributeIterator_Test_Passing {
private int position = 0;
@Mock
    private Node node;
@Mock
    private NodePointer nodePointer;
@Mock
    private Attr attr;
@Mock
    private NamedNodeMap namedNodeMap;
@Mock
    private DOMNodePointer domNodePointer;
private List attributes;
@Mock
    private VariablePointer variablePointer;
@Mock
    private QName qName;
@Mock
    private KeywordVariables keywordVariables;
private NodePointer parent;
@Mock
    private List list;
@Mock
    private NodePointer nodepointer;
@Mock
    private NamedNodeMap namednodemap;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(NodePointer.class);
        attr = mock(Attr.class);
        namedNodeMap = mock(NamedNodeMap.class);
        domNodePointer = mock(DOMNodePointer.class);
        variablePointer = mock(VariablePointer.class);
        qName = mock(QName.class);
        keywordVariables = mock(KeywordVariables.class);
        attributes = new ArrayList<>();
        attributes.add(attr);
        when(nodePointer.getNode()).thenReturn(node);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.getLength()).thenReturn(1);
        when(namedNodeMap.item(0)).thenReturn(attr);
        DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(domNodePointer, qName);
        boolean result = domAttributeIterator.setPosition(1);
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionInvalidPosition() throws Exception {
        node = mock(Node.class);
        nodePointer = mock(NodePointer.class);
        attr = mock(Attr.class);
        namedNodeMap = mock(NamedNodeMap.class);
        domNodePointer = mock(DOMNodePointer.class);
        variablePointer = mock(VariablePointer.class);
        qName = mock(QName.class);
        keywordVariables = mock(KeywordVariables.class);
        attributes = new ArrayList<>();
        attributes.add(attr);
        when(nodePointer.getNode()).thenReturn(node);
        when(nodePointer.getNode()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.getLength()).thenReturn(1);
        when(namedNodeMap.item(0)).thenReturn(attr);
        DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(domNodePointer, qName);
        boolean result = domAttributeIterator.setPosition(2);
        assertEquals(false, result);
    }
}