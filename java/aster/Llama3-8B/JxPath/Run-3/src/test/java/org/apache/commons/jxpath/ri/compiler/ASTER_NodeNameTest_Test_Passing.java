/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NodeNameTest_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameWithPrefixAndLocalName_ZLqw0() throws Exception {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        assertEquals("prefix:localName", nodeNameTest.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameWithQualifiedName_wNeH1() throws Exception {
        QName qname = new QName("qualifiedName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        assertEquals("qualifiedName", nodeNameTest.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameWithPrefixAndLocalNameAndNamespaceURI_yfAU2() throws Exception {
        QName qname = new QName("prefix", "localName");
        String namespaceURI = "namespaceURI";
        NodeNameTest nodeNameTest = new NodeNameTest(qname, namespaceURI);
        assertEquals("prefix:localName", nodeNameTest.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeName_qname_EGUf0() throws Exception {
        QName qname = new QName("prefix", "localName");
        NodeNameTest test = new NodeNameTest(qname);
        QName result = test.getNodeName();
        assertEquals(qname, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWildcardTrue_SxHx0() throws Exception {
    QName qname = new QName("*");
    NodeNameTest nodeNameTest = new NodeNameTest(qname);
    boolean result = nodeNameTest.isWildcard();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWildcardFalse_NVxe1() throws Exception {
    QName qname = new QName("prefix", "localName");
    NodeNameTest nodeNameTest = new NodeNameTest(qname);
    boolean result = nodeNameTest.isWildcard();
    assert(!result);
}
}