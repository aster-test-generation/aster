/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationSubtract_Test_Passing {
@Mock
    private EvalContext evalContext;
@Mock
    private Constant constant1;
@Mock
    private Constant constant2;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(constant1.computeValue(evalContext)).thenReturn(10.0);
        when(constant2.computeValue(evalContext)).thenReturn(5.0);
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(constant1, constant2);
        Object result = coreOperationSubtract.computeValue(evalContext);
        assertEquals(5.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_bGUZ0() throws Exception {
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(new Constant("a"), new Constant("b"));
        String symbol = coreOperationSubtract.getSymbol();
        assert symbol.equals("-");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_hPIL0() throws Exception {
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(new Constant("1"), new Constant("1"));
        boolean result = coreOperationSubtract.isSymmetric();
        assert (!result);
    }
}