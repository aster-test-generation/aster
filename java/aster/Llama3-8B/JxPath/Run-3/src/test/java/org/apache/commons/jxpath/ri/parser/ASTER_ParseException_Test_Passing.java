/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParseException_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes1_Qtsg0() {
        ParseException parser = new ParseException();
        String str = "Hello World";
        String result = parser.add_escapes(str);
        assert result.equals("Hello World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes2_kAxr1() {
        ParseException parser = new ParseException();
        String str = "Hello\\ World";
        String result = parser.add_escapes(str);
        assert result.equals("Hello\\ World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes3_HuHF2() {
        ParseException parser = new ParseException();
        String str = "Hello \t World";
        String result = parser.add_escapes(str);
        assert result.equals("Hello \\t World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes4_KdKI3() {
        ParseException parser = new ParseException();
        String str = "Hello \\ World";
        String result = parser.add_escapes(str);
        assert result.equals("Hello \\\\ World");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage1_NKdj0() {
    ParseException ex = new ParseException("message");
    String result = ex.getMessage();
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage2_nrWe1() {
    ParseException ex = new ParseException();
    String result = ex.getMessage();
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage3_Pmsx2() {
    ParseException ex = new ParseException(new Token(), new int[][]{{1, 2}}, new String[] {"a", "b"});
    String result = ex.getMessage();
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage4_wgnv3() {
    ParseException ex = new ParseException(new Token(), new int[][]{{1}}, new String[] {"a"});
    String result = ex.getMessage();
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage5_yHGT4() {
    ParseException ex = new ParseException(new Token(), new int[][]{{1, 2, 3}}, new String[] {"a", "b", "c"});
    String result = ex.getMessage();
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage6_aRVU5() {
    ParseException ex = new ParseException(new Token(), new int[][]{{1, 2, 3, 4}}, new String[] {"a", "b", "c", "d"});
    String result = ex.getMessage();
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage7_BiOy6() {
    ParseException ex = new ParseException(new Token(), new int[][]{{1, 2, 3, 4, 5}}, new String[] {"a", "b", "c", "d", "e"});
    String result = ex.getMessage();
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage8_klUe7() {
    ParseException ex = new ParseException(new Token(), new int[][]{{1, 2, 3, 4, 5, 6}}, new String[] {"a", "b", "c", "d", "e", "f"});
    String result = ex.getMessage();
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage9_SDXv8() {
    ParseException ex = new ParseException(new Token(), new int[][]{{1, 2, 3, 4, 5, 6, 7}}, new String[] {"a", "b", "c", "d", "e", "f", "g"});
    String result = ex.getMessage();
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMessage10_qDYo9() {
    ParseException ex = new ParseException(new Token(), new int[][]{{1, 2, 3, 4, 5, 6, 7, 8}}, new String[] {"a", "b", "c", "d", "e", "f", "g", "h"});
    String result = ex.getMessage();
    assertEquals("message", result);
}
}