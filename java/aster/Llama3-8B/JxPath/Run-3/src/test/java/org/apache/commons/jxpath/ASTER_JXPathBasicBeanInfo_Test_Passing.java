/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.beans.PropertyDescriptor;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithProperties_hgOe0_1() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, false);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotNull(propertyDescriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithProperties_hgOe0_2() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, false);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotEquals(0, propertyDescriptors.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithoutProperties_gvec1_1() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotNull(propertyDescriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithoutProperties_gvec1_2() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertEquals(0, propertyDescriptors.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForInterface_RHiS2_1() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotNull(propertyDescriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForInterface_RHiS2_2() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotEquals(0, propertyDescriptors.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithDynamicPropertyHandler_Ellk3_1() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, DynamicPropertyHandler.class);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotNull(propertyDescriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithDynamicPropertyHandler_Ellk3_2() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, DynamicPropertyHandler.class);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotEquals(0, propertyDescriptors.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithException_vFVM4_1() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertNotNull(propertyDescriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsForClassWithException_vFVM4_2() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    Assertions.assertEquals(0, propertyDescriptors.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithClassAndAtomic_NJJJ0() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, true);
    String result = beanInfo.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithClass_NTZt1() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class);
    String result = beanInfo.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithClassAndDynamicPropertyHandlerClass_OAoT2() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, PropertyDescriptor.class);
    String result = beanInfo.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicFalse_wxXp1() throws Exception {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class);
    boolean result = beanInfo.isDynamic();
    assert !result;
}
}