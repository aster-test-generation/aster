/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Failing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private CollectionPointer collectionPointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private ValueUtils valueUtils;
    private Object collection;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NodeNameTest nodeNameTest;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private QName qName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodePointer valuePointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private NodePointer startWith;
    @Mock
    private Object baseValue;
    CollectionPointer collectionpointer;
    @Mock
    private JXPathIntrospector jXPathIntrospector;
    @Mock
    private CollectionPointer getValuePointer;
    @Mock
    private Object value;
    @Mock
    private Locale locale;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        collection = new ArrayList<>();
        collectionPointer = new CollectionPointer(collection, Locale.US);
        // Arrange
        Object value = "testValue";
        int index = 0;
        // Act
        collectionPointer.setValue(value);
        // Assert
        if (collectionPointer.getIndex() == CollectionPointer.WHOLE_COLLECTION) {
            verify(parent).setValue(value);
        }
        else {
            verify(valueUtils).setValue(collection, index, value);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(nodeTest instanceof NodeNameTest).thenReturn(false);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        when(nodeTest instanceof NodeTypeTest).thenReturn(true);
        boolean result = collectionpointer.testNode(nodeTest);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        collectionpointer = new CollectionPointer(collection, Locale.US);
        // Arrange
        when(collection instanceof Collection).thenReturn(true);
        // Act
        boolean result = collectionpointer.isCollection();
        // Assert
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(valueUtils.getValue(collection)).thenReturn("value");
        when(valueUtils.getValue(collection, 0)).thenReturn("value0");
        CollectionPointer collectionpointer = new CollectionPointer(collection, Locale.US);
        assertEquals("value", collectionpointer.getImmediateNode());
        collectionpointer = new CollectionPointer(collectionpointer, collection);
        assertEquals("value0", collectionpointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWholeCollection_NudD0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        Object immediateNode = collectionPointer.getImmediateNode();
        assertEquals(ValueUtils.getValue(new Object()), immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        collection = mock(Object.class);
        collectionPointer = new CollectionPointer(collection, Locale.US);
        // Arrange
        when(collection.hashCode()).thenReturn(10);
        // Act
        int result = collectionPointer.hashCode();
        // Assert
        assertEquals(11, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWholeCollection_ewSF0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodeIterator result = collectionPointer.attributeIterator(new QName("name"));
        assertEquals(NodeIterator.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        collectionpointer = new CollectionPointer(baseValue, Locale.US);
        when(valueUtils.getLength(baseValue)).thenReturn(5);
        int length = collectionpointer.getLength();
        assertEquals(5, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorTrue_DlPW0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodeIterator result = collectionPointer.namespaceIterator();
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() {
        collectionPointer = new CollectionPointer(collection, Locale.US);
        // Arrange
        when(collectionPointer.getBaseValue()).thenReturn(collection);
        // Act
        Object baseValue = collectionPointer.getBaseValue();
        // Assert
        assertEquals(collection, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(valueUtils.getValue(collection)).thenReturn("value");
        when(valueUtils.getValue(collection, 0)).thenReturn("value0");
        CollectionPointer collectionpointer = new CollectionPointer(collection, Locale.US);
        collectionpointer = new CollectionPointer(collectionpointer, collection);
        assertEquals("value", collectionpointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(valueUtils.getValue(collection)).thenReturn("value");
        when(valueUtils.getValue(collection, 0)).thenReturn("value0");
        CollectionPointer collectionpointer = new CollectionPointer(collection, Locale.US);
        collectionpointer = new CollectionPointer(collectionpointer, collection);
        assertEquals("value0", collectionpointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_LsDW0() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(jXPathContext.createPath("")).thenReturn(new DOMNodePointer(null, null, null));
        CollectionPointer collectionpointer = new CollectionPointer(new VariablePointer(new QName("", "")), new DOMNodePointer(null, null, null));
        NodePointer result = collectionpointer.createPath(jXPathContext, null);
        assertEquals(new DOMNodePointer(null, null, null), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_rzPa0() {
        DOMNodePointer collectionPointer = new DOMNodePointer(null, null, null);
        when(nodePointer1.getIndex()).thenReturn(1);
        when(nodePointer2.getIndex()).thenReturn(2);
        int result = collectionPointer.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_OrZd0() throws Exception {
        DOMNodePointer collectionpointer = new DOMNodePointer(null, null, null);
        when(getValuePointer.namespaceIterator()).thenReturn(nodeIterator);
        assertEquals(nodeIterator, collectionpointer.namespaceIterator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_yfbz0_1() throws Exception {
        collection = Mockito.mock(Object.class);
        collectionPointer = new CollectionPointer(collection, Locale.US);
        when(collectionPointer.getBaseValue()).thenReturn(collection);
        when(collectionPointer.getIndex()).thenReturn(0);
        CollectionPointer otherCollectionPointer = new CollectionPointer(collection, Locale.US);
        when(otherCollectionPointer.getBaseValue()).thenReturn(collection);
        when(otherCollectionPointer.getIndex()).thenReturn(0);
        assertTrue(collectionPointer.equals(collectionPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_yfbz0_2() throws Exception {
        collection = Mockito.mock(Object.class);
        collectionPointer = new CollectionPointer(collection, Locale.US);
        when(collectionPointer.getBaseValue()).thenReturn(collection);
        when(collectionPointer.getIndex()).thenReturn(0);
        CollectionPointer otherCollectionPointer = new CollectionPointer(collection, Locale.US);
        when(otherCollectionPointer.getBaseValue()).thenReturn(collection);
        when(otherCollectionPointer.getIndex()).thenReturn(0);
        assertFalse(collectionPointer.equals(otherCollectionPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_yfbz0_3() throws Exception {
        collection = Mockito.mock(Object.class);
        collectionPointer = new CollectionPointer(collection, Locale.US);
        when(collectionPointer.getBaseValue()).thenReturn(collection);
        when(collectionPointer.getIndex()).thenReturn(0);
        CollectionPointer otherCollectionPointer = new CollectionPointer(collection, Locale.US);
        when(otherCollectionPointer.getBaseValue()).thenReturn(collection);
        when(otherCollectionPointer.getIndex()).thenReturn(0);
        assertFalse(collectionPointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_yfbz0_4() throws Exception {
        collection = Mockito.mock(Object.class);
        collectionPointer = new CollectionPointer(collection, Locale.US);
        when(collectionPointer.getBaseValue()).thenReturn(collection);
        when(collectionPointer.getIndex()).thenReturn(0);
        CollectionPointer otherCollectionPointer = new CollectionPointer(collection, Locale.US);
        when(otherCollectionPointer.getBaseValue()).thenReturn(collection);
        when(otherCollectionPointer.getIndex()).thenReturn(0);
        assertFalse(collectionPointer.equals("Not a CollectionPointer"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_WHOLE_COLLECTION_YFQk0() {
        collectionPointer = new CollectionPointer(collection, locale);
        when(collectionPointer.getParent()).thenReturn(new DOMNodePointer(null, locale, null));
        assertFalse(collectionPointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_OrZd0_fid2() throws Exception {
        DOMNodePointer collectionpointer = new DOMNodePointer(null, null, null);
        when(getValuePointer.namespaceIterator()).thenReturn(null);
        assertSame(null, collectionpointer.namespaceIterator());
    }
}