/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Iterator;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.TreeCompiler;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.NodePointerFactory;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.util.ClassLoaderUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathContextReferenceImpl_Test_Passing {
    @Mock
    private JXPathContext jxpathcontext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private Expression expression;
    @Mock
    private EvalContext evalContext;
    @Mock
    private RootContext rootContext;
    @Mock
    private Pointer pointer;
    private static Vector nodeFactories = new Vector();
    private static NodePointerFactory[] nodeFactoryArray = null;
    @Mock
    private NodePointerFactory nodePointerFactory;
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    @Mock
    private Iterator iterator;
    @Mock
    private ClassLoaderUtil classLoaderUtil;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private NamespaceResolver namespaceResolver;
    @Mock
    private Pointer contextPointer;
    @Mock
    private CompiledExpression compiledExpression;
    @Mock
    private Pointer rootPointer;
    @Mock
    private ExceptionHandler exceptionHandler;
    @Mock
    private Object contextBean;
    private static Compiler COMPILER = new TreeCompiler();
    @Mock
    private Compiler compiler;
    @Mock
    private QName qName;
    @Mock
    private Functions functions;
    @Mock
    private Function function;
    @Mock
    private VariablePointer variablePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiterate() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(jxpathcontext, new Object());
        // Arrange
        Iterator iterator = Mockito.mock(Iterator.class);
        when(expression.iterate(Mockito.any(EvalContext.class))).thenReturn(iterator);
        // Act
        Iterator result = jxpathcontextreferenceimpl.iterate("xpath", expression);
        // Assert
        Mockito.verify(expression).iterate(Mockito.any(EvalContext.class));
        assertEquals(iterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAbsoluteRootContext_ZUdi0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        EvalContext actual = jxpathContextReferenceImpl.getAbsoluteRootContext();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratePointers_qBEu0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "xpath";
        Iterator iteratePointers = jxpathContextReferenceImpl.iteratePointers(xpath);
        assert iteratePointers != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFunction() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(jxpathcontext, null);
        when(jxpathcontext.getFunctions()).thenReturn(functions);
        QName functionName = new QName("prefix", "name");
        Object[] parameters = new Object[0];
        when(functions.getFunction("prefix", "name", parameters)).thenReturn(function);
        Function result = jxpathcontextreferenceimpl.getFunction(functionName, parameters);
        assertEquals(function, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariablePointer_TbFf0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        QName qName = new QName("name");
        NodePointer nodePointer = jxpathContextReferenceImpl.getVariablePointer(qName);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremoveNodePointerFactory_1() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        nodeFactories.add(nodePointerFactory);
        nodeFactoryArray = new NodePointerFactory[]{nodePointerFactory};
        boolean result = jxpathcontextreferenceimpl.removeNodePointerFactory(nodePointerFactory);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremoveNodePointerFactory_2() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        nodeFactories.add(nodePointerFactory);
        nodeFactoryArray = new NodePointerFactory[]{nodePointerFactory};
        boolean result = jxpathcontextreferenceimpl.removeNodePointerFactory(nodePointerFactory);
        Assertions.assertTrue(nodeFactories.contains(nodePointerFactory));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_fid1() {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        when(namespaceResolver.getNamespaceURI(anyString())).thenReturn("http://example.com");
        String prefix = "prefix";
        String result = jxpathcontextreferenceimpl.getNamespaceURI(prefix);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointer_hsgy0() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(expression.computeValue(any(EvalContext.class))).thenReturn(evalContext);
        JXPathContextReferenceImpl jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        assertEquals(jxpathcontextreferenceimpl.getNamespaceResolver(), jxpathcontextreferenceimpl.getNamespaceResolver());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix2_UEEl1_jZTP0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        NamespaceResolver namespaceResolver = jxpathContextReferenceImpl.getNamespaceResolver();
        String namespaceURI = "namespaceURI";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer1_nmMP0_IqUG0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = jxpathContextReferenceImpl.getPointer("xpath", expression);
        assertEquals(NullPointer.class, pointer.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceContextPointer_ButT1() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        when(namespaceResolver.getNamespaceContextPointer()).thenReturn(null);
        Pointer result = jxpathcontextreferenceimpl.getNamespaceContextPointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_kLYs0_RUDu1() {
        JXPathContext parentContext = null;
        Object contextBean = null;
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(parentContext, contextBean);
        Pointer result = jxpathContextReferenceImpl.getNamespaceContextPointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRelativeContextNotNull_DyTc0_fHiE0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = jxpathContextReferenceImpl.getNamespaceContextPointer();
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRelativeContextNull_zuwU1_bBvJ0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = jxpathContextReferenceImpl.getNamespaceContextPointer();
        try {
            jxpathContextReferenceImpl.getRelativeContext(pointer);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot create a relative context for a non-existent node: " + pointer, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_sUub0_aWpy0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        NamespaceResolver namespaceResolver = jxpathContextReferenceImpl.getNamespaceResolver();
        namespaceResolver.seal();
        assert namespaceResolver != null;
    }
}