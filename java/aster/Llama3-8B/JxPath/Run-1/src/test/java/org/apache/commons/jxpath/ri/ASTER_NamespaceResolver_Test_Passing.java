/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
    @Mock
    private NamespaceResolver parent;
    private boolean sealed;
    @Mock
    private NodePointer nodePointer;
    private NamespaceResolver namespaceResolver;
    @Mock
    private NodeIterator nodeIterator;
    private NamespaceResolver namespaceresolver;
    @Mock
    private Map<String, String> namespaceMap;
    @Mock
    private Map<String, String> reverseMap;
    @Mock
    private NamespaceResolver pointer;
    @Mock
    private Object mockSuper;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithParent_vELB0() {
        NamespaceResolver parent = new NamespaceResolver(null);
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertEquals(true, resolver.isSealed());
        assertEquals(true, parent.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithoutParent_jJqJ1() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        resolver.seal();
        assertEquals(true, resolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredPrefix() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        // Arrange
        Map<String, String> reverseMap = new HashMap<>();
        when(parent.getExternallyRegisteredPrefix("namespaceURI")).thenReturn("prefix");
        when(namespaceresolver.getNamespaceURI("prefix")).thenReturn("namespaceURI");
        // Act
        String result = namespaceresolver.getExternallyRegisteredPrefix("namespaceURI");
        // Assert
        assertEquals("prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixNullPrefix_PGGH0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixPrefix_LiLQ1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        namespaceResolver.reverseMap.put("http://example.com", "prefix");
        String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixParent_vQRN2() {
        NamespaceResolver parent = new NamespaceResolver();
        parent.reverseMap.put("http://example.com", "prefix");
        NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
        String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_kNHp0() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.getNamespaceURI("prefix"));
        assertEquals("prefix", resolver.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_ReturnsNull_WhenPrefixNotRegistered_affQ0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String result = namespaceResolver.getExternallyRegisteredNamespaceURI("prefix");
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_ReturnsParentNamespaceURI_WhenPrefixNotRegisteredAndParentAvailable_pYwq2() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
        String result = namespaceResolver.getExternallyRegisteredNamespaceURI("prefix");
        Assertions.assertEquals(parent.getExternallyRegisteredNamespaceURI("prefix"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() {
        namespaceresolver = new NamespaceResolver(parent);
        // Arrange
        String namespaceURI = "testNamespaceURI";
        String prefix = "testPrefix";
        when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(prefix);
        // Act
        String result = namespaceresolver.getPrefix(namespaceURI);
        // Assert
        assertEquals(prefix, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixExternallyRegisteredPrefixNull_zJUQ1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String namespaceURI = "http://example.com";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        Assertions.assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIExternallyRegisteredNamespaceURINotNull_lpZG0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        String prefix = "prefix";
        String uri = namespaceResolver.getNamespaceURI(prefix);
        assertEquals(uri, namespaceResolver.getExternallyRegisteredNamespaceURI(prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIExternallyRegisteredNamespaceURINull_ZsQM1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        String prefix = "prefix";
        String uri = namespaceResolver.getNamespaceURI(prefix);
        assertNull(uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_NullPointerAndNullParent_MhjI1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        Pointer pointer = namespaceResolver.getNamespaceContextPointer();
        assert pointer == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_bmOm0() {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver(null));
        assertFalse(resolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testseal_fid1() throws Exception {
        sealed = false;
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        Assertions.assertFalse(sealed);
        verify(parent).seal();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithParent_vELB0_1() {
        NamespaceResolver parent = new NamespaceResolver(null);
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertEquals(true, resolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithParent_vELB0_2() {
        NamespaceResolver parent = new NamespaceResolver(null);
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertEquals(true, parent.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_fid1() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(nodePointer.namespaceIterator()).thenReturn(nodeIterator);
        QName qName = new QName("prefix", "localName");
        NodePointer childNodePointer = Mockito.mock(NodePointer.class);
        when(childNodePointer.getName()).thenReturn(qName);
        when(childNodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        when(nodeIterator.getNodePointer()).thenReturn(childNodePointer);
        String prefix = NamespaceResolver.getPrefix(nodePointer, "namespaceURI");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_kNHp0_1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_kNHp0_2() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("prefix", resolver.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointer_EhwK0() {
        namespaceResolver = new NamespaceResolver();
        namespaceResolver.setNamespaceContextPointer(nodePointer);
        assertEquals(nodePointer, namespaceResolver.getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_foundInMap_eTaW0() throws Exception {
        NamespaceResolver namespaceresolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = "uri";
        when(namespaceMap.get(prefix)).thenReturn(uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_notFoundInMap_notFoundInParent_vlVG0() throws Exception {
        NamespaceResolver namespaceresolver = new NamespaceResolver(null);
        assertNull(namespaceresolver.getExternallyRegisteredNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_yqxi0_GUwj0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver());
        NamespaceResolver clonedNamespaceResolver = (NamespaceResolver) namespaceResolver.clone();
        assertNotNull(clonedNamespaceResolver);
    }
}