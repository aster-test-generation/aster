/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributeIterator_Test_Failing {
    private int position = 0;
    @Mock
    private Node node;
    @Mock
    private Attr attr;
    @Mock
    private NamedNodeMap namednodemap;
    @Mock
    private DOMNodePointer domNodePointer;
    private List attributes;
    private NodePointer parent;
    DOMAttributeIterator domAttributeIterator;
    List list;
    NamedNodeMap namedNodeMap;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        namednodemap = mock(NamedNodeMap.class);
        domNodePointer = mock(DOMNodePointer.class);
        when(namednodemap.item(any())).thenReturn(attr);
        when(domNodePointer.getNode()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namednodemap);
        DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(domNodePointer, mock(QName.class));
        assertEquals(0, domAttributeIterator.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionInvalidPosition_IfTr0_1() throws Exception {
        attributes = new ArrayList<>();
        when(namednodemap.item(any())).thenReturn(attr);
        when(namednodemap.getLength()).thenReturn(1);
        when(node.getAttributes()).thenReturn(namednodemap);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(domNodePointer, new QName("test"));
        boolean result = domAttributeIterator.setPosition(2);
        assertEquals(1, domAttributeIterator.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionInvalidPosition_IfTr0_2() throws Exception {
        attributes = new ArrayList<>();
        when(namednodemap.item(any())).thenReturn(attr);
        when(namednodemap.getLength()).thenReturn(1);
        when(node.getAttributes()).thenReturn(namednodemap);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(domNodePointer, new QName("test"));
        boolean result = domAttributeIterator.setPosition(2);
        assertFalse(result);
    }
}