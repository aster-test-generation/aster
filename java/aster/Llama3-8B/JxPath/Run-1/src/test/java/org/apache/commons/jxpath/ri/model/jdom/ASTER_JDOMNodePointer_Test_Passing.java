/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Passing {
    @Mock
    private Element element;
    @Mock
    private List list;
    @Mock
    private Text text;
    @Mock
    private Document document;
    @Mock
    private ProcessingInstruction pi;
    @Mock
    private Comment comment;
    @Mock
    private QName qname;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private Locale locale;
    private JDOMNodePointer jdomnodepointer;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private AbstractFactory abstractFactory;
    @Mock
    private JDOMAttributeIterator jdomAttributeIterator;
    @Mock
    private QName qName;
    @Mock
    private ProcessingInstruction processingInstruction;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private Attribute attribute;
    @Mock
    private JDOMNamespaceIterator namespaceIterator;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private Element parent;
    @Mock
    private JDOMNodePointer superObject;
    @Mock
    private String id;
    @Mock
    private Namespace ns;
    @Mock
    private Namespace namespace;
    @Mock
    private NamespaceResolver namespaceResolver;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersEqual_tQYk0() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        assertEquals(0, nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersAttributeAndElement_NHjy1() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Object(), new Locale("en", "US"), "id1");
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Object(), new Locale("en", "US"), "id2");
        assertEquals(-1, nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersElementAndAttribute_LZnF2() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Object(), new Locale("en", "US"), "id1");
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Object(), new Locale("en", "US"), "id2");
        assertEquals(1, nodePointer1.compareChildNodePointers(nodePointer2, nodePointer1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersTwoElements_Upty4() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Object(), new Locale("en", "US"), "id1");
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Object(), new Locale("en", "US"), "id2");
        assertEquals(0, nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersAttributeAndElementInListWithSameName_apEN9() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Object(), new Locale("en", "US"), "id1");
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Object(), new Locale("en", "US"), "id1");
        assertEquals(-1, nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextValue_pXcb0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue("New Text");
        assertEquals("New Text", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextValueEmpty_bohi3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue("");
        assertNull(((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextValueNull_nNrE4() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue(null);
        assertNull(((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextValueComment_plxW9() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Comment("Initial Comment"), Locale.US);
        jdn.setValue("New Comment");
        assertEquals("New Comment", ((Comment) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextValueObject_sEDh11() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue(new Object());
        assertNull(((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueElement_HKLH1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue(new Element("child"));
        assertEquals(1, ((Element) jdn.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextWithEmptyString_eutN3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue("");
        assertEquals("", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextWithNull_LzVG4() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue(null);
        assertEquals("Initial Text", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueProcessingInstruction_mRkj8_1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue(new ProcessingInstruction("target", "Content"));
        assertEquals(1, ((Element) jdn.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueProcessingInstruction_mRkj8_2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue(new ProcessingInstruction("target", "Content"));
        assertEquals("target", ((ProcessingInstruction) ((Element) jdn.getNode()).getContent().get(0)).getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueProcessingInstruction_mRkj8_3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue(new ProcessingInstruction("target", "Content"));
        assertEquals("Content", ((ProcessingInstruction) ((Element) jdn.getNode()).getContent().get(0)).getData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueComment_upEv9_1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue(new Comment("Comment Content"));
        assertEquals(1, ((Element) jdn.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueComment_upEv9_2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue(new Comment("Comment Content"));
        assertEquals("Comment Content", ((Comment) ((Element) jdn.getNode()).getContent().get(0)).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueNull_LFcb10() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue(null);
        assertEquals(0, ((Element) jdn.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueEmptyString_eaMA11() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue("");
        assertEquals(0, ((Element) jdn.getNode()).getContent().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildFailure_CoYZ2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName qname = new QName("prefix", "localName");
        try {
            jdn.createChild(JXPathContext.newContext(new Object()), qname, 1);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
            assertEquals("Expected message", "Factory could not create a child node for path: " + jdn.asPath() + "/" + qname + "[1]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildNullContext_vAee3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName qname = new QName("prefix", "localName");
        try {
            jdn.createChild(null, qname, 1);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Expected message", "context", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildNullQName_bTMC4() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        try {
            jdn.createChild(JXPathContext.newContext(new Object()), null, 1);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Expected message", "name", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildNegativeIndex_SdLL5() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName qname = new QName("prefix", "localName");
        try {
            jdn.createChild(JXPathContext.newContext(new Object()), qname, -1);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Expected message", "Index: -1, Size: 0", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_ydgQ0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new QName("prefix", "localName"), Locale.US);
        boolean result = jdn.isCollection();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection2_NBuC1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new QName("prefix", "localName"), Locale.US, "id");
        boolean result = jdn.isCollection();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_XNkG0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        int result = pointer.hashCode();
        assertEquals(result, ((Object) pointer.getNode()).hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() throws Exception {
        MockitoAnnotations.initMocks(this);
        jdomnodepointer = new JDOMNodePointer(null, null, null);
        // Arrange
        when(qName.getName()).thenReturn("attributeName");
        when(jdomnodepointer.attributeIterator(qName)).thenReturn(jdomAttributeIterator);
        // Act
        NodeIterator nodeIterator = jdomnodepointer.attributeIterator(qName);
        // Assert
        assertEquals(jdomAttributeIterator, nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NodeNotElementOrProcessingInstruction_uPmb4() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("text"), Locale.US);
        try {
            pointer.getName();
            fail("Expected ClassCastException");
        } catch (ClassCastException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_Element_wiUK0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("namespace"), Locale.US);
        assertEquals("namespace", jdn.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_Element_EmptyNamespace_DrXV1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("namespace"), Locale.US);
        assertEquals(null, jdn.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_DURT0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new QName("prefix", "localName"), Locale.US);
        int length = jdn.getLength();
        assert length == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() {
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(null, Locale.US, null);
        Mockito.when(jdomnodepointer.namespaceIterator()).thenReturn(namespaceIterator);
        NodeIterator nodeIterator = jdomnodepointer.namespaceIterator();
        Assertions.assertNotNull(nodeIterator);
        Mockito.verify(jdomnodepointer).namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafElement_vBTm0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        boolean result = pointer.isLeaf();
        assert (result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafOtherNode_tpsS2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("root"), Locale.US);
        boolean result = pointer.isLeaf();
        assert (result == true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_mWVw0() {
        JDOMNodePointer obj = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = obj.equals(obj);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_gRoL1() {
        JDOMNodePointer obj1 = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer obj2 = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = obj1.equals(obj2);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_cJlt2() {
        JDOMNodePointer obj = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = obj.equals(null);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_qoXW3() {
        JDOMNodePointer obj = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = obj.equals("String");
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Element_mPGQ0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        Object result = jdn.getValue();
        assertEquals("expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Text_vCjl1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Hello"), Locale.US);
        Object result = jdn.getValue();
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Comment_QrTr2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Comment("Hello"), Locale.US);
        Object result = jdn.getValue();
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ProcessingInstruction_BhaE3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new ProcessingInstruction("target", "Hello"), Locale.US);
        Object result = jdn.getValue();
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_TextTrim_uDEl9() {
        Text root = new Text("   Hello   ");
        JDOMNodePointer jdn = new JDOMNodePointer(root, Locale.US);
        Object result = jdn.getValue();
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_CommentTrim_WtqR10() {
        Comment root = new Comment("   Hello   ");
        JDOMNodePointer jdn = new JDOMNodePointer(root, Locale.US);
        Object result = jdn.getValue();
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ProcessingInstructionTrim_eVLu11() {
        ProcessingInstruction root = new ProcessingInstruction("target", "   Hello   ");
        JDOMNodePointer jdn = new JDOMNodePointer(root, Locale.US);
        Object result = jdn.getValue();
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_bQJO0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer() throws Exception {
        jdomnodepointer = new JDOMNodePointer(null, Locale.US, "id");
        String prefix = "prefix";
        NodePointer expected = mock(NodePointer.class);
        when(jdomnodepointer.namespacePointer(prefix)).thenReturn(expected);
        NodePointer actual = jdomnodepointer.namespacePointer(prefix);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_FWXl1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        NodePointer np = jdn.namespacePointer("prefix");
        assert np != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameElement_uYYC0() {
        Element element = new Element("prefix", "localName");
        assertEquals("localName", JDOMNodePointer.getLocalName(element));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameAttribute_ePBL1() {
        Attribute attribute = new Attribute("prefix", "localName");
        assertEquals("localName", JDOMNodePointer.getLocalName(attribute));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameNull_yTZf2() {
        Object node = null;
        assertNull(JDOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_IdNotNull_dCCy0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US, "id");
        assertEquals("id('id')", jdn.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_IdNull_PTAb1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        assertEquals("", jdn.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolverNull_GBPx0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        NamespaceResolver namespaceResolver = pointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolverNotNull_Mpbo1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US, "id");
        pointer.getNamespaceResolver();
        NamespaceResolver namespaceResolver = pointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_Mmkl0() throws Exception {
        MockitoAnnotations.initMocks(this);
        Element element = mock(Element.class);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        assertEquals(0, jdomnodepointer.compareChildNodePointers(jdomnodepointer, jdomnodepointer));
        assertEquals(-1, jdomnodepointer.compareChildNodePointers(jdomnodepointer, jdomnodepointer));
        assertEquals(1, jdomnodepointer.compareChildNodePointers(jdomnodepointer, jdomnodepointer));
        assertEquals(0, jdomnodepointer.compareChildNodePointers(jdomnodepointer, jdomnodepointer));
        try {
            JDOMNodePointer jdomnodepointer1 = new JDOMNodePointer(new Object(), Locale.US);
            jdomnodepointer1.compareChildNodePointers(jdomnodepointer1, jdomnodepointer1);
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueElementValueNull_vJFH5_BJPf1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("Initial Element"), Locale.US);
        jdn.setValue(null);
        Element node = (Element) jdn.getNode();
        assertNull(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueDocumentValueNull_LNbA6_HRRP1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Document(), Locale.US);
        jdn.setValue(null);
        Document document = (Document) jdn.getNode();
        assertNull(document);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextValuePI_alsW8_ZEqz0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new ProcessingInstruction("Initial PI", "Initial PI data"), Locale.US);
        jdn.setValue("New PI");
        assertEquals("New PI", ((ProcessingInstruction) jdn.getNode()).getData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_TKyN0_tPCc0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = true; // Replace with your expected result
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode2_PcEE1_bvsk0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US, "id");
        boolean result = jdn.testNode(null); // Changed from new NodeTest() to null
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWholeCollection_TcTe0_IRdi0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName qname = new QName("prefix", "localName");
        NodePointer np = jdn.createChild(JXPathContext.newContext(new Object()), qname, JDOMNodePointer.WHOLE_COLLECTION);
        assertEquals(null, np);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildIndex_yPxT1_CxgL0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName qname = new QName("prefix", "localName");
        NodePointer np = jdn.createChild(JXPathContext.newContext(new Object()), qname, 1);
        assertEquals(null, np);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNode_wsHX3_AmwU0() {
        JDOMNodePointer pointer = new JDOMNodePointer(null, Locale.US, "");
        try {
            pointer.getName();
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_fUGs0() throws Exception {
        JDOMNodePointer jdomnodepointer = Mockito.mock(JDOMNodePointer.class);
        Object node = new Object();
        Mockito.when(jdomnodepointer.getImmediateNode()).thenReturn(node);
        assertEquals(node, jdomnodepointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeNullNode_xVQK0_YWGa0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("prefix", "name");
        NodePointer result = jdn.createAttribute(context, name);
        assertEquals(result, jdn.createAttribute(context, name));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_JakS0() throws Exception {
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(new Object(), Locale.US, "id");
        boolean result = jdomnodepointer.equals(jdomnodepointer);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNullProcessingInstructionTest_txdu14_DLJW0() {
        boolean result = false; // Initialize result to false
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.US);
        Element element = new Element("test");
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("test");
        result = JDOMNodePointer.testNode(nodePointer, element, processingInstructionTest);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLanguage_CurrentLanguageDoesNotStartWithLang_ReturnsSuperObjectResult_ztkC0() throws Exception {
        MockitoAnnotations.initMocks(this);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(superObject, Locale.getDefault(), "id");
        String lang = "en";
        String current = "fr";
        when(superObject.getLanguage()).thenReturn(current);
        boolean result = jdomnodepointer.isLanguage(lang);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLanguage_CurrentLanguageStartsWithLang_ReturnsTrue_Razz0() throws Exception {
        MockitoAnnotations.initMocks(this);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(null, Locale.US, "id");
        String lang = "en";
        String current = "en-US";
        when(superObject.getLanguage()).thenReturn(current);
        boolean result = jdomnodepointer.isLanguage(lang);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_AmMc0_JFjB0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("name");
        int index = 0;
        Object value = "value";
        NodePointer result = jdn.createChild(context, name, index, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_Text_YGxo0() throws Exception {
        MockitoAnnotations.initMocks(this);
        JDOMNodePointer jdomnodepointer = null;
        Text node = Mockito.mock(Text.class);
        when(node instanceof Text).thenReturn(true);
        String result = jdomnodepointer.asPath();
        assertEquals("/parent/text()", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_Id_idBe0() throws Exception {
        MockitoAnnotations.initMocks(this);
        JDOMNodePointer jdomnodepointer = new JDOMNodePointer(null, null, "id");
        when(id).thenReturn("id");
        String result = jdomnodepointer.asPath();
        assertEquals("id('id')", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueProcessingInstruction_mRkj8() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue(new ProcessingInstruction("target", "Content"));
        assertEquals(1, ((Element) jdn.getNode()).getContent().size());
        assertEquals("target", ((ProcessingInstruction) ((Element) jdn.getNode()).getContent().get(0)).getTarget());
        assertEquals("Content", ((ProcessingInstruction) ((Element) jdn.getNode()).getContent().get(0)).getData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueComment_upEv9() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.setValue(new Comment("Comment Content"));
        assertEquals(1, ((Element) jdn.getNode()).getContent().size());
        assertEquals("Comment Content", ((Comment) ((Element) jdn.getNode()).getContent().get(0)).getText());
    }
}