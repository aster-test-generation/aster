/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private QName name;
    @Mock
    private Object bean;
    @Mock
    private Locale locale;
    private DynamicPointer dynamicpointer;
    @Mock
    private QName qName;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private DynamicAttributeIterator dynamicAttributeIterator;
    private DynamicPointer dynamicPointer;
    @Mock
    private QName qname;
    @Mock
    private PageContextHandler handler;
    @Mock
    private DynamicPointer parent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() {
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Act and Assert
        assertTrue(dynamicpointer.equals(dynamicpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullObject_ReturnsFalse() {
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Act and Assert
        assertFalse(dynamicpointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() {
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Act and Assert
        assertFalse(dynamicpointer.equals("Not a DynamicPointer"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameBeanAndName_ReturnsTrue() {
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Act and Assert
        DynamicPointer other = new DynamicPointer(name, bean, pageContextHandler, locale);
        assertTrue(dynamicpointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameBeanDifferentName_ReturnsFalse() {
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Act and Assert
        QName otherName = Mockito.mock(QName.class);
        DynamicPointer other = new DynamicPointer(otherName, bean, pageContextHandler, locale);
        assertFalse(dynamicpointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBeanSameName_ReturnsFalse() {
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Act and Assert
        Object otherBean = Mockito.mock(Object.class);
        DynamicPointer other = new DynamicPointer(name, otherBean, pageContextHandler, locale);
        assertFalse(dynamicpointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_JBbx0() {
        DynamicPointer obj = new DynamicPointer(new QName("name", "localName"), new Object(), new PageContextHandler(), Locale.US);
        boolean result = obj.equals(obj);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_qQhm1() {
        DynamicPointer obj = new DynamicPointer(new QName("name", "localName"), new Object(), new PageContextHandler(), Locale.US);
        boolean result = obj.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_vHfd2() {
        DynamicPointer obj = new DynamicPointer(new QName("name", "localName"), new Object(), new PageContextHandler(), Locale.US);
        boolean result = obj.equals(new Object());
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentName_kzOI3() {
        DynamicPointer obj1 = new DynamicPointer(new QName("name1", "localName"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer obj2 = new DynamicPointer(new QName("name2", "localName"), new Object(), new PageContextHandler(), Locale.US);
        boolean result = obj1.equals(obj2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameNameDifferentBean_MWAN4() {
        DynamicPointer obj1 = new DynamicPointer(new QName("name", "localName"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer obj2 = new DynamicPointer(new QName("name", "localName"), new Object(), new PageContextHandler(), Locale.US);
        boolean result = obj1.equals(obj2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameNameSameBeanDifferentLocale_FEbG6() {
        DynamicPointer obj1 = new DynamicPointer(new QName("name", "localName"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer obj2 = new DynamicPointer(new QName("name", "localName"), new Object(), new PageContextHandler(), Locale.FRANCE);
        boolean result = obj1.equals(obj2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_hUrW0() {
        QName qName = new QName("prefix", "localName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        boolean result = dynamicPointer.isCollection();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBeanAndName_Nsho0() {
        QName qName = new QName("prefix", "localName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        int hashCode = pointer.hashCode();
        Assertions.assertEquals(System.identityHashCode(bean) + (qName != null ? qName.hashCode() : 0), hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithoutName_BBBp1() {
        QName qName = null;
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        int hashCode = pointer.hashCode();
        Assertions.assertEquals(System.identityHashCode(bean), hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_wWNi0() {
        PageContextHandler handler = new PageContextHandler();
        QName name = new QName("test");
        Object bean = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, new Locale("en", "US"));
        PropertyPointer propertyPointer = dynamicPointer.getPropertyPointer();
        assert propertyPointer instanceof DynamicPropertyPointer;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullParent_IUKP0() {
        DynamicPointer pointer = new DynamicPointer(null, null, new PageContextHandler(), new Locale("en"));
        String result = pointer.asPath();
        assertEquals("/", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNotNullParent_dPGN1() {
        DynamicPointer pointer = new DynamicPointer(new DOMNodePointer(null, new Locale("en"), "id"), new QName("prefix", "localName"), null, new PageContextHandler());
        String result = pointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_dSUK0() {
        QName qName = new QName("prefix", "localName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        int length = dynamicPointer.getLength();
        assert length == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_IMlN0() {
        QName qName = new QName("prefix", "localName");
        Object bean = new Object();
        PageContextHandler pageContextHandler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, pageContextHandler, locale);
        Object baseValue = dynamicPointer.getBaseValue();
        assert baseValue == bean;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDynamicPropertyDeclarationSupported_v_HTss0() throws Exception {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), pageContextHandler, Locale.US);
        boolean result = dynamicPointer.isLeaf();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_XnjR0_EgCE0() {
        QName qName = new QName("prefix", "localName");
        PageContextHandler pageContextHandler = new PageContextHandler();
        Locale locale = new Locale("language", "country", "variant");
        Object bean = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(null, qName, bean, pageContextHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator2_RcVN1_ZBIS0() {
        QName qName = new QName("qualifiedName");
        PageContextHandler pageContextHandler = new PageContextHandler();
        Locale locale = new Locale("language", "country", "variant");
        Object bean = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(null, qName, bean, pageContextHandler);
        NodeIterator result = dynamicPointer.attributeIterator(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodeIterator3_mqZW2_ARkD0() {
        QName qName = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler pageContextHandler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(null, qName, bean, pageContextHandler);
        NodeIterator nodeIterator = dynamicPointer.createNodeIterator("property", true, null);
        assert nodeIterator instanceof PropertyIterator;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_uwKh0() throws Exception {
        dynamicpointer = new DynamicPointer(qname, bean, pageContextHandler, locale);
        PropertyPointer propertyPointer = dynamicpointer.getPropertyPointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength_s_CeAn0() throws Exception {
        DynamicPointer dynamicPointer = new DynamicPointer(null, null, pageContextHandler, locale);
        int length = dynamicPointer.getLength();
        assertEquals(1, length);
    }
}