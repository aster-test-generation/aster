/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathException_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCause_WXZo0_1() {
        JXPathException exception = new JXPathException("test message");
        Throwable cause = exception.getCause();
        assertNotNull(cause);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCause_WXZo0_2() {
        JXPathException exception = new JXPathException("test message");
        Throwable cause = exception.getCause();
        assertEquals("test message", cause.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetException_AxFL0() {
        JXPathException exception = new JXPathException("test message");
        Throwable result = exception.getException();
        assertEquals("test message", result.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithoutMessage_TKqm1() {
        JXPathException exception = new JXPathException();
        Throwable result = exception.getException();
        assertEquals(null, result.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithMessageAndCause_aETo2_2() {
        JXPathException exception = new JXPathException("test message", new Exception("test cause"));
        Throwable result = exception.getException();
        assertEquals("test cause", result.getCause().getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithCause_snHb3() {
        JXPathException exception = new JXPathException(new Exception("test cause"));
        Throwable result = exception.getException();
        assertEquals("test cause", result.getCause().getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithMessageAndCause_aETo2_1_fid2() {
        JXPathException exception = new JXPathException("test message", new Exception("test cause"));
        Throwable result = exception.getException();
        assertEquals("test message", result.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMessageWithNonNullException_YfeM1_fid2() {
        JXPathException exception = new JXPathException("Test message", new Exception("Inner exception"));
        assertEquals("Test message; java.lang.Exception", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMessageWithNullMessageAndNonNullException_kNra2_fid2() {
        JXPathException exception = new JXPathException(new Exception("Inner exception"));
        assertEquals("java.lang.Exception", exception.getMessage());
    }
}