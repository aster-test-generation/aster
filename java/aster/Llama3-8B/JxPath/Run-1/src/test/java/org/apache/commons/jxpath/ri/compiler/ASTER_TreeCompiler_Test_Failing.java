/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_xjte0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2};
        Object result = treeCompiler.and(arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_rUsS1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3};
        Object result = treeCompiler.union(arguments);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_aHKT0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.function(1, new Object[]{"arg1", "arg2"});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStepWithNullNodeTest_FGmJ1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        try {
            treeCompiler.step(1, null, new Object[]{"predicate1", "predicate2"});
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_DOYW0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3};
        Object result = treeCompiler.sum(arguments);
        assert result instanceof Object;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_bYfF0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] steps = new Object[]{"step1", "step2", "step3"};
        Object result = treeCompiler.locationPath(true, steps);
        assertEquals(LocationPath.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_ISmc0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.number("10.5");
        assertEquals(Double.valueOf("10.5"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_KMJP0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("name");
        Object[] args = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.function(qName, args);
        assertEquals("ExtensionFunction(name, [arg1, arg2])", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_yyre0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("test");
        assertNotNull(result);
        assertEquals("ProcessingInstructionTest{instruction='test'}", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQname_ZNyg0_sWeR0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName result = (QName) treeCompiler.processingInstructionTest("prefix:name");
        assertEquals("prefix:name", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStep_RSzs0_qcEi0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("processing-instruction('Step(1, NodeTest, [predicate1, predicate2])')");
        assertEquals("processing-instruction('Step(1, NodeTest, [predicate1, predicate2])')", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanOrEqual_yRfF0_OzeM0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        CoreOperationLessThanOrEqual result = (CoreOperationLessThanOrEqual) treeCompiler.processingInstructionTest("lessThanOrEqual(1, 2)");
        assertEquals(CoreOperationLessThanOrEqual.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_yyre0_2_fid2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("test");
        assertEquals("ProcessingInstructionTest{instruction='test'}", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStep_RSzs0_qcEi0_fid2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("Step(1, NodeTest, [predicate1, predicate2])");
        assertEquals("Step(1, NodeTest, [predicate1, predicate2])", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThan_BUuo0_xTOG0_fid2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String left = "1";
        String right = "2";
        Object result = treeCompiler.processingInstructionTest("greaterThan(" + left + "," + right + ")");
        assertEquals(CoreOperationGreaterThan.class, result.getClass());
    }
}