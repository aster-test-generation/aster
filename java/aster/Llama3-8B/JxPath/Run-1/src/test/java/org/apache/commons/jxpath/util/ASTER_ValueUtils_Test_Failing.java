/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.beans.PropertyDescriptor;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArray_djzi0() {
        Object collection = new Integer[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(collection, 2);
        assertArrayEquals(new Integer[]{1, 2, 3, 4}, ((Integer[]) result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNullCollectionIndexOutOfBoundsException_FKLw7() {
        Object collection = null;
        try {
            ValueUtils.remove(collection, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot remove null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveEmptyCollection_gmba8() {
        Object collection = new ArrayList<>();
        Object result = ValueUtils.remove(collection, 0);
        assertEquals(collection, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyCollection_iyXU5() {
        Collection collection = new ArrayList();
        Iterator iterator = ValueUtils.iterate(collection);
        assert iterator == Collections.EMPTY_LIST.iterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterface_eFIp3() {
        assertEquals(0, ValueUtils.getCollectionHint(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueCollection_XpSa2() {
        try {
            Collection collection = new ArrayList();
            ValueUtils.setValue(collection, 1, "test");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueNullCollection_LsUW3() {
        Object collection = null;
        try {
            ValueUtils.setValue(collection, 1, "test");
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueNonArrayCollection_YBOm4() {
        Map map = new HashMap();
        try {
            ValueUtils.setValue(map, 1, "test");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullPropertyDescriptor_hMys2() {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        try {
            ValueUtils.getValue(bean, propertyDescriptor);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("No read method", ex.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionSmallSize_vaTp3() {
        Object collection = new Integer[3];
        Object result = ValueUtils.expandCollection(collection, 3);
        assertArrayEquals(new Integer[]{1, 2, 3}, (Integer[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionTooBig_xRtQ5() {
        Object collection = new Integer[3];
        try {
            ValueUtils.expandCollection(collection, 6);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("adjustment of [I@... to size 6 is not an expansion", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndexOutOfBoundsException_DwOV2_rQHq0() {
        Object bean = new Object();
        try {
            ValueUtils.expandCollection(bean, 10);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_PMiX2_ZMWb0_1() {
        List collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        ValueUtils.expandCollection(collection, 2);
        assertEquals(5, ((List) collection).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_PMiX2_ZMWb0_2() {
        List collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        ValueUtils.expandCollection(collection, 2);
        assertEquals(1, ((List) collection).get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_PMiX2_ZMWb0_3() {
        List collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        ValueUtils.expandCollection(collection, 2);
        assertEquals(2, ((List) collection).get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_PMiX2_ZMWb0_4() {
        List collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        ValueUtils.expandCollection(collection, 2);
        assertEquals(null, ((List) collection).get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_PMiX2_ZMWb0_5() {
        List collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        ValueUtils.expandCollection(collection, 2);
        assertEquals(null, ((List) collection).get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_PMiX2_ZMWb0_6() {
        List collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        ValueUtils.expandCollection(collection, 2);
        assertEquals(null, ((List) collection).get(4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexOutOfBoundsException_vgOc3_iUCu0() {
        List collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        try {
            ValueUtils.expandCollection(collection, 6);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("adjustment of [1, 2, 3, 4, 5] to size 6 is not an expansion", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinalClass_oeOq4_uEhR0() {
        assertEquals(-1, ValueUtils.getCollectionHint(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueNotIndexedPropertyDescriptor_cCnT1_zvRK1() {
        try {
            ValueUtils.setValue(new Object(), new PropertyDescriptor("prop", Object.class), 0, new Object());
        } catch (java.beans.IntrospectionException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueCollection_SJrK2_mtaQ1() {
        try {
            ValueUtils.setValue(new Object(), new PropertyDescriptor("prop", List.class), 0, new Object());
        } catch (java.beans.IntrospectionException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueNotCollection_TuZq3_gNky1() {
        try {
            ValueUtils.setValue(new Object(), new PropertyDescriptor("prop", String.class), 0, new Object());
        } catch (java.beans.IntrospectionException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArray_djzi0_fid2() {
        Object collection = new Integer[]{1, 2, 4, 4, 5};
        Object result = ValueUtils.remove(collection, 2);
        assertArrayEquals(new Integer[]{1, 2, 4, 4}, ((Integer[]) result));
    }
}