/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrNullArray_zMxr0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = null;
        Object result = treeCompiler.or(arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrEmptyArray_iMgZ1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[0];
        Object result = treeCompiler.or(arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_QtYD0_bOqD1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object argument = new ProcessingInstructionTest("expression");
        Object result = treeCompiler.processingInstructionTest("minus");
        assertEquals(ProcessingInstructionTest.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanOrEqual_MJZB0_RMdp0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Integer(5);
        Object right = new Integer(10);
        Object result = treeCompiler.processingInstructionTest("lessThanOrEqual(" + left + "," + right + ")");
    }
}