/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NullElementPointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_RwoC0() {
        NullElementPointer pointer = new NullElementPointer(null, 0);
        assertEquals(true, pointer.equals(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_KLFp1() {
        NullElementPointer pointer = new NullElementPointer(null, 0);
        assertEquals(false, pointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_lQdh2() {
        NullElementPointer pointer = new NullElementPointer(null, 0);
        assertEquals(false, pointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObjectButDifferentIndex_DjPI3() {
        NullElementPointer pointer1 = new NullElementPointer(null, 0);
        NullElementPointer pointer2 = new NullElementPointer(null, 1);
        assertEquals(false, pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObjectButDifferentParent_ajLb4() {
        NullElementPointer pointer1 = new NullElementPointer(new DOMNodePointer(null, null, null), 0);
        NullElementPointer pointer2 = new NullElementPointer(new DOMNodePointer(null, null, null), 0);
        assertEquals(false, pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObjectButDifferentParentAndIndex_ZtnN5() {
        NullElementPointer pointer1 = new NullElementPointer(new DOMNodePointer(null, null, null), 0);
        NullElementPointer pointer2 = new NullElementPointer(new DOMNodePointer(null, null, null), 1);
        assertEquals(false, pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_oCkl0() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 0);
        try {
            nullElementPointer.setValue("testValue");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            assertEquals("Collection element does not exist: " + nullElementPointer, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_QZKj0() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 0);
        boolean result = nullElementPointer.isCollection();
        assert(result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_eJdz0() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 0);
        boolean result = nullElementPointer.isContainer();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ReturnsNull_LYOm0() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 0);
        QName result = nullElementPointer.getName();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParentAndIndex_JgVn1() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 1);
        String result = nullElementPointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_bTcC0() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 0);
        Object baseValue = nullElementPointer.getBaseValue();
        assert(baseValue == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_oerd0() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 0);
        boolean actual = nullElementPointer.isActual();
        boolean expected = false;
        assert (actual == expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_UOgz0_1() {
        QName name = new QName("testName");
        NullElementPointer nullElementPointer = new NullElementPointer(new DOMNodePointer(null, Locale.US, "id"), 0);
        NodePointer result = nullElementPointer.getValuePointer();
        assertNotNull(result);
    }
}