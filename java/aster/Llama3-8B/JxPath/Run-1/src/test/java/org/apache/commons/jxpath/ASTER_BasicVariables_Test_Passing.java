/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicVariables_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_zBez0() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "{}";
        assertEquals(expected, basicVariables.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariableNonExistingVariable_BxHR1() {
        BasicVariables basicVariables = new BasicVariables();
        try {
            basicVariables.getVariable("nonExistingVariable");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("No such variable: 'nonExistingVariable'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_AYWJ0_vvCR0() {
        BasicVariables basicVariables = new BasicVariables();
        Map<String, String> vars = new HashMap<>();
        vars.put("var1", "value1");
        basicVariables.undeclareVariable("var1");
        assertFalse(basicVariables.isDeclaredVariable("var1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariableExistingVariable_QjHu0_OGiQ1() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.undeclareVariable("test");
    }
}