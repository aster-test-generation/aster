/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPropertyPointer_Test_Failing {
    private String propertyName = "*";
    @Mock
    private DOMNodePointer parent;
    @Mock
    private PropertyOwnerPointer propertyOwnerPointer;
    @Mock
    private PropertyPointer propertyPointer;
    @Mock
    private QName qname;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private QName qName;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JXPathContext context;
    @Mock
    private NullPropertyPointer nullpropertypointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DOMNodePointer immediateParentPointer;
    private boolean byNameAttribute = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(parent.createPath(jXPathContext)).thenReturn(parent);
        // Arrange
        Object value = "testValue";
        NodePointer newParent = nullpropertypointer.createPath(jXPathContext, value);
        // Act
        // Assert
        Mockito.verify(parent, Mockito.times(1)).createPath(jXPathContext);
        assertEquals(parent, newParent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(parent.createPath(context)).thenReturn(parent);
        NodePointer newParent = nullpropertypointer.createPath(context);
        assertNull(parent);
        verify(parent, times(1)).createPath(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        nullpropertypointer = Mockito.mock(NullPropertyPointer.class);
        // Arrange
        Mockito.when(nullpropertypointer.getIndex()).thenReturn(1);
        // Act
        boolean result = nullpropertypointer.isCollection();
        // Assert
        Mockito.verify(nullpropertypointer, Mockito.times(1)).getIndex();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        // Arrange
        Mockito.when(nullpropertypointer.getImmediateNode()).thenReturn(null);
        // Act
        Object immediateNode = nullpropertypointer.getImmediateNode();
        // Assert
        Mockito.verify(nullpropertypointer, Mockito.times(1)).getImmediateNode();
        Assertions.assertNull(immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        // Arrange
        Mockito.when(nullpropertypointer.getBaseValue()).thenReturn(null);
        // Act
        Object baseValue = nullpropertypointer.getBaseValue();
        // Assert
        Mockito.verify(nullpropertypointer, Mockito.times(1)).getBaseValue();
        Assertions.assertNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAttribute_HRSv0_fKXn0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        JXPathContext jXPathContext = JXPathContext.newContext(null);
        NodePointer nodePointer = nullPropertyPointer.createPath(jXPathContext, "value");
        assertEquals("value", nodePointer.getNodeValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_XsvG0_VPpj0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        JXPathContext jXPathContext = JXPathContext.newContext(null);
        QName qName = new QName("prefix", "localName");
        NodePointer nodePointer = nullPropertyPointer.createChild(jXPathContext, qName, 0);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathNullParent_Oeqr0_Kzkp1() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        JXPathContext context = JXPathContext.newContext(null);
        NodePointer result = nullPropertyPointer.createPath(context);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAttribute_DHdL1_ANtu0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        JXPathContext context = JXPathContext.newContext(null);
        NodePointer result = nullPropertyPointer.createPath(context);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathBadFactory_sVdp3_Wqot0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        JXPathContext context = JXPathContext.newContext(null);
        NodePointer result = nullPropertyPointer.createPath(context);
        Assertions.fail();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_kCwp0_rWON0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("name");
        int index = 0;
        Object value = "value";
        NodePointer result = nullPropertyPointer.createChild(context, name, index, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_ZNoa0() throws Exception {
        MockitoAnnotations.initMocks(this);
        nullpropertypointer = new NullPropertyPointer(parent);
        String expectedPath = "path";
        when(immediateParentPointer.asPath()).thenReturn(expectedPath);
        String propertyName = "property";
        when(nullpropertypointer.getImmediateParentPointer()).thenReturn(immediateParentPointer);
        when(nullpropertypointer.getPropertyName()).thenReturn(propertyName);
        String actualPath = nullpropertypointer.asPath();
        assertEquals(expectedPath + "[@name='" + propertyName + "']", actualPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutNameAttribute_LYmm2_KaWj0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(variablePointer);
        String result = nullPropertyPointer.asPath();
        assert result.equals("somePath");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyIndex_JZiC0() throws Exception {
        MockitoAnnotations.initMocks(this);
        NullPropertyPointer nullpropertypointer = new NullPropertyPointer(null);
        nullpropertypointer.setPropertyIndex(0);
        Mockito.verify(nullpropertypointer, Mockito.times(1)).setPropertyIndex(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_UxUX0_fid2() {
        QName qName = new QName("property");
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        NodePointer nodePointer = nullPropertyPointer.getValuePointer();
        assertEquals(new QName("property"), nodePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_fid2() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(parent.createPath(context)).thenReturn(parent);
        NodePointer newParent = nullpropertypointer.createPath(context);
        assertEquals(parent, newParent);
        verify(parent, times(1)).createPath(context);
    }
}