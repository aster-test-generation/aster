/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
    @Mock
    EvalContext evalContext;
    @Mock
    Constant expression;
    @Mock
    private Constant constant;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @Mock
    private Expression[] predicates;
    @Mock
    private Step[] steps;
    private ExpressionPath expressionpath;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringConstantExpression_VHNS0() {
        Constant constant = new Constant("hello");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
        assert result.equals("(hello)");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNumberExpression_iHks1() {
        Constant constant = new Constant(123);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
        assert result.equals("123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPredicates_ucqR5() {
        Constant constant = new Constant("hello");
        Expression[] predicates = new Expression[]{new Constant("world")};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
        assert result.equals("(hello)[world]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        expression = mock(Constant.class);
        evalContext = mock(EvalContext.class);
        expressionpath = new ExpressionPath(expression, new Expression[0], new Step[0]);
        // Arrange
        when(evalContext.getValue()).thenReturn("Test Value");
        when(expression.toString()).thenReturn("Test Constant");
        // Act
        Object result = expressionpath.computeValue(evalContext);
        // Assert
        assertEquals("Test Constant", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentConstantTrue_IoVu0() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentConstantFalse_dUqj1() {
        Constant constant = new Constant(1);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentPredicateTrue_CtHv2() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[]{new Constant("string")};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentPredicateFalse_fJFW3() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[]{new Constant(1)};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentNoPredicates_rJVP4() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute() throws Exception {
        expression = new Constant("test");
        evalContext = Mockito.mock(EvalContext.class);
        // Arrange
        ExpressionPath expressionPath = new ExpressionPath(expression, new Expression[0], new Step[0]);
        // Act
        Object result = expressionPath.compute(evalContext);
        // Assert
        Mockito.verify(evalContext, Mockito.times(1)).getJXPathContext();
        Mockito.verifyNoMoreInteractions(evalContext);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionConstantString_AUwP0() {
        Constant constant = new Constant("Hello");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression result = expressionPath.getExpression();
        assert result instanceof Constant;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionConstantNumber_robD1() {
        Constant constant = new Constant(123);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression result = expressionPath.getExpression();
        assert result instanceof Constant;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPathTrue_Ysis0() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertTrue(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPathFalse_rywy1() {
        Constant constant = new Constant(1);
        Expression[] predicates = new Expression[1];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertFalse(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPathNullPredicates_xXmr2() {
        Constant constant = new Constant("string");
        Expression[] predicates = null;
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertFalse(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_hkRK0_hRDr0() {
        Constant constant1 = new Constant("hello");
        Constant constant2 = new Constant(123);
        Expression[] predicates = new Expression[]{constant1, constant2};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant1, predicates, steps);
        Expression[] expectedPredicates = expressionPath.getPredicates();
        assertArrayEquals(new Expression[]{constant1, constant2}, expectedPredicates);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpressionPath_qzHy0() throws Exception {
        Expression expression = mock(Constant.class);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionpath = new ExpressionPath(expression, predicates, steps);
        when(expression.compute(evalContext)).thenReturn("InitialContext");
        when(evalContext.getRootContext()).thenReturn(mock(RootContext.class));
        when(evalContext.getSingleNodePointer()).thenReturn(mock(NodePointer.class));
        Object result = expressionpath.expressionPath(evalContext, true);
        verify(evalContext, times(1)).getRootContext();
        verify(evalContext, times(1)).getSingleNodePointer();
        assertEquals("InitialContext", result);
    }
}