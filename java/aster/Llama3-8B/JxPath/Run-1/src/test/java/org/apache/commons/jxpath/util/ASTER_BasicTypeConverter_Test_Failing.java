/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNonConvertibleObject_cJnQ15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Object(), Double.class);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNonConvertibleArray_erVZ16() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Object[]{1, 2, 3}, Double[].class);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNonConvertibleCollection_Huvv17() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Arrays.asList(1, 2, 3), Double.class);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNonConvertiblePrimitiveBoolean_axke20() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(true, Double.class);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNonConvertiblePrimitiveNumber_QBqU21() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(1, Double.class);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNonConvertiblePrimitiveArray_RZYu22() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new boolean[]{true, false}, Double[].class);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForInterface_LHbN2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToPrimitive_dxQs1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = new Object();
        Object result = converter.convert(object, int.class);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertPrimitiveNodeSet_HaMS12_hqva1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(JXPathContext.newContext(new Object()).getValue("true"), boolean.class);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNonConvertibleNodeSet_mOXW18_EFBq0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Arrays.asList("test"), Double.class);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNonConvertiblePointer_dOxj19_THJg0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert("test", Double.class);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForSet_vPOD4_NmTQ0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = (Collection) converter.convertStringToPrimitive("test", Set.class);
        assert result instanceof HashSet;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNodeSetToPrimitive_mkdG7_DBKh0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] values = new String[]{"1", "2", "3"};
        Object result = converter.convertStringToPrimitive(values, String[].class);
        String[] expected = values;
        Assertions.assertArrayEquals(expected, (String[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertPointerToPrimitive_Celn8_VOWn0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "1";
        Object result = converter.convertStringToPrimitive(object, String.class);
        Assertions.assertEquals(object, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableList_iSYf0_uXnh0() {
        List<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        Collection<String> unmodifiable = Collections.unmodifiableCollection(list);
        assert unmodifiable instanceof Collection;
        assert !Collections.addAll(new ArrayList<>(), unmodifiable);
    }
}