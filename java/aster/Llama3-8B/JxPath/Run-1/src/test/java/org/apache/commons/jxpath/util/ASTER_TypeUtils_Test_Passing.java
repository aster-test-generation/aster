/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TypeUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertTrue_pYKe0() {
        TypeUtils typeUtils = new TypeUtils();
        Object object = "Hello";
        Class toType = String.class;
        boolean result = typeUtils.canConvert(object, toType);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertFalse_zrOG1() {
        TypeUtils typeUtils = new TypeUtils();
        Object object = new Integer(1);
        Class toType = String.class;
        boolean result = typeUtils.canConvert(object, toType);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeConverter_IXig0() {
        TypeConverter typeConverter = TypeUtils.getTypeConverter();
        assertNotNull(typeConverter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_FXjw1() {
        Object object = new Integer(10);
        Object result = TypeUtils.convert(object, Integer.class);
        assertEquals(object, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitiveForPrimitiveType_UonE0() {
        Class primitiveType = int.class;
        Class result = TypeUtils.wrapPrimitive(primitiveType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitiveForNonPrimitiveType_XdiC1() {
        Class nonPrimitiveType = String.class;
        Class result = TypeUtils.wrapPrimitive(nonPrimitiveType);
        assertEquals(String.class, result);
    }
}