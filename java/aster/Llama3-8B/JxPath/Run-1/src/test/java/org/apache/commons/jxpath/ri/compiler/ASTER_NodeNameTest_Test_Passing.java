/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NodeNameTest_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_QNameWithNamespaceURI_XUkW0() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "namespaceURI");
        assertEquals("namespaceURI", nodeNameTest.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_QNameWithoutNamespaceURI_oQbE1() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        assertEquals(null, nodeNameTest.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameOnly_bEJp0() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        String result = nodeNameTest.toString();
        assert result.equals(qname.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameAndNamespaceURI_Meip1() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "namespaceURI");
        String result = nodeNameTest.toString();
        assert result.equals(qname.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeNameWithNamespaceURI_tqZH1() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "namespaceURI");
        QName result = nodeNameTest.getNodeName();
        assertEquals(qname, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcard_QNameWithPrefixAndLocalName_SwNn0() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        boolean result = nodeNameTest.isWildcard();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcard_QNameWithQualifiedName_iVtz1() {
        QName qname = new QName("qualifiedName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        boolean result = nodeNameTest.isWildcard();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcard_QNameWildcard_toKl2() {
        QName qname = new QName("*");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        boolean result = nodeNameTest.isWildcard();
        assert (result);
    }
}