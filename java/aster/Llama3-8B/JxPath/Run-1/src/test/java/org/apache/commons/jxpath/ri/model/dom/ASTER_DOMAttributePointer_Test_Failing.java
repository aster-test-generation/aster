/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.TypeUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Failing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private DOMAttributePointer domAttributePointer;
    @Mock
    private Attr attr;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private TypeUtils typeUtils;
    @InjectMocks
    private DOMNodePointer domNodePointer;
    @Mock
    private QName qName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(attr.getName()).thenReturn("testAttrName");
        when(parent.equals(Mockito.any())).thenReturn(true);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertEquals(domAttributePointer, domAttributePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(attr.getName()).thenReturn("testAttrName");
        when(parent.equals(Mockito.any())).thenReturn(true);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertEquals(domAttributePointer, new DOMAttributePointer(parent, attr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(attr.getName()).thenReturn("testAttrName");
        when(parent.equals(Mockito.any())).thenReturn(true);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertNotEquals(domAttributePointer, new DOMAttributePointer(null, attr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(attr.getName()).thenReturn("testAttrName");
        when(parent.equals(Mockito.any())).thenReturn(true);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertNotEquals(domAttributePointer, new DOMAttributePointer(parent, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_5() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(attr.getName()).thenReturn("testAttrName");
        when(parent.equals(Mockito.any())).thenReturn(true);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertNotEquals(domAttributePointer, new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() {
        domAttributePointer = new DOMAttributePointer(null, attr);
        when(typeUtils.convert(any(), eq(String.class))).thenReturn("mockedValue");
        String value = "testValue";
        domAttributePointer.setValue(value);
        verify(attr).setValue("mockedValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() {
        MockitoAnnotations.initMocks(this);
        when(attr.getValue()).thenReturn("some value");
        when(attr.getSpecified()).thenReturn(true);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        Object value = domAttributePointer.getValue();
        assertEquals("some value", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        domAttributePointer = new DOMAttributePointer(parent, attr);
        // Arrange
        when(parent.isCollection()).thenReturn(true);
        // Act
        boolean result = domAttributePointer.isCollection();
        // Assert
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        domAttributePointer = new DOMAttributePointer(null, attr);
        // Arrange
        when(attr.hashCode()).thenReturn(123);
        // Act
        int result = domAttributePointer.hashCode();
        // Assert
        assertEquals(123, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(domNodePointer.getNamespaceURI(Mockito.anyString())).thenReturn("namespaceURI");
        Attr attr = mock(Attr.class);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        String namespaceURI = domAttributePointer.getNamespaceURI();
        assertEquals("namespaceURI", namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIAttrNull_fHWs0() {
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        Attr attr = null;
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        String result = pointer.getNamespaceURI();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullParent_pgVy0() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, null);
        String result = pointer.asPath();
        Assertions.assertEquals("@", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathEmptyParent_GnRd1() {
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        DOMAttributePointer pointer = new DOMAttributePointer(parent, null);
        String result = pointer.asPath();
        Assertions.assertEquals("@", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_iTFj0_1() {
        domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        String expectedPrefix = "prefix";
        String expectedLocalName = "localName";
        when(domNodePointer.getPrefix(attr)).thenReturn(expectedPrefix);
        when(domNodePointer.getLocalName(attr)).thenReturn(expectedLocalName);
        QName actual = domAttributePointer.getName();
        assertEquals(expectedPrefix, actual.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_iTFj0_2() {
        domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        String expectedPrefix = "prefix";
        String expectedLocalName = "localName";
        when(domNodePointer.getPrefix(attr)).thenReturn(expectedPrefix);
        when(domNodePointer.getLocalName(attr)).thenReturn(expectedLocalName);
        QName actual = domAttributePointer.getName();
        assertEquals(expectedLocalName, actual.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_ZSlV0() throws Exception {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, mock(Attr.class));
        assertEquals("/root/path@", domAttributePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_eJFx0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, attr);
        when(typeUtils.convert(any(), eq(String.class))).thenReturn("mockedValue");
        String value = "testValue";
        domAttributePointer.setValue(value);
        verify(attr).setValue("mockedValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_pqIY0_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "testId");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("testAttrName");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertEquals(domAttributePointer, domAttributePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_pqIY0_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "testId");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("testAttrName");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertEquals(domAttributePointer, new DOMAttributePointer(parent, attr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_pqIY0_3() throws Exception {
        MockitoAnnotations.initMocks(this);
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "testId");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("testAttrName");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertNotEquals(domAttributePointer, new DOMAttributePointer(null, attr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_pqIY0_4() throws Exception {
        MockitoAnnotations.initMocks(this);
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "testId");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("testAttrName");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertNotEquals(domAttributePointer, new DOMAttributePointer(parent, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_pqIY0_5() throws Exception {
        MockitoAnnotations.initMocks(this);
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "testId");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("testAttrName");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertNotEquals(domAttributePointer, new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_pqIY0_6() throws Exception {
        MockitoAnnotations.initMocks(this);
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "testId");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("testAttrName");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertNotEquals(domAttributePointer, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_pqIY0_7() throws Exception {
        MockitoAnnotations.initMocks(this);
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "testId");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("testAttrName");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        assertNotEquals(domAttributePointer, new DOMAttributePointer(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength_mpBg0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        Attr attr = mock(Attr.class);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        when(parent.isLeaf()).thenReturn(true);
        boolean result = domAttributePointer.isLeaf();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NullNodeTest_ReturnsTrue_LUoy0() {
        DOMNodePointer domAttributePointer = new DOMNodePointer(null, null, null);
        boolean result = domAttributePointer.isLeaf();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NodeTypeTest_ReturnsTrue_bWyV0() {
        DOMNodePointer domAttributePointer = new DOMNodePointer(null, null, null);
        NodeTypeTest nodeTypeTest = Mockito.mock(NodeTypeTest.class);
        Mockito.when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        boolean result = domAttributePointer.isLeaf();
        Assertions.assertTrue(result);
    }
}