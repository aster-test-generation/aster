/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationOr_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_wiIx0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[0]);
        String symbol = coreOperationOr.getSymbol();
        assert(symbol.equals("or"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_WDyf0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[]{});
        boolean result = coreOperationOr.isSymmetric();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_oFIv0_qwdT1() {
        CoreOperationOr operation = new CoreOperationOr(new Expression[0]);
        int precedence = operation.getPrecedence();
        assert precedence == CoreOperationOr.OR_PRECEDENCE;
    }
}