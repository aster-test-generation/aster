/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
    @Mock
    private QName name;
    @Mock
    private DynaBean dynaBean;
    @Mock
    private DynaBeanPointer parent;
    private DynaBeanPointer dynabeanpointer;
    @Mock
    private Locale locale;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with same object
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with null object
        // Test equals with different parent
        DynaBeanPointer otherWithDifferentParent = new DynaBeanPointer(Mockito.mock(DynaBeanPointer.class), name, dynaBean);
        // Test equals with different name
        QName differentName = Mockito.mock(QName.class);
        DynaBeanPointer otherWithDifferentName = new DynaBeanPointer(parent, differentName, dynaBean);
        // Test equals with different dynaBean
        DynaBean differentDynaBean = Mockito.mock(DynaBean.class);
        DynaBeanPointer otherWithDifferentDynaBean = new DynaBeanPointer(parent, name, differentDynaBean);
        assertEquals(dynabeanpointer, dynabeanpointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with same object
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with null object
        // Test equals with different parent
        DynaBeanPointer otherWithDifferentParent = new DynaBeanPointer(Mockito.mock(DynaBeanPointer.class), name, dynaBean);
        // Test equals with different name
        QName differentName = Mockito.mock(QName.class);
        DynaBeanPointer otherWithDifferentName = new DynaBeanPointer(parent, differentName, dynaBean);
        // Test equals with different dynaBean
        DynaBean differentDynaBean = Mockito.mock(DynaBean.class);
        DynaBeanPointer otherWithDifferentDynaBean = new DynaBeanPointer(parent, name, differentDynaBean);
        assertNotEquals(dynabeanpointer, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with same object
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with null object
        // Test equals with different parent
        DynaBeanPointer otherWithDifferentParent = new DynaBeanPointer(Mockito.mock(DynaBeanPointer.class), name, dynaBean);
        // Test equals with different name
        QName differentName = Mockito.mock(QName.class);
        DynaBeanPointer otherWithDifferentName = new DynaBeanPointer(parent, differentName, dynaBean);
        // Test equals with different dynaBean
        DynaBean differentDynaBean = Mockito.mock(DynaBean.class);
        DynaBeanPointer otherWithDifferentDynaBean = new DynaBeanPointer(parent, name, differentDynaBean);
        assertNotEquals(dynabeanpointer, otherWithDifferentParent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_5() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with same object
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with null object
        // Test equals with different parent
        DynaBeanPointer otherWithDifferentParent = new DynaBeanPointer(Mockito.mock(DynaBeanPointer.class), name, dynaBean);
        // Test equals with different name
        QName differentName = Mockito.mock(QName.class);
        DynaBeanPointer otherWithDifferentName = new DynaBeanPointer(parent, differentName, dynaBean);
        // Test equals with different dynaBean
        DynaBean differentDynaBean = Mockito.mock(DynaBean.class);
        DynaBeanPointer otherWithDifferentDynaBean = new DynaBeanPointer(parent, name, differentDynaBean);
        assertNotEquals(dynabeanpointer, otherWithDifferentName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_6() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with same object
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with null object
        // Test equals with different parent
        DynaBeanPointer otherWithDifferentParent = new DynaBeanPointer(Mockito.mock(DynaBeanPointer.class), name, dynaBean);
        // Test equals with different name
        QName differentName = Mockito.mock(QName.class);
        DynaBeanPointer otherWithDifferentName = new DynaBeanPointer(parent, differentName, dynaBean);
        // Test equals with different dynaBean
        DynaBean differentDynaBean = Mockito.mock(DynaBean.class);
        DynaBeanPointer otherWithDifferentDynaBean = new DynaBeanPointer(parent, name, differentDynaBean);
        assertNotEquals(dynabeanpointer, otherWithDifferentDynaBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        dynaBean = mock(DynaBean.class);
        DynaBeanPointer dynabeanpointer = new DynaBeanPointer(null, dynaBean, null);
        boolean result = dynabeanpointer.isCollection();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        dynaBean = mock(DynaBean.class);
        DynaBeanPointer dynabeanpointer = new DynaBeanPointer(null, dynaBean, null);
        int length = dynabeanpointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynaBean = mock(DynaBean.class);
        DynaBeanPointer dynabeanpointer = new DynaBeanPointer(null, dynaBean, null);
        Object baseValue = dynabeanpointer.getBaseValue();
        assertEquals(dynaBean, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameParentSameIndexSameDynaBeanWholeCollection_hUlN8_Vkap0() {
        QName qName = new QName("name");
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(qName, null, Locale.US);
        dynaBeanPointer.setIndex(DynaBeanPointer.WHOLE_COLLECTION);
        DynaBeanPointer other = new DynaBeanPointer(qName, null, Locale.US);
        other.setIndex(DynaBeanPointer.WHOLE_COLLECTION);
        assertEquals(true, dynaBeanPointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_JMFH0() {
        DynaBeanPointer dynabeanpointer = new DynaBeanPointer(parent, new QName("name"), dynaBean);
        when(parent.asPath()).thenReturn("/parent");
        String result = dynabeanpointer.asPath();
        assertEquals("/parent/name", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_fid2() throws Exception {
        dynabeanpointer = new DynaBeanPointer(null, dynaBean, null);
        // Arrange
        boolean expected = false;
        // Act
        boolean actual = dynabeanpointer.isLeaf();
        // Assert
        assertEquals(expected, actual);
    }
}