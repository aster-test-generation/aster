/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.CompiledExpression;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathFunctionNotFoundException;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.Path;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_JXPathContextReferenceImpl_Coverage_Test_Passing {
    private Expression compileExpression(String xpath) {
        return null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_xnSx0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = jxpathContextReferenceImpl.createPathAndSetValue("xpath", "value");
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_eqDP0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "some_xpath";
        Pointer pointer = jxpathContextReferenceImpl.getPointer(xpath);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePath_vPeL0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.removePath("xpath", compileExpression("xpath"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePathWithNullExpression_iQlm1() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.removePath("xpath", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompilePath_oouK0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "path";
        CompiledExpression compiledExpression = jxpathContextReferenceImpl.compilePath(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Tdea0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.setValue("xpath", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_nzqE0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Object result = jxpathContextReferenceImpl.getValue("xpath", String.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_xQiq0() throws Exception {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("prefix", "name");
        Object[] parameters = new Object[0];
        Function function = jxpathContextReferenceImpl.getFunction(functionName, parameters);
        assertNotNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNull_XQsC1() throws Exception {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("prefix", "name");
        Object[] parameters = new Object[0];
        Function function = jxpathContextReferenceImpl.getFunction(functionName, parameters);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionThrowException_hlbu2() throws Exception {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("prefix", "name");
        Object[] parameters = new Object[0];
        try {
            jxpathContextReferenceImpl.getFunction(functionName, parameters);
            fail("Expected JXPathFunctionNotFoundException");
        } catch (JXPathFunctionNotFoundException e) {
            assertEquals("Undefined function: prefix:name", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionParentContextNull_dfcu3() throws Exception {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("prefix", "name");
        Object[] parameters = new Object[0];
        jxpathContextReferenceImpl = null;
        try {
            jxpathContextReferenceImpl.getFunction(functionName, parameters);
            fail("Expected JXPathFunctionNotFoundException");
        } catch (JXPathFunctionNotFoundException e) {
            assertEquals("Undefined function: prefix:name", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWhenNamespaceResolverIsNotSealed_XMfX0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix", "namespaceURI");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathPointerResult_eyVS1_zPvt0() throws Exception {
        Pointer pointer = mock(Pointer.class);
        JXPathContextReferenceImpl jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        Pointer actual = jxpathcontextreferenceimpl.getNamespaceResolver().getNamespaceContextPointer();
        assertEquals(pointer, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NotNullResult_QQbP2_EBqW0() throws Exception {
        Object result = new Object();
        Expression expr = mock(Expression.class);
        when(expr.computeValue(any(EvalContext.class))).thenReturn(result);
        JXPathContextReferenceImpl jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        NamespaceResolver namespaceResolver = jxpathcontextreferenceimpl.getNamespaceResolver();
        assertEquals(result, jxpathcontextreferenceimpl.getValue("xpath", expr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ExprNotInstanceOfPath_VrCD4_JtPR0() throws Exception {
        Expression expr = mock(Expression.class);
        when(expr instanceof Path).thenReturn(false);
        JXPathContextReferenceImpl jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        assertEquals(null, jxpathcontextreferenceimpl.getNamespaceResolver());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ResultInstanceOfEvalContext_Vhcr5_iboh0() throws Exception {
        Object result = mock(EvalContext.class);
        Expression expr = mock(Expression.class);
        when(expr.computeValue(any(EvalContext.class))).thenReturn(result);
        JXPathContextReferenceImpl jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        assertEquals(result, jxpathcontextreferenceimpl.getNamespaceResolver().getNamespaceURI("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ResultInstanceOfNodePointer_SXzX6_AKaa0() throws Exception {
        Object result = mock(NodePointer.class);
        Expression expr = mock(Expression.class);
        when(expr.computeValue(any(EvalContext.class))).thenReturn(result);
        JXPathContextReferenceImpl jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        assertEquals(result, jxpathcontextreferenceimpl.getNamespaceResolver().getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ResultIsNullAndLenient_cdFZ13_nkSK0() throws Exception {
        Object result = null;
        Expression expr = mock(Expression.class);
        when(expr.computeValue(any(EvalContext.class))).thenReturn(result);
        JXPathContextReferenceImpl jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        jxpathcontextreferenceimpl.setLenient(true);
        NamespaceResolver namespaceResolver = jxpathcontextreferenceimpl.getNamespaceResolver();
        assertEquals(null, namespaceResolver.getNamespaceURI("namespace"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointerWhenNamespaceResolverIsNotSealed_saHq0_GqMQ0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        NamespaceResolver namespaceResolver = jxpathContextReferenceImpl.getNamespaceResolver();
        namespaceResolver.seal();
        assertEquals(namespaceResolver, jxpathContextReferenceImpl.getNamespaceResolver());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithNullXPath_OykC2_FvET0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = null;
        try {
            jxpathContextReferenceImpl.getNamespaceResolver();
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithEmptyXPath_YPdL3_VLlG0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "";
        try {
            NamespaceResolver namespaceResolver = jxpathContextReferenceImpl.getNamespaceResolver();
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithInvalidXPath_SHXo4_DOvL0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "invalid path";
        try {
            jxpathContextReferenceImpl.getNamespaceResolver();
        } catch (Exception e) {
            assertEquals("createPath() is not allowed", e.getMessage());
        }
    }
}