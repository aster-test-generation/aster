/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.Attribute;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributePointer_Test_Failing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private Attribute attr;
    private JDOMAttributePointer jdomattributepointer;
    private JDOMAttributePointer jdomattributepointer2;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private JDOMNodePointer jDOMNodePointer;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private Attribute attribute;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Arrange
        JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(null, null);
        // Act
        int result = jdomattributepointer.compareChildNodePointers(nodePointer1, nodePointer2);
        // Assert
        Mockito.verify(nodePointer1, Mockito.times(1)).compareTo(nodePointer2);
        Mockito.verify(nodePointer2, Mockito.times(1)).compareTo(nodePointer1);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        String value = "testValue";
        String expectedValue = "testValue";
        // Act
        jdomattributepointer.setValue(value);
        // Assert
        Mockito.verify(attr).setValue(expectedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        String expectedValue = "expectedValue";
        when(attr.getValue()).thenReturn(expectedValue);
        // Act
        Object actualValue = jdomattributepointer.getValue();
        // Assert
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        Object expected = "expected value";
        // Act
        Object actual = jdomattributepointer.getImmediateNode();
        // Assert
    assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        MockitoAnnotations.initMocks(this);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Act
        int result = jdomattributepointer.hashCode();
        // Assert
        Mockito.verify(attr).hashCode();
        assertEquals(System.identityHashCode(attr), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() {
        jdomattributepointer = new JDOMAttributePointer(jDOMNodePointer, attr);
        // Set up the mock attribute
        when(attr.getName()).thenReturn("someName");
        // Call the method under test
        QName result = jdomattributepointer.getName();
        // Verify the result
        assertEquals(new QName("somePrefix", "someName"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_1() {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when namespaceURI is not null
        when(attr.getNamespaceURI()).thenReturn("http://test.com");
        // Test when namespaceURI is empty
        when(attr.getNamespaceURI()).thenReturn("");
        // Test when namespaceURI is null
        when(attr.getNamespaceURI()).thenReturn(null);
        assertEquals("http://test.com", jdomattributepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_2() {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when namespaceURI is not null
        when(attr.getNamespaceURI()).thenReturn("http://test.com");
        // Test when namespaceURI is empty
        when(attr.getNamespaceURI()).thenReturn("");
        // Test when namespaceURI is null
        when(attr.getNamespaceURI()).thenReturn(null);
        assertNull(jdomattributepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathEmptyParent_xCJD1() {
        JDOMAttributePointer pointer = new JDOMAttributePointer(new DOMNodePointer(null, null, null), null);
        String result = pointer.asPath();
        Assertions.assertEquals("@", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNonEmptyParent_YsnT2() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        JDOMAttributePointer pointer = new JDOMAttributePointer(parent, null);
        String result = pointer.asPath();
        Assertions.assertEquals(parent.asPath() + "@", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNonEmptyParentWithSlash_tFSf3() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        JDOMAttributePointer pointer = new JDOMAttributePointer(parent, null);
        String result = pointer.asPath();
        Assertions.assertEquals(parent.asPath() + "/@", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        jdomattributepointer = new JDOMAttributePointer(domNodePointer, attribute);
        // Arrange
        Mockito.when(domNodePointer.getLength()).thenReturn(1);
        // Act
        int length = jdomattributepointer.getLength();
        // Assert
        Mockito.verify(domNodePointer).getLength();
        Assertions.assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        Object expectedValue = "expectedValue";
        // Act
        Object actualValue = jdomattributepointer.getBaseValue();
        // Assert
    assertNull(expectedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FJby0_2() throws Exception {
        Attribute attr = mock(Attribute.class);
        JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(null, attr);
        JDOMAttributePointer jdomattributepointer2 = new JDOMAttributePointer(null, attr);
        assertNotEquals(jdomattributepointer, jdomattributepointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection_fid1() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        when(parent.isCollection()).thenReturn(true);
        // Act
        boolean result = jdomattributepointer.isCollection();
        // Assert
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_fid1() {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        Object expected = "expected value";
        // Act
        Object actual = jdomattributepointer.getImmediateNode();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() {
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when namespaceURI is not null
        when(attr.getNamespaceURI()).thenReturn("http://test.com");
        assertEquals("http://test.com", jdomattributepointer.getNamespaceURI());
        // Test when namespaceURI is empty
        when(attr.getNamespaceURI()).thenReturn("");
        assertNull(jdomattributepointer.getNamespaceURI());
        // Test when namespaceURI is null
        when(attr.getNamespaceURI()).thenReturn(null);
        assertNull(jdomattributepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullParent_PmUt0_fid1() {
        JDOMAttributePointer pointer = new JDOMAttributePointer(null, null);
        String result = pointer.asPath();
        Assertions.assertEquals("@", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid1() {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        Object expectedValue = "expectedValue";
        // Act
        Object actualValue = jdomattributepointer.getBaseValue();
        // Assert
        assertEquals(expectedValue, actualValue);
    }
}