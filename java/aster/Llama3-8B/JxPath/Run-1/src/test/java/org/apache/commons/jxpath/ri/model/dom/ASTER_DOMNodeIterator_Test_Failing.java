/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.lang.reflect.Field;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodeIterator_Test_Failing {
    private int position = 0;
    @Mock
    private Node node;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private DOMNodePointer domNodePointer;
    private Node child = null;
    private NodePointer parent;
    @Mock
    private NodePointer nodepointer;
    @Mock
    private DOMNodePointer domnodepointer;
    @Mock
    private DOMNodeIterator domnodeiterator;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_1() {
        node = mock(Node.class);
        nodePointer = mock(NodePointer.class);
        domNodePointer = mock(DOMNodePointer.class);
        domnodeiterator = new DOMNodeIterator(domNodePointer, new NodeTypeTest(1), false, domNodePointer);
        // Set position to 0
        boolean result = domnodeiterator.setPosition(0);
        verify(node, times(0)).getNextSibling();
        verify(node, times(0)).getFirstChild();
        verify(node, times(0)).getPreviousSibling();
        verify(node, times(0)).getLastChild();
        // Set position to 1
        result = domnodeiterator.setPosition(1);
        verify(node, times(1)).getNextSibling();
        // Set position to 2
        result = domnodeiterator.setPosition(2);
        verify(node, times(2)).getNextSibling();
        // Set position to 0 again
        result = domnodeiterator.setPosition(0);
        verify(node, times(2)).getNextSibling();
        verify(node, times(1)).getPreviousSibling();
        // Set position to -1
        result = domnodeiterator.setPosition(-1);
        verify(node, times(2)).getNextSibling();
        verify(node, times(1)).getPreviousSibling();
        verify(node, times(1)).getFirstChild();
        // Set position to 3
        result = domnodeiterator.setPosition(3);
        verify(node, times(2)).getNextSibling();
        verify(node, times(1)).getPreviousSibling();
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getLastChild();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_5() {
        node = mock(Node.class);
        nodePointer = mock(NodePointer.class);
        domNodePointer = mock(DOMNodePointer.class);
        domnodeiterator = new DOMNodeIterator(domNodePointer, new NodeTypeTest(1), false, domNodePointer);
        // Set position to 0
        boolean result = domnodeiterator.setPosition(0);
        verify(node, times(0)).getNextSibling();
        verify(node, times(0)).getFirstChild();
        verify(node, times(0)).getPreviousSibling();
        verify(node, times(0)).getLastChild();
        // Set position to 1
        result = domnodeiterator.setPosition(1);
        verify(node, times(1)).getNextSibling();
        // Set position to 2
        result = domnodeiterator.setPosition(2);
        verify(node, times(2)).getNextSibling();
        // Set position to 0 again
        result = domnodeiterator.setPosition(0);
        verify(node, times(2)).getNextSibling();
        verify(node, times(1)).getPreviousSibling();
        // Set position to -1
        result = domnodeiterator.setPosition(-1);
        verify(node, times(2)).getNextSibling();
        verify(node, times(1)).getPreviousSibling();
        verify(node, times(1)).getFirstChild();
        // Set position to 3
        result = domnodeiterator.setPosition(3);
        verify(node, times(2)).getNextSibling();
        verify(node, times(1)).getPreviousSibling();
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getLastChild();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionPositive_oeJC0_Ueil0() {
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        DOMNodePointer startWith = new DOMNodePointer(parent, null);
        DOMNodeIterator iterator = new DOMNodeIterator(parent, nodeTest, false, startWith);
        iterator.setPosition(1);
        Assertions.assertNotNull(iterator.getNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionLarge_mEru3_Oqri0() {
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        DOMNodeIterator iterator = new DOMNodeIterator(parent, nodeTest, false, null);
        iterator.setPosition(100);
        try {
            Field positionField = DOMNodeIterator.class.getDeclaredField("position");
            positionField.setAccessible(true);
            int position = positionField.getInt(iterator);
            Assertions.assertEquals(100, position);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            throw new AssertionError(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() {
        node = mock(Node.class);
        nodePointer = mock(NodePointer.class);
        domNodePointer = mock(DOMNodePointer.class);
        domnodeiterator = new DOMNodeIterator(domNodePointer, new NodeTypeTest(1), false, domNodePointer);
        // Set position to 0
        boolean result = domnodeiterator.setPosition(0);
        Assertions.assertTrue(result);
        verify(node, times(0)).getNextSibling();
        verify(node, times(0)).getFirstChild();
        verify(node, times(0)).getPreviousSibling();
        verify(node, times(0)).getLastChild();
        // Set position to 1
        result = domnodeiterator.setPosition(1);
        Assertions.assertTrue(result);
        verify(node, times(1)).getNextSibling();
        // Set position to 2
        result = domnodeiterator.setPosition(2);
        Assertions.assertTrue(result);
        verify(node, times(2)).getNextSibling();
        // Set position to 0 again
        result = domnodeiterator.setPosition(0);
        Assertions.assertTrue(result);
        verify(node, times(2)).getNextSibling();
        verify(node, times(1)).getPreviousSibling();
        // Set position to -1
        result = domnodeiterator.setPosition(-1);
        Assertions.assertFalse(result);
        verify(node, times(2)).getNextSibling();
        verify(node, times(1)).getPreviousSibling();
        verify(node, times(1)).getFirstChild();
        // Set position to 3
        result = domnodeiterator.setPosition(3);
        Assertions.assertFalse(result);
        verify(node, times(2)).getNextSibling();
        verify(node, times(1)).getPreviousSibling();
        verify(node, times(1)).getFirstChild();
        verify(node, times(1)).getLastChild();
    }
}