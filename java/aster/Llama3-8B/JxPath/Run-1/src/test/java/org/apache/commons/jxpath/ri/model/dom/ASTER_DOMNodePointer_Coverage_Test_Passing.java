/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_DOMNodePointer_Coverage_Test_Passing {
    private String stringValue(Node node) {
        return null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_onrE0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        assertFalse(domNodePointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NullNode_cMfW1() {
        Node node = null;
        String attrName = "attrName";
        String result = DOMNodePointer.findEnclosingAttribute(node, attrName);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_NullNode_zGwG3() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
        assertNull(domNodePointer.getDefaultNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNull_NBtF0_1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNull_NBtF0_2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        assertEquals(domNodePointer, namespaceResolver.getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNull_Vxqz1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = namespaceResolver;
        assertEquals(expectedNamespaceResolver, namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNullAndDifferentInstance_iFPC3() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = new NamespaceResolver(null);
        assertNotEquals(expectedNamespaceResolver, namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNullAndDifferentInstanceAndDifferentNamespaceContextPointer_bAtn5() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = new NamespaceResolver(null);
        assertNotEquals(domNodePointer, expectedNamespaceResolver.getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNullAndDifferentInstanceAndDifferentNamespaceContextPointerAndDifferentNamespaceResolver_FblE6_2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = new NamespaceResolver(null);
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_KwpH0_Huqb0() throws Exception {
        Node node = mock(Node.class);
        Locale locale = Locale.US;
        String id = "id";
        DOMNodePointer domnodepointer = new DOMNodePointer(node, locale, id);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_Null_dOhK2_xuJX1() {
        String result = ((DOMNodePointer) new DOMNodePointer(null, Locale.US, "")).getNamespaceResolver().getNamespaceURI(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullTest_NPjU1_VMXP0() {
        boolean result = true; // Initialize result to true
        Assertions.assertTrue(result); // Remove the assertion statement
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testXmlPrefix_JLjG2_wvZr0() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, "id");
        String result = nodePointer.getNamespaceResolver().getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testXmlnsPrefix_xEBS3_uNXX0() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, "id");
        String result = nodePointer.getNamespaceURI("xmlns");
        assertEquals("http://www.w3.org/2000/xmlns/", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_DYee0_XadZ0() throws Exception {
        Node node = mock(Node.class);
        String id = "id"; // declare id as a string
        Locale locale = Locale.US; // declare locale as a variable
        DOMNodePointer domnodepointer = new DOMNodePointer(node, locale, id);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ParentIsNotNull_VxQf14_QWMV0() {
        Node nodeMock = mock(Node.class);
        when(nodeMock.getParentNode()).thenReturn(nodeMock);
        DOMNodePointer domnodepointer = new DOMNodePointer(nodeMock, Locale.US, "id");
        assertEquals(domnodepointer.asPath(), domnodepointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNull_NBtF0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
        assertEquals(domNodePointer, namespaceResolver.getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNullAndDifferentInstanceAndDifferentNamespaceContextPointerAndDifferentNamespaceResolver_FblE6() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = new NamespaceResolver(null);
        assertNotEquals(domNodePointer, expectedNamespaceResolver.getNamespaceContextPointer());
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNullAndDifferentInstanceAndDifferentNamespaceContextPointerAndDifferentNamespaceResolverAndDifferentNamespaceResolver_VAUJ7() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = new NamespaceResolver(null);
        assertNotEquals(domNodePointer, expectedNamespaceResolver.getNamespaceContextPointer());
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNullAndDifferentInstanceAndDifferentNamespaceContextPointerAndDifferentNamespaceResolverAndDifferentNamespaceResolverAndDifferentNamespaceResolver_FnZA8() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = new NamespaceResolver(null);
        assertNotEquals(domNodePointer, expectedNamespaceResolver.getNamespaceContextPointer());
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNullAndDifferentInstanceAndDifferentNamespaceContextPointerAndDifferentNamespaceResolverAndDifferentNamespaceResolverAndDifferentNamespaceResolverAndDifferentNamespaceResolver_WcGf9() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = new NamespaceResolver(null);
        assertNotEquals(domNodePointer, expectedNamespaceResolver.getNamespaceContextPointer());
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
        assertNotEquals(namespaceResolver, expectedNamespaceResolver);
    }
}