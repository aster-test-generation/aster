/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Failing {
    private Expression expression;
    private String xpath;
    @Mock
    private JXPathContext jxpathcontext;
    @Mock
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    @Mock
    private Pointer pointer;
    private JXPathCompiledExpression jxpathcompiledexpression;
    @Mock
    private Iterator iterator;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        when(jxpathcontext.createPath(anyString())).thenReturn(mock(Pointer.class));
        when(jxpathcontextreferenceimpl.createPath(anyString(), any())).thenReturn(mock(Pointer.class));
        Pointer pointer = jxpathcompiledexpression.createPath(jxpathcontext);
        verify(jxpathcontextreferenceimpl).createPath(xpath, expression);
        assertEquals(mock(Pointer.class), pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePathAndSetValue() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        when(jxpathcontextreferenceimpl.createPathAndSetValue(xpath, expression, "value")).thenReturn(pointer);
        Pointer result = jxpathcompiledexpression.createPathAndSetValue(jxpathcontext, "value");
        assertEquals(pointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_byQz0() {
        JXPathCompiledExpression jxpathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        JXPathContext context = JXPathContext.newContext(null, null);
        jxpathCompiledExpression.removeAll(context);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        // Given
        when(jxpathcontextreferenceimpl.getValue(xpath, expression, Object.class)).thenReturn("value");
        // When
        Object result = jxpathcompiledexpression.getValue(jxpathcontext, Object.class);
        // Then
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointer() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        when(jxpathcontextreferenceimpl.getPointer(anyString(), any(Expression.class))).thenReturn(mock(Pointer.class));
        Pointer pointer = jxpathcompiledexpression.getPointer(jxpathcontext, xpath);
        verify(jxpathcontextreferenceimpl).getPointer(xpath, expression);
        assertEquals(mock(Pointer.class), pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiteratePointers() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        when(jxpathcontextreferenceimpl.iteratePointers(xpath, expression)).thenReturn(iterator);
        Iterator actual = jxpathcompiledexpression.iteratePointers(jxpathcontext);
        assertEquals(iterator, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiterate_1() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcontext = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        // Arrange
        when(jxpathcontext.iteratePointers(xpath)).thenReturn(new Iterator<Pointer>() {
            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public Pointer next() {
                return mock(Pointer.class);
            }
        });
        // Act
        Iterator iterate = jxpathcompiledexpression.iterate(jxpathcontext);
        // Assert
        verify(jxpathcontext, times(1)).iteratePointers(xpath);
        assertEquals(true, iterate.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiterate_2() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcontext = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        // Arrange
        when(jxpathcontext.iteratePointers(xpath)).thenReturn(new Iterator<Pointer>() {
            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public Pointer next() {
                return mock(Pointer.class);
            }
        });
        // Act
        Iterator iterate = jxpathcompiledexpression.iterate(jxpathcontext);
        // Assert
        verify(jxpathcontext, times(1)).iteratePointers(xpath);
        assertEquals(mock(Pointer.class), iterate.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_hlNV0_HhJU0() {
        JXPathCompiledExpression jxpathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        JXPathContext jxpathContext = JXPathContext.newContext(new Object());
        Pointer pointer = jxpathCompiledExpression.createPathAndSetValue(jxpathContext, new Object());
        assert true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiterate() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcontext = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        // Arrange
        when(jxpathcontext.iteratePointers(xpath)).thenReturn(new Iterator<Pointer>() {
            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public Pointer next() {
                return mock(Pointer.class);
            }
        });
        // Act
        Iterator iterate = jxpathcompiledexpression.iterate(jxpathcontext);
        // Assert
        verify(jxpathcontext, times(1)).iteratePointers(xpath);
        assertEquals(true, iterate.hasNext());
        assertEquals(mock(Pointer.class), iterate.next());
    }
}