/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SimplePathInterpreter_Test_Passing {
    @Mock
    private EvalContext evalContext;
    @Mock
    private NodePointer parent;
    @Mock
    private Step[] steps;
    @Mock
    private Step step;
    @Mock
    private NodePointer root;
    private SimplePathInterpreter simplePathInterpreter;
    @Mock
    private Expression[] predicates;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinterpretSimpleExpressionPath() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        // Arrange
        when(evalContext.getPosition()).thenReturn(0);
        when(root.getName()).thenReturn(new QName("name"));
        when(root.getNamespaceURI()).thenReturn("namespace");
        when(root.getNamespaceResolver()).thenReturn(new NamespaceResolver());
        when(root.getImmediateNode()).thenReturn(root);
        when(root.getImmediateParentPointer()).thenReturn(root);
        when(root.getImmediateValuePointer()).thenReturn(root);
        when(root.getValuePointer()).thenReturn(root);
        when(root.getPointerByID(any(JXPathContext.class), anyString())).thenReturn(root);
        when(root.getPointerByKey(any(JXPathContext.class), anyString(), anyString())).thenReturn(root);
        when(root.getNamespaceURI(anyString())).thenReturn("namespace");
        when(root.getNamespaceURI()).thenReturn("namespace");
        when(root.getNamespaceResolver()).thenReturn(new NamespaceResolver());
        when(root.getName()).thenReturn(new QName("name"));
        when(root.getNamespaceURI()).thenReturn("namespace");
        when(root.getNamespaceResolver()).thenReturn(new NamespaceResolver());
        when(root.getImmediateNode()).thenReturn(root);
        when(root.getImmediateParentPointer()).thenReturn(root);
        when(root.getImmediateValuePointer()).thenReturn(root);
        when(root.getValuePointer()).thenReturn(root);
        when(root.getPointerByID(any(JXPathContext.class), anyString())).thenReturn(root);
        when(root.getPointerByKey(any(JXPathContext.class), anyString(), anyString())).thenReturn(root);
        // Act
        NodePointer result = simplePathInterpreter.interpretSimpleExpressionPath(evalContext, root, predicates, steps);
        // Assert
        assertEquals(root, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinterpretSimpleExpressionPath_pyYa0() throws Exception {
        SimplePathInterpreter simplePathInterpreter = new SimplePathInterpreter();
        when(evalContext.getPosition()).thenReturn(0);
        when(root.getName()).thenReturn(new QName("name"));
        when(root.getNamespaceURI()).thenReturn("namespace");
        when(root.getNamespaceResolver()).thenReturn(new NamespaceResolver());
        when(root.getImmediateNode()).thenReturn(root);
        when(root.getImmediateParentPointer()).thenReturn(root);
        when(root.getImmediateValuePointer()).thenReturn(root);
        when(root.getValuePointer()).thenReturn(root);
        when(root.getPointerByID(any(JXPathContext.class), anyString())).thenReturn(root);
        when(root.getPointerByKey(any(JXPathContext.class), anyString(), anyString())).thenReturn(root);
        when(root.getNamespaceURI(anyString())).thenReturn("namespace");
        when(root.getNamespaceURI()).thenReturn("namespace");
        when(root.getNamespaceResolver()).thenReturn(new NamespaceResolver());
        when(root.getName()).thenReturn(new QName("name"));
        when(root.getNamespaceURI()).thenReturn("namespace");
        when(root.getNamespaceResolver()).thenReturn(new NamespaceResolver());
        when(root.getImmediateNode()).thenReturn(root);
        when(root.getImmediateParentPointer()).thenReturn(root);
        when(root.getImmediateValuePointer()).thenReturn(root);
        when(root.getValuePointer()).thenReturn(root);
        when(root.getPointerByID(any(JXPathContext.class), anyString())).thenReturn(root);
        when(root.getPointerByKey(any(JXPathContext.class), anyString(), anyString())).thenReturn(root);
        NodePointer result = simplePathInterpreter.interpretSimpleExpressionPath(evalContext, root, predicates, steps);
        assertEquals(root, result);
    }
}