/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_DOMAttributePointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullNode_qnMM0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        boolean result = domAttributePointer.testNode(null);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_ZdvS0() {
        DOMAttributePointer obj1 = new DOMAttributePointer(null, null);
        boolean result = obj1.equals(obj1);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_aEln1() {
        DOMAttributePointer obj1 = new DOMAttributePointer(null, null);
        Object obj2 = new Object();
        boolean result = obj1.equals(obj2);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_FchZ2() {
        DOMAttributePointer obj1 = new DOMAttributePointer(null, null);
        DOMNodePointer obj2 = new DOMNodePointer(null, null, null);
        boolean result = obj1.equals(obj2);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameClassSameAttr_YpUm4() {
        DOMAttributePointer obj1 = new DOMAttributePointer(null, null);
        DOMAttributePointer obj2 = new DOMAttributePointer(null, null);
        boolean result = obj1.equals(obj2);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyAttrValue_ReturnsNull_cpHM1() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("");
        DOMAttributePointer pointer = new DOMAttributePointer(null, attr);
        Object result = pointer.getValue();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NonEmptyAttrValue_ReturnsValue_FQht2() {
        String value = "Test Value";
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn(value);
        DOMAttributePointer pointer = new DOMAttributePointer(null, attr);
        Object result = pointer.getValue();
        Assertions.assertEquals(value, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NonSpecifiedAttrValue_ReturnsNull_MJrz3() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("Test Value");
        when(attr.getSpecified()).thenReturn(false);
        DOMAttributePointer pointer = new DOMAttributePointer(null, attr);
        Object result = pointer.getValue();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_hdkZ0() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, null);
        int result = pointer.hashCode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_pVzb0_QXWl0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        QName qName = new QName(null, null);
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer pointer1 = new DOMNodePointer(variablePointer, null);
        DOMNodePointer pointer2 = new DOMNodePointer(variablePointer, null);
        int result = domAttributePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeNode_yLlh1_MRky0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        boolean result = domAttributePointer.isLeaf();
        Assertions.assertTrue(result);
    }
}