/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

public class Aster_VariablePointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueUndefinedVariable_yzJZ0() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        variablePointer.setValue("test");
        assertEquals("Cannot set undefined variable: test", new JXPathException("Cannot set undefined variable: test").getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueIndexNotWholeCollection_qwwY2() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        variablePointer.index = 1;
        Object collection = new Object();
        variablePointer.setValue(collection);
        assertEquals(collection, variablePointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueCollection_yimT4() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        variablePointer.index = 1;
        Object collection = new Object();
        Object value = new Object();
        variablePointer.setValue(collection);
        ValueUtils.setValue(collection, 1, value);
        assertEquals(value, ((Object[]) collection)[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariablesTrue_wFJt0() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        JXPathContext context = JXPathContext.newContext(null, null);
        boolean actual = false;
        variablePointer.findVariables(context);
        assertEquals(true, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariablesFalse_yopt1() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        JXPathContext context = JXPathContext.newContext(null, null);
        boolean actual = false;
        variablePointer.findVariables(context);
        assertEquals(false, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariablesNull_QxiZ2() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        JXPathContext context = null;
        boolean actual = false;
        variablePointer.findVariables(context);
        assertEquals(false, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_hBxh0() {
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(name);
        NodeIterator nodeIterator = variablePointer.attributeIterator(name);
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionNullValue_ZqhR0() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        boolean result = variablePointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonNullNode_VYcP0() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        Object node = new Object();
        when(variablePointer.getNode()).thenReturn(node);
        assertTrue(variablePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNullNode_gsoC1() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        when(variablePointer.getNode()).thenReturn(null);
        assertTrue(variablePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_KLmD0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        NodeIterator result = variablePointer.namespaceIterator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_NullValuePointer_YviO0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NodePointer nodePointer = variablePointer.getImmediateValuePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_Hphl3() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NodePointer clone = (NodePointer) variablePointer.clone();
        assertNotNull(clone);
    }
}