/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueArray_anfL0() {
        Object[] array = new Object[]{"a", "b", "c"};
        Object value = ValueUtils.getValue(array, 1);
        assertEquals("b", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueArrayOutofBound_hHIc1() {
        Object[] array = new Object[]{"a", "b", "c"};
        Object value = ValueUtils.getValue(array, 3);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueList_zCQn2() {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        Object value = ValueUtils.getValue(list, 1);
        assertEquals("b", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListOutofBound_rDED3() {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        Object value = ValueUtils.getValue(list, 3);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueNull_RuMa6() {
        Object value = ValueUtils.getValue(null, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueNullIndex_AQbC7() {
        Object[] array = new Object[]{"a", "b", "c"};
        Object value = ValueUtils.getValue(array, -1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueNullCollection_MDgJ8() {
        Object collection = null;
        Object value = ValueUtils.getValue(collection, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionArray_wlxQ0() {
        Object value = new int[5];
        assertTrue(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionCollection_qqzR1() {
        Object value = new java.util.ArrayList<>();
        assertTrue(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionNull_MjGk2() {
        Object value = null;
        assertFalse(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArrayIndexOutOfBoundsException_bphh1() {
        Object collection = new Integer[]{1, 2, 3, 4, 5};
        try {
            ValueUtils.remove(collection, 5);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No such element at index 5", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNullCollection_kPPp6() {
        Object collection = null;
        Object result = ValueUtils.remove(collection, 0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveEmptyCollectionIndexOutOfBoundsException_PODX9() {
        Object collection = new ArrayList<>();
        try {
            ValueUtils.remove(collection, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No such element at index 0", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNonArrayNonListNonCollection_jDfE10() {
        Object collection = new Integer(1);
        try {
            ValueUtils.remove(collection, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot remove " + collection.getClass().getName() + "[0]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullCollection_UqSq0() {
        Iterator iterator = ValueUtils.iterate(null);
        assert iterator == Collections.EMPTY_LIST.iterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyArray_lcEx1() {
        Object[] array = new Object[0];
        Iterator iterator = ValueUtils.iterate(array);
        assert iterator == Collections.EMPTY_LIST.iterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonEmptyArray_xSpH2() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        ArrayList list = new ArrayList();
        for (int i = 0;i < array.length;i++) {
            list.add(array[i]);
        }
        assert iterator instanceof Iterator;
        while (iterator.hasNext()) {
            Object obj = iterator.next();
            assert list.contains(obj);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollection_OBxP3() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        Iterator iterator = ValueUtils.iterate(collection);
        assert iterator instanceof Iterator;
        while (iterator.hasNext()) {
            Object obj = iterator.next();
            assert collection.contains(obj);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSingleObject_qybS4() {
        Object obj = "a";
        Iterator iterator = ValueUtils.iterate(obj);
        assert iterator.hasNext();
        assert iterator.next().equals(obj);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_WYWi0() {
        assertEquals(1, ValueUtils.getCollectionHint(int[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollection_dqfJ1() {
        assertEquals(1, ValueUtils.getCollectionHint(ArrayList.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimitive_AaMK2() {
        assertEquals(-1, ValueUtils.getCollectionHint(int.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueArray_rVlw0() {
        Object[] array = new Object[]{1, 2, 3};
        ValueUtils.setValue(array, 1, "test");
        assertEquals("test", array[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueList_oBCM1() {
        List list = new ArrayList();
        list.add(1);
        list.add(2);
        ValueUtils.setValue(list, 1, "test");
        assertEquals("test", list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_NullMethod_Gkev6() {
        Method result = ValueUtils.getAccessibleMethod(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthNull_LdgT0() {
        int result = ValueUtils.getLength(null);
        assert result == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthArray_LGTy1() {
        int[] array = new int[]{1, 2, 3};
        int result = ValueUtils.getLength(array);
        assert result == 3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthCollection_MCkN2() {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        int result = ValueUtils.getLength(list);
        assert result == 3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthObject_bofC3() {
        int result = ValueUtils.getLength("Hello");
        assert result == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionArray_vaSu0() {
        Object collection = new Integer[3];
        Object result = ValueUtils.expandCollection(collection, 5);
        assertArrayEquals(new Integer[]{null, null, null, null, null}, (Integer[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionNull_COCM2() {
        Object result = ValueUtils.expandCollection(null, 5);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionInvalidType_Fmfv4() {
        Object collection = new String("a");
        try {
            ValueUtils.expandCollection(collection, 5);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot turn java.lang.String into a collection of size 5", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLengthWithUnknownLength_LlNH3_BtgO0() {
        Object object = new Object();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithContainer_dcBe0_aSUN0() {
        List<Object> container = new ArrayList<>();
        Object object = container;
        Object result = ValueUtils.expandCollection(object, 10);
        assertEquals(object, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_ZfXS1_JZrq0_1() {
        Collection collection = new ArrayList<>();
        collection.add("a");
        collection.add("b");
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(5, ((List<?>) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_ZfXS1_JZrq0_2() {
        Collection collection = new ArrayList<>();
        collection.add("a");
        collection.add("b");
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals("a", ((List<?>) result).get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_ZfXS1_JZrq0_3() {
        Collection collection = new ArrayList<>();
        collection.add("a");
        collection.add("b");
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals("b", ((List<?>) result).get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_ZfXS1_JZrq0_4() {
        Collection collection = new ArrayList<>();
        collection.add("a");
        collection.add("b");
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(null, ((List<?>) result).get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_ZfXS1_JZrq0_5() {
        Collection collection = new ArrayList<>();
        collection.add("a");
        collection.add("b");
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(null, ((List<?>) result).get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionCollection_ZfXS1_JZrq0_6() {
        Collection collection = new ArrayList<>();
        collection.add("a");
        collection.add("b");
        Object result = ValueUtils.expandCollection(collection, 5);
        assertEquals(null, ((List<?>) result).get(4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_PublicMethod_Ftmw0_pdXV0() {
        try {
            Method method = new Object().getClass().getMethod("toString", null);
            Method result = ValueUtils.getAccessibleMethod(method);
            Assertions.assertEquals(method, result);
        } catch (NoSuchMethodException e) {
            Assertions.fail("Expected to not throw a NoSuchMethodException, but it did");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_PrivateMethod_YVkP1_ZhbH1() {
        try {
            Method method = new Object().getClass().getDeclaredMethod("hashCode", null);
        } catch (NoSuchMethodException e) {
            Assertions.assertNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_ProtectedMethod_JNcH2_SvUp0() {
        try {
            Method method = new Object().getClass().getDeclaredMethod("getClass", null);
        } catch (NoSuchMethodException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_MethodWithParameters_EOAF7_ydvN0() {
        try {
            Method method = new Object().getClass().getMethod("equals", new Class[]{Object.class});
            Method result = ValueUtils.getAccessibleMethod(method);
            Assertions.assertNotNull(result);
        } catch (NoSuchMethodException e) {
            throw new AssertionError("NoSuchMethodException was thrown", e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterface_eFIp3_fid2() {
        assertEquals(1, ValueUtils.getCollectionHint(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexOutOfBoundsException_vgOc3_iUCu0_fid2() {
        List collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        try {
            ValueUtils.expandCollection(collection, 6);
        } catch (JXPathException e) {
            assertEquals("adjustment of [1, 2, 3, 4, 5] to size 6 is not an expansion", e.getMessage());
        }
    }
}