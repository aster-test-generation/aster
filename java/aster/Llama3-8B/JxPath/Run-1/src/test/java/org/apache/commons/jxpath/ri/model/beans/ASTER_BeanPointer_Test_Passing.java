/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private QName name;
    @Mock
    private JXPathBasicBeanInfo beanInfo;
    @Mock
    private Locale locale;
    @Mock
    private BeanPointer beanpointer;
    private Object bean;
    private BeanPointer beanPointer;
    @Mock
    private JXPathIntrospector jXPathIntrospector;
    @Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanPointerSameParent_fXJm7() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        QName name = new QName("name", "localName");
        BeanPointer beanPointer1 = new BeanPointer(parent, name, null, null);
        BeanPointer beanPointer2 = new BeanPointer(parent, name, null, null);
        assertEquals(true, beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanPointerSameBean_ViKQ11() {
        QName name = new QName("name", "localName");
        BeanPointer beanPointer1 = new BeanPointer(null, name, "bean", null);
        BeanPointer beanPointer2 = new BeanPointer(null, name, "bean", null);
        assertEquals(true, beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanPointerDifferentBean_Ouwe12() {
        QName name = new QName("name", "localName");
        BeanPointer beanPointer1 = new BeanPointer(null, name, "bean1", null);
        BeanPointer beanPointer2 = new BeanPointer(null, name, "bean2", null);
        assertEquals(false, beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanPointerSameBeanSameType_bgLw13() {
        QName name = new QName("name", "localName");
        BeanPointer beanPointer1 = new BeanPointer(null, name, new Boolean(true), null);
        BeanPointer beanPointer2 = new BeanPointer(null, name, new Boolean(true), null);
        assertEquals(true, beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNumberBean_MfzU3() {
        BeanPointer beanPointer = new BeanPointer(null, 10.0, null, null);
        assertEquals("10", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathBooleanBean_yBIE4() {
        BeanPointer beanPointer = new BeanPointer(null, true, null, null);
        assertEquals("true()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathStringBean_GSXK5() {
        BeanPointer beanPointer = new BeanPointer(null, "test", null, null);
        assertEquals("'test'", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathOtherBean_cvtX6() {
        BeanPointer beanPointer = new BeanPointer(null, new Object(), null, null);
        assertEquals("/", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNumberBeanWithDecimal_kktL7() {
        BeanPointer beanPointer = new BeanPointer(null, 10.5, null, null);
        assertEquals("10.5", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        beanpointer = Mockito.mock(BeanPointer.class);
        Mockito.when(beanpointer.getLength()).thenReturn(1);
        int length = beanpointer.getLength();
        Assertions.assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        beanpointer = new BeanPointer(null, null, bean, null);
        // Arrange
        // No need to arrange anything as we are testing a getter method
        // Act
        Object baseValue = beanpointer.getBaseValue();
        // Assert
        assertEquals(bean, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNullValue_CRJj0() {
        QName name = new QName("test", "test");
        Object bean = null;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, Locale.US);
        boolean result = beanPointer.isLeaf();
        assert (result == true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNonAtomicValue_EUbc2() {
        QName name = new QName("test", "test");
        Object bean = new ArrayList<>();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(ArrayList.class);
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, Locale.US);
        boolean result = beanPointer.isLeaf();
        assert (result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_SWts0_cKOb1() {
        BeanPointer beanPointer = new BeanPointer(null, null, null, Locale.US);
        assertEquals(true, beanPointer.equals(beanPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanPointer_EIDB4_EPwL1() {
        BeanPointer beanPointer1 = new BeanPointer(null, null, null, Locale.US);
        BeanPointer beanPointer2 = beanPointer1;
        assertEquals(true, beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_qijE0() throws Exception {
        QName name = new QName("expectedName");
        beanpointer = new BeanPointer(name, null, null, null);
        String expectedName = "expectedName";
        String actualName = name.toString();
        assertEquals(expectedName, actualName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_Dklp0_dPoq0() {
        QName name = new QName("name");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, Locale.US);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assert propertyPointer instanceof BeanPropertyPointer;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_String_sCLB0() {
        bean = "test";
        QName qName = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, false);
        beanPointer = new BeanPointer(null, qName, bean, beanInfo);
        String result = beanPointer.asPath();
        assertEquals("'test'", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_Boolean_Lqyq0() {
        bean = "test";
        beanPointer = new BeanPointer(null, new QName("test"), bean, new JXPathBasicBeanInfo(Class.class, false));
        bean = true;
        beanPointer = new BeanPointer(null, new QName("test"), bean, new JXPathBasicBeanInfo(Class.class, false));
        String result = beanPointer.asPath();
        assertEquals("true()", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_Null_vnZA0() {
        bean = "test";
        QName qName = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, false);
        beanPointer = new BeanPointer(null, qName, bean, beanInfo);
        bean = null;
        beanPointer = new BeanPointer(null, qName, bean, beanInfo);
        String result = beanPointer.asPath();
        assertEquals("null()", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullBean_JxXR2_PLJs0() {
        QName name = null;
        Object bean = null;
        JXPathBasicBeanInfo beanInfo = null;
        Locale locale = null;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals("null()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_Zaqz0_vlLP0() {
        QName qName = new QName("name", "localName");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        Object bean = new Object();
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, Locale.US);
        assertEquals(bean, beanPointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_NameNotNull_eTvt0_QUFG0() {
        QName name = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        Locale locale = new Locale("en", "US");
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        int hashCode = beanPointer.hashCode();
        assertEquals(name.hashCode(), hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_NameNull_eAVo1_XGlS0() {
        QName name = null;
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        Locale locale = new Locale("en", "US");
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        int hashCode = beanPointer.hashCode();
        assertEquals(0, hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanPointerDifferentParent_gWSY8_fid2() {
        DOMNodePointer parent1 = new DOMNodePointer(null, null, null);
        DOMNodePointer parent2 = new DOMNodePointer(null, null, null);
        QName name = new QName("name", "localName");
        BeanPointer beanPointer1 = new BeanPointer(parent1, name, null, null);
        BeanPointer beanPointer2 = new BeanPointer(parent2, name, null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_yOQE1_fid2() {
        QName name = new QName("test", "test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, Locale.US);
        boolean result = beanPointer.isLeaf();
    }
}