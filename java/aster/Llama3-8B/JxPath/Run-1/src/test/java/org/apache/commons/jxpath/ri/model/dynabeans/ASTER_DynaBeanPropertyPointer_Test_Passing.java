/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPropertyPointer_Test_Passing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private DynaBean dynaBean;
    private String[] names;
    private String name;
    private DynaBeanPropertyPointer dynabeanpropertypointer;
    @Mock
    private DynaClass dynaClass;
    @Mock
    private ValueUtils valueUtils;
    @Mock
    private QName qName;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DynaProperty[] dynaProperties;
    @Mock
    private ArrayList properties;
    private static final String CLASS = "class";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_arkd0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, null);
        boolean result = dynaBeanPropertyPointer.isContainer();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames() throws Exception {
        dynabeanpropertypointer = new DynaBeanPropertyPointer(null, dynaBean);
        // Arrange
        DynaProperty dynaProperty1 = mock(DynaProperty.class);
        DynaProperty dynaProperty2 = mock(DynaProperty.class);
        DynaProperty dynaProperty3 = mock(DynaProperty.class);
        when(dynaClass.getDynaProperties()).thenReturn(dynaProperties);
        when(dynaProperties[0]).thenReturn(dynaProperty1);
        when(dynaProperties[1]).thenReturn(dynaProperty2);
        when(dynaProperties[2]).thenReturn(dynaProperty3);
        when(dynaProperty1.getName()).thenReturn("property1");
        when(dynaProperty2.getName()).thenReturn("property2");
        when(dynaProperty3.getName()).thenReturn("property3");
        // Act
        String[] result = dynabeanpropertypointer.getPropertyNames();
        // Assert
        assertArrayEquals(new String[]{"property1", "property2", "property3"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        // Arrange
        String propertyName = "propertyName";
        Object baseValue = "baseValue";
        when(dynaBean.get(propertyName)).thenReturn(baseValue);
        // Act
        Object result = dynabeanpropertypointer.getBaseValue();
        // Assert
        assertEquals(baseValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyIndex() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        int index = 10;
        dynabeanpropertypointer.setPropertyIndex(index);
        Mockito.verify(dynabeanpropertypointer).setPropertyIndex(index);
        Assertions.assertEquals(index, dynabeanpropertypointer.getPropertyIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyName_JYEX0() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        String propertyName = "testProperty";
        dynabeanpropertypointer.setPropertyName(propertyName);
        verify(parent, times(1)).getName();
        assertEquals(propertyName, ((DOMNodePointer) parent).getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActualProperty_caSz0() throws Exception {
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        String propertyName = "propertyName";
        when(dynaClass.getDynaProperty(propertyName)).thenReturn(new DynaProperty(propertyName, null));
        boolean result = dynabeanpropertypointer.isActualProperty();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualPropertyTrue_xeZn0_izmv0() {
        Map<String, Object> map = new HashMap<>();
        DynaClass dynaClass = dynaBean.getDynaClass();
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        boolean result = dynaBeanPropertyPointer.isActualProperty();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualPropertyFalse_hEvh1_LOmg0() {
        Map<String, Object> map = new HashMap<>();
        DynaClass dynaClass = dynaBean.getDynaClass();
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        boolean result = dynaBeanPropertyPointer.isActualProperty();
        assert(!result);
    }
}