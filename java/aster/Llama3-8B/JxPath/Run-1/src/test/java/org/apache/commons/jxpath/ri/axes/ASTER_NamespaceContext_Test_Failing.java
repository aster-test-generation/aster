/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceContext_Test_Failing {
    @Mock
    private SelfContext selfContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NamespaceContext parentContext;
    private NodeIterator iterator;
    private boolean setStarted = false;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodePointer nodePointer;
    private NamespaceContext namespacecontext;
    private NodePointer currentNodePointer;
    private NodeTest nodeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_lSJK0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        NodePointer result = namespaceContext.getCurrentNodePointer();
        assertEquals(NodePointer.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception {
        MockitoAnnotations.initMocks(this);
        iterator = Mockito.mock(NodeIterator.class);
        currentNodePointer = Mockito.mock(NodePointer.class);
        nodeTest = Mockito.mock(NodeTest.class);
        namespacecontext = new NamespaceContext(parentContext, nodeTypeTest);
        // Set up mock behavior
        Mockito.when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        Mockito.when(parentContext.getCurrentNodePointer().namespaceIterator()).thenReturn(iterator);
        Mockito.when(iterator.setPosition(Mockito.anyInt())).thenReturn(true);
        Mockito.when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        // Call the method under test
        boolean result = namespacecontext.nextNode();
        // Verify the result
        Mockito.verify(parentContext, Mockito.times(1)).getCurrentNodePointer();
        Mockito.verify(iterator, Mockito.times(1)).setPosition(Mockito.anyInt());
        Mockito.verify(iterator, Mockito.times(1)).getNodePointer();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_fid2() throws Exception {
        MockitoAnnotations.initMocks(this);
        Mockito.when(parentContext.getCurrentPosition()).thenReturn(0);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeTypeTest);
        Mockito.when(parentContext.nextNode()).thenReturn(true);
        Mockito.when(parentContext.getCurrentPosition()).thenReturn(1);
        boolean result = namespaceContext.setPosition(1);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionValidPosition_zRHG0_fid2() {
        SelfContext parentContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, new NodeTypeTest(1));
        namespaceContext.setPosition(5);
        assertTrue(namespaceContext.getPosition() == 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionInvalidPosition_oBpA1_fid2() {
        SelfContext parentContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, new NodeTypeTest(1));
        namespaceContext.setPosition(3);
        assertTrue(namespaceContext.getPosition() == 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPositionReset_lMHl2_fid2() {
        SelfContext parentContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, new NodeTypeTest(1));
        namespaceContext.setPosition(5);
        namespaceContext.setPosition(3);
        assertTrue(namespaceContext.getPosition() == 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedTrue_NodeTypeNodeNameTest_ReturnsTrue_fgHS3_fid2() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        namespaceContext.nextNode();
        boolean result = namespaceContext.nextNode();
        assertEquals(true, result);
    }
}