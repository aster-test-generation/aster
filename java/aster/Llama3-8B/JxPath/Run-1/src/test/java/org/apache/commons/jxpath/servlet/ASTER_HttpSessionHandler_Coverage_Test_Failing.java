/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Enumeration;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_HttpSessionHandler_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyNullBean_ueFx3() {
        HttpSessionHandler handler = new HttpSessionHandler();
        try {
            handler.setProperty(null, "testProperty", "testValue");
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("bean", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_HandleGetSession_ReturnsSession_uyyD2() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        Object bean = mock(Object.class);
        when(((HttpSessionAndServletContext) bean).getSession()).thenReturn(mock(HttpSession.class));
        handler.collectPropertyNames(set, bean);
        verify(handler, times(1)).collectPropertyNames(set, any(Object.class));
        assertEquals(0, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_SessionAttributeNames_ReturnsEmptyEnumeration_qsij3() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        Object bean = mock(Object.class);
        when(((HttpSessionAndServletContext) bean).getSession()).thenReturn(mock(HttpSession.class));
        when(mock(HttpSession.class).getAttributeNames()).thenReturn(mock(Enumeration.class));
        when(mock(Enumeration.class).hasMoreElements()).thenReturn(false);
        handler.collectPropertyNames(set, bean);
        verify(handler, times(1)).collectPropertyNames(set, any(Object.class));
        assertEquals(0, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_SessionAttributeNames_ReturnsNonEmptyEnumeration_UXJN4_1() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        Object bean = mock(Object.class);
        when(((HttpSessionAndServletContext) bean).getSession()).thenReturn(mock(HttpSession.class));
        when(mock(HttpSession.class).getAttributeNames()).thenReturn(mock(Enumeration.class));
        when(mock(Enumeration.class).hasMoreElements()).thenReturn(true);
        when(mock(Enumeration.class).nextElement()).thenReturn("attribute1");
        handler.collectPropertyNames(set, bean);
        verify(handler, times(1)).collectPropertyNames(set, any(Object.class));
        assertEquals(1, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_SessionAttributeNames_ReturnsNonEmptyEnumeration_UXJN4_2() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        Object bean = mock(Object.class);
        when(((HttpSessionAndServletContext) bean).getSession()).thenReturn(mock(HttpSession.class));
        when(mock(HttpSession.class).getAttributeNames()).thenReturn(mock(Enumeration.class));
        when(mock(Enumeration.class).hasMoreElements()).thenReturn(true);
        when(mock(Enumeration.class).nextElement()).thenReturn("attribute1");
        handler.collectPropertyNames(set, bean);
        verify(handler, times(1)).collectPropertyNames(set, any(Object.class));
        assertEquals("attribute1", set.iterator().next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_SessionAttributeNames_ReturnsNull_GZpq5() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        Object bean = mock(Object.class);
        when(((HttpSessionAndServletContext) bean).getSession()).thenReturn(mock(HttpSession.class));
        when(mock(HttpSession.class).getAttributeNames()).thenReturn(null);
        handler.collectPropertyNames(set, bean);
        verify(handler, times(1)).collectPropertyNames(set, any(Object.class));
        assertEquals(0, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_SessionAttributeNames_ThrowsException_iDGR6() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        Object bean = mock(Object.class);
        when(((HttpSessionAndServletContext) bean).getSession()).thenReturn(mock(HttpSession.class));
        when(mock(HttpSession.class).getAttributeNames()).thenThrow(new RuntimeException("Exception"));
        try {
            handler.collectPropertyNames(set, bean);
            fail("Expected RuntimeException");
        } catch (RuntimeException e) {
            assertEquals("Exception", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_SessionAttributeNames_ReturnsNullElement_aDtc7() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        Object bean = mock(Object.class);
        when(((HttpSessionAndServletContext) bean).getSession()).thenReturn(mock(HttpSession.class));
        when(mock(HttpSession.class).getAttributeNames()).thenReturn(mock(Enumeration.class));
        when(mock(Enumeration.class).hasMoreElements()).thenReturn(true);
        when(mock(Enumeration.class).nextElement()).thenReturn(null);
        handler.collectPropertyNames(set, bean);
        verify(handler, times(1)).collectPropertyNames(set, any(Object.class));
        assertEquals(0, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_SessionAttributeNames_ReturnsNonEmptyEnumeration_UXJN4() {
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet set = new HashSet();
        Object bean = mock(Object.class);
        when(((HttpSessionAndServletContext) bean).getSession()).thenReturn(mock(HttpSession.class));
        when(mock(HttpSession.class).getAttributeNames()).thenReturn(mock(Enumeration.class));
        when(mock(Enumeration.class).hasMoreElements()).thenReturn(true);
        when(mock(Enumeration.class).nextElement()).thenReturn("attribute1");
        handler.collectPropertyNames(set, bean);
        verify(handler, times(1)).collectPropertyNames(set, any(Object.class));
        assertEquals(1, set.size());
        assertEquals("attribute1", set.iterator().next());
    }
}