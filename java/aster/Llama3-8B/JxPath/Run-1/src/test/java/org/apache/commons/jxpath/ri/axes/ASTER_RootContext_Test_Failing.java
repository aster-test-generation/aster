/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Failing {
    @Mock
    private JXPathContextReferenceImpl jxpathContext;
    @Mock
    private DOMNodePointer pointer;
    @Mock
    private JXPathContext jxpathContextObject;
    @Mock
    private EvalContext evalContext;
    private RootContext rootcontext;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JXPathContextReferenceImpl jxpathContextReferenceImpl;
    @Mock
    private RootContext rootContext;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName variableName;
    @Mock
    private Function function;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        rootcontext = new RootContext(jxpathContext, pointer);
        // Arrange
        int position = 1;
        // Act
        boolean result = rootcontext.setPosition(position);
        // Assert
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_2() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(jxpathContext, pointer);
        // Arrange
        Object value = "Test Value";
        int expectedRegister = 0;
        // Act
        int result = rootcontext.setRegisteredValue(value);
        // Assert
    assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_2_fid2() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(jxpathContext, pointer);
        // Arrange
        Object value = "Test Value";
        int expectedRegister = 0;
        // Act
        int result = rootcontext.setRegisteredValue(value);
        // Assert
        assertEquals(value, registers[expectedRegister]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_1() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = new Object();
        }
        rootcontext = new RootContext(jxpathContext, pointer);
        // Test with valid id
        Object result = rootcontext.getRegisteredValue(0);
        // Test with invalid id
        result = rootcontext.getRegisteredValue(MAX_REGISTER);
        // Test with id -1
        result = rootcontext.getRegisteredValue(-1);
        Assertions.assertEquals(registers[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_XbDo0_wLhL0() {
        JXPathContextReferenceImpl jxpathContext = new JXPathContextReferenceImpl(null, null, null);
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.US, "id");
        RootContext rootContext = new RootContext(jxpathContext, pointer);
        boolean result = rootContext.nextNode();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeFalse_Rtlw1_hxzN0() {
        JXPathContextReferenceImpl jxpathContext = new JXPathContextReferenceImpl(null, null, null);
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.US, "id");
        RootContext rootContext = new RootContext(jxpathContext, pointer);
        boolean result = rootContext.nextNode();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_hZwN0() throws Exception {
        RootContext rootcontext = new RootContext(jxpathContext, domNodePointer);
        Object expected = "expected value";
        Object actual = rootcontext.getValue();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRegisteredValueAvailableRegisterMaxRegister_OdOF2_cChx0() {
        RootContext rootContext = new RootContext(new JXPathContextReferenceImpl(null, null, null), new DOMNodePointer(null, Locale.US, "id"));
        for (int i = 0;i < 10;i++) {
            rootContext.setRegisteredValue("value");
        }
        int result = rootContext.getCurrentPosition();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition_fhzT0_tHSz0() {
        JXPathContextReferenceImpl jxpathContext = new JXPathContextReferenceImpl(null, null, null);
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.US, "id");
        RootContext rootContext = new RootContext(jxpathContext, pointer);
        assertEquals(0, rootContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(jxpathContext, pointer);
        // Arrange
        Object value = "Test Value";
        int expectedRegister = 0;
        // Act
        int result = rootcontext.setRegisteredValue(value);
        // Assert
        assertEquals(expectedRegister, result);
        assertEquals(value, registers[expectedRegister]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = new Object();
        }
        rootcontext = new RootContext(jxpathContext, pointer);
        // Test with valid id
        Object result = rootcontext.getRegisteredValue(0);
        Assertions.assertEquals(registers[0], result);
        // Test with invalid id
        result = rootcontext.getRegisteredValue(MAX_REGISTER);
        Assertions.assertEquals(RootContext.UNKNOWN_VALUE, result);
        // Test with id -1
        result = rootcontext.getRegisteredValue(-1);
        Assertions.assertEquals(RootContext.UNKNOWN_VALUE, result);
    }
}