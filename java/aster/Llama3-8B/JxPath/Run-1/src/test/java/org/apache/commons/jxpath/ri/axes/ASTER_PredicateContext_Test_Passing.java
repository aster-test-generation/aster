/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PredicateContext_Test_Passing {
    @Mock
    private Expression nameTestExpression;
    @Mock
    private PropertyPointer dynamicPropertyPointer;
    @Mock
    private Constant expression;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private Constant constant;
    @Mock
    private SelfContext selfContext;
    private PredicateContext predicatecontext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private PredicateContext predicateContext;
    @Mock
    private NodePointer nodePointer;
    private boolean done = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_LFLo0() {
        SelfContext selfContext = new SelfContext(null, null);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, null);
        Constant constant = new Constant("test");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        predicateContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset2_Cdfh1() {
        SelfContext selfContext = new SelfContext(null, null);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, null);
        Constant constant = new Constant(10);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        predicateContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset3_ORAT2() {
        SelfContext selfContext = new SelfContext(null, null);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, null);
        Constant constant = new Constant(10.5);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        predicateContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeOkFalse_jsxI7() {
        PredicateContext predicateContext = new PredicateContext(new NamespaceContext(new SelfContext(null, null), null), new Constant("test"));
        boolean result = predicateContext.nextNode();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet() throws Exception {
        predicatecontext = new PredicateContext(parentContext, expression);
        // Arrange
        when(parentContext.nextSet()).thenReturn(true);
        // Act
        boolean result = predicatecontext.nextSet();
        // Assert
        assertEquals(true, result);
        verify(parentContext, times(1)).nextSet();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_PositionOutOfRange_stQL0() {
        predicatecontext = new PredicateContext(parentContext, expression);
        String pnameTestExpression = "pnameTestExpression";
        DynamicPropertyPointer pdynamicPropertyPointer = null; // Declare the variable
        boolean result = predicatecontext.setPosition(5);
        Assertions.assertFalse(result);
    }
}