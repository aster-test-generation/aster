/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Passing {
    @Mock
    private JXPathContextReferenceImpl jxpathContext;
    @Mock
    private DOMNodePointer pointer;
    @Mock
    private JXPathContext jxpathContextObject;
    @Mock
    private EvalContext evalContext;
    private RootContext rootcontext;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JXPathContextReferenceImpl jxpathContextReferenceImpl;
    @Mock
    private RootContext rootContext;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName variableName;
    @Mock
    private Function function;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAbsoluteRootContext() throws Exception {
        rootcontext = new RootContext(jxpathContext, null);
        // Arrange
        when(jxpathContext.getAbsoluteRootContext()).thenReturn(evalContext);
        // Act
        EvalContext actual = rootcontext.getAbsoluteRootContext();
        // Assert
        assertEquals(evalContext, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction() throws Exception {
        rootcontext = new RootContext(jxpathContext, null);
        QName functionName = new QName("functionName");
        Object[] parameters = new Object[0];
        when(jxpathContext.getFunction(functionName, parameters)).thenReturn(function);
        Function result = rootcontext.getFunction(functionName, parameters);
        assertEquals(function, result);
        verify(jxpathContext).getFunction(functionName, parameters);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRegisteredValue_1() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = null;
        }
        availableRegister = 0;
        rootcontext = new RootContext(jxpathContext, pointer);
        // Arrange
        Object value = "Test Value";
        int expectedRegister = 0;
        // Act
        int result = rootcontext.setRegisteredValue(value);
        // Assert
        assertEquals(expectedRegister, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_2() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = new Object();
        }
        rootcontext = new RootContext(jxpathContext, pointer);
        // Test with valid id
        Object result = rootcontext.getRegisteredValue(0);
        // Test with invalid id
        result = rootcontext.getRegisteredValue(MAX_REGISTER);
        // Test with id -1
        result = rootcontext.getRegisteredValue(-1);
        Assertions.assertEquals(RootContext.UNKNOWN_VALUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRootContext() throws Exception {
        MockitoAnnotations.initMocks(this);
        rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        assertEquals(rootcontext, rootcontext.getRootContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PUIV1() throws Exception {
        RootContext rootContext = new RootContext(jxpathContext, domNodePointer);
        NodePointer pointer = domNodePointer;
        NodePointer actual = rootContext.getCurrentNodePointer();
        Assertions.assertEquals(pointer, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_rdYt0_HvmO0() {
        JXPathContextReferenceImpl jxpathContext = new JXPathContextReferenceImpl(null, null, null);
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.US, "id");
        RootContext rootContext = new RootContext(jxpathContext, pointer);
        NodePointer actual = rootContext.getCurrentNodePointer();
        assert actual == pointer;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRegisteredValueInvalidId_FcaT1_ttrs0() {
        RootContext rootContext = new RootContext(new JXPathContextReferenceImpl(null, null, null), new DOMNodePointer(null, Locale.US));
        Object result = rootContext.getRegisteredValue(1);
        assertEquals(rootContext.getRegisteredValue(1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRegisteredValueMinusOne_dSeM3_XPFJ0() {
        RootContext rootContext = new RootContext(new JXPathContextReferenceImpl(null, null, new DOMNodePointer(null, null, "id")), new DOMNodePointer(null, Locale.US, "id"));
        Object result = rootContext.getRegisteredValue(-1);
        assertEquals(rootContext.getRegisteredValue(-1), result);
    }
}