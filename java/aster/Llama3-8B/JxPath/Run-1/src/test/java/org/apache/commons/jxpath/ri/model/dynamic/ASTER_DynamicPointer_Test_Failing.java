/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Collection;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Failing {
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private QName name;
    @Mock
    private Object bean;
    @Mock
    private Locale locale;
    private DynamicPointer dynamicpointer;
    @Mock
    private QName qName;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private DynamicAttributeIterator dynamicAttributeIterator;
    private DynamicPointer dynamicPointer;
    @Mock
    private QName qname;
    @Mock
    private PageContextHandler handler;
    @Mock
    private DynamicPointer parent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameNameSameBean_gCzO5() {
        DynamicPointer obj1 = new DynamicPointer(new QName("name", "localName"), new Object(), new PageContextHandler(), Locale.US);
        DynamicPointer obj2 = new DynamicPointer(new QName("name", "localName"), new Object(), new PageContextHandler(), Locale.US);
        boolean result = obj1.equals(obj2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynamicpointer = new DynamicPointer(qName, bean, pageContextHandler, locale);
        // Arrange
        when(qName.toString()).thenReturn("someName");
        when(bean instanceof Collection).thenReturn(true);
        // Act
        boolean result = dynamicpointer.isCollection();
        // Assert
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        dynamicpointer = new DynamicPointer(null, bean, null, null);
        // Arrange
        when(name.hashCode()).thenReturn(1);
        when(bean.hashCode()).thenReturn(2);
        // Act
        int result = dynamicpointer.hashCode();
        // Assert
        assertEquals(2 + 1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() {
        name = new QName("testName");
        dynamicPointer = new DynamicPointer(null, name, null, pageContextHandler);
        // Arrange
        when(dynamicPointer.attributeIterator(name)).thenReturn(dynamicAttributeIterator);
        // Act
        NodeIterator result = dynamicPointer.attributeIterator(name);
        // Assert
        assertEquals(dynamicAttributeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodeIterator() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynamicpointer = new DynamicPointer(qname, bean, pageContextHandler, locale);
        String property = "property";
        boolean reverse = false;
        NodePointer startWith = Mockito.mock(NodePointer.class);
        NodeIterator nodeIterator = dynamicpointer.createNodeIterator(property, reverse, startWith);
        Mockito.verify(dynamicpointer).createNodeIterator(property, reverse, startWith);
        Assertions.assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() {
        dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        // Arrange
        String expectedName = "expectedName";
        // Act
        QName actualName = dynamicpointer.getName();
        // Assert
    assertNull(expectedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Omtb0() {
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("lang", "country", "variant");
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("qualifiedName"), bean, handler, locale);
        QName result = dynamicPointer.getName();
        assert result.getName().equals("localName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        bean = "some value";
        dynamicpointer = new DynamicPointer(null, null, pageContextHandler, locale);
        assertNull(bean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafTrue_jjlF0() {
        QName qName = new QName("name", "localName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        boolean result = dynamicPointer.isLeaf();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_fid1() {
        dynamicpointer = new DynamicPointer(name, bean, handler, locale);
        // Arrange
        String expectedName = "expectedName";
        // Act
        QName actualName = dynamicpointer.getName();
        // Assert
        assertEquals(expectedName, actualName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNotNullParent_dPGN1_fid1() {
        DynamicPointer pointer = new DynamicPointer(new DOMNodePointer(null, new Locale("en"), "id"), new QName("prefix", "localName"), null, new PageContextHandler());
        String result = pointer.asPath();
        assertEquals(pointer.getParent().asPath(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid1() {
        bean = "some value";
        dynamicpointer = new DynamicPointer(null, null, pageContextHandler, locale);
        assertEquals(bean, dynamicpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDynamicPropertyDeclarationSupported_v_HTss0_fid2() throws Exception {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), pageContextHandler, Locale.US);
        boolean result = dynamicPointer.isLeaf();
        Assertions.assertTrue(result);
    }
}