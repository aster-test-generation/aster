/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JDOMNamespacePointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_eLdw0() {
        JDOMNamespacePointer obj = new JDOMNamespacePointer(null, "prefix");
        assertEquals(true, obj.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_Sayl1() {
        JDOMNamespacePointer obj1 = new JDOMNamespacePointer(null, "prefix");
        JDOMNamespacePointer obj2 = new JDOMNamespacePointer(null, "prefix");
        assertEquals(true, obj1.equals(obj2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_iacM2() {
        JDOMNamespacePointer obj = new JDOMNamespacePointer(null, "prefix");
        Object obj2 = new Object();
        assertEquals(false, obj.equals(obj2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_MJUj3() {
        JDOMNamespacePointer obj = new JDOMNamespacePointer(null, "prefix");
        assertEquals(false, obj.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentPrefix_SWwe4() {
        JDOMNamespacePointer obj1 = new JDOMNamespacePointer(null, "prefix1");
        JDOMNamespacePointer obj2 = new JDOMNamespacePointer(null, "prefix2");
        assertEquals(false, obj1.equals(obj2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_sDib0() {
        JDOMNamespacePointer namespacePointer = new JDOMNamespacePointer(null, "prefix");
        try {
            namespacePointer.setValue("value");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            assertEquals("Cannot modify a namespace", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_vSRl0() {
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(null, "prefix");
        assertFalse(jdomNamespacePointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_UbHh0() {
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(null, "prefix");
        QName result = jdomNamespacePointer.getName();
        assertNull(result.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullNamespaceURI_nKoL0() {
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(null, "prefix", "namespaceURI");
        String namespaceURI = jdomNamespacePointer.getNamespaceURI();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NamespaceURINotNull_akuc1() {
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(new JDOMNamespacePointer(null, "prefix"), "prefix", "namespaceURI");
        String namespaceURI = jdomNamespacePointer.getNamespaceURI();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_BufferLengthIsZero_SDog0() {
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(null, "prefix");
        String result = jdomNamespacePointer.asPath();
        assertEquals("namespace::prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_BufferLengthIsNotZeroAndLastCharIsNotSlash_rRrA1() {
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(new DOMNodePointer(null, Locale.US, "id"), "prefix");
        String result = jdomNamespacePointer.asPath();
        assertEquals("id('id')/namespace::prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_tORm0_UZYF0() {
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(null, null);
        DOMNodePointer nodePointer1 = new DOMNodePointer(null, null, null);
        DOMNodePointer nodePointer2 = new DOMNodePointer(null, null, null);
        int result = jdomNamespacePointer.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_piwf0_PDxU0() {
        QName qName = new QName("prefix", "localName");
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(null, "prefix");
        int length = jdomNamespacePointer.getLength();
        assert(length == 1);
    }
}